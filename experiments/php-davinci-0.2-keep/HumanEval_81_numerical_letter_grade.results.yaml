name: HumanEval_81_numerical_letter_grade
language: php
results:
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n\t$letter_grades\
    \ = [];\n\tforeach ($grades as $grade) {\n\t\tif ($grade >= 4.0) {\n\t\t\t$letter_grades[]\
    \ = 'A+';\n\t\t} elseif ($grade >= 3.7) {\n\t\t\t$letter_grades[] = 'A';\n\t\t\
    } elseif ($grade >= 3.3) {\n\t\t\t$letter_grades[] = 'A-';\n\t\t} elseif ($grade\
    \ >= 3.0) {\n\t\t\t$letter_grades[] = 'B+';\n\t\t} elseif ($grade >= 2.7) {\n\t\
    \t\t$letter_grades[] = 'B';\n\t\t} elseif ($grade >= 2.3) {\n\t\t\t$letter_grades[]\
    \ = 'B-';\n\t\t} elseif ($grade >= 2.0) {\n\t\t\t$letter_grades[] = 'C+';\n\t\t\
    } elseif ($grade >= 1.7) {\n\t\t\t$letter_grades[] = 'C';\n\t\t} elseif ($grade\
    \ >= 1.3) {\n\t\t\t$letter_grades[] = 'C-';\n\t\t} elseif ($grade >= 1.0) {\n\t\
    \t\t$letter_grades[] = 'D+';\n\t\t} elseif ($grade >= 0.7) {\n\t\t\t$letter_grades[]\
    \ = 'D';\n\t\t} elseif ($grade >= 0.0) {\n\t\t\t$letter_grades[] = 'D-';\n\t\t\
    } else {\n\t\t\t$letter_grades[] = 'E';\n\t\t}\n\t}\n\treturn $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_4gjzt82.php:62\n\
    Stack trace:\n#0 /tmp/tmp_4gjzt82.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp_4gjzt82.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_array[] = 'A+';\n        } elseif ($grade >= 3.7) {\n      \
    \      $grades_array[] = 'A';\n        } elseif ($grade >= 3.3) {\n          \
    \  $grades_array[] = 'A-';\n        } elseif ($grade >= 3.0) {\n            $grades_array[]\
    \ = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_array[] = 'B';\n\
    \        } elseif ($grade >= 2.3) {\n            $grades_array[] = 'B-';\n   \
    \     } elseif ($grade >= 2.0) {\n            $grades_array[] = 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            $grades_array[] = 'C';\n        } elseif\
    \ ($grade >= 1.3) {\n            $grades_array[] = 'C-';\n        } elseif ($grade\
    \ >= 1.0) {\n            $grades_array[] = 'D+';\n        } elseif ($grade >=\
    \ 0.7) {\n            $grades_array[] = 'D';\n        } elseif ($grade >= 0.0)\
    \ {\n            $grades_array[] = 'D-';\n        } else {\n            $grades_array[]\
    \ = 'E';\n        }\n    }\n    return $grades_array;\n}\n\n$grades = [4.0, 3,\
    \ 1.7, 2, 3.5];\necho '<pre>';\nprint_r(numerical_letter_grade($grades));\necho\
    \ '</pre>';\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n\
    \    [4] => A-\n)\n</pre>"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpluekxn_l.php:66\n\
    Stack trace:\n#0 /tmp/tmpluekxn_l.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpluekxn_l.php\
    \ on line 66\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyhzve3gz.php:62\n\
    Stack trace:\n#0 /tmp/tmpyhzve3gz.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpyhzve3gz.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfm5vro4c.php:62\n\
    Stack trace:\n#0 /tmp/tmpfm5vro4c.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpfm5vro4c.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_array[] = 'A+';\n        } elseif ($grade >= 3.7) {\n      \
    \      $grades_array[] = 'A';\n        } elseif ($grade >= 3.3) {\n          \
    \  $grades_array[] = 'A-';\n        } elseif ($grade >= 3.0) {\n            $grades_array[]\
    \ = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_array[] = 'B';\n\
    \        } elseif ($grade >= 2.3) {\n            $grades_array[] = 'B-';\n   \
    \     } elseif ($grade >= 2.0) {\n            $grades_array[] = 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            $grades_array[] = 'C';\n        } elseif\
    \ ($grade >= 1.3) {\n            $grades_array[] = 'C-';\n        } elseif ($grade\
    \ >= 1.0) {\n            $grades_array[] = 'D+';\n        } elseif ($grade >=\
    \ 0.7) {\n            $grades_array[] = 'D';\n        } elseif ($grade >= 0.0)\
    \ {\n            $grades_array[] = 'D-';\n        } else {\n            $grades_array[]\
    \ = 'E';\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp__82l6ea.php:62\n\
    Stack trace:\n#0 /tmp/tmp__82l6ea.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp__82l6ea.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_letter\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade == 4.0) {\n   \
    \         $grades_letter[] = 'A+';\n        } elseif ($grade > 3.7) {\n      \
    \      $grades_letter[] = 'A';\n        } elseif ($grade > 3.3) {\n          \
    \  $grades_letter[] = 'A-';\n        } elseif ($grade > 3.0) {\n            $grades_letter[]\
    \ = 'B+';\n        } elseif ($grade > 2.7) {\n            $grades_letter[] = 'B';\n\
    \        } elseif ($grade > 2.3) {\n            $grades_letter[] = 'B-';\n   \
    \     } elseif ($grade > 2.0) {\n            $grades_letter[] = 'C+';\n      \
    \  } elseif ($grade > 1.7) {\n            $grades_letter[] = 'C';\n        } elseif\
    \ ($grade > 1.3) {\n            $grades_letter[] = 'C-';\n        } elseif ($grade\
    \ > 1.0) {\n            $grades_letter[] = 'D+';\n        } elseif ($grade > 0.7)\
    \ {\n            $grades_letter[] = 'D';\n        } elseif ($grade > 0.0) {\n\
    \            $grades_letter[] = 'D-';\n        } else {\n            $grades_letter[]\
    \ = 'E';\n        }\n    }\n    return $grades_letter;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_array[] = 'A+';\n        } elseif ($grade >= 3.7) {\n      \
    \      $grades_array[] = 'A';\n        } elseif ($grade >= 3.3) {\n          \
    \  $grades_array[] = 'A-';\n        } elseif ($grade >= 3.0) {\n            $grades_array[]\
    \ = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_array[] = 'B';\n\
    \        } elseif ($grade >= 2.3) {\n            $grades_array[] = 'B-';\n   \
    \     } elseif ($grade >= 2.0) {\n            $grades_array[] = 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            $grades_array[] = 'C';\n        } elseif\
    \ ($grade >= 1.3) {\n            $grades_array[] = 'C-';\n        } elseif ($grade\
    \ >= 1.0) {\n            $grades_array[] = 'D+';\n        } elseif ($grade >=\
    \ 0.7) {\n            $grades_array[] = 'D';\n        } elseif ($grade >= 0.0)\
    \ {\n            $grades_array[] = 'D-';\n        } else {\n            $grades_array[]\
    \ = 'E';\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvmdv1p0w.php:62\n\
    Stack trace:\n#0 /tmp/tmpvmdv1p0w.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpvmdv1p0w.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvsre5cle.php:62\n\
    Stack trace:\n#0 /tmp/tmpvsre5cle.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpvsre5cle.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades =\
    \ array_map(function($grade) {\n        if ($grade >= 4.0) {\n            return\
    \ 'A+';\n        } elseif ($grade >= 3.7) {\n            return 'A';\n       \
    \ } elseif ($grade >= 3.3) {\n            return 'A-';\n        } elseif ($grade\
    \ >= 3.0) {\n            return 'B+';\n        } elseif ($grade >= 2.7) {\n  \
    \          return 'B';\n        } elseif ($grade >= 2.3) {\n            return\
    \ 'B-';\n        } elseif ($grade >= 2.0) {\n            return 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            return 'C';\n        } elseif ($grade\
    \ >= 1.3) {\n            return 'C-';\n        } elseif ($grade >= 1.0) {\n  \
    \          return 'D+';\n        } elseif ($grade >= 0.7) {\n            return\
    \ 'D';\n        } elseif ($grade >= 0.0) {\n            return 'D-';\n       \
    \ } else {\n            return 'E';\n        }\n    }, $grades);\n    return $grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplgnd9axj.php:61\n\
    Stack trace:\n#0 /tmp/tmplgnd9axj.php(69): test()\n#1 {main}\n  thrown in /tmp/tmplgnd9axj.php\
    \ on line 61\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzvf8wi5y.php:62\n\
    Stack trace:\n#0 /tmp/tmpzvf8wi5y.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpzvf8wi5y.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnb9pfwwd.php:62\n\
    Stack trace:\n#0 /tmp/tmpnb9pfwwd.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpnb9pfwwd.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_letter\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_letter[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $grades_letter[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $grades_letter[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $grades_letter[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_letter[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $grades_letter[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $grades_letter[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $grades_letter[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $grades_letter[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $grades_letter[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $grades_letter[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $grades_letter[] = 'D-';\n        } else {\n\
    \            $grades_letter[] = 'E';\n        }\n    }\n    return $grades_letter;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgxngj121.php:62\n\
    Stack trace:\n#0 /tmp/tmpgxngj121.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpgxngj121.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6f8qwe01.php:62\n\
    Stack trace:\n#0 /tmp/tmp6f8qwe01.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp6f8qwe01.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_array[] = 'A+';\n        } elseif ($grade >= 3.7) {\n      \
    \      $grades_array[] = 'A';\n        } elseif ($grade >= 3.3) {\n          \
    \  $grades_array[] = 'A-';\n        } elseif ($grade >= 3.0) {\n            $grades_array[]\
    \ = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_array[] = 'B';\n\
    \        } elseif ($grade >= 2.3) {\n            $grades_array[] = 'B-';\n   \
    \     } elseif ($grade >= 2.0) {\n            $grades_array[] = 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            $grades_array[] = 'C';\n        } elseif\
    \ ($grade >= 1.3) {\n            $grades_array[] = 'C-';\n        } elseif ($grade\
    \ >= 1.0) {\n            $grades_array[] = 'D+';\n        } elseif ($grade >=\
    \ 0.7) {\n            $grades_array[] = 'D';\n        } elseif ($grade >= 0.0)\
    \ {\n            $grades_array[] = 'D-';\n        } else {\n            $grades_array[]\
    \ = 'E';\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgdo1rmdd.php:62\n\
    Stack trace:\n#0 /tmp/tmpgdo1rmdd.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpgdo1rmdd.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letters =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $letters[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $letters[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $letters[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $letters[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $letters[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $letters[] = 'B-';\n        } elseif ($grade >= 2.0)\
    \ {\n            $letters[] = 'C+';\n        } elseif ($grade >= 1.7) {\n    \
    \        $letters[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $letters[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $letters[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $letters[] = 'D';\n        }\
    \ elseif ($grade >= 0.0) {\n            $letters[] = 'D-';\n        } else {\n\
    \            $letters[] = 'E';\n        }\n    }\n    return $letters;\n}\n\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkz7p561t.php:62\n\
    Stack trace:\n#0 /tmp/tmpkz7p561t.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpkz7p561t.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_array[] = 'A+';\n        } elseif ($grade >= 3.7) {\n      \
    \      $grades_array[] = 'A';\n        } elseif ($grade >= 3.3) {\n          \
    \  $grades_array[] = 'A-';\n        } elseif ($grade >= 3.0) {\n            $grades_array[]\
    \ = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_array[] = 'B';\n\
    \        } elseif ($grade >= 2.3) {\n            $grades_array[] = 'B-';\n   \
    \     } elseif ($grade >= 2.0) {\n            $grades_array[] = 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            $grades_array[] = 'C';\n        } elseif\
    \ ($grade >= 1.3) {\n            $grades_array[] = 'C-';\n        } elseif ($grade\
    \ >= 1.0) {\n            $grades_array[] = 'D+';\n        } elseif ($grade >=\
    \ 0.7) {\n            $grades_array[] = 'D';\n        } elseif ($grade >= 0.0)\
    \ {\n            $grades_array[] = 'D-';\n        } else {\n            $grades_array[]\
    \ = 'E';\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphciy4kfz.php:62\n\
    Stack trace:\n#0 /tmp/tmphciy4kfz.php(70): test()\n#1 {main}\n  thrown in /tmp/tmphciy4kfz.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_array[] = 'A+';\n        } elseif ($grade >= 3.7) {\n      \
    \      $grades_array[] = 'A';\n        } elseif ($grade >= 3.3) {\n          \
    \  $grades_array[] = 'A-';\n        } elseif ($grade >= 3.0) {\n            $grades_array[]\
    \ = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_array[] = 'B';\n\
    \        } elseif ($grade >= 2.3) {\n            $grades_array[] = 'B-';\n   \
    \     } elseif ($grade >= 2.0) {\n            $grades_array[] = 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            $grades_array[] = 'C';\n        } elseif\
    \ ($grade >= 1.3) {\n            $grades_array[] = 'C-';\n        } elseif ($grade\
    \ >= 1.0) {\n            $grades_array[] = 'D+';\n        } elseif ($grade >=\
    \ 0.7) {\n            $grades_array[] = 'D';\n        } elseif ($grade >= 0.0)\
    \ {\n            $grades_array[] = 'D-';\n        } else {\n            $grades_array[]\
    \ = 'E';\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpj28b7e3l.php:62\n\
    Stack trace:\n#0 /tmp/tmpj28b7e3l.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpj28b7e3l.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn647tflw.php:62\n\
    Stack trace:\n#0 /tmp/tmpn647tflw.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpn647tflw.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade == 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade > 3.7) {\n      \
    \      $letter_grades[] = 'A';\n        } elseif ($grade > 3.3) {\n          \
    \  $letter_grades[] = 'A-';\n        } elseif ($grade > 3.0) {\n            $letter_grades[]\
    \ = 'B+';\n        } elseif ($grade > 2.7) {\n            $letter_grades[] = 'B';\n\
    \        } elseif ($grade > 2.3) {\n            $letter_grades[] = 'B-';\n   \
    \     } elseif ($grade > 2.0) {\n            $letter_grades[] = 'C+';\n      \
    \  } elseif ($grade > 1.7) {\n            $letter_grades[] = 'C';\n        } elseif\
    \ ($grade > 1.3) {\n            $letter_grades[] = 'C-';\n        } elseif ($grade\
    \ > 1.0) {\n            $letter_grades[] = 'D+';\n        } elseif ($grade > 0.7)\
    \ {\n            $letter_grades[] = 'D';\n        } elseif ($grade > 0.0) {\n\
    \            $letter_grades[] = 'D-';\n        } else {\n            $letter_grades[]\
    \ = 'E';\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade == 4.0) {\n   \
    \         $grades_array[] = 'A+';\n        } elseif ($grade > 3.7) {\n       \
    \     $grades_array[] = 'A';\n        } elseif ($grade > 3.3) {\n            $grades_array[]\
    \ = 'A-';\n        } elseif ($grade > 3.0) {\n            $grades_array[] = 'B+';\n\
    \        } elseif ($grade > 2.7) {\n            $grades_array[] = 'B';\n     \
    \   } elseif ($grade > 2.3) {\n            $grades_array[] = 'B-';\n        }\
    \ elseif ($grade > 2.0) {\n            $grades_array[] = 'C+';\n        } elseif\
    \ ($grade > 1.7) {\n            $grades_array[] = 'C';\n        } elseif ($grade\
    \ > 1.3) {\n            $grades_array[] = 'C-';\n        } elseif ($grade > 1.0)\
    \ {\n            $grades_array[] = 'D+';\n        } elseif ($grade > 0.7) {\n\
    \            $grades_array[] = 'D';\n        } elseif ($grade > 0.0) {\n     \
    \       $grades_array[] = 'D-';\n        } else {\n            $grades_array[]\
    \ = 'E';\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $letter_grades\
    \ = [];\n  foreach ($grades as $grade) {\n    if ($grade >= 4.0) {\n      $letter_grades[]\
    \ = 'A+';\n    } elseif ($grade >= 3.7) {\n      $letter_grades[] = 'A';\n   \
    \ } elseif ($grade >= 3.3) {\n      $letter_grades[] = 'A-';\n    } elseif ($grade\
    \ >= 3.0) {\n      $letter_grades[] = 'B+';\n    } elseif ($grade >= 2.7) {\n\
    \      $letter_grades[] = 'B';\n    } elseif ($grade >= 2.3) {\n      $letter_grades[]\
    \ = 'B-';\n    } elseif ($grade >= 2.0) {\n      $letter_grades[] = 'C+';\n  \
    \  } elseif ($grade >= 1.7) {\n      $letter_grades[] = 'C';\n    } elseif ($grade\
    \ >= 1.3) {\n      $letter_grades[] = 'C-';\n    } elseif ($grade >= 1.0) {\n\
    \      $letter_grades[] = 'D+';\n    } elseif ($grade >= 0.7) {\n      $letter_grades[]\
    \ = 'D';\n    } elseif ($grade >= 0.0) {\n      $letter_grades[] = 'D-';\n   \
    \ } else {\n      $letter_grades[] = 'E';\n    }\n  }\n  return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8m5ob8n4.php:62\n\
    Stack trace:\n#0 /tmp/tmp8m5ob8n4.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp8m5ob8n4.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmph00a68qv.php:62\n\
    Stack trace:\n#0 /tmp/tmph00a68qv.php(70): test()\n#1 {main}\n  thrown in /tmp/tmph00a68qv.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpaisyo2hh.php:62\n\
    Stack trace:\n#0 /tmp/tmpaisyo2hh.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpaisyo2hh.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2pyir0zp.php:62\n\
    Stack trace:\n#0 /tmp/tmp2pyir0zp.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp2pyir0zp.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpm2ug7yl5.php:62\n\
    Stack trace:\n#0 /tmp/tmpm2ug7yl5.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpm2ug7yl5.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfgxtn6xf.php:62\n\
    Stack trace:\n#0 /tmp/tmpfgxtn6xf.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpfgxtn6xf.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letters =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $letters[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $letters[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $letters[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $letters[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $letters[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $letters[] = 'B-';\n        } elseif ($grade >= 2.0)\
    \ {\n            $letters[] = 'C+';\n        } elseif ($grade >= 1.7) {\n    \
    \        $letters[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $letters[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $letters[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $letters[] = 'D';\n        }\
    \ elseif ($grade >= 0.0) {\n            $letters[] = 'D-';\n        } else {\n\
    \            $letters[] = 'E';\n        }\n    }\n    return $letters;\n}\n\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptgrd3ofu.php:62\n\
    Stack trace:\n#0 /tmp/tmptgrd3ofu.php(70): test()\n#1 {main}\n  thrown in /tmp/tmptgrd3ofu.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpopieoon3.php:62\n\
    Stack trace:\n#0 /tmp/tmpopieoon3.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpopieoon3.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpu3_8o655.php:62\n\
    Stack trace:\n#0 /tmp/tmpu3_8o655.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpu3_8o655.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpz6ptdhnm.php:62\n\
    Stack trace:\n#0 /tmp/tmpz6ptdhnm.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpz6ptdhnm.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_array[] = 'A+';\n        } elseif ($grade >= 3.7) {\n      \
    \      $grades_array[] = 'A';\n        } elseif ($grade >= 3.3) {\n          \
    \  $grades_array[] = 'A-';\n        } elseif ($grade >= 3.0) {\n            $grades_array[]\
    \ = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_array[] = 'B';\n\
    \        } elseif ($grade >= 2.3) {\n            $grades_array[] = 'B-';\n   \
    \     } elseif ($grade >= 2.0) {\n            $grades_array[] = 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            $grades_array[] = 'C';\n        } elseif\
    \ ($grade >= 1.3) {\n            $grades_array[] = 'C-';\n        } elseif ($grade\
    \ >= 1.0) {\n            $grades_array[] = 'D+';\n        } elseif ($grade >=\
    \ 0.7) {\n            $grades_array[] = 'D';\n        } elseif ($grade >= 0.0)\
    \ {\n            $grades_array[] = 'D-';\n        } else {\n            $grades_array[]\
    \ = 'E';\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpoj80ad4d.php:62\n\
    Stack trace:\n#0 /tmp/tmpoj80ad4d.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpoj80ad4d.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_array[] = 'A+';\n        } elseif ($grade >= 3.7) {\n      \
    \      $grades_array[] = 'A';\n        } elseif ($grade >= 3.3) {\n          \
    \  $grades_array[] = 'A-';\n        } elseif ($grade >= 3.0) {\n            $grades_array[]\
    \ = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_array[] = 'B';\n\
    \        } elseif ($grade >= 2.3) {\n            $grades_array[] = 'B-';\n   \
    \     } elseif ($grade >= 2.0) {\n            $grades_array[] = 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            $grades_array[] = 'C';\n        } elseif\
    \ ($grade >= 1.3) {\n            $grades_array[] = 'C-';\n        } elseif ($grade\
    \ >= 1.0) {\n            $grades_array[] = 'D+';\n        } elseif ($grade >=\
    \ 0.7) {\n            $grades_array[] = 'D';\n        } elseif ($grade >= 0.0)\
    \ {\n            $grades_array[] = 'D-';\n        } else {\n            $grades_array[]\
    \ = 'E';\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpis49ii8w.php:62\n\
    Stack trace:\n#0 /tmp/tmpis49ii8w.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpis49ii8w.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpt75_roq4.php:62\n\
    Stack trace:\n#0 /tmp/tmpt75_roq4.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpt75_roq4.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpiwfqi93i.php:62\n\
    Stack trace:\n#0 /tmp/tmpiwfqi93i.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpiwfqi93i.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphxc3ek24.php:62\n\
    Stack trace:\n#0 /tmp/tmphxc3ek24.php(70): test()\n#1 {main}\n  thrown in /tmp/tmphxc3ek24.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmaj275b1.php:62\n\
    Stack trace:\n#0 /tmp/tmpmaj275b1.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpmaj275b1.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3dpn1pt8.php:62\n\
    Stack trace:\n#0 /tmp/tmp3dpn1pt8.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp3dpn1pt8.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjh3bkpdx.php:62\n\
    Stack trace:\n#0 /tmp/tmpjh3bkpdx.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpjh3bkpdx.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpu3ribum9.php:62\n\
    Stack trace:\n#0 /tmp/tmpu3ribum9.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpu3ribum9.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpo_pmec2s.php:62\n\
    Stack trace:\n#0 /tmp/tmpo_pmec2s.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpo_pmec2s.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcq1e69ad.php:62\n\
    Stack trace:\n#0 /tmp/tmpcq1e69ad.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpcq1e69ad.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0tgjg0fh.php:62\n\
    Stack trace:\n#0 /tmp/tmp0tgjg0fh.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp0tgjg0fh.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4kn3iixk.php:62\n\
    Stack trace:\n#0 /tmp/tmp4kn3iixk.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp4kn3iixk.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades =\
    \ array_map(function($grade) {\n        if ($grade >= 4.0) {\n            return\
    \ 'A+';\n        } elseif ($grade >= 3.7) {\n            return 'A';\n       \
    \ } elseif ($grade >= 3.3) {\n            return 'A-';\n        } elseif ($grade\
    \ >= 3.0) {\n            return 'B+';\n        } elseif ($grade >= 2.7) {\n  \
    \          return 'B';\n        } elseif ($grade >= 2.3) {\n            return\
    \ 'B-';\n        } elseif ($grade >= 2.0) {\n            return 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            return 'C';\n        } elseif ($grade\
    \ >= 1.3) {\n            return 'C-';\n        } elseif ($grade >= 1.0) {\n  \
    \          return 'D+';\n        } elseif ($grade >= 0.7) {\n            return\
    \ 'D';\n        } elseif ($grade >= 0.0) {\n            return 'D-';\n       \
    \ } else {\n            return 'E';\n        }\n    }, $grades);\n    return $grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4mst9m2k.php:61\n\
    Stack trace:\n#0 /tmp/tmp4mst9m2k.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp4mst9m2k.php\
    \ on line 61\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_letter\
    \ = array();\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n\
    \            $grades_letter[] = 'A+';\n        } elseif ($grade >= 3.7) {\n  \
    \          $grades_letter[] = 'A';\n        } elseif ($grade >= 3.3) {\n     \
    \       $grades_letter[] = 'A-';\n        } elseif ($grade >= 3.0) {\n       \
    \     $grades_letter[] = 'B+';\n        } elseif ($grade >= 2.7) {\n         \
    \   $grades_letter[] = 'B';\n        } elseif ($grade >= 2.3) {\n            $grades_letter[]\
    \ = 'B-';\n        } elseif ($grade >= 2.0) {\n            $grades_letter[] =\
    \ 'C+';\n        } elseif ($grade >= 1.7) {\n            $grades_letter[] = 'C';\n\
    \        } elseif ($grade >= 1.3) {\n            $grades_letter[] = 'C-';\n  \
    \      } elseif ($grade >= 1.0) {\n            $grades_letter[] = 'D+';\n    \
    \    } elseif ($grade >= 0.7) {\n            $grades_letter[] = 'D';\n       \
    \ } elseif ($grade >= 0.0) {\n            $grades_letter[] = 'D-';\n        }\
    \ else {\n            $grades_letter[] = 'E';\n        }\n    }\n    return $grades_letter;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpg2jndpcy.php:62\n\
    Stack trace:\n#0 /tmp/tmpg2jndpcy.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpg2jndpcy.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp73vg_no4.php:62\n\
    Stack trace:\n#0 /tmp/tmp73vg_no4.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp73vg_no4.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpr2do8gtn.php:62\n\
    Stack trace:\n#0 /tmp/tmpr2do8gtn.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpr2do8gtn.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [4.0, 3, 1.7, 2, 3.5];\necho '<pre>';\nprint_r(numerical_letter_grade($grades));\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n\
    \    [4] => A-\n)\n</pre>"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp81metow1.php:66\n\
    Stack trace:\n#0 /tmp/tmp81metow1.php(74): test()\n#1 {main}\n  thrown in /tmp/tmp81metow1.php\
    \ on line 66\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_array[] = 'A+';\n        } elseif ($grade >= 3.7) {\n      \
    \      $grades_array[] = 'A';\n        } elseif ($grade >= 3.3) {\n          \
    \  $grades_array[] = 'A-';\n        } elseif ($grade >= 3.0) {\n            $grades_array[]\
    \ = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_array[] = 'B';\n\
    \        } elseif ($grade >= 2.3) {\n            $grades_array[] = 'B-';\n   \
    \     } elseif ($grade >= 2.0) {\n            $grades_array[] = 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            $grades_array[] = 'C';\n        } elseif\
    \ ($grade >= 1.3) {\n            $grades_array[] = 'C-';\n        } elseif ($grade\
    \ >= 1.0) {\n            $grades_array[] = 'D+';\n        } elseif ($grade >=\
    \ 0.7) {\n            $grades_array[] = 'D';\n        } elseif ($grade >= 0.0)\
    \ {\n            $grades_array[] = 'D-';\n        } else {\n            $grades_array[]\
    \ = 'E';\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptj_desrc.php:62\n\
    Stack trace:\n#0 /tmp/tmptj_desrc.php(70): test()\n#1 {main}\n  thrown in /tmp/tmptj_desrc.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplindar9y.php:62\n\
    Stack trace:\n#0 /tmp/tmplindar9y.php(70): test()\n#1 {main}\n  thrown in /tmp/tmplindar9y.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_letter\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_letter[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $grades_letter[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $grades_letter[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $grades_letter[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_letter[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $grades_letter[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $grades_letter[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $grades_letter[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $grades_letter[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $grades_letter[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $grades_letter[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $grades_letter[] = 'D-';\n        } else {\n\
    \            $grades_letter[] = 'E';\n        }\n    }\n    return $grades_letter;\n\
    }\n\nprint_r(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpq63um3ao.php:63\n\
    Stack trace:\n#0 /tmp/tmpq63um3ao.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpq63um3ao.php\
    \ on line 63\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpe28e75fd.php:62\n\
    Stack trace:\n#0 /tmp/tmpe28e75fd.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpe28e75fd.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_letter\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_letter[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $grades_letter[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $grades_letter[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $grades_letter[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_letter[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $grades_letter[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $grades_letter[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $grades_letter[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $grades_letter[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $grades_letter[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $grades_letter[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $grades_letter[] = 'D-';\n        } else {\n\
    \            $grades_letter[] = 'E';\n        }\n    }\n    return $grades_letter;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmps9wese63.php:62\n\
    Stack trace:\n#0 /tmp/tmps9wese63.php(70): test()\n#1 {main}\n  thrown in /tmp/tmps9wese63.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpme4v8ebf.php:62\n\
    Stack trace:\n#0 /tmp/tmpme4v8ebf.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpme4v8ebf.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_letter\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_letter[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $grades_letter[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $grades_letter[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $grades_letter[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_letter[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $grades_letter[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $grades_letter[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $grades_letter[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $grades_letter[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $grades_letter[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $grades_letter[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $grades_letter[] = 'D-';\n        } else {\n\
    \            $grades_letter[] = 'E';\n        }\n    }\n    return $grades_letter;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpb0p3oobj.php:62\n\
    Stack trace:\n#0 /tmp/tmpb0p3oobj.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpb0p3oobj.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpeifsmfiz.php:62\n\
    Stack trace:\n#0 /tmp/tmpeifsmfiz.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpeifsmfiz.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5_yskr1u.php:62\n\
    Stack trace:\n#0 /tmp/tmp5_yskr1u.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp5_yskr1u.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $letter_grades\
    \ = [];\n  foreach ($grades as $grade) {\n    if ($grade >= 4.0) {\n      $letter_grades[]\
    \ = 'A+';\n    } elseif ($grade >= 3.7) {\n      $letter_grades[] = 'A';\n   \
    \ } elseif ($grade >= 3.3) {\n      $letter_grades[] = 'A-';\n    } elseif ($grade\
    \ >= 3.0) {\n      $letter_grades[] = 'B+';\n    } elseif ($grade >= 2.7) {\n\
    \      $letter_grades[] = 'B';\n    } elseif ($grade >= 2.3) {\n      $letter_grades[]\
    \ = 'B-';\n    } elseif ($grade >= 2.0) {\n      $letter_grades[] = 'C+';\n  \
    \  } elseif ($grade >= 1.7) {\n      $letter_grades[] = 'C';\n    } elseif ($grade\
    \ >= 1.3) {\n      $letter_grades[] = 'C-';\n    } elseif ($grade >= 1.0) {\n\
    \      $letter_grades[] = 'D+';\n    } elseif ($grade >= 0.7) {\n      $letter_grades[]\
    \ = 'D';\n    } elseif ($grade >= 0.0) {\n      $letter_grades[] = 'D-';\n   \
    \ } else {\n      $letter_grades[] = 'E';\n    }\n  }\n  return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpi0k6c0kq.php:62\n\
    Stack trace:\n#0 /tmp/tmpi0k6c0kq.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpi0k6c0kq.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3b80n3nj.php:62\n\
    Stack trace:\n#0 /tmp/tmp3b80n3nj.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp3b80n3nj.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp14rrlaic.php:62\n\
    Stack trace:\n#0 /tmp/tmp14rrlaic.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp14rrlaic.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwkofq6fj.php:62\n\
    Stack trace:\n#0 /tmp/tmpwkofq6fj.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpwkofq6fj.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_letter\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_letter[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $grades_letter[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $grades_letter[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $grades_letter[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_letter[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $grades_letter[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $grades_letter[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $grades_letter[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $grades_letter[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $grades_letter[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $grades_letter[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $grades_letter[] = 'D-';\n        } else {\n\
    \            $grades_letter[] = 'E';\n        }\n    }\n    return $grades_letter;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcw7rrcxy.php:62\n\
    Stack trace:\n#0 /tmp/tmpcw7rrcxy.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpcw7rrcxy.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbsgvpjfq.php:62\n\
    Stack trace:\n#0 /tmp/tmpbsgvpjfq.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpbsgvpjfq.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4oc6hpra.php:62\n\
    Stack trace:\n#0 /tmp/tmp4oc6hpra.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp4oc6hpra.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpofhyn2r_.php:62\n\
    Stack trace:\n#0 /tmp/tmpofhyn2r_.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpofhyn2r_.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6hkpwm_a.php:62\n\
    Stack trace:\n#0 /tmp/tmp6hkpwm_a.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp6hkpwm_a.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpld4ju576.php:62\n\
    Stack trace:\n#0 /tmp/tmpld4ju576.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpld4ju576.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyzagx87f.php:62\n\
    Stack trace:\n#0 /tmp/tmpyzagx87f.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpyzagx87f.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_array[] = 'A+';\n        } elseif ($grade >= 3.7) {\n      \
    \      $grades_array[] = 'A';\n        } elseif ($grade >= 3.3) {\n          \
    \  $grades_array[] = 'A-';\n        } elseif ($grade >= 3.0) {\n            $grades_array[]\
    \ = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_array[] = 'B';\n\
    \        } elseif ($grade >= 2.3) {\n            $grades_array[] = 'B-';\n   \
    \     } elseif ($grade >= 2.0) {\n            $grades_array[] = 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            $grades_array[] = 'C';\n        } elseif\
    \ ($grade >= 1.3) {\n            $grades_array[] = 'C-';\n        } elseif ($grade\
    \ >= 1.0) {\n            $grades_array[] = 'D+';\n        } elseif ($grade >=\
    \ 0.7) {\n            $grades_array[] = 'D';\n        } elseif ($grade >= 0.0)\
    \ {\n            $grades_array[] = 'D-';\n        } else {\n            $grades_array[]\
    \ = 'E';\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpw0_ct029.php:62\n\
    Stack trace:\n#0 /tmp/tmpw0_ct029.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpw0_ct029.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_array[] = 'A+';\n        } elseif ($grade >= 3.7) {\n      \
    \      $grades_array[] = 'A';\n        } elseif ($grade >= 3.3) {\n          \
    \  $grades_array[] = 'A-';\n        } elseif ($grade >= 3.0) {\n            $grades_array[]\
    \ = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_array[] = 'B';\n\
    \        } elseif ($grade >= 2.3) {\n            $grades_array[] = 'B-';\n   \
    \     } elseif ($grade >= 2.0) {\n            $grades_array[] = 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            $grades_array[] = 'C';\n        } elseif\
    \ ($grade >= 1.3) {\n            $grades_array[] = 'C-';\n        } elseif ($grade\
    \ >= 1.0) {\n            $grades_array[] = 'D+';\n        } elseif ($grade >=\
    \ 0.7) {\n            $grades_array[] = 'D';\n        } elseif ($grade >= 0.0)\
    \ {\n            $grades_array[] = 'D-';\n        } else {\n            $grades_array[]\
    \ = 'E';\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6p_u4oc_.php:62\n\
    Stack trace:\n#0 /tmp/tmp6p_u4oc_.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp6p_u4oc_.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_letter\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_letter[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $grades_letter[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $grades_letter[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $grades_letter[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_letter[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $grades_letter[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $grades_letter[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $grades_letter[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $grades_letter[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $grades_letter[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $grades_letter[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $grades_letter[] = 'D-';\n        } else {\n\
    \            $grades_letter[] = 'E';\n        }\n    }\n    return $grades_letter;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_3spy3fu.php:62\n\
    Stack trace:\n#0 /tmp/tmp_3spy3fu.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp_3spy3fu.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_array[] = 'A+';\n        } elseif ($grade >= 3.7) {\n      \
    \      $grades_array[] = 'A';\n        } elseif ($grade >= 3.3) {\n          \
    \  $grades_array[] = 'A-';\n        } elseif ($grade >= 3.0) {\n            $grades_array[]\
    \ = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_array[] = 'B';\n\
    \        } elseif ($grade >= 2.3) {\n            $grades_array[] = 'B-';\n   \
    \     } elseif ($grade >= 2.0) {\n            $grades_array[] = 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            $grades_array[] = 'C';\n        } elseif\
    \ ($grade >= 1.3) {\n            $grades_array[] = 'C-';\n        } elseif ($grade\
    \ >= 1.0) {\n            $grades_array[] = 'D+';\n        } elseif ($grade >=\
    \ 0.7) {\n            $grades_array[] = 'D';\n        } elseif ($grade >= 0.0)\
    \ {\n            $grades_array[] = 'D-';\n        } else {\n            $grades_array[]\
    \ = 'E';\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpj8onfc1s.php:62\n\
    Stack trace:\n#0 /tmp/tmpj8onfc1s.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpj8onfc1s.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpv1wft1pc.php:62\n\
    Stack trace:\n#0 /tmp/tmpv1wft1pc.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpv1wft1pc.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_letter\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_letter[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $grades_letter[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $grades_letter[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $grades_letter[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_letter[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $grades_letter[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $grades_letter[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $grades_letter[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $grades_letter[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $grades_letter[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $grades_letter[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $grades_letter[] = 'D-';\n        } else {\n\
    \            $grades_letter[] = 'E';\n        }\n    }\n    return $grades_letter;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqkv9e1pz.php:62\n\
    Stack trace:\n#0 /tmp/tmpqkv9e1pz.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpqkv9e1pz.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp07acypqv.php:62\n\
    Stack trace:\n#0 /tmp/tmp07acypqv.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp07acypqv.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkpwzoynt.php:62\n\
    Stack trace:\n#0 /tmp/tmpkpwzoynt.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpkpwzoynt.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_array[] = 'A+';\n        } elseif ($grade >= 3.7) {\n      \
    \      $grades_array[] = 'A';\n        } elseif ($grade >= 3.3) {\n          \
    \  $grades_array[] = 'A-';\n        } elseif ($grade >= 3.0) {\n            $grades_array[]\
    \ = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_array[] = 'B';\n\
    \        } elseif ($grade >= 2.3) {\n            $grades_array[] = 'B-';\n   \
    \     } elseif ($grade >= 2.0) {\n            $grades_array[] = 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            $grades_array[] = 'C';\n        } elseif\
    \ ($grade >= 1.3) {\n            $grades_array[] = 'C-';\n        } elseif ($grade\
    \ >= 1.0) {\n            $grades_array[] = 'D+';\n        } elseif ($grade >=\
    \ 0.7) {\n            $grades_array[] = 'D';\n        } elseif ($grade >= 0.0)\
    \ {\n            $grades_array[] = 'D-';\n        } else {\n            $grades_array[]\
    \ = 'E';\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqxr5t98x.php:62\n\
    Stack trace:\n#0 /tmp/tmpqxr5t98x.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpqxr5t98x.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjc9jbq_b.php:62\n\
    Stack trace:\n#0 /tmp/tmpjc9jbq_b.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpjc9jbq_b.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpaxn7_6lb.php:62\n\
    Stack trace:\n#0 /tmp/tmpaxn7_6lb.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpaxn7_6lb.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnfjgpmqe.php:62\n\
    Stack trace:\n#0 /tmp/tmpnfjgpmqe.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpnfjgpmqe.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpybkyzr0i.php:62\n\
    Stack trace:\n#0 /tmp/tmpybkyzr0i.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpybkyzr0i.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpywajz3ao.php:62\n\
    Stack trace:\n#0 /tmp/tmpywajz3ao.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpywajz3ao.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptejhp0om.php:62\n\
    Stack trace:\n#0 /tmp/tmptejhp0om.php(70): test()\n#1 {main}\n  thrown in /tmp/tmptejhp0om.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_dw0cnv7.php:62\n\
    Stack trace:\n#0 /tmp/tmp_dw0cnv7.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp_dw0cnv7.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpu55vy0zu.php:62\n\
    Stack trace:\n#0 /tmp/tmpu55vy0zu.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpu55vy0zu.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplo6vaaqe.php:62\n\
    Stack trace:\n#0 /tmp/tmplo6vaaqe.php(70): test()\n#1 {main}\n  thrown in /tmp/tmplo6vaaqe.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3xhbyfp1.php:62\n\
    Stack trace:\n#0 /tmp/tmp3xhbyfp1.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp3xhbyfp1.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1kn5t860.php:62\n\
    Stack trace:\n#0 /tmp/tmp1kn5t860.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp1kn5t860.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpm78grvu2.php:62\n\
    Stack trace:\n#0 /tmp/tmpm78grvu2.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpm78grvu2.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4526kpcy.php:62\n\
    Stack trace:\n#0 /tmp/tmp4526kpcy.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp4526kpcy.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade == 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade > 3.7) {\n      \
    \      $letter_grades[] = 'A';\n        } elseif ($grade > 3.3) {\n          \
    \  $letter_grades[] = 'A-';\n        } elseif ($grade > 3.0) {\n            $letter_grades[]\
    \ = 'B+';\n        } elseif ($grade > 2.7) {\n            $letter_grades[] = 'B';\n\
    \        } elseif ($grade > 2.3) {\n            $letter_grades[] = 'B-';\n   \
    \     } elseif ($grade > 2.0) {\n            $letter_grades[] = 'C+';\n      \
    \  } elseif ($grade > 1.7) {\n            $letter_grades[] = 'C';\n        } elseif\
    \ ($grade > 1.3) {\n            $letter_grades[] = 'C-';\n        } elseif ($grade\
    \ > 1.0) {\n            $letter_grades[] = 'D+';\n        } elseif ($grade > 0.7)\
    \ {\n            $letter_grades[] = 'D';\n        } elseif ($grade > 0.0) {\n\
    \            $letter_grades[] = 'D-';\n        } else {\n            $letter_grades[]\
    \ = 'E';\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2smine22.php:62\n\
    Stack trace:\n#0 /tmp/tmp2smine22.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp2smine22.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdljj9jnu.php:62\n\
    Stack trace:\n#0 /tmp/tmpdljj9jnu.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpdljj9jnu.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_letter\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_letter[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $grades_letter[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $grades_letter[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $grades_letter[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_letter[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $grades_letter[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $grades_letter[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $grades_letter[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $grades_letter[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $grades_letter[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $grades_letter[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $grades_letter[] = 'D-';\n        } else {\n\
    \            $grades_letter[] = 'E';\n        }\n    }\n    return $grades_letter;\n\
    }\n\n$grades = [4.0, 3, 1.7, 2, 3.5];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpl5ob06lf.php:64\n\
    Stack trace:\n#0 /tmp/tmpl5ob06lf.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpl5ob06lf.php\
    \ on line 64\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpf1sokbfl.php:62\n\
    Stack trace:\n#0 /tmp/tmpf1sokbfl.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpf1sokbfl.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvgfa4ybx.php:62\n\
    Stack trace:\n#0 /tmp/tmpvgfa4ybx.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpvgfa4ybx.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_array[] = 'A+';\n        } elseif ($grade >= 3.7) {\n      \
    \      $grades_array[] = 'A';\n        } elseif ($grade >= 3.3) {\n          \
    \  $grades_array[] = 'A-';\n        } elseif ($grade >= 3.0) {\n            $grades_array[]\
    \ = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_array[] = 'B';\n\
    \        } elseif ($grade >= 2.3) {\n            $grades_array[] = 'B-';\n   \
    \     } elseif ($grade >= 2.0) {\n            $grades_array[] = 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            $grades_array[] = 'C';\n        } elseif\
    \ ($grade >= 1.3) {\n            $grades_array[] = 'C-';\n        } elseif ($grade\
    \ >= 1.0) {\n            $grades_array[] = 'D+';\n        } elseif ($grade >=\
    \ 0.7) {\n            $grades_array[] = 'D';\n        } elseif ($grade >= 0.0)\
    \ {\n            $grades_array[] = 'D-';\n        } else {\n            $grades_array[]\
    \ = 'E';\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppd6mv1l6.php:62\n\
    Stack trace:\n#0 /tmp/tmppd6mv1l6.php(70): test()\n#1 {main}\n  thrown in /tmp/tmppd6mv1l6.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades =\
    \ array_map(function($grade) {\n        if ($grade >= 4.0) {\n            return\
    \ 'A+';\n        } elseif ($grade >= 3.7) {\n            return 'A';\n       \
    \ } elseif ($grade >= 3.3) {\n            return 'A-';\n        } elseif ($grade\
    \ >= 3.0) {\n            return 'B+';\n        } elseif ($grade >= 2.7) {\n  \
    \          return 'B';\n        } elseif ($grade >= 2.3) {\n            return\
    \ 'B-';\n        } elseif ($grade >= 2.0) {\n            return 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            return 'C';\n        } elseif ($grade\
    \ >= 1.3) {\n            return 'C-';\n        } elseif ($grade >= 1.0) {\n  \
    \          return 'D+';\n        } elseif ($grade >= 0.7) {\n            return\
    \ 'D';\n        } elseif ($grade >= 0.0) {\n            return 'D-';\n       \
    \ } else {\n            return 'E';\n        }\n    }, $grades);\n    return $grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3d03of8p.php:61\n\
    Stack trace:\n#0 /tmp/tmp3d03of8p.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3d03of8p.php\
    \ on line 61\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpaw9t77o0.php:62\n\
    Stack trace:\n#0 /tmp/tmpaw9t77o0.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpaw9t77o0.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpch2rhggc.php:62\n\
    Stack trace:\n#0 /tmp/tmpch2rhggc.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpch2rhggc.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsu859xzc.php:62\n\
    Stack trace:\n#0 /tmp/tmpsu859xzc.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpsu859xzc.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [4.0, 3, 1.7, 2, 3.5];\nprint_r(numerical_letter_grade($grades));\n\
    \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6w4q560k.php:65\n\
    Stack trace:\n#0 /tmp/tmp6w4q560k.php(73): test()\n#1 {main}\n  thrown in /tmp/tmp6w4q560k.php\
    \ on line 65\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpl9rbq74c.php:62\n\
    Stack trace:\n#0 /tmp/tmpl9rbq74c.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpl9rbq74c.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzc_t6t1c.php:62\n\
    Stack trace:\n#0 /tmp/tmpzc_t6t1c.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpzc_t6t1c.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzxtcigpp.php:62\n\
    Stack trace:\n#0 /tmp/tmpzxtcigpp.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpzxtcigpp.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_array[] = 'A+';\n        } elseif ($grade >= 3.7) {\n      \
    \      $grades_array[] = 'A';\n        } elseif ($grade >= 3.3) {\n          \
    \  $grades_array[] = 'A-';\n        } elseif ($grade >= 3.0) {\n            $grades_array[]\
    \ = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_array[] = 'B';\n\
    \        } elseif ($grade >= 2.3) {\n            $grades_array[] = 'B-';\n   \
    \     } elseif ($grade >= 2.0) {\n            $grades_array[] = 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            $grades_array[] = 'C';\n        } elseif\
    \ ($grade >= 1.3) {\n            $grades_array[] = 'C-';\n        } elseif ($grade\
    \ >= 1.0) {\n            $grades_array[] = 'D+';\n        } elseif ($grade >=\
    \ 0.7) {\n            $grades_array[] = 'D';\n        } elseif ($grade >= 0.0)\
    \ {\n            $grades_array[] = 'D-';\n        } else {\n            $grades_array[]\
    \ = 'E';\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpj3kyhgx7.php:62\n\
    Stack trace:\n#0 /tmp/tmpj3kyhgx7.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpj3kyhgx7.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade == 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade > 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade > 3.3) {\n            $result[] = 'A-';\n \
    \       } elseif ($grade > 3.0) {\n            $result[] = 'B+';\n        } elseif\
    \ ($grade > 2.7) {\n            $result[] = 'B';\n        } elseif ($grade > 2.3)\
    \ {\n            $result[] = 'B-';\n        } elseif ($grade > 2.0) {\n      \
    \      $result[] = 'C+';\n        } elseif ($grade > 1.7) {\n            $result[]\
    \ = 'C';\n        } elseif ($grade > 1.3) {\n            $result[] = 'C-';\n \
    \       } elseif ($grade > 1.0) {\n            $result[] = 'D+';\n        } elseif\
    \ ($grade > 0.7) {\n            $result[] = 'D';\n        } elseif ($grade > 0.0)\
    \ {\n            $result[] = 'D-';\n        } else {\n            $result[] =\
    \ 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grade_letter\
    \ = array();\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n\
    \            $grade_letter[] = 'A+';\n        } elseif ($grade >= 3.7) {\n   \
    \         $grade_letter[] = 'A';\n        } elseif ($grade >= 3.3) {\n       \
    \     $grade_letter[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $grade_letter[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grade_letter[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $grade_letter[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $grade_letter[] = 'C+';\n   \
    \     } elseif ($grade >= 1.7) {\n            $grade_letter[] = 'C';\n       \
    \ } elseif ($grade >= 1.3) {\n            $grade_letter[] = 'C-';\n        } elseif\
    \ ($grade >= 1.0) {\n            $grade_letter[] = 'D+';\n        } elseif ($grade\
    \ >= 0.7) {\n            $grade_letter[] = 'D';\n        } elseif ($grade >= 0.0)\
    \ {\n            $grade_letter[] = 'D-';\n        } else {\n            $grade_letter[]\
    \ = 'E';\n        }\n    }\n    return $grade_letter;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6mndghxd.php:62\n\
    Stack trace:\n#0 /tmp/tmp6mndghxd.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp6mndghxd.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvch65an7.php:62\n\
    Stack trace:\n#0 /tmp/tmpvch65an7.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpvch65an7.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $grades_array\
    \ = [];\n  foreach ($grades as $grade) {\n    if ($grade >= 4.0) {\n      $grades_array[]\
    \ = 'A+';\n    } elseif ($grade >= 3.7) {\n      $grades_array[] = 'A';\n    }\
    \ elseif ($grade >= 3.3) {\n      $grades_array[] = 'A-';\n    } elseif ($grade\
    \ >= 3.0) {\n      $grades_array[] = 'B+';\n    } elseif ($grade >= 2.7) {\n \
    \     $grades_array[] = 'B';\n    } elseif ($grade >= 2.3) {\n      $grades_array[]\
    \ = 'B-';\n    } elseif ($grade >= 2.0) {\n      $grades_array[] = 'C+';\n   \
    \ } elseif ($grade >= 1.7) {\n      $grades_array[] = 'C';\n    } elseif ($grade\
    \ >= 1.3) {\n      $grades_array[] = 'C-';\n    } elseif ($grade >= 1.0) {\n \
    \     $grades_array[] = 'D+';\n    } elseif ($grade >= 0.7) {\n      $grades_array[]\
    \ = 'D';\n    } elseif ($grade >= 0.0) {\n      $grades_array[] = 'D-';\n    }\
    \ else {\n      $grades_array[] = 'E';\n    }\n  }\n  return $grades_array;\n\
    }\n\nprint_r(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgethsb9y.php:64\n\
    Stack trace:\n#0 /tmp/tmpgethsb9y.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpgethsb9y.php\
    \ on line 64\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4iq889i8.php:62\n\
    Stack trace:\n#0 /tmp/tmp4iq889i8.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp4iq889i8.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyl_65k6i.php:61\n\
    Stack trace:\n#0 /tmp/tmpyl_65k6i.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpyl_65k6i.php\
    \ on line 61\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbak65y92.php:62\n\
    Stack trace:\n#0 /tmp/tmpbak65y92.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpbak65y92.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade == 4.0) {\n   \
    \         $grades_array[] = 'A+';\n        } elseif ($grade > 3.7) {\n       \
    \     $grades_array[] = 'A';\n        } elseif ($grade > 3.3) {\n            $grades_array[]\
    \ = 'A-';\n        } elseif ($grade > 3.0) {\n            $grades_array[] = 'B+';\n\
    \        } elseif ($grade > 2.7) {\n            $grades_array[] = 'B';\n     \
    \   } elseif ($grade > 2.3) {\n            $grades_array[] = 'B-';\n        }\
    \ elseif ($grade > 2.0) {\n            $grades_array[] = 'C+';\n        } elseif\
    \ ($grade > 1.7) {\n            $grades_array[] = 'C';\n        } elseif ($grade\
    \ > 1.3) {\n            $grades_array[] = 'C-';\n        } elseif ($grade > 1.0)\
    \ {\n            $grades_array[] = 'D+';\n        } elseif ($grade > 0.7) {\n\
    \            $grades_array[] = 'D';\n        } elseif ($grade > 0.0) {\n     \
    \       $grades_array[] = 'D-';\n        } else {\n            $grades_array[]\
    \ = 'E';\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptufl3sre.php:62\n\
    Stack trace:\n#0 /tmp/tmptufl3sre.php(70): test()\n#1 {main}\n  thrown in /tmp/tmptufl3sre.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwp1eyzka.php:62\n\
    Stack trace:\n#0 /tmp/tmpwp1eyzka.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpwp1eyzka.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4cglgu3v.php:62\n\
    Stack trace:\n#0 /tmp/tmp4cglgu3v.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp4cglgu3v.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = array();\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n\
    \            $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n  \
    \          $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n     \
    \       $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n       \
    \     $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n         \
    \   $letter_grades[] = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[]\
    \ = 'B-';\n        } elseif ($grade >= 2.0) {\n            $letter_grades[] =\
    \ 'C+';\n        } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n\
    \        } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n  \
    \      } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n    \
    \    } elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n       \
    \ } elseif ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        }\
    \ else {\n            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7ail50aq.php:62\n\
    Stack trace:\n#0 /tmp/tmp7ail50aq.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp7ail50aq.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqo7a8t03.php:62\n\
    Stack trace:\n#0 /tmp/tmpqo7a8t03.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpqo7a8t03.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9az2_ekk.php:62\n\
    Stack trace:\n#0 /tmp/tmp9az2_ekk.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp9az2_ekk.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7tdmgo40.php:62\n\
    Stack trace:\n#0 /tmp/tmp7tdmgo40.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp7tdmgo40.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0jw16lxu.php:62\n\
    Stack trace:\n#0 /tmp/tmp0jw16lxu.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp0jw16lxu.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmph2oi7k3v.php:62\n\
    Stack trace:\n#0 /tmp/tmph2oi7k3v.php(70): test()\n#1 {main}\n  thrown in /tmp/tmph2oi7k3v.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_array[] = 'A+';\n        } elseif ($grade >= 3.7) {\n      \
    \      $grades_array[] = 'A';\n        } elseif ($grade >= 3.3) {\n          \
    \  $grades_array[] = 'A-';\n        } elseif ($grade >= 3.0) {\n            $grades_array[]\
    \ = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_array[] = 'B';\n\
    \        } elseif ($grade >= 2.3) {\n            $grades_array[] = 'B-';\n   \
    \     } elseif ($grade >= 2.0) {\n            $grades_array[] = 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            $grades_array[] = 'C';\n        } elseif\
    \ ($grade >= 1.3) {\n            $grades_array[] = 'C-';\n        } elseif ($grade\
    \ >= 1.0) {\n            $grades_array[] = 'D+';\n        } elseif ($grade >=\
    \ 0.7) {\n            $grades_array[] = 'D';\n        } elseif ($grade >= 0.0)\
    \ {\n            $grades_array[] = 'D-';\n        } else {\n            $grades_array[]\
    \ = 'E';\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgfgy2fiu.php:62\n\
    Stack trace:\n#0 /tmp/tmpgfgy2fiu.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpgfgy2fiu.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_aqpm1b5.php:62\n\
    Stack trace:\n#0 /tmp/tmp_aqpm1b5.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp_aqpm1b5.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpszvbav2y.php:62\n\
    Stack trace:\n#0 /tmp/tmpszvbav2y.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpszvbav2y.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_m9_i0p3.php:62\n\
    Stack trace:\n#0 /tmp/tmp_m9_i0p3.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp_m9_i0p3.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8s6rg_kj.php:62\n\
    Stack trace:\n#0 /tmp/tmp8s6rg_kj.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp8s6rg_kj.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades =\
    \ array_map(function($grade) {\n        if ($grade >= 4.0) {\n            return\
    \ 'A+';\n        } elseif ($grade >= 3.7) {\n            return 'A';\n       \
    \ } elseif ($grade >= 3.3) {\n            return 'A-';\n        } elseif ($grade\
    \ >= 3.0) {\n            return 'B+';\n        } elseif ($grade >= 2.7) {\n  \
    \          return 'B';\n        } elseif ($grade >= 2.3) {\n            return\
    \ 'B-';\n        } elseif ($grade >= 2.0) {\n            return 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            return 'C';\n        } elseif ($grade\
    \ >= 1.3) {\n            return 'C-';\n        } elseif ($grade >= 1.0) {\n  \
    \          return 'D+';\n        } elseif ($grade >= 0.7) {\n            return\
    \ 'D';\n        } elseif ($grade >= 0.0) {\n            return 'D-';\n       \
    \ } else {\n            return 'E';\n        }\n    }, $grades);\n    return $grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9ji6f2q0.php:61\n\
    Stack trace:\n#0 /tmp/tmp9ji6f2q0.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp9ji6f2q0.php\
    \ on line 61\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3pf2g20u.php:62\n\
    Stack trace:\n#0 /tmp/tmp3pf2g20u.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp3pf2g20u.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_letter\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade == 4.0) {\n   \
    \         $grades_letter[] = 'A+';\n        } elseif ($grade > 3.7) {\n      \
    \      $grades_letter[] = 'A';\n        } elseif ($grade > 3.3) {\n          \
    \  $grades_letter[] = 'A-';\n        } elseif ($grade > 3.0) {\n            $grades_letter[]\
    \ = 'B+';\n        } elseif ($grade > 2.7) {\n            $grades_letter[] = 'B';\n\
    \        } elseif ($grade > 2.3) {\n            $grades_letter[] = 'B-';\n   \
    \     } elseif ($grade > 2.0) {\n            $grades_letter[] = 'C+';\n      \
    \  } elseif ($grade > 1.7) {\n            $grades_letter[] = 'C';\n        } elseif\
    \ ($grade > 1.3) {\n            $grades_letter[] = 'C-';\n        } elseif ($grade\
    \ > 1.0) {\n            $grades_letter[] = 'D+';\n        } elseif ($grade > 0.7)\
    \ {\n            $grades_letter[] = 'D';\n        } elseif ($grade > 0.0) {\n\
    \            $grades_letter[] = 'D-';\n        } else {\n            $grades_letter[]\
    \ = 'E';\n        }\n    }\n    return $grades_letter;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpagwzghz6.php:62\n\
    Stack trace:\n#0 /tmp/tmpagwzghz6.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpagwzghz6.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzrqhc4rj.php:62\n\
    Stack trace:\n#0 /tmp/tmpzrqhc4rj.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpzrqhc4rj.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_array[] = 'A+';\n        } elseif ($grade >= 3.7) {\n      \
    \      $grades_array[] = 'A';\n        } elseif ($grade >= 3.3) {\n          \
    \  $grades_array[] = 'A-';\n        } elseif ($grade >= 3.0) {\n            $grades_array[]\
    \ = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_array[] = 'B';\n\
    \        } elseif ($grade >= 2.3) {\n            $grades_array[] = 'B-';\n   \
    \     } elseif ($grade >= 2.0) {\n            $grades_array[] = 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            $grades_array[] = 'C';\n        } elseif\
    \ ($grade >= 1.3) {\n            $grades_array[] = 'C-';\n        } elseif ($grade\
    \ >= 1.0) {\n            $grades_array[] = 'D+';\n        } elseif ($grade >=\
    \ 0.7) {\n            $grades_array[] = 'D';\n        } elseif ($grade >= 0.0)\
    \ {\n            $grades_array[] = 'D-';\n        } else {\n            $grades_array[]\
    \ = 'E';\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppa3_x0o3.php:62\n\
    Stack trace:\n#0 /tmp/tmppa3_x0o3.php(70): test()\n#1 {main}\n  thrown in /tmp/tmppa3_x0o3.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpg92473d2.php:62\n\
    Stack trace:\n#0 /tmp/tmpg92473d2.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpg92473d2.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp80qgskys.php:62\n\
    Stack trace:\n#0 /tmp/tmp80qgskys.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp80qgskys.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdyixyqyc.php:62\n\
    Stack trace:\n#0 /tmp/tmpdyixyqyc.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpdyixyqyc.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_letters\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_letters[] = 'A+';\n        } elseif ($grade >= 3.7) {\n    \
    \        $grades_letters[] = 'A';\n        } elseif ($grade >= 3.3) {\n      \
    \      $grades_letters[] = 'A-';\n        } elseif ($grade >= 3.0) {\n       \
    \     $grades_letters[] = 'B+';\n        } elseif ($grade >= 2.7) {\n        \
    \    $grades_letters[] = 'B';\n        } elseif ($grade >= 2.3) {\n          \
    \  $grades_letters[] = 'B-';\n        } elseif ($grade >= 2.0) {\n           \
    \ $grades_letters[] = 'C+';\n        } elseif ($grade >= 1.7) {\n            $grades_letters[]\
    \ = 'C';\n        } elseif ($grade >= 1.3) {\n            $grades_letters[] =\
    \ 'C-';\n        } elseif ($grade >= 1.0) {\n            $grades_letters[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $grades_letters[] = 'D';\n  \
    \      } elseif ($grade >= 0.0) {\n            $grades_letters[] = 'D-';\n   \
    \     } else {\n            $grades_letters[] = 'E';\n        }\n    }\n    return\
    \ $grades_letters;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpx0p24jho.php:62\n\
    Stack trace:\n#0 /tmp/tmpx0p24jho.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpx0p24jho.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprdpi2egd.php:62\n\
    Stack trace:\n#0 /tmp/tmprdpi2egd.php(70): test()\n#1 {main}\n  thrown in /tmp/tmprdpi2egd.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_array[] = 'A+';\n        } elseif ($grade >= 3.7) {\n      \
    \      $grades_array[] = 'A';\n        } elseif ($grade >= 3.3) {\n          \
    \  $grades_array[] = 'A-';\n        } elseif ($grade >= 3.0) {\n            $grades_array[]\
    \ = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_array[] = 'B';\n\
    \        } elseif ($grade >= 2.3) {\n            $grades_array[] = 'B-';\n   \
    \     } elseif ($grade >= 2.0) {\n            $grades_array[] = 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            $grades_array[] = 'C';\n        } elseif\
    \ ($grade >= 1.3) {\n            $grades_array[] = 'C-';\n        } elseif ($grade\
    \ >= 1.0) {\n            $grades_array[] = 'D+';\n        } elseif ($grade >=\
    \ 0.7) {\n            $grades_array[] = 'D';\n        } elseif ($grade >= 0.0)\
    \ {\n            $grades_array[] = 'D-';\n        } else {\n            $grades_array[]\
    \ = 'E';\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkuweebln.php:62\n\
    Stack trace:\n#0 /tmp/tmpkuweebln.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpkuweebln.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjcpdejrg.php:62\n\
    Stack trace:\n#0 /tmp/tmpjcpdejrg.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpjcpdejrg.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letters =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $letters[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $letters[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $letters[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $letters[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $letters[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $letters[] = 'B-';\n        } elseif ($grade >= 2.0)\
    \ {\n            $letters[] = 'C+';\n        } elseif ($grade >= 1.7) {\n    \
    \        $letters[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $letters[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $letters[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $letters[] = 'D';\n        }\
    \ elseif ($grade >= 0.0) {\n            $letters[] = 'D-';\n        } else {\n\
    \            $letters[] = 'E';\n        }\n    }\n    return $letters;\n}\n\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppmyziv_z.php:62\n\
    Stack trace:\n#0 /tmp/tmppmyziv_z.php(70): test()\n#1 {main}\n  thrown in /tmp/tmppmyziv_z.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp06wuqwbd.php:62\n\
    Stack trace:\n#0 /tmp/tmp06wuqwbd.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp06wuqwbd.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade == 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade > 3.7) {\n      \
    \      $letter_grades[] = 'A';\n        } elseif ($grade > 3.3) {\n          \
    \  $letter_grades[] = 'A-';\n        } elseif ($grade > 3.0) {\n            $letter_grades[]\
    \ = 'B+';\n        } elseif ($grade > 2.7) {\n            $letter_grades[] = 'B';\n\
    \        } elseif ($grade > 2.3) {\n            $letter_grades[] = 'B-';\n   \
    \     } elseif ($grade > 2.0) {\n            $letter_grades[] = 'C+';\n      \
    \  } elseif ($grade > 1.7) {\n            $letter_grades[] = 'C';\n        } elseif\
    \ ($grade > 1.3) {\n            $letter_grades[] = 'C-';\n        } elseif ($grade\
    \ > 1.0) {\n            $letter_grades[] = 'D+';\n        } elseif ($grade > 0.7)\
    \ {\n            $letter_grades[] = 'D';\n        } elseif ($grade > 0.0) {\n\
    \            $letter_grades[] = 'D-';\n        } else {\n            $letter_grades[]\
    \ = 'E';\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_array[] = 'A+';\n        } elseif ($grade >= 3.7) {\n      \
    \      $grades_array[] = 'A';\n        } elseif ($grade >= 3.3) {\n          \
    \  $grades_array[] = 'A-';\n        } elseif ($grade >= 3.0) {\n            $grades_array[]\
    \ = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_array[] = 'B';\n\
    \        } elseif ($grade >= 2.3) {\n            $grades_array[] = 'B-';\n   \
    \     } elseif ($grade >= 2.0) {\n            $grades_array[] = 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            $grades_array[] = 'C';\n        } elseif\
    \ ($grade >= 1.3) {\n            $grades_array[] = 'C-';\n        } elseif ($grade\
    \ >= 1.0) {\n            $grades_array[] = 'D+';\n        } elseif ($grade >=\
    \ 0.7) {\n            $grades_array[] = 'D';\n        } elseif ($grade >= 0.0)\
    \ {\n            $grades_array[] = 'D-';\n        } else {\n            $grades_array[]\
    \ = 'E';\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp39a5xjna.php:62\n\
    Stack trace:\n#0 /tmp/tmp39a5xjna.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp39a5xjna.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_letter\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_letter[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $grades_letter[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $grades_letter[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $grades_letter[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_letter[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $grades_letter[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $grades_letter[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $grades_letter[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $grades_letter[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $grades_letter[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $grades_letter[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $grades_letter[] = 'D-';\n        } else {\n\
    \            $grades_letter[] = 'E';\n        }\n    }\n    return $grades_letter;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpku_ly2mr.php:62\n\
    Stack trace:\n#0 /tmp/tmpku_ly2mr.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpku_ly2mr.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpy093k_ri.php:62\n\
    Stack trace:\n#0 /tmp/tmpy093k_ri.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpy093k_ri.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpq4xugrd0.php:62\n\
    Stack trace:\n#0 /tmp/tmpq4xugrd0.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpq4xugrd0.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_array[] = 'A+';\n        } elseif ($grade >= 3.7) {\n      \
    \      $grades_array[] = 'A';\n        } elseif ($grade >= 3.3) {\n          \
    \  $grades_array[] = 'A-';\n        } elseif ($grade >= 3.0) {\n            $grades_array[]\
    \ = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_array[] = 'B';\n\
    \        } elseif ($grade >= 2.3) {\n            $grades_array[] = 'B-';\n   \
    \     } elseif ($grade >= 2.0) {\n            $grades_array[] = 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            $grades_array[] = 'C';\n        } elseif\
    \ ($grade >= 1.3) {\n            $grades_array[] = 'C-';\n        } elseif ($grade\
    \ >= 1.0) {\n            $grades_array[] = 'D+';\n        } elseif ($grade >=\
    \ 0.7) {\n            $grades_array[] = 'D';\n        } elseif ($grade >= 0.0)\
    \ {\n            $grades_array[] = 'D-';\n        } else {\n            $grades_array[]\
    \ = 'E';\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpngv_igy_.php:62\n\
    Stack trace:\n#0 /tmp/tmpngv_igy_.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpngv_igy_.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpj3hvtbaz.php:62\n\
    Stack trace:\n#0 /tmp/tmpj3hvtbaz.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpj3hvtbaz.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbl_nmsmz.php:62\n\
    Stack trace:\n#0 /tmp/tmpbl_nmsmz.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpbl_nmsmz.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpujo3wtom.php:62\n\
    Stack trace:\n#0 /tmp/tmpujo3wtom.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpujo3wtom.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsoqktvev.php:62\n\
    Stack trace:\n#0 /tmp/tmpsoqktvev.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpsoqktvev.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_array[] = 'A+';\n        } elseif ($grade >= 3.7) {\n      \
    \      $grades_array[] = 'A';\n        } elseif ($grade >= 3.3) {\n          \
    \  $grades_array[] = 'A-';\n        } elseif ($grade >= 3.0) {\n            $grades_array[]\
    \ = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_array[] = 'B';\n\
    \        } elseif ($grade >= 2.3) {\n            $grades_array[] = 'B-';\n   \
    \     } elseif ($grade >= 2.0) {\n            $grades_array[] = 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            $grades_array[] = 'C';\n        } elseif\
    \ ($grade >= 1.3) {\n            $grades_array[] = 'C-';\n        } elseif ($grade\
    \ >= 1.0) {\n            $grades_array[] = 'D+';\n        } elseif ($grade >=\
    \ 0.7) {\n            $grades_array[] = 'D';\n        } elseif ($grade >= 0.0)\
    \ {\n            $grades_array[] = 'D-';\n        } else {\n            $grades_array[]\
    \ = 'E';\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkobvdise.php:62\n\
    Stack trace:\n#0 /tmp/tmpkobvdise.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpkobvdise.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwtemphsj.php:62\n\
    Stack trace:\n#0 /tmp/tmpwtemphsj.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpwtemphsj.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpv4wqstov.php:62\n\
    Stack trace:\n#0 /tmp/tmpv4wqstov.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpv4wqstov.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_array[] = 'A+';\n        } elseif ($grade >= 3.7) {\n      \
    \      $grades_array[] = 'A';\n        } elseif ($grade >= 3.3) {\n          \
    \  $grades_array[] = 'A-';\n        } elseif ($grade >= 3.0) {\n            $grades_array[]\
    \ = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_array[] = 'B';\n\
    \        } elseif ($grade >= 2.3) {\n            $grades_array[] = 'B-';\n   \
    \     } elseif ($grade >= 2.0) {\n            $grades_array[] = 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            $grades_array[] = 'C';\n        } elseif\
    \ ($grade >= 1.3) {\n            $grades_array[] = 'C-';\n        } elseif ($grade\
    \ >= 1.0) {\n            $grades_array[] = 'D+';\n        } elseif ($grade >=\
    \ 0.7) {\n            $grades_array[] = 'D';\n        } elseif ($grade >= 0.0)\
    \ {\n            $grades_array[] = 'D-';\n        } else {\n            $grades_array[]\
    \ = 'E';\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdvb4sl5c.php:62\n\
    Stack trace:\n#0 /tmp/tmpdvb4sl5c.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpdvb4sl5c.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbnwk2ci2.php:62\n\
    Stack trace:\n#0 /tmp/tmpbnwk2ci2.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpbnwk2ci2.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4elz_3fz.php:62\n\
    Stack trace:\n#0 /tmp/tmp4elz_3fz.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp4elz_3fz.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpek51_o_o.php:62\n\
    Stack trace:\n#0 /tmp/tmpek51_o_o.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpek51_o_o.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp74ee2p8q.php:62\n\
    Stack trace:\n#0 /tmp/tmp74ee2p8q.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp74ee2p8q.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp51xfdev4.php:62\n\
    Stack trace:\n#0 /tmp/tmp51xfdev4.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp51xfdev4.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5jnqrcbg.php:62\n\
    Stack trace:\n#0 /tmp/tmp5jnqrcbg.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp5jnqrcbg.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdjvihrcd.php:62\n\
    Stack trace:\n#0 /tmp/tmpdjvihrcd.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpdjvihrcd.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_letter\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_letter[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $grades_letter[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $grades_letter[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $grades_letter[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_letter[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $grades_letter[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $grades_letter[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $grades_letter[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $grades_letter[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $grades_letter[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $grades_letter[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $grades_letter[] = 'D-';\n        } else {\n\
    \            $grades_letter[] = 'E';\n        }\n    }\n    return $grades_letter;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5xnbekjs.php:62\n\
    Stack trace:\n#0 /tmp/tmp5xnbekjs.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp5xnbekjs.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $letter_grades\
    \ = [];\n  foreach ($grades as $grade) {\n    if ($grade >= 4.0) {\n      $letter_grades[]\
    \ = 'A+';\n    } elseif ($grade >= 3.7) {\n      $letter_grades[] = 'A';\n   \
    \ } elseif ($grade >= 3.3) {\n      $letter_grades[] = 'A-';\n    } elseif ($grade\
    \ >= 3.0) {\n      $letter_grades[] = 'B+';\n    } elseif ($grade >= 2.7) {\n\
    \      $letter_grades[] = 'B';\n    } elseif ($grade >= 2.3) {\n      $letter_grades[]\
    \ = 'B-';\n    } elseif ($grade >= 2.0) {\n      $letter_grades[] = 'C+';\n  \
    \  } elseif ($grade >= 1.7) {\n      $letter_grades[] = 'C';\n    } elseif ($grade\
    \ >= 1.3) {\n      $letter_grades[] = 'C-';\n    } elseif ($grade >= 1.0) {\n\
    \      $letter_grades[] = 'D+';\n    } elseif ($grade >= 0.7) {\n      $letter_grades[]\
    \ = 'D';\n    } elseif ($grade >= 0.0) {\n      $letter_grades[] = 'D-';\n   \
    \ } else {\n      $letter_grades[] = 'E';\n    }\n  }\n  return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmponf76le8.php:62\n\
    Stack trace:\n#0 /tmp/tmponf76le8.php(70): test()\n#1 {main}\n  thrown in /tmp/tmponf76le8.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_array[] = 'A+';\n        } elseif ($grade >= 3.7) {\n      \
    \      $grades_array[] = 'A';\n        } elseif ($grade >= 3.3) {\n          \
    \  $grades_array[] = 'A-';\n        } elseif ($grade >= 3.0) {\n            $grades_array[]\
    \ = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_array[] = 'B';\n\
    \        } elseif ($grade >= 2.3) {\n            $grades_array[] = 'B-';\n   \
    \     } elseif ($grade >= 2.0) {\n            $grades_array[] = 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            $grades_array[] = 'C';\n        } elseif\
    \ ($grade >= 1.3) {\n            $grades_array[] = 'C-';\n        } elseif ($grade\
    \ >= 1.0) {\n            $grades_array[] = 'D+';\n        } elseif ($grade >=\
    \ 0.7) {\n            $grades_array[] = 'D';\n        } elseif ($grade >= 0.0)\
    \ {\n            $grades_array[] = 'D-';\n        } else {\n            $grades_array[]\
    \ = 'E';\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1fip36mw.php:62\n\
    Stack trace:\n#0 /tmp/tmp1fip36mw.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp1fip36mw.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbg14wxx2.php:62\n\
    Stack trace:\n#0 /tmp/tmpbg14wxx2.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpbg14wxx2.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8rhuls5t.php:62\n\
    Stack trace:\n#0 /tmp/tmp8rhuls5t.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp8rhuls5t.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_array[] = 'A+';\n        } elseif ($grade >= 3.7) {\n      \
    \      $grades_array[] = 'A';\n        } elseif ($grade >= 3.3) {\n          \
    \  $grades_array[] = 'A-';\n        } elseif ($grade >= 3.0) {\n            $grades_array[]\
    \ = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_array[] = 'B';\n\
    \        } elseif ($grade >= 2.3) {\n            $grades_array[] = 'B-';\n   \
    \     } elseif ($grade >= 2.0) {\n            $grades_array[] = 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            $grades_array[] = 'C';\n        } elseif\
    \ ($grade >= 1.3) {\n            $grades_array[] = 'C-';\n        } elseif ($grade\
    \ >= 1.0) {\n            $grades_array[] = 'D+';\n        } elseif ($grade >=\
    \ 0.7) {\n            $grades_array[] = 'D';\n        } elseif ($grade >= 0.0)\
    \ {\n            $grades_array[] = 'D-';\n        } else {\n            $grades_array[]\
    \ = 'E';\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpr9m9ktaz.php:62\n\
    Stack trace:\n#0 /tmp/tmpr9m9ktaz.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpr9m9ktaz.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_array[] = 'A+';\n        } elseif ($grade >= 3.7) {\n      \
    \      $grades_array[] = 'A';\n        } elseif ($grade >= 3.3) {\n          \
    \  $grades_array[] = 'A-';\n        } elseif ($grade >= 3.0) {\n            $grades_array[]\
    \ = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_array[] = 'B';\n\
    \        } elseif ($grade >= 2.3) {\n            $grades_array[] = 'B-';\n   \
    \     } elseif ($grade >= 2.0) {\n            $grades_array[] = 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            $grades_array[] = 'C';\n        } elseif\
    \ ($grade >= 1.3) {\n            $grades_array[] = 'C-';\n        } elseif ($grade\
    \ >= 1.0) {\n            $grades_array[] = 'D+';\n        } elseif ($grade >=\
    \ 0.7) {\n            $grades_array[] = 'D';\n        } elseif ($grade >= 0.0)\
    \ {\n            $grades_array[] = 'D-';\n        } else {\n            $grades_array[]\
    \ = 'E';\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3bj6nai3.php:62\n\
    Stack trace:\n#0 /tmp/tmp3bj6nai3.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp3bj6nai3.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_array[] = 'A+';\n        } elseif ($grade >= 3.7) {\n      \
    \      $grades_array[] = 'A';\n        } elseif ($grade >= 3.3) {\n          \
    \  $grades_array[] = 'A-';\n        } elseif ($grade >= 3.0) {\n            $grades_array[]\
    \ = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_array[] = 'B';\n\
    \        } elseif ($grade >= 2.3) {\n            $grades_array[] = 'B-';\n   \
    \     } elseif ($grade >= 2.0) {\n            $grades_array[] = 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            $grades_array[] = 'C';\n        } elseif\
    \ ($grade >= 1.3) {\n            $grades_array[] = 'C-';\n        } elseif ($grade\
    \ >= 1.0) {\n            $grades_array[] = 'D+';\n        } elseif ($grade >=\
    \ 0.7) {\n            $grades_array[] = 'D';\n        } elseif ($grade >= 0.0)\
    \ {\n            $grades_array[] = 'D-';\n        } else {\n            $grades_array[]\
    \ = 'E';\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpal1dpuij.php:62\n\
    Stack trace:\n#0 /tmp/tmpal1dpuij.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpal1dpuij.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades =\
    \ array_map(function($grade) {\n        if ($grade >= 4.0) {\n            return\
    \ 'A+';\n        } elseif ($grade >= 3.7) {\n            return 'A';\n       \
    \ } elseif ($grade >= 3.3) {\n            return 'A-';\n        } elseif ($grade\
    \ >= 3.0) {\n            return 'B+';\n        } elseif ($grade >= 2.7) {\n  \
    \          return 'B';\n        } elseif ($grade >= 2.3) {\n            return\
    \ 'B-';\n        } elseif ($grade >= 2.0) {\n            return 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            return 'C';\n        } elseif ($grade\
    \ >= 1.3) {\n            return 'C-';\n        } elseif ($grade >= 1.0) {\n  \
    \          return 'D+';\n        } elseif ($grade >= 0.7) {\n            return\
    \ 'D';\n        } elseif ($grade >= 0.0) {\n            return 'D-';\n       \
    \ } else {\n            return 'E';\n        }\n    }, $grades);\n    return $grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4pk8lsdl.php:61\n\
    Stack trace:\n#0 /tmp/tmp4pk8lsdl.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp4pk8lsdl.php\
    \ on line 61\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1w7d1u5q.php:62\n\
    Stack trace:\n#0 /tmp/tmp1w7d1u5q.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp1w7d1u5q.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8i861qa8.php:62\n\
    Stack trace:\n#0 /tmp/tmp8i861qa8.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp8i861qa8.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade == 4.0) {\n   \
    \         $grades_array[] = 'A+';\n        } elseif ($grade > 3.7) {\n       \
    \     $grades_array[] = 'A';\n        } elseif ($grade > 3.3) {\n            $grades_array[]\
    \ = 'A-';\n        } elseif ($grade > 3.0) {\n            $grades_array[] = 'B+';\n\
    \        } elseif ($grade > 2.7) {\n            $grades_array[] = 'B';\n     \
    \   } elseif ($grade > 2.3) {\n            $grades_array[] = 'B-';\n        }\
    \ elseif ($grade > 2.0) {\n            $grades_array[] = 'C+';\n        } elseif\
    \ ($grade > 1.7) {\n            $grades_array[] = 'C';\n        } elseif ($grade\
    \ > 1.3) {\n            $grades_array[] = 'C-';\n        } elseif ($grade > 1.0)\
    \ {\n            $grades_array[] = 'D+';\n        } elseif ($grade > 0.7) {\n\
    \            $grades_array[] = 'D';\n        } elseif ($grade > 0.0) {\n     \
    \       $grades_array[] = 'D-';\n        } else {\n            $grades_array[]\
    \ = 'E';\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdmxk9_rj.php:62\n\
    Stack trace:\n#0 /tmp/tmpdmxk9_rj.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpdmxk9_rj.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_array[] = 'A+';\n        } elseif ($grade >= 3.7) {\n      \
    \      $grades_array[] = 'A';\n        } elseif ($grade >= 3.3) {\n          \
    \  $grades_array[] = 'A-';\n        } elseif ($grade >= 3.0) {\n            $grades_array[]\
    \ = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_array[] = 'B';\n\
    \        } elseif ($grade >= 2.3) {\n            $grades_array[] = 'B-';\n   \
    \     } elseif ($grade >= 2.0) {\n            $grades_array[] = 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            $grades_array[] = 'C';\n        } elseif\
    \ ($grade >= 1.3) {\n            $grades_array[] = 'C-';\n        } elseif ($grade\
    \ >= 1.0) {\n            $grades_array[] = 'D+';\n        } elseif ($grade >=\
    \ 0.7) {\n            $grades_array[] = 'D';\n        } elseif ($grade >= 0.0)\
    \ {\n            $grades_array[] = 'D-';\n        } else {\n            $grades_array[]\
    \ = 'E';\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9abfj012.php:62\n\
    Stack trace:\n#0 /tmp/tmp9abfj012.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp9abfj012.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphwnfatit.php:62\n\
    Stack trace:\n#0 /tmp/tmphwnfatit.php(70): test()\n#1 {main}\n  thrown in /tmp/tmphwnfatit.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpil9q05_d.php:62\n\
    Stack trace:\n#0 /tmp/tmpil9q05_d.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpil9q05_d.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [4.0, 3, 1.7, 2, 3.5];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmw1plb4a.php:64\n\
    Stack trace:\n#0 /tmp/tmpmw1plb4a.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpmw1plb4a.php\
    \ on line 64\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_letter\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_letter[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $grades_letter[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $grades_letter[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $grades_letter[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_letter[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $grades_letter[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $grades_letter[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $grades_letter[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $grades_letter[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $grades_letter[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $grades_letter[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $grades_letter[] = 'D-';\n        } else {\n\
    \            $grades_letter[] = 'E';\n        }\n    }\n    return $grades_letter;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2ie23ccd.php:62\n\
    Stack trace:\n#0 /tmp/tmp2ie23ccd.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp2ie23ccd.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_letter\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_letter[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $grades_letter[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $grades_letter[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $grades_letter[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_letter[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $grades_letter[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $grades_letter[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $grades_letter[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $grades_letter[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $grades_letter[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $grades_letter[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $grades_letter[] = 'D-';\n        } else {\n\
    \            $grades_letter[] = 'E';\n        }\n    }\n    return $grades_letter;\n\
    }\n\n$grades = [4.0, 3, 1.7, 2, 3.5];\nprint_r(numerical_letter_grade($grades));\n\
    \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpy37jorm4.php:65\n\
    Stack trace:\n#0 /tmp/tmpy37jorm4.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpy37jorm4.php\
    \ on line 65\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2wied1jl.php:62\n\
    Stack trace:\n#0 /tmp/tmp2wied1jl.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp2wied1jl.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades =\
    \ array_map(function($grade) {\n        if ($grade >= 4.0) {\n            return\
    \ 'A+';\n        } elseif ($grade >= 3.7) {\n            return 'A';\n       \
    \ } elseif ($grade >= 3.3) {\n            return 'A-';\n        } elseif ($grade\
    \ >= 3.0) {\n            return 'B+';\n        } elseif ($grade >= 2.7) {\n  \
    \          return 'B';\n        } elseif ($grade >= 2.3) {\n            return\
    \ 'B-';\n        } elseif ($grade >= 2.0) {\n            return 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            return 'C';\n        } elseif ($grade\
    \ >= 1.3) {\n            return 'C-';\n        } elseif ($grade >= 1.0) {\n  \
    \          return 'D+';\n        } elseif ($grade >= 0.7) {\n            return\
    \ 'D';\n        } elseif ($grade >= 0.0) {\n            return 'D-';\n       \
    \ } else {\n            return 'E';\n        }\n    }, $grades);\n    return $grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_h6nhl58.php:61\n\
    Stack trace:\n#0 /tmp/tmp_h6nhl58.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp_h6nhl58.php\
    \ on line 61\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpc_gd5515.php:62\n\
    Stack trace:\n#0 /tmp/tmpc_gd5515.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpc_gd5515.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3aniwyzz.php:61\n\
    Stack trace:\n#0 /tmp/tmp3aniwyzz.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3aniwyzz.php\
    \ on line 61\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjl7c8002.php:62\n\
    Stack trace:\n#0 /tmp/tmpjl7c8002.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpjl7c8002.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpijef_l0e.php:62\n\
    Stack trace:\n#0 /tmp/tmpijef_l0e.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpijef_l0e.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppj214u7x.php:62\n\
    Stack trace:\n#0 /tmp/tmppj214u7x.php(70): test()\n#1 {main}\n  thrown in /tmp/tmppj214u7x.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnltjkz9v.php:62\n\
    Stack trace:\n#0 /tmp/tmpnltjkz9v.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpnltjkz9v.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp18ks50me.php:62\n\
    Stack trace:\n#0 /tmp/tmp18ks50me.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp18ks50me.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_array[] = 'A+';\n        } elseif ($grade >= 3.7) {\n      \
    \      $grades_array[] = 'A';\n        } elseif ($grade >= 3.3) {\n          \
    \  $grades_array[] = 'A-';\n        } elseif ($grade >= 3.0) {\n            $grades_array[]\
    \ = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_array[] = 'B';\n\
    \        } elseif ($grade >= 2.3) {\n            $grades_array[] = 'B-';\n   \
    \     } elseif ($grade >= 2.0) {\n            $grades_array[] = 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            $grades_array[] = 'C';\n        } elseif\
    \ ($grade >= 1.3) {\n            $grades_array[] = 'C-';\n        } elseif ($grade\
    \ >= 1.0) {\n            $grades_array[] = 'D+';\n        } elseif ($grade >=\
    \ 0.7) {\n            $grades_array[] = 'D';\n        } elseif ($grade >= 0.0)\
    \ {\n            $grades_array[] = 'D-';\n        } else {\n            $grades_array[]\
    \ = 'E';\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpt71dweeu.php:62\n\
    Stack trace:\n#0 /tmp/tmpt71dweeu.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpt71dweeu.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n  $letter_grades\
    \ = [];\n  foreach ($grades as $grade) {\n    if ($grade >= 4.0) {\n      $letter_grades[]\
    \ = 'A+';\n    } elseif ($grade >= 3.7) {\n      $letter_grades[] = 'A';\n   \
    \ } elseif ($grade >= 3.3) {\n      $letter_grades[] = 'A-';\n    } elseif ($grade\
    \ >= 3.0) {\n      $letter_grades[] = 'B+';\n    } elseif ($grade >= 2.7) {\n\
    \      $letter_grades[] = 'B';\n    } elseif ($grade >= 2.3) {\n      $letter_grades[]\
    \ = 'B-';\n    } elseif ($grade >= 2.0) {\n      $letter_grades[] = 'C+';\n  \
    \  } elseif ($grade >= 1.7) {\n      $letter_grades[] = 'C';\n    } elseif ($grade\
    \ >= 1.3) {\n      $letter_grades[] = 'C-';\n    } elseif ($grade >= 1.0) {\n\
    \      $letter_grades[] = 'D+';\n    } elseif ($grade >= 0.7) {\n      $letter_grades[]\
    \ = 'D';\n    } elseif ($grade >= 0.0) {\n      $letter_grades[] = 'D-';\n   \
    \ } else {\n      $letter_grades[] = 'E';\n    }\n  }\n  return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpt81pc2rf.php:62\n\
    Stack trace:\n#0 /tmp/tmpt81pc2rf.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpt81pc2rf.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_letter\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_letter[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $grades_letter[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $grades_letter[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $grades_letter[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_letter[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $grades_letter[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $grades_letter[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $grades_letter[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $grades_letter[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $grades_letter[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $grades_letter[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $grades_letter[] = 'D-';\n        } else {\n\
    \            $grades_letter[] = 'E';\n        }\n    }\n    return $grades_letter;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjs8gv6zj.php:62\n\
    Stack trace:\n#0 /tmp/tmpjs8gv6zj.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpjs8gv6zj.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $result =\
    \ [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n     \
    \       $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptu2evyjy.php:62\n\
    Stack trace:\n#0 /tmp/tmptu2evyjy.php(70): test()\n#1 {main}\n  thrown in /tmp/tmptu2evyjy.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_array[] = 'A+';\n        } elseif ($grade >= 3.7) {\n      \
    \      $grades_array[] = 'A';\n        } elseif ($grade >= 3.3) {\n          \
    \  $grades_array[] = 'A-';\n        } elseif ($grade >= 3.0) {\n            $grades_array[]\
    \ = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_array[] = 'B';\n\
    \        } elseif ($grade >= 2.3) {\n            $grades_array[] = 'B-';\n   \
    \     } elseif ($grade >= 2.0) {\n            $grades_array[] = 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            $grades_array[] = 'C';\n        } elseif\
    \ ($grade >= 1.3) {\n            $grades_array[] = 'C-';\n        } elseif ($grade\
    \ >= 1.0) {\n            $grades_array[] = 'D+';\n        } elseif ($grade >=\
    \ 0.7) {\n            $grades_array[] = 'D';\n        } elseif ($grade >= 0.0)\
    \ {\n            $grades_array[] = 'D-';\n        } else {\n            $grades_array[]\
    \ = 'E';\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpd6hfu4u1.php:62\n\
    Stack trace:\n#0 /tmp/tmpd6hfu4u1.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpd6hfu4u1.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_letter\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_letter[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $grades_letter[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $grades_letter[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $grades_letter[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_letter[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $grades_letter[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $grades_letter[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $grades_letter[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $grades_letter[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $grades_letter[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $grades_letter[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $grades_letter[] = 'D-';\n        } else {\n\
    \            $grades_letter[] = 'E';\n        }\n    }\n    return $grades_letter;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpynwrrf37.php:62\n\
    Stack trace:\n#0 /tmp/tmpynwrrf37.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpynwrrf37.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqnj47lqu.php:62\n\
    Stack trace:\n#0 /tmp/tmpqnj47lqu.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpqnj47lqu.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_array[] = 'A+';\n        } elseif ($grade > 3.7) {\n       \
    \     $grades_array[] = 'A';\n        } elseif ($grade > 3.3) {\n            $grades_array[]\
    \ = 'A-';\n        } elseif ($grade > 3.0) {\n            $grades_array[] = 'B+';\n\
    \        } elseif ($grade > 2.7) {\n            $grades_array[] = 'B';\n     \
    \   } elseif ($grade > 2.3) {\n            $grades_array[] = 'B-';\n        }\
    \ elseif ($grade > 2.0) {\n            $grades_array[] = 'C+';\n        } elseif\
    \ ($grade > 1.7) {\n            $grades_array[] = 'C';\n        } elseif ($grade\
    \ > 1.3) {\n            $grades_array[] = 'C-';\n        } elseif ($grade > 1.0)\
    \ {\n            $grades_array[] = 'D+';\n        } elseif ($grade > 0.7) {\n\
    \            $grades_array[] = 'D';\n        } elseif ($grade > 0.0) {\n     \
    \       $grades_array[] = 'D-';\n        } else {\n            $grades_array[]\
    \ = 'E';\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
