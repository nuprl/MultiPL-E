name: HumanEval_68_pluck
language: php
prompt: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n// your task is to pluck one of the nodes and return it.\n// The\
  \ plucked node should be the node with the smallest even value.\n// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n// If there are no even values or the given array is empty, return [].\n\
  // Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n// Example 2:\n// Input: [1,2,3]\n\
  // Output: [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the\
  \ smallest index. \n// Example 3:\n// Input: []\n// Output: []\n// Example 4:\n\
  // Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation: 0 is the smallest\
  \ value, but  there are two zeros,\n// so we will choose the first zero, which has\
  \ the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0\
  \ <= node.value\nfunction pluck($arr) {\n"
tests: "function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
  \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
  \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
  \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1)) !== array(6,\
  \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 9,\
  \ 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $evens = [];\n    $evens_indexes = [];\n    foreach ($arr as $index\
    \ => $value) {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n\
    \            $evens_indexes[] = $index;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min_even = min($evens);\n    $min_even_index\
    \ = array_search($min_even, $evens);\n    return [$min_even, $evens_indexes[$min_even_index]];\n\
    }\n\n$tests = [\n    [\n        'input' => [4, 2, 3],\n        'expected' => [2,\
    \ 1],\n    ],\n    [\n        'input' => [1, 2, 3],\n        'expected' => [2,\
    \ 1],\n    ],\n    [\n        'input' => [],\n        'expected' => [],\n    ],\n\
    \    [\n        'input' => [5, 0, 3, 0, 4, 2],\n        'expected' => [0, 1],\n\
    \    ],\n];\n\nforeach ($tests as $test) {\n    $result = pluck($test['input']);\n\
    \    if ($result !== $test['expected']) {\n        echo \"Error with input {$test['input']}\\\
    n\";\n        echo \"Result {$result}\\n\";\n        echo \"Expected {$test['expected']}\\\
    n\";\n    }\n}", "    $evens = [];\n    $indexes = [];\n    foreach ($arr as $index\
    \ => $value) {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n\
    \            $indexes[] = $index;\n        }\n    }\n    if (empty($evens)) {\n\
    \        return [];\n    }\n    $min = min($evens);\n    $minIndex = array_search($min,\
    \ $evens);\n    return [$min, $indexes[$minIndex]];\n}\n\n$tests = [];\n$tests[]\
    \ = ['input' => [4,2,3], 'expect' => [2, 1]];\n$tests[] = ['input' => [1,2,3],\
    \ 'expect' => [2, 1]];\n$tests[] = ['input' => [], 'expect' => []];\n$tests[]\
    \ = ['input' => [5, 0, 3, 0, 4, 2], 'expect' => [0, 1]];\n\nforeach ($tests as\
    \ $index => $test) {\n    $result = pluck($test['input']);\n    if ($test['expect']\
    \ != $result) {\n        echo 'Test fail at test' . ($index + 1) . PHP_EOL;\n\
    \        exit;\n    }\n}\n\necho 'Test good!' . PHP_EOL;", "    $evens = array_filter($arr,\
    \ function($n) { return $n % 2 == 0; });\n    if (empty($evens)) {\n        return\
    \ [];\n    }\n    $min = min($evens);\n    $index = array_search($min, $arr);\n\
    \    return [$min, $index];\n}\n", "    $evens = [];\n    foreach ($arr as $key\
    \ => $val) {\n        if ($val % 2 == 0) {\n            $evens[] = $val;\n   \
    \     }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min\
    \ = min($evens);\n    $minKey = array_search($min, $arr);\n    return [$min, $minKey];\n\
    }\n\n$arr = [4,2,3];\nprint_r(pluck($arr));\n$arr = [1,2,3];\nprint_r(pluck($arr));\n\
    $arr = [];\nprint_r(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $evens = [];\n    foreach ($arr as $i => $v) {\n        if ($v % 2 == 0) {\n\
    \            $evens[] = [$v, $i];\n        }\n    }\n    if (empty($evens)) {\n\
    \        return [];\n    }\n    usort($evens, function($a, $b) {\n        if ($a[0]\
    \ == $b[0]) {\n            return $a[1] - $b[1];\n        }\n        return $a[0]\
    \ - $b[0];\n    });\n    return $evens[0];\n}\n\n$tests = [\n    [[4,2,3], [2,\
    \ 1]],\n    [[1,2,3], [2, 1]],\n    [[], []],\n    [[5, 0, 3, 0, 4, 2], [0, 1]],\n\
    ];\n\nforeach ($tests as $test) {\n    $result = pluck($test[0]);\n    if ($result\
    \ != $test[1]) {\n        echo \"FAIL: \" . implode(',', $test[0]) . \" -> \"\
    \ . implode(',', $result) . \"\\n\";\n    } else {\n        echo \"PASS\\n\";\n\
    \    }\n}", "    $evens = array_filter($arr, function($v) {\n        return $v\
    \ % 2 == 0;\n    });\n    if (empty($evens)) {\n        return [];\n    }\n  \
    \  $min = min($evens);\n    $index = array_search($min, $arr);\n    return [$min,\
    \ $index];\n}\n\n$tests = [\n    [[4,2,3], [2, 1]],\n    [[1,2,3], [2, 1]],\n\
    \    [[], []],\n    [[5, 0, 3, 0, 4, 2], [0, 1]],\n];\n\nforeach ($tests as $test)\
    \ {\n    $result = pluck($test[0]);\n    if ($result !== $test[1]) {\n       \
    \ echo \"FAIL: pluck({$test[0]}) = {$result} expected {$test[1]}\\n\";\n    }\
    \ else {\n        echo \"PASS\\n\";\n    }\n}", "    $evens = [];\n    $index\
    \ = 0;\n    foreach ($arr as $value) {\n        if ($value % 2 == 0) {\n     \
    \       $evens[] = $value;\n        }\n    }\n    if (empty($evens)) {\n     \
    \   return [];\n    }\n    $min = min($evens);\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value == $min) {\n            $index = $key;\n            break;\n\
    \        }\n    }\n    return [$min, $index];\n}\n\n$arr = [4,2,3];\nprint_r(pluck($arr));\n\
    echo \"\\n\";\n$arr = [1,2,3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [];\n\
    print_r(pluck($arr));\necho \"\\n\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\n\
    echo \"\\n\";", "    $evens = [];\n    $evens_indexes = [];\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[] =\
    \ $value;\n            $evens_indexes[] = $key;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min_even = min($evens);\n    $min_even_index\
    \ = array_search($min_even, $evens);\n    return [$min_even, $evens_indexes[$min_even_index]];\n\
    }\n", "    $evens = [];\n    $evens_indexes = [];\n    foreach ($arr as $index\
    \ => $value) {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n\
    \            $evens_indexes[] = $index;\n        }\n    }\n    if (count($evens)\
    \ == 0) {\n        return [];\n    }\n    $min_value = min($evens);\n    $min_index\
    \ = array_search($min_value, $evens);\n    return [$min_value, $evens_indexes[$min_index]];\n\
    }\n\n$arr = [4,2,3];\nprint_r(pluck($arr));\n\n$arr = [1,2,3];\nprint_r(pluck($arr));\n\
    \n$arr = [];\nprint_r(pluck($arr));\n\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $even = [];\n    $index = [];\n    for ($i = 0; $i < count($arr); $i++) {\n\
    \        if ($arr[$i] % 2 == 0) {\n            $even[] = $arr[$i];\n         \
    \   $index[] = $i;\n        }\n    }\n    if (count($even) == 0) {\n        return\
    \ [];\n    }\n    $min = min($even);\n    $min_index = array_search($min, $even);\n\
    \    return [$min, $index[$min_index]];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\
    \n$arr = [1, 2, 3];\nprint_r(pluck($arr));\n\n$arr = [];\nprint_r(pluck($arr));\n\
    \n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $evens = [];\n    $evens_indexes\
    \ = [];\n    foreach ($arr as $index => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $evens[] = $value;\n            $evens_indexes[] = $index;\n\
    \        }\n    }\n    if (count($evens) == 0) {\n        return [];\n    }\n\
    \    $min_index = array_search(min($evens), $evens);\n    return [$evens[$min_index],\
    \ $evens_indexes[$min_index]];\n}\n\n$input = [4,2,3];\n$output = pluck($input);\n\
    print_r($output);\n\n$input = [1,2,3];\n$output = pluck($input);\nprint_r($output);\n\
    \n$input = [];\n$output = pluck($input);\nprint_r($output);\n\n$input = [5, 0,\
    \ 3, 0, 4, 2];\n$output = pluck($input);\nprint_r($output);", "    $evens = [];\n\
    \    foreach ($arr as $i => $v) {\n        if ($v % 2 == 0) {\n            $evens[]\
    \ = [$v, $i];\n        }\n    }\n    if (empty($evens)) {\n        return [];\n\
    \    }\n    usort($evens, function($a, $b) {\n        if ($a[0] == $b[0]) {\n\
    \            return $a[1] <=> $b[1];\n        }\n        return $a[0] <=> $b[0];\n\
    \    });\n    return $evens[0];\n}\n\n$tests = [\n    [[4,2,3], [2, 1]],\n   \
    \ [[1,2,3], [2, 1]],\n    [[], []],\n    [[5, 0, 3, 0, 4, 2], [0, 1]],\n];\n\n\
    foreach ($tests as $test) {\n    $result = pluck($test[0]);\n    if ($result !=\
    \ $test[1]) {\n        echo \"FAIL: pluck(\" . implode(',', $test[0]) . \") =\
    \ \" . implode(',', $result) . \"\\n\";\n    }\n}", "    $evens = [];\n    foreach\
    \ ($arr as $i => $v) {\n        if ($v % 2 == 0) {\n            $evens[] = [$v,\
    \ $i];\n        }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n\
    \    usort($evens, function($a, $b) {\n        if ($a[0] == $b[0]) {\n       \
    \     return $a[1] - $b[1];\n        }\n        return $a[0] - $b[0];\n    });\n\
    \    return $evens[0];\n}\n", "    $evens = array_filter($arr, function($n) {\n\
    \        return $n % 2 == 0;\n    });\n    if (count($evens) == 0) {\n       \
    \ return [];\n    }\n    $min = min($evens);\n    $minIndex = array_search($min,\
    \ $arr);\n    return [$min, $minIndex];\n}\n\n$tests = [\n    [[4,2,3], [2, 1]],\n\
    \    [[1,2,3], [2, 1]],\n    [[], []],\n    [[5, 0, 3, 0, 4, 2], [0, 1]],\n];\n\
    \nforeach ($tests as [$input, $expected]) {\n    $result = pluck($input);\n  \
    \  if ($result == $expected) {\n        echo \"Test passed\\n\";\n    } else {\n\
    \        echo \"Test failed\\n\";\n        echo \"Input: \";\n        print_r($input);\n\
    \        echo \"Expected: \";\n        print_r($expected);\n        echo \"Result:\
    \ \";\n        print_r($result);\n    }\n}", "    $evens = [];\n    $evens_indexes\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $evens[] = $value;\n            $evens_indexes[] = $key;\n  \
    \      }\n    }\n    if (count($evens) == 0) {\n        return [];\n    }\n  \
    \  $min = min($evens);\n    $min_index = array_search($min, $evens);\n    return\
    \ [$min, $evens_indexes[$min_index]];\n}\n\n$arr = [4,2,3];\nprint_r(pluck($arr));\n\
    $arr = [1,2,3];\nprint_r(pluck($arr));\n$arr = [];\nprint_r(pluck($arr));\n$arr\
    \ = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $evens = array_filter($arr,\
    \ function($n) {\n        return $n % 2 == 0;\n    });\n    if (count($evens)\
    \ == 0) {\n        return [];\n    }\n    $min = min($evens);\n    $index = array_search($min,\
    \ $arr);\n    return [$min, $index];\n}\n\n$tests = [\n    [[4,2,3], [2, 1]],\n\
    \    [[1,2,3], [2, 1]],\n    [[], []],\n    [[5, 0, 3, 0, 4, 2], [0, 1]],\n];\n\
    \nforeach ($tests as $test) {\n    $input = $test[0];\n    $expected = $test[1];\n\
    \    $result = pluck($input);\n    if ($result == $expected) {\n        echo \"\
    Test passed!\\n\";\n    } else {\n        echo \"Test failed!\\n\";\n        echo\
    \ \"Input: \";\n        print_r($input);\n        echo \"\\n\";\n        echo\
    \ \"Expected: \";\n        print_r($expected);\n        echo \"\\n\";\n      \
    \  echo \"Result: \";\n        print_r($result);\n        echo \"\\n\";\n    }\n\
    }", "    $even = [];\n    $odd = [];\n    foreach ($arr as $key => $value) {\n\
    \        if ($value % 2 == 0) {\n            $even[] = $value;\n        } else\
    \ {\n            $odd[] = $value;\n        }\n    }\n    if (count($even) == 0)\
    \ {\n        return [];\n    }\n    $smallest = min($even);\n    $index = array_search($smallest,\
    \ $arr);\n    return [$smallest, $index];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\
    \n$arr = [1, 2, 3];\nprint_r(pluck($arr));\n\n$arr = [];\nprint_r(pluck($arr));\n\
    \n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    if (empty($arr)) {\n\
    \        return [];\n    }\n    $evens = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        }\n\
    \    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $minKey = array_search($min, $arr);\n    return [$min, $minKey];\n}\n\n$arr\
    \ = [4,2,3];\nprint_r(pluck($arr));\necho PHP_EOL;\n$arr = [1,2,3];\nprint_r(pluck($arr));\n\
    echo PHP_EOL;\n$arr = [];\nprint_r(pluck($arr));\necho PHP_EOL;\n$arr = [5, 0,\
    \ 3, 0, 4, 2];\nprint_r(pluck($arr));\necho PHP_EOL;", "    $even = [];\n    $odd\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $even[] = $value;\n        } else {\n            $odd[] = $value;\n\
    \        }\n    }\n    if (count($even) > 0) {\n        $min = min($even);\n \
    \       $key = array_search($min, $arr);\n        return [$min, $key];\n    }\
    \ else {\n        return [];\n    }\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\
    $arr = [1, 2, 3];\nprint_r(pluck($arr));\n$arr = [];\nprint_r(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $evens = [];\n    $evens_indexes\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $evens[] = $value;\n            $evens_indexes[] = $key;\n  \
    \      }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min_even\
    \ = min($evens);\n    $min_even_index = array_search($min_even, $evens);\n   \
    \ return [$min_even, $evens_indexes[$min_even_index]];\n}\n\n$arr = [4,2,3];\n\
    print_r(pluck($arr));\necho \"\\n\";\n$arr = [1,2,3];\nprint_r(pluck($arr));\n\
    echo \"\\n\";\n$arr = [];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [5, 0,\
    \ 3, 0, 4, 2];\nprint_r(pluck($arr));\necho \"\\n\";", "    $evens = [];\n   \
    \ $evens_indexes = [];\n    foreach ($arr as $index => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $evens[] = $value;\n            $evens_indexes[] =\
    \ $index;\n        }\n    }\n    if (count($evens) == 0) {\n        return [];\n\
    \    }\n    $min_even = min($evens);\n    $min_even_index = array_search($min_even,\
    \ $evens);\n    return [$min_even, $evens_indexes[$min_even_index]];\n}\n\n$tests\
    \ = [];\n$tests[] = ['input' => [4, 2, 3], 'expect' => [2, 1]];\n$tests[] = ['input'\
    \ => [1, 2, 3], 'expect' => [2, 1]];\n$tests[] = ['input' => [], 'expect' => []];\n\
    $tests[] = ['input' => [5, 0, 3, 0, 4, 2], 'expect' => [0, 1]];\n\nforeach ($tests\
    \ as $index => $test) {\n    $result = pluck($test['input']);\n    if ($test['expect']\
    \ != $result) {\n        echo 'Test fail at test' . ($index + 1) . PHP_EOL;\n\
    \        exit;\n    }\n}\n\necho 'Test good!' . PHP_EOL;", "    $evens = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $evens[] = $value;\n        }\n    }\n    if (empty($evens)) {\n    \
    \    return [];\n    }\n    $min = min($evens);\n    $minIndex = array_search($min,\
    \ $arr);\n    return [$min, $minIndex];\n}\n", "    $evens = [];\n    $indexes\
    \ = [];\n    foreach ($arr as $index => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $evens[] = $value;\n            $indexes[] = $index;\n      \
    \  }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $minIndex = array_search($min, $evens);\n    return [$min, $indexes[$minIndex]];\n\
    }\n\n$input = [4,2,3];\nprint_r(pluck($input));\n\n$input = [1,2,3];\nprint_r(pluck($input));\n\
    \n$input = [];\nprint_r(pluck($input));\n\n$input = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($input));",
  "    $evens = array_filter($arr, function($val) {\n        return $val % 2 == 0;\n\
    \    });\n    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $minIndex = array_search($min, $arr);\n    return [$min, $minIndex];\n}\n\
    \n$tests = [\n    [[4,2,3], [2, 1]],\n    [[1,2,3], [2, 1]],\n    [[], []],\n\
    \    [[5, 0, 3, 0, 4, 2], [0, 1]],\n];\n\nforeach ($tests as [$input, $expected])\
    \ {\n    $result = pluck($input);\n    if ($result === $expected) {\n        echo\
    \ \"Test passed\" . PHP_EOL;\n    } else {\n        echo \"Test failed: \" . json_encode($input)\
    \ . PHP_EOL;\n        echo \"Expected: \" . json_encode($expected) . PHP_EOL;\n\
    \        echo \"Got: \" . json_encode($result) . PHP_EOL;\n    }\n}", "    $evens\
    \ = [];\n    foreach ($arr as $i => $v) {\n        if ($v % 2 == 0) {\n      \
    \      $evens[] = [$v, $i];\n        }\n    }\n    if (empty($evens)) {\n    \
    \    return [];\n    }\n    usort($evens, function($a, $b) {\n        if ($a[0]\
    \ == $b[0]) {\n            return $a[1] - $b[1];\n        }\n        return $a[0]\
    \ - $b[0];\n    });\n    return $evens[0];\n}\n\n$tests = [\n    [[4,2,3], [2,\
    \ 1]],\n    [[1,2,3], [2, 1]],\n    [[], []],\n    [[5, 0, 3, 0, 4, 2], [0, 1]],\n\
    ];\n\nforeach ($tests as $test) {\n    $input = $test[0];\n    $expected = $test[1];\n\
    \    $result = pluck($input);\n    if ($result != $expected) {\n        echo \"\
    FAIL: pluck({$input}) == {$result} != {$expected}\\n\";\n    } else {\n      \
    \  echo \"PASS\\n\";\n    }\n}", "    $evens = [];\n    $evens_indexes = [];\n\
    \    for ($i = 0; $i < count($arr); $i++) {\n        if ($arr[$i] % 2 == 0) {\n\
    \            $evens[] = $arr[$i];\n            $evens_indexes[] = $i;\n      \
    \  }\n    }\n    if (count($evens) == 0) {\n        return [];\n    }\n    $min\
    \ = min($evens);\n    $min_index = array_search($min, $evens);\n    return [$min,\
    \ $evens_indexes[$min_index]];\n}\n", "    $evens = [];\n    foreach ($arr as\
    \ $i => $v) {\n        if ($v % 2 == 0) {\n            $evens[] = $v;\n      \
    \  }\n    }\n    if (count($evens) == 0) {\n        return [];\n    }\n    $min\
    \ = min($evens);\n    $min_i = array_search($min, $arr);\n    return [$min, $min_i];\n\
    }\n\n$tests = [];\n$tests[] = ['input' => [4,2,3], 'expect' => [2, 1]];\n$tests[]\
    \ = ['input' => [1,2,3], 'expect' => [2, 1]];\n$tests[] = ['input' => [], 'expect'\
    \ => []];\n$tests[] = ['input' => [5, 0, 3, 0, 4, 2], 'expect' => [0, 1]];\n\n\
    foreach ($tests as $i => $test) {\n    $result = pluck($test['input']);\n    if\
    \ ($test['expect'] != $result) {\n        echo \"Test $i failed. Expect \" . implode(',',\
    \ $test['expect']) . \" got \" . implode(',', $result) . \"\\n\";\n    }\n}",
  "    $evens = [];\n    $evensIndex = [];\n    foreach ($arr as $key => $value) {\n\
    \        if ($value % 2 == 0) {\n            $evens[] = $value;\n            $evensIndex[]\
    \ = $key;\n        }\n    }\n    if (empty($evens)) {\n        return [];\n  \
    \  }\n    $min = min($evens);\n    $minIndex = array_search($min, $evens);\n \
    \   return [$min, $evensIndex[$minIndex]];\n}\n", "    $evens = [];\n    $indexes\
    \ = [];\n    foreach ($arr as $index => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $evens[] = $value;\n            $indexes[] = $index;\n      \
    \  }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $minIndex = array_search($min, $evens);\n    return [$min, $indexes[$minIndex]];\n\
    }\n", "    $evens = array_filter($arr, function($x) {\n        return $x % 2 ==\
    \ 0;\n    });\n    if (count($evens) == 0) {\n        return [];\n    }\n    $min\
    \ = min($evens);\n    $index = array_search($min, $arr);\n    return [$min, $index];\n\
    }\n\n$tests = [\n    [[4,2,3], [2, 1]],\n    [[1,2,3], [2, 1]],\n    [[], []],\n\
    \    [[5, 0, 3, 0, 4, 2], [0, 1]],\n];\n\nforeach ($tests as $test) {\n    $arr\
    \ = $test[0];\n    $expected = $test[1];\n    $result = pluck($arr);\n    if ($result\
    \ == $expected) {\n        echo \"PASSED: pluck(\" . implode(',', $arr) . \")\
    \ == \" . implode(',', $expected) . \"\\n\";\n    } else {\n        echo \"FAILED:\
    \ pluck(\" . implode(',', $arr) . \") -> \" . implode(',', $result) . \"\\n\"\
    ;\n    }\n}", "    // your code here\n}\n", "    $evens = array_filter($arr, function($n)\
    \ {\n        return $n % 2 == 0;\n    });\n    if (empty($evens)) {\n        return\
    \ [];\n    }\n    $min = min($evens);\n    $index = array_search($min, $arr);\n\
    \    return [$min, $index];\n}\n\n$tests = [\n    [[4,2,3], [2, 1]],\n    [[1,2,3],\
    \ [2, 1]],\n    [[], []],\n    [[5, 0, 3, 0, 4, 2], [0, 1]],\n];\n\nforeach ($tests\
    \ as $test) {\n    $input = $test[0];\n    $expected = $test[1];\n    $result\
    \ = pluck($input);\n    if ($result !== $expected) {\n        echo \"FAIL: pluck({$input})\
    \ = {$result} expected {$expected}\\n\";\n    } else {\n        echo \"PASS\\\
    n\";\n    }\n}", "    $evens = [];\n    $evens_indexes = [];\n    foreach ($arr\
    \ as $index => $value) {\n        if ($value % 2 == 0) {\n            $evens[]\
    \ = $value;\n            $evens_indexes[] = $index;\n        }\n    }\n    if\
    \ (empty($evens)) {\n        return [];\n    }\n    $min_even = min($evens);\n\
    \    $min_even_index = array_search($min_even, $evens);\n    return [$min_even,\
    \ $evens_indexes[$min_even_index]];\n}\n\n$arr = [4,2,3];\n$arr = [1,2,3];\n$arr\
    \ = [];\n$arr = [5, 0, 3, 0, 4, 2];\n\nprint_r(pluck($arr));", "    $evens = [];\n\
    \    foreach ($arr as $i => $v) {\n        if ($v % 2 == 0) {\n            $evens[]\
    \ = [$v, $i];\n        }\n    }\n    if (empty($evens)) {\n        return [];\n\
    \    }\n    usort($evens, function($a, $b) {\n        if ($a[0] == $b[0]) {\n\
    \            return $a[1] - $b[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $evens[0];\n}\n\n$tests = [\n    [[4,2,3], [2, 1]],\n   \
    \ [[1,2,3], [2, 1]],\n    [[], []],\n    [[5, 0, 3, 0, 4, 2], [0, 1]],\n];\n\n\
    foreach ($tests as $test) {\n    $result = pluck($test[0]);\n    if ($result !=\
    \ $test[1]) {\n        echo \"FAILED!  Input: \" . implode(',', $test[0]) . \"\
    ; Expected: \" . implode(',', $test[1]) . \"; Got: \" . implode(',', $result)\
    \ . \"\\n\";\n    } else {\n        echo \"PASSED!\\n\";\n    }\n}", "    $evens\
    \ = [];\n    $indexes = [];\n    foreach ($arr as $key => $value) {\n        if\
    \ ($value % 2 == 0) {\n            $evens[] = $value;\n            $indexes[]\
    \ = $key;\n        }\n    }\n    if (count($evens) == 0) {\n        return [];\n\
    \    }\n    $min = min($evens);\n    $minIndex = array_search($min, $evens);\n\
    \    return [$min, $indexes[$minIndex]];\n}\n\n$tests = [\n    [[4,2,3], [2, 1]],\n\
    \    [[1,2,3], [2, 1]],\n    [[], []],\n    [[5, 0, 3, 0, 4, 2], [0, 1]],\n];\n\
    \nforeach ($tests as $test) {\n    $result = pluck($test[0]);\n    if ($result\
    \ == $test[1]) {\n        echo \"Test passed \\n\";\n    } else {\n        echo\
    \ \"Test failed \\n\";\n    }\n}", "    $evens = [];\n    $evens_indexes = [];\n\
    \    foreach ($arr as $index => $value) {\n        if ($value % 2 == 0) {\n  \
    \          $evens[] = $value;\n            $evens_indexes[] = $index;\n      \
    \  }\n    }\n    if (count($evens) == 0) {\n        return [];\n    }\n    $min_even\
    \ = min($evens);\n    $min_even_index = array_search($min_even, $evens);\n   \
    \ return [$min_even, $evens_indexes[$min_even_index]];\n}\n", "    if (empty($arr))\
    \ {\n        return [];\n    }\n    $evens = [];\n    foreach ($arr as $i => $v)\
    \ {\n        if ($v % 2 == 0) {\n            $evens[] = $v;\n        }\n    }\n\
    \    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $index = array_search($min, $arr);\n    return [$min, $index];\n}\n\n$tests\
    \ = [];\n$tests[] = ['input' => [4,2,3], 'expect' => [2, 1]];\n$tests[] = ['input'\
    \ => [1,2,3], 'expect' => [2, 1]];\n$tests[] = ['input' => [], 'expect' => []];\n\
    $tests[] = ['input' => [5, 0, 3, 0, 4, 2], 'expect' => [0, 1]];\n\nforeach ($tests\
    \ as $i => $test) {\n    $result = pluck($test['input']);\n    if ($test['expect']\
    \ != $result) {\n        echo \"Test{$i} failed\\n\";\n        echo \"Input: \"\
    ;\n        print_r($test['input']);\n        echo \"\\n\";\n        echo \"Expect:\
    \ \";\n        print_r($test['expect']);\n        echo \"\\n\";\n        echo\
    \ \"Result: \";\n        print_r($result);\n        echo \"\\n\";\n    }\n}",
  "    $evens = [];\n    foreach ($arr as $key => $value) {\n        if ($value %\
    \ 2 == 0) {\n            $evens[] = [$value, $key];\n        }\n    }\n    if\
    \ (empty($evens)) {\n        return [];\n    }\n    usort($evens, function ($a,\
    \ $b) {\n        if ($a[0] == $b[0]) {\n            return $a[1] - $b[1];\n  \
    \      }\n        return $a[0] - $b[0];\n    });\n    return $evens[0];\n}\n\n\
    $tests = [];\n$tests[] = ['input' => [4, 2, 3], 'expect' => [2, 1]];\n$tests[]\
    \ = ['input' => [1, 2, 3], 'expect' => [2, 1]];\n$tests[] = ['input' => [], 'expect'\
    \ => []];\n$tests[] = ['input' => [5, 0, 3, 0, 4, 2], 'expect' => [0, 1]];\n\n\
    foreach ($tests as $index => $test) {\n    $result = pluck($test['input']);\n\
    \    if ($test['expect'] != $result) {\n        echo 'Test fail at test' . ($index\
    \ + 1) . PHP_EOL;\n        exit;\n    }\n}\n\necho 'Test good!' . PHP_EOL;", " \
    \   $evens = [];\n    $indexes = [];\n    foreach ($arr as $index => $value) {\n\
    \        if ($value % 2 == 0) {\n            $evens[] = $value;\n            $indexes[]\
    \ = $index;\n        }\n    }\n    if (empty($evens)) {\n        return [];\n\
    \    }\n    $min = min($evens);\n    $minIndex = array_search($min, $evens);\n\
    \    return [$min, $indexes[$minIndex]];\n}\n\n$tests = [];\n$tests[] = ['input'\
    \ => [4,2,3], 'expect' => [2, 1]];\n$tests[] = ['input' => [1,2,3], 'expect' =>\
    \ [2, 1]];\n$tests[] = ['input' => [], 'expect' => []];\n$tests[] = ['input' =>\
    \ [5, 0, 3, 0, 4, 2], 'expect' => [0, 1]];\nforeach ($tests as $index => $test)\
    \ {\n    $result = pluck($test['input']);\n    if ($test['expect'] != $result)\
    \ {\n        echo 'Test fail at test' . ($index + 1) . PHP_EOL;\n        exit;\n\
    \    }\n}\necho 'Test good!' . PHP_EOL;", "    $even = [];\n    $evenIndex = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $even[] = $value;\n            $evenIndex[] = $key;\n        }\n    }\n\
    \    if (empty($even)) {\n        return [];\n    }\n    $min = min($even);\n\
    \    $minIndex = array_search($min, $even);\n    return [$min, $evenIndex[$minIndex]];\n\
    }\n\n$arr = [4,2,3];\nprint_r(pluck($arr));\n$arr = [1,2,3];\nprint_r(pluck($arr));\n\
    $arr = [];\nprint_r(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $evens = [];\n    foreach ($arr as $key => $value) {\n        if ($value %\
    \ 2 == 0) {\n            $evens[] = $value;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $smallestEven = min($evens);\n    $smallestEvenIndex\
    \ = array_search($smallestEven, $arr);\n    return [$smallestEven, $smallestEvenIndex];\n\
    }\n\n$tests = [\n    [[4,2,3], [2, 1]],\n    [[1,2,3], [2, 1]],\n    [[], []],\n\
    \    [[5, 0, 3, 0, 4, 2], [0, 1]],\n];\n\nforeach ($tests as $test) {\n    $result\
    \ = pluck($test[0]);\n    if ($result === $test[1]) {\n        echo \"Test passed:\
    \ \" . implode(',', $test[0]) . \"\\n\";\n    } else {\n        echo \"Test failed:\
    \ \" . implode(',', $test[0]) . \"\\n\";\n        echo \"Result: \" . implode(',',\
    \ $result) . \"\\n\";\n        echo \"Expected: \" . implode(',', $test[1]) .\
    \ \"\\n\";\n    }\n}", "    $evens = [];\n    foreach ($arr as $i => $v) {\n \
    \       if ($v % 2 == 0) {\n            $evens[] = [$v, $i];\n        }\n    }\n\
    \    if (empty($evens)) {\n        return [];\n    }\n    usort($evens, function($a,\
    \ $b) {\n        if ($a[0] == $b[0]) {\n            return $a[1] - $b[1];\n  \
    \      }\n        return $a[0] - $b[0];\n    });\n    return $evens[0];\n}\n",
  "    $even = [];\n    $odd = [];\n    foreach ($arr as $key => $value) {\n     \
    \   if ($value % 2 == 0) {\n            $even[] = $value;\n        } else {\n\
    \            $odd[] = $value;\n        }\n    }\n    if (empty($even)) {\n   \
    \     return [];\n    }\n    $min = min($even);\n    $key = array_search($min,\
    \ $arr);\n    return [$min, $key];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\
    \n$arr = [1, 2, 3];\nprint_r(pluck($arr));\n\n$arr = [];\nprint_r(pluck($arr));\n\
    \n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $evens = [];\n    $evens_indexes\
    \ = [];\n    foreach ($arr as $index => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $evens[] = $value;\n            $evens_indexes[] = $index;\n\
    \        }\n    }\n    if (count($evens) == 0) {\n        return [];\n    }\n\
    \    $min_index = array_search(min($evens), $evens);\n    return [$evens[$min_index],\
    \ $evens_indexes[$min_index]];\n}\necho json_encode(pluck([4,2,3]));\necho json_encode(pluck([1,2,3]));\n\
    echo json_encode(pluck([]));\necho json_encode(pluck([5, 0, 3, 0, 4, 2]));", " \
    \   $evens = [];\n    $evens_indexes = [];\n    foreach ($arr as $index => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        \
    \    $evens_indexes[] = $index;\n        }\n    }\n    if (empty($evens)) {\n\
    \        return [];\n    }\n    $min_even = min($evens);\n    $min_even_index\
    \ = array_search($min_even, $evens);\n    return [$min_even, $evens_indexes[$min_even_index]];\n\
    }\n\n$tests = [\n    [[4,2,3], [2, 1]],\n    [[1,2,3], [2, 1]],\n    [[], []],\n\
    \    [[5, 0, 3, 0, 4, 2], [0, 1]],\n];\n\nforeach ($tests as $test) {\n    $input\
    \ = $test[0];\n    $expected = $test[1];\n    $output = pluck($input);\n    if\
    \ ($expected == $output) {\n        echo \"\u2705 {$input}<br>\";\n    } else\
    \ {\n        echo \"\U0001F534 {$input}<br>\";\n        echo \"Expected output\
    \ to be<br>\";\n        echo \"<pre>\";\n        print_r($expected);\n       \
    \ echo \"</pre>\";\n        echo \"But got<br>\";\n        echo \"<pre>\";\n \
    \       print_r($output);\n        echo \"</pre>\";\n    }\n    echo \"<hr>\"\
    ;\n}", "    $evens = [];\n    $evens_indexes = [];\n    foreach ($arr as $index\
    \ => $value) {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n\
    \            $evens_indexes[] = $index;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min_even = min($evens);\n    $min_even_index\
    \ = array_search($min_even, $evens);\n    return [$min_even, $evens_indexes[$min_even_index]];\n\
    }\n\n$tests = [];\n$tests[] = ['input' => [4,2,3], 'expect' => [2, 1]];\n$tests[]\
    \ = ['input' => [1,2,3], 'expect' => [2, 1]];\n$tests[] = ['input' => [], 'expect'\
    \ => []];\n$tests[] = ['input' => [5, 0, 3, 0, 4, 2], 'expect' => [0, 1]];\n\n\
    foreach ($tests as $index => $test) {\n    $result = pluck($test['input']);\n\
    \    if ($test['expect'] != $result) {\n        echo 'Test fail at test' . ($index\
    \ + 1) . PHP_EOL;\n        exit;\n    }\n}\n\necho 'Test good!' . PHP_EOL;", " \
    \   $evens = [];\n    $evens_indexes = [];\n    $min_even = PHP_INT_MAX;\n   \
    \ $min_even_index = PHP_INT_MAX;\n    foreach ($arr as $index => $value) {\n \
    \       if ($value % 2 == 0) {\n            $evens[] = $value;\n            $evens_indexes[]\
    \ = $index;\n        }\n    }\n    if (count($evens) == 0) {\n        return [];\n\
    \    }\n    foreach ($evens as $index => $value) {\n        if ($value < $min_even)\
    \ {\n            $min_even = $value;\n            $min_even_index = $evens_indexes[$index];\n\
    \        }\n    }\n    return [$min_even, $min_even_index];\n}\n\n$tests = [\n\
    \    [[4,2,3], [2, 1]],\n    [[1,2,3], [2, 1]],\n    [[], []],\n    [[5, 0, 3,\
    \ 0, 4, 2], [0, 1]],\n];\n\nforeach ($tests as $test) {\n    $result = pluck($test[0]);\n\
    \    if ($result != $test[1]) {\n        echo \"FAILED!\\n\";\n        echo \"\
    Input: \" . implode(',', $test[0]) . \"\\n\";\n        echo \"Expected: \" . implode(',',\
    \ $test[1]) . \"\\n\";\n        echo \"Got: \" . implode(',', $result) . \"\\\
    n\";\n    } else {\n        echo \"PASSED!\\n\";\n    }\n}", "    $evens = [];\n\
    \    foreach ($arr as $i => $v) {\n        if ($v % 2 == 0) {\n            $evens[]\
    \ = [$v, $i];\n        }\n    }\n    if (empty($evens)) {\n        return [];\n\
    \    }\n    usort($evens, function($a, $b) {\n        if ($a[0] == $b[0]) {\n\
    \            return $a[1] - $b[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $evens[0];\n}\n", "    $evens = [];\n    $evens_indexes =\
    \ [];\n    foreach ($arr as $index => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $evens[] = $value;\n            $evens_indexes[] = $index;\n\
    \        }\n    }\n    if (count($evens) == 0) {\n        return [];\n    }\n\
    \    $min_even = min($evens);\n    $min_even_index = array_search($min_even, $evens);\n\
    \    return [$min_even, $evens_indexes[$min_even_index]];\n}\n\n$arr = [4,2,3];\n\
    $arr = [1,2,3];\n$arr = [];\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $evens = [];\n    $index = 0;\n    foreach ($arr as $key => $value) {\n   \
    \     if ($value % 2 == 0) {\n            $evens[$key] = $value;\n        }\n\
    \    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    foreach ($evens as $key => $value) {\n        if ($value == $min) {\n   \
    \         $index = $key;\n            break;\n        }\n    }\n    return [$min,\
    \ $index];\n}\n", "    $min = PHP_INT_MAX;\n    $minIndex = PHP_INT_MAX;\n   \
    \ $minFound = false;\n    foreach ($arr as $index => $value) {\n        if ($value\
    \ % 2 == 0) {\n            if ($value < $min) {\n                $min = $value;\n\
    \                $minIndex = $index;\n                $minFound = true;\n    \
    \        } else if ($value == $min) {\n                if ($index < $minIndex)\
    \ {\n                    $minIndex = $index;\n                }\n            }\n\
    \        }\n    }\n    if ($minFound) {\n        return [$min, $minIndex];\n \
    \   } else {\n        return [];\n    }\n}\n", "    $evens = [];\n    foreach\
    \ ($arr as $i => $v) {\n        if ($v % 2 == 0) {\n            $evens[] = [$v,\
    \ $i];\n        }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n\
    \    usort($evens, function($a, $b) {\n        if ($a[0] == $b[0]) {\n       \
    \     return $a[1] - $b[1];\n        }\n        return $a[0] - $b[0];\n    });\n\
    \    return $evens[0];\n}\n", "    $evens = [];\n    $evens_indexes = [];\n  \
    \  $result = [];\n    foreach ($arr as $key => $value) {\n        if ($value %\
    \ 2 == 0) {\n            $evens[] = $value;\n            $evens_indexes[] = $key;\n\
    \        }\n    }\n    if (count($evens) > 0) {\n        $min_value = min($evens);\n\
    \        $min_index = array_search($min_value, $evens);\n        $result = [$min_value,\
    \ $evens_indexes[$min_index]];\n    }\n    return $result;\n}\n\n$arr = [4, 2,\
    \ 3];\nprint_r(pluck($arr));\n\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\n\n$arr\
    \ = [];\nprint_r(pluck($arr));\n\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $evens = [];\n    $evens_indexes = [];\n    foreach ($arr as $index => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        \
    \    $evens_indexes[] = $index;\n        }\n    }\n    if (count($evens) == 0)\
    \ {\n        return [];\n    }\n    $min_even = min($evens);\n    $min_even_index\
    \ = array_search($min_even, $evens);\n    return [$min_even, $evens_indexes[$min_even_index]];\n\
    }\n\n$arr = [4,2,3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [1,2,3];\n\
    print_r(pluck($arr));\necho \"\\n\";\n$arr = [];\nprint_r(pluck($arr));\necho\
    \ \"\\n\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\necho \"\\n\";",
  "    if (empty($arr)) {\n        return [];\n    }\n    $evens = [];\n    foreach\
    \ ($arr as $i => $v) {\n        if ($v % 2 == 0) {\n            $evens[] = [$v,\
    \ $i];\n        }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n\
    \    usort($evens, function($a, $b) {\n        if ($a[0] == $b[0]) {\n       \
    \     return $a[1] - $b[1];\n        }\n        return $a[0] - $b[0];\n    });\n\
    \    return $evens[0];\n}\n\n$tests = [\n    [[4,2,3], [2, 1]],\n    [[1,2,3],\
    \ [2, 1]],\n    [[], []],\n    [[5, 0, 3, 0, 4, 2], [0, 1]],\n];\n\nforeach ($tests\
    \ as $test) {\n    $res = pluck($test[0]);\n    $success = $res == $test[1];\n\
    \    if ($success) {\n        echo \"SUCCESS: \";\n    } else {\n        echo\
    \ \"FAILURE: \";\n    }\n    echo \"pluck(\" . json_encode($test[0]) . \") ==\
    \ \" . json_encode($res) . \"\\n\";\n}", "    $smallest = PHP_INT_MAX;\n    $index\
    \ = -1;\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0 &&\
    \ $value < $smallest) {\n            $smallest = $value;\n            $index =\
    \ $key;\n        }\n    }\n    if ($index == -1) {\n        return [];\n    }\n\
    \    return [$smallest, $index];\n}\n\n$tests = [\n    [[4,2,3], [2, 1]],\n  \
    \  [[1,2,3], [2, 1]],\n    [[], []],\n    [[5, 0, 3, 0, 4, 2], [0, 1]],\n];\n\n\
    foreach ($tests as $test) {\n    $result = pluck($test[0]);\n    if ($result ==\
    \ $test[1]) {\n        echo \"Test passed \\n\";\n    } else {\n        echo \"\
    Test failed \\n\";\n    }\n}", "    $evens = [];\n    foreach ($arr as $key =>\
    \ $value) {\n        if ($value % 2 == 0) {\n            $evens[] = [$value, $key];\n\
    \        }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min\
    \ = $evens[0];\n    foreach ($evens as $even) {\n        if ($even[0] < $min[0])\
    \ {\n            $min = $even;\n        }\n    }\n    return $min;\n}\n\n$tests\
    \ = [];\n$tests[] = ['input' => [4, 2, 3], 'expect' => [2, 1]];\n$tests[] = ['input'\
    \ => [1, 2, 3], 'expect' => [2, 1]];\n$tests[] = ['input' => [], 'expect' => []];\n\
    $tests[] = ['input' => [5, 0, 3, 0, 4, 2], 'expect' => [0, 1]];\n\nforeach ($tests\
    \ as $index => $test) {\n    $result = pluck($test['input']);\n    if ($test['expect']\
    \ != $result) {\n        echo 'Test fail at test' . ($index + 1) . PHP_EOL;\n\
    \        exit;\n    }\n}\n\necho 'Test good!' . PHP_EOL;", "    $evens = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $evens[] = $value;\n        }\n    }\n    if (empty($evens)) {\n    \
    \    return [];\n    }\n    $min = min($evens);\n    $index = array_search($min,\
    \ $arr);\n    return [$min, $index];\n}\n", "    $evens = [];\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[] =\
    \ $value;\n        }\n    }\n    if (count($evens) == 0) {\n        return [];\n\
    \    }\n    $min = min($evens);\n    $key = array_search($min, $arr);\n    return\
    \ [$min, $key];\n}\n\n$arr = [4,2,3];\nprint_r(pluck($arr));\n$arr = [1,2,3];\n\
    print_r(pluck($arr));\n$arr = [];\nprint_r(pluck($arr));\n$arr = [5, 0, 3, 0,\
    \ 4, 2];\nprint_r(pluck($arr));", "    $evens = [];\n    foreach ($arr as $i =>\
    \ $v) {\n        if ($v % 2 == 0) {\n            $evens[] = [$v, $i];\n      \
    \  }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n    usort($evens,\
    \ function($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $a[1]\
    \ - $b[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $evens[0];\n\
    }\n\n$tests = [];\n$tests[] = ['input' => [4,2,3], 'expect' => [2, 1]];\n$tests[]\
    \ = ['input' => [1,2,3], 'expect' => [2, 1]];\n$tests[] = ['input' => [], 'expect'\
    \ => []];\n$tests[] = ['input' => [5, 0, 3, 0, 4, 2], 'expect' => [0, 1]];\n\n\
    foreach ($tests as $i => $test) {\n    $result = pluck($test['input']);\n    if\
    \ ($test['expect'] != $result) {\n        echo \"Test{$i} failed\\n\";\n     \
    \   echo \"Input: \";\n        print_r($test['input']);\n        echo \"\\n\"\
    ;\n        echo \"Expect: \";\n        print_r($test['expect']);\n        echo\
    \ \"\\n\";\n        echo \"Result: \";\n        print_r($result);\n        echo\
    \ \"\\n\";\n    }\n}", "    $evens = [];\n    $index = [];\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[] =\
    \ $value;\n            $index[] = $key;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $key = array_search($min,\
    \ $evens);\n    return [$min, $index[$key]];\n}\n\n$arr = [4,2,3];\n$arr = [1,2,3];\n\
    $arr = [];\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $evens =\
    \ [];\n    $evens_indexes = [];\n    foreach ($arr as $index => $value) {\n  \
    \      if ($value % 2 == 0) {\n            $evens[] = $value;\n            $evens_indexes[]\
    \ = $index;\n        }\n    }\n    if (empty($evens)) {\n        return [];\n\
    \    }\n    $min_index = array_search(min($evens), $evens);\n    return [$evens[$min_index],\
    \ $evens_indexes[$min_index]];\n}\n\n$arr = [4,2,3];\nprint_r(pluck($arr));\n\
    echo \"\\n\";\n$arr = [1,2,3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [];\n\
    print_r(pluck($arr));\necho \"\\n\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\n\
    echo \"\\n\";", "    $evens = array_filter($arr, function($n) {\n        return\
    \ $n % 2 == 0;\n    });\n    if (empty($evens)) {\n        return [];\n    }\n\
    \    $min = min($evens);\n    $index = array_search($min, $arr);\n    return [$min,\
    \ $index];\n}\n\n$tests = [\n    [[4,2,3], [2, 1]],\n    [[1,2,3], [2, 1]],\n\
    \    [[], []],\n    [[5, 0, 3, 0, 4, 2], [0, 1]],\n];\n\nforeach ($tests as [$input,\
    \ $expected]) {\n    $output = pluck($input);\n    if ($output !== $expected)\
    \ {\n        echo \"FAIL: input: \" . json_encode($input) . \" expected: \" .\
    \ json_encode($expected) . \" output: \" . json_encode($output) . \"\\n\";\n \
    \   }\n}", "    $evens = [];\n    foreach ($arr as $key => $value) {\n       \
    \ if ($value % 2 == 0) {\n            $evens[] = $value;\n        }\n    }\n \
    \   if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $minKey = array_search($min, $arr);\n    return [$min, $minKey];\n}\n", " \
    \   $min = PHP_INT_MAX;\n    $minIndex = -1;\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] % 2 == 0 && $arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n            $minIndex = $i;\n        }\n    }\n    if ($minIndex\
    \ == -1) {\n        return [];\n    }\n    return [$min, $minIndex];\n}\n\n$arr\
    \ = [4,2,3];\nprint_r(pluck($arr));\n$arr = [1,2,3];\nprint_r(pluck($arr));\n\
    $arr = [];\nprint_r(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $evens = [];\n    $evens_indexes = [];\n    foreach ($arr as $index => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        \
    \    $evens_indexes[] = $index;\n        }\n    }\n    if (count($evens) == 0)\
    \ {\n        return [];\n    }\n    $min_even = min($evens);\n    $min_even_index\
    \ = $evens_indexes[array_search($min_even, $evens)];\n    return [$min_even, $min_even_index];\n\
    }\n\n$arr = [4,2,3];\nprint_r(pluck($arr));\n\n$arr = [1,2,3];\nprint_r(pluck($arr));\n\
    \n$arr = [];\nprint_r(pluck($arr));\n\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    // your code here\n}\n", "    $evens = [];\n    $evens_indexes = [];\n    foreach\
    \ ($arr as $index => $value) {\n        if ($value % 2 == 0) {\n            $evens[]\
    \ = $value;\n            $evens_indexes[] = $index;\n        }\n    }\n    if\
    \ (empty($evens)) {\n        return [];\n    }\n    $min_even = min($evens);\n\
    \    $min_even_index = array_search($min_even, $evens);\n    return [$min_even,\
    \ $evens_indexes[$min_even_index]];\n}\n\n$tests = [];\n$tests[] = ['input' =>\
    \ [4,2,3], 'expect' => [2, 1]];\n$tests[] = ['input' => [1,2,3], 'expect' => [2,\
    \ 1]];\n$tests[] = ['input' => [], 'expect' => []];\n$tests[] = ['input' => [5,\
    \ 0, 3, 0, 4, 2], 'expect' => [0, 1]];\n\nforeach ($tests as $index => $test)\
    \ {\n    $result = pluck($test['input']);\n    if ($test['expect'] != $result)\
    \ {\n        echo 'Test fail at test' . ($index + 1) . PHP_EOL;\n        exit;\n\
    \    }\n}\n\necho 'Test good!' . PHP_EOL;", "    $evens = array_filter($arr, function($v)\
    \ { return $v % 2 == 0; });\n    if (count($evens) == 0) {\n        return [];\n\
    \    }\n    $min = min($evens);\n    $index = array_search($min, $arr);\n    return\
    \ [$min, $index];\n}\n\n$tests = [\n    [[4,2,3], [2, 1]],\n    [[1,2,3], [2,\
    \ 1]],\n    [[], []],\n    [[5, 0, 3, 0, 4, 2], [0, 1]],\n];\n\nforeach ($tests\
    \ as $test) {\n    $input = $test[0];\n    $expected = $test[1];\n    $output\
    \ = pluck($input);\n    if ($expected == $output) {\n        echo \"PASSED: pluck({$input})\
    \ -> {$output}\\n\";\n    } else {\n        echo \"FAILED: pluck({$input}) ->\
    \ {$output} (expected {$expected})\\n\";\n    }\n}", "    $evens = array_filter($arr,\
    \ function($v) {\n        return $v % 2 == 0;\n    });\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $index = array_search($min,\
    \ $arr);\n    return [$min, $index];\n}\n\n$tests = [\n    [[4,2,3], [2, 1]],\n\
    \    [[1,2,3], [2, 1]],\n    [[], []],\n    [[5, 0, 3, 0, 4, 2], [0, 1]],\n];\n\
    \nforeach ($tests as $test) {\n    $result = pluck($test[0]);\n    if ($result\
    \ === $test[1]) {\n        echo \"Test passed \\n\";\n    } else {\n        echo\
    \ \"Test failed \\n\";\n    }\n}", "    $evens = [];\n    foreach ($arr as $key\
    \ => $value) {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n\
    \        }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min\
    \ = min($evens);\n    $index = array_search($min, $arr);\n    return [$min, $index];\n\
    }\n\n$input = [4,2,3];\nprint_r(pluck($input));\n\n$input = [1,2,3];\nprint_r(pluck($input));\n\
    \n$input = [];\nprint_r(pluck($input));\n\n$input = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($input));",
  "    $evens = [];\n    $evensIndex = [];\n    foreach ($arr as $key => $value) {\n\
    \        if ($value % 2 == 0) {\n            $evens[] = $value;\n            $evensIndex[]\
    \ = $key;\n        }\n    }\n    if (empty($evens)) {\n        return [];\n  \
    \  }\n    $min = min($evens);\n    $minIndex = array_search($min, $evens);\n \
    \   return [$min, $evensIndex[$minIndex]];\n}\n\n$arr = [4,2,3];\nprint_r(pluck($arr));\n\
    echo \"\\n\";\n$arr = [1,2,3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [];\n\
    print_r(pluck($arr));\necho \"\\n\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\n\
    echo \"\\n\";", "    $evens = [];\n    $evens_indexes = [];\n    foreach ($arr\
    \ as $index => $value) {\n        if ($value % 2 == 0) {\n            $evens[]\
    \ = $value;\n            $evens_indexes[] = $index;\n        }\n    }\n    if\
    \ (count($evens) == 0) {\n        return [];\n    }\n    $min_even = min($evens);\n\
    \    $min_even_index = array_search($min_even, $evens);\n    return [$min_even,\
    \ $evens_indexes[$min_even_index]];\n}\n", "    $evens = [];\n    $evensIndex\
    \ = [];\n    foreach ($arr as $index => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $evens[] = $value;\n            $evensIndex[] = $index;\n   \
    \     }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min\
    \ = min($evens);\n    $minIndex = array_search($min, $evens);\n    return [$min,\
    \ $evensIndex[$minIndex]];\n}\n\n$arr = [4,2,3];\nprint_r(pluck($arr));\n\n$arr\
    \ = [1,2,3];\nprint_r(pluck($arr));\n\n$arr = [];\nprint_r(pluck($arr));\n\n$arr\
    \ = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $evens = array_filter($arr,\
    \ function($n) { return $n % 2 == 0; });\n    if (empty($evens)) {\n        return\
    \ [];\n    }\n    $min = min($evens);\n    $index = array_search($min, $arr);\n\
    \    return [$min, $index];\n}\n", "    $evens = [];\n    $indexes = [];\n   \
    \ foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n       \
    \     $evens[] = $value;\n            $indexes[] = $key;\n        }\n    }\n \
    \   if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $minIndex = array_search($min, $evens);\n    return [$min, $indexes[$minIndex]];\n\
    }\n\n$tests = [\n    [[4,2,3], [2, 1]],\n    [[1,2,3], [2, 1]],\n    [[], []],\n\
    \    [[5, 0, 3, 0, 4, 2], [0, 1]],\n];\n\nforeach ($tests as $test) {\n    $input\
    \ = $test[0];\n    $expected = $test[1];\n    $result = pluck($input);\n    if\
    \ ($result === $expected) {\n        echo \"Test passed: \" . json_encode($input)\
    \ . \" => \" . json_encode($result) . \"\\n\";\n    } else {\n        echo \"\
    Test failed: \" . json_encode($input) . \" => \" . json_encode($result) . \" (expected\
    \ \" . json_encode($expected) . \")\\n\";\n    }\n}", "    $evens = [];\n    $evensIndex\
    \ = [];\n    $evensCount = 0;\n    foreach ($arr as $index => $value) {\n    \
    \    if ($value % 2 == 0) {\n            $evens[] = $value;\n            $evensIndex[]\
    \ = $index;\n            $evensCount++;\n        }\n    }\n    if ($evensCount\
    \ == 0) {\n        return [];\n    }\n    $min = min($evens);\n    $minIndex =\
    \ array_search($min, $evens);\n    return [$min, $evensIndex[$minIndex]];\n}\n\
    \n$arr = [4,2,3];\nprint_r(pluck($arr));\n$arr = [1,2,3];\nprint_r(pluck($arr));\n\
    $arr = [];\nprint_r(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    if (empty($arr)) {\n        return [];\n    }\n    $evens = [];\n    foreach\
    \ ($arr as $key => $val) {\n        if ($val % 2 == 0) {\n            $evens[$key]\
    \ = $val;\n        }\n    }\n    if (empty($evens)) {\n        return [];\n  \
    \  }\n    asort($evens);\n    $keys = array_keys($evens);\n    return [$evens[$keys[0]],\
    \ $keys[0]];\n}\n\n$arr = [4,2,3];\nprint_r(pluck($arr));\n$arr = [1,2,3];\nprint_r(pluck($arr));\n\
    $arr = [];\nprint_r(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $evens = array_filter($arr, function($v) {\n        return $v % 2 == 0;\n \
    \   });\n    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $key = array_search($min, $arr);\n    return [$min, $key];\n}\n\n$tests =\
    \ [];\n$tests[] = ['input' => [4,2,3], 'expect' => [2, 1]];\n$tests[] = ['input'\
    \ => [1,2,3], 'expect' => [2, 1]];\n$tests[] = ['input' => [], 'expect' => []];\n\
    $tests[] = ['input' => [5, 0, 3, 0, 4, 2], 'expect' => [0, 1]];\n\nforeach ($tests\
    \ as $index => $test) {\n    $result = pluck($test['input']);\n    if ($test['expect']\
    \ != $result) {\n        echo 'Test fail at test' . ($index + 1) . PHP_EOL;\n\
    \        exit;\n    }\n}\n\necho 'Test good!' . PHP_EOL;", "    $evens = [];\n\
    \    foreach ($arr as $i => $v) {\n        if ($v % 2 == 0) {\n            $evens[]\
    \ = [$v, $i];\n        }\n    }\n    if (empty($evens)) {\n        return [];\n\
    \    }\n    usort($evens, function($a, $b) {\n        if ($a[0] == $b[0]) {\n\
    \            return $a[1] - $b[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $evens[0];\n}\n\n$tests = [\n    [[4,2,3], [2, 1]],\n   \
    \ [[1,2,3], [2, 1]],\n    [[], []],\n    [[5, 0, 3, 0, 4, 2], [0, 1]],\n];\n\n\
    foreach ($tests as $test) {\n    $ret = pluck($test[0]);\n    if ($ret !== $test[1])\
    \ {\n        echo \"FAIL: \" . json_encode($test) . \": \" . json_encode($ret)\
    \ . \"\\n\";\n    } else {\n        echo \"PASS\\n\";\n    }\n}", "    $evens\
    \ = [];\n    $indexes = [];\n    foreach ($arr as $i => $val) {\n        if ($val\
    \ % 2 == 0) {\n            $evens[] = $val;\n            $indexes[] = $i;\n  \
    \      }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min\
    \ = min($evens);\n    $min_index = array_search($min, $evens);\n    return [$min,\
    \ $indexes[$min_index]];\n}\n\n$arr = [4,2,3];\nprint_r(pluck($arr));\n$arr =\
    \ [1,2,3];\nprint_r(pluck($arr));\n$arr = [];\nprint_r(pluck($arr));\n$arr = [5,\
    \ 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $evens = [];\n    $index = 0;\n\
    \    foreach ($arr as $value) {\n        if ($value % 2 == 0) {\n            $evens[]\
    \ = $value;\n        }\n    }\n    if (empty($evens)) {\n        return [];\n\
    \    }\n    $min = min($evens);\n    foreach ($arr as $key => $value) {\n    \
    \    if ($value == $min) {\n            $index = $key;\n            break;\n \
    \       }\n    }\n    return [$min, $index];\n}\n\n$arr = [4,2,3];\n$arr = [1,2,3];\n\
    $arr = [];\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $evens =\
    \ [];\n    $evens_indexes = [];\n    $result = [];\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] % 2 == 0) {\n            $evens[] = $arr[$i];\n\
    \            $evens_indexes[] = $i;\n        }\n    }\n    if (count($evens) ==\
    \ 0) {\n        return [];\n    }\n    $min = min($evens);\n    $index = array_search($min,\
    \ $evens);\n    $result[] = $min;\n    $result[] = $evens_indexes[$index];\n \
    \   return $result;\n}\n$arr = [4,2,3];\nprint_r(pluck($arr));\necho \"\\n\";\n\
    $arr = [1,2,3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [];\nprint_r(pluck($arr));\n\
    echo \"\\n\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\necho \"\\n\"\
    ;", "    $evens = [];\n    $evensIndex = [];\n    $result = [];\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[] =\
    \ $value;\n            $evensIndex[] = $key;\n        }\n    }\n    if (count($evens)\
    \ == 0) {\n        return [];\n    }\n    $min = min($evens);\n    $minIndex =\
    \ array_search($min, $evens);\n    $result[] = $min;\n    $result[] = $evensIndex[$minIndex];\n\
    \    return $result;\n}\n$arr = [4,2,3];\nprint_r(pluck($arr));\necho \"\\n\"\
    ;\n$arr = [1,2,3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [];\nprint_r(pluck($arr));\n\
    echo \"\\n\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\necho \"\\n\"\
    ;", "    $evens = [];\n    foreach ($arr as $i => $val) {\n        if ($val %\
    \ 2 == 0) {\n            $evens[] = [$val, $i];\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    usort($evens, function ($a, $b) {\n      \
    \  if ($a[0] == $b[0]) {\n            return $a[1] - $b[1];\n        }\n     \
    \   return $a[0] - $b[0];\n    });\n    return $evens[0];\n}\n\n$tests = [\n \
    \   [[4,2,3], [2, 1]],\n    [[1,2,3], [2, 1]],\n    [[], []],\n    [[5, 0, 3,\
    \ 0, 4, 2], [0, 1]],\n];\n\nforeach ($tests as $test) {\n    $input = $test[0];\n\
    \    $expected = $test[1];\n    $result = pluck($input);\n    if ($result != $expected)\
    \ {\n        echo \"FAIL: pluck({$input}) == {$result} != {$expected}\\n\";\n\
    \    } else {\n        echo \"PASS\\n\";\n    }\n}", "    $even = [];\n    $odd\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $even[] = $value;\n        } else {\n            $odd[] = $value;\n\
    \        }\n    }\n    if (count($even) == 0) {\n        return [];\n    }\n \
    \   $min = min($even);\n    $index = array_search($min, $arr);\n    return [$min,\
    \ $index];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n$arr = [1, 2, 3];\n\
    print_r(pluck($arr));\n$arr = [];\nprint_r(pluck($arr));\n$arr = [5, 0, 3, 0,\
    \ 4, 2];\nprint_r(pluck($arr));", "    $evens = [];\n    foreach ($arr as $key\
    \ => $value) {\n        if ($value % 2 == 0) {\n            $evens[] = [$value,\
    \ $key];\n        }\n    }\n    if (count($evens) == 0) {\n        return [];\n\
    \    }\n    $min = $evens[0];\n    foreach ($evens as $even) {\n        if ($even[0]\
    \ < $min[0]) {\n            $min = $even;\n        }\n    }\n    return $min;\n\
    }\n\n$arr1 = [4,2,3];\n$arr2 = [1,2,3];\n$arr3 = [];\n$arr4 = [5, 0, 3, 0, 4,\
    \ 2];\n\necho \"Input: \" . json_encode($arr1) . \"\\n\";\necho \"Output: \" .\
    \ json_encode(pluck($arr1)) . \"\\n\";\necho \"Input: \" . json_encode($arr2)\
    \ . \"\\n\";\necho \"Output: \" . json_encode(pluck($arr2)) . \"\\n\";\necho \"\
    Input: \" . json_encode($arr3) . \"\\n\";\necho \"Output: \" . json_encode(pluck($arr3))\
    \ . \"\\n\";\necho \"Input: \" . json_encode($arr4) . \"\\n\";\necho \"Output:\
    \ \" . json_encode(pluck($arr4)) . \"\\n\";", "    $evens = [];\n    $evens_indexes\
    \ = [];\n    foreach ($arr as $index => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $evens[] = $value;\n            $evens_indexes[] = $index;\n\
    \        }\n    }\n    if (count($evens) == 0) {\n        return [];\n    }\n\
    \    $min_even = min($evens);\n    $min_even_index = array_search($min_even, $evens);\n\
    \    return [$min_even, $evens_indexes[$min_even_index]];\n}\n\n$tests = [];\n\
    $tests[] = ['input' => [4, 2, 3], 'expect' => [2, 1]];\n$tests[] = ['input' =>\
    \ [1, 2, 3], 'expect' => [2, 1]];\n$tests[] = ['input' => [], 'expect' => []];\n\
    $tests[] = ['input' => [5, 0, 3, 0, 4, 2], 'expect' => [0, 1]];\n\nforeach ($tests\
    \ as $index => $test) {\n    $result = pluck($test['input']);\n    if ($test['expect']\
    \ != $result) {\n        echo 'Test fail at test' . ($index + 1) . PHP_EOL;\n\
    \        exit;\n    }\n}\n\necho 'Test good!' . PHP_EOL;", "    $evens = [];\n\
    \    foreach ($arr as $i => $v) {\n        if ($v % 2 == 0) {\n            $evens[]\
    \ = [$v, $i];\n        }\n    }\n    if (empty($evens)) {\n        return [];\n\
    \    }\n    usort($evens, function($a, $b) {\n        if ($a[0] == $b[0]) {\n\
    \            return $a[1] - $b[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $evens[0];\n}\n\n$tests = [];\n$tests[] = ['input' => [4,2,3],\
    \ 'expect' => [2, 1]];\n$tests[] = ['input' => [1,2,3], 'expect' => [2, 1]];\n\
    $tests[] = ['input' => [], 'expect' => []];\n$tests[] = ['input' => [5, 0, 3,\
    \ 0, 4, 2], 'expect' => [0, 1]];\n\nforeach ($tests as $i => $test) {\n    $result\
    \ = pluck($test['input']);\n    if ($test['expect'] != $result) {\n        echo\
    \ \"Test{$i} failed\\n\";\n        echo \"Input: \";\n        print_r($test['input']);\n\
    \        echo \"\\n\";\n        echo \"Expect: \";\n        print_r($test['expect']);\n\
    \        echo \"\\n\";\n        echo \"Result: \";\n        print_r($result);\n\
    \        echo \"\\n\";\n    }\n}", "    $evens = [];\n    $evensIndex = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $evens[] = $value;\n            $evensIndex[] = $key;\n        }\n  \
    \  }\n    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $minIndex = array_search($min, $evens);\n    return [$min, $evensIndex[$minIndex]];\n\
    }\n\n$arr = [4,2,3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [1,2,3];\n\
    print_r(pluck($arr));\necho \"\\n\";\n$arr = [];\nprint_r(pluck($arr));\necho\
    \ \"\\n\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\necho \"\\n\";",
  "    $evens = [];\n    foreach ($arr as $i => $v) {\n        if ($v % 2 == 0) {\n\
    \            $evens[] = [$v, $i];\n        }\n    }\n    if (empty($evens)) {\n\
    \        return [];\n    }\n    usort($evens, function($a, $b) {\n        if ($a[0]\
    \ == $b[0]) {\n            return $a[1] - $b[1];\n        }\n        return $a[0]\
    \ - $b[0];\n    });\n    return $evens[0];\n}\n", "    $evens = [];\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[]\
    \ = $value;\n        }\n    }\n    if (count($evens) == 0) {\n        return [];\n\
    \    }\n    $min = min($evens);\n    $index = array_search($min, $arr);\n    return\
    \ [$min, $index];\n}\n", "    $evens = [];\n    $evensIndex = [];\n    foreach\
    \ ($arr as $index => $value) {\n        if ($value % 2 == 0) {\n            $evens[]\
    \ = $value;\n            $evensIndex[] = $index;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $minIndex = array_search($min,\
    \ $evens);\n    return [$min, $evensIndex[$minIndex]];\n}\n", "    $evens = [];\n\
    \    $evensIndex = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $evens[] = $value;\n            $evensIndex[] = $key;\n\
    \        }\n    }\n    if (count($evens) == 0) {\n        return [];\n    }\n\
    \    $min = min($evens);\n    $index = array_search($min, $evens);\n    return\
    \ [$min, $evensIndex[$index]];\n}\n\n$arr = [4,2,3];\nprint_r(pluck($arr));\n\
    $arr = [1,2,3];\nprint_r(pluck($arr));\n$arr = [];\nprint_r(pluck($arr));\n$arr\
    \ = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $even = [];\n    $odd =\
    \ [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n\
    \            $even[] = $value;\n        } else {\n            $odd[] = $value;\n\
    \        }\n    }\n    if (count($even) == 0) {\n        return [];\n    }\n \
    \   $min = min($even);\n    $index = array_search($min, $arr);\n    return [$min,\
    \ $index];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n$arr = [1, 2, 3];\n\
    print_r(pluck($arr));\n$arr = [];\nprint_r(pluck($arr));\n$arr = [5, 0, 3, 0,\
    \ 4, 2];\nprint_r(pluck($arr));", "    $evens = [];\n    $evens_indexes = [];\n\
    \    foreach ($arr as $i => $v) {\n        if ($v % 2 == 0) {\n            $evens[]\
    \ = $v;\n            $evens_indexes[] = $i;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min_even = min($evens);\n    $min_even_index\
    \ = array_search($min_even, $evens);\n    return [$min_even, $evens_indexes[$min_even_index]];\n\
    }\n", "    $smallestEven = null;\n    $smallestEvenIndex = null;\n    foreach\
    \ ($arr as $index => $value) {\n        if ($value % 2 == 0) {\n            if\
    \ ($smallestEven === null || $value < $smallestEven) {\n                $smallestEven\
    \ = $value;\n                $smallestEvenIndex = $index;\n            }\n   \
    \     }\n    }\n    if ($smallestEven === null) {\n        return [];\n    }\n\
    \    return [$smallestEven, $smallestEvenIndex];\n}\n\n$tests = [];\n$tests[]\
    \ = ['input' => [4, 2, 3], 'expect' => [2, 1]];\n$tests[] = ['input' => [1, 2,\
    \ 3], 'expect' => [2, 1]];\n$tests[] = ['input' => [], 'expect' => []];\n$tests[]\
    \ = ['input' => [5, 0, 3, 0, 4, 2], 'expect' => [0, 1]];\n\nforeach ($tests as\
    \ $index => $test) {\n    $result = pluck($test['input']);\n    if ($test['expect']\
    \ != $result) {\n        echo 'Test fail at test' . ($index + 1) . PHP_EOL;\n\
    \        exit;\n    }\n}\n\necho 'Test good!' . PHP_EOL;", "    $evens = [];\n\
    \    $evens_indexes = [];\n    $result = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        \
    \    $evens_indexes[] = $key;\n        }\n    }\n    if (count($evens) > 0) {\n\
    \        $min_even = min($evens);\n        $min_even_index = array_search($min_even,\
    \ $evens);\n        $result = [$min_even, $evens_indexes[$min_even_index]];\n\
    \    }\n    return $result;\n}\n\n$arr = [4, 2, 3];\n$arr = [1, 2, 3];\n$arr =\
    \ [];\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $smallestEven\
    \ = null;\n    $smallestEvenIndex = null;\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] % 2 == 0) {\n            if ($smallestEven ==\
    \ null || $arr[$i] < $smallestEven) {\n                $smallestEven = $arr[$i];\n\
    \                $smallestEvenIndex = $i;\n            }\n        }\n    }\n \
    \   if ($smallestEven == null) {\n        return [];\n    }\n    return [$smallestEven,\
    \ $smallestEvenIndex];\n}\n", "    $even = [];\n    $odd = [];\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value % 2 == 0) {\n            $even[] =\
    \ $value;\n        } else {\n            $odd[] = $value;\n        }\n    }\n\
    \    if (count($even) == 0) {\n        return [];\n    }\n    $min = min($even);\n\
    \    $index = array_search($min, $arr);\n    return [$min, $index];\n}\n\n$arr\
    \ = [4, 2, 3];\n$arr = [1, 2, 3];\n$arr = [];\n$arr = [5, 0, 3, 0, 4, 2];\n\n\
    print_r(pluck($arr));", "    $evens = [];\n    foreach ($arr as $index => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = [$value, $index];\n\
    \        }\n    }\n    if (count($evens) == 0) {\n        return [];\n    }\n\
    \    usort($evens, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n      \
    \      return $a[1] - $b[1];\n        }\n        return $a[0] - $b[0];\n    });\n\
    \    return $evens[0];\n}\n\n$arr = [4, 2, 3];\n$arr = [1, 2, 3];\n$arr = [];\n\
    $arr = [5, 0, 3, 0, 4, 2];\n\nprint_r(pluck($arr));", "    $evens = [];\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[]\
    \ = $value;\n        }\n    }\n    if (count($evens) == 0) {\n        return [];\n\
    \    }\n    $min = min($evens);\n    $key = array_search($min, $arr);\n    return\
    \ [$min, $key];\n}\n\n$arr = [4,2,3];\n$arr = [1,2,3];\n$arr = [];\n$arr = [5,\
    \ 0, 3, 0, 4, 2];\n\nprint_r(pluck($arr));", "    $evens = [];\n    $evens_indexes\
    \ = [];\n    $result = [];\n    $index = 0;\n    foreach ($arr as $value) {\n\
    \        if ($value % 2 == 0) {\n            $evens[] = $value;\n            $evens_indexes[]\
    \ = $index;\n        }\n        $index++;\n    }\n    if (count($evens) == 0)\
    \ {\n        return $result;\n    }\n    $min_even = min($evens);\n    $min_even_index\
    \ = array_search($min_even, $evens);\n    $result[] = $min_even;\n    $result[]\
    \ = $evens_indexes[$min_even_index];\n    return $result;\n}\n\n$arr = [4,2,3];\n\
    print_r(pluck($arr));\necho \"\\n\";\n$arr = [1,2,3];\nprint_r(pluck($arr));\n\
    echo \"\\n\";\n$arr = [];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [5, 0,\
    \ 3, 0, 4, 2];\nprint_r(pluck($arr));\necho \"\\n\";", "    $even = [];\n    $index\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $even[] = $value;\n            $index[] = $key;\n        }\n\
    \    }\n    if (count($even) == 0) {\n        return [];\n    }\n    $min = min($even);\n\
    \    $key = array_search($min, $even);\n    return [$min, $index[$key]];\n}\n\n\
    $arr = [4,2,3];\nprint_r(pluck($arr));\n$arr = [1,2,3];\nprint_r(pluck($arr));\n\
    $arr = [];\nprint_r(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $evens = array_filter($arr, function($n) { return $n % 2 == 0; });\n    if\
    \ (count($evens) == 0) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $index = array_search($min, $arr);\n    return [$min, $index];\n}\n\n$tests\
    \ = [\n    [[4,2,3], [2, 1]],\n    [[1,2,3], [2, 1]],\n    [[], []],\n    [[5,\
    \ 0, 3, 0, 4, 2], [0, 1]],\n];\n\nforeach ($tests as $test) {\n    $input = $test[0];\n\
    \    $expected = $test[1];\n    $result = pluck($input);\n    if ($result != $expected)\
    \ {\n        echo \"FAIL: pluck({$input}) = {$result} expected {$expected}\\n\"\
    ;\n    } else {\n        echo \"PASS\\n\";\n    }\n}", "    $evens = [];\n   \
    \ foreach ($arr as $i => $v) {\n        if ($v % 2 == 0) {\n            $evens[]\
    \ = [$v, $i];\n        }\n    }\n    if (empty($evens)) {\n        return [];\n\
    \    }\n    usort($evens, function($a, $b) {\n        if ($a[0] == $b[0]) {\n\
    \            return $a[1] - $b[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $evens[0];\n}\n\n$tests = [];\n$tests[] = ['input' => [4,2,3],\
    \ 'expect' => [2, 1]];\n$tests[] = ['input' => [1,2,3], 'expect' => [2, 1]];\n\
    $tests[] = ['input' => [], 'expect' => []];\n$tests[] = ['input' => [5, 0, 3,\
    \ 0, 4, 2], 'expect' => [0, 1]];\n\nforeach ($tests as $i => $test) {\n    $result\
    \ = pluck($test['input']);\n    if ($test['expect'] != $result) {\n        echo\
    \ \"Test{$i} failed\\n\";\n        echo \"Input: \";\n        print_r($test['input']);\n\
    \        echo \"\\n\";\n        echo \"Expect: \";\n        print_r($test['expect']);\n\
    \        echo \"\\n\";\n        echo \"Result: \";\n        print_r($result);\n\
    \        echo \"\\n\";\n    }\n}", "    $evens = [];\n    foreach ($arr as $i\
    \ => $v) {\n        if ($v % 2 == 0) {\n            $evens[] = [$v, $i];\n   \
    \     }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n    usort($evens,\
    \ function($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $a[1]\
    \ - $b[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $evens[0];\n\
    }\n", "    $evens = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $evens[] = $value;\n        }\n    }\n    if (count($evens)\
    \ == 0) {\n        return [];\n    }\n    $min = min($evens);\n    $key = array_search($min,\
    \ $arr);\n    return [$min, $key];\n}\n\n$arr = [4,2,3];\nprint_r(pluck($arr));\n\
    \n$arr = [1,2,3];\nprint_r(pluck($arr));\n\n$arr = [];\nprint_r(pluck($arr));\n\
    \n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $evens = [];\n    $evensIndex\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $evens[] = $value;\n            $evensIndex[] = $key;\n     \
    \   }\n    }\n    if (count($evens) == 0) {\n        return [];\n    }\n    $minEven\
    \ = min($evens);\n    $minEvenIndex = array_search($minEven, $evens);\n    return\
    \ [$minEven, $evensIndex[$minEvenIndex]];\n}\n\n$input1 = [4,2,3];\n$input2 =\
    \ [1,2,3];\n$input3 = [];\n$input4 = [5, 0, 3, 0, 4, 2];\n\necho \"Input: \" .\
    \ json_encode($input1) . \"\\n\";\necho \"Output: \" . json_encode(pluck($input1))\
    \ . \"\\n\";\necho \"Input: \" . json_encode($input2) . \"\\n\";\necho \"Output:\
    \ \" . json_encode(pluck($input2)) . \"\\n\";\necho \"Input: \" . json_encode($input3)\
    \ . \"\\n\";\necho \"Output: \" . json_encode(pluck($input3)) . \"\\n\";\necho\
    \ \"Input: \" . json_encode($input4) . \"\\n\";\necho \"Output: \" . json_encode(pluck($input4))\
    \ . \"\\n\";", "    $evens = [];\n    foreach ($arr as $key => $value) {\n   \
    \     if ($value % 2 == 0) {\n            $evens[] = $value;\n        }\n    }\n\
    \    if (count($evens) == 0) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $key = array_search($min, $arr);\n    return [$min, $key];\n}\n\n$arr = [4,2,3];\n\
    print_r(pluck($arr));\necho \"\\n\";\n$arr = [1,2,3];\nprint_r(pluck($arr));\n\
    echo \"\\n\";\n$arr = [];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [5, 0,\
    \ 3, 0, 4, 2];\nprint_r(pluck($arr));\necho \"\\n\";", "    $evens = [];\n   \
    \ foreach ($arr as $i => $v) {\n        if ($v % 2 == 0) {\n            $evens[]\
    \ = $v;\n        }\n    }\n    if (count($evens) == 0) {\n        return [];\n\
    \    }\n    $min = min($evens);\n    $min_i = array_search($min, $arr);\n    return\
    \ [$min, $min_i];\n}\n\n$tests = [];\n$tests[] = ['input' => [4,2,3], 'expect'\
    \ => [2, 1]];\n$tests[] = ['input' => [1,2,3], 'expect' => [2, 1]];\n$tests[]\
    \ = ['input' => [], 'expect' => []];\n$tests[] = ['input' => [5, 0, 3, 0, 4, 2],\
    \ 'expect' => [0, 1]];\n\nforeach ($tests as $i => $test) {\n    $result = pluck($test['input']);\n\
    \    if ($test['expect'] != $result) {\n        echo \"Test{$i} failed\\n\";\n\
    \        echo \"Input: \";\n        print_r($test['input']);\n        echo \"\\\
    n\";\n        echo \"Expect: \";\n        print_r($test['expect']);\n        echo\
    \ \"\\n\";\n        echo \"Result: \";\n        print_r($result);\n        echo\
    \ \"\\n\";\n    }\n}", "    $evens = [];\n    $evens_indexes = [];\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[]\
    \ = $value;\n            $evens_indexes[] = $key;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $min_index = array_search($min,\
    \ $evens);\n    return [$min, $evens_indexes[$min_index]];\n}\n\n$arr = [4,2,3];\n\
    $arr = [1,2,3];\n$arr = [];\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $evens = [];\n    foreach ($arr as $i => $val) {\n        if ($val % 2 == 0)\
    \ {\n            $evens[] = [$val, $i];\n        }\n    }\n    if (count($evens)\
    \ == 0) {\n        return [];\n    }\n    usort($evens, function($a, $b) {\n \
    \       if ($a[0] == $b[0]) {\n            return $a[1] - $b[1];\n        }\n\
    \        return $a[0] - $b[0];\n    });\n    return $evens[0];\n}\n\n$tests =\
    \ [\n    [[4,2,3], [2, 1]],\n    [[1,2,3], [2, 1]],\n    [[], []],\n    [[5, 0,\
    \ 3, 0, 4, 2], [0, 1]],\n];\n\nforeach ($tests as $test) {\n    $result = pluck($test[0]);\n\
    \    if ($result != $test[1]) {\n        echo \"FAILED!  Input: \" . implode(',',\
    \ $test[0]) . \"; Expected: \" . implode(',', $test[1]) . \"; Got: \" . implode(',',\
    \ $result) . \"\\n\";\n    } else {\n        echo \"PASSED!\\n\";\n    }\n}",
  "    $evens = [];\n    $evens_indexes = [];\n    $evens_indexes_values = [];\n \
    \   foreach ($arr as $index => $value) {\n        if ($value % 2 == 0) {\n   \
    \         $evens[] = $value;\n            $evens_indexes[] = $index;\n       \
    \     $evens_indexes_values[$index] = $value;\n        }\n    }\n    if (count($evens)\
    \ == 0) {\n        return [];\n    }\n    $min_value = min($evens);\n    $min_index\
    \ = array_search($min_value, $evens_indexes_values);\n    return [$min_value,\
    \ $min_index];\n}\n\n$arr = [4,2,3];\nprint_r(pluck($arr));\n\n$arr = [1,2,3];\n\
    print_r(pluck($arr));\n\n$arr = [];\nprint_r(pluck($arr));\n\n$arr = [5, 0, 3,\
    \ 0, 4, 2];\nprint_r(pluck($arr));", "    $evens = [];\n    foreach ($arr as $i\
    \ => $v) {\n        if ($v % 2 == 0) {\n            $evens[] = [$v, $i];\n   \
    \     }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n    usort($evens,\
    \ function($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $a[1]\
    \ - $b[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $evens[0];\n\
    }\n\n$tests = [\n    [\n        'input' => [4,2,3],\n        'expected' => [2,\
    \ 1],\n    ],\n    [\n        'input' => [1,2,3],\n        'expected' => [2, 1],\n\
    \    ],\n    [\n        'input' => [],\n        'expected' => [],\n    ],\n  \
    \  [\n        'input' => [5, 0, 3, 0, 4, 2],\n        'expected' => [0, 1],\n\
    \    ],\n];\n\nforeach ($tests as $test) {\n    $result = pluck($test['input']);\n\
    \    if ($result !== $test['expected']) {\n        echo \"FAILED!\\n\";\n    \
    \    echo \"Input: \" . implode(',', $test['input']) . \"\\n\";\n        echo\
    \ \"Expected: \" . implode(',', $test['expected']) . \"\\n\";\n        echo \"\
    Result: \" . implode(',', $result) . \"\\n\";\n    }\n}", "    $evens = [];\n\
    \    for ($i = 0; $i < count($arr); $i++) {\n        if ($arr[$i] % 2 == 0) {\n\
    \            $evens[] = $arr[$i];\n        }\n    }\n    if (count($evens) ==\
    \ 0) {\n        return [];\n    }\n    $min = min($evens);\n    $index = array_search($min,\
    \ $arr);\n    return [$min, $index];\n}\n\n$arr = [4,2,3];\nprint_r(pluck($arr));\n\
    $arr = [1,2,3];\nprint_r(pluck($arr));\n$arr = [];\nprint_r(pluck($arr));\n$arr\
    \ = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $even = [];\n    $odd =\
    \ [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n\
    \            $even[] = $value;\n        } else {\n            $odd[] = $value;\n\
    \        }\n    }\n    if (count($even) == 0) {\n        return [];\n    }\n \
    \   $min = min($even);\n    $index = array_search($min, $arr);\n    return [$min,\
    \ $index];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr\
    \ = [1, 2, 3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [];\nprint_r(pluck($arr));\n\
    echo \"\\n\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\necho \"\\n\"\
    ;", "    $evens = [];\n    $evens_indexes = [];\n    $result = [];\n    for ($i\
    \ = 0; $i < count($arr); $i++) {\n        if ($arr[$i] % 2 == 0) {\n         \
    \   $evens[] = $arr[$i];\n            $evens_indexes[] = $i;\n        }\n    }\n\
    \    if (count($evens) == 0) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $min_index = array_search($min, $evens);\n    $result[] = $min;\n    $result[]\
    \ = $evens_indexes[$min_index];\n    return $result;\n}\n\n$arr = [4, 2, 3];\n\
    print_r(pluck($arr));\n\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\n\n$arr = [];\n\
    print_r(pluck($arr));\n\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", " \
    \   $evens = [];\n    $evens_indexes = [];\n    $result = [];\n    foreach ($arr\
    \ as $index => $value) {\n        if ($value % 2 == 0) {\n            $evens[]\
    \ = $value;\n            $evens_indexes[] = $index;\n        }\n    }\n    if\
    \ (count($evens) > 0) {\n        $min_even = min($evens);\n        $min_even_index\
    \ = array_search($min_even, $evens);\n        $result = [$min_even, $evens_indexes[$min_even_index]];\n\
    \    }\n    return $result;\n}\n\n$arr = [4,2,3];\nprint_r(pluck($arr));\necho\
    \ \"\\n\";\n$arr = [1,2,3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [];\n\
    print_r(pluck($arr));\necho \"\\n\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\n\
    echo \"\\n\";", "    $evens = [];\n    $indexes = [];\n    foreach ($arr as $index\
    \ => $value) {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n\
    \            $indexes[] = $index;\n        }\n    }\n    if (count($evens) ==\
    \ 0) {\n        return [];\n    }\n    $min = min($evens);\n    $minIndex = array_search($min,\
    \ $evens);\n    return [$min, $indexes[$minIndex]];\n}\n", "    $evens = [];\n\
    \    $evensIndex = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $evens[] = $value;\n            $evensIndex[] = $key;\n\
    \        }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min\
    \ = min($evens);\n    $minIndex = array_search($min, $evens);\n    return [$min,\
    \ $evensIndex[$minIndex]];\n}\n\n$arr = [4,2,3];\nprint_r(pluck($arr));\necho\
    \ PHP_EOL;\n$arr = [1,2,3];\nprint_r(pluck($arr));\necho PHP_EOL;\n$arr = [];\n\
    print_r(pluck($arr));\necho PHP_EOL;\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\n\
    echo PHP_EOL;", "    $evens = [];\n    foreach ($arr as $i => $v) {\n        if\
    \ ($v % 2 == 0) {\n            $evens[] = [$v, $i];\n        }\n    }\n    if\
    \ (empty($evens)) {\n        return [];\n    }\n    usort($evens, function($a,\
    \ $b) {\n        if ($a[0] == $b[0]) {\n            return $a[1] - $b[1];\n  \
    \      }\n        return $a[0] - $b[0];\n    });\n    return $evens[0];\n}\n\n\
    $tests = [];\n$tests[] = ['input' => [4,2,3], 'expect' => [2, 1]];\n$tests[] =\
    \ ['input' => [1,2,3], 'expect' => [2, 1]];\n$tests[] = ['input' => [], 'expect'\
    \ => []];\n$tests[] = ['input' => [5, 0, 3, 0, 4, 2], 'expect' => [0, 1]];\n\n\
    foreach ($tests as $i => $test) {\n    $result = pluck($test['input']);\n    if\
    \ ($test['expect'] != $result) {\n        echo \"Test{$i} failed\\n\";\n     \
    \   echo \"Input: \";\n        print_r($test['input']);\n        echo \"\\n\"\
    ;\n        echo \"Expect: \";\n        print_r($test['expect']);\n        echo\
    \ \"\\n\";\n        echo \"Result: \";\n        print_r($result);\n        echo\
    \ \"\\n\";\n    }\n}", "    $even = [];\n    $index = [];\n    foreach ($arr as\
    \ $key => $value) {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n\
    \            $index[] = $key;\n        }\n    }\n    if (count($even) == 0) {\n\
    \        return [];\n    }\n    $min = min($even);\n    $key = array_search($min,\
    \ $even);\n    return [$min, $index[$key]];\n}\n\n$arr = [4,2,3];\nprint_r(pluck($arr));\n\
    \n$arr = [1,2,3];\nprint_r(pluck($arr));\n\n$arr = [];\nprint_r(pluck($arr));\n\
    \n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $evens = [];\n    $evensIndex\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $evens[] = $value;\n            $evensIndex[] = $key;\n     \
    \   }\n    }\n    if (count($evens) == 0) {\n        return [];\n    }\n    $min\
    \ = min($evens);\n    $minIndex = array_search($min, $evens);\n    return [$min,\
    \ $evensIndex[$minIndex]];\n}\n\n$arr = [4,2,3];\nprint_r(pluck($arr));\n\n$arr\
    \ = [1,2,3];\nprint_r(pluck($arr));\n\n$arr = [];\nprint_r(pluck($arr));\n\n$arr\
    \ = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $evens = array_filter($arr,\
    \ function($n) {\n        return $n % 2 == 0;\n    });\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $index = array_search($min,\
    \ $arr);\n    return [$min, $index];\n}\n\n$tests = [];\n$tests[] = ['input' =>\
    \ [4,2,3], 'expect' => [2, 1]];\n$tests[] = ['input' => [1,2,3], 'expect' => [2,\
    \ 1]];\n$tests[] = ['input' => [], 'expect' => []];\n$tests[] = ['input' => [5,\
    \ 0, 3, 0, 4, 2], 'expect' => [0, 1]];\n\nforeach ($tests as $index => $test)\
    \ {\n    $result = pluck($test['input']);\n    if ($test['expect'] != $result)\
    \ {\n        echo 'Test fail at test' . ($index + 1) . PHP_EOL;\n        exit;\n\
    \    }\n}\n\necho 'Test good!' . PHP_EOL;", "    $evens = [];\n    foreach ($arr\
    \ as $i => $v) {\n        if ($v % 2 == 0) {\n            $evens[] = [$v, $i];\n\
    \        }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n    usort($evens,\
    \ function($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $a[1]\
    \ - $b[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $evens[0];\n\
    }\n\n$tests = [\n    [[4,2,3], [2, 1]],\n    [[1,2,3], [2, 1]],\n    [[], []],\n\
    \    [[5, 0, 3, 0, 4, 2], [0, 1]],\n];\n\nforeach ($tests as $test) {\n    $result\
    \ = pluck($test[0]);\n    if ($result == $test[1]) {\n        echo \"PASSED\\\
    n\";\n    } else {\n        echo \"FAILED\\n\";\n    }\n}", "    $evens = [];\n\
    \    foreach ($arr as $i => $v) {\n        if ($v % 2 == 0) {\n            $evens[]\
    \ = [$v, $i];\n        }\n    }\n    if (empty($evens)) {\n        return [];\n\
    \    }\n    usort($evens, function($a, $b) {\n        if ($a[0] == $b[0]) {\n\
    \            return $a[1] - $b[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $evens[0];\n}\n", "    $evens = [];\n    $evens_indexes =\
    \ [];\n    foreach ($arr as $index => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $evens[] = $value;\n            $evens_indexes[] = $index;\n\
    \        }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min_even\
    \ = min($evens);\n    $min_even_index = array_search($min_even, $evens);\n   \
    \ return [$min_even, $evens_indexes[$min_even_index]];\n}\necho '<pre>pluck([4,2,3])';\n\
    print_r(pluck([4,2,3]));\necho '</pre>';\necho '<pre>pluck([1,2,3])';\nprint_r(pluck([1,2,3]));\n\
    echo '</pre>';\necho '<pre>pluck([])';\nprint_r(pluck([]));\necho '</pre>';\n\
    echo '<pre>pluck([5, 0, 3, 0, 4, 2])';\nprint_r(pluck([5, 0, 3, 0, 4, 2]));\n\
    echo '</pre>';", "    $evens = [];\n    foreach ($arr as $key => $value) {\n \
    \       if ($value % 2 == 0) {\n            $evens[] = $value;\n        }\n  \
    \  }\n    if (count($evens) == 0) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $index = array_search($min, $arr);\n    return [$min, $index];\n}\n\n$tests\
    \ = [];\n$tests[] = ['input' => [4, 2, 3], 'expect' => [2, 1]];\n$tests[] = ['input'\
    \ => [1, 2, 3], 'expect' => [2, 1]];\n$tests[] = ['input' => [], 'expect' => []];\n\
    $tests[] = ['input' => [5, 0, 3, 0, 4, 2], 'expect' => [0, 1]];\n\nforeach ($tests\
    \ as $index => $test) {\n    $result = pluck($test['input']);\n    if ($test['expect']\
    \ != $result) {\n        echo 'Test fail at test' . ($index + 1) . PHP_EOL;\n\
    \        exit;\n    }\n}\n\necho 'Test good!' . PHP_EOL;", "    $evens = [];\n\
    \    foreach ($arr as $i => $val) {\n        if ($val % 2 == 0) {\n          \
    \  $evens[] = [$val, $i];\n        }\n    }\n    if (empty($evens)) {\n      \
    \  return [];\n    }\n    usort($evens, function ($a, $b) {\n        if ($a[0]\
    \ == $b[0]) {\n            return $a[1] - $b[1];\n        }\n        return $a[0]\
    \ - $b[0];\n    });\n    return $evens[0];\n}\n\n$tests = [\n    [[4,2,3], [2,\
    \ 1]],\n    [[1,2,3], [2, 1]],\n    [[], []],\n    [[5, 0, 3, 0, 4, 2], [0, 1]],\n\
    ];\n\nforeach ($tests as $test) {\n    $result = pluck($test[0]);\n    if ($result\
    \ != $test[1]) {\n        echo \"FAILED!  Input: {$test[0]}\\n\";\n        echo\
    \ \"Expected: {$test[1]}\\n\";\n        echo \"Result: {$result}\\n\";\n    }\n\
    }", "    $evens = [];\n    $indexes = [];\n    foreach ($arr as $index => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        \
    \    $indexes[] = $index;\n        }\n    }\n    if (count($evens) == 0) {\n \
    \       return [];\n    }\n    $min = min($evens);\n    $minIndex = array_search($min,\
    \ $evens);\n    return [$min, $indexes[$minIndex]];\n}\n\n$tests = [\n    [[4,2,3],\
    \ [2, 1]],\n    [[1,2,3], [2, 1]],\n    [[], []],\n    [[5, 0, 3, 0, 4, 2], [0,\
    \ 1]],\n];\n\nforeach ($tests as [$input, $expected]) {\n    $output = pluck($input);\n\
    \    if ($output !== $expected) {\n        echo \"FAIL: input: \" . implode(',',\
    \ $input) . \" | expected: \" . implode(',', $expected) . \" | output: \" . implode(',',\
    \ $output) . \"\\n\";\n    }\n}", "    $evens = [];\n    $evensIndex = [];\n \
    \   foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n     \
    \       $evens[] = $value;\n            $evensIndex[] = $key;\n        }\n   \
    \ }\n    if (count($evens) == 0) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $minIndex = array_search($min, $evens);\n    return [$min, $evensIndex[$minIndex]];\n\
    }\n\n$arr = [4,2,3];\n$arr = [1,2,3];\n$arr = [];\n$arr = [5, 0, 3, 0, 4, 2];\n\
    \nprint_r(pluck($arr));", "    $evens = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        }\n\
    \    }\n    if (empty($evens)) {\n        return [];\n    }\n    $smallest = min($evens);\n\
    \    $index = array_search($smallest, $arr);\n    return [$smallest, $index];\n\
    }\n\n$arr = [4,2,3];\nprint_r(pluck($arr));\n\n$arr = [1,2,3];\nprint_r(pluck($arr));\n\
    \n$arr = [];\nprint_r(pluck($arr));\n\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n   \
    \     if ($value % 2 == 0) {\n            $even[] = $value;\n            $index[]\
    \ = $key;\n        }\n    }\n    if (count($even) == 0) {\n        return [];\n\
    \    }\n    $min = min($even);\n    $min_index = array_search($min, $even);\n\
    \    return [$min, $index[$min_index]];\n}\n\n$arr = [4,2,3];\nprint_r(pluck($arr));\n\
    \n$arr = [1,2,3];\nprint_r(pluck($arr));\n\n$arr = [];\nprint_r(pluck($arr));\n\
    \n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $evens = [];\n    foreach\
    \ ($arr as $index => $value) {\n        if ($value % 2 == 0) {\n            $evens[]\
    \ = $value;\n        }\n    }\n    if (empty($evens)) {\n        return [];\n\
    \    }\n    $min = min($evens);\n    $minIndex = array_search($min, $arr);\n \
    \   return [$min, $minIndex];\n}\n\n$arr = [4,2,3];\nprint_r(pluck($arr));\n$arr\
    \ = [1,2,3];\nprint_r(pluck($arr));\n$arr = [];\nprint_r(pluck($arr));\n$arr =\
    \ [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $evens = [];\n    $evensIndex\
    \ = [];\n    foreach ($arr as $index => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $evens[] = $value;\n            $evensIndex[] = $index;\n   \
    \     }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n    $minEven\
    \ = min($evens);\n    $minEvenIndex = array_search($minEven, $evens);\n    return\
    \ [$minEven, $evensIndex[$minEvenIndex]];\n}\n\n$arr = [4,2,3];\nprint_r(pluck($arr));\n\
    $arr = [1,2,3];\nprint_r(pluck($arr));\n$arr = [];\nprint_r(pluck($arr));\n$arr\
    \ = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $evens = [];\n    foreach\
    \ ($arr as $index => $value) {\n        if ($value % 2 == 0) {\n            $evens[]\
    \ = [$value, $index];\n        }\n    }\n    if (count($evens) == 0) {\n     \
    \   return [];\n    }\n    usort($evens, function ($a, $b) {\n        if ($a[0]\
    \ == $b[0]) {\n            return $a[1] - $b[1];\n        }\n        return $a[0]\
    \ - $b[0];\n    });\n    return $evens[0];\n}\n", "    $even = [];\n    $odd =\
    \ [];\n    $result = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $even[] = $value;\n        } else {\n            $odd[]\
    \ = $value;\n        }\n    }\n    if (count($even) > 0) {\n        $result[]\
    \ = min($even);\n        $result[] = array_search(min($even), $arr);\n    }\n\
    \    return $result;\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\n$arr =\
    \ [1, 2, 3];\nprint_r(pluck($arr));\n\n$arr = [];\nprint_r(pluck($arr));\n\n$arr\
    \ = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $even = [];\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n            $even[]\
    \ = [$value, $key];\n        }\n    }\n    if (empty($even)) {\n        return\
    \ [];\n    }\n    usort($even, function ($a, $b) {\n        if ($a[0] == $b[0])\
    \ {\n            return $a[1] - $b[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $even[0];\n}\n\n$arr = [4, 2, 3];\n$arr = [1, 2, 3];\n$arr\
    \ = [];\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $evens = [];\n\
    \    $indexes = [];\n    foreach ($arr as $index => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $evens[] = $value;\n            $indexes[] = $index;\n\
    \        }\n    }\n    if (count($evens) == 0) {\n        return [];\n    }\n\
    \    $min = min($evens);\n    $minIndex = array_search($min, $evens);\n    return\
    \ [$min, $indexes[$minIndex]];\n}\n\n$tests = [];\n$tests[] = ['input' => [4,2,3],\
    \ 'expect' => [2, 1]];\n$tests[] = ['input' => [1,2,3], 'expect' => [2, 1]];\n\
    $tests[] = ['input' => [], 'expect' => []];\n$tests[] = ['input' => [5, 0, 3,\
    \ 0, 4, 2], 'expect' => [0, 1]];\n\nforeach ($tests as $index => $test) {\n  \
    \  $result = pluck($test['input']);\n    if ($test['expect'] != $result) {\n \
    \       echo 'Test fail at test' . ($index + 1) . PHP_EOL;\n        exit;\n  \
    \  }\n}\n\necho 'Test good!' . PHP_EOL;", "    $evens = [];\n    foreach ($arr\
    \ as $i => $v) {\n        if ($v % 2 == 0) {\n            $evens[] = [$v, $i];\n\
    \        }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n    usort($evens,\
    \ function($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $a[1]\
    \ - $b[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $evens[0];\n\
    }\n\n$tests = [\n    [[4,2,3], [2, 1]],\n    [[1,2,3], [2, 1]],\n    [[], []],\n\
    \    [[5, 0, 3, 0, 4, 2], [0, 1]],\n];\n\nforeach ($tests as $test) {\n    $res\
    \ = pluck($test[0]);\n    if ($res == $test[1]) {\n        echo \"PASS\\n\";\n\
    \    } else {\n        echo \"FAIL\\n\";\n    }\n}", "    $evens = [];\n    foreach\
    \ ($arr as $i => $val) {\n        if ($val % 2 == 0) {\n            $evens[] =\
    \ [$val, $i];\n        }\n    }\n    if (empty($evens)) {\n        return [];\n\
    \    }\n    usort($evens, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n\
    \            return $a[1] - $b[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $evens[0];\n}\n\n$tests = [\n    [[4,2,3], [2, 1]],\n   \
    \ [[1,2,3], [2, 1]],\n    [[], []],\n    [[5, 0, 3, 0, 4, 2], [0, 1]],\n];\n\n\
    foreach ($tests as $test) {\n    $input = $test[0];\n    $expected = $test[1];\n\
    \    $result = pluck($input);\n    if ($result != $expected) {\n        echo \"\
    For input: $input\\n\";\n        echo \"Expected: $expected\\n\";\n        echo\
    \ \"Got: $result\\n\";\n    }\n}", "    $evens = [];\n    foreach ($arr as $i\
    \ => $v) {\n        if ($v % 2 == 0) {\n            $evens[] = [$v, $i];\n   \
    \     }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n    usort($evens,\
    \ function($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $a[1]\
    \ - $b[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $evens[0];\n\
    }\n\n$arr = [4,2,3];\n$arr = [1,2,3];\n$arr = [];\n$arr = [5, 0, 3, 0, 4, 2];\n\
    \nprint_r(pluck($arr));", "    $evens = [];\n    $indexes = [];\n    foreach ($arr\
    \ as $index => $value) {\n        if ($value % 2 == 0) {\n            $evens[]\
    \ = $value;\n            $indexes[] = $index;\n        }\n    }\n    if (count($evens)\
    \ == 0) {\n        return [];\n    }\n    $min = min($evens);\n    $minIndex =\
    \ array_search($min, $evens);\n    return [$min, $indexes[$minIndex]];\n}\n",
  "    $evens = [];\n    $evensIndex = [];\n    for ($i = 0; $i < count($arr); $i++)\
    \ {\n        if ($arr[$i] % 2 == 0) {\n            $evens[] = $arr[$i];\n    \
    \        $evensIndex[] = $i;\n        }\n    }\n    if (count($evens) == 0) {\n\
    \        return [];\n    }\n    $min = min($evens);\n    $minIndex = array_search($min,\
    \ $evens);\n    return [$min, $evensIndex[$minIndex]];\n}\n\n$arr = [4,2,3];\n\
    print_r(pluck($arr));\n\n$arr = [1,2,3];\nprint_r(pluck($arr));\n\n$arr = [];\n\
    print_r(pluck($arr));\n\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", " \
    \   $evens = [];\n    $evensIndex = [];\n    foreach ($arr as $index => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        \
    \    $evensIndex[] = $index;\n        }\n    }\n    if (empty($evens)) {\n   \
    \     return [];\n    }\n    $min = min($evens);\n    $minIndex = array_search($min,\
    \ $evens);\n    return [$min, $evensIndex[$minIndex]];\n}\n\n$arr = [4,2,3];\n\
    print_r(pluck($arr));\n\n$arr = [1,2,3];\nprint_r(pluck($arr));\n\n$arr = [];\n\
    print_r(pluck($arr));\n\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", " \
    \   if (empty($arr)) {\n        return [];\n    }\n    $evens = [];\n    foreach\
    \ ($arr as $i => $v) {\n        if ($v % 2 == 0) {\n            $evens[] = [$v,\
    \ $i];\n        }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n\
    \    usort($evens, function($a, $b) {\n        if ($a[0] == $b[0]) {\n       \
    \     return $a[1] - $b[1];\n        }\n        return $a[0] - $b[0];\n    });\n\
    \    return $evens[0];\n}\n\n$tests = [];\n$tests[] = ['input' => [4,2,3], 'expected'\
    \ => [2, 1]];\n$tests[] = ['input' => [1,2,3], 'expected' => [2, 1]];\n$tests[]\
    \ = ['input' => [], 'expected' => []];\n$tests[] = ['input' => [5, 0, 3, 0, 4,\
    \ 2], 'expected' => [0, 1]];\n\nforeach ($tests as $i => $test) {\n    $result\
    \ = pluck($test['input']);\n    if ($test['expected'] != $result) {\n        echo\
    \ \"Test $i failed.\\n\";\n        echo \"Input: \";\n        print_r($test['input']);\n\
    \        echo \"\\n\";\n        echo \"Expected: \";\n        print_r($test['expected']);\n\
    \        echo \"\\n\";\n        echo \"Result: \";\n        print_r($result);\n\
    \        echo \"\\n\";\n    }\n}", "    $evens = [];\n    foreach ($arr as $key\
    \ => $value) {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n\
    \        }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n    $smallest\
    \ = min($evens);\n    $key = array_search($smallest, $arr);\n    return [$smallest,\
    \ $key];\n}\n\n$arr = [4,2,3];\nprint_r(pluck($arr));\n$arr = [1,2,3];\nprint_r(pluck($arr));\n\
    $arr = [];\nprint_r(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $evens = [];\n    foreach ($arr as $key => $value) {\n        if ($value %\
    \ 2 == 0) {\n            $evens[] = $value;\n        }\n    }\n    if (count($evens)\
    \ == 0) {\n        return [];\n    }\n    $smallest = min($evens);\n    $index\
    \ = array_search($smallest, $arr);\n    return [$smallest, $index];\n}\n\n$arr\
    \ = [4,2,3];\nprint_r(pluck($arr));\n\n$arr = [1,2,3];\nprint_r(pluck($arr));\n\
    \n$arr = [];\nprint_r(pluck($arr));\n\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $evens = [];\n    foreach ($arr as $key => $value) {\n        if ($value %\
    \ 2 == 0) {\n            $evens[] = $value;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $smallest = min($evens);\n    $key = array_search($smallest,\
    \ $arr);\n    return [$smallest, $key];\n}\n\n$arr = [4,2,3];\n$arr = [1,2,3];\n\
    $arr = [];\n$arr = [5, 0, 3, 0, 4, 2];\n\nprint_r(pluck($arr));", "    $evens\
    \ = [];\n    $evens_indexes = [];\n    foreach ($arr as $index => $value) {\n\
    \        if ($value % 2 == 0) {\n            $evens[] = $value;\n            $evens_indexes[]\
    \ = $index;\n        }\n    }\n    if (empty($evens)) {\n        return [];\n\
    \    }\n    $min_even = min($evens);\n    $min_even_index = array_search($min_even,\
    \ $evens);\n    return [$min_even, $evens_indexes[$min_even_index]];\n}\n", " \
    \   $min = PHP_INT_MAX;\n    $index = -1;\n    foreach ($arr as $i => $v) {\n\
    \        if ($v % 2 == 0 && $v < $min) {\n            $min = $v;\n           \
    \ $index = $i;\n        }\n    }\n    return $index == -1 ? [] : [$min, $index];\n\
    }\n\n$tests = [\n    [[4,2,3], [2, 1]],\n    [[1,2,3], [2, 1]],\n    [[], []],\n\
    \    [[5, 0, 3, 0, 4, 2], [0, 1]],\n];\n\nforeach ($tests as $test) {\n    $result\
    \ = pluck($test[0]);\n    if ($result == $test[1]) {\n        echo \"Test passed\
    \ \\n\";\n    } else {\n        echo \"Test failed \\n\";\n    }\n}", "    $evens\
    \ = [];\n    $evensIndex = [];\n    foreach ($arr as $index => $value) {\n   \
    \     if ($value % 2 == 0) {\n            $evens[] = $value;\n            $evensIndex[]\
    \ = $index;\n        }\n    }\n    if (count($evens) == 0) {\n        return [];\n\
    \    }\n    $minEven = min($evens);\n    $minEvenIndex = array_search($minEven,\
    \ $evens);\n    return [$minEven, $evensIndex[$minEvenIndex]];\n}\n\n$arr = [4,2,3];\n\
    print_r(pluck($arr));\n\n$arr = [1,2,3];\nprint_r(pluck($arr));\n\n$arr = [];\n\
    print_r(pluck($arr));\n\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", " \
    \   $evens = [];\n    $evensIndex = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        \
    \    $evensIndex[] = $key;\n        }\n    }\n    if (empty($evens)) {\n     \
    \   return [];\n    }\n    $min = min($evens);\n    $index = array_search($min,\
    \ $evens);\n    return [$min, $evensIndex[$index]];\n}\n\n$arr = [4,2,3];\n$arr\
    \ = [1,2,3];\n$arr = [];\n$arr = [5, 0, 3, 0, 4, 2];\n\nprint_r(pluck($arr));",
  "    $min = null;\n    $minIndex = null;\n    foreach ($arr as $index => $value)\
    \ {\n        if ($value % 2 == 0) {\n            if ($min === null || $value <\
    \ $min) {\n                $min = $value;\n                $minIndex = $index;\n\
    \            }\n        }\n    }\n    if ($min === null) {\n        return [];\n\
    \    }\n    return [$min, $minIndex];\n}\n", "    $evens = [];\n    $index = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $evens[] = $value;\n            $index[] = $key;\n        }\n    }\n\
    \    if (count($evens) == 0) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $minIndex = array_search($min, $evens);\n    return [$min, $index[$minIndex]];\n\
    }\n\n$arr = [4,2,3];\n$arr = [1,2,3];\n$arr = [];\n$arr = [5, 0, 3, 0, 4, 2];\n\
    print_r(pluck($arr));", "    $evens = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        }\n\
    \    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $minKey = array_search($min, $arr);\n    return [$min, $minKey];\n}\n\n$arr\
    \ = [4,2,3];\n$arr = [1,2,3];\n$arr = [];\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $evens = array_filter($arr, function($n) {\n        return $n % 2 == 0;\n \
    \   });\n    if (count($evens) == 0) {\n        return [];\n    }\n    $min =\
    \ min($evens);\n    $index = array_search($min, $arr);\n    return [$min, $index];\n\
    }\n\n$tests = [];\n$tests[] = ['input' => [4,2,3], 'expect' => [2, 1]];\n$tests[]\
    \ = ['input' => [1,2,3], 'expect' => [2, 1]];\n$tests[] = ['input' => [], 'expect'\
    \ => []];\n$tests[] = ['input' => [5, 0, 3, 0, 4, 2], 'expect' => [0, 1]];\n\n\
    foreach ($tests as $index => $test) {\n    $result = pluck($test['input']);\n\
    \    if ($test['expect'] != $result) {\n        echo 'Test fail at test' . ($index\
    \ + 1) . PHP_EOL;\n        exit;\n    }\n}\n\necho 'Test good!' . PHP_EOL;", " \
    \   $evens = [];\n    foreach ($arr as $key => $value) {\n        if ($value %\
    \ 2 == 0) {\n            $evens[] = $value;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $index = array_search($min,\
    \ $arr);\n    return [$min, $index];\n}\n\n$tests = [\n    [[4,2,3], [2, 1]],\n\
    \    [[1,2,3], [2, 1]],\n    [[], []],\n    [[5, 0, 3, 0, 4, 2], [0, 1]],\n];\n\
    \nforeach ($tests as $test) {\n    $result = pluck($test[0]);\n    if ($result\
    \ !== $test[1]) {\n        echo \"Fail!\\n\";\n        echo \"Input: \" . implode(',',\
    \ $test[0]) . \"\\n\";\n        echo \"Output: \" . implode(',', $result) . \"\
    \\n\";\n        echo \"Expected: \" . implode(',', $test[1]) . \"\\n\";\n    }\n\
    }", "    $evens = array_filter($arr, function($n) {\n        return $n % 2 ==\
    \ 0;\n    });\n    if (count($evens) == 0) {\n        return [];\n    }\n    $min\
    \ = min($evens);\n    $index = array_search($min, $arr);\n    return [$min, $index];\n\
    }\n\n$input = [4,2,3];\n$output = pluck($input);\necho \"Input: \" . json_encode($input)\
    \ . \"\\n\";\necho \"Output: \" . json_encode($output) . \"\\n\";\n\n$input =\
    \ [1,2,3];\n$output = pluck($input);\necho \"Input: \" . json_encode($input) .\
    \ \"\\n\";\necho \"Output: \" . json_encode($output) . \"\\n\";\n\n$input = [];\n\
    $output = pluck($input);\necho \"Input: \" . json_encode($input) . \"\\n\";\n\
    echo \"Output: \" . json_encode($output) . \"\\n\";\n\n$input = [5, 0, 3, 0, 4,\
    \ 2];\n$output = pluck($input);\necho \"Input: \" . json_encode($input) . \"\\\
    n\";\necho \"Output: \" . json_encode($output) . \"\\n\";", "    $evens = [];\n\
    \    $evensIndex = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $evens[] = $value;\n            $evensIndex[] = $key;\n\
    \        }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min\
    \ = min($evens);\n    $minIndex = array_search($min, $evens);\n    return [$min,\
    \ $evensIndex[$minIndex]];\n}\n\n$arr = [4,2,3];\nprint_r(pluck($arr));\n\n$arr\
    \ = [1,2,3];\nprint_r(pluck($arr));\n\n$arr = [];\nprint_r(pluck($arr));\n\n$arr\
    \ = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $evens = [];\n    foreach\
    \ ($arr as $k => $v) {\n        if ($v % 2 == 0) {\n            $evens[$k] = $v;\n\
    \        }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n    asort($evens);\n\
    \    $keys = array_keys($evens);\n    return [$evens[$keys[0]], $keys[0]];\n}\n\
    \n$tests = [];\n$tests[] = ['input' => [4,2,3], 'expect' => [2, 1]];\n$tests[]\
    \ = ['input' => [1,2,3], 'expect' => [2, 1]];\n$tests[] = ['input' => [], 'expect'\
    \ => []];\n$tests[] = ['input' => [5, 0, 3, 0, 4, 2], 'expect' => [0, 1]];\n\n\
    foreach ($tests as $test) {\n    $result = pluck($test['input']);\n    if ($result\
    \ !== $test['expect']) {\n        echo \"Fail. input: {$test['input']} expect:\
    \ {$test['expect']} result: {$result}\\n\";\n    }\n}", "    $evens = [];\n  \
    \  foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n      \
    \      $evens[] = [$value, $key];\n        }\n    }\n    if (count($evens) ==\
    \ 0) {\n        return [];\n    }\n    $smallest = $evens[0];\n    foreach ($evens\
    \ as $even) {\n        if ($even[0] < $smallest[0]) {\n            $smallest =\
    \ $even;\n        }\n    }\n    return $smallest;\n}\n\n$tests = [];\n$tests[]\
    \ = ['input' => [4, 2, 3], 'expect' => [2, 1]];\n$tests[] = ['input' => [1, 2,\
    \ 3], 'expect' => [2, 1]];\n$tests[] = ['input' => [], 'expect' => []];\n$tests[]\
    \ = ['input' => [5, 0, 3, 0, 4, 2], 'expect' => [0, 1]];\n\nforeach ($tests as\
    \ $index => $test) {\n    $result = pluck($test['input']);\n    if ($test['expect']\
    \ != $result) {\n        echo 'Test fail at test' . ($index + 1) . PHP_EOL;\n\
    \        exit;\n    }\n}\n\necho 'Test good!' . PHP_EOL;", "    $evens = [];\n\
    \    $evens_indexes = [];\n    foreach ($arr as $index => $value) {\n        if\
    \ ($value % 2 == 0) {\n            $evens[] = $value;\n            $evens_indexes[]\
    \ = $index;\n        }\n    }\n    if (empty($evens)) {\n        return [];\n\
    \    }\n    $min_index = array_search(min($evens), $evens);\n    return [$evens[$min_index],\
    \ $evens_indexes[$min_index]];\n}\n\n$arr = [4,2,3];\nprint_r(pluck($arr));\n\
    echo \"\\n\";\n$arr = [1,2,3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [];\n\
    print_r(pluck($arr));\necho \"\\n\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\n\
    echo \"\\n\";", "    $evens = [];\n    foreach ($arr as $key => $value) {\n  \
    \      if ($value % 2 == 0) {\n            $evens[] = $value;\n        }\n   \
    \ }\n    if (empty($evens)) {\n        return [];\n    }\n    $smallest = min($evens);\n\
    \    $index = array_search($smallest, $arr);\n    return [$smallest, $index];\n\
    }\n\n$arr = [4,2,3];\n$arr = [1,2,3];\n$arr = [];\n$arr = [5, 0, 3, 0, 4, 2];\n\
    print_r(pluck($arr));", "    $evens = [];\n    foreach ($arr as $i => $v) {\n\
    \        if ($v % 2 == 0) {\n            $evens[] = [$v, $i];\n        }\n   \
    \ }\n    if (empty($evens)) {\n        return [];\n    }\n    usort($evens, function($a,\
    \ $b) {\n        if ($a[0] == $b[0]) {\n            return $a[1] - $b[1];\n  \
    \      }\n        return $a[0] - $b[0];\n    });\n    return $evens[0];\n}\n\n\
    $tests = [\n    [[4,2,3], [2, 1]],\n    [[1,2,3], [2, 1]],\n    [[], []],\n  \
    \  [[5, 0, 3, 0, 4, 2], [0, 1]],\n];\n\nforeach ($tests as $test) {\n    $result\
    \ = pluck($test[0]);\n    if ($result == $test[1]) {\n        echo \"Test passed!\\\
    n\";\n    } else {\n        echo \"Test failed!\\n\";\n        echo \"Input: \"\
    \ . implode(',', $test[0]) . \"\\n\";\n        echo \"Expected: \" . implode(',',\
    \ $test[1]) . \"\\n\";\n        echo \"Result: \" . implode(',', $result) . \"\
    \\n\";\n    }\n}", "    $evens = [];\n    foreach ($arr as $i => $v) {\n     \
    \   if ($v % 2 == 0) {\n            $evens[] = [$v, $i];\n        }\n    }\n \
    \   if (empty($evens)) {\n        return [];\n    }\n    usort($evens, function($a,\
    \ $b) {\n        if ($a[0] == $b[0]) {\n            return $a[1] - $b[1];\n  \
    \      }\n        return $a[0] - $b[0];\n    });\n    return $evens[0];\n}\n\n\
    $tests = [\n    [[4,2,3], [2, 1]],\n    [[1,2,3], [2, 1]],\n    [[], []],\n  \
    \  [[5, 0, 3, 0, 4, 2], [0, 1]],\n];\n\nforeach ($tests as $test) {\n    $result\
    \ = pluck($test[0]);\n    if ($result != $test[1]) {\n        echo \"FAIL: \"\
    \ . implode(',', $test[0]) . \" -> \" . implode(',', $result) . \"\\n\";\n   \
    \ } else {\n        echo \"PASS\\n\";\n    }\n}", "    $evens = [];\n    $evens_indexes\
    \ = [];\n    foreach ($arr as $index => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $evens[] = $value;\n            $evens_indexes[] = $index;\n\
    \        }\n    }\n    if (count($evens) == 0) {\n        return [];\n    }\n\
    \    $min_even = min($evens);\n    $min_even_index = array_search($min_even, $evens);\n\
    \    return [$min_even, $evens_indexes[$min_even_index]];\n}\n", "    $evens =\
    \ [];\n    $evens_indexes = [];\n    foreach ($arr as $key => $value) {\n    \
    \    if ($value % 2 == 0) {\n            $evens[] = $value;\n            $evens_indexes[]\
    \ = $key;\n        }\n    }\n    if (empty($evens)) {\n        return [];\n  \
    \  }\n    $min_even = min($evens);\n    $min_even_index = array_search($min_even,\
    \ $evens);\n    return [$min_even, $evens_indexes[$min_even_index]];\n}\n\n$input1\
    \ = [4,2,3];\n$input2 = [1,2,3];\n$input3 = [];\n$input4 = [5, 0, 3, 0, 4, 2];\n\
    \necho implode(', ', pluck($input1)) . PHP_EOL;\necho implode(', ', pluck($input2))\
    \ . PHP_EOL;\necho implode(', ', pluck($input3)) . PHP_EOL;\necho implode(', ',\
    \ pluck($input4)) . PHP_EOL;", "    $evens = [];\n    $evens_indexes = [];\n \
    \   foreach ($arr as $key => $val) {\n        if ($val % 2 == 0) {\n         \
    \   $evens[] = $val;\n            $evens_indexes[] = $key;\n        }\n    }\n\
    \    if (count($evens) == 0) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $min_key = array_search($min, $evens);\n    return [$min, $evens_indexes[$min_key]];\n\
    }\n", "    $evens = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $evens[] = $value;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $minKey = array_search($min,\
    \ $arr);\n    return [$min, $minKey];\n}\n\n$arr = [4,2,3];\nprint_r(pluck($arr));\n\
    \n$arr = [1,2,3];\nprint_r(pluck($arr));\n\n$arr = [];\nprint_r(pluck($arr));\n\
    \n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $evens = [];\n    $indexes\
    \ = [];\n    foreach ($arr as $index => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $evens[] = $value;\n            $indexes[] = $index;\n      \
    \  }\n    }\n    if (count($evens) == 0) {\n        return [];\n    }\n    $min\
    \ = min($evens);\n    $minIndex = array_search($min, $evens);\n    return [$min,\
    \ $indexes[$minIndex]];\n}\n\n$tests = [];\n$tests[] = ['input' => [4,2,3], 'expect'\
    \ => [2, 1]];\n$tests[] = ['input' => [1,2,3], 'expect' => [2, 1]];\n$tests[]\
    \ = ['input' => [], 'expect' => []];\n$tests[] = ['input' => [5, 0, 3, 0, 4, 2],\
    \ 'expect' => [0, 1]];\n\nforeach ($tests as $index => $test) {\n    $result =\
    \ pluck($test['input']);\n    if ($test['expect'] != $result) {\n        echo\
    \ 'Test fail at test' . ($index + 1) . PHP_EOL;\n        exit;\n    }\n}\n\necho\
    \ 'Test good!' . PHP_EOL;", "    $evens = [];\n    $evens_indexes = [];\n    $result\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $evens[] = $value;\n            $evens_indexes[] = $key;\n  \
    \      }\n    }\n    if (empty($evens)) {\n        return $result;\n    }\n  \
    \  $min_even = min($evens);\n    $min_even_index = array_search($min_even, $evens);\n\
    \    $result[] = $min_even;\n    $result[] = $evens_indexes[$min_even_index];\n\
    \    return $result;\n}\n\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $evens = [];\n    $evens_indexes = [];\n    foreach ($arr as $index => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        \
    \    $evens_indexes[] = $index;\n        }\n    }\n    if (count($evens) == 0)\
    \ {\n        return [];\n    }\n    $min_even = min($evens);\n    $min_even_index\
    \ = array_search($min_even, $evens);\n    return [$min_even, $evens_indexes[$min_even_index]];\n\
    }\n\n$tests = [];\n$tests[] = ['input' => [4, 2, 3], 'expect' => [2, 1]];\n$tests[]\
    \ = ['input' => [1, 2, 3], 'expect' => [2, 1]];\n$tests[] = ['input' => [], 'expect'\
    \ => []];\n$tests[] = ['input' => [5, 0, 3, 0, 4, 2], 'expect' => [0, 1]];\n\n\
    foreach ($tests as $index => $test) {\n    $result = pluck($test['input']);\n\
    \    if ($test['expect'] != $result) {\n        echo 'Test fail at test' . ($index\
    \ + 1) . PHP_EOL;\n        exit;\n    }\n}\n\necho 'Test good!' . PHP_EOL;", " \
    \   $evens = [];\n    $evens_indexes = [];\n    foreach ($arr as $index => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        \
    \    $evens_indexes[] = $index;\n        }\n    }\n    if (empty($evens)) {\n\
    \        return [];\n    }\n    $min_index = array_search(min($evens), $evens);\n\
    \    return [$evens[$min_index], $evens_indexes[$min_index]];\n}\n\n$tests = [];\n\
    $tests[] = ['input' => [4, 2, 3], 'expect' => [2, 1]];\n$tests[] = ['input' =>\
    \ [1, 2, 3], 'expect' => [2, 1]];\n$tests[] = ['input' => [], 'expect' => []];\n\
    $tests[] = ['input' => [5, 0, 3, 0, 4, 2], 'expect' => [0, 1]];\n\nforeach ($tests\
    \ as $index => $test) {\n    $result = pluck($test['input']);\n    if ($test['expect']\
    \ != $result) {\n        echo 'Test fail at test' . ($index + 1) . PHP_EOL;\n\
    \        exit;\n    }\n}\n\necho 'Test good!' . PHP_EOL;", "    $evens = [];\n\
    \    $indexes = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $evens[] = $value;\n            $indexes[] = $key;\n\
    \        }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min\
    \ = min($evens);\n    $key = array_search($min, $evens);\n    return [$min, $indexes[$key]];\n\
    }\n\n$arr = [4,2,3];\nprint_r(pluck($arr));\n\n$arr = [1,2,3];\nprint_r(pluck($arr));\n\
    \n$arr = [];\nprint_r(pluck($arr));\n\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $evens = [];\n    foreach ($arr as $i => $v) {\n        if ($v % 2 == 0) {\n\
    \            $evens[] = [$v, $i];\n        }\n    }\n    if (empty($evens)) {\n\
    \        return [];\n    }\n    usort($evens, function($a, $b) {\n        if ($a[0]\
    \ == $b[0]) {\n            return $a[1] - $b[1];\n        }\n        return $a[0]\
    \ - $b[0];\n    });\n    return $evens[0];\n}\n\n$tests = [];\n$tests[] = ['input'\
    \ => [4,2,3], 'expect' => [2, 1]];\n$tests[] = ['input' => [1,2,3], 'expect' =>\
    \ [2, 1]];\n$tests[] = ['input' => [], 'expect' => []];\n$tests[] = ['input' =>\
    \ [5, 0, 3, 0, 4, 2], 'expect' => [0, 1]];\n\nforeach ($tests as $i => $test)\
    \ {\n    $result = pluck($test['input']);\n    if ($test['expect'] != $result)\
    \ {\n        echo \"Test $i failed. Expect \" . implode(',', $test['expect'])\
    \ . \" got \" . implode(',', $result) . \"\\n\";\n    }\n}", "    $evens = [];\n\
    \    foreach ($arr as $i => $v) {\n        if ($v % 2 == 0) {\n            $evens[]\
    \ = [$v, $i];\n        }\n    }\n    if (empty($evens)) {\n        return [];\n\
    \    }\n    usort($evens, function($a, $b) {\n        if ($a[0] == $b[0]) {\n\
    \            return $a[1] - $b[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $evens[0];\n}\n\n$tests = [\n    [[4,2,3], [2, 1]],\n   \
    \ [[1,2,3], [2, 1]],\n    [[], []],\n    [[5, 0, 3, 0, 4, 2], [0, 1]],\n];\n\n\
    foreach ($tests as $test) {\n    $result = pluck($test[0]);\n    if ($result !=\
    \ $test[1]) {\n        echo \"FAILED!  Input: \" . json_encode($test[0]) . \"\
    \ Expected: \" . json_encode($test[1]) . \" Got: \" . json_encode($result) . \"\
    \\n\";\n    } else {\n        echo \"PASSED!\\n\";\n    }\n}", "    $even = [];\n\
    \    $odd = [];\n    foreach ($arr as $key => $value) {\n        if ($value %\
    \ 2 == 0) {\n            $even[] = $value;\n        } else {\n            $odd[]\
    \ = $value;\n        }\n    }\n    if (count($even) == 0) {\n        return [];\n\
    \    }\n    $min = min($even);\n    $index = array_search($min, $arr);\n    return\
    \ [$min, $index];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\n$arr = [1,\
    \ 2, 3];\nprint_r(pluck($arr));\n\n$arr = [];\nprint_r(pluck($arr));\n\n$arr =\
    \ [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $evens = [];\n    $evens_indexes\
    \ = [];\n    foreach ($arr as $index => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $evens[] = $value;\n            $evens_indexes[] = $index;\n\
    \        }\n    }\n    if (count($evens) == 0) {\n        return [];\n    }\n\
    \    $min_even = min($evens);\n    $min_even_index = array_search($min_even, $evens);\n\
    \    return [$min_even, $evens_indexes[$min_even_index]];\n}\n\n$arr = [4,2,3];\n\
    $arr = [1,2,3];\n$arr = [];\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $evens = [];\n    $evens_indexes = [];\n    foreach ($arr as $index => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        \
    \    $evens_indexes[] = $index;\n        }\n    }\n    if (count($evens) == 0)\
    \ {\n        return [];\n    }\n    $min_even = min($evens);\n    $min_even_index\
    \ = array_search($min_even, $evens);\n    return [$min_even, $evens_indexes[$min_even_index]];\n\
    }\n\n$tests = [];\n$tests[] = ['input' => [4, 2, 3], 'expect' => [2, 1]];\n$tests[]\
    \ = ['input' => [1, 2, 3], 'expect' => [2, 1]];\n$tests[] = ['input' => [], 'expect'\
    \ => []];\n$tests[] = ['input' => [5, 0, 3, 0, 4, 2], 'expect' => [0, 1]];\n\n\
    foreach ($tests as $index => $test) {\n    $result = pluck($test['input']);\n\
    \    if ($test['expect'] != $result) {\n        echo 'Test fail at test' . ($index\
    \ + 1) . PHP_EOL;\n        exit;\n    }\n}\n\necho 'Test good!' . PHP_EOL;", " \
    \   $evens = [];\n    $evens_indexes = [];\n    foreach ($arr as $index => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        \
    \    $evens_indexes[] = $index;\n        }\n    }\n    if (empty($evens)) {\n\
    \        return [];\n    }\n    $min_even = min($evens);\n    $min_even_index\
    \ = array_search($min_even, $evens);\n    return [$min_even, $evens_indexes[$min_even_index]];\n\
    }\n\n$arr = [4,2,3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [1,2,3];\n\
    print_r(pluck($arr));\necho \"\\n\";\n$arr = [];\nprint_r(pluck($arr));\necho\
    \ \"\\n\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\necho \"\\n\";",
  "    $evens = [];\n    $evens_indexes = [];\n    foreach ($arr as $index => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        \
    \    $evens_indexes[] = $index;\n        }\n    }\n    if (empty($evens)) {\n\
    \        return [];\n    }\n    $min_even = min($evens);\n    $min_even_index\
    \ = array_search($min_even, $evens);\n    return [$min_even, $evens_indexes[$min_even_index]];\n\
    }\n", "    $evens = [];\n    foreach ($arr as $i => $v) {\n        if ($v % 2\
    \ == 0) {\n            $evens[] = [$v, $i];\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    usort($evens, function($a, $b) {\n       \
    \ if ($a[0] == $b[0]) {\n            return $a[1] - $b[1];\n        }\n      \
    \  return $a[0] - $b[0];\n    });\n    return $evens[0];\n}\n\n$tests = [\n  \
    \  [[4,2,3], [2, 1]],\n    [[1,2,3], [2, 1]],\n    [[], []],\n    [[5, 0, 3, 0,\
    \ 4, 2], [0, 1]],\n];\n\nforeach ($tests as [$input, $expected]) {\n    $result\
    \ = pluck($input);\n    if ($result != $expected) {\n        echo \"FAIL: pluck({$input})\
    \ = {$result} expected {$expected}\\n\";\n    } else {\n        echo \"PASS\\\
    n\";\n    }\n}", "    if (empty($arr)) {\n        return [];\n    }\n    $evens\
    \ = [];\n    foreach ($arr as $i => $v) {\n        if ($v % 2 == 0) {\n      \
    \      $evens[] = [$v, $i];\n        }\n    }\n    if (empty($evens)) {\n    \
    \    return [];\n    }\n    usort($evens, function($a, $b) {\n        if ($a[0]\
    \ == $b[0]) {\n            return $a[1] - $b[1];\n        }\n        return $a[0]\
    \ - $b[0];\n    });\n    return $evens[0];\n}\n\n$tests = [];\n$tests[] = ['input'\
    \ => [4,2,3], 'expected' => [2, 1]];\n$tests[] = ['input' => [1,2,3], 'expected'\
    \ => [2, 1]];\n$tests[] = ['input' => [], 'expected' => []];\n$tests[] = ['input'\
    \ => [5, 0, 3, 0, 4, 2], 'expected' => [0, 1]];\n\nforeach ($tests as $i => $test)\
    \ {\n    $result = pluck($test['input']);\n    if ($test['expected'] != $result)\
    \ {\n        echo \"Test $i failed.\\n\";\n        echo \"Input: \";\n       \
    \ print_r($test['input']);\n        echo \"\\n\";\n        echo \"Expected: \"\
    ;\n        print_r($test['expected']);\n        echo \"\\n\";\n        echo \"\
    Result: \";\n        print_r($result);\n        echo \"\\n\";\n    }\n}", "  \
    \  $evens = [];\n    $indexes = [];\n    foreach ($arr as $index => $value) {\n\
    \        if ($value % 2 == 0) {\n            $evens[] = $value;\n            $indexes[]\
    \ = $index;\n        }\n    }\n    if (empty($evens)) {\n        return [];\n\
    \    }\n    $min = min($evens);\n    $minIndex = array_search($min, $evens);\n\
    \    return [$min, $indexes[$minIndex]];\n}\n\n$tests = [];\n$tests[] = ['input'\
    \ => [4,2,3], 'expect' => [2, 1]];\n$tests[] = ['input' => [1,2,3], 'expect' =>\
    \ [2, 1]];\n$tests[] = ['input' => [], 'expect' => []];\n$tests[] = ['input' =>\
    \ [5, 0, 3, 0, 4, 2], 'expect' => [0, 1]];\n\nforeach ($tests as $index => $test)\
    \ {\n    $result = pluck($test['input']);\n    if ($test['expect'] != $result)\
    \ {\n        echo 'Test fail at test' . ($index + 1) . PHP_EOL;\n        exit;\n\
    \    }\n}\n\necho 'Test good!' . PHP_EOL;", "    $even = [];\n    $index = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $even[] = $value;\n            $index[] = $key;\n        }\n    }\n \
    \   if (empty($even)) {\n        return [];\n    }\n    $min = min($even);\n \
    \   $min_index = array_search($min, $even);\n    return [$min, $index[$min_index]];\n\
    }\n\n$arr = [4,2,3];\n$arr = [1,2,3];\n$arr = [];\n$arr = [5, 0, 3, 0, 4, 2];\n\
    \nprint_r(pluck($arr));", "    $evens = [];\n    foreach ($arr as $i => $v) {\n\
    \        if ($v % 2 == 0) {\n            $evens[] = [$v, $i];\n        }\n   \
    \ }\n    if (empty($evens)) {\n        return [];\n    }\n    usort($evens, function($a,\
    \ $b) {\n        if ($a[0] == $b[0]) {\n            return $a[1] - $b[1];\n  \
    \      }\n        return $a[0] - $b[0];\n    });\n    return $evens[0];\n}\n",
  "    $even = [];\n    $odd = [];\n    foreach ($arr as $key => $value) {\n     \
    \   if ($value % 2 == 0) {\n            $even[] = $value;\n        } else {\n\
    \            $odd[] = $value;\n        }\n    }\n    if (count($even) > 0) {\n\
    \        sort($even);\n        $smallest = $even[0];\n        $smallest_key =\
    \ array_search($smallest, $arr);\n        return [$smallest, $smallest_key];\n\
    \    } else {\n        return [];\n    }\n}\n\n$arr = [4, 2, 3];\n$arr2 = [1,\
    \ 2, 3];\n$arr3 = [];\n$arr4 = [5, 0, 3, 0, 4, 2];\n\nprint_r(pluck($arr));\n\
    print_r(pluck($arr2));\nprint_r(pluck($arr3));\nprint_r(pluck($arr4));", "   \
    \ $evens = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2\
    \ == 0) {\n            $evens[] = $value;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $key = array_search($min,\
    \ $arr);\n    return [$min, $key];\n}\n\n$arr = [4,2,3];\n$arr = [1,2,3];\n$arr\
    \ = [];\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $evens = [];\n\
    \    $index = 0;\n    foreach ($arr as $value) {\n        if ($value % 2 == 0)\
    \ {\n            $evens[] = $value;\n        }\n    }\n    if (count($evens) ==\
    \ 0) {\n        return [];\n    }\n    $min = min($evens);\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value == $min) {\n            $index = $key;\n\
    \            break;\n        }\n    }\n    return [$min, $index];\n}\n\n$arr =\
    \ [4,2,3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [1,2,3];\nprint_r(pluck($arr));\n\
    echo \"\\n\";\n$arr = [];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [5, 0,\
    \ 3, 0, 4, 2];\nprint_r(pluck($arr));\necho \"\\n\";", "    $evens = [];\n   \
    \ $indexes = [];\n    foreach ($arr as $index => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $evens[] = $value;\n            $indexes[] = $index;\n\
    \        }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min\
    \ = min($evens);\n    $minIndex = array_search($min, $evens);\n    return [$min,\
    \ $indexes[$minIndex]];\n}\n\n$tests = [\n    [[4,2,3], [2, 1]],\n    [[1,2,3],\
    \ [2, 1]],\n    [[], []],\n    [[5, 0, 3, 0, 4, 2], [0, 1]],\n];\n\nforeach ($tests\
    \ as $test) {\n    $result = pluck($test[0]);\n    if ($result !== $test[1]) {\n\
    \        echo \"FAILED!  Input: {$test[0]} Expected: {$test[1]} Got: {$result}\\\
    n\";\n    }\n}", "    $evens = [];\n    $evensIndex = [];\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $evens[] = $value;\n            $evensIndex[] = $key;\n        }\n  \
    \  }\n    if (count($evens) > 0) {\n        $minEven = min($evens);\n        $minEvenIndex\
    \ = array_search($minEven, $evens);\n        $result[] = $minEven;\n        $result[]\
    \ = $evensIndex[$minEvenIndex];\n    }\n    return $result;\n}\n\n$arr = [4,2,3];\n\
    print_r(pluck($arr));\necho \"\\n\";\n$arr = [1,2,3];\nprint_r(pluck($arr));\n\
    echo \"\\n\";\n$arr = [];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [5, 0,\
    \ 3, 0, 4, 2];\nprint_r(pluck($arr));\necho \"\\n\";", "    $even = [];\n    $odd\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $even[] = $value;\n        } else {\n            $odd[] = $value;\n\
    \        }\n    }\n    if (count($even) == 0) {\n        return [];\n    }\n \
    \   $min = min($even);\n    $index = array_search($min, $arr);\n    return [$min,\
    \ $index];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n$arr = [1, 2, 3];\n\
    print_r(pluck($arr));\n$arr = [];\nprint_r(pluck($arr));\n$arr = [5, 0, 3, 0,\
    \ 4, 2];\nprint_r(pluck($arr));", "    $evens = [];\n    foreach ($arr as $key\
    \ => $value) {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n\
    \        }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min\
    \ = min($evens);\n    $index = array_search($min, $arr);\n    return [$min, $index];\n\
    }\n\n$arr = [4,2,3];\nprint_r(pluck($arr));\necho PHP_EOL;\n$arr = [1,2,3];\n\
    print_r(pluck($arr));\necho PHP_EOL;\n$arr = [];\nprint_r(pluck($arr));\necho\
    \ PHP_EOL;\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\necho PHP_EOL;",
  "    $evens = [];\n    $evens_indexes = [];\n    $result = [];\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[] =\
    \ $value;\n            $evens_indexes[] = $key;\n        }\n    }\n    if (count($evens)\
    \ > 0) {\n        $min = min($evens);\n        $min_index = array_search($min,\
    \ $evens);\n        $result[] = $min;\n        $result[] = $evens_indexes[$min_index];\n\
    \    }\n    return $result;\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\nprint_r($result);\n\
    \n$arr = [1,2,3];\n$result = pluck($arr);\nprint_r($result);\n\n$arr = [];\n$result\
    \ = pluck($arr);\nprint_r($result);\n\n$arr = [5, 0, 3, 0, 4, 2];\n$result = pluck($arr);\n\
    print_r($result);", "    $evens = [];\n    $evens_indexes = [];\n    foreach ($arr\
    \ as $index => $value) {\n        if ($value % 2 == 0) {\n            $evens[]\
    \ = $value;\n            $evens_indexes[] = $index;\n        }\n    }\n    if\
    \ (empty($evens)) {\n        return [];\n    }\n    $min_even = min($evens);\n\
    \    $min_even_index = array_search($min_even, $evens);\n    return [$min_even,\
    \ $evens_indexes[$min_even_index]];\n}\n\n$arr = [4,2,3];\nprint_r(pluck($arr));\n\
    \n$arr = [1,2,3];\nprint_r(pluck($arr));\n\n$arr = [];\nprint_r(pluck($arr));\n\
    \n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $evens = [];\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[]\
    \ = $value;\n        }\n    }\n    if (count($evens) == 0) {\n        return [];\n\
    \    }\n    $min = min($evens);\n    $index = array_search($min, $arr);\n    return\
    \ [$min, $index];\n}\n\n$tests = [];\n$tests[] = ['input' => [4, 2, 3], 'expect'\
    \ => [2, 1]];\n$tests[] = ['input' => [1, 2, 3], 'expect' => [2, 1]];\n$tests[]\
    \ = ['input' => [], 'expect' => []];\n$tests[] = ['input' => [5, 0, 3, 0, 4, 2],\
    \ 'expect' => [0, 1]];\n\nforeach ($tests as $index => $test) {\n    $result =\
    \ pluck($test['input']);\n    if ($test['expect'] != $result) {\n        echo\
    \ 'Test fail at test' . ($index + 1) . PHP_EOL;\n        exit;\n    }\n}\n\necho\
    \ 'Test good!' . PHP_EOL;", "    $evens = [];\n    $evens_indexes = [];\n    foreach\
    \ ($arr as $index => $value) {\n        if ($value % 2 == 0) {\n            $evens[]\
    \ = $value;\n            $evens_indexes[] = $index;\n        }\n    }\n    if\
    \ (empty($evens)) {\n        return [];\n    }\n    $min_even = min($evens);\n\
    \    $min_even_index = array_search($min_even, $evens);\n    return [$min_even,\
    \ $evens_indexes[$min_even_index]];\n}\n\n$tests = [];\n$tests[] = ['input' =>\
    \ [4,2,3], 'expect' => [2, 1]];\n$tests[] = ['input' => [1,2,3], 'expect' => [2,\
    \ 1]];\n$tests[] = ['input' => [], 'expect' => []];\n$tests[] = ['input' => [5,\
    \ 0, 3, 0, 4, 2], 'expect' => [0, 1]];\n\nforeach ($tests as $index => $test)\
    \ {\n    $result = pluck($test['input']);\n    if ($test['expect'] != $result)\
    \ {\n        echo 'Test fail at test' . ($index + 1) . PHP_EOL;\n        exit;\n\
    \    }\n}\n\necho 'Test good!' . PHP_EOL;", "    $evens = [];\n    $evensIndex\
    \ = [];\n    foreach ($arr as $index => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $evens[] = $value;\n            $evensIndex[] = $index;\n   \
    \     }\n    }\n    if (count($evens) == 0) {\n        return [];\n    }\n   \
    \ $min = min($evens);\n    $minIndex = array_search($min, $evens);\n    return\
    \ [$min, $evensIndex[$minIndex]];\n}\n\n$input = [4,2,3];\nprint_r(pluck($input));\n\
    \n$input = [1,2,3];\nprint_r(pluck($input));\n\n$input = [];\nprint_r(pluck($input));\n\
    \n$input = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($input));"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
