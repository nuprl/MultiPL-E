name: HumanEval_105_by_length
language: php
results:
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr = array_filter($arr, function($item) {\n        return $item > 0\
    \ && $item < 10;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n\
    \    $arr = array_map(function($item) {\n        switch ($item) {\n          \
    \  case 1:\n                return 'One';\n            case 2:\n             \
    \   return 'Two';\n            case 3:\n                return 'Three';\n    \
    \        case 4:\n                return 'Four';\n            case 5:\n      \
    \          return 'Five';\n            case 6:\n                return 'Six';\n\
    \            case 7:\n                return 'Seven';\n            case 8:\n \
    \               return 'Eight';\n            case 9:\n                return 'Nine';\n\
    \        }\n    }, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpje1xpt0n.php:28\n\
    Stack trace:\n#0 /tmp/tmpje1xpt0n.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpje1xpt0n.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpv7hudn13.php:36\n\
    Stack trace:\n#0 /tmp/tmpv7hudn13.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpv7hudn13.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $lengths = array_map('strlen', $arr);\n  array_multisort($lengths, SORT_DESC,\
    \ $arr);\n  return $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpoad8ak9k.php:29\n\
    Stack trace:\n#0 /tmp/tmpoad8ak9k.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpoad8ak9k.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprvupj02_.php:37\n\
    Stack trace:\n#0 /tmp/tmprvupj02_.php(44): test()\n#1 {main}\n  thrown in /tmp/tmprvupj02_.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8uoy34ej.php:28\n\
    Stack trace:\n#0 /tmp/tmp8uoy34ej.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp8uoy34ej.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvle11mm5.php:29\n\
    Stack trace:\n#0 /tmp/tmpvle11mm5.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpvle11mm5.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_aicgvi8.php:29\n\
    Stack trace:\n#0 /tmp/tmp_aicgvi8.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_aicgvi8.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr = array_map('strlen', $arr);\n    array_multisort($arr, SORT_DESC,\
    \ $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphj9yd6sh.php:28\n\
    Stack trace:\n#0 /tmp/tmphj9yd6sh.php(35): test()\n#1 {main}\n  thrown in /tmp/tmphj9yd6sh.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpna1e6494.php:29\n\
    Stack trace:\n#0 /tmp/tmpna1e6494.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpna1e6494.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpf69hrapc.php:28\n\
    Stack trace:\n#0 /tmp/tmpf69hrapc.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpf69hrapc.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfauji6ao.php:37\n\
    Stack trace:\n#0 /tmp/tmpfauji6ao.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpfauji6ao.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr = array_filter($arr, function($a) {\n        return $a >= 1 && $a\
    \ <= 9;\n    });\n    rsort($arr);\n    $arr = array_map(function($a) {\n    \
    \    switch ($a) {\n            case 1:\n                return 'One';\n     \
    \       case 2:\n                return 'Two';\n            case 3:\n        \
    \        return 'Three';\n            case 4:\n                return 'Four';\n\
    \            case 5:\n                return 'Five';\n            case 6:\n  \
    \              return 'Six';\n            case 7:\n                return 'Seven';\n\
    \            case 8:\n                return 'Eight';\n            case 9:\n \
    \               return 'Nine';\n        }\n    }, $arr);\n    return $arr;\n}\n\
    \nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6wx8yxxg.php:36\n\
    Stack trace:\n#0 /tmp/tmp6wx8yxxg.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp6wx8yxxg.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpg6308l5o.php:28\n\
    Stack trace:\n#0 /tmp/tmpg6308l5o.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpg6308l5o.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbtuczb20.php:36\n\
    Stack trace:\n#0 /tmp/tmpbtuczb20.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpbtuczb20.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8l71nxfu.php:36\n\
    Stack trace:\n#0 /tmp/tmp8l71nxfu.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp8l71nxfu.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7r16cv2n.php:29\n\
    Stack trace:\n#0 /tmp/tmp7r16cv2n.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp7r16cv2n.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphwaiuiz_.php:29\n\
    Stack trace:\n#0 /tmp/tmphwaiuiz_.php(36): test()\n#1 {main}\n  thrown in /tmp/tmphwaiuiz_.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpifwauxl2.php:29\n\
    Stack trace:\n#0 /tmp/tmpifwauxl2.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpifwauxl2.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr_len = count($arr);\n    for ($i = 0; $i < $arr_len; $i++) {\n  \
    \      for ($j = $i + 1; $j < $arr_len; $j++) {\n            if (strlen($arr[$i])\
    \ > strlen($arr[$j])) {\n                $temp = $arr[$i];\n                $arr[$i]\
    \ = $arr[$j];\n                $arr[$j] = $temp;\n            }\n        }\n \
    \   }\n    return $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3jfkrrwp.php:36\n\
    Stack trace:\n#0 /tmp/tmp3jfkrrwp.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp3jfkrrwp.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpu7jl0lsc.php:28\n\
    Stack trace:\n#0 /tmp/tmpu7jl0lsc.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpu7jl0lsc.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpox83f6g0.php:29\n\
    Stack trace:\n#0 /tmp/tmpox83f6g0.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpox83f6g0.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr_len = count($arr);\n    for ($i = 0; $i < $arr_len; $i++) {\n  \
    \      for ($j = $i + 1; $j < $arr_len; $j++) {\n            if (strlen($arr[$i])\
    \ > strlen($arr[$j])) {\n                $temp = $arr[$i];\n                $arr[$i]\
    \ = $arr[$j];\n                $arr[$j] = $temp;\n            }\n        }\n \
    \   }\n    return $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpby91s8_i.php:36\n\
    Stack trace:\n#0 /tmp/tmpby91s8_i.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpby91s8_i.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpayose5ig.php:36\n\
    Stack trace:\n#0 /tmp/tmpayose5ig.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpayose5ig.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr_length = count($arr);\n    for ($i = 0; $i < $arr_length; $i++)\
    \ {\n        for ($j = 0; $j < $arr_length - 1; $j++) {\n            if (strlen($arr[$j])\
    \ > strlen($arr[$j + 1])) {\n                $temp = $arr[$j];\n             \
    \   $arr[$j] = $arr[$j + 1];\n                $arr[$j + 1] = $temp;\n        \
    \    }\n        }\n    }\n    return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9epkmvjc.php:37\n\
    Stack trace:\n#0 /tmp/tmp9epkmvjc.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp9epkmvjc.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpiegtq747.php:36\n\
    Stack trace:\n#0 /tmp/tmpiegtq747.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpiegtq747.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxlx6o5x_.php:36\n\
    Stack trace:\n#0 /tmp/tmpxlx6o5x_.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpxlx6o5x_.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr_length = count($arr);\n    for ($i = 0; $i < $arr_length; $i++)\
    \ {\n        for ($j = 0; $j < $arr_length - 1; $j++) {\n            if (strlen($arr[$j])\
    \ > strlen($arr[$j + 1])) {\n                $temp = $arr[$j];\n             \
    \   $arr[$j] = $arr[$j + 1];\n                $arr[$j + 1] = $temp;\n        \
    \    }\n        }\n    }\n    return $arr;\n}\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpswvd5oln.php:36\n\
    Stack trace:\n#0 /tmp/tmpswvd5oln.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpswvd5oln.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9vzi90ko.php:28\n\
    Stack trace:\n#0 /tmp/tmp9vzi90ko.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp9vzi90ko.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpq87faj6p.php:29\n\
    Stack trace:\n#0 /tmp/tmpq87faj6p.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpq87faj6p.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9kqovyvk.php:28\n\
    Stack trace:\n#0 /tmp/tmp9kqovyvk.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp9kqovyvk.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_3yubxt2.php:28\n\
    Stack trace:\n#0 /tmp/tmp_3yubxt2.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp_3yubxt2.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2chwn6vc.php:37\n\
    Stack trace:\n#0 /tmp/tmp2chwn6vc.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp2chwn6vc.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3l9_kyi9.php:37\n\
    Stack trace:\n#0 /tmp/tmp3l9_kyi9.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3l9_kyi9.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplbr0jyjh.php:36\n\
    Stack trace:\n#0 /tmp/tmplbr0jyjh.php(43): test()\n#1 {main}\n  thrown in /tmp/tmplbr0jyjh.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7zobg7bi.php:29\n\
    Stack trace:\n#0 /tmp/tmp7zobg7bi.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp7zobg7bi.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr = array_map('strlen', $arr);\n    asort($arr);\n    return array_keys($arr);\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvd5_90rf.php:29\n\
    Stack trace:\n#0 /tmp/tmpvd5_90rf.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpvd5_90rf.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvdjg3r5u.php:36\n\
    Stack trace:\n#0 /tmp/tmpvdjg3r5u.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpvdjg3r5u.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr = array_map('strval', $arr);\n    usort($arr, function($a, $b) {\n\
    \        return strlen($b) - strlen($a);\n    });\n    return $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpriglvz2d.php:31\n\
    Stack trace:\n#0 /tmp/tmpriglvz2d.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpriglvz2d.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpk2hp954f.php:36\n\
    Stack trace:\n#0 /tmp/tmpk2hp954f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpk2hp954f.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr = array_map('strlen', $arr);\n    array_multisort($arr, SORT_DESC,\
    \ $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5fydzl01.php:29\n\
    Stack trace:\n#0 /tmp/tmp5fydzl01.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp5fydzl01.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpiktyht2n.php:36\n\
    Stack trace:\n#0 /tmp/tmpiktyht2n.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpiktyht2n.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvudjw3ef.php:37\n\
    Stack trace:\n#0 /tmp/tmpvudjw3ef.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpvudjw3ef.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$len = count($arr);\n\tfor ($i = 0; $i < $len; $i++) {\n\t\tfor ($j = $i\
    \ + 1; $j < $len; $j++) {\n\t\t\tif (strlen($arr[$i]) > strlen($arr[$j])) {\n\t\
    \t\t\t$temp = $arr[$i];\n\t\t\t\t$arr[$i] = $arr[$j];\n\t\t\t\t$arr[$j] = $temp;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn $arr;\n}\n\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjglwfhax.php:37\n\
    Stack trace:\n#0 /tmp/tmpjglwfhax.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpjglwfhax.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr = array_map(function($num) {\n        if ($num == 1) {\n       \
    \     return 'One';\n        } elseif ($num == 2) {\n            return 'Two';\n\
    \        } elseif ($num == 3) {\n            return 'Three';\n        } elseif\
    \ ($num == 4) {\n            return 'Four';\n        } elseif ($num == 5) {\n\
    \            return 'Five';\n        } elseif ($num == 6) {\n            return\
    \ 'Six';\n        } elseif ($num == 7) {\n            return 'Seven';\n      \
    \  } elseif ($num == 8) {\n            return 'Eight';\n        } elseif ($num\
    \ == 9) {\n            return 'Nine';\n        }\n    }, $arr);\n    return $arr;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpx6uc6iuo.php:48\n\
    Stack trace:\n#0 /tmp/tmpx6uc6iuo.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpx6uc6iuo.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $result = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ >= 1 && $value <= 9) {\n            $result[] = $value;\n        }\n    }\n\
    \    sort($result);\n    $result = array_reverse($result);\n    $result = array_map(function($value)\
    \ {\n        switch ($value) {\n            case 1:\n                return 'One';\n\
    \            case 2:\n                return 'Two';\n            case 3:\n   \
    \             return 'Three';\n            case 4:\n                return 'Four';\n\
    \            case 5:\n                return 'Five';\n            case 6:\n  \
    \              return 'Six';\n            case 7:\n                return 'Seven';\n\
    \            case 8:\n                return 'Eight';\n            case 9:\n \
    \               return 'Nine';\n        }\n    }, $result);\n    return $result;\n\
    }\n\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\nprint_r(by_length($arr));\n\n$arr = [];\n\
    print_r(by_length($arr));\n\n$arr = [1, -1 , 55];\nprint_r(by_length($arr));\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\nArray\n\
    (\n)\nArray\n(\n    [0] => One\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwxihg9xf.php:28\n\
    Stack trace:\n#0 /tmp/tmpwxihg9xf.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpwxihg9xf.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr_len = count($arr);\n    for ($i = 0; $i < $arr_len; $i++) {\n  \
    \      for ($j = $i + 1; $j < $arr_len; $j++) {\n            if (strlen($arr[$i])\
    \ > strlen($arr[$j])) {\n                $temp = $arr[$i];\n                $arr[$i]\
    \ = $arr[$j];\n                $arr[$j] = $temp;\n            }\n        }\n \
    \   }\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzx__cmh2.php:37\n\
    Stack trace:\n#0 /tmp/tmpzx__cmh2.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpzx__cmh2.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8dvk06zw.php:37\n\
    Stack trace:\n#0 /tmp/tmp8dvk06zw.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp8dvk06zw.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$arr_len = count($arr);\n\tfor ($i = 0; $i < $arr_len; $i++) {\n\t\tfor\
    \ ($j = $i + 1; $j < $arr_len; $j++) {\n\t\t\tif (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n\t\t\t\t$temp = $arr[$i];\n\t\t\t\t$arr[$i] = $arr[$j];\n\t\t\t\t$arr[$j]\
    \ = $temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn $arr;\n}\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnnz2k1il.php:36\n\
    Stack trace:\n#0 /tmp/tmpnnz2k1il.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpnnz2k1il.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr_length = count($arr);\n    for ($i = 0; $i < $arr_length; $i++)\
    \ {\n        for ($j = 0; $j < $arr_length - 1; $j++) {\n            if ($arr[$j]\
    \ > $arr[$j + 1]) {\n                $temp = $arr[$j];\n                $arr[$j]\
    \ = $arr[$j + 1];\n                $arr[$j + 1] = $temp;\n            }\n    \
    \    }\n    }\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpk7lewuoe.php:37\n\
    Stack trace:\n#0 /tmp/tmpk7lewuoe.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpk7lewuoe.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1dmmzhs1.php:29\n\
    Stack trace:\n#0 /tmp/tmp1dmmzhs1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1dmmzhs1.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1xbl1sbb.php:28\n\
    Stack trace:\n#0 /tmp/tmp1xbl1sbb.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp1xbl1sbb.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$arr = array_filter($arr, function($v) {\n\t\treturn $v >= 1 && $v <= 9;\n\
    \t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($v)\
    \ {\n\t\t$map = [\n\t\t\t1 => 'One',\n\t\t\t2 => 'Two',\n\t\t\t3 => 'Three',\n\
    \t\t\t4 => 'Four',\n\t\t\t5 => 'Five',\n\t\t\t6 => 'Six',\n\t\t\t7 => 'Seven',\n\
    \t\t\t8 => 'Eight',\n\t\t\t9 => 'Nine',\n\t\t];\n\t\treturn $map[$v];\n\t}, $arr);\n\
    \treturn $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7e9buwy5.php:28\n\
    Stack trace:\n#0 /tmp/tmp7e9buwy5.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp7e9buwy5.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqsz88awv.php:28\n\
    Stack trace:\n#0 /tmp/tmpqsz88awv.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpqsz88awv.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr = array_map('strlen', $arr);\n    asort($arr);\n    return array_keys($arr);\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvitalmyh.php:29\n\
    Stack trace:\n#0 /tmp/tmpvitalmyh.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpvitalmyh.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn_sgfr0_.php:29\n\
    Stack trace:\n#0 /tmp/tmpn_sgfr0_.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpn_sgfr0_.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpggwlbze0.php:36\n\
    Stack trace:\n#0 /tmp/tmpggwlbze0.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpggwlbze0.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpop8o2rji.php:28\n\
    Stack trace:\n#0 /tmp/tmpop8o2rji.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpop8o2rji.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr_len = count($arr);\n    for ($i = 0; $i < $arr_len; $i++) {\n  \
    \      for ($j = $i + 1; $j < $arr_len; $j++) {\n            if (strlen($arr[$i])\
    \ > strlen($arr[$j])) {\n                $temp = $arr[$i];\n                $arr[$i]\
    \ = $arr[$j];\n                $arr[$j] = $temp;\n            }\n        }\n \
    \   }\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp309jb8sh.php:37\n\
    Stack trace:\n#0 /tmp/tmp309jb8sh.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp309jb8sh.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpg3tkbklc.php:28\n\
    Stack trace:\n#0 /tmp/tmpg3tkbklc.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpg3tkbklc.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5mxl3rwg.php:28\n\
    Stack trace:\n#0 /tmp/tmp5mxl3rwg.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp5mxl3rwg.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8sgixh7b.php:36\n\
    Stack trace:\n#0 /tmp/tmp8sgixh7b.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp8sgixh7b.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcel7cas_.php:28\n\
    Stack trace:\n#0 /tmp/tmpcel7cas_.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpcel7cas_.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $length = count($arr);\n    for ($i = 0; $i < $length; $i++) {\n    \
    \    for ($j = 0; $j < $length - 1; $j++) {\n            if (strlen($arr[$j])\
    \ > strlen($arr[$j + 1])) {\n                $temp = $arr[$j];\n             \
    \   $arr[$j] = $arr[$j + 1];\n                $arr[$j + 1] = $temp;\n        \
    \    }\n        }\n    }\n    return $arr;\n}\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpy92pf4cw.php:36\n\
    Stack trace:\n#0 /tmp/tmpy92pf4cw.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpy92pf4cw.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpunvynvvh.php:29\n\
    Stack trace:\n#0 /tmp/tmpunvynvvh.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpunvynvvh.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $lengths = array_map('strlen', $arr);\n  array_multisort($lengths, SORT_DESC,\
    \ $arr);\n  return $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzxb83tjo.php:29\n\
    Stack trace:\n#0 /tmp/tmpzxb83tjo.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpzxb83tjo.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_0ry56j9.php:36\n\
    Stack trace:\n#0 /tmp/tmp_0ry56j9.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp_0ry56j9.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr_len = count($arr);\n    for ($i = 0; $i < $arr_len; $i++) {\n  \
    \      for ($j = $i + 1; $j < $arr_len; $j++) {\n            if (strlen($arr[$i])\
    \ > strlen($arr[$j])) {\n                $temp = $arr[$i];\n                $arr[$i]\
    \ = $arr[$j];\n                $arr[$j] = $temp;\n            }\n        }\n \
    \   }\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkpxvs3ef.php:37\n\
    Stack trace:\n#0 /tmp/tmpkpxvs3ef.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpkpxvs3ef.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpoa59q520.php:28\n\
    Stack trace:\n#0 /tmp/tmpoa59q520.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpoa59q520.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnxo6i8u1.php:37\n\
    Stack trace:\n#0 /tmp/tmpnxo6i8u1.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpnxo6i8u1.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpd5oxxq5t.php:29\n\
    Stack trace:\n#0 /tmp/tmpd5oxxq5t.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpd5oxxq5t.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6y_nj024.php:37\n\
    Stack trace:\n#0 /tmp/tmp6y_nj024.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp6y_nj024.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr_length = count($arr);\n    for ($i = 0; $i < $arr_length; $i++)\
    \ {\n        for ($j = 0; $j < $arr_length - 1; $j++) {\n            if ($arr[$j]\
    \ > $arr[$j + 1]) {\n                $temp = $arr[$j];\n                $arr[$j]\
    \ = $arr[$j + 1];\n                $arr[$j + 1] = $temp;\n            }\n    \
    \    }\n    }\n    return $arr;\n}\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwy_6h0xd.php:36\n\
    Stack trace:\n#0 /tmp/tmpwy_6h0xd.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpwy_6h0xd.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr_len = count($arr);\n    for ($i = 0; $i < $arr_len; $i++) {\n  \
    \      for ($j = $i + 1; $j < $arr_len; $j++) {\n            if (strlen($arr[$i])\
    \ > strlen($arr[$j])) {\n                $temp = $arr[$i];\n                $arr[$i]\
    \ = $arr[$j];\n                $arr[$j] = $temp;\n            }\n        }\n \
    \   }\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgnbswcve.php:37\n\
    Stack trace:\n#0 /tmp/tmpgnbswcve.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpgnbswcve.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsm5o4f9h.php:37\n\
    Stack trace:\n#0 /tmp/tmpsm5o4f9h.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpsm5o4f9h.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr = array_map(function($n) {\n        return strlen($n);\n    }, $arr);\n\
    \    array_multisort($arr, SORT_ASC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpb73zh1ji.php:31\n\
    Stack trace:\n#0 /tmp/tmpb73zh1ji.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpb73zh1ji.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $new_arr = [];\n  foreach ($arr as $key => $value) {\n    $new_arr[$key]\
    \ = strlen($value);\n  }\n  return $new_arr;\n}\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpakpwfffs.php:30\n\
    Stack trace:\n#0 /tmp/tmpakpwfffs.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpakpwfffs.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr_len = count($arr);\n    for ($i = 0; $i < $arr_len; $i++) {\n  \
    \      for ($j = $i + 1; $j < $arr_len; $j++) {\n            if (strlen($arr[$i])\
    \ > strlen($arr[$j])) {\n                $temp = $arr[$i];\n                $arr[$i]\
    \ = $arr[$j];\n                $arr[$j] = $temp;\n            }\n        }\n \
    \   }\n    return $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgbbu7e_z.php:36\n\
    Stack trace:\n#0 /tmp/tmpgbbu7e_z.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpgbbu7e_z.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmipeefm2.php:28\n\
    Stack trace:\n#0 /tmp/tmpmipeefm2.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpmipeefm2.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0x1dorhl.php:37\n\
    Stack trace:\n#0 /tmp/tmp0x1dorhl.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp0x1dorhl.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $arr_length = count($arr);\n  for ($i = 0; $i < $arr_length; $i++) {\n\
    \    for ($j = 0; $j < $arr_length - 1; $j++) {\n      if (strlen($arr[$j]) >\
    \ strlen($arr[$j + 1])) {\n        $temp = $arr[$j];\n        $arr[$j] = $arr[$j\
    \ + 1];\n        $arr[$j + 1] = $temp;\n      }\n    }\n  }\n  return $arr;\n\
    }\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpi26cuc9g.php:36\n\
    Stack trace:\n#0 /tmp/tmpi26cuc9g.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpi26cuc9g.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfcz8yzft.php:29\n\
    Stack trace:\n#0 /tmp/tmpfcz8yzft.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpfcz8yzft.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $result = array();\n    foreach ($arr as $key => $value) {\n        $result[$key]\
    \ = strlen($value);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpm22tnob7.php:31\n\
    Stack trace:\n#0 /tmp/tmpm22tnob7.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpm22tnob7.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjp21j8yd.php:29\n\
    Stack trace:\n#0 /tmp/tmpjp21j8yd.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpjp21j8yd.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpepl0ixrf.php:28\n\
    Stack trace:\n#0 /tmp/tmpepl0ixrf.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpepl0ixrf.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr_length = count($arr);\n    for ($i = 0; $i < $arr_length; $i++)\
    \ {\n        for ($j = 0; $j < $arr_length - 1; $j++) {\n            if ($arr[$j]\
    \ > $arr[$j + 1]) {\n                $temp = $arr[$j];\n                $arr[$j]\
    \ = $arr[$j + 1];\n                $arr[$j + 1] = $temp;\n            }\n    \
    \    }\n    }\n    return $arr;\n}\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphgoixln2.php:36\n\
    Stack trace:\n#0 /tmp/tmphgoixln2.php(43): test()\n#1 {main}\n  thrown in /tmp/tmphgoixln2.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprfgk51gi.php:29\n\
    Stack trace:\n#0 /tmp/tmprfgk51gi.php(36): test()\n#1 {main}\n  thrown in /tmp/tmprfgk51gi.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9bock9t6.php:29\n\
    Stack trace:\n#0 /tmp/tmp9bock9t6.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp9bock9t6.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $result = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ >= 1 && $value <= 9) {\n            $result[] = $value;\n        }\n    }\n\
    \    sort($result);\n    $result = array_reverse($result);\n    $result = array_map(function($value)\
    \ {\n        switch ($value) {\n            case 1:\n                return 'One';\n\
    \            case 2:\n                return 'Two';\n            case 3:\n   \
    \             return 'Three';\n            case 4:\n                return 'Four';\n\
    \            case 5:\n                return 'Five';\n            case 6:\n  \
    \              return 'Six';\n            case 7:\n                return 'Seven';\n\
    \            case 8:\n                return 'Eight';\n            case 9:\n \
    \               return 'Nine';\n        }\n    }, $result);\n    return $result;\n\
    }\n\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\nprint_r(by_length($arr));\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnaltz00j.php:37\n\
    Stack trace:\n#0 /tmp/tmpnaltz00j.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpnaltz00j.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $result = [];\n    foreach ($arr as $key => $value) {\n        $result[$key]\
    \ = strlen($value);\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7z70uiw6.php:30\n\
    Stack trace:\n#0 /tmp/tmp7z70uiw6.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp7z70uiw6.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpt8tpkerr.php:28\n\
    Stack trace:\n#0 /tmp/tmpt8tpkerr.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpt8tpkerr.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $result = [];\n    foreach ($arr as $key => $value) {\n        $result[$key]\
    \ = strlen($value);\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzrujenqt.php:30\n\
    Stack trace:\n#0 /tmp/tmpzrujenqt.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpzrujenqt.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr = array_map(function($n) {\n        return strlen($n);\n    }, $arr);\n\
    \    array_multisort($arr, SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4crn1sgd.php:31\n\
    Stack trace:\n#0 /tmp/tmp4crn1sgd.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp4crn1sgd.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpk20rxne9.php:28\n\
    Stack trace:\n#0 /tmp/tmpk20rxne9.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpk20rxne9.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp99elbeaq.php:29\n\
    Stack trace:\n#0 /tmp/tmp99elbeaq.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp99elbeaq.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpt1ig38zp.php:29\n\
    Stack trace:\n#0 /tmp/tmpt1ig38zp.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpt1ig38zp.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr = array_map(function($n) {\n        return strlen($n);\n    }, $arr);\n\
    \    array_multisort($arr, SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpe7va5785.php:30\n\
    Stack trace:\n#0 /tmp/tmpe7va5785.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpe7va5785.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpw3vogprw.php:29\n\
    Stack trace:\n#0 /tmp/tmpw3vogprw.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpw3vogprw.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdknkbxck.php:28\n\
    Stack trace:\n#0 /tmp/tmpdknkbxck.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpdknkbxck.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp953i36zm.php:37\n\
    Stack trace:\n#0 /tmp/tmp953i36zm.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp953i36zm.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr = array_map('strlen', $arr);\n    asort($arr);\n    return array_keys($arr);\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp080rxoaf.php:29\n\
    Stack trace:\n#0 /tmp/tmp080rxoaf.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp080rxoaf.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr_length = count($arr);\n    for ($i = 0; $i < $arr_length; $i++)\
    \ {\n        for ($j = 0; $j < $arr_length - 1; $j++) {\n            if (strlen($arr[$j])\
    \ > strlen($arr[$j + 1])) {\n                $temp = $arr[$j];\n             \
    \   $arr[$j] = $arr[$j + 1];\n                $arr[$j + 1] = $temp;\n        \
    \    }\n        }\n    }\n    return $arr;\n}\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpiy_tiyax.php:36\n\
    Stack trace:\n#0 /tmp/tmpiy_tiyax.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpiy_tiyax.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr_length = count($arr);\n    for ($i = 0; $i < $arr_length; $i++)\
    \ {\n        for ($j = 0; $j < $arr_length - 1; $j++) {\n            if (strlen($arr[$j])\
    \ > strlen($arr[$j + 1])) {\n                $temp = $arr[$j];\n             \
    \   $arr[$j] = $arr[$j + 1];\n                $arr[$j + 1] = $temp;\n        \
    \    }\n        }\n    }\n    return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7ytn0aqq.php:37\n\
    Stack trace:\n#0 /tmp/tmp7ytn0aqq.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp7ytn0aqq.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $tmp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $tmp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpahol6u3a.php:37\n\
    Stack trace:\n#0 /tmp/tmpahol6u3a.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpahol6u3a.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9s56qfl_.php:28\n\
    Stack trace:\n#0 /tmp/tmp9s56qfl_.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp9s56qfl_.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2ghntyxs.php:37\n\
    Stack trace:\n#0 /tmp/tmp2ghntyxs.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp2ghntyxs.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpztctlqtm.php:37\n\
    Stack trace:\n#0 /tmp/tmpztctlqtm.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpztctlqtm.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzd468t8s.php:29\n\
    Stack trace:\n#0 /tmp/tmpzd468t8s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpzd468t8s.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7fwxq_1u.php:28\n\
    Stack trace:\n#0 /tmp/tmp7fwxq_1u.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp7fwxq_1u.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $result = [];\n    foreach ($arr as $key => $value) {\n        $result[$key]\
    \ = strlen($value);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplm6c0xry.php:31\n\
    Stack trace:\n#0 /tmp/tmplm6c0xry.php(38): test()\n#1 {main}\n  thrown in /tmp/tmplm6c0xry.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr = array_map('strlen', $arr);\n    array_multisort($arr, SORT_ASC,\
    \ $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpp4ninwvd.php:29\n\
    Stack trace:\n#0 /tmp/tmpp4ninwvd.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpp4ninwvd.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr_len = count($arr);\n    for ($i = 0; $i < $arr_len; $i++) {\n  \
    \      for ($j = $i + 1; $j < $arr_len; $j++) {\n            if (strlen($arr[$i])\
    \ > strlen($arr[$j])) {\n                $temp = $arr[$i];\n                $arr[$i]\
    \ = $arr[$j];\n                $arr[$j] = $temp;\n            }\n        }\n \
    \   }\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp58_6q8yd.php:37\n\
    Stack trace:\n#0 /tmp/tmp58_6q8yd.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp58_6q8yd.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpk3lbr28q.php:28\n\
    Stack trace:\n#0 /tmp/tmpk3lbr28q.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpk3lbr28q.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $lengths = array_map('strlen', $arr);\n  array_multisort($lengths, SORT_DESC,\
    \ $arr);\n  return $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_3xapmx3.php:29\n\
    Stack trace:\n#0 /tmp/tmp_3xapmx3.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_3xapmx3.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8xpfgrar.php:29\n\
    Stack trace:\n#0 /tmp/tmp8xpfgrar.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp8xpfgrar.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgdsy0bvj.php:28\n\
    Stack trace:\n#0 /tmp/tmpgdsy0bvj.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpgdsy0bvj.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp83vs4wry.php:37\n\
    Stack trace:\n#0 /tmp/tmp83vs4wry.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp83vs4wry.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr_length = count($arr);\n    for ($i = 0; $i < $arr_length; $i++)\
    \ {\n        for ($j = 0; $j < $arr_length - 1; $j++) {\n            if (strlen($arr[$j])\
    \ > strlen($arr[$j + 1])) {\n                $temp = $arr[$j];\n             \
    \   $arr[$j] = $arr[$j + 1];\n                $arr[$j + 1] = $temp;\n        \
    \    }\n        }\n    }\n    return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp92ha_7b_.php:37\n\
    Stack trace:\n#0 /tmp/tmp92ha_7b_.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp92ha_7b_.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsj12nv8e.php:28\n\
    Stack trace:\n#0 /tmp/tmpsj12nv8e.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpsj12nv8e.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbti_yj93.php:37\n\
    Stack trace:\n#0 /tmp/tmpbti_yj93.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpbti_yj93.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7vawm7lr.php:29\n\
    Stack trace:\n#0 /tmp/tmp7vawm7lr.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp7vawm7lr.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7zy627t2.php:29\n\
    Stack trace:\n#0 /tmp/tmp7zy627t2.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp7zy627t2.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp317487ll.php:29\n\
    Stack trace:\n#0 /tmp/tmp317487ll.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp317487ll.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr = array_map(function($n) {\n        return strlen($n);\n    }, $arr);\n\
    \    array_multisort($arr, SORT_ASC, $arr);\n    return $arr;\n}\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpeufrfouq.php:30\n\
    Stack trace:\n#0 /tmp/tmpeufrfouq.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpeufrfouq.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr_len = count($arr);\n    for ($i = 0; $i < $arr_len; $i++) {\n  \
    \      for ($j = $i + 1; $j < $arr_len; $j++) {\n            if (strlen($arr[$i])\
    \ > strlen($arr[$j])) {\n                $temp = $arr[$i];\n                $arr[$i]\
    \ = $arr[$j];\n                $arr[$j] = $temp;\n            }\n        }\n \
    \   }\n    return $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp10wndb4h.php:36\n\
    Stack trace:\n#0 /tmp/tmp10wndb4h.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp10wndb4h.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqhl4y9fs.php:29\n\
    Stack trace:\n#0 /tmp/tmpqhl4y9fs.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpqhl4y9fs.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$arr = array_map(function($n) {\n\t\treturn strlen($n);\n\t}, $arr);\n\t\
    array_multisort($arr, SORT_DESC, $arr);\n\treturn $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpv0s88ln9.php:31\n\
    Stack trace:\n#0 /tmp/tmpv0s88ln9.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpv0s88ln9.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr = array_map('strval', $arr);\n    usort($arr, function($a, $b) {\n\
    \        return strlen($b) - strlen($a);\n    });\n    return $arr;\n}\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpv0u2bngm.php:30\n\
    Stack trace:\n#0 /tmp/tmpv0u2bngm.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpv0u2bngm.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $tmp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $tmp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9lkr04lr.php:36\n\
    Stack trace:\n#0 /tmp/tmp9lkr04lr.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp9lkr04lr.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsvonfo1d.php:36\n\
    Stack trace:\n#0 /tmp/tmpsvonfo1d.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpsvonfo1d.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpesx4vcbv.php:29\n\
    Stack trace:\n#0 /tmp/tmpesx4vcbv.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpesx4vcbv.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp81tl2xw2.php:29\n\
    Stack trace:\n#0 /tmp/tmp81tl2xw2.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp81tl2xw2.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$arr = array_filter($arr, function($v) {\n\t\treturn $v >= 1 && $v <= 9;\n\
    \t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($v)\
    \ {\n\t\tswitch ($v) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\t\
    \t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\t\
    \t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\t\
    \t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\t\
    \t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7k2z0toa.php:36\n\
    Stack trace:\n#0 /tmp/tmp7k2z0toa.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp7k2z0toa.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpv3v22m85.php:28\n\
    Stack trace:\n#0 /tmp/tmpv3v22m85.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpv3v22m85.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5b6hjsp9.php:36\n\
    Stack trace:\n#0 /tmp/tmp5b6hjsp9.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp5b6hjsp9.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr = array_map(function($n) {\n        return strlen($n);\n    }, $arr);\n\
    \    array_multisort($arr, SORT_ASC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnypbfocp.php:31\n\
    Stack trace:\n#0 /tmp/tmpnypbfocp.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpnypbfocp.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr = array_map(function($n) {\n        return strlen($n);\n    }, $arr);\n\
    \    array_multisort($arr, SORT_ASC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqs0sh3jl.php:31\n\
    Stack trace:\n#0 /tmp/tmpqs0sh3jl.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqs0sh3jl.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfzl7ns10.php:28\n\
    Stack trace:\n#0 /tmp/tmpfzl7ns10.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpfzl7ns10.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr_len = count($arr);\n    for ($i = 0; $i < $arr_len; $i++) {\n  \
    \      for ($j = $i + 1; $j < $arr_len; $j++) {\n            if (strlen($arr[$i])\
    \ > strlen($arr[$j])) {\n                $temp = $arr[$i];\n                $arr[$i]\
    \ = $arr[$j];\n                $arr[$j] = $temp;\n            }\n        }\n \
    \   }\n    return $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptfst9pfs.php:36\n\
    Stack trace:\n#0 /tmp/tmptfst9pfs.php(43): test()\n#1 {main}\n  thrown in /tmp/tmptfst9pfs.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp54fo46ow.php:29\n\
    Stack trace:\n#0 /tmp/tmp54fo46ow.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp54fo46ow.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbpkvacds.php:28\n\
    Stack trace:\n#0 /tmp/tmpbpkvacds.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpbpkvacds.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpynk5gnb_.php:36\n\
    Stack trace:\n#0 /tmp/tmpynk5gnb_.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpynk5gnb_.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr = array_map(function($a) {\n        return strlen($a);\n    }, $arr);\n\
    \    array_multisort($arr, SORT_ASC, $arr);\n    return $arr;\n}\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvh7xrdia.php:30\n\
    Stack trace:\n#0 /tmp/tmpvh7xrdia.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpvh7xrdia.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpywm0x_bz.php:29\n\
    Stack trace:\n#0 /tmp/tmpywm0x_bz.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpywm0x_bz.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr = array_map(function($n) {\n        return strlen($n);\n    }, $arr);\n\
    \    array_multisort($arr, SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp68_0tnwr.php:31\n\
    Stack trace:\n#0 /tmp/tmp68_0tnwr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp68_0tnwr.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr_length = count($arr);\n    for ($i = 0; $i < $arr_length; $i++)\
    \ {\n        for ($j = 0; $j < $arr_length - 1; $j++) {\n            if ($arr[$j]\
    \ > $arr[$j + 1]) {\n                $temp = $arr[$j];\n                $arr[$j]\
    \ = $arr[$j + 1];\n                $arr[$j + 1] = $temp;\n            }\n    \
    \    }\n    }\n    return $arr;\n}\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfx5o19fp.php:36\n\
    Stack trace:\n#0 /tmp/tmpfx5o19fp.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpfx5o19fp.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_1xp7bs7.php:29\n\
    Stack trace:\n#0 /tmp/tmp_1xp7bs7.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_1xp7bs7.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9zawzup7.php:28\n\
    Stack trace:\n#0 /tmp/tmp9zawzup7.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp9zawzup7.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr_length = count($arr);\n    for ($i = 0; $i < $arr_length; $i++)\
    \ {\n        for ($j = 0; $j < $arr_length - 1; $j++) {\n            if ($arr[$j]\
    \ > $arr[$j + 1]) {\n                $temp = $arr[$j];\n                $arr[$j]\
    \ = $arr[$j + 1];\n                $arr[$j + 1] = $temp;\n            }\n    \
    \    }\n    }\n    return $arr;\n}\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp922t2858.php:36\n\
    Stack trace:\n#0 /tmp/tmp922t2858.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp922t2858.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n  $arr = array_map(function($n) {\n    return strlen($n);\n  }, $arr);\n\
    \  array_multisort($arr, SORT_DESC, $arr);\n  return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpiv48i445.php:31\n\
    Stack trace:\n#0 /tmp/tmpiv48i445.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpiv48i445.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr = array_map(function($num) {\n        return strlen($num);\n   \
    \ }, $arr);\n    array_multisort($arr, SORT_DESC, $arr);\n    return $arr;\n}\n\
    \nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpshhei2jx.php:31\n\
    Stack trace:\n#0 /tmp/tmpshhei2jx.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpshhei2jx.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpph88i_m9.php:36\n\
    Stack trace:\n#0 /tmp/tmpph88i_m9.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpph88i_m9.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyhlmv_dd.php:28\n\
    Stack trace:\n#0 /tmp/tmpyhlmv_dd.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpyhlmv_dd.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr_len = count($arr);\n    for ($i = 0; $i < $arr_len; $i++) {\n  \
    \      for ($j = $i + 1; $j < $arr_len; $j++) {\n            if (strlen($arr[$i])\
    \ > strlen($arr[$j])) {\n                $temp = $arr[$i];\n                $arr[$i]\
    \ = $arr[$j];\n                $arr[$j] = $temp;\n            }\n        }\n \
    \   }\n    return $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpt3shdbca.php:36\n\
    Stack trace:\n#0 /tmp/tmpt3shdbca.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpt3shdbca.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwv1i8tzl.php:29\n\
    Stack trace:\n#0 /tmp/tmpwv1i8tzl.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpwv1i8tzl.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpl8wduskl.php:36\n\
    Stack trace:\n#0 /tmp/tmpl8wduskl.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpl8wduskl.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpz0qre8rt.php:36\n\
    Stack trace:\n#0 /tmp/tmpz0qre8rt.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpz0qre8rt.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpguh2m5aq.php:36\n\
    Stack trace:\n#0 /tmp/tmpguh2m5aq.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpguh2m5aq.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphcafnb7i.php:29\n\
    Stack trace:\n#0 /tmp/tmphcafnb7i.php(36): test()\n#1 {main}\n  thrown in /tmp/tmphcafnb7i.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr_len = count($arr);\n    for ($i = 0; $i < $arr_len; $i++) {\n  \
    \      for ($j = $i + 1; $j < $arr_len; $j++) {\n            if (strlen($arr[$i])\
    \ > strlen($arr[$j])) {\n                $temp = $arr[$i];\n                $arr[$i]\
    \ = $arr[$j];\n                $arr[$j] = $temp;\n            }\n        }\n \
    \   }\n    return $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0uouq0oy.php:36\n\
    Stack trace:\n#0 /tmp/tmp0uouq0oy.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp0uouq0oy.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr = array_map(function($n) {\n        return strlen($n);\n    }, $arr);\n\
    \    array_multisort($arr, SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuz1mldtd.php:30\n\
    Stack trace:\n#0 /tmp/tmpuz1mldtd.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpuz1mldtd.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplbw5fz12.php:37\n\
    Stack trace:\n#0 /tmp/tmplbw5fz12.php(44): test()\n#1 {main}\n  thrown in /tmp/tmplbw5fz12.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbcxnywhj.php:28\n\
    Stack trace:\n#0 /tmp/tmpbcxnywhj.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpbcxnywhj.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptl791mpk.php:28\n\
    Stack trace:\n#0 /tmp/tmptl791mpk.php(35): test()\n#1 {main}\n  thrown in /tmp/tmptl791mpk.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpiustg0hj.php:37\n\
    Stack trace:\n#0 /tmp/tmpiustg0hj.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpiustg0hj.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpy9vg4cas.php:29\n\
    Stack trace:\n#0 /tmp/tmpy9vg4cas.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpy9vg4cas.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr_len = count($arr);\n    for ($i = 0; $i < $arr_len; $i++) {\n  \
    \      for ($j = $i + 1; $j < $arr_len; $j++) {\n            if (strlen($arr[$i])\
    \ > strlen($arr[$j])) {\n                $temp = $arr[$i];\n                $arr[$i]\
    \ = $arr[$j];\n                $arr[$j] = $temp;\n            }\n        }\n \
    \   }\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpd1y2dlv9.php:37\n\
    Stack trace:\n#0 /tmp/tmpd1y2dlv9.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpd1y2dlv9.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6gi801om.php:28\n\
    Stack trace:\n#0 /tmp/tmp6gi801om.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp6gi801om.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjmd3by61.php:28\n\
    Stack trace:\n#0 /tmp/tmpjmd3by61.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpjmd3by61.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3tso6wak.php:29\n\
    Stack trace:\n#0 /tmp/tmp3tso6wak.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp3tso6wak.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr_length = count($arr);\n    for ($i = 0; $i < $arr_length; $i++)\
    \ {\n        for ($j = 0; $j < $arr_length - 1; $j++) {\n            if (strlen($arr[$j])\
    \ > strlen($arr[$j + 1])) {\n                $temp = $arr[$j];\n             \
    \   $arr[$j] = $arr[$j + 1];\n                $arr[$j + 1] = $temp;\n        \
    \    }\n        }\n    }\n    return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfhsowjn9.php:37\n\
    Stack trace:\n#0 /tmp/tmpfhsowjn9.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpfhsowjn9.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr = array_map('strlen', $arr);\n    array_multisort($arr, SORT_DESC,\
    \ $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpw3cnf1_0.php:29\n\
    Stack trace:\n#0 /tmp/tmpw3cnf1_0.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpw3cnf1_0.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpa8t17su_.php:29\n\
    Stack trace:\n#0 /tmp/tmpa8t17su_.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpa8t17su_.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1djfxlu1.php:29\n\
    Stack trace:\n#0 /tmp/tmp1djfxlu1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1djfxlu1.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr_length = count($arr);\n    $arr_new = [];\n    for ($i = 0; $i <\
    \ $arr_length; $i++) {\n        $arr_new[$i] = strlen($arr[$i]);\n    }\n    return\
    \ $arr_new;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6g29cc36.php:32\n\
    Stack trace:\n#0 /tmp/tmp6g29cc36.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp6g29cc36.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpj_6650ny.php:28\n\
    Stack trace:\n#0 /tmp/tmpj_6650ny.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpj_6650ny.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr_length = count($arr);\n    for ($i = 0; $i < $arr_length; $i++)\
    \ {\n        for ($j = 0; $j < $arr_length - 1; $j++) {\n            if (strlen($arr[$j])\
    \ > strlen($arr[$j + 1])) {\n                $temp = $arr[$j];\n             \
    \   $arr[$j] = $arr[$j + 1];\n                $arr[$j + 1] = $temp;\n        \
    \    }\n        }\n    }\n    return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9qs9vjgh.php:37\n\
    Stack trace:\n#0 /tmp/tmp9qs9vjgh.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp9qs9vjgh.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $result = [];\n    foreach ($arr as $key => $value) {\n        $result[$key]\
    \ = strlen($value);\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5evpyt7a.php:30\n\
    Stack trace:\n#0 /tmp/tmp5evpyt7a.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp5evpyt7a.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxj8bp2z1.php:37\n\
    Stack trace:\n#0 /tmp/tmpxj8bp2z1.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpxj8bp2z1.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $result = [];\n    $lengths = [];\n    foreach ($arr as $key => $value)\
    \ {\n        $lengths[$key] = strlen($value);\n    }\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkd8zvbtx.php:32\n\
    Stack trace:\n#0 /tmp/tmpkd8zvbtx.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpkd8zvbtx.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr_length = count($arr);\n    for ($i = 0; $i < $arr_length; $i++)\
    \ {\n        for ($j = 0; $j < $arr_length - 1; $j++) {\n            if (strlen($arr[$j])\
    \ > strlen($arr[$j + 1])) {\n                $temp = $arr[$j];\n             \
    \   $arr[$j] = $arr[$j + 1];\n                $arr[$j + 1] = $temp;\n        \
    \    }\n        }\n    }\n    return $arr;\n}\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptrpygohg.php:36\n\
    Stack trace:\n#0 /tmp/tmptrpygohg.php(43): test()\n#1 {main}\n  thrown in /tmp/tmptrpygohg.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$arr = array_map('strlen', $arr);\n\tarray_multisort($arr, SORT_DESC, $arr);\n\
    \treturn $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmgowbce0.php:28\n\
    Stack trace:\n#0 /tmp/tmpmgowbce0.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpmgowbce0.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvl2szfap.php:37\n\
    Stack trace:\n#0 /tmp/tmpvl2szfap.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpvl2szfap.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr_len = count($arr);\n    for ($i = 0; $i < $arr_len; $i++) {\n  \
    \      for ($j = $i + 1; $j < $arr_len; $j++) {\n            if (strlen($arr[$i])\
    \ > strlen($arr[$j])) {\n                $temp = $arr[$i];\n                $arr[$i]\
    \ = $arr[$j];\n                $arr[$j] = $temp;\n            }\n        }\n \
    \   }\n    return $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpho2uqqvw.php:36\n\
    Stack trace:\n#0 /tmp/tmpho2uqqvw.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpho2uqqvw.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr_len = count($arr);\n    for ($i = 0; $i < $arr_len; $i++) {\n  \
    \      for ($j = $i + 1; $j < $arr_len; $j++) {\n            if (strlen($arr[$i])\
    \ > strlen($arr[$j])) {\n                $temp = $arr[$i];\n                $arr[$i]\
    \ = $arr[$j];\n                $arr[$j] = $temp;\n            }\n        }\n \
    \   }\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvluixmlz.php:37\n\
    Stack trace:\n#0 /tmp/tmpvluixmlz.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpvluixmlz.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwk3c56ph.php:29\n\
    Stack trace:\n#0 /tmp/tmpwk3c56ph.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpwk3c56ph.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpefdulu1w.php:28\n\
    Stack trace:\n#0 /tmp/tmpefdulu1w.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpefdulu1w.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdlaznuul.php:28\n\
    Stack trace:\n#0 /tmp/tmpdlaznuul.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpdlaznuul.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_rq4h0ak.php:36\n\
    Stack trace:\n#0 /tmp/tmp_rq4h0ak.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp_rq4h0ak.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr_length = count($arr);\n    for ($i = 0; $i < $arr_length; $i++)\
    \ {\n        for ($j = 0; $j < $arr_length; $j++) {\n            if ($arr[$i]\
    \ < $arr[$j]) {\n                $temp = $arr[$i];\n                $arr[$i] =\
    \ $arr[$j];\n                $arr[$j] = $temp;\n            }\n        }\n   \
    \ }\n    return $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpiy1afaep.php:36\n\
    Stack trace:\n#0 /tmp/tmpiy1afaep.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpiy1afaep.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $arr_length = count($arr);\n    for ($i = 0; $i < $arr_length; $i++)\
    \ {\n        for ($j = 0; $j < $arr_length - 1; $j++) {\n            if (strlen($arr[$j])\
    \ > strlen($arr[$j + 1])) {\n                $temp = $arr[$j];\n             \
    \   $arr[$j] = $arr[$j + 1];\n                $arr[$j + 1] = $temp;\n        \
    \    }\n        }\n    }\n    return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpa5lvsp8i.php:37\n\
    Stack trace:\n#0 /tmp/tmpa5lvsp8i.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpa5lvsp8i.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n\t$arr = array_map('strlen', $arr);\n\tasort($arr);\n\t$arr = array_keys($arr);\n\
    \treturn $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsb9yp6ym.php:30\n\
    Stack trace:\n#0 /tmp/tmpsb9yp6ym.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpsb9yp6ym.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyvugfcgn.php:28\n\
    Stack trace:\n#0 /tmp/tmpyvugfcgn.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpyvugfcgn.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if (strlen($arr[$i]) > strlen($arr[$j]))\
    \ {\n                $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $temp;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2z4ai6s5.php:36\n\
    Stack trace:\n#0 /tmp/tmp2z4ai6s5.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp2z4ai6s5.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// ->\
    \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty,\
    \ return an empty array:\n// arr = []\n// return []\n// If the array has any strange\
    \ number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n//\
    \ -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length($arr)\
    \ {\n    $lengths = array_map('strlen', $arr);\n    array_multisort($lengths,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpt63zhe6n.php:28\n\
    Stack trace:\n#0 /tmp/tmpt63zhe6n.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpt63zhe6n.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
