name: HumanEval_132_is_nested
language: php
results:
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++)\
    \ { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count\
    \ > 0 ? true : false;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpj9n1v3v1.php:36\n\
    Stack trace:\n#0 /tmp/tmpj9n1v3v1.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpj9n1v3v1.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $arr = str_split($string);\n    $count = 0;\n    foreach($arr\
    \ as $char) {\n        if($char == '[') {\n            $count++;\n        } else\
    \ {\n            $count--;\n        }\n        if($count < 0) {\n            return\
    \ false;\n        }\n    }\n    return $count > 0 ? true : false;\n}\necho is_nested('[[]]')\
    \ . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]')\
    \ . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\n\
    echo is_nested('[[]][[') . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpr2l7hbr2.php:37\n\
    Stack trace:\n#0 /tmp/tmpr2l7hbr2.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpr2l7hbr2.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$string = str_split($string);\n\t$open = 0;\n\t$close\
    \ = 0;\n\tforeach ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\t$open++;\n\
    \t\t} else {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ false;\n\t} else {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]') . PHP_EOL;\n\
    echo is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\n\
    echo is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[')\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_pjkwyzq.php:39\n\
    Stack trace:\n#0 /tmp/tmp_pjkwyzq.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp_pjkwyzq.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$arr = str_split($string);\n\t$count = 0;\n\t$count2\
    \ = 0;\n\tforeach ($arr as $value) {\n\t\tif ($value == \"[\") {\n\t\t\t$count++;\n\
    \t\t}\n\t\tif ($value == \"]\") {\n\t\t\t$count2++;\n\t\t}\n\t}\n\tif ($count\
    \ == $count2) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\necho\
    \ is_nested('[[]]') . \"<br>\";\necho is_nested('[]]]]]]][[[[[]') . \"<br>\";\n\
    echo is_nested('[][]') . \"<br>\";\necho is_nested('[]') . \"<br>\";\necho is_nested('[[][]]')\
    \ . \"<br>\";\necho is_nested('[[]][[') . \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>1<br>
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphzhnquso.php:40\n\
    Stack trace:\n#0 /tmp/tmphzhnquso.php(56): test()\n#1 {main}\n  thrown in /tmp/tmphzhnquso.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $arr = str_split($string);\n    $count = 0;\n    for\
    \ ($i=0; $i < count($arr); $i++) { \n        if ($arr[$i] == '[') {\n        \
    \    $count++;\n        } else {\n            $count--;\n        }\n        if\
    \ ($count < 0) {\n            return false;\n        }\n    }\n    return $count\
    \ > 0 ? true : false;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpezy04zq3.php:37\n\
    Stack trace:\n#0 /tmp/tmpezy04zq3.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpezy04zq3.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t\
    $close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\
    \t\treturn true;\n\t}\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5v2dkm9v.php:38\n\
    Stack trace:\n#0 /tmp/tmp5v2dkm9v.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp5v2dkm9v.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++)\
    \ { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count\
    \ > 0 ? true : false;\n}\necho is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]')\
    \ . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\n\
    echo is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]][[\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[][]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpiim5qygl.php:36\n\
    Stack trace:\n#0 /tmp/tmpiim5qygl.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpiim5qygl.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$string = str_split($string);\n\t$count = 0;\n\tfor\
    \ ($i=0; $i < count($string); $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t\
    $count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn $count > 0 ? true : false;\n}\necho is_nested('[[]]');\n\
    echo \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');\nfunction candidate(...$args) {\n  \
    \  return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: <br><br><br><br><br>1
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmps3zo504o.php:42\n\
    Stack trace:\n#0 /tmp/tmps3zo504o.php(58): test()\n#1 {main}\n  thrown in /tmp/tmps3zo504o.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i]\
    \ == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ false;\n\t} else {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]');\necho\
    \ \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');\nfunction candidate(...$args) {\n  \
    \  return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>1
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwzofkri4.php:44\n\
    Stack trace:\n#0 /tmp/tmpwzofkri4.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpwzofkri4.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++)\
    \ { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count\
    \ > 0 ? true : false;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpykq8ti2j.php:36\n\
    Stack trace:\n#0 /tmp/tmpykq8ti2j.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpykq8ti2j.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$stack = [];\n\tfor ($i=0; $i < strlen($string); $i++)\
    \ { \n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\
    \t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else\
    \ {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\treturn count($stack) >\
    \ 0 ? false : true;\n}\necho is_nested('[[]]') ? 'true' : 'false';\necho \"\\\
    n\";\necho is_nested('[]]]]]]][[[[[]') ? 'true' : 'false';\necho \"\\n\";\necho\
    \ is_nested('[][]') ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[]') ?\
    \ 'true' : 'false';\necho \"\\n\";\necho is_nested('[[][]]') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_nested('[[]][[') ? 'true' : 'false';\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]][[\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[][]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "true\nfalse\ntrue\ntrue\ntrue\nfalse\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9r5gysig.php:45\n\
    Stack trace:\n#0 /tmp/tmp9r5gysig.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp9r5gysig.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i <\
    \ strlen($string); $i++) {\n        if ($string[$i] == '[') {\n            $open++;\n\
    \        } else {\n            $close++;\n        }\n    }\n    if ($open == $close)\
    \ {\n        return false;\n    } else {\n        return true;\n    }\n}\necho\
    \ is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\n\
    echo is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]')\
    \ . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpixs0y6yt.php:38\n\
    Stack trace:\n#0 /tmp/tmpixs0y6yt.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpixs0y6yt.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t\
    $close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\
    \t\treturn true;\n\t}\n}\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>1
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppws6wfxf.php:43\n\
    Stack trace:\n#0 /tmp/tmppws6wfxf.php(59): test()\n#1 {main}\n  thrown in /tmp/tmppws6wfxf.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$arr = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($arr as $key => $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t\
    } else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count > 0 ? false : true;\n}\necho is_nested('[[]]') . \"\
    \\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') .\
    \ \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\"\
    ;\necho is_nested('[[]][[') . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpso6b334u.php:39\n\
    Stack trace:\n#0 /tmp/tmpso6b334u.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpso6b334u.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t\
    $close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\
    \t\treturn true;\n\t}\n}\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>1
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnm1wl929.php:43\n\
    Stack trace:\n#0 /tmp/tmpnm1wl929.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpnm1wl929.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$string = str_split($string);\n\t$open = 0;\n\t$close\
    \ = 0;\n\tforeach ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\t$open++;\n\
    \t\t} else {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open > $close) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_nested('[[]]') . PHP_EOL;\n\
    echo is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\n\
    echo is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[')\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmps14_ho0h.php:39\n\
    Stack trace:\n#0 /tmp/tmps14_ho0h.php(55): test()\n#1 {main}\n  thrown in /tmp/tmps14_ho0h.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$string = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($string as $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t} elseif\
    \ ($value == ']') {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn $count > 0 ? false : true;\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";\nfunction candidate(...$args) {\n  \
    \  return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp372e4tr9.php:39\n\
    Stack trace:\n#0 /tmp/tmp372e4tr9.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp372e4tr9.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++)\
    \ { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count\
    \ > 0 ? true : false;\n}\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: <br><br><br><br><br>1
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3na24069.php:41\n\
    Stack trace:\n#0 /tmp/tmp3na24069.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp3na24069.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++)\
    \ { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count\
    \ > 0 ? true : false;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1scclbob.php:36\n\
    Stack trace:\n#0 /tmp/tmp1scclbob.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp1scclbob.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $stack = [];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\necho is_nested('[[]]')\
    \ . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]')\
    \ . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\n\
    echo is_nested('[[]][[') . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2xuw0pny.php:39\n\
    Stack trace:\n#0 /tmp/tmp2xuw0pny.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp2xuw0pny.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t\
    $close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\
    \t\treturn true;\n\t}\n}\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>1
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbi4bwgqr.php:43\n\
    Stack trace:\n#0 /tmp/tmpbi4bwgqr.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpbi4bwgqr.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$arr = str_split($string);\n\t$count = 0;\n\t$flag =\
    \ false;\n\tforeach ($arr as $key => $value) {\n\t\tif ($value == '[') {\n\t\t\
    \t$count++;\n\t\t} elseif ($value == ']') {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count\
    \ < 0) {\n\t\t\t$flag = true;\n\t\t}\n\t}\n\tif ($count == 0 && $flag == true)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_nested('[[]]');\n\
    echo is_nested('[]]]]]]][[[[[]');\necho is_nested('[][]');\necho is_nested('[]');\n\
    echo is_nested('[[][]]');\necho is_nested('[[]][[');\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpct1dmdju.php:42\n\
    Stack trace:\n#0 /tmp/tmpct1dmdju.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpct1dmdju.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$arr = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($arr as $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t} else {\n\
    \t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn $count > 0 ? true : false;\n}\necho is_nested('[[]]') . \"\\n\";\n\
    echo is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') . \"\\n\"\
    ;\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\";\necho\
    \ is_nested('[[]][[') . \"\\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpt72dfzx6.php:37\n\
    Stack trace:\n#0 /tmp/tmpt72dfzx6.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpt72dfzx6.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i <\
    \ strlen($string); $i++) {\n        if ($string[$i] == '[') {\n            $open++;\n\
    \        } else {\n            $close++;\n        }\n    }\n    if ($open == $close)\
    \ {\n        return false;\n    } else {\n        return true;\n    }\n}\necho\
    \ is_nested('[[]]') . \"<br>\";\necho is_nested('[]]]]]]][[[[[]') . \"<br>\";\n\
    echo is_nested('[][]') . \"<br>\";\necho is_nested('[]') . \"<br>\";\necho is_nested('[[][]]')\
    \ . \"<br>\";\necho is_nested('[[]][[') . \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>1<br>
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp53vbt_wz.php:38\n\
    Stack trace:\n#0 /tmp/tmp53vbt_wz.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp53vbt_wz.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t\
    $close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\
    \t\treturn true;\n\t}\n}\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>1
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_xykwt0j.php:43\n\
    Stack trace:\n#0 /tmp/tmp_xykwt0j.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp_xykwt0j.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i]\
    \ == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ false;\n\t}\n\treturn true;\n}\necho is_nested('[[]]');\necho \"<br>\";\necho\
    \ is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\necho\
    \ \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');\nfunction candidate(...$args) {\n  \
    \  return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>1
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbppkm7ll.php:43\n\
    Stack trace:\n#0 /tmp/tmpbppkm7ll.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpbppkm7ll.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$arr = str_split($string);\n\t$open = 0;\n\t$close =\
    \ 0;\n\tforeach ($arr as $value) {\n\t\tif ($value == '[') {\n\t\t\t$open++;\n\
    \t\t} else {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ false;\n\t} else {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]') . \"\\\
    n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') . \"\
    \\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\";\n\
    echo is_nested('[[]][[') . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqi88e797.php:39\n\
    Stack trace:\n#0 /tmp/tmpqi88e797.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpqi88e797.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$arr = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($arr as $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t} else {\n\
    \t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn $count > 0 ? true : false;\n}\necho is_nested('[[]]') . \"\\n\";\n\
    echo is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') . \"\\n\"\
    ;\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\";\necho\
    \ is_nested('[[]][[') . \"\\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbw2lz_xu.php:37\n\
    Stack trace:\n#0 /tmp/tmpbw2lz_xu.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpbw2lz_xu.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach\
    \ ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\
    \t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\
    \t\t\tarray_pop($stack);\n\t\t}\n\t}\n\treturn count($stack) > 0 ? false : true;\n\
    }\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\\
    n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho\
    \ is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]][[\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[][]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5ll8tasy.php:39\n\
    Stack trace:\n#0 /tmp/tmp5ll8tasy.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp5ll8tasy.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$arr = str_split($string);\n\t$count = 0;\n\t$flag =\
    \ false;\n\tforeach ($arr as $key => $value) {\n\t\tif ($value == '[') {\n\t\t\
    \t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\
    \t$flag = true;\n\t\t}\n\t}\n\tif ($count == 0 && $flag == false) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_nested('[[]]');\necho\
    \ \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');\nfunction candidate(...$args) {\n  \
    \  return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: 1<br><br>1<br>1<br>1<br>
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_n3x6_dw.php:49\n\
    Stack trace:\n#0 /tmp/tmp_n3x6_dw.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp_n3x6_dw.php\
    \ on line 49\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t\
    $close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\
    \t\treturn true;\n\t}\n}\necho is_nested('[[]]') . \"<br>\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"<br>\";\necho is_nested('[][]') . \"<br>\";\necho is_nested('[]') . \"<br>\"\
    ;\necho is_nested('[[][]]') . \"<br>\";\necho is_nested('[[]][[') . \"<br>\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>1<br>
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpc_91kpqs.php:38\n\
    Stack trace:\n#0 /tmp/tmpc_91kpqs.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpc_91kpqs.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$str = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($str as $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t} else {\n\
    \t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn true;\n}\necho is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]')\
    \ . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\n\
    echo is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]][[\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[][]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4jwlgfeo.php:39\n\
    Stack trace:\n#0 /tmp/tmp4jwlgfeo.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp4jwlgfeo.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$arr = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($arr as $key => $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t\
    } else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 1<br><br>1<br>1<br>1<br>1
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbmirbg5m.php:44\n\
    Stack trace:\n#0 /tmp/tmpbmirbg5m.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpbmirbg5m.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $brackets = str_split($string);\n    $open = 0;\n\
    \    $close = 0;\n    foreach($brackets as $bracket) {\n        if($bracket ==\
    \ '[') {\n            $open++;\n        } else {\n            $close++;\n    \
    \    }\n    }\n    if($open > $close) {\n        return true;\n    } else {\n\
    \        return false;\n    }\n}\necho is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]')\
    \ . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\n\
    echo is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]][[\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[][]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfghucocw.php:39\n\
    Stack trace:\n#0 /tmp/tmpfghucocw.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpfghucocw.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $stack = [];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";\nfunction candidate(...$args) {\n  \
    \  return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4on9vhto.php:39\n\
    Stack trace:\n#0 /tmp/tmp4on9vhto.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp4on9vhto.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i <\
    \ strlen($string); $i++) {\n        if ($string[$i] == '[') {\n            $open++;\n\
    \        } else {\n            $close++;\n        }\n    }\n    if ($open == $close)\
    \ {\n        return false;\n    } else {\n        return true;\n    }\n}\necho\
    \ is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\n\
    echo is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]')\
    \ . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp40dr_2s2.php:38\n\
    Stack trace:\n#0 /tmp/tmp40dr_2s2.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp40dr_2s2.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i]\
    \ == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ false;\n\t} else {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]');\necho\
    \ \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');\nfunction candidate(...$args) {\n  \
    \  return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>1
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuasnfm_7.php:44\n\
    Stack trace:\n#0 /tmp/tmpuasnfm_7.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpuasnfm_7.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++)\
    \ { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count\
    \ > 0 ? true : false;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpealiysra.php:36\n\
    Stack trace:\n#0 /tmp/tmpealiysra.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpealiysra.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$arr = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($arr as $key => $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t\
    } elseif ($value == ']') {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\
    \treturn false;\n\t\t}\n\t}\n\treturn $count > 0 ? false : true;\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";\nfunction candidate(...$args) {\n  \
    \  return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpe4fiq8pe.php:39\n\
    Stack trace:\n#0 /tmp/tmpe4fiq8pe.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpe4fiq8pe.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i <\
    \ strlen($string); $i++) {\n        if ($string[$i] == '[') {\n            $open++;\n\
    \        } else {\n            $close++;\n        }\n    }\n    if ($open == $close)\
    \ {\n        return false;\n    } else {\n        return true;\n    }\n}\necho\
    \ is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\n\
    echo is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]')\
    \ . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkg_vrr3b.php:38\n\
    Stack trace:\n#0 /tmp/tmpkg_vrr3b.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpkg_vrr3b.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t\
    $close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\
    \t\treturn true;\n\t}\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0a4z7u0y.php:38\n\
    Stack trace:\n#0 /tmp/tmp0a4z7u0y.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp0a4z7u0y.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i <\
    \ strlen($string); $i++) {\n        if ($string[$i] == '[') {\n            $open++;\n\
    \        } else {\n            $close++;\n        }\n    }\n    if ($open == $close)\
    \ {\n        return false;\n    } else {\n        return true;\n    }\n}\necho\
    \ is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\n\
    echo is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]')\
    \ . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_la0c8o9.php:38\n\
    Stack trace:\n#0 /tmp/tmp_la0c8o9.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp_la0c8o9.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t\
    $close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\
    \t\treturn true;\n\t}\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpq2khsbne.php:38\n\
    Stack trace:\n#0 /tmp/tmpq2khsbne.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpq2khsbne.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $count = 0;\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '[') {\n            $count++;\n        }\
    \ else {\n            $count--;\n        }\n        if ($count < 0) {\n      \
    \      return false;\n        }\n    }\n    return $count > 0 ? false : true;\n\
    }\necho is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\n\
    echo is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]')\
    \ . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpb9plt8mr.php:38\n\
    Stack trace:\n#0 /tmp/tmpb9plt8mr.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpb9plt8mr.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $string = str_split($string);\n    $count = 0;\n \
    \   foreach($string as $char) {\n        if($char == '[') {\n            $count++;\n\
    \        } else {\n            $count--;\n        }\n        if($count < 0) {\n\
    \            return false;\n        }\n    }\n    return $count > 0 ? true : false;\n\
    }\necho is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\n\
    echo is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]')\
    \ . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6khrgmai.php:37\n\
    Stack trace:\n#0 /tmp/tmp6khrgmai.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp6khrgmai.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$arr = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($arr as $key => $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t\
    } else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count == 0;\n}\necho is_nested('[[]]') ? 'true' : 'false';\n\
    echo \"<br>\";\necho is_nested('[]]]]]]][[[[[]') ? 'true' : 'false';\necho \"\
    <br>\";\necho is_nested('[][]') ? 'true' : 'false';\necho \"<br>\";\necho is_nested('[]')\
    \ ? 'true' : 'false';\necho \"<br>\";\necho is_nested('[[][]]') ? 'true' : 'false';\n\
    echo \"<br>\";\necho is_nested('[[]][[') ? 'true' : 'false';\necho \"<br>\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: true<br>false<br>true<br>true<br>true<br>false<br>
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpivqhndm0.php:45\n\
    Stack trace:\n#0 /tmp/tmpivqhndm0.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpivqhndm0.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i]\
    \ == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ false;\n\t}\n\treturn true;\n}\necho is_nested('[[]]');\necho \"<br>\";\necho\
    \ is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\necho\
    \ \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');\nfunction candidate(...$args) {\n  \
    \  return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>1
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplo0xwu76.php:43\n\
    Stack trace:\n#0 /tmp/tmplo0xwu76.php(59): test()\n#1 {main}\n  thrown in /tmp/tmplo0xwu76.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i]\
    \ == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ False;\n\t}\n\telse {\n\t\treturn True;\n\t}\n}\necho is_nested('[[]]');\necho\
    \ \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');\nfunction candidate(...$args) {\n  \
    \  return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>1
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp85pbemu_.php:45\n\
    Stack trace:\n#0 /tmp/tmp85pbemu_.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp85pbemu_.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$string = str_split($string);\n\t$open = 0;\n\t$close\
    \ = 0;\n\tforeach ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\t$open++;\n\
    \t\t} else {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ false;\n\t} else {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]');\necho\
    \ \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');\nfunction candidate(...$args) {\n  \
    \  return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>1
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn4_i_ucv.php:44\n\
    Stack trace:\n#0 /tmp/tmpn4_i_ucv.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpn4_i_ucv.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++)\
    \ { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count\
    \ > 0 ? true : false;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmobyw0fj.php:36\n\
    Stack trace:\n#0 /tmp/tmpmobyw0fj.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpmobyw0fj.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$string = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($string as $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t} elseif\
    \ ($value == ']') {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn $count > 0 ? false : true;\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";\nfunction candidate(...$args) {\n  \
    \  return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9p534867.php:39\n\
    Stack trace:\n#0 /tmp/tmp9p534867.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp9p534867.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t\
    $close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\
    \t\treturn true;\n\t}\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxlcrj0lx.php:38\n\
    Stack trace:\n#0 /tmp/tmpxlcrj0lx.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpxlcrj0lx.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $stack = [];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n\necho is_nested('[[]]')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[]]]]]]][[[[[]') ? 'true'\
    \ : 'false';\necho \"\\n\";\necho is_nested('[][]') ? 'true' : 'false';\necho\
    \ \"\\n\";\necho is_nested('[]') ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[[][]]')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[[]][[') ? 'true' : 'false';\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "true\nfalse\ntrue\ntrue\ntrue\nfalse\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpun6fsz8j.php:46\n\
    Stack trace:\n#0 /tmp/tmpun6fsz8j.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpun6fsz8j.php\
    \ on line 46\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$array = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($array as $key => $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t\
    }\n\t\tif ($value == ']') {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\tif ($count == 0) {\n\t\treturn true;\n\t}\n\t\
    return false;\n}\necho is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]')\
    \ . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\n\
    echo is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]][[\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[][]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp84gpl11w.php:43\n\
    Stack trace:\n#0 /tmp/tmp84gpl11w.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp84gpl11w.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$string = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($string as $value) {\n\t\tif ($value == \"[\") {\n\t\t\t$count++;\n\t\t} else\
    \ {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\treturn $count > 0 ? true : false;\n}\necho is_nested('[[]]');\necho\
    \ \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');\nfunction candidate(...$args) {\n  \
    \  return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: <br><br><br><br><br>1
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptgw2922f.php:42\n\
    Stack trace:\n#0 /tmp/tmptgw2922f.php(58): test()\n#1 {main}\n  thrown in /tmp/tmptgw2922f.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++)\
    \ { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t} elseif ($string[$i]\
    \ == ']') {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count == 0;\n}\necho is_nested('[[]]') . \"\\n\";\necho\
    \ is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') . \"\\n\";\n\
    echo is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[')\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpksrfsm0g.php:38\n\
    Stack trace:\n#0 /tmp/tmpksrfsm0g.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpksrfsm0g.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $stack = [];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";\nfunction candidate(...$args) {\n  \
    \  return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcle0p_re.php:39\n\
    Stack trace:\n#0 /tmp/tmpcle0p_re.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpcle0p_re.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t\
    $close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\
    \t\treturn true;\n\t}\n}\necho is_nested('[[]]') . \"<br>\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"<br>\";\necho is_nested('[][]') . \"<br>\";\necho is_nested('[]') . \"<br>\"\
    ;\necho is_nested('[[][]]') . \"<br>\";\necho is_nested('[[]][[') . \"<br>\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>1<br>
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpx0ib33yc.php:38\n\
    Stack trace:\n#0 /tmp/tmpx0ib33yc.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpx0ib33yc.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $string = str_split($string);\n    $count = 0;\n \
    \   foreach($string as $char) {\n        if($char == '[') {\n            $count++;\n\
    \        } else {\n            $count--;\n        }\n        if($count < 0) {\n\
    \            return false;\n        }\n    }\n    return $count > 0 ? true : false;\n\
    }\necho is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\n\
    echo is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]')\
    \ . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8_yuhv1_.php:37\n\
    Stack trace:\n#0 /tmp/tmp8_yuhv1_.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp8_yuhv1_.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$string = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\t$count++;\n\t\t} elseif\
    \ ($char == ']') {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn $count > 0 ? false : true;\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";\nfunction candidate(...$args) {\n  \
    \  return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpa7na12v1.php:39\n\
    Stack trace:\n#0 /tmp/tmpa7na12v1.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpa7na12v1.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$string = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($string as $key => $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\
    \t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count == 0;\n}\necho is_nested('[[]]') . PHP_EOL;\necho\
    \ is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\n\
    echo is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[')\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp78edzas4.php:39\n\
    Stack trace:\n#0 /tmp/tmp78edzas4.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp78edzas4.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $stack = [];\n    $open = ['[', '{', '('];\n    $close\
    \ = [']', '}', ')'];\n    for ($i = 0; $i < strlen($string); $i++) {\n       \
    \ if (in_array($string[$i], $open)) {\n            array_push($stack, $string[$i]);\n\
    \        } else if (in_array($string[$i], $close)) {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            }\n            $last = array_pop($stack);\n\
    \            if ($open[array_search($string[$i], $close)] != $last) {\n      \
    \          return false;\n            }\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptudf_4m6.php:43\n\
    Stack trace:\n#0 /tmp/tmptudf_4m6.php(57): test()\n#1 {main}\n  thrown in /tmp/tmptudf_4m6.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t\
    $close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\
    \t\treturn true;\n\t}\n}\necho is_nested('[[]]') . \"<br>\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"<br>\";\necho is_nested('[][]') . \"<br>\";\necho is_nested('[]') . \"<br>\"\
    ;\necho is_nested('[[][]]') . \"<br>\";\necho is_nested('[[]][[') . \"<br>\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>1<br>
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgdvs84_1.php:38\n\
    Stack trace:\n#0 /tmp/tmpgdvs84_1.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpgdvs84_1.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i]\
    \ == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ false;\n\t}\n\treturn true;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2r9s2o84.php:38\n\
    Stack trace:\n#0 /tmp/tmp2r9s2o84.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp2r9s2o84.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++)\
    \ { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t} elseif ($string[$i]\
    \ == ']') {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count == 0;\n}\necho is_nested('[[]]') . \"\\n\";\necho\
    \ is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') . \"\\n\";\n\
    echo is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[')\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpawl2pabl.php:38\n\
    Stack trace:\n#0 /tmp/tmpawl2pabl.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpawl2pabl.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$arr = str_split($string);\n\t$open = 0;\n\t$close =\
    \ 0;\n\tforeach ($arr as $key => $value) {\n\t\tif ($value == '[') {\n\t\t\t$open++;\n\
    \t\t} elseif ($value == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close)\
    \ {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]');\n\
    echo \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');\nfunction candidate(...$args) {\n  \
    \  return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>1
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7e8xjj_t.php:44\n\
    Stack trace:\n#0 /tmp/tmp7e8xjj_t.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp7e8xjj_t.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $string = str_split($string);\n    $stack = [];\n\
    \    foreach ($string as $char) {\n        if ($char == '[') {\n            array_push($stack,\
    \ $char);\n        } else {\n            if (count($stack) > 0) {\n          \
    \      array_pop($stack);\n            } else {\n                return false;\n\
    \            }\n        }\n    }\n    return count($stack) > 0 ? true : false;\n\
    }\necho is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\n\
    echo is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]')\
    \ . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpj_45l29j.php:38\n\
    Stack trace:\n#0 /tmp/tmpj_45l29j.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpj_45l29j.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$arr = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($arr as $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t} else {\n\
    \t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn $count > 0 ? true : false;\n}\necho is_nested('[[]]');\necho \"<br>\"\
    ;\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');\nfunction candidate(...$args) {\n  \
    \  return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: <br><br><br><br><br>1
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpng5tz51x.php:42\n\
    Stack trace:\n#0 /tmp/tmpng5tz51x.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpng5tz51x.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t} elseif ($string[$i]\
    \ == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ false;\n\t} else {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]');\necho\
    \ \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');\nfunction candidate(...$args) {\n  \
    \  return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>1
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3p9mcvu5.php:43\n\
    Stack trace:\n#0 /tmp/tmp3p9mcvu5.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp3p9mcvu5.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$arr = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($arr as $key => $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t\
    } else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count > 0 ? false : true;\n}\necho is_nested('[[]]') . PHP_EOL;\n\
    echo is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\n\
    echo is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[')\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8ggz_4wn.php:39\n\
    Stack trace:\n#0 /tmp/tmp8ggz_4wn.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp8ggz_4wn.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++)\
    \ { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count\
    \ > 0 ? true : false;\n}\necho is_nested('[[]]') . \"<br>\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"<br>\";\necho is_nested('[][]') . \"<br>\";\necho is_nested('[]') . \"<br>\"\
    ;\necho is_nested('[[][]]') . \"<br>\";\necho is_nested('[[]][[') . \"<br>\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: <br><br><br><br><br>1<br>
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmph5s4szpr.php:36\n\
    Stack trace:\n#0 /tmp/tmph5s4szpr.php(52): test()\n#1 {main}\n  thrown in /tmp/tmph5s4szpr.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == \"[\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\
    \t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else\
    \ {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]') . \"<br>\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"<br>\";\necho is_nested('[][]') . \"<br>\";\necho is_nested('[]') . \"<br>\"\
    ;\necho is_nested('[[][]]') . \"<br>\";\necho is_nested('[[]][[') . \"<br>\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>1<br>
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2dkzpiht.php:38\n\
    Stack trace:\n#0 /tmp/tmp2dkzpiht.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp2dkzpiht.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i <\
    \ strlen($string); $i++) {\n        if ($string[$i] == '[') {\n            $open++;\n\
    \        } else {\n            $close++;\n        }\n    }\n    if ($open == $close)\
    \ {\n        return false;\n    } else {\n        return true;\n    }\n}\necho\
    \ is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\n\
    echo is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]')\
    \ . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfsdkhtad.php:38\n\
    Stack trace:\n#0 /tmp/tmpfsdkhtad.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpfsdkhtad.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $arr = str_split($string);\n    $count = 0;\n    foreach($arr\
    \ as $char) {\n        if($char == '[') {\n            $count++;\n        } else\
    \ {\n            $count--;\n        }\n        if($count < 0) {\n            return\
    \ false;\n        }\n    }\n    return $count > 0 ? true : false;\n}\necho is_nested('[[]]')\
    \ . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]')\
    \ . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\n\
    echo is_nested('[[]][[') . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvqrwbk73.php:37\n\
    Stack trace:\n#0 /tmp/tmpvqrwbk73.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpvqrwbk73.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$stack = [];\n\tfor ($i=0; $i < strlen($string); $i++)\
    \ { \n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\
    \t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else\
    \ {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\treturn count($stack) ==\
    \ 0;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') .\
    \ \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8fcvalow.php:39\n\
    Stack trace:\n#0 /tmp/tmp8fcvalow.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp8fcvalow.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++)\
    \ { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count\
    \ > 0 ? true : false;\n}\necho is_nested('[[]]');\necho is_nested('[]]]]]]][[[[[]');\n\
    echo is_nested('[][]');\necho is_nested('[]');\necho is_nested('[[][]]');\necho\
    \ is_nested('[[]][[');\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpe3mi0qz8.php:36\n\
    Stack trace:\n#0 /tmp/tmpe3mi0qz8.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpe3mi0qz8.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$arr = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($arr as $key => $value) {\n\t\tif($value == '[') {\n\t\t\t$count++;\n\t\t}\
    \ else {\n\t\t\t$count--;\n\t\t}\n\t\tif($count < 0) {\n\t\t\treturn false;\n\t\
    \t}\n\t}\n\treturn true;\n}\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 1<br><br>1<br>1<br>1<br>1
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5v5dkbpx.php:44\n\
    Stack trace:\n#0 /tmp/tmp5v5dkbpx.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp5v5dkbpx.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $string = str_split($string);\n    $stack = [];\n\
    \    foreach ($string as $char) {\n        if ($char == '[') {\n            array_push($stack,\
    \ $char);\n        } else {\n            if (count($stack) > 0) {\n          \
    \      array_pop($stack);\n            } else {\n                return false;\n\
    \            }\n        }\n    }\n    return count($stack) > 0 ? true : false;\n\
    }\necho is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\n\
    echo is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]')\
    \ . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvwlgp1kw.php:38\n\
    Stack trace:\n#0 /tmp/tmpvwlgp1kw.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpvwlgp1kw.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++)\
    \ { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count\
    \ > 0 ? true : false;\n}\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: <br><br><br><br><br>1
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpza76iyn5.php:41\n\
    Stack trace:\n#0 /tmp/tmpza76iyn5.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpza76iyn5.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$brackets = str_split($string);\n\t$open = 0;\n\t$close\
    \ = 0;\n\tforeach ($brackets as $bracket) {\n\t\tif ($bracket == '[') {\n\t\t\t\
    $open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\
    \t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]');\n\
    echo \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');\nfunction candidate(...$args) {\n  \
    \  return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>1
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1hpfby3u.php:44\n\
    Stack trace:\n#0 /tmp/tmp1hpfby3u.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp1hpfby3u.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$string = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\t$count++;\n\t\t} else {\n\
    \t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn $count > 0;\n}\necho is_nested('[[]]');\necho is_nested('[]]]]]]][[[[[]');\n\
    echo is_nested('[][]');\necho is_nested('[]');\necho is_nested('[[][]]');\necho\
    \ is_nested('[[]][[');\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9u3ypj41.php:37\n\
    Stack trace:\n#0 /tmp/tmp9u3ypj41.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp9u3ypj41.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t\
    $close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\
    \t\treturn true;\n\t}\n}\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>1
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprvbkx4pr.php:43\n\
    Stack trace:\n#0 /tmp/tmprvbkx4pr.php(59): test()\n#1 {main}\n  thrown in /tmp/tmprvbkx4pr.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++)\
    \ { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count\
    \ > 0 ? true : false;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyzozwioh.php:36\n\
    Stack trace:\n#0 /tmp/tmpyzozwioh.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpyzozwioh.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i]\
    \ == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ false;\n\t}\n\treturn true;\n}\necho is_nested('[[]]');\necho \"\\n\";\necho\
    \ is_nested('[]]]]]]][[[[[]');\necho \"\\n\";\necho is_nested('[][]');\necho \"\
    \\n\";\necho is_nested('[]');\necho \"\\n\";\necho is_nested('[[][]]');\necho\
    \ \"\\n\";\necho is_nested('[[]][[');\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsngf2288.php:44\n\
    Stack trace:\n#0 /tmp/tmpsngf2288.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpsngf2288.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$stack = [];\n\t$len = strlen($string);\n\tfor ($i =\
    \ 0; $i < $len; $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack,\
    \ $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t\tarray_pop($stack);\n\t\t}\n\t}\n\treturn count($stack)\
    \ == 0;\n}\necho is_nested('[[]]');\necho is_nested('[]]]]]]][[[[[]');\necho is_nested('[][]');\n\
    echo is_nested('[]');\necho is_nested('[[][]]');\necho is_nested('[[]][[');\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1111'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgxnrkf_i.php:39\n\
    Stack trace:\n#0 /tmp/tmpgxnrkf_i.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpgxnrkf_i.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t\
    $close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\
    \t\treturn true;\n\t}\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnk5l6fv1.php:38\n\
    Stack trace:\n#0 /tmp/tmpnk5l6fv1.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpnk5l6fv1.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $count = 0;\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '[') {\n            $count++;\n        }\
    \ else {\n            $count--;\n        }\n        if ($count < 0) {\n      \
    \      return false;\n        }\n    }\n    return $count > 0 ? true : false;\n\
    }\necho is_nested('[[]]') ? 'true' : 'false';\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]')\
    \ ? 'true' : 'false';\necho \"<br>\";\necho is_nested('[][]') ? 'true' : 'false';\n\
    echo \"<br>\";\necho is_nested('[]') ? 'true' : 'false';\necho \"<br>\";\necho\
    \ is_nested('[[][]]') ? 'true' : 'false';\necho \"<br>\";\necho is_nested('[[]][[')\
    \ ? 'true' : 'false';\necho \"<br>\";\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: false<br>false<br>false<br>false<br>false<br>true<br>
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcvfs3uqc.php:42\n\
    Stack trace:\n#0 /tmp/tmpcvfs3uqc.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpcvfs3uqc.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i]\
    \ == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ false;\n\t}\n\treturn true;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9gk4ia4_.php:38\n\
    Stack trace:\n#0 /tmp/tmp9gk4ia4_.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp9gk4ia4_.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t\
    $close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\
    \t\treturn true;\n\t}\n}\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>1
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpifjvbc7x.php:43\n\
    Stack trace:\n#0 /tmp/tmpifjvbc7x.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpifjvbc7x.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$brackets = str_split($string);\n\t$stack = [];\n\t\
    foreach ($brackets as $bracket) {\n\t\tif ($bracket == '[') {\n\t\t\tarray_push($stack,\
    \ $bracket);\n\t\t} else {\n\t\t\tif (count($stack) > 0) {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn count($stack)\
    \ == 0;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzgqxz3xj.php:40\n\
    Stack trace:\n#0 /tmp/tmpzgqxz3xj.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpzgqxz3xj.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$string = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($string as $key => $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\
    \t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count > 0 ? false : true;\n}\necho is_nested('[[]]') . \"\
    \\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') .\
    \ \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\"\
    ;\necho is_nested('[[]][[') . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9y6vitan.php:39\n\
    Stack trace:\n#0 /tmp/tmp9y6vitan.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp9y6vitan.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$stack = [];\n\tfor ($i=0; $i < strlen($string); $i++)\
    \ { \n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\
    \t} elseif ($string[$i] == ']') {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn\
    \ false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\t\
    return count($stack) == 0;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqb1o922t.php:39\n\
    Stack trace:\n#0 /tmp/tmpqb1o922t.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpqb1o922t.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$arr = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($arr as $key => $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t\
    } else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count > 0 ? false : true;\n}\necho is_nested('[[]]') . PHP_EOL;\n\
    echo is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\n\
    echo is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[')\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpy7bjrr6u.php:39\n\
    Stack trace:\n#0 /tmp/tmpy7bjrr6u.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpy7bjrr6u.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$arr = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($arr as $key => $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t\
    } else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpp84hqdaj.php:39\n\
    Stack trace:\n#0 /tmp/tmpp84hqdaj.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpp84hqdaj.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $count = 0;\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '[') {\n            $count++;\n        }\
    \ else {\n            $count--;\n        }\n        if ($count < 0) {\n      \
    \      return false;\n        }\n    }\n    return $count > 0 ? false : true;\n\
    }\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\\
    n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho\
    \ is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]][[\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[][]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphg90mzox.php:38\n\
    Stack trace:\n#0 /tmp/tmphg90mzox.php(52): test()\n#1 {main}\n  thrown in /tmp/tmphg90mzox.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$arr = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($arr as $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t} else {\n\
    \t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn $count > 0 ? true : false;\n}\necho is_nested('[[]]');\necho \"<br>\"\
    ;\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');\nfunction candidate(...$args) {\n  \
    \  return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: <br><br><br><br><br>1
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmgb8iag3.php:42\n\
    Stack trace:\n#0 /tmp/tmpmgb8iag3.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpmgb8iag3.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$string = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($string as $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t} else\
    \ {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\treturn $count > 0 ? true : false;\n}\necho is_nested('[[]]') . PHP_EOL;\n\
    echo is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\n\
    echo is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[')\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfhyzk5rz.php:37\n\
    Stack trace:\n#0 /tmp/tmpfhyzk5rz.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpfhyzk5rz.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i]\
    \ == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ False;\n\t}\n\treturn True;\n}\necho is_nested('[[]]');\necho \"<br>\";\necho\
    \ is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\necho\
    \ \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');\nfunction candidate(...$args) {\n  \
    \  return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>1
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_gjmohxr.php:43\n\
    Stack trace:\n#0 /tmp/tmp_gjmohxr.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp_gjmohxr.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\t$open_arr = [];\n\t$close_arr\
    \ = [];\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i] == '[')\
    \ {\n\t\t\t$open++;\n\t\t\t$open_arr[] = $i;\n\t\t}\n\t\tif ($string[$i] == ']')\
    \ {\n\t\t\t$close++;\n\t\t\t$close_arr[] = $i;\n\t\t}\n\t}\n\tif ($open == $close)\
    \ {\n\t\treturn false;\n\t}\n\tif ($open > $close) {\n\t\t$diff = $open - $close;\n\
    \t\t$open_arr = array_slice($open_arr, -$diff);\n\t\t$close_arr = array_slice($close_arr,\
    \ 0, $diff);\n\t\t$result = array_intersect($open_arr, $close_arr);\n\t\tif (count($result)\
    \ > 0) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    if ($open < $close) {\n\t\t$diff = $close - $open;\n\t\t$open_arr = array_slice($open_arr,\
    \ 0, $diff);\n\t\t$close_arr = array_slice($close_arr, -$diff);\n\t\t$result =\
    \ array_intersect($open_arr, $close_arr);\n\t\tif (count($result) > 0) {\n\t\t\
    \treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";\nfunction candidate(...$args) {\n  \
    \  return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2am7vr8s.php:63\n\
    Stack trace:\n#0 /tmp/tmp2am7vr8s.php(79): test()\n#1 {main}\n  thrown in /tmp/tmp2am7vr8s.php\
    \ on line 63\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$string = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($string as $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t} elseif\
    \ ($value == ']') {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn ($count > 0) ? false : true;\n}\necho is_nested('[[]]')\
    \ . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]')\
    \ . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\n\
    echo is_nested('[[]][[') . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp73ouar3m.php:39\n\
    Stack trace:\n#0 /tmp/tmp73ouar3m.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp73ouar3m.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$brackets = str_split($string);\n\t$open = 0;\n\t$close\
    \ = 0;\n\tforeach ($brackets as $bracket) {\n\t\tif ($bracket == '[') {\n\t\t\t\
    $open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\
    \t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]');\n\
    echo is_nested('[]]]]]]][[[[[]');\necho is_nested('[][]');\necho is_nested('[]');\n\
    echo is_nested('[[][]]');\necho is_nested('[[]][[');\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: '11'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3nodjx1x.php:39\n\
    Stack trace:\n#0 /tmp/tmp3nodjx1x.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp3nodjx1x.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $string = str_split($string);\n    $stack = [];\n\
    \    foreach ($string as $char) {\n        if ($char == '[') {\n            array_push($stack,\
    \ $char);\n        } else {\n            if (count($stack) > 0) {\n          \
    \      array_pop($stack);\n            } else {\n                return false;\n\
    \            }\n        }\n    }\n    return count($stack) == 0;\n}\necho is_nested('[[]]')\
    \ . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]')\
    \ . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\n\
    echo is_nested('[[]][[') . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp38te8wgg.php:40\n\
    Stack trace:\n#0 /tmp/tmp38te8wgg.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp38te8wgg.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t\
    $close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\
    \t\treturn true;\n\t}\n}\necho is_nested('[[]]') . \"<br>\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"<br>\";\necho is_nested('[][]') . \"<br>\";\necho is_nested('[]') . \"<br>\"\
    ;\necho is_nested('[[][]]') . \"<br>\";\necho is_nested('[[]][[') . \"<br>\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>1<br>
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphq__a0c7.php:38\n\
    Stack trace:\n#0 /tmp/tmphq__a0c7.php(54): test()\n#1 {main}\n  thrown in /tmp/tmphq__a0c7.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$arr = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($arr as $key => $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t\
    }\n\t\tif ($value == ']') {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\tif ($count == 0) {\n\t\treturn true;\n\t}\n\t\
    return false;\n}\necho is_nested('[[]]');\necho '<br>';\necho is_nested('[]]]]]]][[[[[]');\n\
    echo '<br>';\necho is_nested('[][]');\necho '<br>';\necho is_nested('[]');\necho\
    \ '<br>';\necho is_nested('[[][]]');\necho '<br>';\necho is_nested('[[]][[');\n\
    echo '<br>';\necho is_nested('[[[]]]');\necho '<br>';\necho is_nestedn\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected string content \"[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[...\"\
    \ in /tmp/tmpruk5tm6u.php on line 44\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $stack = [];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) > 0) {\n                array_pop($stack);\n\
    \            } else {\n                return false;\n            }\n        }\n\
    \    }\n    return count($stack) == 0;\n}\necho is_nested('[[]]') . PHP_EOL;\n\
    echo is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\n\
    echo is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[')\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnzjxxr85.php:39\n\
    Stack trace:\n#0 /tmp/tmpnzjxxr85.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpnzjxxr85.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$string = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($string as $key => $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\
    \t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpx2wf91ax.php:39\n\
    Stack trace:\n#0 /tmp/tmpx2wf91ax.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpx2wf91ax.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $stack = [];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) > 0) {\n                array_pop($stack);\n\
    \            } else {\n                return false;\n            }\n        }\n\
    \    }\n    return count($stack) == 0;\n}\necho is_nested('[[]]') . \"\\n\";\n\
    echo is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') . \"\\n\"\
    ;\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\";\necho\
    \ is_nested('[[]][[') . \"\\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcoqyql81.php:39\n\
    Stack trace:\n#0 /tmp/tmpcoqyql81.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpcoqyql81.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$arr = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($arr as $key => $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t\
    } else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count > 0 ? false : true;\n}\necho is_nested('[[]]') . \"\
    \\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') .\
    \ \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\"\
    ;\necho is_nested('[[]][[') . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuxik4t3q.php:39\n\
    Stack trace:\n#0 /tmp/tmpuxik4t3q.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpuxik4t3q.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $string = str_split($string);\n    $count = 0;\n \
    \   foreach($string as $char) {\n        if($char == '[') {\n            $count++;\n\
    \        } else {\n            $count--;\n        }\n        if($count < 0) {\n\
    \            return false;\n        }\n    }\n    return $count > 0 ? true : false;\n\
    }\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\\
    n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho\
    \ is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]][[\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[][]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp03xngw7s.php:37\n\
    Stack trace:\n#0 /tmp/tmp03xngw7s.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp03xngw7s.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif($string[$i] == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t\
    $close++;\n\t\t}\n\t}\n\tif($open == $close) {\n\t\treturn false;\n\t} else {\n\
    \t\treturn true;\n\t}\n}\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>1
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpixcv5os5.php:43\n\
    Stack trace:\n#0 /tmp/tmpixcv5os5.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpixcv5os5.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $string = str_split($string);\n    $stack = [];\n\
    \    foreach ($string as $char) {\n        if ($char == '[') {\n            array_push($stack,\
    \ $char);\n        } else {\n            if (count($stack) == 0) {\n         \
    \       return false;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    return count($stack) == 0;\n}\necho is_nested('[[]]')\
    \ . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]')\
    \ . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\n\
    echo is_nested('[[]][[') . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbwtx3kxh.php:40\n\
    Stack trace:\n#0 /tmp/tmpbwtx3kxh.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpbwtx3kxh.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$arr = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($arr as $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t} else {\n\
    \t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn $count > 0 ? true : false;\n}\necho is_nested('[[]]') . \"\\n\";\n\
    echo is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') . \"\\n\"\
    ;\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\";\necho\
    \ is_nested('[[]][[') . \"\\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvm7sir_d.php:37\n\
    Stack trace:\n#0 /tmp/tmpvm7sir_d.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpvm7sir_d.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i]\
    \ == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ false;\n\t}\n\treturn true;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp18zwv8i8.php:38\n\
    Stack trace:\n#0 /tmp/tmp18zwv8i8.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp18zwv8i8.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $string = str_split($string);\n    $stack = [];\n\
    \    foreach ($string as $char) {\n        if ($char == '[') {\n            array_push($stack,\
    \ $char);\n        } elseif ($char == ']') {\n            if (count($stack) ==\
    \ 0) {\n                return false;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    return count($stack) == 0;\n}\necho is_nested('[[]]')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[]]]]]]][[[[[]') ? 'true'\
    \ : 'false';\necho \"\\n\";\necho is_nested('[][]') ? 'true' : 'false';\necho\
    \ \"\\n\";\necho is_nested('[]') ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[[][]]')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[[]][[') ? 'true' : 'false';\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "true\nfalse\ntrue\ntrue\ntrue\nfalse\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp78__8mwb.php:46\n\
    Stack trace:\n#0 /tmp/tmp78__8mwb.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp78__8mwb.php\
    \ on line 46\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$arr = str_split($string);\n\t$count = 0;\n\t$result\
    \ = false;\n\tforeach ($arr as $key => $value) {\n\t\tif ($value == '[') {\n\t\
    \t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\
    \t\t$result = true;\n\t\t}\n\t}\n\treturn $result;\n}\necho is_nested('[[]]');\n\
    echo \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');\nfunction candidate(...$args) {\n  \
    \  return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmposiy9i1h.php:43\n\
    Stack trace:\n#0 /tmp/tmposiy9i1h.php(59): test()\n#1 {main}\n  thrown in /tmp/tmposiy9i1h.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i]\
    \ == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ false;\n\t}\n\telse {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]');\necho\
    \ \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');\nfunction candidate(...$args) {\n  \
    \  return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>1
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphqkqbmcb.php:45\n\
    Stack trace:\n#0 /tmp/tmphqkqbmcb.php(61): test()\n#1 {main}\n  thrown in /tmp/tmphqkqbmcb.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++)\
    \ { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count\
    \ > 0 ? true : false;\n}\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: <br><br><br><br><br>1
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcqptplpb.php:41\n\
    Stack trace:\n#0 /tmp/tmpcqptplpb.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpcqptplpb.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\t$nested = 0;\n\t$length\
    \ = strlen($string);\n\tfor ($i=0; $i < $length; $i++) { \n\t\tif ($string[$i]\
    \ === '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t}\n\t\tif ($open\
    \ < $close) {\n\t\t\t$nested++;\n\t\t}\n\t}\n\tif ($nested > 0) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_nested('[[]]');\necho\
    \ \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');\nfunction candidate(...$args) {\n  \
    \  return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6_wjebkm.php:48\n\
    Stack trace:\n#0 /tmp/tmp6_wjebkm.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp6_wjebkm.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $arr = str_split($string);\n    $count = 0;\n    for\
    \ ($i=0; $i < count($arr); $i++) { \n        if ($arr[$i] == '[') {\n        \
    \    $count++;\n        } else {\n            $count--;\n        }\n        if\
    \ ($count < 0) {\n            return false;\n        }\n    }\n    return $count\
    \ > 0 ? true : false;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsia35iwy.php:37\n\
    Stack trace:\n#0 /tmp/tmpsia35iwy.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpsia35iwy.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i]\
    \ == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ false;\n\t}\n\treturn true;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_jdpdp9z.php:38\n\
    Stack trace:\n#0 /tmp/tmp_jdpdp9z.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp_jdpdp9z.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t\
    $close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\
    \t\treturn true;\n\t}\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2on99f78.php:38\n\
    Stack trace:\n#0 /tmp/tmp2on99f78.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp2on99f78.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $string = str_split($string);\n    $stack = [];\n\
    \    foreach ($string as $char) {\n        if ($char == '[') {\n            array_push($stack,\
    \ $char);\n        } else {\n            if (count($stack) > 0) {\n          \
    \      array_pop($stack);\n            } else {\n                return false;\n\
    \            }\n        }\n    }\n    return count($stack) > 0 ? true : false;\n\
    }\necho is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\n\
    echo is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]')\
    \ . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptduge_tq.php:38\n\
    Stack trace:\n#0 /tmp/tmptduge_tq.php(54): test()\n#1 {main}\n  thrown in /tmp/tmptduge_tq.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$stack = [];\n\t$len = strlen($string);\n\tfor ($i =\
    \ 0; $i < $len; $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack,\
    \ $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t\tarray_pop($stack);\n\t\t}\n\t}\n\treturn count($stack)\
    \ == 0;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwyz6mstl.php:39\n\
    Stack trace:\n#0 /tmp/tmpwyz6mstl.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpwyz6mstl.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$brackets = str_split($string);\n\t$stack = [];\n\t\
    $is_nested = false;\n\tforeach ($brackets as $bracket) {\n\t\tif ($bracket ==\
    \ '[') {\n\t\t\tarray_push($stack, $bracket);\n\t\t} else {\n\t\t\tif (count($stack)\
    \ > 0) {\n\t\t\t\tarray_pop($stack);\n\t\t\t\t$is_nested = true;\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn $is_nested;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n1\n1\n1\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpga7x3g3w.php:39\n\
    Stack trace:\n#0 /tmp/tmpga7x3g3w.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpga7x3g3w.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$string = str_split($string);\n\t$open = 0;\n\t$close\
    \ = 0;\n\tforeach ($string as $value) {\n\t\tif ($value == '[') {\n\t\t\t$open++;\n\
    \t\t}\n\t\tif ($value == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close)\
    \ {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]');\n\
    echo \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');\nfunction candidate(...$args) {\n  \
    \  return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>1
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjybrfsqh.php:45\n\
    Stack trace:\n#0 /tmp/tmpjybrfsqh.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpjybrfsqh.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$arr = str_split($string);\n\t$open = 0;\n\t$close =\
    \ 0;\n\tforeach ($arr as $key => $value) {\n\t\tif ($value == '[') {\n\t\t\t$open++;\n\
    \t\t} else {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ false;\n\t} else {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]') . PHP_EOL;\n\
    echo is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\n\
    echo is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[')\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8i_4bhjt.php:39\n\
    Stack trace:\n#0 /tmp/tmp8i_4bhjt.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp8i_4bhjt.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$arr = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($arr as $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t} else {\n\
    \t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn $count > 0 ? true : false;\n}\necho is_nested('[[]]') . \"\\n\";\n\
    echo is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') . \"\\n\"\
    ;\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\";\necho\
    \ is_nested('[[]][[') . \"\\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphp44a1ve.php:37\n\
    Stack trace:\n#0 /tmp/tmphp44a1ve.php(53): test()\n#1 {main}\n  thrown in /tmp/tmphp44a1ve.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++)\
    \ { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count\
    \ > 0 ? true : false;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkgtp3gqk.php:36\n\
    Stack trace:\n#0 /tmp/tmpkgtp3gqk.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpkgtp3gqk.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t\
    $close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\
    \t\treturn true;\n\t}\n}\necho is_nested('[[]]') . \"<br>\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"<br>\";\necho is_nested('[][]') . \"<br>\";\necho is_nested('[]') . \"<br>\"\
    ;\necho is_nested('[[][]]') . \"<br>\";\necho is_nested('[[]][[') . \"<br>\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>1<br>
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdre_vbww.php:38\n\
    Stack trace:\n#0 /tmp/tmpdre_vbww.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpdre_vbww.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i]\
    \ == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ false;\n\t}\n\treturn true;\n}\necho is_nested('[[]]') . \"<br>\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"<br>\";\necho is_nested('[][]') . \"<br>\";\necho is_nested('[]') . \"<br>\"\
    ;\necho is_nested('[[][]]') . \"<br>\";\necho is_nested('[[]][[') . \"<br>\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>1<br>
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvg3eq1pk.php:38\n\
    Stack trace:\n#0 /tmp/tmpvg3eq1pk.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpvg3eq1pk.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $arr = str_split($string);\n    $count = 0;\n    foreach($arr\
    \ as $char) {\n        if($char == '[') {\n            $count++;\n        } else\
    \ {\n            $count--;\n        }\n        if($count < 0) {\n            return\
    \ false;\n        }\n    }\n    return $count > 0 ? true : false;\n}\necho is_nested('[[]]');\n\
    echo is_nested('[]]]]]]][[[[[]');\necho is_nested('[][]');\necho is_nested('[]');\n\
    echo is_nested('[[][]]');\necho is_nested('[[]][[');\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpght03sbz.php:37\n\
    Stack trace:\n#0 /tmp/tmpght03sbz.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpght03sbz.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$arr = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($arr as $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t} else {\n\
    \t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn $count > 0 ? true : false;\n}\necho is_nested('[[]]') . PHP_EOL;\n\
    echo is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\n\
    echo is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[')\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0clog3zs.php:37\n\
    Stack trace:\n#0 /tmp/tmp0clog3zs.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp0clog3zs.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $arr = str_split($string);\n    $count = 0;\n    foreach($arr\
    \ as $value) {\n        if($value == '[') {\n            $count++;\n        }\
    \ else {\n            $count--;\n        }\n        if($count < 0) {\n       \
    \     return false;\n        }\n    }\n    return $count > 0 ? true : false;\n\
    }\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\\
    n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho\
    \ is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]][[\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[][]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpykuc3hh9.php:37\n\
    Stack trace:\n#0 /tmp/tmpykuc3hh9.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpykuc3hh9.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach\
    \ ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\
    \t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\
    \t\t\tarray_pop($stack);\n\t\t}\n\t}\n\treturn count($stack) == 0;\n}\necho is_nested('[[]]')\
    \ . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]')\
    \ . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\n\
    echo is_nested('[[]][[') . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwcjd9n97.php:39\n\
    Stack trace:\n#0 /tmp/tmpwcjd9n97.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpwcjd9n97.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$arr = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($arr as $key => $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t\
    } else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count > 0 ? false : true;\n}\necho is_nested('[[]]') . \"\
    \\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') .\
    \ \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\"\
    ;\necho is_nested('[[]][[') . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9okqvm_2.php:39\n\
    Stack trace:\n#0 /tmp/tmp9okqvm_2.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp9okqvm_2.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++)\
    \ { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count\
    \ > 0 ? true : false;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpda3iwsxo.php:36\n\
    Stack trace:\n#0 /tmp/tmpda3iwsxo.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpda3iwsxo.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i <\
    \ strlen($string); $i++) {\n        if ($string[$i] == '[') {\n            $open++;\n\
    \        } else {\n            $close++;\n        }\n    }\n    if ($open == $close)\
    \ {\n        return false;\n    } else {\n        return true;\n    }\n}\necho\
    \ is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\n\
    echo is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]')\
    \ . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzipfvkiv.php:38\n\
    Stack trace:\n#0 /tmp/tmpzipfvkiv.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpzipfvkiv.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$arr = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($arr as $key => $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t\
    } else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpa0cdkmw2.php:39\n\
    Stack trace:\n#0 /tmp/tmpa0cdkmw2.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpa0cdkmw2.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++)\
    \ { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count\
    \ > 0 ? true : false;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpt9h3nmp4.php:36\n\
    Stack trace:\n#0 /tmp/tmpt9h3nmp4.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpt9h3nmp4.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$string = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($string as $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t} elseif\
    \ ($value == ']') {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn $count > 0 ? false : true;\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";\nfunction candidate(...$args) {\n  \
    \  return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4ku92udc.php:39\n\
    Stack trace:\n#0 /tmp/tmp4ku92udc.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp4ku92udc.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i <\
    \ strlen($string); $i++) {\n        if ($string[$i] == '[') {\n            $open++;\n\
    \        } else {\n            $close++;\n        }\n    }\n    if ($open > $close)\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\necho\
    \ is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho\
    \ \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: <br><br><br><br><br>1
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp539sh4ee.php:43\n\
    Stack trace:\n#0 /tmp/tmp539sh4ee.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp539sh4ee.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t} elseif ($string[$i]\
    \ == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ false;\n\t} else {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]') . \"\\\
    n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') . \"\
    \\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\";\n\
    echo is_nested('[[]][[') . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmps_2bcwg4.php:38\n\
    Stack trace:\n#0 /tmp/tmps_2bcwg4.php(54): test()\n#1 {main}\n  thrown in /tmp/tmps_2bcwg4.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$stack = [];\n\tfor ($i=0; $i < strlen($string); $i++)\
    \ { \n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\
    \t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else\
    \ {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\treturn count($stack) ==\
    \ 0;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') .\
    \ \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpue__379_.php:39\n\
    Stack trace:\n#0 /tmp/tmpue__379_.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpue__379_.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i <\
    \ strlen($string); $i++) {\n        if ($string[$i] == '[') {\n            $open++;\n\
    \        } else if ($string[$i] == ']') {\n            $close++;\n        }\n\
    \    }\n    if ($open == $close) {\n        return false;\n    } else {\n    \
    \    return true;\n    }\n}\necho is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]')\
    \ . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\n\
    echo is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]][[\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[][]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppyy7mimy.php:38\n\
    Stack trace:\n#0 /tmp/tmppyy7mimy.php(54): test()\n#1 {main}\n  thrown in /tmp/tmppyy7mimy.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $arr = str_split($string);\n    $count = 0;\n    foreach($arr\
    \ as $char) {\n        if($char == '[') {\n            $count++;\n        } else\
    \ {\n            $count--;\n        }\n        if($count < 0) {\n            return\
    \ false;\n        }\n    }\n    return $count > 0 ? true : false;\n}\necho is_nested('[[]]')\
    \ . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]')\
    \ . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\n\
    echo is_nested('[[]][[') . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxe9ma_69.php:37\n\
    Stack trace:\n#0 /tmp/tmpxe9ma_69.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpxe9ma_69.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $string = str_split($string);\n    $count = 0;\n \
    \   foreach($string as $char) {\n        if($char == '[') {\n            $count++;\n\
    \        } else {\n            $count--;\n        }\n        if($count < 0) {\n\
    \            return false;\n        }\n    }\n    return $count > 0 ? true : false;\n\
    }\necho is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\n\
    echo is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]')\
    \ . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2d0vts01.php:37\n\
    Stack trace:\n#0 /tmp/tmp2d0vts01.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp2d0vts01.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$brackets = str_split($string);\n\t$open = 0;\n\t$close\
    \ = 0;\n\tforeach ($brackets as $bracket) {\n\t\tif ($bracket == '[') {\n\t\t\t\
    $open++;\n\t\t} elseif ($bracket == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif\
    \ ($open > $close) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\
    echo is_nested('[[]]');\necho '<br>';\necho is_nested('[]]]]]]][[[[[]');\necho\
    \ '<br>';\necho is_nested('[][]');\necho '<br>';\necho is_nested('[]');\necho\
    \ '<br>';\necho is_nested('[[][]]');\necho '<br>';\necho is_nested('[[]][[');\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: <br><br><br><br><br>1
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpj82hzg6p.php:44\n\
    Stack trace:\n#0 /tmp/tmpj82hzg6p.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpj82hzg6p.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $string = str_split($string);\n    $count = 0;\n \
    \   foreach($string as $char) {\n        if($char == '[') {\n            $count++;\n\
    \        } else {\n            $count--;\n        }\n        if($count < 0) {\n\
    \            return false;\n        }\n    }\n    return $count > 0 ? true : false;\n\
    }\necho is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\n\
    echo is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]')\
    \ . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0pz2j9q8.php:37\n\
    Stack trace:\n#0 /tmp/tmp0pz2j9q8.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp0pz2j9q8.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach\
    \ ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\
    \t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\
    \t\t\tarray_pop($stack);\n\t\t}\n\t}\n\treturn count($stack) > 0 ? false : true;\n\
    }\necho is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\n\
    echo is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]')\
    \ . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpabr0sdjx.php:39\n\
    Stack trace:\n#0 /tmp/tmpabr0sdjx.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpabr0sdjx.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$stack = [];\n\tfor ($i=0; $i < strlen($string); $i++)\
    \ { \n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\
    \t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else\
    \ {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\treturn count($stack) ==\
    \ 0;\n}\necho is_nested('[[]]') ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[][]') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_nested('[]') ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[[][]]')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[[]][[') ? 'true' : 'false';\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "true\nfalse\ntrue\ntrue\ntrue\nfalse\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpu39dtfmp.php:45\n\
    Stack trace:\n#0 /tmp/tmpu39dtfmp.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpu39dtfmp.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach\
    \ ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\
    \t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\
    \t\t\tarray_pop($stack);\n\t\t}\n\t}\n\treturn count($stack) > 0 ? false : true;\n\
    }\necho is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\n\
    echo is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]')\
    \ . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpl9aqbb38.php:39\n\
    Stack trace:\n#0 /tmp/tmpl9aqbb38.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpl9aqbb38.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $stack = [];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\necho is_nested('[[]]')\
    \ ? 'true' : 'false';\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]') ? 'true'\
    \ : 'false';\necho \"<br>\";\necho is_nested('[][]') ? 'true' : 'false';\necho\
    \ \"<br>\";\necho is_nested('[]') ? 'true' : 'false';\necho \"<br>\";\necho is_nested('[[][]]')\
    \ ? 'true' : 'false';\necho \"<br>\";\necho is_nested('[[]][[') ? 'true' : 'false';\n\
    echo \"<br>\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: true<br>false<br>true<br>true<br>true<br>false<br>
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmesh9mwl.php:45\n\
    Stack trace:\n#0 /tmp/tmpmesh9mwl.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpmesh9mwl.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t\
    $close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\
    \t\treturn true;\n\t}\n}\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>1
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplgp6oz3e.php:43\n\
    Stack trace:\n#0 /tmp/tmplgp6oz3e.php(59): test()\n#1 {main}\n  thrown in /tmp/tmplgp6oz3e.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++)\
    \ { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count\
    \ > 0 ? true : false;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2fzsztd_.php:36\n\
    Stack trace:\n#0 /tmp/tmp2fzsztd_.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp2fzsztd_.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$brackets = str_split($string);\n\t$open = 0;\n\t$close\
    \ = 0;\n\tforeach ($brackets as $bracket) {\n\t\tif ($bracket == '[') {\n\t\t\t\
    $open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\
    \t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]')\
    \ . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]')\
    \ . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\n\
    echo is_nested('[[]][[') . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsy_drwse.php:39\n\
    Stack trace:\n#0 /tmp/tmpsy_drwse.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpsy_drwse.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $arr = str_split($string);\n    $open = 0;\n    $close\
    \ = 0;\n    foreach($arr as $char) {\n        if($char == \"[\") {\n         \
    \   $open++;\n        }\n        if($char == \"]\") {\n            $close++;\n\
    \        }\n    }\n    if($open == $close) {\n        return false;\n    }\n \
    \   return true;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbi5svpo_.php:39\n\
    Stack trace:\n#0 /tmp/tmpbi5svpo_.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpbi5svpo_.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$string = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\t$count++;\n\t\t} elseif\
    \ ($char == ']') {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn $count > 0 ? false : true;\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";\nfunction candidate(...$args) {\n  \
    \  return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpof45ih_m.php:39\n\
    Stack trace:\n#0 /tmp/tmpof45ih_m.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpof45ih_m.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $arr = str_split($string);\n    $count = 0;\n    foreach($arr\
    \ as $char) {\n        if($char == '[') {\n            $count++;\n        } else\
    \ {\n            $count--;\n        }\n        if($count < 0) {\n            return\
    \ false;\n        }\n    }\n    return $count > 0 ? true : false;\n}\necho is_nested('[[]]')\
    \ . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]')\
    \ . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\n\
    echo is_nested('[[]][[') . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpoqmozhxp.php:37\n\
    Stack trace:\n#0 /tmp/tmpoqmozhxp.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpoqmozhxp.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++)\
    \ { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count\
    \ > 0 ? true : false;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfuj9zux2.php:36\n\
    Stack trace:\n#0 /tmp/tmpfuj9zux2.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpfuj9zux2.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$string = str_split($string);\n\t$left = 0;\n\t$right\
    \ = 0;\n\tforeach ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\t$left++;\n\
    \t\t} elseif ($char == ']') {\n\t\t\t$right++;\n\t\t}\n\t}\n\tif ($left == $right)\
    \ {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]')\
    \ . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]')\
    \ . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\n\
    echo is_nested('[[]][[') . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpda1pbqhb.php:39\n\
    Stack trace:\n#0 /tmp/tmpda1pbqhb.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpda1pbqhb.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $stack = [];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";\nfunction candidate(...$args) {\n  \
    \  return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_xxpsz05.php:39\n\
    Stack trace:\n#0 /tmp/tmp_xxpsz05.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp_xxpsz05.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$string = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\t$count++;\n\t\t} elseif\
    \ ($char == ']') {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn $count > 0 ? false : true;\n}\necho is_nested('[[]]')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[]]]]]]][[[[[]') ? 'true'\
    \ : 'false';\necho \"\\n\";\necho is_nested('[][]') ? 'true' : 'false';\necho\
    \ \"\\n\";\necho is_nested('[]') ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[[][]]')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[[]][[') ? 'true' : 'false';\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "true\nfalse\ntrue\ntrue\ntrue\nfalse\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmph9lj4rbr.php:45\n\
    Stack trace:\n#0 /tmp/tmph9lj4rbr.php(59): test()\n#1 {main}\n  thrown in /tmp/tmph9lj4rbr.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++)\
    \ { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count\
    \ > 0 ? true : false;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpy4cv72qj.php:36\n\
    Stack trace:\n#0 /tmp/tmpy4cv72qj.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpy4cv72qj.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i]\
    \ == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ false;\n\t} else {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]') . \"\\\
    n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') . \"\
    \\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\";\n\
    echo is_nested('[[]][[') . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpe0w83izy.php:39\n\
    Stack trace:\n#0 /tmp/tmpe0w83izy.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpe0w83izy.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++)\
    \ { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t} elseif ($string[$i]\
    \ == ']') {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count == 0;\n}\necho is_nested('[[]]') . \"\\n\";\necho\
    \ is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') . \"\\n\";\n\
    echo is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[')\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpts8rc4mc.php:38\n\
    Stack trace:\n#0 /tmp/tmpts8rc4mc.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpts8rc4mc.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$arr = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($arr as $key => $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t\
    } else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count > 0 ? false : true;\n}\necho is_nested('[[]]') . \"\
    \\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') .\
    \ \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\"\
    ;\necho is_nested('[[]][[') . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvaeamrj9.php:39\n\
    Stack trace:\n#0 /tmp/tmpvaeamrj9.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpvaeamrj9.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$string = str_split($string);\n\t$open = 0;\n\t$close\
    \ = 0;\n\tforeach ($string as $value) {\n\t\tif ($value == '[') {\n\t\t\t$open++;\n\
    \t\t} else {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ false;\n\t} else {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]');\necho\
    \ \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');\nfunction candidate(...$args) {\n  \
    \  return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>1
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgv2v04ke.php:44\n\
    Stack trace:\n#0 /tmp/tmpgv2v04ke.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpgv2v04ke.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++)\
    \ { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count\
    \ > 0 ? true : false;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpe_u9b3ku.php:36\n\
    Stack trace:\n#0 /tmp/tmpe_u9b3ku.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpe_u9b3ku.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $arr = str_split($string);\n    $count = 0;\n    for\
    \ ($i=0; $i < count($arr); $i++) { \n        if ($arr[$i] == '[') {\n        \
    \    $count++;\n        } else {\n            $count--;\n        }\n        if\
    \ ($count < 0) {\n            return false;\n        }\n    }\n    return $count\
    \ > 0 ? true : false;\n}\necho is_nested('[[]]') ? 'true' : 'false';\necho \"\\\
    n\";\necho is_nested('[]]]]]]][[[[[]') ? 'true' : 'false';\necho \"\\n\";\necho\
    \ is_nested('[][]') ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[]') ?\
    \ 'true' : 'false';\necho \"\\n\";\necho is_nested('[[][]]') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_nested('[[]][[') ? 'true' : 'false';\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]][[\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[][]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "false\nfalse\nfalse\nfalse\nfalse\ntrue\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4v0ww2b1.php:43\n\
    Stack trace:\n#0 /tmp/tmp4v0ww2b1.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp4v0ww2b1.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $brackets = str_split($string);\n    $open = 0;\n\
    \    $close = 0;\n    foreach($brackets as $bracket) {\n        if($bracket ==\
    \ '[') {\n            $open++;\n        } else {\n            $close++;\n    \
    \    }\n    }\n    if($open == $close) {\n        return false;\n    } else {\n\
    \        return true;\n    }\n}\necho is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]')\
    \ . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\n\
    echo is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]][[\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[][]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpk8134b6r.php:39\n\
    Stack trace:\n#0 /tmp/tmpk8134b6r.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpk8134b6r.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i]\
    \ == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ false;\n\t} else {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]');\necho\
    \ \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');\nfunction candidate(...$args) {\n  \
    \  return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>1
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuu1_bd5_.php:44\n\
    Stack trace:\n#0 /tmp/tmpuu1_bd5_.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpuu1_bd5_.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i]\
    \ == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ false;\n\t} else {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]');\necho\
    \ \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');\nfunction candidate(...$args) {\n  \
    \  return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>1
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfxzbenc5.php:44\n\
    Stack trace:\n#0 /tmp/tmpfxzbenc5.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpfxzbenc5.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$string = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($string as $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t} elseif\
    \ ($value == ']') {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn $count > 0 ? false : true;\n}\necho is_nested('[[]]');\n\
    echo is_nested('[]]]]]]][[[[[]');\necho is_nested('[][]');\necho is_nested('[]');\n\
    echo is_nested('[[][]]');\necho is_nested('[[]][[');\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: '1111'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpaal1493k.php:39\n\
    Stack trace:\n#0 /tmp/tmpaal1493k.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpaal1493k.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$string = str_split($string);\n\t$open = 0;\n\t$close\
    \ = 0;\n\t$nested = 0;\n\tforeach ($string as $value) {\n\t\tif ($value == '[')\
    \ {\n\t\t\t$open++;\n\t\t} elseif ($value == ']') {\n\t\t\t$close++;\n\t\t}\n\t\
    \tif ($open > $close) {\n\t\t\t$nested++;\n\t\t}\n\t}\n\tif ($nested > 0) {\n\t\
    \treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";\nfunction candidate(...$args) {\n  \
    \  return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n1\n1\n1\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpysp3nfhn.php:44\n\
    Stack trace:\n#0 /tmp/tmpysp3nfhn.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpysp3nfhn.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$string = str_split($string);\n\t$brackets = [];\n\t\
    foreach ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\tarray_push($brackets,\
    \ $char);\n\t\t} elseif ($char == ']') {\n\t\t\tif (count($brackets) == 0) {\n\
    \t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($brackets);\n\t\t\t}\n\
    \t\t}\n\t}\n\treturn count($brackets) == 0;\n}\necho is_nested('[[]]') ? 'True'\
    \ : 'False';\necho \"\\n\";\necho is_nested('[]]]]]]][[[[[]') ? 'True' : 'False';\n\
    echo \"\\n\";\necho is_nested('[][]') ? 'True' : 'False';\necho \"\\n\";\necho\
    \ is_nested('[]') ? 'True' : 'False';\necho \"\\n\";\necho is_nested('[[][]]')\
    \ ? 'True' : 'False';\necho \"\\n\";\necho is_nested('[[]][[') ? 'True' : 'False';\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "True\nFalse\nTrue\nTrue\nTrue\nFalse\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpt15mj4y1.php:46\n\
    Stack trace:\n#0 /tmp/tmpt15mj4y1.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpt15mj4y1.php\
    \ on line 46\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i <\
    \ strlen($string); $i++) {\n        if ($string[$i] == '[') {\n            $open++;\n\
    \        } else {\n            $close++;\n        }\n    }\n    if ($open == $close)\
    \ {\n        return false;\n    } else {\n        return true;\n    }\n}\necho\
    \ is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\n\
    echo is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]')\
    \ . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpknva6_cw.php:38\n\
    Stack trace:\n#0 /tmp/tmpknva6_cw.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpknva6_cw.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $count = 0;\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '[') {\n            $count++;\n        }\
    \ else if ($string[$i] == ']') {\n            $count--;\n        }\n        if\
    \ ($count < 0) {\n            return false;\n        }\n    }\n    return $count\
    \ > 0 ? false : true;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpb3rkb20q.php:38\n\
    Stack trace:\n#0 /tmp/tmpb3rkb20q.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpb3rkb20q.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++)\
    \ { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t}\n\t\tif ($string[$i]\
    \ == ']') {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count > 0 ? false : true;\n}\necho is_nested('[[]]');\n\
    echo \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');\nfunction candidate(...$args) {\n  \
    \  return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: 1<br><br>1<br>1<br>1<br>
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpi173wuqn.php:44\n\
    Stack trace:\n#0 /tmp/tmpi173wuqn.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpi173wuqn.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t} elseif ($string[$i]\
    \ == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ false;\n\t} else {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]') . \"<br>\"\
    ;\necho is_nested('[]]]]]]][[[[[]') . \"<br>\";\necho is_nested('[][]') . \"<br>\"\
    ;\necho is_nested('[]') . \"<br>\";\necho is_nested('[[][]]') . \"<br>\";\necho\
    \ is_nested('[[]][[') . \"<br>\";\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>1<br>
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpibqhj66c.php:38\n\
    Stack trace:\n#0 /tmp/tmpibqhj66c.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpibqhj66c.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t\
    $close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\
    \t\treturn true;\n\t}\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9586dhuq.php:38\n\
    Stack trace:\n#0 /tmp/tmp9586dhuq.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp9586dhuq.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++)\
    \ { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count\
    \ > 0 ? true : false;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpienyigd3.php:36\n\
    Stack trace:\n#0 /tmp/tmpienyigd3.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpienyigd3.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $stack = [];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\necho is_nested('[[]]')\
    \ . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]')\
    \ . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\n\
    echo is_nested('[[]][[') . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplzx2h2ro.php:39\n\
    Stack trace:\n#0 /tmp/tmplzx2h2ro.php(53): test()\n#1 {main}\n  thrown in /tmp/tmplzx2h2ro.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i]\
    \ == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ false;\n\t}\n\treturn true;\n}\necho is_nested('[[]]');\necho \"<br>\";\necho\
    \ is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\necho\
    \ \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');\nfunction candidate(...$args) {\n  \
    \  return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>1
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpp79d9ky1.php:43\n\
    Stack trace:\n#0 /tmp/tmpp79d9ky1.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpp79d9ky1.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $arr = str_split($string);\n    $open = 0;\n    $close\
    \ = 0;\n    foreach($arr as $value) {\n        if($value == '[') {\n         \
    \   $open++;\n        } else {\n            $close++;\n        }\n    }\n    if($open\
    \ > $close) {\n        return true;\n    } else {\n        return false;\n   \
    \ }\n}\necho is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') .\
    \ PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\n\
    echo is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]][[\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[][]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_2skbb9s.php:39\n\
    Stack trace:\n#0 /tmp/tmp_2skbb9s.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp_2skbb9s.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++)\
    \ { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t}\n\t\tif ($string[$i]\
    \ == ']') {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count == 0;\n}\necho is_nested('[[]]') . \"\\n\";\necho\
    \ is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') . \"\\n\";\n\
    echo is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[')\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp858plmn8.php:39\n\
    Stack trace:\n#0 /tmp/tmp858plmn8.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp858plmn8.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$arr = str_split($string);\n\t$count = 0;\n\t$count2\
    \ = 0;\n\tforeach ($arr as $key => $value) {\n\t\tif ($value == '[') {\n\t\t\t\
    $count++;\n\t\t}\n\t\tif ($value == ']') {\n\t\t\t$count2++;\n\t\t}\n\t}\n\tif\
    \ ($count == $count2) {\n\t\treturn false;\n\t}\n\treturn true;\n}\necho is_nested('[[]]');\n\
    echo \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');\nfunction candidate(...$args) {\n  \
    \  return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>1
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdi3tuywt.php:44\n\
    Stack trace:\n#0 /tmp/tmpdi3tuywt.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpdi3tuywt.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$count = 0;\n\t$arr = str_split($string);\n\tforeach\
    \ ($arr as $key => $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t\
    } else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count > 0 ? false : true;\n}\necho is_nested('[[]]');\n\
    echo \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');\nfunction candidate(...$args) {\n  \
    \  return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: 1<br><br>1<br>1<br>1<br>
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpc4tte80o.php:44\n\
    Stack trace:\n#0 /tmp/tmpc4tte80o.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpc4tte80o.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$string = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($string as $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t}\n\t\t\
    if ($value == ']') {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn $count == 0;\n}\necho is_nested('[[]]') . \"\\\
    n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') . \"\
    \\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\";\n\
    echo is_nested('[[]][[') . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcd11_fhw.php:40\n\
    Stack trace:\n#0 /tmp/tmpcd11_fhw.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpcd11_fhw.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $stack = [];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        $char = $string[$i];\n        if ($char == '[') {\n       \
    \     array_push($stack, $char);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            }\n            array_pop($stack);\n\
    \        }\n    }\n    return count($stack) > 0;\n}\necho is_nested('[[]]') ?\
    \ 'true' : 'false';\necho \"\\n\";\necho is_nested('[]]]]]]][[[[[]') ? 'true'\
    \ : 'false';\necho \"\\n\";\necho is_nested('[][]') ? 'true' : 'false';\necho\
    \ \"\\n\";\necho is_nested('[]') ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[[][]]')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[[]][[') ? 'true' : 'false';\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "false\nfalse\nfalse\nfalse\nfalse\ntrue\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpii0t0j6a.php:43\n\
    Stack trace:\n#0 /tmp/tmpii0t0j6a.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpii0t0j6a.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++)\
    \ { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count\
    \ > 0 ? true : false;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4rwq0u8w.php:36\n\
    Stack trace:\n#0 /tmp/tmp4rwq0u8w.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp4rwq0u8w.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $string = str_split($string);\n    $count = 0;\n \
    \   foreach($string as $char) {\n        if($char == '[') {\n            $count++;\n\
    \        } else {\n            $count--;\n        }\n        if($count < 0) {\n\
    \            return false;\n        }\n    }\n    return $count > 0 ? true : false;\n\
    }\necho is_nested('[[]]');\necho is_nested('[]]]]]]][[[[[]');\necho is_nested('[][]');\n\
    echo is_nested('[]');\necho is_nested('[[][]]');\necho is_nested('[[]][[');\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxpr0bxfp.php:37\n\
    Stack trace:\n#0 /tmp/tmpxpr0bxfp.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpxpr0bxfp.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t} elseif ($string[$i]\
    \ == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ false;\n\t} else {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]');\necho\
    \ \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');\nfunction candidate(...$args) {\n  \
    \  return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>1
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpb793rtlh.php:43\n\
    Stack trace:\n#0 /tmp/tmpb793rtlh.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpb793rtlh.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i <\
    \ strlen($string); $i++) {\n        if ($string[$i] == '[') {\n            $open++;\n\
    \        } else {\n            $close++;\n        }\n    }\n    if ($open == $close)\
    \ {\n        return false;\n    } else {\n        return true;\n    }\n}\necho\
    \ is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\n\
    echo is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]')\
    \ . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpud_3eno9.php:38\n\
    Stack trace:\n#0 /tmp/tmpud_3eno9.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpud_3eno9.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $arr = str_split($string);\n    $count = 0;\n    foreach($arr\
    \ as $char) {\n        if($char == '[') {\n            $count++;\n        } else\
    \ {\n            $count--;\n        }\n        if($count < 0) {\n            return\
    \ false;\n        }\n    }\n    return $count > 0 ? true : false;\n}\necho is_nested('[[]]')\
    \ . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]')\
    \ . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\n\
    echo is_nested('[[]][[') . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmjhdee5n.php:37\n\
    Stack trace:\n#0 /tmp/tmpmjhdee5n.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpmjhdee5n.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t\
    $close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\
    \t\treturn true;\n\t}\n}\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: <br>1<br><br><br><br>1
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpelbd3f6o.php:43\n\
    Stack trace:\n#0 /tmp/tmpelbd3f6o.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpelbd3f6o.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$arr = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($arr as $key => $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t\
    } else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count == 0;\n}\necho is_nested('[[]]') . \"\\n\";\necho\
    \ is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') . \"\\n\";\n\
    echo is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[')\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7ficurmw.php:39\n\
    Stack trace:\n#0 /tmp/tmp7ficurmw.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp7ficurmw.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$left = 0;\n\t$right = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$left++;\n\t\t} else {\n\t\t\t\
    $right++;\n\t\t}\n\t}\n\tif ($left == $right) {\n\t\treturn false;\n\t} else {\n\
    \t\treturn true;\n\t}\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n\n\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwzru3wl4.php:38\n\
    Stack trace:\n#0 /tmp/tmpwzru3wl4.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpwzru3wl4.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n    $nested = false;\n    $count = 0;\n    for ($i = 0;\
    \ $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n         \
    \   $count++;\n        } else {\n            $count--;\n        }\n        if\
    \ ($count < 0) {\n            $nested = true;\n        }\n    }\n    return $nested;\n\
    }\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\\
    n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho\
    \ is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]][[\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[][]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n1\n\n\n\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmped9cblus.php:37\n\
    Stack trace:\n#0 /tmp/tmped9cblus.php(53): test()\n#1 {main}\n  thrown in /tmp/tmped9cblus.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$arr = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($arr as $key => $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t\
    } else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplqkhs_05.php:39\n\
    Stack trace:\n#0 /tmp/tmplqkhs_05.php(53): test()\n#1 {main}\n  thrown in /tmp/tmplqkhs_05.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a string as input which contains\
    \ only square brackets.\n// The function should return True if and only if there\
    \ is a valid subsequence of brackets \n// where at least one bracket in the subsequence\
    \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested($string) {\n\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++)\
    \ { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t} elseif ($string[$i]\
    \ == ']') {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count > 0 ? false : true;\n}\necho is_nested('[[]]') . \"\
    <br>\";\necho is_nested('[]]]]]]][[[[[]') . \"<br>\";\necho is_nested('[][]')\
    \ . \"<br>\";\necho is_nested('[]') . \"<br>\";\necho is_nested('[[][]]') . \"\
    <br>\";\necho is_nested('[[]][[') . \"<br>\";\nfunction candidate(...$args) {\n\
    \    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: 1<br><br>1<br>1<br>1<br><br>
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcco4zzwb.php:38\n\
    Stack trace:\n#0 /tmp/tmpcco4zzwb.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpcco4zzwb.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
