name: HumanEval_142_sum_squares
language: php
results:
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n  $sum = 0;\n  for\
    \ ($i = 0; $i < count($lst); $i++) {\n    if ($i % 3 == 0) {\n      $sum += pow($lst[$i],\
    \ 2);\n    } else if ($i % 4 == 0 && $i % 3 != 0) {\n      $sum += pow($lst[$i],\
    \ 3);\n    } else {\n      $sum += $lst[$i];\n    }\n  }\n  return $sum;\n}\n\n\
    function candidate(...$args) {\n    return sum_squares(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 9)) !== 14) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 1, 1, 1, 1, 1, 1)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-56, -99, 1, 0, -2)) !== 3030) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, 17, -1,\
    \ -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n  $sum = 0;\n  for\
    \ ($i = 0; $i < count($lst); $i++) {\n    if ($i % 3 == 0) {\n      $sum += pow($lst[$i],\
    \ 2);\n    } else if ($i % 4 == 0 && $i % 3 != 0) {\n      $sum += pow($lst[$i],\
    \ 3);\n    } else {\n      $sum += $lst[$i];\n    }\n  }\n  return $sum;\n}\n\n\
    function candidate(...$args) {\n    return sum_squares(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 9)) !== 14) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 1, 1, 1, 1, 1, 1)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-56, -99, 1, 0, -2)) !== 3030) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, 17, -1,\
    \ -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n\t$sum = 0;\n\tforeach\
    \ ($lst as $key => $value) {\n\t\tif ($key % 3 == 0) {\n\t\t\t$sum += pow($value,\
    \ 2);\n\t\t} else if ($key % 4 == 0 && $key % 3 != 0) {\n\t\t\t$sum += pow($value,\
    \ 3);\n\t\t} else {\n\t\t\t$sum += $value;\n\t\t}\n\t}\n\treturn $sum;\n}\n\n\
    function candidate(...$args) {\n    return sum_squares(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 9)) !== 14) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 1, 1, 1, 1, 1, 1)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-56, -99, 1, 0, -2)) !== 3030) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, 17, -1,\
    \ -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n  $sum = 0;\n  foreach\
    \ ($lst as $key => $value) {\n    if ($key % 3 == 0) {\n      $sum += $value *\
    \ $value;\n    } else if ($key % 4 == 0) {\n      $sum += $value * $value * $value;\n\
    \    } else {\n      $sum += $value;\n    }\n  }\n  return $sum;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sum_squares(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 4, 9)) !== 14) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 1, 1, 1, 1, 1, 1)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-56, -99, 1, 0, -2)) !== 3030) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, 17, -1,\
    \ -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  $i = 0;\n    foreach ($lst as $value) {\n        if ($i % 3 == 0) {\n     \
    \       $sum += $value * $value;\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += $value * $value * $value;\n        } else {\n            $sum +=\
    \ $value;\n        }\n        $i++;\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  foreach ($lst as $key => $value) {\n        if ($key % 3 == 0 && $key % 4 ==\
    \ 0) {\n            $sum += $value ** 3;\n        } elseif ($key % 3 == 0) {\n\
    \            $sum += $value ** 2;\n        } else {\n            $sum += $value;\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1mdjmk3k.php:33\n\
    Stack trace:\n#0 /tmp/tmp1mdjmk3k.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp1mdjmk3k.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  foreach ($lst as $key => $value) {\n        if ($key % 3 == 0) {\n        \
    \    $sum += $value * $value;\n        } else if ($key % 4 == 0 && $key % 3 !=\
    \ 0) {\n            $sum += $value * $value * $value;\n        } else {\n    \
    \        $sum += $value;\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n\t$sum = 0;\n\tforeach\
    \ ($lst as $key => $value) {\n\t\tif ($key % 3 == 0) {\n\t\t\t$sum += $value *\
    \ $value;\n\t\t} else if ($key % 4 == 0) {\n\t\t\t$sum += $value * $value * $value;\n\
    \t\t} else {\n\t\t\t$sum += $value;\n\t\t}\n\t}\n\treturn $sum;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sum_squares(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 4, 9)) !== 14) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 1, 1, 1, 1, 1, 1)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-56, -99, 1, 0, -2)) !== 3030) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, 17, -1,\
    \ -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n\t$sum = 0;\n\tfor\
    \ ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum += $lst[$i]\
    \ * $lst[$i];\n\t\t} else if ($i % 4 == 0) {\n\t\t\t$sum += $lst[$i] * $lst[$i]\
    \ * $lst[$i];\n\t\t} else {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n\
    }\n\nfunction candidate(...$args) {\n    return sum_squares(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4, 9)) !== 14) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-56, -99, 1, 0,\
    \ -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26,\
    \ 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10))\
    \ !== -1448) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n$lst = [1,2,3];\n\
    echo sum_squares($lst);\necho \"\\n\";\n$lst = [];\necho sum_squares($lst);\n\
    echo \"\\n\";\n$lst = [-1,-5,2,-1,-5];\necho sum_squares($lst);\necho \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return sum_squares(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 9)) !== 14) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 1, 1, 1, 1, 1, 1)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-56, -99, 1, 0, -2)) !== 3030) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, 17, -1,\
    \ -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "6\n0\n-126\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  foreach ($lst as $key => $value) {\n        if ($key % 3 == 0) {\n        \
    \    $sum += pow($value, 2);\n        } else if ($key % 4 == 0 && $key % 3 !=\
    \ 0) {\n            $sum += pow($value, 3);\n        } else {\n            $sum\
    \ += $value;\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  foreach ($lst as $index => $value) {\n        if ($index % 3 == 0) {\n    \
    \        $sum += $value * $value;\n        } else if ($index % 4 == 0) {\n   \
    \         $sum += $value * $value * $value;\n        } else {\n            $sum\
    \ += $value;\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  foreach ($lst as $index => $value) {\n        if ($index % 3 == 0) {\n    \
    \        $sum += $value * $value;\n        } else if ($index % 4 == 0) {\n   \
    \         $sum += $value * $value * $value;\n        } else {\n            $sum\
    \ += $value;\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  foreach ($lst as $key => $value) {\n        if ($key % 3 == 0) {\n        \
    \    $sum += $value * $value;\n        } else if ($key % 4 == 0 && $key % 3 !=\
    \ 0) {\n            $sum += $value * $value * $value;\n        } else {\n    \
    \        $sum += $value;\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  foreach($lst as $key => $value) {\n        if($key % 3 == 0) {\n          \
    \  $sum += $value * $value;\n        } else if($key % 4 == 0 && $key % 3 != 0)\
    \ {\n            $sum += $value * $value * $value;\n        } else {\n       \
    \     $sum += $value;\n        }\n    }\n    return $sum;\n}\n\n$lst = [1,2,3];\n\
    echo sum_squares($lst);\necho \"<br>\";\n$lst = [];\necho sum_squares($lst);\n\
    echo \"<br>\";\n$lst = [-1,-5,2,-1,-5];\necho sum_squares($lst);\necho \"<br>\"\
    ;\nfunction candidate(...$args) {\n    return sum_squares(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 9)) !== 14) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 1, 1, 1, 1, 1, 1)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-56, -99, 1, 0, -2)) !== 3030) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, 17, -1,\
    \ -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 6<br>0<br>-126<br>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0 && $i % 4 !=\
    \ 0) {\n            $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0)\
    \ {\n            $sum += pow($lst[$i], 3);\n        } else {\n            $sum\
    \ += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpov68z6xp.php:33\n\
    Stack trace:\n#0 /tmp/tmpov68z6xp.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpov68z6xp.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\n$lst = [1,2,3];\necho sum_squares($lst);\n\
    echo \"\\n\";\n$lst = [];\necho sum_squares($lst);\necho \"\\n\";\n$lst = [-1,-5,2,-1,-5];\n\
    echo sum_squares($lst);\necho \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "6\n0\n-126\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n  $sum = 0;\n  for\
    \ ($i = 0; $i < count($lst); $i++) {\n    if ($i % 3 == 0) {\n      $sum += pow($lst[$i],\
    \ 2);\n    } else if ($i % 4 == 0 && $i % 3 != 0) {\n      $sum += pow($lst[$i],\
    \ 3);\n    } else {\n      $sum += $lst[$i];\n    }\n  }\n  return $sum;\n}\n\n\
    function candidate(...$args) {\n    return sum_squares(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 9)) !== 14) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 1, 1, 1, 1, 1, 1)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-56, -99, 1, 0, -2)) !== 3030) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, 17, -1,\
    \ -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n  $sum = 0;\n  for\
    \ ($i = 0; $i < count($lst); $i++) {\n    if ($i % 3 == 0) {\n      $sum += pow($lst[$i],\
    \ 2);\n    } else if ($i % 4 == 0 && $i % 3 != 0) {\n      $sum += pow($lst[$i],\
    \ 3);\n    } else {\n      $sum += $lst[$i];\n    }\n  }\n  return $sum;\n}\n\n\
    function candidate(...$args) {\n    return sum_squares(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 9)) !== 14) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 1, 1, 1, 1, 1, 1)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-56, -99, 1, 0, -2)) !== 3030) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, 17, -1,\
    \ -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  foreach($lst as $key => $value) {\n        if($key % 3 == 0 && $key % 4 ==\
    \ 0) {\n            $sum += $value ** 3;\n        } else if($key % 3 == 0) {\n\
    \            $sum += $value ** 2;\n        } else if($key % 4 == 0) {\n      \
    \      $sum += $value ** 3;\n        } else {\n            $sum += $value;\n \
    \       }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6_s3s2hw.php:35\n\
    Stack trace:\n#0 /tmp/tmp6_s3s2hw.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp6_s3s2hw.php\
    \ on line 35\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n\t$sum = 0;\n\tforeach\
    \ ($lst as $key => $value) {\n\t\tif ($key % 3 == 0 && $key % 4 == 0) {\n\t\t\t\
    $sum += $value ** 3;\n\t\t} elseif ($key % 3 == 0) {\n\t\t\t$sum += $value **\
    \ 2;\n\t\t} else {\n\t\t\t$sum += $value;\n\t\t}\n\t}\n\treturn $sum;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sum_squares(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 4, 9)) !== 14) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 1, 1, 1, 1, 1, 1)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-56, -99, 1, 0, -2)) !== 3030) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, 17, -1,\
    \ -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2bkd1kvm.php:33\n\
    Stack trace:\n#0 /tmp/tmp2bkd1kvm.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp2bkd1kvm.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n  $sum = 0;\n  for\
    \ ($i = 0; $i < count($lst); $i++) {\n    if ($i % 3 == 0) {\n      $sum += $lst[$i]\
    \ * $lst[$i];\n    } else if ($i % 4 == 0) {\n      $sum += $lst[$i] * $lst[$i]\
    \ * $lst[$i];\n    } else {\n      $sum += $lst[$i];\n    }\n  }\n  return $sum;\n\
    }\n\nfunction candidate(...$args) {\n    return sum_squares(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4, 9)) !== 14) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-56, -99, 1, 0,\
    \ -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26,\
    \ 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10))\
    \ !== -1448) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n\t$sum = 0;\n\tfor\
    \ ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum += pow($lst[$i],\
    \ 2);\n\t\t} else if ($i % 4 == 0) {\n\t\t\t$sum += pow($lst[$i], 3);\n\t\t} else\
    \ {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  foreach($lst as $key => $value) {\n        if($key % 3 == 0) {\n          \
    \  $sum += $value * $value;\n        } else if($key % 4 == 0 && $key % 3 != 0)\
    \ {\n            $sum += $value * $value * $value;\n        } else {\n       \
    \     $sum += $value;\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  foreach ($lst as $key => $value) {\n        if ($key % 3 == 0) {\n        \
    \    $sum += $value * $value;\n        } else if ($key % 4 == 0 && $key % 3 !=\
    \ 0) {\n            $sum += $value * $value * $value;\n        } else {\n    \
    \        $sum += $value;\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] ** 2;\n        } else if ($i % 4 == 0 && $i % 3 != 0)\
    \ {\n            $sum += $lst[$i] ** 3;\n        } else {\n            $sum +=\
    \ $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  $len = count($lst);\n    for ($i = 0; $i < $len; $i++) {\n        if ($i %\
    \ 3 == 0) {\n            $sum += pow($lst[$i], 2);\n        } else if ($i % 4\
    \ == 0) {\n            $sum += pow($lst[$i], 3);\n        } else {\n         \
    \   $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n  $sum = 0;\n  foreach\
    \ ($lst as $index => $value) {\n    if ($index % 3 == 0) {\n      $sum += $value\
    \ * $value;\n    } else if ($index % 4 == 0) {\n      $sum += $value * $value\
    \ * $value;\n    } else {\n      $sum += $value;\n    }\n  }\n  return $sum;\n\
    }\n\nfunction candidate(...$args) {\n    return sum_squares(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4, 9)) !== 14) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-56, -99, 1, 0,\
    \ -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26,\
    \ 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10))\
    \ !== -1448) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  if (count($lst) == 0) {\n        return $sum;\n    }\n    for ($i = 0; $i <\
    \ count($lst); $i++) {\n        if ($i % 3 == 0) {\n            $sum += $lst[$i]\
    \ * $lst[$i];\n        } else if ($i % 4 == 0) {\n            $sum += $lst[$i]\
    \ * $lst[$i] * $lst[$i];\n        } else {\n            $sum += $lst[$i];\n  \
    \      }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n$lst = [1,2,3];\n\
    echo sum_squares($lst);\n\nfunction candidate(...$args) {\n    return sum_squares(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4, 9)) !== 14)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-56, -99, 1, 0,\
    \ -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26,\
    \ 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10))\
    \ !== -1448) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '6'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  foreach ($lst as $key => $value) {\n        if ($key % 3 == 0) {\n        \
    \    $sum += pow($value, 2);\n        } else if ($key % 4 == 0 && $key % 3 !=\
    \ 0) {\n            $sum += pow($value, 3);\n        } else {\n            $sum\
    \ += $value;\n        }\n    }\n    return $sum;\n}\n\n$lst = [1,2,3];\necho sum_squares($lst);\n\
    echo \"<br>\";\n$lst = [];\necho sum_squares($lst);\necho \"<br>\";\n$lst = [-1,-5,2,-1,-5];\n\
    echo sum_squares($lst);\necho \"<br>\";\nfunction candidate(...$args) {\n    return\
    \ sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: 6<br>0<br>-126<br>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n\t$sum = 0;\n\tfor\
    \ ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum += pow($lst[$i],\
    \ 2);\n\t\t} else if ($i % 4 == 0) {\n\t\t\t$sum += pow($lst[$i], 3);\n\t\t} else\
    \ {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n\t$sum = 0;\n\tfor\
    \ ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum += pow($lst[$i],\
    \ 2);\n\t\t} else if ($i % 4 == 0) {\n\t\t\t$sum += pow($lst[$i], 3);\n\t\t} else\
    \ {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n  $sum = 0;\n  for\
    \ ($i = 0; $i < count($lst); $i++) {\n    if ($i % 3 == 0) {\n      $sum += pow($lst[$i],\
    \ 2);\n    } else if ($i % 4 == 0 && $i % 3 != 0) {\n      $sum += pow($lst[$i],\
    \ 3);\n    } else {\n      $sum += $lst[$i];\n    }\n  }\n  return $sum;\n}\n\n\
    function candidate(...$args) {\n    return sum_squares(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 9)) !== 14) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 1, 1, 1, 1, 1, 1)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-56, -99, 1, 0, -2)) !== 3030) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, 17, -1,\
    \ -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  foreach ($lst as $key => $value) {\n        if ($key % 3 == 0) {\n        \
    \    $sum += $value * $value;\n        } else if ($key % 4 == 0 && $key % 3 !=\
    \ 0) {\n            $sum += $value * $value * $value;\n        } else {\n    \
    \        $sum += $value;\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  foreach ($lst as $key => $value) {\n        if ($key % 3 == 0) {\n        \
    \    $sum += $value * $value;\n        } else if ($key % 4 == 0 && $key % 3 !=\
    \ 0) {\n            $sum += $value * $value * $value;\n        } else {\n    \
    \        $sum += $value;\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n  $sum = 0;\n  for\
    \ ($i = 0; $i < count($lst); $i++) {\n    if ($i % 3 == 0) {\n      $sum += $lst[$i]\
    \ * $lst[$i];\n    } else if ($i % 4 == 0) {\n      $sum += $lst[$i] * $lst[$i]\
    \ * $lst[$i];\n    } else {\n      $sum += $lst[$i];\n    }\n  }\n  return $sum;\n\
    }\n\nfunction candidate(...$args) {\n    return sum_squares(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4, 9)) !== 14) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-56, -99, 1, 0,\
    \ -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26,\
    \ 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10))\
    \ !== -1448) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  foreach ($lst as $key => $value) {\n        if ($key % 3 == 0) {\n        \
    \    $sum += pow($value, 2);\n        } else if ($key % 4 == 0 && $key % 3 !=\
    \ 0) {\n            $sum += pow($value, 3);\n        } else {\n            $sum\
    \ += $value;\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  foreach ($lst as $key => $value) {\n        if ($key % 3 == 0) {\n        \
    \    $sum += pow($value, 2);\n        } else if ($key % 4 == 0 && $key % 3 !=\
    \ 0) {\n            $sum += pow($value, 3);\n        } else {\n            $sum\
    \ += $value;\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  foreach ($lst as $key => $value) {\n        if ($key % 3 == 0) {\n        \
    \    $sum += pow($value, 2);\n        } else if ($key % 4 == 0 && $key % 3 !=\
    \ 0) {\n            $sum += pow($value, 3);\n        } else {\n            $sum\
    \ += $value;\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  foreach ($lst as $key => $value) {\n        if ($key % 3 == 0) {\n        \
    \    $sum += $value * $value;\n        } else if ($key % 4 == 0 && $key % 3 !=\
    \ 0) {\n            $sum += $value * $value * $value;\n        } else {\n    \
    \        $sum += $value;\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n$lst = [1,2,3];\n\
    echo sum_squares($lst);\necho \"<br>\";\n$lst = [];\necho sum_squares($lst);\n\
    echo \"<br>\";\n$lst = [-1,-5,2,-1,-5];\necho sum_squares($lst);\necho \"<br>\"\
    ;\nfunction candidate(...$args) {\n    return sum_squares(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 9)) !== 14) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 1, 1, 1, 1, 1, 1)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-56, -99, 1, 0, -2)) !== 3030) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, 17, -1,\
    \ -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 6<br>0<br>-126<br>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n  $sum = 0;\n  for\
    \ ($i = 0; $i < count($lst); $i++) {\n    if ($i % 3 == 0) {\n      $sum += pow($lst[$i],\
    \ 2);\n    } else if ($i % 4 == 0 && $i % 3 != 0) {\n      $sum += pow($lst[$i],\
    \ 3);\n    } else {\n      $sum += $lst[$i];\n    }\n  }\n  return $sum;\n}\n\n\
    function candidate(...$args) {\n    return sum_squares(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 9)) !== 14) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 1, 1, 1, 1, 1, 1)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-56, -99, 1, 0, -2)) !== 3030) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, 17, -1,\
    \ -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n\t$sum = 0;\n\tfor\
    \ ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum += pow($lst[$i],\
    \ 2);\n\t\t} else if ($i % 4 == 0) {\n\t\t\t$sum += pow($lst[$i], 3);\n\t\t} else\
    \ {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n\t$sum = 0;\n\tfor\
    \ ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum += $lst[$i]\
    \ * $lst[$i];\n\t\t} else if ($i % 4 == 0) {\n\t\t\t$sum += $lst[$i] * $lst[$i]\
    \ * $lst[$i];\n\t\t} else {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n\
    }\n\nfunction candidate(...$args) {\n    return sum_squares(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4, 9)) !== 14) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-56, -99, 1, 0,\
    \ -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26,\
    \ 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10))\
    \ !== -1448) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n  $sum = 0;\n  for\
    \ ($i = 0; $i < count($lst); $i++) {\n    if ($i % 3 == 0) {\n      $sum += pow($lst[$i],\
    \ 2);\n    } else if ($i % 4 == 0 && $i % 3 != 0) {\n      $sum += pow($lst[$i],\
    \ 3);\n    } else {\n      $sum += $lst[$i];\n    }\n  }\n  return $sum;\n}\n\n\
    function candidate(...$args) {\n    return sum_squares(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 9)) !== 14) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 1, 1, 1, 1, 1, 1)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-56, -99, 1, 0, -2)) !== 3030) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, 17, -1,\
    \ -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  foreach ($lst as $key => $value) {\n        if ($key % 3 == 0) {\n        \
    \    $sum += $value * $value;\n        } else if ($key % 4 == 0) {\n         \
    \   $sum += $value * $value * $value;\n        } else {\n            $sum += $value;\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n\t$sum = 0;\n\tforeach\
    \ ($lst as $key => $value) {\n\t\tif ($key % 3 == 0) {\n\t\t\t$sum += $value *\
    \ $value;\n\t\t} else if ($key % 4 == 0) {\n\t\t\t$sum += $value * $value * $value;\n\
    \t\t} else {\n\t\t\t$sum += $value;\n\t\t}\n\t}\n\treturn $sum;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sum_squares(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 4, 9)) !== 14) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 1, 1, 1, 1, 1, 1)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-56, -99, 1, 0, -2)) !== 3030) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, 17, -1,\
    \ -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n\t$sum = 0;\n\tfor\
    \ ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum += pow($lst[$i],\
    \ 2);\n\t\t} else if ($i % 4 == 0) {\n\t\t\t$sum += pow($lst[$i], 3);\n\t\t} else\
    \ {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n\t$sum = 0;\n\tfor\
    \ ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum += pow($lst[$i],\
    \ 2);\n\t\t} else if ($i % 4 == 0) {\n\t\t\t$sum += pow($lst[$i], 3);\n\t\t} else\
    \ {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n\t$sum = 0;\n\tfor\
    \ ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum += $lst[$i]\
    \ * $lst[$i];\n\t\t} else if ($i % 4 == 0) {\n\t\t\t$sum += $lst[$i] * $lst[$i]\
    \ * $lst[$i];\n\t\t} else {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n\
    }\n\nfunction candidate(...$args) {\n    return sum_squares(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4, 9)) !== 14) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-56, -99, 1, 0,\
    \ -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26,\
    \ 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10))\
    \ !== -1448) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n\t$sum = 0;\n\tfor\
    \ ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum += $lst[$i]\
    \ * $lst[$i];\n\t\t} else if ($i % 4 == 0) {\n\t\t\t$sum += $lst[$i] * $lst[$i]\
    \ * $lst[$i];\n\t\t} else {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n\
    }\n\nfunction candidate(...$args) {\n    return sum_squares(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4, 9)) !== 14) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-56, -99, 1, 0,\
    \ -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26,\
    \ 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10))\
    \ !== -1448) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n\t$sum = 0;\n\tforeach($lst\
    \ as $key => $value) {\n\t\tif($key % 3 == 0 && $key % 4 == 0) {\n\t\t\t$sum +=\
    \ $value * $value * $value;\n\t\t} else if($key % 3 == 0) {\n\t\t\t$sum += $value\
    \ * $value;\n\t\t} else if($key % 4 == 0) {\n\t\t\t$sum += $value * $value * $value;\n\
    \t\t} else {\n\t\t\t$sum += $value;\n\t\t}\n\t}\n\treturn $sum;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sum_squares(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 4, 9)) !== 14) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 1, 1, 1, 1, 1, 1)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-56, -99, 1, 0, -2)) !== 3030) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, 17, -1,\
    \ -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdhg5uzn0.php:35\n\
    Stack trace:\n#0 /tmp/tmpdhg5uzn0.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpdhg5uzn0.php\
    \ on line 35\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  foreach ($lst as $key => $value) {\n        if ($key % 3 == 0) {\n        \
    \    $sum += $value * $value;\n        } else if ($key % 4 == 0 && $key % 3 !=\
    \ 0) {\n            $sum += $value * $value * $value;\n        } else {\n    \
    \        $sum += $value;\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  foreach ($lst as $key => $value) {\n        if ($key % 3 == 0) {\n        \
    \    $sum += pow($value, 2);\n        } else if ($key % 4 == 0 && $key % 3 !=\
    \ 0) {\n            $sum += pow($value, 3);\n        } else {\n            $sum\
    \ += $value;\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0 && $i % 4 !=\
    \ 0) {\n            $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 ==\
    \ 0) {\n            $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n\
    \            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sum_squares(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 4, 9)) !== 14) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 1, 1, 1, 1, 1, 1)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-56, -99, 1, 0, -2)) !== 3030) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, 17, -1,\
    \ -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpk629swg9.php:33\n\
    Stack trace:\n#0 /tmp/tmpk629swg9.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpk629swg9.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  $len = count($lst);\n    for ($i = 0; $i < $len; $i++) {\n        if ($i %\
    \ 3 == 0) {\n            $sum += pow($lst[$i], 2);\n        } else if ($i % 4\
    \ == 0) {\n            $sum += pow($lst[$i], 3);\n        } else {\n         \
    \   $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  foreach($lst as $key => $value) {\n        if($key % 3 == 0) {\n          \
    \  $sum += pow($value, 2);\n        } else if($key % 4 == 0 && $key % 3 != 0)\
    \ {\n            $sum += pow($value, 3);\n        } else {\n            $sum +=\
    \ $value;\n        }\n    }\n    return $sum;\n}\n\n$lst = [1,2,3];\necho sum_squares($lst);\n\
    function candidate(...$args) {\n    return sum_squares(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 9)) !== 14) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 1, 1, 1, 1, 1, 1)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-56, -99, 1, 0, -2)) !== 3030) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, 17, -1,\
    \ -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '6'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  foreach ($lst as $index => $value) {\n        if ($index % 3 == 0) {\n    \
    \        $sum += $value * $value;\n        } else if ($index % 4 == 0) {\n   \
    \         $sum += $value * $value * $value;\n        } else {\n            $sum\
    \ += $value;\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  $i = 0;\n    foreach ($lst as $value) {\n        if ($i % 3 == 0) {\n     \
    \       $sum += $value * $value;\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += $value * $value * $value;\n        } else {\n            $sum +=\
    \ $value;\n        }\n        $i++;\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n  $sum = 0;\n  for\
    \ ($i = 0; $i < count($lst); $i++) {\n    if ($i % 3 == 0) {\n      $sum += pow($lst[$i],\
    \ 2);\n    } else if ($i % 4 == 0 && $i % 3 != 0) {\n      $sum += pow($lst[$i],\
    \ 3);\n    } else {\n      $sum += $lst[$i];\n    }\n  }\n  return $sum;\n}\n\n\
    function candidate(...$args) {\n    return sum_squares(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 9)) !== 14) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 1, 1, 1, 1, 1, 1)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-56, -99, 1, 0, -2)) !== 3030) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, 17, -1,\
    \ -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  foreach ($lst as $key => $value) {\n        if ($key % 3 == 0) {\n        \
    \    $sum += $value * $value;\n        } else if ($key % 4 == 0 && $key % 3 !=\
    \ 0) {\n            $sum += $value * $value * $value;\n        } else {\n    \
    \        $sum += $value;\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n\t$sum = 0;\n\tfor\
    \ ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum += $lst[$i]\
    \ * $lst[$i];\n\t\t} else if ($i % 4 == 0) {\n\t\t\t$sum += $lst[$i] * $lst[$i]\
    \ * $lst[$i];\n\t\t} else {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n\
    }\n\nfunction candidate(...$args) {\n    return sum_squares(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4, 9)) !== 14) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-56, -99, 1, 0,\
    \ -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26,\
    \ 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10))\
    \ !== -1448) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n\t$sum = 0;\n\tfor\
    \ ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum += pow($lst[$i],\
    \ 2);\n\t\t} else if ($i % 4 == 0) {\n\t\t\t$sum += pow($lst[$i], 3);\n\t\t} else\
    \ {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  foreach ($lst as $key => $value) {\n        if ($key % 3 == 0) {\n        \
    \    $sum += pow($value, 2);\n        } else if ($key % 4 == 0 && $key % 3 !=\
    \ 0) {\n            $sum += pow($value, 3);\n        } else {\n            $sum\
    \ += $value;\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  foreach ($lst as $key => $value) {\n        if ($key % 3 == 0) {\n        \
    \    $sum += $value * $value;\n        } else if ($key % 4 == 0 && $key % 3 !=\
    \ 0) {\n            $sum += $value * $value * $value;\n        } else {\n    \
    \        $sum += $value;\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n  $sum = 0;\n  foreach\
    \ ($lst as $key => $value) {\n    if ($key % 3 == 0) {\n      $sum += $value *\
    \ $value;\n    } else if ($key % 4 == 0) {\n      $sum += $value * $value * $value;\n\
    \    } else {\n      $sum += $value;\n    }\n  }\n  return $sum;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sum_squares(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 4, 9)) !== 14) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 1, 1, 1, 1, 1, 1)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-56, -99, 1, 0, -2)) !== 3030) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, 17, -1,\
    \ -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  foreach ($lst as $key => $value) {\n        if ($key % 3 == 0 && $key % 4 ==\
    \ 0) {\n            $sum += $value ** 3;\n        } elseif ($key % 3 == 0) {\n\
    \            $sum += $value ** 2;\n        } else {\n            $sum += $value;\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4wiq31r3.php:33\n\
    Stack trace:\n#0 /tmp/tmp4wiq31r3.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp4wiq31r3.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n\t$sum = 0;\n\tforeach\
    \ ($lst as $key => $value) {\n\t\tif ($key % 3 == 0) {\n\t\t\t$sum += $value *\
    \ $value;\n\t\t} else if ($key % 4 == 0) {\n\t\t\t$sum += $value * $value * $value;\n\
    \t\t} else {\n\t\t\t$sum += $value;\n\t\t}\n\t}\n\treturn $sum;\n}\n\n$lst = [1,2,3];\n\
    echo sum_squares($lst);\nfunction candidate(...$args) {\n    return sum_squares(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4, 9)) !== 14)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-56, -99, 1, 0,\
    \ -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26,\
    \ 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10))\
    \ !== -1448) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '6'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  foreach ($lst as $key => $value) {\n        if ($key % 3 == 0 && $key % 4 ==\
    \ 0) {\n            $sum += pow($value, 3);\n        } else if ($key % 3 == 0)\
    \ {\n            $sum += pow($value, 2);\n        } else {\n            $sum +=\
    \ $value;\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpue1dpt56.php:33\n\
    Stack trace:\n#0 /tmp/tmpue1dpt56.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpue1dpt56.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n  $sum = 0;\n  for\
    \ ($i = 0; $i < count($lst); $i++) {\n    if ($i % 3 == 0) {\n      $sum += $lst[$i]\
    \ * $lst[$i];\n    } else if ($i % 4 == 0) {\n      $sum += $lst[$i] * $lst[$i]\
    \ * $lst[$i];\n    } else {\n      $sum += $lst[$i];\n    }\n  }\n  return $sum;\n\
    }\n\nfunction candidate(...$args) {\n    return sum_squares(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4, 9)) !== 14) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-56, -99, 1, 0,\
    \ -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26,\
    \ 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10))\
    \ !== -1448) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  foreach ($lst as $key => $value) {\n        if ($key % 3 == 0) {\n        \
    \    $sum += $value * $value;\n        } else if ($key % 4 == 0) {\n         \
    \   $sum += $value * $value * $value;\n        } else {\n            $sum += $value;\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  foreach ($lst as $index => $value) {\n        if ($index % 3 == 0) {\n    \
    \        $sum += $value * $value;\n        } else if ($index % 4 == 0) {\n   \
    \         $sum += $value * $value * $value;\n        } else {\n            $sum\
    \ += $value;\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  foreach ($lst as $key => $value) {\n        if ($key % 3 == 0 && $key % 4 ==\
    \ 0) {\n            $sum += $value ** 3;\n        } elseif ($key % 3 == 0) {\n\
    \            $sum += $value ** 2;\n        } else {\n            $sum += $value;\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnu2im0rp.php:33\n\
    Stack trace:\n#0 /tmp/tmpnu2im0rp.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpnu2im0rp.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  foreach ($lst as $key => $value) {\n        if ($key % 3 == 0) {\n        \
    \    $sum += pow($value, 2);\n        } else if ($key % 4 == 0 && $key % 3 !=\
    \ 0) {\n            $sum += pow($value, 3);\n        } else {\n            $sum\
    \ += $value;\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\n$lst = [1,2,3];\necho sum_squares($lst);\n\
    echo \"<br>\";\n$lst = [];\necho sum_squares($lst);\necho \"<br>\";\n$lst = [-1,-5,2,-1,-5];\n\
    echo sum_squares($lst);\necho \"<br>\";\nfunction candidate(...$args) {\n    return\
    \ sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: 6<br>0<br>-126<br>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0 && $i % 4 !=\
    \ 0) {\n            $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0)\
    \ {\n            $sum += pow($lst[$i], 3);\n        } else {\n            $sum\
    \ += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4agwh7qo.php:33\n\
    Stack trace:\n#0 /tmp/tmp4agwh7qo.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp4agwh7qo.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n\t$sum = 0;\n\tfor\
    \ ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum += $lst[$i]\
    \ * $lst[$i];\n\t\t} else if ($i % 4 == 0) {\n\t\t\t$sum += $lst[$i] * $lst[$i]\
    \ * $lst[$i];\n\t\t} else {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n\
    }\n\nfunction candidate(...$args) {\n    return sum_squares(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4, 9)) !== 14) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== 0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-56, -99, 1, 0,\
    \ -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26,\
    \ 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10))\
    \ !== -1448) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n\t$sum = 0;\n\tforeach\
    \ ($lst as $key => $value) {\n\t\tif ($key % 3 == 0) {\n\t\t\t$sum += pow($value,\
    \ 2);\n\t\t} else if ($key % 4 == 0 && $key % 3 != 0) {\n\t\t\t$sum += pow($value,\
    \ 3);\n\t\t} else {\n\t\t\t$sum += $value;\n\t\t}\n\t}\n\treturn $sum;\n}\n\n\
    $lst = [1,2,3];\necho sum_squares($lst);\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: '6'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  foreach ($lst as $key => $value) {\n        if ($key % 3 == 0) {\n        \
    \    $sum += pow($value, 2);\n        } else if ($key % 4 == 0 && $key % 3 !=\
    \ 0) {\n            $sum += pow($value, 3);\n        } else {\n            $sum\
    \ += $value;\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n\t$sum = 0;\n\tforeach\
    \ ($lst as $key => $value) {\n\t\tif ($key % 3 == 0) {\n\t\t\t$sum += pow($value,\
    \ 2);\n\t\t} else if ($key % 4 == 0 && $key % 3 != 0) {\n\t\t\t$sum += pow($value,\
    \ 3);\n\t\t} else {\n\t\t\t$sum += $value;\n\t\t}\n\t}\n\treturn $sum;\n}\n\n\
    function candidate(...$args) {\n    return sum_squares(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 9)) !== 14) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 1, 1, 1, 1, 1, 1)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-56, -99, 1, 0, -2)) !== 3030) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, 17, -1,\
    \ -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n     \
    \       $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n          \
    \  $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n    $sum = 0;\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n      \
    \      $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n        \
    \    $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sum_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 9)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -1, -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0)) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -5, 2, -1, -5))\
    \ !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
    \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-1, 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14,\
    \ -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"\n// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    // multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output\
    \ should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunction sum_squares($lst) {\n  $sum = 0;\n  foreach\
    \ ($lst as $key => $value) {\n    if ($key % 3 == 0) {\n      $sum += pow($value,\
    \ 2);\n    } else if ($key % 4 == 0 && $key % 3 != 0) {\n      $sum += pow($value,\
    \ 3);\n    } else {\n      $sum += $value;\n    }\n  }\n  return $sum;\n}\n\n\
    function candidate(...$args) {\n    return sum_squares(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 9)) !== 14) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 1, 1, 1, 1, 1, 1)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1)) !== -3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -5, 2, -1, -5)) !== -126) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-56, -99, 1, 0, -2)) !== 3030) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37)) !== -14196) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, 17, -1,\
    \ -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10)) !== -1448)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
