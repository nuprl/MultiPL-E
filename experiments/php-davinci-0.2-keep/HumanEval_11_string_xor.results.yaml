name: HumanEval_11_string_xor
language: php
results:
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  $len = strlen($a);\n  for ($i = 0; $i < $len; $i++) {\n    $result\
    \ .= $a[$i] ^ $b[$i];\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpaozxy39q.php:20\n\
    Stack trace:\n#0 /tmp/tmpaozxy39q.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpaozxy39q.php\
    \ on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgmwr1a95.php:19\n\
    Stack trace:\n#0 /tmp/tmpgmwr1a95.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpgmwr1a95.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvdaduzbc.php:19\n\
    Stack trace:\n#0 /tmp/tmpvdaduzbc.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpvdaduzbc.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp117kxihk.php:19\n\
    Stack trace:\n#0 /tmp/tmp117kxihk.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp117kxihk.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $result = [];\n  for ($i = 0; $i\
    \ < count($a); $i++) {\n    $result[] = $a[$i] ^ $b[$i];\n  }\n  return implode('',\
    \ $result);\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpm0qi_3i6.php:21\n\
    Stack trace:\n#0 /tmp/tmpm0qi_3i6.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpm0qi_3i6.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpiu2j94oi.php:19\n\
    Stack trace:\n#0 /tmp/tmpiu2j94oi.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpiu2j94oi.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $result = [];\n  for ($i = 0; $i\
    \ < count($a); $i++) {\n    $result[] = $a[$i] ^ $b[$i];\n  }\n  return implode('',\
    \ $result);\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbih2nt_f.php:21\n\
    Stack trace:\n#0 /tmp/tmpbih2nt_f.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpbih2nt_f.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  $a = str_split($a);\n  $b = str_split($b);\n  for ($i = 0; $i < count($a);\
    \ $i++) {\n    $result .= $a[$i] ^ $b[$i];\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_8jn06j4.php:21\n\
    Stack trace:\n#0 /tmp/tmp_8jn06j4.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp_8jn06j4.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpe343_pag.php:19\n\
    Stack trace:\n#0 /tmp/tmpe343_pag.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpe343_pag.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4nen1h2n.php:19\n\
    Stack trace:\n#0 /tmp/tmp4nen1h2n.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp4nen1h2n.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpm3oa85sb.php:19\n\
    Stack trace:\n#0 /tmp/tmpm3oa85sb.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpm3oa85sb.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzzml1r1i.php:19\n\
    Stack trace:\n#0 /tmp/tmpzzml1r1i.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpzzml1r1i.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpa5rwerem.php:19\n\
    Stack trace:\n#0 /tmp/tmpa5rwerem.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpa5rwerem.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpraogeill.php:19\n\
    Stack trace:\n#0 /tmp/tmpraogeill.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpraogeill.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4bbnn1e_.php:19\n\
    Stack trace:\n#0 /tmp/tmp4bbnn1e_.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp4bbnn1e_.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $result = [];\n  for ($i = 0; $i\
    \ < count($a); $i++) {\n    $result[] = $a[$i] ^ $b[$i];\n  }\n  return implode($result);\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwijgpumc.php:21\n\
    Stack trace:\n#0 /tmp/tmpwijgpumc.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpwijgpumc.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjhxr4c9r.php:19\n\
    Stack trace:\n#0 /tmp/tmpjhxr4c9r.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpjhxr4c9r.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $result = [];\n  for ($i = 0; $i\
    \ < count($a); $i++) {\n    $result[] = $a[$i] ^ $b[$i];\n  }\n  return implode($result);\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpd2jj740a.php:21\n\
    Stack trace:\n#0 /tmp/tmpd2jj740a.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpd2jj740a.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsm0dcocn.php:19\n\
    Stack trace:\n#0 /tmp/tmpsm0dcocn.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpsm0dcocn.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpj6gbmupx.php:19\n\
    Stack trace:\n#0 /tmp/tmpj6gbmupx.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpj6gbmupx.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpva21her_.php:19\n\
    Stack trace:\n#0 /tmp/tmpva21her_.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpva21her_.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpq0ywli3x.php:19\n\
    Stack trace:\n#0 /tmp/tmpq0ywli3x.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpq0ywli3x.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnz09z9bi.php:19\n\
    Stack trace:\n#0 /tmp/tmpnz09z9bi.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpnz09z9bi.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6rhxkjut.php:19\n\
    Stack trace:\n#0 /tmp/tmp6rhxkjut.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp6rhxkjut.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0nhoqoxz.php:19\n\
    Stack trace:\n#0 /tmp/tmp0nhoqoxz.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp0nhoqoxz.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp76yricmy.php:19\n\
    Stack trace:\n#0 /tmp/tmp76yricmy.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp76yricmy.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    $a = str_split($a);\n    $b = str_split($b);\n    foreach ($a as\
    \ $key => $value) {\n        if ($value == $b[$key]) {\n            $result .=\
    \ '0';\n        } else {\n            $result .= '1';\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdn11z_cc.php:19\n\
    Stack trace:\n#0 /tmp/tmpdn11z_cc.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpdn11z_cc.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmh60fe1i.php:19\n\
    Stack trace:\n#0 /tmp/tmpmh60fe1i.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpmh60fe1i.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfwdb_8my.php:19\n\
    Stack trace:\n#0 /tmp/tmpfwdb_8my.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpfwdb_8my.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $a\
    \ = str_split($a);\n    $b = str_split($b);\n    $result = [];\n    for ($i =\
    \ 0; $i < count($a); $i++) {\n        $result[] = $a[$i] ^ $b[$i];\n    }\n  \
    \  return implode('', $result);\n}\n\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5tcsfkvb.php:21\n\
    Stack trace:\n#0 /tmp/tmp5tcsfkvb.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp5tcsfkvb.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $result = '';\n  for ($i = 0; $i\
    \ < count($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8fks6okd.php:21\n\
    Stack trace:\n#0 /tmp/tmp8fks6okd.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp8fks6okd.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpguxk05zh.php:19\n\
    Stack trace:\n#0 /tmp/tmpguxk05zh.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpguxk05zh.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpscwexw8k.php:19\n\
    Stack trace:\n#0 /tmp/tmpscwexw8k.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpscwexw8k.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpg_fe1zu4.php:19\n\
    Stack trace:\n#0 /tmp/tmpg_fe1zu4.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpg_fe1zu4.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphruaqucl.php:19\n\
    Stack trace:\n#0 /tmp/tmphruaqucl.php(24): test()\n#1 {main}\n  thrown in /tmp/tmphruaqucl.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphk5nbx9k.php:19\n\
    Stack trace:\n#0 /tmp/tmphk5nbx9k.php(24): test()\n#1 {main}\n  thrown in /tmp/tmphk5nbx9k.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $result = [];\n  for ($i = 0; $i\
    \ < count($a); $i++) {\n    $result[] = $a[$i] ^ $b[$i];\n  }\n  return implode($result);\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfqsbpf5j.php:21\n\
    Stack trace:\n#0 /tmp/tmpfqsbpf5j.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpfqsbpf5j.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8_0v1129.php:19\n\
    Stack trace:\n#0 /tmp/tmp8_0v1129.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp8_0v1129.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6q4mpzgi.php:19\n\
    Stack trace:\n#0 /tmp/tmp6q4mpzgi.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp6q4mpzgi.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpin05md69.php:19\n\
    Stack trace:\n#0 /tmp/tmpin05md69.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpin05md69.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpiqtdlt0n.php:19\n\
    Stack trace:\n#0 /tmp/tmpiqtdlt0n.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpiqtdlt0n.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqvgjcsyh.php:19\n\
    Stack trace:\n#0 /tmp/tmpqvgjcsyh.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpqvgjcsyh.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfehl0txh.php:19\n\
    Stack trace:\n#0 /tmp/tmpfehl0txh.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpfehl0txh.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $result = '';\n  for ($i = 0; $i\
    \ < count($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprft42wlq.php:21\n\
    Stack trace:\n#0 /tmp/tmprft42wlq.php(26): test()\n#1 {main}\n  thrown in /tmp/tmprft42wlq.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgzahqkd4.php:19\n\
    Stack trace:\n#0 /tmp/tmpgzahqkd4.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpgzahqkd4.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $result = [];\n  for ($i = 0; $i\
    \ < count($a); $i++) {\n    $result[] = $a[$i] ^ $b[$i];\n  }\n  return implode('',\
    \ $result);\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptz8g6tj9.php:21\n\
    Stack trace:\n#0 /tmp/tmptz8g6tj9.php(26): test()\n#1 {main}\n  thrown in /tmp/tmptz8g6tj9.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpk1yi1o8h.php:19\n\
    Stack trace:\n#0 /tmp/tmpk1yi1o8h.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpk1yi1o8h.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp759e5hmp.php:19\n\
    Stack trace:\n#0 /tmp/tmp759e5hmp.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp759e5hmp.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpeubx_qzj.php:19\n\
    Stack trace:\n#0 /tmp/tmpeubx_qzj.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpeubx_qzj.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdt2b9_ju.php:19\n\
    Stack trace:\n#0 /tmp/tmpdt2b9_ju.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpdt2b9_ju.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpirltx_ha.php:19\n\
    Stack trace:\n#0 /tmp/tmpirltx_ha.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpirltx_ha.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $result = '';\n  for ($i = 0; $i\
    \ < count($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpusb5uw2r.php:21\n\
    Stack trace:\n#0 /tmp/tmpusb5uw2r.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpusb5uw2r.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4zu7sw4g.php:19\n\
    Stack trace:\n#0 /tmp/tmp4zu7sw4g.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp4zu7sw4g.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmps4i2pt4x.php:19\n\
    Stack trace:\n#0 /tmp/tmps4i2pt4x.php(24): test()\n#1 {main}\n  thrown in /tmp/tmps4i2pt4x.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $a\
    \ = str_split($a);\n    $b = str_split($b);\n    $result = [];\n    for ($i =\
    \ 0; $i < count($a); $i++) {\n        $result[] = $a[$i] ^ $b[$i];\n    }\n  \
    \  return implode('', $result);\n}\n\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpm1yo_5fd.php:21\n\
    Stack trace:\n#0 /tmp/tmpm1yo_5fd.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpm1yo_5fd.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $a\
    \ = str_split($a);\n    $b = str_split($b);\n    $result = [];\n    for ($i =\
    \ 0; $i < count($a); $i++) {\n        if ($a[$i] == $b[$i]) {\n            $result[]\
    \ = '0';\n        } else {\n            $result[] = '1';\n        }\n    }\n \
    \   return implode($result);\n}\n\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprlhpq5z_.php:19\n\
    Stack trace:\n#0 /tmp/tmprlhpq5z_.php(24): test()\n#1 {main}\n  thrown in /tmp/tmprlhpq5z_.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjw5s3l3g.php:19\n\
    Stack trace:\n#0 /tmp/tmpjw5s3l3g.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpjw5s3l3g.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptvuvi33g.php:19\n\
    Stack trace:\n#0 /tmp/tmptvuvi33g.php(24): test()\n#1 {main}\n  thrown in /tmp/tmptvuvi33g.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxtxszkrm.php:19\n\
    Stack trace:\n#0 /tmp/tmpxtxszkrm.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpxtxszkrm.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $result = [];\n  for ($i = 0; $i\
    \ < count($a); $i++) {\n    $result[] = $a[$i] ^ $b[$i];\n  }\n  return implode('',\
    \ $result);\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkoblulwx.php:21\n\
    Stack trace:\n#0 /tmp/tmpkoblulwx.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpkoblulwx.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $result = [];\n  for ($i = 0; $i\
    \ < count($a); $i++) {\n    $result[] = $a[$i] ^ $b[$i];\n  }\n  return implode('',\
    \ $result);\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpppc5apmi.php:21\n\
    Stack trace:\n#0 /tmp/tmpppc5apmi.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpppc5apmi.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_yanz0mq.php:19\n\
    Stack trace:\n#0 /tmp/tmp_yanz0mq.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_yanz0mq.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqt2bxjv6.php:19\n\
    Stack trace:\n#0 /tmp/tmpqt2bxjv6.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpqt2bxjv6.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $result = [];\n  for ($i = 0; $i\
    \ < count($a); $i++) {\n    $result[] = $a[$i] ^ $b[$i];\n  }\n  return implode('',\
    \ $result);\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1vd1_6q6.php:21\n\
    Stack trace:\n#0 /tmp/tmp1vd1_6q6.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp1vd1_6q6.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0dvxu5u6.php:19\n\
    Stack trace:\n#0 /tmp/tmp0dvxu5u6.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp0dvxu5u6.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  $a = str_split($a);\n  $b = str_split($b);\n  for ($i = 0; $i < count($a);\
    \ $i++) {\n    $result .= $a[$i] ^ $b[$i];\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprtieo_h7.php:21\n\
    Stack trace:\n#0 /tmp/tmprtieo_h7.php(26): test()\n#1 {main}\n  thrown in /tmp/tmprtieo_h7.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $result = [];\n  for ($i = 0; $i\
    \ < count($a); $i++) {\n    $result[] = $a[$i] ^ $b[$i];\n  }\n  return implode('',\
    \ $result);\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjo0bidy3.php:21\n\
    Stack trace:\n#0 /tmp/tmpjo0bidy3.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpjo0bidy3.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $a\
    \ = str_split($a);\n    $b = str_split($b);\n    $result = [];\n    for ($i =\
    \ 0; $i < count($a); $i++) {\n        $result[] = $a[$i] ^ $b[$i];\n    }\n  \
    \  return implode('', $result);\n}\n\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpv15tr973.php:21\n\
    Stack trace:\n#0 /tmp/tmpv15tr973.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpv15tr973.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpg6t1747x.php:19\n\
    Stack trace:\n#0 /tmp/tmpg6t1747x.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpg6t1747x.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxypqkwvh.php:19\n\
    Stack trace:\n#0 /tmp/tmpxypqkwvh.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpxypqkwvh.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $result = [];\n  for ($i = 0; $i\
    \ < count($a); $i++) {\n    $result[] = $a[$i] ^ $b[$i];\n  }\n  return implode('',\
    \ $result);\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3bwd8asj.php:21\n\
    Stack trace:\n#0 /tmp/tmp3bwd8asj.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp3bwd8asj.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpz4ce80j1.php:19\n\
    Stack trace:\n#0 /tmp/tmpz4ce80j1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpz4ce80j1.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjn37g9jl.php:19\n\
    Stack trace:\n#0 /tmp/tmpjn37g9jl.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpjn37g9jl.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn27x6f4p.php:19\n\
    Stack trace:\n#0 /tmp/tmpn27x6f4p.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpn27x6f4p.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4ha9n8v2.php:19\n\
    Stack trace:\n#0 /tmp/tmp4ha9n8v2.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp4ha9n8v2.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9n544uxx.php:19\n\
    Stack trace:\n#0 /tmp/tmp9n544uxx.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp9n544uxx.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwu3tj_qa.php:19\n\
    Stack trace:\n#0 /tmp/tmpwu3tj_qa.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpwu3tj_qa.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    $a = str_split($a);\n    $b = str_split($b);\n    for ($i = 0; $i\
    \ < count($a); $i++) {\n        $result .= $a[$i] ^ $b[$i];\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzsz5ihqr.php:21\n\
    Stack trace:\n#0 /tmp/tmpzsz5ihqr.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpzsz5ihqr.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbubepy69.php:19\n\
    Stack trace:\n#0 /tmp/tmpbubepy69.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpbubepy69.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpm0y6ws1z.php:19\n\
    Stack trace:\n#0 /tmp/tmpm0y6ws1z.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpm0y6ws1z.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6qcjkylp.php:19\n\
    Stack trace:\n#0 /tmp/tmp6qcjkylp.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp6qcjkylp.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6w3y6tgt.php:19\n\
    Stack trace:\n#0 /tmp/tmp6w3y6tgt.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp6w3y6tgt.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpack0zyrz.php:19\n\
    Stack trace:\n#0 /tmp/tmpack0zyrz.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpack0zyrz.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7_y4l960.php:19\n\
    Stack trace:\n#0 /tmp/tmp7_y4l960.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp7_y4l960.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpa3uvgpa5.php:19\n\
    Stack trace:\n#0 /tmp/tmpa3uvgpa5.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpa3uvgpa5.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpag38fcxz.php:19\n\
    Stack trace:\n#0 /tmp/tmpag38fcxz.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpag38fcxz.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8eep1qdf.php:19\n\
    Stack trace:\n#0 /tmp/tmp8eep1qdf.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp8eep1qdf.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $result = [];\n  for ($i = 0; $i\
    \ < count($a); $i++) {\n    $result[] = $a[$i] ^ $b[$i];\n  }\n  return implode('',\
    \ $result);\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpf1kk7njf.php:21\n\
    Stack trace:\n#0 /tmp/tmpf1kk7njf.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpf1kk7njf.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a_arr\
    \ = str_split($a);\n  $b_arr = str_split($b);\n  $result = '';\n  for ($i = 0;\
    \ $i < count($a_arr); $i++) {\n    $result .= $a_arr[$i] ^ $b_arr[$i];\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5jkh_1p5.php:21\n\
    Stack trace:\n#0 /tmp/tmp5jkh_1p5.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp5jkh_1p5.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $a\
    \ = str_split($a);\n    $b = str_split($b);\n    $result = [];\n    for ($i =\
    \ 0; $i < count($a); $i++) {\n        $result[] = $a[$i] ^ $b[$i];\n    }\n  \
    \  return implode('', $result);\n}\n\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcmcmst_x.php:21\n\
    Stack trace:\n#0 /tmp/tmpcmcmst_x.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpcmcmst_x.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $result = '';\n  for ($i = 0; $i\
    \ < count($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7jy8c32x.php:21\n\
    Stack trace:\n#0 /tmp/tmp7jy8c32x.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp7jy8c32x.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpphtp_sg_.php:19\n\
    Stack trace:\n#0 /tmp/tmpphtp_sg_.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpphtp_sg_.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6c8mpwde.php:19\n\
    Stack trace:\n#0 /tmp/tmp6c8mpwde.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp6c8mpwde.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_b5t2vmg.php:19\n\
    Stack trace:\n#0 /tmp/tmp_b5t2vmg.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_b5t2vmg.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $result = [];\n  for ($i = 0; $i\
    \ < count($a); $i++) {\n    $result[] = $a[$i] ^ $b[$i];\n  }\n  return implode('',\
    \ $result);\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpamnxxdu6.php:21\n\
    Stack trace:\n#0 /tmp/tmpamnxxdu6.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpamnxxdu6.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8m40wwo5.php:19\n\
    Stack trace:\n#0 /tmp/tmp8m40wwo5.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp8m40wwo5.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp67glc5q4.php:19\n\
    Stack trace:\n#0 /tmp/tmp67glc5q4.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp67glc5q4.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $result = '';\n  for ($i = 0; $i\
    \ < count($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprj8q_1h9.php:21\n\
    Stack trace:\n#0 /tmp/tmprj8q_1h9.php(26): test()\n#1 {main}\n  thrown in /tmp/tmprj8q_1h9.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9gtgq0mo.php:19\n\
    Stack trace:\n#0 /tmp/tmp9gtgq0mo.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp9gtgq0mo.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  $length = strlen($a);\n  for ($i = 0; $i < $length; $i++) {\n    $result\
    \ .= $a[$i] ^ $b[$i];\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxd7zfhxw.php:20\n\
    Stack trace:\n#0 /tmp/tmpxd7zfhxw.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpxd7zfhxw.php\
    \ on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprfmh7e8h.php:19\n\
    Stack trace:\n#0 /tmp/tmprfmh7e8h.php(24): test()\n#1 {main}\n  thrown in /tmp/tmprfmh7e8h.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpq7e97cdi.php:19\n\
    Stack trace:\n#0 /tmp/tmpq7e97cdi.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpq7e97cdi.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8gpx7456.php:19\n\
    Stack trace:\n#0 /tmp/tmp8gpx7456.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp8gpx7456.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp43p5a0a_.php:19\n\
    Stack trace:\n#0 /tmp/tmp43p5a0a_.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp43p5a0a_.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4eqehtku.php:19\n\
    Stack trace:\n#0 /tmp/tmp4eqehtku.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp4eqehtku.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfu36rwq9.php:19\n\
    Stack trace:\n#0 /tmp/tmpfu36rwq9.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpfu36rwq9.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkrqe1zjr.php:19\n\
    Stack trace:\n#0 /tmp/tmpkrqe1zjr.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpkrqe1zjr.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4u8r1_9l.php:19\n\
    Stack trace:\n#0 /tmp/tmp4u8r1_9l.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp4u8r1_9l.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $a\
    \ = str_split($a);\n    $b = str_split($b);\n    $c = [];\n    for ($i = 0; $i\
    \ < count($a); $i++) {\n        $c[] = $a[$i] ^ $b[$i];\n    }\n    return implode('',\
    \ $c);\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpby_fnxf4.php:21\n\
    Stack trace:\n#0 /tmp/tmpby_fnxf4.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpby_fnxf4.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpm4j0zo1_.php:19\n\
    Stack trace:\n#0 /tmp/tmpm4j0zo1_.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpm4j0zo1_.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp83vn_oeo.php:19\n\
    Stack trace:\n#0 /tmp/tmp83vn_oeo.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp83vn_oeo.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $a\
    \ = str_split($a);\n    $b = str_split($b);\n    $result = [];\n    for ($i =\
    \ 0; $i < count($a); $i++) {\n        $result[] = $a[$i] ^ $b[$i];\n    }\n  \
    \  return implode($result);\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpazo2d5j_.php:21\n\
    Stack trace:\n#0 /tmp/tmpazo2d5j_.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpazo2d5j_.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $result = [];\n  for ($i = 0; $i\
    \ < count($a); $i++) {\n    $result[] = $a[$i] ^ $b[$i];\n  }\n  return implode('',\
    \ $result);\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2pvwii0b.php:21\n\
    Stack trace:\n#0 /tmp/tmp2pvwii0b.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp2pvwii0b.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_znm1s1g.php:19\n\
    Stack trace:\n#0 /tmp/tmp_znm1s1g.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_znm1s1g.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $c = [];\n  for ($i = 0; $i < count($a);\
    \ $i++) {\n    $c[] = $a[$i] ^ $b[$i];\n  }\n  return implode($c);\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1tcewsdl.php:21\n\
    Stack trace:\n#0 /tmp/tmp1tcewsdl.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp1tcewsdl.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpa5uuv605.php:19\n\
    Stack trace:\n#0 /tmp/tmpa5uuv605.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpa5uuv605.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6ldpqvl1.php:19\n\
    Stack trace:\n#0 /tmp/tmp6ldpqvl1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp6ldpqvl1.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_lqajtf0.php:19\n\
    Stack trace:\n#0 /tmp/tmp_lqajtf0.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_lqajtf0.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuhshs1a7.php:19\n\
    Stack trace:\n#0 /tmp/tmpuhshs1a7.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpuhshs1a7.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpb7k1en78.php:19\n\
    Stack trace:\n#0 /tmp/tmpb7k1en78.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpb7k1en78.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $result = [];\n  for ($i = 0; $i\
    \ < count($a); $i++) {\n    if ($a[$i] == $b[$i]) {\n      $result[] = 0;\n  \
    \  } else {\n      $result[] = 1;\n    }\n  }\n  return implode($result);\n}\n\
    \nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpf433sr5q.php:19\n\
    Stack trace:\n#0 /tmp/tmpf433sr5q.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpf433sr5q.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkgs6w20f.php:19\n\
    Stack trace:\n#0 /tmp/tmpkgs6w20f.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpkgs6w20f.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn0sznq3r.php:19\n\
    Stack trace:\n#0 /tmp/tmpn0sznq3r.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpn0sznq3r.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0oswliru.php:19\n\
    Stack trace:\n#0 /tmp/tmp0oswliru.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp0oswliru.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprxont24n.php:19\n\
    Stack trace:\n#0 /tmp/tmprxont24n.php(24): test()\n#1 {main}\n  thrown in /tmp/tmprxont24n.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $xor\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $xor .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $xor;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpa7f42ai4.php:19\n\
    Stack trace:\n#0 /tmp/tmpa7f42ai4.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpa7f42ai4.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp566s32je.php:19\n\
    Stack trace:\n#0 /tmp/tmp566s32je.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp566s32je.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp54uc7vbr.php:19\n\
    Stack trace:\n#0 /tmp/tmp54uc7vbr.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp54uc7vbr.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2lfufoqq.php:19\n\
    Stack trace:\n#0 /tmp/tmp2lfufoqq.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp2lfufoqq.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgl2k9kqa.php:19\n\
    Stack trace:\n#0 /tmp/tmpgl2k9kqa.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpgl2k9kqa.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmxepi9jg.php:19\n\
    Stack trace:\n#0 /tmp/tmpmxepi9jg.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpmxepi9jg.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxmc4yam2.php:19\n\
    Stack trace:\n#0 /tmp/tmpxmc4yam2.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpxmc4yam2.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $result = [];\n  for ($i = 0; $i\
    \ < count($a); $i++) {\n    $result[] = $a[$i] ^ $b[$i];\n  }\n  return implode('',\
    \ $result);\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpziv9mz3y.php:21\n\
    Stack trace:\n#0 /tmp/tmpziv9mz3y.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpziv9mz3y.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpw8vmm1ua.php:19\n\
    Stack trace:\n#0 /tmp/tmpw8vmm1ua.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpw8vmm1ua.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $result = [];\n  foreach ($a as $key\
    \ => $value) {\n    if ($value == $b[$key]) {\n      $result[] = '0';\n    } else\
    \ {\n      $result[] = '1';\n    }\n  }\n  return implode('', $result);\n}\n\n\
    function candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $result = [];\n  for ($i = 0; $i\
    \ < count($a); $i++) {\n    $result[] = $a[$i] ^ $b[$i];\n  }\n  return implode('',\
    \ $result);\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpq43rjsdu.php:21\n\
    Stack trace:\n#0 /tmp/tmpq43rjsdu.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpq43rjsdu.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpi9l49rk6.php:19\n\
    Stack trace:\n#0 /tmp/tmpi9l49rk6.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpi9l49rk6.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpw63hv453.php:19\n\
    Stack trace:\n#0 /tmp/tmpw63hv453.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpw63hv453.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpar86v1_u.php:19\n\
    Stack trace:\n#0 /tmp/tmpar86v1_u.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpar86v1_u.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $a\
    \ = str_split($a);\n    $b = str_split($b);\n    $result = '';\n    for ($i =\
    \ 0; $i < count($a); $i++) {\n        $result .= $a[$i] ^ $b[$i];\n    }\n   \
    \ return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqa0ywf79.php:21\n\
    Stack trace:\n#0 /tmp/tmpqa0ywf79.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpqa0ywf79.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpp_0dfg_8.php:19\n\
    Stack trace:\n#0 /tmp/tmpp_0dfg_8.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpp_0dfg_8.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjfnl24g8.php:19\n\
    Stack trace:\n#0 /tmp/tmpjfnl24g8.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpjfnl24g8.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpswywm8un.php:19\n\
    Stack trace:\n#0 /tmp/tmpswywm8un.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpswywm8un.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvauol65i.php:19\n\
    Stack trace:\n#0 /tmp/tmpvauol65i.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpvauol65i.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $res = '';\n  for ($i = 0; $i < count($a);\
    \ $i++) {\n    $res .= $a[$i] ^ $b[$i];\n  }\n  return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp133jl9br.php:21\n\
    Stack trace:\n#0 /tmp/tmp133jl9br.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp133jl9br.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppnmt_euu.php:19\n\
    Stack trace:\n#0 /tmp/tmppnmt_euu.php(24): test()\n#1 {main}\n  thrown in /tmp/tmppnmt_euu.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= ($a[$i] == $b[$i])\
    \ ? '0' : '1';\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbcmhsdks.php:19\n\
    Stack trace:\n#0 /tmp/tmpbcmhsdks.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpbcmhsdks.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkyr__sdl.php:19\n\
    Stack trace:\n#0 /tmp/tmpkyr__sdl.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpkyr__sdl.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpb5a0009i.php:19\n\
    Stack trace:\n#0 /tmp/tmpb5a0009i.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpb5a0009i.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn0ndhe58.php:19\n\
    Stack trace:\n#0 /tmp/tmpn0ndhe58.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpn0ndhe58.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpd0wvrwry.php:19\n\
    Stack trace:\n#0 /tmp/tmpd0wvrwry.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpd0wvrwry.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpu_ffir4_.php:19\n\
    Stack trace:\n#0 /tmp/tmpu_ffir4_.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpu_ffir4_.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $a\
    \ = str_split($a);\n    $b = str_split($b);\n    $result = '';\n    for ($i =\
    \ 0; $i < count($a); $i++) {\n        $result .= $a[$i] ^ $b[$i];\n    }\n   \
    \ return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2amzrq47.php:21\n\
    Stack trace:\n#0 /tmp/tmp2amzrq47.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp2amzrq47.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzi4kzc8p.php:19\n\
    Stack trace:\n#0 /tmp/tmpzi4kzc8p.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpzi4kzc8p.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpg2l_xlzu.php:19\n\
    Stack trace:\n#0 /tmp/tmpg2l_xlzu.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpg2l_xlzu.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpq5ud1b6_.php:19\n\
    Stack trace:\n#0 /tmp/tmpq5ud1b6_.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpq5ud1b6_.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $a\
    \ = str_split($a);\n    $b = str_split($b);\n    $result = [];\n    for ($i =\
    \ 0; $i < count($a); $i++) {\n        $result[] = $a[$i] ^ $b[$i];\n    }\n  \
    \  return implode('', $result);\n}\n\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppt43f9zc.php:21\n\
    Stack trace:\n#0 /tmp/tmppt43f9zc.php(26): test()\n#1 {main}\n  thrown in /tmp/tmppt43f9zc.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9ijvxknn.php:19\n\
    Stack trace:\n#0 /tmp/tmp9ijvxknn.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp9ijvxknn.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpb2s1r6d5.php:19\n\
    Stack trace:\n#0 /tmp/tmpb2s1r6d5.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpb2s1r6d5.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $result = '';\n  for ($i = 0; $i\
    \ < count($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpo5he0tws.php:21\n\
    Stack trace:\n#0 /tmp/tmpo5he0tws.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpo5he0tws.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfz_esnul.php:19\n\
    Stack trace:\n#0 /tmp/tmpfz_esnul.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpfz_esnul.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $result = [];\n  for ($i = 0; $i\
    \ < count($a); $i++) {\n    $result[] = $a[$i] ^ $b[$i];\n  }\n  return implode('',\
    \ $result);\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5eovv97w.php:21\n\
    Stack trace:\n#0 /tmp/tmp5eovv97w.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp5eovv97w.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6e47pnjl.php:19\n\
    Stack trace:\n#0 /tmp/tmp6e47pnjl.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp6e47pnjl.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $a\
    \ = str_split($a);\n    $b = str_split($b);\n    $result = [];\n    for ($i =\
    \ 0; $i < count($a); $i++) {\n        $result[] = $a[$i] ^ $b[$i];\n    }\n  \
    \  return implode('', $result);\n}\n\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvjhdjkk2.php:21\n\
    Stack trace:\n#0 /tmp/tmpvjhdjkk2.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpvjhdjkk2.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2mn2q1n5.php:19\n\
    Stack trace:\n#0 /tmp/tmp2mn2q1n5.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp2mn2q1n5.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpykcbirtg.php:19\n\
    Stack trace:\n#0 /tmp/tmpykcbirtg.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpykcbirtg.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp86pn5t60.php:19\n\
    Stack trace:\n#0 /tmp/tmp86pn5t60.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp86pn5t60.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $result = [];\n  for ($i = 0; $i\
    \ < count($a); $i++) {\n    $result[] = $a[$i] ^ $b[$i];\n  }\n  return implode($result);\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxhni_uln.php:21\n\
    Stack trace:\n#0 /tmp/tmpxhni_uln.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpxhni_uln.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpco388fhe.php:19\n\
    Stack trace:\n#0 /tmp/tmpco388fhe.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpco388fhe.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplvwk74uv.php:19\n\
    Stack trace:\n#0 /tmp/tmplvwk74uv.php(24): test()\n#1 {main}\n  thrown in /tmp/tmplvwk74uv.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4j4t06zp.php:19\n\
    Stack trace:\n#0 /tmp/tmp4j4t06zp.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp4j4t06zp.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmph7dzc7ob.php:19\n\
    Stack trace:\n#0 /tmp/tmph7dzc7ob.php(24): test()\n#1 {main}\n  thrown in /tmp/tmph7dzc7ob.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  $a = str_split($a);\n  $b = str_split($b);\n  for ($i = 0; $i < count($a);\
    \ $i++) {\n    $result .= $a[$i] ^ $b[$i];\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprv4a9gn0.php:21\n\
    Stack trace:\n#0 /tmp/tmprv4a9gn0.php(26): test()\n#1 {main}\n  thrown in /tmp/tmprv4a9gn0.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_9_e92n9.php:19\n\
    Stack trace:\n#0 /tmp/tmp_9_e92n9.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_9_e92n9.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n    $result\
    \ = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i]\
    \ ^ $b[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgefau16z.php:19\n\
    Stack trace:\n#0 /tmp/tmpgefau16z.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpgefau16z.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn0jf9kgq.php:19\n\
    Stack trace:\n#0 /tmp/tmpn0jf9kgq.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpn0jf9kgq.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdjlpeofb.php:19\n\
    Stack trace:\n#0 /tmp/tmpdjlpeofb.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpdjlpeofb.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = \"\";\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppm8emc6i.php:19\n\
    Stack trace:\n#0 /tmp/tmppm8emc6i.php(24): test()\n#1 {main}\n  thrown in /tmp/tmppm8emc6i.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $result = [];\n  foreach ($a as $i\
    \ => $v) {\n    $result[] = $v ^ $b[$i];\n  }\n  return implode('', $result);\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppydox3x5.php:21\n\
    Stack trace:\n#0 /tmp/tmppydox3x5.php(26): test()\n#1 {main}\n  thrown in /tmp/tmppydox3x5.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9myh45nm.php:19\n\
    Stack trace:\n#0 /tmp/tmp9myh45nm.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp9myh45nm.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $result = [];\n  for ($i = 0; $i\
    \ < count($a); $i++) {\n    $result[] = $a[$i] ^ $b[$i];\n  }\n  return implode('',\
    \ $result);\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpf0ftbdx2.php:21\n\
    Stack trace:\n#0 /tmp/tmpf0ftbdx2.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpf0ftbdx2.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $c = [];\n  for ($i = 0; $i < count($a);\
    \ $i++) {\n    $c[] = $a[$i] ^ $b[$i];\n  }\n  return implode('', $c);\n}\n\n\
    function candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8s3t7f5u.php:21\n\
    Stack trace:\n#0 /tmp/tmp8s3t7f5u.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp8s3t7f5u.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp072_r4fx.php:19\n\
    Stack trace:\n#0 /tmp/tmp072_r4fx.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp072_r4fx.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_dnaeh_s.php:19\n\
    Stack trace:\n#0 /tmp/tmp_dnaeh_s.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_dnaeh_s.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $result = [];\n  for ($i = 0; $i\
    \ < count($a); $i++) {\n    $result[] = $a[$i] ^ $b[$i];\n  }\n  return implode('',\
    \ $result);\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp24i6i2y1.php:21\n\
    Stack trace:\n#0 /tmp/tmp24i6i2y1.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp24i6i2y1.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $result = [];\n  for ($i = 0; $i\
    \ < count($a); $i++) {\n    $result[] = $a[$i] ^ $b[$i];\n  }\n  return implode('',\
    \ $result);\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3dbin04j.php:21\n\
    Stack trace:\n#0 /tmp/tmp3dbin04j.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp3dbin04j.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpplguqm5l.php:19\n\
    Stack trace:\n#0 /tmp/tmpplguqm5l.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpplguqm5l.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp35hv4k0x.php:19\n\
    Stack trace:\n#0 /tmp/tmp35hv4k0x.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp35hv4k0x.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyzfh0c3o.php:19\n\
    Stack trace:\n#0 /tmp/tmpyzfh0c3o.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpyzfh0c3o.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzi4fltue.php:19\n\
    Stack trace:\n#0 /tmp/tmpzi4fltue.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpzi4fltue.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppsywkt17.php:19\n\
    Stack trace:\n#0 /tmp/tmppsywkt17.php(24): test()\n#1 {main}\n  thrown in /tmp/tmppsywkt17.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $result = [];\n  for ($i = 0; $i\
    \ < count($a); $i++) {\n    $result[] = $a[$i] ^ $b[$i];\n  }\n  return implode('',\
    \ $result);\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplvhjoi32.php:21\n\
    Stack trace:\n#0 /tmp/tmplvhjoi32.php(26): test()\n#1 {main}\n  thrown in /tmp/tmplvhjoi32.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpihq_emq8.php:19\n\
    Stack trace:\n#0 /tmp/tmpihq_emq8.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpihq_emq8.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplddcxm57.php:19\n\
    Stack trace:\n#0 /tmp/tmplddcxm57.php(24): test()\n#1 {main}\n  thrown in /tmp/tmplddcxm57.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n    $result .= $a[$i] ^ $b[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1vdxs4b9.php:19\n\
    Stack trace:\n#0 /tmp/tmp1vdxs4b9.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp1vdxs4b9.php\
    \ on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\n//\
    \ >>> string_xor('010', '110')\n// '100'\nfunction string_xor($a, $b) {\n  $a\
    \ = str_split($a);\n  $b = str_split($b);\n  $result = [];\n  for ($i = 0; $i\
    \ < count($a); $i++) {\n    $result[] = $a[$i] ^ $b[$i];\n  }\n  return implode('',\
    \ $result);\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjt50fn7b.php:21\n\
    Stack trace:\n#0 /tmp/tmpjt50fn7b.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpjt50fn7b.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
