name: HumanEval_115_max_fill
language: php
results:
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well == 1) {\n                $fill++;\n     \
    \       } else {\n                $max_fill = max($max_fill, $fill);\n       \
    \         $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpk_qunf8p.php:50\n\
    Stack trace:\n#0 /tmp/tmpk_qunf8p.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpk_qunf8p.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpc9mbqrhc.php:41\n\
    Stack trace:\n#0 /tmp/tmpc9mbqrhc.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpc9mbqrhc.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $cell) {\n            if ($cell == 1) {\n                $fill++;\n     \
    \       } else {\n                $max_fill = max($max_fill, $fill);\n       \
    \         $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwh5lbqa0.php:50\n\
    Stack trace:\n#0 /tmp/tmpwh5lbqa0.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpwh5lbqa0.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpl17p3wqk.php:41\n\
    Stack trace:\n#0 /tmp/tmpl17p3wqk.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpl17p3wqk.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well == 1) {\n                $fill++;\n     \
    \       } else {\n                $max_fill = max($max_fill, $fill);\n       \
    \         $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmph__fcgbm.php:50\n\
    Stack trace:\n#0 /tmp/tmph__fcgbm.php(57): test()\n#1 {main}\n  thrown in /tmp/tmph__fcgbm.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpr93hv9cc.php:41\n\
    Stack trace:\n#0 /tmp/tmpr93hv9cc.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpr93hv9cc.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well == 1) {\n                $fill++;\n     \
    \       } else {\n                $max_fill = max($max_fill, $fill);\n       \
    \         $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpl5hwp5vm.php:50\n\
    Stack trace:\n#0 /tmp/tmpl5hwp5vm.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpl5hwp5vm.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpznhucl8m.php:41\n\
    Stack trace:\n#0 /tmp/tmpznhucl8m.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpznhucl8m.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpv9ps9h1r.php:41\n\
    Stack trace:\n#0 /tmp/tmpv9ps9h1r.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpv9ps9h1r.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well == 1) {\n                $fill++;\n     \
    \       } else {\n                $max_fill = max($max_fill, $fill);\n       \
    \         $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpo77z8x5z.php:50\n\
    Stack trace:\n#0 /tmp/tmpo77z8x5z.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpo77z8x5z.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpf388ps50.php:41\n\
    Stack trace:\n#0 /tmp/tmpf388ps50.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpf388ps50.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpoqd1b64l.php:41\n\
    Stack trace:\n#0 /tmp/tmpoqd1b64l.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpoqd1b64l.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_bc8_k4j.php:41\n\
    Stack trace:\n#0 /tmp/tmp_bc8_k4j.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp_bc8_k4j.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    $row_count = count($grid);\n    $col_count = count($grid[0]);\n    for\
    \ ($i = 0; $i < $row_count; $i++) {\n        for ($j = 0; $j < $col_count; $j++)\
    \ {\n            if ($grid[$i][$j] == 1) {\n                $max_fill += $capacity;\n\
    \            }\n        }\n    }\n    return $max_fill;\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgfk_dujq.php:48\n\
    Stack trace:\n#0 /tmp/tmpgfk_dujq.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpgfk_dujq.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return min($max_fill, $capacity);\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpj755c41m.php:41\n\
    Stack trace:\n#0 /tmp/tmpj755c41m.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpj755c41m.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well) {\n                $fill++;\n          \
    \  } else {\n                $max_fill = max($max_fill, $fill);\n            \
    \    $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpj1qx5f1k.php:50\n\
    Stack trace:\n#0 /tmp/tmpj1qx5f1k.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpj1qx5f1k.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    $max_fill = min($max_fill, $capacity);\n    return $max_fill;\n}\n\
    function candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1,\
    \ 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8fvgij2v.php:42\n\
    Stack trace:\n#0 /tmp/tmp8fvgij2v.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp8fvgij2v.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqiz1_m2s.php:41\n\
    Stack trace:\n#0 /tmp/tmpqiz1_m2s.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpqiz1_m2s.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpc17jysno.php:41\n\
    Stack trace:\n#0 /tmp/tmpc17jysno.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpc17jysno.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well == 1) {\n                $fill++;\n     \
    \       } else {\n                $max_fill = max($max_fill, $fill);\n       \
    \         $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnrb3kobs.php:50\n\
    Stack trace:\n#0 /tmp/tmpnrb3kobs.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpnrb3kobs.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    $num_rows = count($grid);\n    $num_cols = count($grid[0]);\n    for\
    \ ($i=0; $i<$num_rows; $i++) {\n        for ($j=0; $j<$num_cols; $j++) {\n   \
    \         $max_fill = max($max_fill, $grid[$i][$j]);\n        }\n    }\n    return\
    \ $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpb6suw2f1.php:45\n\
    Stack trace:\n#0 /tmp/tmpb6suw2f1.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpb6suw2f1.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n    for ($i=0;\
    \ $i<$rows; $i++) {\n        for ($j=0; $j<$cols; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $max_fill = max($max_fill, $capacity);\n          \
    \  } else {\n                $max_fill = max($max_fill, 0);\n            }\n \
    \       }\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7njjn0ui.php:49\n\
    Stack trace:\n#0 /tmp/tmp7njjn0ui.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp7njjn0ui.php\
    \ on line 49\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well == 1) {\n                $fill++;\n     \
    \       } else {\n                $max_fill = max($max_fill, $fill);\n       \
    \         $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3_5x85sg.php:50\n\
    Stack trace:\n#0 /tmp/tmp3_5x85sg.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp3_5x85sg.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return min($max_fill, $capacity);\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpq84h703j.php:41\n\
    Stack trace:\n#0 /tmp/tmpq84h703j.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpq84h703j.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n    for ($i=0;\
    \ $i<$rows; $i++) {\n        for ($j=0; $j<$cols; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $max_fill = max($max_fill, $capacity);\n          \
    \  } else {\n                $max_fill = max($max_fill, 0);\n            }\n \
    \       }\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpp8ti9ujp.php:49\n\
    Stack trace:\n#0 /tmp/tmpp8ti9ujp.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpp8ti9ujp.php\
    \ on line 49\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well) {\n                $fill++;\n          \
    \  } else {\n                $max_fill = max($max_fill, $fill);\n            \
    \    $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgq6wl0e2.php:50\n\
    Stack trace:\n#0 /tmp/tmpgq6wl0e2.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpgq6wl0e2.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well == 1) {\n                $fill++;\n     \
    \       } else {\n                $max_fill = max($max_fill, $fill);\n       \
    \         $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpizgvkr1_.php:50\n\
    Stack trace:\n#0 /tmp/tmpizgvkr1_.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpizgvkr1_.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $cell) {\n            if ($cell == 1) {\n                $fill++;\n     \
    \       } else {\n                $max_fill = max($max_fill, $fill);\n       \
    \         $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpo3z0h_6d.php:50\n\
    Stack trace:\n#0 /tmp/tmpo3z0h_6d.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpo3z0h_6d.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well == 1) {\n                $fill++;\n     \
    \       } else {\n                $max_fill = max($max_fill, $fill);\n       \
    \         $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpi0jcy0zs.php:50\n\
    Stack trace:\n#0 /tmp/tmpi0jcy0zs.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpi0jcy0zs.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well == 1) {\n                $fill++;\n     \
    \       } else {\n                $max_fill = max($max_fill, $fill);\n       \
    \         $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5lp2qhu8.php:50\n\
    Stack trace:\n#0 /tmp/tmp5lp2qhu8.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp5lp2qhu8.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well == 1) {\n                $fill++;\n     \
    \       } else {\n                $max_fill = max($max_fill, $fill);\n       \
    \         $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmj_f0_lr.php:50\n\
    Stack trace:\n#0 /tmp/tmpmj_f0_lr.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpmj_f0_lr.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjrhch8v4.php:41\n\
    Stack trace:\n#0 /tmp/tmpjrhch8v4.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpjrhch8v4.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpk2min917.php:41\n\
    Stack trace:\n#0 /tmp/tmpk2min917.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpk2min917.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2rg0bznn.php:41\n\
    Stack trace:\n#0 /tmp/tmp2rg0bznn.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp2rg0bznn.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpm72x07zi.php:41\n\
    Stack trace:\n#0 /tmp/tmpm72x07zi.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpm72x07zi.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well == 1) {\n                $fill++;\n     \
    \       } else {\n                $max_fill = max($max_fill, $fill);\n       \
    \         $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7_93cjyh.php:50\n\
    Stack trace:\n#0 /tmp/tmp7_93cjyh.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp7_93cjyh.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpctiv7fum.php:41\n\
    Stack trace:\n#0 /tmp/tmpctiv7fum.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpctiv7fum.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3rmmx5j5.php:41\n\
    Stack trace:\n#0 /tmp/tmp3rmmx5j5.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp3rmmx5j5.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprakcer9c.php:41\n\
    Stack trace:\n#0 /tmp/tmprakcer9c.php(48): test()\n#1 {main}\n  thrown in /tmp/tmprakcer9c.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well) {\n                $fill++;\n          \
    \  } else {\n                $max_fill = max($max_fill, $fill);\n            \
    \    $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpktwrim0q.php:50\n\
    Stack trace:\n#0 /tmp/tmpktwrim0q.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpktwrim0q.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3k1wyvgh.php:41\n\
    Stack trace:\n#0 /tmp/tmp3k1wyvgh.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp3k1wyvgh.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n    for ($i=0;\
    \ $i<$rows; $i++) {\n        for ($j=0; $j<$cols; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $max_fill = max($max_fill, $capacity);\n          \
    \  } else {\n                $max_fill = max($max_fill, 0);\n            }\n \
    \       }\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphf_st4ix.php:49\n\
    Stack trace:\n#0 /tmp/tmphf_st4ix.php(56): test()\n#1 {main}\n  thrown in /tmp/tmphf_st4ix.php\
    \ on line 49\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprkzqgpkc.php:41\n\
    Stack trace:\n#0 /tmp/tmprkzqgpkc.php(48): test()\n#1 {main}\n  thrown in /tmp/tmprkzqgpkc.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well === 1) {\n                $fill++;\n    \
    \        } else {\n                $max_fill = max($max_fill, $fill);\n      \
    \          $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1gx9u5uk.php:50\n\
    Stack trace:\n#0 /tmp/tmp1gx9u5uk.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp1gx9u5uk.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmle93b1i.php:41\n\
    Stack trace:\n#0 /tmp/tmpmle93b1i.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpmle93b1i.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjqhmd4z4.php:41\n\
    Stack trace:\n#0 /tmp/tmpjqhmd4z4.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpjqhmd4z4.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $num_rows =\
    \ count($grid);\n    $num_cols = count($grid[0]);\n    $max_fill = 0;\n    for\
    \ ($i=0; $i<$num_rows; $i++) {\n        $fill = 0;\n        for ($j=0; $j<$num_cols;\
    \ $j++) {\n            $fill += $grid[$i][$j];\n            if ($fill > $capacity)\
    \ {\n                $max_fill = max($max_fill, $capacity);\n                $fill\
    \ = $grid[$i][$j];\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuvqie5r0.php:51\n\
    Stack trace:\n#0 /tmp/tmpuvqie5r0.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpuvqie5r0.php\
    \ on line 51\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    $max_fill_row = 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n\
    \        foreach ($row as $well) {\n            $fill += $well;\n        }\n \
    \       if ($fill > $max_fill) {\n            $max_fill = $fill;\n           \
    \ $max_fill_row = 1;\n        } else if ($fill == $max_fill) {\n            $max_fill_row++;\n\
    \        }\n    }\n    return $max_fill * $max_fill_row;\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7yoevpom.php:51\n\
    Stack trace:\n#0 /tmp/tmp7yoevpom.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp7yoevpom.php\
    \ on line 51\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n    for ($i=0;\
    \ $i<$rows; $i++) {\n        for ($j=0; $j<$cols; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $max_fill = max($max_fill, $capacity);\n          \
    \  } else {\n                $max_fill = max($max_fill, 0);\n            }\n \
    \       }\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2tnwsdsj.php:49\n\
    Stack trace:\n#0 /tmp/tmp2tnwsdsj.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp2tnwsdsj.php\
    \ on line 49\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $cell) {\n            if ($cell == 1) {\n                $fill++;\n     \
    \       } else {\n                $max_fill = max($max_fill, $fill);\n       \
    \         $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9eg8xr7v.php:50\n\
    Stack trace:\n#0 /tmp/tmp9eg8xr7v.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp9eg8xr7v.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n    for ($i=0;\
    \ $i<$rows; $i++) {\n        for ($j=0; $j<$cols; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $max_fill = max($max_fill, $capacity - $grid[$i][$j]);\n\
    \            }\n        }\n    }\n    return $max_fill;\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvzft_hze.php:47\n\
    Stack trace:\n#0 /tmp/tmpvzft_hze.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpvzft_hze.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcji8aql2.php:41\n\
    Stack trace:\n#0 /tmp/tmpcji8aql2.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpcji8aql2.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8ujuutnh.php:41\n\
    Stack trace:\n#0 /tmp/tmp8ujuutnh.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp8ujuutnh.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0km0bsbm.php:41\n\
    Stack trace:\n#0 /tmp/tmp0km0bsbm.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp0km0bsbm.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmph2u7wb5i.php:41\n\
    Stack trace:\n#0 /tmp/tmph2u7wb5i.php(48): test()\n#1 {main}\n  thrown in /tmp/tmph2u7wb5i.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpa124lc2w.php:41\n\
    Stack trace:\n#0 /tmp/tmpa124lc2w.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpa124lc2w.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqvpxr0ht.php:41\n\
    Stack trace:\n#0 /tmp/tmpqvpxr0ht.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpqvpxr0ht.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well) {\n                $fill++;\n          \
    \  } else {\n                $max_fill = max($max_fill, $fill);\n            \
    \    $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_vb3h32g.php:50\n\
    Stack trace:\n#0 /tmp/tmp_vb3h32g.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp_vb3h32g.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $cell) {\n            if ($cell == 1) {\n                $fill++;\n     \
    \       } else {\n                $max_fill = max($max_fill, $fill);\n       \
    \         $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpou5ts9pu.php:50\n\
    Stack trace:\n#0 /tmp/tmpou5ts9pu.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpou5ts9pu.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyq_jufrw.php:41\n\
    Stack trace:\n#0 /tmp/tmpyq_jufrw.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpyq_jufrw.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3jt0qec5.php:41\n\
    Stack trace:\n#0 /tmp/tmp3jt0qec5.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp3jt0qec5.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    $num_rows = count($grid);\n    $num_cols = count($grid[0]);\n    for\
    \ ($i=0; $i<$num_rows; $i++) {\n        for ($j=0; $j<$num_cols; $j++) {\n   \
    \         $max_fill = max($max_fill, $grid[$i][$j]);\n        }\n    }\n    return\
    \ $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_3mugo5i.php:45\n\
    Stack trace:\n#0 /tmp/tmp_3mugo5i.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp_3mugo5i.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdupi_9oa.php:41\n\
    Stack trace:\n#0 /tmp/tmpdupi_9oa.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpdupi_9oa.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkjzw1700.php:41\n\
    Stack trace:\n#0 /tmp/tmpkjzw1700.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpkjzw1700.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    $grid_length = count($grid);\n    $grid_width = count($grid[0]);\n \
    \   for ($i = 0; $i < $grid_length; $i++) {\n        for ($j = 0; $j < $grid_width;\
    \ $j++) {\n            if ($grid[$i][$j] == 1) {\n                $max_fill +=\
    \ $capacity;\n            }\n        }\n    }\n    return $max_fill;\n}\nfunction\
    \ candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1,\
    \ 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 0), array(0, 0, 0)), 5) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwzqmxgc1.php:48\n\
    Stack trace:\n#0 /tmp/tmpwzqmxgc1.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpwzqmxgc1.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return min($max_fill, $capacity);\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppfrle40q.php:41\n\
    Stack trace:\n#0 /tmp/tmppfrle40q.php(48): test()\n#1 {main}\n  thrown in /tmp/tmppfrle40q.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return min($max_fill, $capacity);\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpeu0bk59s.php:41\n\
    Stack trace:\n#0 /tmp/tmpeu0bk59s.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpeu0bk59s.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7bdlk6d1.php:41\n\
    Stack trace:\n#0 /tmp/tmp7bdlk6d1.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp7bdlk6d1.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_m3a70r5.php:41\n\
    Stack trace:\n#0 /tmp/tmp_m3a70r5.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp_m3a70r5.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp82o2_jt0.php:41\n\
    Stack trace:\n#0 /tmp/tmp82o2_jt0.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp82o2_jt0.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmph1pg_xt_.php:41\n\
    Stack trace:\n#0 /tmp/tmph1pg_xt_.php(48): test()\n#1 {main}\n  thrown in /tmp/tmph1pg_xt_.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well) {\n                $fill++;\n          \
    \  } else {\n                $max_fill = max($max_fill, $fill);\n            \
    \    $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpe1br43lk.php:50\n\
    Stack trace:\n#0 /tmp/tmpe1br43lk.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpe1br43lk.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well) {\n                $fill++;\n          \
    \  } else {\n                $max_fill = max($max_fill, $fill);\n            \
    \    $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdv0m_98z.php:50\n\
    Stack trace:\n#0 /tmp/tmpdv0m_98z.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpdv0m_98z.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqc_ahoa7.php:41\n\
    Stack trace:\n#0 /tmp/tmpqc_ahoa7.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpqc_ahoa7.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplvw8fi4t.php:41\n\
    Stack trace:\n#0 /tmp/tmplvw8fi4t.php(48): test()\n#1 {main}\n  thrown in /tmp/tmplvw8fi4t.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpesq69ygk.php:41\n\
    Stack trace:\n#0 /tmp/tmpesq69ygk.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpesq69ygk.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n    for ($i=0;\
    \ $i<$rows; $i++) {\n        for ($j=0; $j<$cols; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $max_fill += $capacity;\n            }\n        }\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0kcmr7ov.php:48\n\
    Stack trace:\n#0 /tmp/tmp0kcmr7ov.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp0kcmr7ov.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpd3xqi8ni.php:41\n\
    Stack trace:\n#0 /tmp/tmpd3xqi8ni.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpd3xqi8ni.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max = 0;\n\
    \    foreach ($grid as $row) {\n        $max = max($max, max($row));\n    }\n\
    \    $min = 0;\n    while ($min < $max) {\n        $mid = floor(($min + $max)\
    \ / 2);\n        if (can_fill($grid, $capacity, $mid)) {\n            $min = $mid\
    \ + 1;\n        } else {\n            $max = $mid;\n        }\n    }\n    return\
    \ $min;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function can_fill()\
    \ in /tmp/tmpm0dln5a7.php:37\nStack trace:\n#0 /tmp/tmpm0dln5a7.php(46): max_fill()\n\
    #1 /tmp/tmpm0dln5a7.php(50): candidate()\n#2 /tmp/tmpm0dln5a7.php(57): test()\n\
    #3 {main}\n  thrown in /tmp/tmpm0dln5a7.php on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well) {\n                $fill++;\n          \
    \  } else {\n                $max_fill = max($max_fill, $fill);\n            \
    \    $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpi91yu1in.php:50\n\
    Stack trace:\n#0 /tmp/tmpi91yu1in.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpi91yu1in.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well) {\n                $fill++;\n          \
    \  } else {\n                $max_fill = max($max_fill, $fill);\n            \
    \    $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn3k07ske.php:50\n\
    Stack trace:\n#0 /tmp/tmpn3k07ske.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpn3k07ske.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp581i52xs.php:41\n\
    Stack trace:\n#0 /tmp/tmp581i52xs.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp581i52xs.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkomc77ka.php:41\n\
    Stack trace:\n#0 /tmp/tmpkomc77ka.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpkomc77ka.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return min($max_fill, $capacity);\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpj60978nb.php:41\n\
    Stack trace:\n#0 /tmp/tmpj60978nb.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpj60978nb.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcz165vbn.php:41\n\
    Stack trace:\n#0 /tmp/tmpcz165vbn.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpcz165vbn.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well == 1) {\n                $fill++;\n     \
    \       } else {\n                $max_fill = max($max_fill, $fill);\n       \
    \         $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpf11ok6pl.php:50\n\
    Stack trace:\n#0 /tmp/tmpf11ok6pl.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpf11ok6pl.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well === 1) {\n                $fill++;\n    \
    \        } else {\n                $max_fill = max($max_fill, $fill);\n      \
    \          $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpz_t5rspa.php:50\n\
    Stack trace:\n#0 /tmp/tmpz_t5rspa.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpz_t5rspa.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return min($max_fill, $capacity);\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppdhmb6ec.php:41\n\
    Stack trace:\n#0 /tmp/tmppdhmb6ec.php(48): test()\n#1 {main}\n  thrown in /tmp/tmppdhmb6ec.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well == 1) {\n                $fill++;\n     \
    \       } else {\n                $max_fill = max($max_fill, $fill);\n       \
    \         $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpk9cssqy7.php:50\n\
    Stack trace:\n#0 /tmp/tmpk9cssqy7.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpk9cssqy7.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well == 1) {\n                $fill++;\n     \
    \       } else {\n                $max_fill = max($max_fill, $fill);\n       \
    \         $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp__d2j4u4.php:50\n\
    Stack trace:\n#0 /tmp/tmp__d2j4u4.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp__d2j4u4.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpid7cc52d.php:41\n\
    Stack trace:\n#0 /tmp/tmpid7cc52d.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpid7cc52d.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well == 1) {\n                $fill++;\n     \
    \       } else {\n                $max_fill = max($max_fill, $fill);\n       \
    \         $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgse9dqv4.php:50\n\
    Stack trace:\n#0 /tmp/tmpgse9dqv4.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpgse9dqv4.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjvj0mlxr.php:41\n\
    Stack trace:\n#0 /tmp/tmpjvj0mlxr.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpjvj0mlxr.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return min($max_fill, $capacity);\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5fmvzay_.php:41\n\
    Stack trace:\n#0 /tmp/tmp5fmvzay_.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp5fmvzay_.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjodtzrvg.php:41\n\
    Stack trace:\n#0 /tmp/tmpjodtzrvg.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpjodtzrvg.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbkd7n8os.php:41\n\
    Stack trace:\n#0 /tmp/tmpbkd7n8os.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpbkd7n8os.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n    for ($i=0;\
    \ $i<$rows; $i++) {\n        for ($j=0; $j<$cols; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $max_fill = max($max_fill, $capacity);\n          \
    \  } else {\n                $max_fill = max($max_fill, 0);\n            }\n \
    \       }\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpja802h_t.php:49\n\
    Stack trace:\n#0 /tmp/tmpja802h_t.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpja802h_t.php\
    \ on line 49\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpechhfbts.php:41\n\
    Stack trace:\n#0 /tmp/tmpechhfbts.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpechhfbts.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return min($max_fill, $capacity);\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptmqfw374.php:41\n\
    Stack trace:\n#0 /tmp/tmptmqfw374.php(48): test()\n#1 {main}\n  thrown in /tmp/tmptmqfw374.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfocnaev7.php:41\n\
    Stack trace:\n#0 /tmp/tmpfocnaev7.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpfocnaev7.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp18i7hd71.php:41\n\
    Stack trace:\n#0 /tmp/tmp18i7hd71.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp18i7hd71.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well == 1) {\n                $fill++;\n     \
    \       } else {\n                $max_fill = max($max_fill, $fill);\n       \
    \         $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpx9_mup77.php:50\n\
    Stack trace:\n#0 /tmp/tmpx9_mup77.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpx9_mup77.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well) {\n                $fill++;\n          \
    \  } else {\n                $max_fill = max($max_fill, $fill);\n            \
    \    $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn7izgjcv.php:50\n\
    Stack trace:\n#0 /tmp/tmpn7izgjcv.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpn7izgjcv.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    $num_rows = count($grid);\n    $num_cols = count($grid[0]);\n    for\
    \ ($i=0; $i<$num_rows; $i++) {\n        for ($j=0; $j<$num_cols; $j++) {\n   \
    \         $max_fill = max($max_fill, $grid[$i][$j]);\n        }\n    }\n    return\
    \ $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwgtz3ppo.php:45\n\
    Stack trace:\n#0 /tmp/tmpwgtz3ppo.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpwgtz3ppo.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcn9qorsk.php:41\n\
    Stack trace:\n#0 /tmp/tmpcn9qorsk.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpcn9qorsk.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpr0idh4o8.php:41\n\
    Stack trace:\n#0 /tmp/tmpr0idh4o8.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpr0idh4o8.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    $row_count = count($grid);\n    $col_count = count($grid[0]);\n    for\
    \ ($i = 0; $i < $row_count; $i++) {\n        for ($j = 0; $j < $col_count; $j++)\
    \ {\n            if ($grid[$i][$j] == 1) {\n                $max_fill += $capacity;\n\
    \            }\n        }\n    }\n    return $max_fill;\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5fe8l4cn.php:48\n\
    Stack trace:\n#0 /tmp/tmp5fe8l4cn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp5fe8l4cn.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $row_count =\
    \ count($grid);\n    $col_count = count($grid[0]);\n    $max_fill = 0;\n    for\
    \ ($i=0; $i<$row_count; $i++) {\n        for ($j=0; $j<$col_count; $j++) {\n \
    \           if ($grid[$i][$j] == 1) {\n                $max_fill = max($max_fill,\
    \ $capacity);\n            }\n        }\n    }\n    return $max_fill;\n}\nfunction\
    \ candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1,\
    \ 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
    \ 0, 0), array(0, 0, 0)), 5) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpumcslcdr.php:47\n\
    Stack trace:\n#0 /tmp/tmpumcslcdr.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpumcslcdr.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5kyyod08.php:41\n\
    Stack trace:\n#0 /tmp/tmp5kyyod08.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp5kyyod08.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return min($max_fill, $capacity);\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfhie5pj8.php:41\n\
    Stack trace:\n#0 /tmp/tmpfhie5pj8.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpfhie5pj8.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpz6iigpag.php:41\n\
    Stack trace:\n#0 /tmp/tmpz6iigpag.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpz6iigpag.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n    for ($i=0;\
    \ $i<$rows; $i++) {\n        for ($j=0; $j<$cols; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $max_fill = max($max_fill, $capacity);\n          \
    \  } else {\n                $max_fill = max($max_fill, 0);\n            }\n \
    \       }\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpan8_mpr2.php:49\n\
    Stack trace:\n#0 /tmp/tmpan8_mpr2.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpan8_mpr2.php\
    \ on line 49\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return min($max_fill, $capacity);\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyerb1lxz.php:41\n\
    Stack trace:\n#0 /tmp/tmpyerb1lxz.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpyerb1lxz.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpl31n6c73.php:41\n\
    Stack trace:\n#0 /tmp/tmpl31n6c73.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpl31n6c73.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpk_gm2qt1.php:41\n\
    Stack trace:\n#0 /tmp/tmpk_gm2qt1.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpk_gm2qt1.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well) {\n                $fill++;\n          \
    \  } else {\n                $max_fill = max($max_fill, $fill);\n            \
    \    $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptrog04hl.php:50\n\
    Stack trace:\n#0 /tmp/tmptrog04hl.php(57): test()\n#1 {main}\n  thrown in /tmp/tmptrog04hl.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    $num_rows = count($grid);\n    $num_cols = count($grid[0]);\n    for\
    \ ($i=0; $i<$num_rows; $i++) {\n        for ($j=0; $j<$num_cols; $j++) {\n   \
    \         $max_fill = max($max_fill, $grid[$i][$j]);\n        }\n    }\n    return\
    \ $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp13qla53v.php:45\n\
    Stack trace:\n#0 /tmp/tmp13qla53v.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp13qla53v.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpl99afa4b.php:41\n\
    Stack trace:\n#0 /tmp/tmpl99afa4b.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpl99afa4b.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well == 1) {\n                $fill++;\n     \
    \       } else {\n                $max_fill = max($max_fill, $fill);\n       \
    \         $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmps9ttar4q.php:50\n\
    Stack trace:\n#0 /tmp/tmps9ttar4q.php(57): test()\n#1 {main}\n  thrown in /tmp/tmps9ttar4q.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $cell) {\n            if ($cell == 1) {\n                $fill++;\n     \
    \       } else {\n                $max_fill = max($max_fill, $fill);\n       \
    \         $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpq1mtbuox.php:50\n\
    Stack trace:\n#0 /tmp/tmpq1mtbuox.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpq1mtbuox.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6cdp7xs9.php:41\n\
    Stack trace:\n#0 /tmp/tmp6cdp7xs9.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp6cdp7xs9.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return min($max_fill, $capacity);\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp11un5mdl.php:41\n\
    Stack trace:\n#0 /tmp/tmp11un5mdl.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp11un5mdl.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n    for ($i=0;\
    \ $i<$rows; $i++) {\n        for ($j=0; $j<$cols; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $max_fill += $capacity;\n            }\n        }\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkgm816se.php:48\n\
    Stack trace:\n#0 /tmp/tmpkgm816se.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpkgm816se.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $max_fill = 0;\n    for ($i=0; $i<$n; $i++) {\n\
    \        $fill = 0;\n        for ($j=0; $j<$m; $j++) {\n            $fill += $grid[$i][$j];\n\
    \        }\n        $max_fill = max($max_fill, $fill);\n    }\n    return $max_fill;\n\
    }\nfunction candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1), array(1,\
    \ 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmpauhlty.php:47\n\
    Stack trace:\n#0 /tmp/tmpmpauhlty.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpmpauhlty.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7a_w4l_q.php:41\n\
    Stack trace:\n#0 /tmp/tmp7a_w4l_q.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp7a_w4l_q.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return min($max_fill, $capacity);\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1vqw7aob.php:41\n\
    Stack trace:\n#0 /tmp/tmp1vqw7aob.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp1vqw7aob.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n    for ($i=0;\
    \ $i<$rows; $i++) {\n        for ($j=0; $j<$cols; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $max_fill = max($max_fill, $capacity);\n          \
    \  } else {\n                $max_fill = max($max_fill, 0);\n            }\n \
    \       }\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdgnu6bp9.php:49\n\
    Stack trace:\n#0 /tmp/tmpdgnu6bp9.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpdgnu6bp9.php\
    \ on line 49\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmuc4ud7u.php:41\n\
    Stack trace:\n#0 /tmp/tmpmuc4ud7u.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpmuc4ud7u.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnintti34.php:41\n\
    Stack trace:\n#0 /tmp/tmpnintti34.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpnintti34.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpk9kccokx.php:41\n\
    Stack trace:\n#0 /tmp/tmpk9kccokx.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpk9kccokx.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    $row_count = count($grid);\n    $col_count = count($grid[0]);\n    for\
    \ ($i = 0; $i < $row_count; $i++) {\n        for ($j = 0; $j < $col_count; $j++)\
    \ {\n            if ($grid[$i][$j] == 1) {\n                $max_fill += $capacity;\n\
    \            }\n        }\n    }\n    return $max_fill;\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdl7loirr.php:48\n\
    Stack trace:\n#0 /tmp/tmpdl7loirr.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpdl7loirr.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpefz7punx.php:41\n\
    Stack trace:\n#0 /tmp/tmpefz7punx.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpefz7punx.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpeo1lcadk.php:41\n\
    Stack trace:\n#0 /tmp/tmpeo1lcadk.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpeo1lcadk.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdgdewxq6.php:41\n\
    Stack trace:\n#0 /tmp/tmpdgdewxq6.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpdgdewxq6.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well == 1) {\n                $fill++;\n     \
    \       } else {\n                $max_fill = max($max_fill, $fill);\n       \
    \         $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzlk5659_.php:50\n\
    Stack trace:\n#0 /tmp/tmpzlk5659_.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpzlk5659_.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well) {\n                $fill++;\n          \
    \  } else {\n                $max_fill = max($max_fill, $fill);\n            \
    \    $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuklnj4q4.php:50\n\
    Stack trace:\n#0 /tmp/tmpuklnj4q4.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpuklnj4q4.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp86ddpz1x.php:41\n\
    Stack trace:\n#0 /tmp/tmp86ddpz1x.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp86ddpz1x.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpniqtl1_o.php:41\n\
    Stack trace:\n#0 /tmp/tmpniqtl1_o.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpniqtl1_o.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphk6j4lk3.php:41\n\
    Stack trace:\n#0 /tmp/tmphk6j4lk3.php(48): test()\n#1 {main}\n  thrown in /tmp/tmphk6j4lk3.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbkw15llq.php:41\n\
    Stack trace:\n#0 /tmp/tmpbkw15llq.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpbkw15llq.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n    for ($i=0;\
    \ $i<$rows; $i++) {\n        for ($j=0; $j<$cols; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $max_fill = max($max_fill, $capacity);\n          \
    \  } else {\n                $max_fill = max($max_fill, 0);\n            }\n \
    \       }\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmps06hk7jq.php:49\n\
    Stack trace:\n#0 /tmp/tmps06hk7jq.php(56): test()\n#1 {main}\n  thrown in /tmp/tmps06hk7jq.php\
    \ on line 49\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    $num_rows = count($grid);\n    $num_cols = count($grid[0]);\n    for\
    \ ($i=0; $i<$num_rows; $i++) {\n        for ($j=0; $j<$num_cols; $j++) {\n   \
    \         $max_fill = max($max_fill, $grid[$i][$j]);\n        }\n    }\n    return\
    \ $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpg1n3pcqp.php:45\n\
    Stack trace:\n#0 /tmp/tmpg1n3pcqp.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpg1n3pcqp.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well == 1) {\n                $fill++;\n     \
    \       } else {\n                $max_fill = max($max_fill, $fill);\n       \
    \         $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwbldmswe.php:50\n\
    Stack trace:\n#0 /tmp/tmpwbldmswe.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpwbldmswe.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_qqndbnj.php:41\n\
    Stack trace:\n#0 /tmp/tmp_qqndbnj.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp_qqndbnj.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpccmreq4i.php:41\n\
    Stack trace:\n#0 /tmp/tmpccmreq4i.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpccmreq4i.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpem1uqcus.php:41\n\
    Stack trace:\n#0 /tmp/tmpem1uqcus.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpem1uqcus.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmlwwxub0.php:41\n\
    Stack trace:\n#0 /tmp/tmpmlwwxub0.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpmlwwxub0.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp47oaa4b7.php:41\n\
    Stack trace:\n#0 /tmp/tmp47oaa4b7.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp47oaa4b7.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return min($max_fill, $capacity);\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5f98ryyd.php:41\n\
    Stack trace:\n#0 /tmp/tmp5f98ryyd.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp5f98ryyd.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5c49una7.php:41\n\
    Stack trace:\n#0 /tmp/tmp5c49una7.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp5c49una7.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    // $grid is\
    \ an array of arrays\n    // $capacity is an integer\n    // return an integer\n\
    \    $max = 0;\n    foreach ($grid as $row) {\n        $max = max($max, max($row));\n\
    \    }\n    $count = 0;\n    while ($max > 0) {\n        $max -= $capacity;\n\
    \        $count++;\n    }\n    return $count;\n}\n$grid = [[0,0,1,0], [0,1,0,0],\
    \ [1,1,1,1]];\n$capacity = 1;\necho max_fill($grid, $capacity) . PHP_EOL;\n$grid\
    \ = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]];\n$capacity = 2;\necho max_fill($grid,\
    \ $capacity) . PHP_EOL;\n$grid = [[0,0,0], [0,0,0]];\n$capacity = 5;\necho max_fill($grid,\
    \ $capacity) . PHP_EOL;\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n0\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3_zr8o6b.php:58\n\
    Stack trace:\n#0 /tmp/tmp3_zr8o6b.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp3_zr8o6b.php\
    \ on line 58\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well == 1) {\n                $fill++;\n     \
    \       } else {\n                $max_fill = max($max_fill, $fill);\n       \
    \         $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_ew8ex_e.php:50\n\
    Stack trace:\n#0 /tmp/tmp_ew8ex_e.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp_ew8ex_e.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp04l0xg0d.php:41\n\
    Stack trace:\n#0 /tmp/tmp04l0xg0d.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp04l0xg0d.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpaklr_lhp.php:41\n\
    Stack trace:\n#0 /tmp/tmpaklr_lhp.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpaklr_lhp.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return min($max_fill, $capacity);\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpv2sshsv7.php:41\n\
    Stack trace:\n#0 /tmp/tmpv2sshsv7.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpv2sshsv7.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max = 0;\n\
    \    foreach ($grid as $row) {\n        $max = max($max, max($row));\n    }\n\
    \    $min = 0;\n    while ($min < $max) {\n        $mid = floor(($min + $max)\
    \ / 2);\n        if (can_fill($grid, $capacity, $mid)) {\n            $min = $mid\
    \ + 1;\n        } else {\n            $max = $mid;\n        }\n    }\n    return\
    \ $min;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function can_fill()\
    \ in /tmp/tmp3svx5akv.php:37\nStack trace:\n#0 /tmp/tmp3svx5akv.php(46): max_fill()\n\
    #1 /tmp/tmp3svx5akv.php(50): candidate()\n#2 /tmp/tmp3svx5akv.php(57): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3svx5akv.php on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $cell) {\n            if ($cell == 1) {\n                $fill++;\n     \
    \       } else {\n                $max_fill = max($max_fill, $fill);\n       \
    \         $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp60brpqff.php:50\n\
    Stack trace:\n#0 /tmp/tmp60brpqff.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp60brpqff.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuo5akq0h.php:41\n\
    Stack trace:\n#0 /tmp/tmpuo5akq0h.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpuo5akq0h.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $cell) {\n            if ($cell == 1) {\n                $fill++;\n     \
    \       } else {\n                $max_fill = max($max_fill, $fill);\n       \
    \         $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5h096kyy.php:50\n\
    Stack trace:\n#0 /tmp/tmp5h096kyy.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp5h096kyy.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8d4xekbq.php:41\n\
    Stack trace:\n#0 /tmp/tmp8d4xekbq.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp8d4xekbq.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmqvjbq7s.php:41\n\
    Stack trace:\n#0 /tmp/tmpmqvjbq7s.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpmqvjbq7s.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7h21t43r.php:41\n\
    Stack trace:\n#0 /tmp/tmp7h21t43r.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp7h21t43r.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n    for ($i=0;\
    \ $i<$rows; $i++) {\n        for ($j=0; $j<$cols; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $max_fill += $capacity;\n            }\n        }\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpt304fbxz.php:48\n\
    Stack trace:\n#0 /tmp/tmpt304fbxz.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpt304fbxz.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well == 1) {\n                $fill++;\n     \
    \       } else {\n                $max_fill = max($max_fill, $fill);\n       \
    \         $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1xc4v4k2.php:50\n\
    Stack trace:\n#0 /tmp/tmp1xc4v4k2.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp1xc4v4k2.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0nh25l5e.php:41\n\
    Stack trace:\n#0 /tmp/tmp0nh25l5e.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp0nh25l5e.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpem10puub.php:41\n\
    Stack trace:\n#0 /tmp/tmpem10puub.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpem10puub.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplyqxwu0q.php:41\n\
    Stack trace:\n#0 /tmp/tmplyqxwu0q.php(48): test()\n#1 {main}\n  thrown in /tmp/tmplyqxwu0q.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well == 1) {\n                $fill++;\n     \
    \       } else {\n                $max_fill = max($max_fill, $fill);\n       \
    \         $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpc03wx6ge.php:50\n\
    Stack trace:\n#0 /tmp/tmpc03wx6ge.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpc03wx6ge.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return min($max_fill, $capacity);\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqc8z8vda.php:41\n\
    Stack trace:\n#0 /tmp/tmpqc8z8vda.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpqc8z8vda.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return min($max_fill, $capacity);\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmdr8sx32.php:41\n\
    Stack trace:\n#0 /tmp/tmpmdr8sx32.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpmdr8sx32.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqp7zd1ud.php:41\n\
    Stack trace:\n#0 /tmp/tmpqp7zd1ud.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpqp7zd1ud.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well == 1) {\n                $fill++;\n     \
    \       } else {\n                $max_fill = max($max_fill, $fill);\n       \
    \         $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpca6_kvjf.php:50\n\
    Stack trace:\n#0 /tmp/tmpca6_kvjf.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpca6_kvjf.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpy8k7pttf.php:41\n\
    Stack trace:\n#0 /tmp/tmpy8k7pttf.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpy8k7pttf.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $cell) {\n            if ($cell == 1) {\n                $fill += 1;\n  \
    \          } else {\n                $max_fill = max($max_fill, $fill);\n    \
    \            $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_4zk8yg_.php:50\n\
    Stack trace:\n#0 /tmp/tmp_4zk8yg_.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp_4zk8yg_.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well == 1) {\n                $fill++;\n     \
    \       } else {\n                $max_fill = max($max_fill, $fill);\n       \
    \         $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphju_qcmf.php:50\n\
    Stack trace:\n#0 /tmp/tmphju_qcmf.php(57): test()\n#1 {main}\n  thrown in /tmp/tmphju_qcmf.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpju2tkiq9.php:41\n\
    Stack trace:\n#0 /tmp/tmpju2tkiq9.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpju2tkiq9.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $wells = count($grid);\n\
    \    $units = count($grid[0]);\n    $fill_count = 0;\n    for ($i = 0; $i < $wells;\
    \ $i++) {\n        $fill_count += max_fill_well($grid[$i], $capacity);\n    }\n\
    \    return $fill_count;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function max_fill_well()\
    \ in /tmp/tmpcz1tefxj.php:34\nStack trace:\n#0 /tmp/tmpcz1tefxj.php(39): max_fill()\n\
    #1 /tmp/tmpcz1tefxj.php(43): candidate()\n#2 /tmp/tmpcz1tefxj.php(50): test()\n\
    #3 {main}\n  thrown in /tmp/tmpcz1tefxj.php on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplar20_6d.php:41\n\
    Stack trace:\n#0 /tmp/tmplar20_6d.php(48): test()\n#1 {main}\n  thrown in /tmp/tmplar20_6d.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $num_rows =\
    \ count($grid);\n    $num_cols = count($grid[0]);\n    $max_fill = 0;\n    for\
    \ ($i=0; $i<$num_rows; $i++) {\n        $fill = 0;\n        for ($j=0; $j<$num_cols;\
    \ $j++) {\n            $fill += $grid[$i][$j];\n            if ($fill > $capacity)\
    \ {\n                $max_fill = max($max_fill, $capacity);\n                $fill\
    \ = $grid[$i][$j];\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpm153mfvs.php:51\n\
    Stack trace:\n#0 /tmp/tmpm153mfvs.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpm153mfvs.php\
    \ on line 51\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphym5rpxq.php:41\n\
    Stack trace:\n#0 /tmp/tmphym5rpxq.php(48): test()\n#1 {main}\n  thrown in /tmp/tmphym5rpxq.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpguhg8f6v.php:41\n\
    Stack trace:\n#0 /tmp/tmpguhg8f6v.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpguhg8f6v.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n    for ($i=0;\
    \ $i<$rows; $i++) {\n        for ($j=0; $j<$cols; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $max_fill = max($max_fill, $capacity - $grid[$i][$j]);\n\
    \            }\n        }\n    }\n    return $max_fill;\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsbcz7k4t.php:47\n\
    Stack trace:\n#0 /tmp/tmpsbcz7k4t.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpsbcz7k4t.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsra3zp4z.php:41\n\
    Stack trace:\n#0 /tmp/tmpsra3zp4z.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpsra3zp4z.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphxjgsslp.php:41\n\
    Stack trace:\n#0 /tmp/tmphxjgsslp.php(48): test()\n#1 {main}\n  thrown in /tmp/tmphxjgsslp.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well === 1) {\n                $fill++;\n    \
    \        } else {\n                $max_fill = max($max_fill, $fill);\n      \
    \          $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpekeda_2h.php:50\n\
    Stack trace:\n#0 /tmp/tmpekeda_2h.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpekeda_2h.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n    for ($i=0;\
    \ $i<$rows; $i++) {\n        for ($j=0; $j<$cols; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $max_fill = max($max_fill, $capacity);\n          \
    \  } else {\n                $max_fill = max($max_fill, $capacity - 1);\n    \
    \        }\n        }\n    }\n    return $max_fill;\n}\nfunction candidate(...$args)\
    \ {\n    return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmmthvrnq.php:49\n\
    Stack trace:\n#0 /tmp/tmpmmthvrnq.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpmmthvrnq.php\
    \ on line 49\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7hzy_6ri.php:41\n\
    Stack trace:\n#0 /tmp/tmp7hzy_6ri.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp7hzy_6ri.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpa1sg16vi.php:41\n\
    Stack trace:\n#0 /tmp/tmpa1sg16vi.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpa1sg16vi.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyr82xhbh.php:41\n\
    Stack trace:\n#0 /tmp/tmpyr82xhbh.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpyr82xhbh.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well == 1) {\n                $fill++;\n     \
    \       } else {\n                $max_fill = max($max_fill, $fill);\n       \
    \         $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9dd5687k.php:50\n\
    Stack trace:\n#0 /tmp/tmp9dd5687k.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp9dd5687k.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $max_fill = 0;\n    for ($i=0; $i<$n; $i++) {\n\
    \        $fill = 0;\n        for ($j=0; $j<$m; $j++) {\n            $fill += $grid[$i][$j];\n\
    \        }\n        $max_fill = max($max_fill, $fill);\n    }\n    return $max_fill\
    \ * $capacity;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpv7l7mcme.php:47\n\
    Stack trace:\n#0 /tmp/tmpv7l7mcme.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpv7l7mcme.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn032a4k9.php:41\n\
    Stack trace:\n#0 /tmp/tmpn032a4k9.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpn032a4k9.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_tosgyui.php:41\n\
    Stack trace:\n#0 /tmp/tmp_tosgyui.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp_tosgyui.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n    for ($i=0;\
    \ $i<$rows; $i++) {\n        for ($j=0; $j<$cols; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $max_fill += $capacity;\n            }\n        }\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpt1506k0p.php:48\n\
    Stack trace:\n#0 /tmp/tmpt1506k0p.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpt1506k0p.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxe35vrni.php:41\n\
    Stack trace:\n#0 /tmp/tmpxe35vrni.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpxe35vrni.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp20jd6sle.php:41\n\
    Stack trace:\n#0 /tmp/tmp20jd6sle.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp20jd6sle.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $fill = 0;\n        foreach ($row\
    \ as $well) {\n            if ($well == 1) {\n                $fill++;\n     \
    \       } else {\n                $max_fill = max($max_fill, $fill);\n       \
    \         $fill = 0;\n            }\n        }\n        $max_fill = max($max_fill,\
    \ $fill);\n    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n \
    \   return max_fill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0,\
    \ 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
    \ 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_0g7rks9.php:50\n\
    Stack trace:\n#0 /tmp/tmp_0g7rks9.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp_0g7rks9.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn1hg44h4.php:41\n\
    Stack trace:\n#0 /tmp/tmpn1hg44h4.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpn1hg44h4.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpm46iemwi.php:41\n\
    Stack trace:\n#0 /tmp/tmpm46iemwi.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpm46iemwi.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n// and each 1 in a row represents a single unit of water.\n\
    // Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n// and all buckets have the same capacity.\n// Your task is to use the\
    \ buckets to empty the wells.\n// Output the number of times you need to lower\
    \ the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\
    // bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1],\
    \ [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example\
    \ 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output:\
    \ 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $max_fill =\
    \ 0;\n    foreach ($grid as $row) {\n        $max_fill = max($max_fill, max($row));\n\
    \    }\n    return $max_fill;\n}\nfunction candidate(...$args) {\n    return max_fill(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(0, 0, 0), array(0, 0, 0)), 5) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
    \ array(1, 1, 1, 1)), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 9) !== 2) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp62xz586o.php:41\n\
    Stack trace:\n#0 /tmp/tmp62xz586o.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp62xz586o.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
