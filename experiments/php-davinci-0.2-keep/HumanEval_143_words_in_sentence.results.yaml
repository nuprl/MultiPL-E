name: HumanEval_143_words_in_sentence
language: php
results:
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp7kt50v91.php:20\nStack trace:\n#0 /tmp/tmp7kt50v91.php(28): words_in_sentence()\n\
    #1 /tmp/tmp7kt50v91.php(32): candidate()\n#2 /tmp/tmp7kt50v91.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmp7kt50v91.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpbzxfzg87.php:20\nStack trace:\n#0 /tmp/tmpbzxfzg87.php(27): words_in_sentence()\n\
    #1 /tmp/tmpbzxfzg87.php(31): candidate()\n#2 /tmp/tmpbzxfzg87.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpbzxfzg87.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmphyn1hvgz.php:20\nStack trace:\n#0 /tmp/tmphyn1hvgz.php(28): words_in_sentence()\n\
    #1 /tmp/tmphyn1hvgz.php(32): candidate()\n#2 /tmp/tmphyn1hvgz.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmphyn1hvgz.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpy1o8xp79.php:20\nStack trace:\n#0 /tmp/tmpy1o8xp79.php(27): words_in_sentence()\n\
    #1 /tmp/tmpy1o8xp79.php(31): candidate()\n#2 /tmp/tmpy1o8xp79.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpy1o8xp79.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpecuw7pud.php:20\nStack trace:\n#0 /tmp/tmpecuw7pud.php(27): words_in_sentence()\n\
    #1 /tmp/tmpecuw7pud.php(31): candidate()\n#2 /tmp/tmpecuw7pud.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpecuw7pud.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpsrprbthd.php:20\nStack trace:\n#0 /tmp/tmpsrprbthd.php(27): words_in_sentence()\n\
    #1 /tmp/tmpsrprbthd.php(31): candidate()\n#2 /tmp/tmpsrprbthd.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpsrprbthd.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $sentence = explode(' ', $sentence);\n    $result = [];\n    foreach ($sentence\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpcf9l1x1o.php:20\nStack trace:\n#0 /tmp/tmpcf9l1x1o.php(28): words_in_sentence()\n\
    #1 /tmp/tmpcf9l1x1o.php(32): candidate()\n#2 /tmp/tmpcf9l1x1o.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpcf9l1x1o.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpku5usjrr.php:20\nStack trace:\n#0 /tmp/tmpku5usjrr.php(27): words_in_sentence()\n\
    #1 /tmp/tmpku5usjrr.php(31): candidate()\n#2 /tmp/tmpku5usjrr.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpku5usjrr.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp0vokxxtt.php:20\nStack trace:\n#0 /tmp/tmp0vokxxtt.php(27): words_in_sentence()\n\
    #1 /tmp/tmp0vokxxtt.php(31): candidate()\n#2 /tmp/tmp0vokxxtt.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp0vokxxtt.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpqn2tlv04.php:20\nStack trace:\n#0 /tmp/tmpqn2tlv04.php(28): words_in_sentence()\n\
    #1 /tmp/tmpqn2tlv04.php(32): candidate()\n#2 /tmp/tmpqn2tlv04.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpqn2tlv04.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpna9jqd0m.php:20\nStack trace:\n#0 /tmp/tmpna9jqd0m.php(28): words_in_sentence()\n\
    #1 /tmp/tmpna9jqd0m.php(32): candidate()\n#2 /tmp/tmpna9jqd0m.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpna9jqd0m.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp1pa7p5j0.php:20\nStack trace:\n#0 /tmp/tmp1pa7p5j0.php(27): words_in_sentence()\n\
    #1 /tmp/tmp1pa7p5j0.php(31): candidate()\n#2 /tmp/tmp1pa7p5j0.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp1pa7p5j0.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp40x6qcip.php:20\nStack trace:\n#0 /tmp/tmp40x6qcip.php(27): words_in_sentence()\n\
    #1 /tmp/tmp40x6qcip.php(31): candidate()\n#2 /tmp/tmp40x6qcip.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp40x6qcip.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp57j0cmn1.php:20\nStack trace:\n#0 /tmp/tmp57j0cmn1.php(27): words_in_sentence()\n\
    #1 /tmp/tmp57j0cmn1.php(31): candidate()\n#2 /tmp/tmp57j0cmn1.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp57j0cmn1.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpnc2i10z8.php:20\nStack trace:\n#0 /tmp/tmpnc2i10z8.php(27): words_in_sentence()\n\
    #1 /tmp/tmpnc2i10z8.php(31): candidate()\n#2 /tmp/tmpnc2i10z8.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpnc2i10z8.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp4cfohx21.php:20\nStack trace:\n#0 /tmp/tmp4cfohx21.php(28): words_in_sentence()\n\
    #1 /tmp/tmp4cfohx21.php(32): candidate()\n#2 /tmp/tmp4cfohx21.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4cfohx21.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpmedcq765.php:20\nStack trace:\n#0 /tmp/tmpmedcq765.php(27): words_in_sentence()\n\
    #1 /tmp/tmpmedcq765.php(31): candidate()\n#2 /tmp/tmpmedcq765.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpmedcq765.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp2nxfhwub.php:20\nStack trace:\n#0 /tmp/tmp2nxfhwub.php(28): words_in_sentence()\n\
    #1 /tmp/tmp2nxfhwub.php(32): candidate()\n#2 /tmp/tmp2nxfhwub.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmp2nxfhwub.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmppkxihopd.php:20\nStack trace:\n#0 /tmp/tmppkxihopd.php(27): words_in_sentence()\n\
    #1 /tmp/tmppkxihopd.php(31): candidate()\n#2 /tmp/tmppkxihopd.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmppkxihopd.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpxh21lmn6.php:20\nStack trace:\n#0 /tmp/tmpxh21lmn6.php(27): words_in_sentence()\n\
    #1 /tmp/tmpxh21lmn6.php(31): candidate()\n#2 /tmp/tmpxh21lmn6.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpxh21lmn6.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpo5mku9u1.php:20\nStack trace:\n#0 /tmp/tmpo5mku9u1.php(27): words_in_sentence()\n\
    #1 /tmp/tmpo5mku9u1.php(31): candidate()\n#2 /tmp/tmpo5mku9u1.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpo5mku9u1.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpwig52bb4.php:20\nStack trace:\n#0 /tmp/tmpwig52bb4.php(28): words_in_sentence()\n\
    #1 /tmp/tmpwig52bb4.php(32): candidate()\n#2 /tmp/tmpwig52bb4.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpwig52bb4.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpw_ufdvla.php:20\nStack trace:\n#0 /tmp/tmpw_ufdvla.php(27): words_in_sentence()\n\
    #1 /tmp/tmpw_ufdvla.php(31): candidate()\n#2 /tmp/tmpw_ufdvla.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpw_ufdvla.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp9jvkb41n.php:20\nStack trace:\n#0 /tmp/tmp9jvkb41n.php(27): words_in_sentence()\n\
    #1 /tmp/tmp9jvkb41n.php(31): candidate()\n#2 /tmp/tmp9jvkb41n.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9jvkb41n.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp3tpjv9hs.php:20\nStack trace:\n#0 /tmp/tmp3tpjv9hs.php(27): words_in_sentence()\n\
    #1 /tmp/tmp3tpjv9hs.php(31): candidate()\n#2 /tmp/tmp3tpjv9hs.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3tpjv9hs.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpyw_gm4u2.php:20\nStack trace:\n#0 /tmp/tmpyw_gm4u2.php(27): words_in_sentence()\n\
    #1 /tmp/tmpyw_gm4u2.php(31): candidate()\n#2 /tmp/tmpyw_gm4u2.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpyw_gm4u2.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpdy7_4brr.php:20\nStack trace:\n#0 /tmp/tmpdy7_4brr.php(27): words_in_sentence()\n\
    #1 /tmp/tmpdy7_4brr.php(31): candidate()\n#2 /tmp/tmpdy7_4brr.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpdy7_4brr.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpgydt0wfn.php:20\nStack trace:\n#0 /tmp/tmpgydt0wfn.php(27): words_in_sentence()\n\
    #1 /tmp/tmpgydt0wfn.php(31): candidate()\n#2 /tmp/tmpgydt0wfn.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpgydt0wfn.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmprupqf31e.php:20\nStack trace:\n#0 /tmp/tmprupqf31e.php(27): words_in_sentence()\n\
    #1 /tmp/tmprupqf31e.php(31): candidate()\n#2 /tmp/tmprupqf31e.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmprupqf31e.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpqtu9d5os.php:20\nStack trace:\n#0 /tmp/tmpqtu9d5os.php(28): words_in_sentence()\n\
    #1 /tmp/tmpqtu9d5os.php(32): candidate()\n#2 /tmp/tmpqtu9d5os.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpqtu9d5os.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmptb5d_axf.php:20\nStack trace:\n#0 /tmp/tmptb5d_axf.php(27): words_in_sentence()\n\
    #1 /tmp/tmptb5d_axf.php(31): candidate()\n#2 /tmp/tmptb5d_axf.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmptb5d_axf.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpkuq0zksg.php:20\nStack trace:\n#0 /tmp/tmpkuq0zksg.php(27): words_in_sentence()\n\
    #1 /tmp/tmpkuq0zksg.php(31): candidate()\n#2 /tmp/tmpkuq0zksg.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpkuq0zksg.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp2in2n90c.php:20\nStack trace:\n#0 /tmp/tmp2in2n90c.php(27): words_in_sentence()\n\
    #1 /tmp/tmp2in2n90c.php(31): candidate()\n#2 /tmp/tmp2in2n90c.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp2in2n90c.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpq00e3a1x.php:20\nStack trace:\n#0 /tmp/tmpq00e3a1x.php(27): words_in_sentence()\n\
    #1 /tmp/tmpq00e3a1x.php(31): candidate()\n#2 /tmp/tmpq00e3a1x.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpq00e3a1x.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpq99xfgo5.php:20\nStack trace:\n#0 /tmp/tmpq99xfgo5.php(27): words_in_sentence()\n\
    #1 /tmp/tmpq99xfgo5.php(31): candidate()\n#2 /tmp/tmpq99xfgo5.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpq99xfgo5.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp572caijq.php:20\nStack trace:\n#0 /tmp/tmp572caijq.php(27): words_in_sentence()\n\
    #1 /tmp/tmp572caijq.php(31): candidate()\n#2 /tmp/tmp572caijq.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp572caijq.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpv_d_clp5.php:20\nStack trace:\n#0 /tmp/tmpv_d_clp5.php(27): words_in_sentence()\n\
    #1 /tmp/tmpv_d_clp5.php(31): candidate()\n#2 /tmp/tmpv_d_clp5.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpv_d_clp5.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpr1od7dc4.php:20\nStack trace:\n#0 /tmp/tmpr1od7dc4.php(27): words_in_sentence()\n\
    #1 /tmp/tmpr1od7dc4.php(31): candidate()\n#2 /tmp/tmpr1od7dc4.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpr1od7dc4.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpj6uufw7o.php:20\nStack trace:\n#0 /tmp/tmpj6uufw7o.php(27): words_in_sentence()\n\
    #1 /tmp/tmpj6uufw7o.php(31): candidate()\n#2 /tmp/tmpj6uufw7o.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpj6uufw7o.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpl5r7ox1m.php:20\nStack trace:\n#0 /tmp/tmpl5r7ox1m.php(27): words_in_sentence()\n\
    #1 /tmp/tmpl5r7ox1m.php(31): candidate()\n#2 /tmp/tmpl5r7ox1m.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpl5r7ox1m.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpxb1gp4cr.php:20\nStack trace:\n#0 /tmp/tmpxb1gp4cr.php(27): words_in_sentence()\n\
    #1 /tmp/tmpxb1gp4cr.php(31): candidate()\n#2 /tmp/tmpxb1gp4cr.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpxb1gp4cr.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $sentence = explode(' ', $sentence);\n    $result = [];\n    foreach ($sentence\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp62xaksce.php:20\nStack trace:\n#0 /tmp/tmp62xaksce.php(27): words_in_sentence()\n\
    #1 /tmp/tmp62xaksce.php(31): candidate()\n#2 /tmp/tmp62xaksce.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp62xaksce.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpzwowfoc_.php:20\nStack trace:\n#0 /tmp/tmpzwowfoc_.php(27): words_in_sentence()\n\
    #1 /tmp/tmpzwowfoc_.php(31): candidate()\n#2 /tmp/tmpzwowfoc_.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpzwowfoc_.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp607dkpti.php:20\nStack trace:\n#0 /tmp/tmp607dkpti.php(27): words_in_sentence()\n\
    #1 /tmp/tmp607dkpti.php(31): candidate()\n#2 /tmp/tmp607dkpti.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp607dkpti.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp8be_0wuw.php:20\nStack trace:\n#0 /tmp/tmp8be_0wuw.php(27): words_in_sentence()\n\
    #1 /tmp/tmp8be_0wuw.php(31): candidate()\n#2 /tmp/tmp8be_0wuw.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp8be_0wuw.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpqaw_p_q4.php:20\nStack trace:\n#0 /tmp/tmpqaw_p_q4.php(28): words_in_sentence()\n\
    #1 /tmp/tmpqaw_p_q4.php(32): candidate()\n#2 /tmp/tmpqaw_p_q4.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpqaw_p_q4.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp5cq7eqwm.php:20\nStack trace:\n#0 /tmp/tmp5cq7eqwm.php(27): words_in_sentence()\n\
    #1 /tmp/tmp5cq7eqwm.php(31): candidate()\n#2 /tmp/tmp5cq7eqwm.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp5cq7eqwm.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp6ki9n8m9.php:20\nStack trace:\n#0 /tmp/tmp6ki9n8m9.php(27): words_in_sentence()\n\
    #1 /tmp/tmp6ki9n8m9.php(31): candidate()\n#2 /tmp/tmp6ki9n8m9.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp6ki9n8m9.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpikz8lifr.php:20\nStack trace:\n#0 /tmp/tmpikz8lifr.php(27): words_in_sentence()\n\
    #1 /tmp/tmpikz8lifr.php(31): candidate()\n#2 /tmp/tmpikz8lifr.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpikz8lifr.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $primes = [2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    $result\
    \ = [];\n    foreach ($words as $word) {\n        if (in_array(strlen($word),\
    \ $primes)) {\n            $result[] = $word;\n        }\n    }\n    return implode('\
    \ ', $result);\n}\n\necho words_in_sentence('This is a test') . PHP_EOL;\necho\
    \ words_in_sentence('lets go for swimming') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "is\ngo for\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmper7ccsk1.php:20\nStack trace:\n#0 /tmp/tmper7ccsk1.php(27): words_in_sentence()\n\
    #1 /tmp/tmper7ccsk1.php(31): candidate()\n#2 /tmp/tmper7ccsk1.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmper7ccsk1.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpv0v4b6pq.php:20\nStack trace:\n#0 /tmp/tmpv0v4b6pq.php(27): words_in_sentence()\n\
    #1 /tmp/tmpv0v4b6pq.php(31): candidate()\n#2 /tmp/tmpv0v4b6pq.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpv0v4b6pq.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpewa660j0.php:20\nStack trace:\n#0 /tmp/tmpewa660j0.php(27): words_in_sentence()\n\
    #1 /tmp/tmpewa660j0.php(31): candidate()\n#2 /tmp/tmpewa660j0.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpewa660j0.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp9k1f91hy.php:20\nStack trace:\n#0 /tmp/tmp9k1f91hy.php(27): words_in_sentence()\n\
    #1 /tmp/tmp9k1f91hy.php(31): candidate()\n#2 /tmp/tmp9k1f91hy.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9k1f91hy.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp4y5s9tg8.php:20\nStack trace:\n#0 /tmp/tmp4y5s9tg8.php(27): words_in_sentence()\n\
    #1 /tmp/tmp4y5s9tg8.php(31): candidate()\n#2 /tmp/tmp4y5s9tg8.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4y5s9tg8.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpp8qc03de.php:20\nStack trace:\n#0 /tmp/tmpp8qc03de.php(27): words_in_sentence()\n\
    #1 /tmp/tmpp8qc03de.php(31): candidate()\n#2 /tmp/tmpp8qc03de.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpp8qc03de.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp0tag8oo3.php:20\nStack trace:\n#0 /tmp/tmp0tag8oo3.php(27): words_in_sentence()\n\
    #1 /tmp/tmp0tag8oo3.php(31): candidate()\n#2 /tmp/tmp0tag8oo3.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp0tag8oo3.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp3uvwhdz2.php:20\nStack trace:\n#0 /tmp/tmp3uvwhdz2.php(28): words_in_sentence()\n\
    #1 /tmp/tmp3uvwhdz2.php(32): candidate()\n#2 /tmp/tmp3uvwhdz2.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3uvwhdz2.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $sentence = explode(' ', $sentence);\n    $result = [];\n    foreach ($sentence\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpia2mb62k.php:20\nStack trace:\n#0 /tmp/tmpia2mb62k.php(27): words_in_sentence()\n\
    #1 /tmp/tmpia2mb62k.php(31): candidate()\n#2 /tmp/tmpia2mb62k.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpia2mb62k.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpn3nsw2ln.php:20\nStack trace:\n#0 /tmp/tmpn3nsw2ln.php(27): words_in_sentence()\n\
    #1 /tmp/tmpn3nsw2ln.php(31): candidate()\n#2 /tmp/tmpn3nsw2ln.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpn3nsw2ln.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpdjhmdc98.php:20\nStack trace:\n#0 /tmp/tmpdjhmdc98.php(27): words_in_sentence()\n\
    #1 /tmp/tmpdjhmdc98.php(31): candidate()\n#2 /tmp/tmpdjhmdc98.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpdjhmdc98.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpeeppdy1i.php:20\nStack trace:\n#0 /tmp/tmpeeppdy1i.php(27): words_in_sentence()\n\
    #1 /tmp/tmpeeppdy1i.php(31): candidate()\n#2 /tmp/tmpeeppdy1i.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpeeppdy1i.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpwa7oqakc.php:20\nStack trace:\n#0 /tmp/tmpwa7oqakc.php(27): words_in_sentence()\n\
    #1 /tmp/tmpwa7oqakc.php(31): candidate()\n#2 /tmp/tmpwa7oqakc.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpwa7oqakc.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpxt87fjkk.php:20\nStack trace:\n#0 /tmp/tmpxt87fjkk.php(27): words_in_sentence()\n\
    #1 /tmp/tmpxt87fjkk.php(31): candidate()\n#2 /tmp/tmpxt87fjkk.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpxt87fjkk.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpu7467h9l.php:20\nStack trace:\n#0 /tmp/tmpu7467h9l.php(28): words_in_sentence()\n\
    #1 /tmp/tmpu7467h9l.php(32): candidate()\n#2 /tmp/tmpu7467h9l.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpu7467h9l.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpbc71pqhz.php:20\nStack trace:\n#0 /tmp/tmpbc71pqhz.php(28): words_in_sentence()\n\
    #1 /tmp/tmpbc71pqhz.php(32): candidate()\n#2 /tmp/tmpbc71pqhz.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpbc71pqhz.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpoxl91sva.php:20\nStack trace:\n#0 /tmp/tmpoxl91sva.php(27): words_in_sentence()\n\
    #1 /tmp/tmpoxl91sva.php(31): candidate()\n#2 /tmp/tmpoxl91sva.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpoxl91sva.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmph2m3ujgn.php:20\nStack trace:\n#0 /tmp/tmph2m3ujgn.php(28): words_in_sentence()\n\
    #1 /tmp/tmph2m3ujgn.php(32): candidate()\n#2 /tmp/tmph2m3ujgn.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmph2m3ujgn.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $primes = [2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    $result\
    \ = [];\n    foreach ($words as $word) {\n        if (in_array(strlen($word),\
    \ $primes)) {\n            $result[] = $word;\n        }\n    }\n    return implode('\
    \ ', $result);\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp5pm1v36s.php:20\nStack trace:\n#0 /tmp/tmp5pm1v36s.php(27): words_in_sentence()\n\
    #1 /tmp/tmp5pm1v36s.php(31): candidate()\n#2 /tmp/tmp5pm1v36s.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp5pm1v36s.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpffgwsls6.php:20\nStack trace:\n#0 /tmp/tmpffgwsls6.php(27): words_in_sentence()\n\
    #1 /tmp/tmpffgwsls6.php(31): candidate()\n#2 /tmp/tmpffgwsls6.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpffgwsls6.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpjyyrfdfn.php:20\nStack trace:\n#0 /tmp/tmpjyyrfdfn.php(27): words_in_sentence()\n\
    #1 /tmp/tmpjyyrfdfn.php(31): candidate()\n#2 /tmp/tmpjyyrfdfn.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpjyyrfdfn.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpf86xvm3_.php:20\nStack trace:\n#0 /tmp/tmpf86xvm3_.php(28): words_in_sentence()\n\
    #1 /tmp/tmpf86xvm3_.php(32): candidate()\n#2 /tmp/tmpf86xvm3_.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpf86xvm3_.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $primes = [];\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if (is_prime($length)) {\n\
    \            $primes[] = $word;\n        }\n    }\n    return implode(' ', $primes);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp2bt_jhv4.php:21\nStack trace:\n#0 /tmp/tmp2bt_jhv4.php(28): words_in_sentence()\n\
    #1 /tmp/tmp2bt_jhv4.php(32): candidate()\n#2 /tmp/tmp2bt_jhv4.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmp2bt_jhv4.php on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpfzvhkqxj.php:20\nStack trace:\n#0 /tmp/tmpfzvhkqxj.php(27): words_in_sentence()\n\
    #1 /tmp/tmpfzvhkqxj.php(31): candidate()\n#2 /tmp/tmpfzvhkqxj.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpfzvhkqxj.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpe56rqjh5.php:20\nStack trace:\n#0 /tmp/tmpe56rqjh5.php(27): words_in_sentence()\n\
    #1 /tmp/tmpe56rqjh5.php(31): candidate()\n#2 /tmp/tmpe56rqjh5.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpe56rqjh5.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp0uoksvsg.php:20\nStack trace:\n#0 /tmp/tmp0uoksvsg.php(27): words_in_sentence()\n\
    #1 /tmp/tmp0uoksvsg.php(31): candidate()\n#2 /tmp/tmp0uoksvsg.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp0uoksvsg.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpy5ymtqcq.php:20\nStack trace:\n#0 /tmp/tmpy5ymtqcq.php(28): words_in_sentence()\n\
    #1 /tmp/tmpy5ymtqcq.php(32): candidate()\n#2 /tmp/tmpy5ymtqcq.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpy5ymtqcq.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpivd8dig_.php:20\nStack trace:\n#0 /tmp/tmpivd8dig_.php(27): words_in_sentence()\n\
    #1 /tmp/tmpivd8dig_.php(31): candidate()\n#2 /tmp/tmpivd8dig_.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpivd8dig_.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp2o257m2m.php:20\nStack trace:\n#0 /tmp/tmp2o257m2m.php(28): words_in_sentence()\n\
    #1 /tmp/tmp2o257m2m.php(32): candidate()\n#2 /tmp/tmp2o257m2m.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmp2o257m2m.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpt56tlnk6.php:20\nStack trace:\n#0 /tmp/tmpt56tlnk6.php(27): words_in_sentence()\n\
    #1 /tmp/tmpt56tlnk6.php(31): candidate()\n#2 /tmp/tmpt56tlnk6.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpt56tlnk6.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpyolm73s8.php:20\nStack trace:\n#0 /tmp/tmpyolm73s8.php(28): words_in_sentence()\n\
    #1 /tmp/tmpyolm73s8.php(32): candidate()\n#2 /tmp/tmpyolm73s8.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpyolm73s8.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpz6nnic2e.php:20\nStack trace:\n#0 /tmp/tmpz6nnic2e.php(27): words_in_sentence()\n\
    #1 /tmp/tmpz6nnic2e.php(31): candidate()\n#2 /tmp/tmpz6nnic2e.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpz6nnic2e.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp24t3r836.php:20\nStack trace:\n#0 /tmp/tmp24t3r836.php(27): words_in_sentence()\n\
    #1 /tmp/tmp24t3r836.php(31): candidate()\n#2 /tmp/tmp24t3r836.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp24t3r836.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpw0ooztym.php:20\nStack trace:\n#0 /tmp/tmpw0ooztym.php(27): words_in_sentence()\n\
    #1 /tmp/tmpw0ooztym.php(31): candidate()\n#2 /tmp/tmpw0ooztym.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpw0ooztym.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpttp1y07m.php:20\nStack trace:\n#0 /tmp/tmpttp1y07m.php(28): words_in_sentence()\n\
    #1 /tmp/tmpttp1y07m.php(32): candidate()\n#2 /tmp/tmpttp1y07m.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpttp1y07m.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp_fmxfy6i.php:20\nStack trace:\n#0 /tmp/tmp_fmxfy6i.php(27): words_in_sentence()\n\
    #1 /tmp/tmp_fmxfy6i.php(31): candidate()\n#2 /tmp/tmp_fmxfy6i.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp_fmxfy6i.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpsj3hjt4a.php:20\nStack trace:\n#0 /tmp/tmpsj3hjt4a.php(28): words_in_sentence()\n\
    #1 /tmp/tmpsj3hjt4a.php(32): candidate()\n#2 /tmp/tmpsj3hjt4a.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpsj3hjt4a.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpunctnwku.php:20\nStack trace:\n#0 /tmp/tmpunctnwku.php(27): words_in_sentence()\n\
    #1 /tmp/tmpunctnwku.php(31): candidate()\n#2 /tmp/tmpunctnwku.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpunctnwku.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp1a3_nq5p.php:20\nStack trace:\n#0 /tmp/tmp1a3_nq5p.php(27): words_in_sentence()\n\
    #1 /tmp/tmp1a3_nq5p.php(31): candidate()\n#2 /tmp/tmp1a3_nq5p.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp1a3_nq5p.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpi5no2dzd.php:20\nStack trace:\n#0 /tmp/tmpi5no2dzd.php(27): words_in_sentence()\n\
    #1 /tmp/tmpi5no2dzd.php(31): candidate()\n#2 /tmp/tmpi5no2dzd.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpi5no2dzd.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpc6q53o7j.php:20\nStack trace:\n#0 /tmp/tmpc6q53o7j.php(27): words_in_sentence()\n\
    #1 /tmp/tmpc6q53o7j.php(31): candidate()\n#2 /tmp/tmpc6q53o7j.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpc6q53o7j.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpzk3xbind.php:20\nStack trace:\n#0 /tmp/tmpzk3xbind.php(28): words_in_sentence()\n\
    #1 /tmp/tmpzk3xbind.php(32): candidate()\n#2 /tmp/tmpzk3xbind.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpzk3xbind.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp_o6xkjjm.php:20\nStack trace:\n#0 /tmp/tmp_o6xkjjm.php(27): words_in_sentence()\n\
    #1 /tmp/tmp_o6xkjjm.php(31): candidate()\n#2 /tmp/tmp_o6xkjjm.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp_o6xkjjm.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp6b3g0lw2.php:20\nStack trace:\n#0 /tmp/tmp6b3g0lw2.php(27): words_in_sentence()\n\
    #1 /tmp/tmp6b3g0lw2.php(31): candidate()\n#2 /tmp/tmp6b3g0lw2.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp6b3g0lw2.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpu8cxcpnl.php:20\nStack trace:\n#0 /tmp/tmpu8cxcpnl.php(27): words_in_sentence()\n\
    #1 /tmp/tmpu8cxcpnl.php(31): candidate()\n#2 /tmp/tmpu8cxcpnl.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpu8cxcpnl.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp4gstbqsu.php:20\nStack trace:\n#0 /tmp/tmp4gstbqsu.php(27): words_in_sentence()\n\
    #1 /tmp/tmp4gstbqsu.php(31): candidate()\n#2 /tmp/tmp4gstbqsu.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4gstbqsu.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpl4opclws.php:20\nStack trace:\n#0 /tmp/tmpl4opclws.php(27): words_in_sentence()\n\
    #1 /tmp/tmpl4opclws.php(31): candidate()\n#2 /tmp/tmpl4opclws.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpl4opclws.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpuv_fhd8w.php:20\nStack trace:\n#0 /tmp/tmpuv_fhd8w.php(27): words_in_sentence()\n\
    #1 /tmp/tmpuv_fhd8w.php(31): candidate()\n#2 /tmp/tmpuv_fhd8w.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpuv_fhd8w.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpoxg0url9.php:20\nStack trace:\n#0 /tmp/tmpoxg0url9.php(27): words_in_sentence()\n\
    #1 /tmp/tmpoxg0url9.php(31): candidate()\n#2 /tmp/tmpoxg0url9.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpoxg0url9.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp8jq2h6bn.php:20\nStack trace:\n#0 /tmp/tmp8jq2h6bn.php(27): words_in_sentence()\n\
    #1 /tmp/tmp8jq2h6bn.php(31): candidate()\n#2 /tmp/tmp8jq2h6bn.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp8jq2h6bn.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmplx8zmjxv.php:20\nStack trace:\n#0 /tmp/tmplx8zmjxv.php(27): words_in_sentence()\n\
    #1 /tmp/tmplx8zmjxv.php(31): candidate()\n#2 /tmp/tmplx8zmjxv.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmplx8zmjxv.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $primes = [];\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if (is_prime($length)) {\n\
    \            $primes[] = $word;\n        }\n    }\n    return implode(' ', $primes);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpp8rfgwml.php:21\nStack trace:\n#0 /tmp/tmpp8rfgwml.php(28): words_in_sentence()\n\
    #1 /tmp/tmpp8rfgwml.php(32): candidate()\n#2 /tmp/tmpp8rfgwml.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpp8rfgwml.php on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpu4tsk7zg.php:20\nStack trace:\n#0 /tmp/tmpu4tsk7zg.php(27): words_in_sentence()\n\
    #1 /tmp/tmpu4tsk7zg.php(31): candidate()\n#2 /tmp/tmpu4tsk7zg.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpu4tsk7zg.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $primes = [2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    $result\
    \ = [];\n    foreach ($words as $word) {\n        if (in_array(strlen($word),\
    \ $primes)) {\n            $result[] = $word;\n        }\n    }\n    return implode('\
    \ ', $result);\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp1m_0t07k.php:20\nStack trace:\n#0 /tmp/tmp1m_0t07k.php(28): words_in_sentence()\n\
    #1 /tmp/tmp1m_0t07k.php(32): candidate()\n#2 /tmp/tmp1m_0t07k.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmp1m_0t07k.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpquw_iqo9.php:20\nStack trace:\n#0 /tmp/tmpquw_iqo9.php(27): words_in_sentence()\n\
    #1 /tmp/tmpquw_iqo9.php(31): candidate()\n#2 /tmp/tmpquw_iqo9.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpquw_iqo9.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpgdiu61e7.php:20\nStack trace:\n#0 /tmp/tmpgdiu61e7.php(27): words_in_sentence()\n\
    #1 /tmp/tmpgdiu61e7.php(31): candidate()\n#2 /tmp/tmpgdiu61e7.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpgdiu61e7.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpmaxeveqd.php:20\nStack trace:\n#0 /tmp/tmpmaxeveqd.php(27): words_in_sentence()\n\
    #1 /tmp/tmpmaxeveqd.php(31): candidate()\n#2 /tmp/tmpmaxeveqd.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpmaxeveqd.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpyytnul_0.php:20\nStack trace:\n#0 /tmp/tmpyytnul_0.php(27): words_in_sentence()\n\
    #1 /tmp/tmpyytnul_0.php(31): candidate()\n#2 /tmp/tmpyytnul_0.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpyytnul_0.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp3t48a2iu.php:20\nStack trace:\n#0 /tmp/tmp3t48a2iu.php(27): words_in_sentence()\n\
    #1 /tmp/tmp3t48a2iu.php(31): candidate()\n#2 /tmp/tmp3t48a2iu.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3t48a2iu.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpo0ry0__d.php:20\nStack trace:\n#0 /tmp/tmpo0ry0__d.php(27): words_in_sentence()\n\
    #1 /tmp/tmpo0ry0__d.php(31): candidate()\n#2 /tmp/tmpo0ry0__d.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpo0ry0__d.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmph1v1yytl.php:20\nStack trace:\n#0 /tmp/tmph1v1yytl.php(28): words_in_sentence()\n\
    #1 /tmp/tmph1v1yytl.php(32): candidate()\n#2 /tmp/tmph1v1yytl.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmph1v1yytl.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp6kpwq74o.php:20\nStack trace:\n#0 /tmp/tmp6kpwq74o.php(27): words_in_sentence()\n\
    #1 /tmp/tmp6kpwq74o.php(31): candidate()\n#2 /tmp/tmp6kpwq74o.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp6kpwq74o.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp6nbhr4rh.php:20\nStack trace:\n#0 /tmp/tmp6nbhr4rh.php(27): words_in_sentence()\n\
    #1 /tmp/tmp6nbhr4rh.php(31): candidate()\n#2 /tmp/tmp6nbhr4rh.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp6nbhr4rh.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpw26d98v6.php:20\nStack trace:\n#0 /tmp/tmpw26d98v6.php(28): words_in_sentence()\n\
    #1 /tmp/tmpw26d98v6.php(32): candidate()\n#2 /tmp/tmpw26d98v6.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpw26d98v6.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp92_alsg0.php:20\nStack trace:\n#0 /tmp/tmp92_alsg0.php(27): words_in_sentence()\n\
    #1 /tmp/tmp92_alsg0.php(31): candidate()\n#2 /tmp/tmp92_alsg0.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp92_alsg0.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpu1b5tn5f.php:20\nStack trace:\n#0 /tmp/tmpu1b5tn5f.php(27): words_in_sentence()\n\
    #1 /tmp/tmpu1b5tn5f.php(31): candidate()\n#2 /tmp/tmpu1b5tn5f.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpu1b5tn5f.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmphydbyik3.php:20\nStack trace:\n#0 /tmp/tmphydbyik3.php(27): words_in_sentence()\n\
    #1 /tmp/tmphydbyik3.php(31): candidate()\n#2 /tmp/tmphydbyik3.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmphydbyik3.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpo_tjek6r.php:20\nStack trace:\n#0 /tmp/tmpo_tjek6r.php(27): words_in_sentence()\n\
    #1 /tmp/tmpo_tjek6r.php(31): candidate()\n#2 /tmp/tmpo_tjek6r.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpo_tjek6r.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmplrfs0_lh.php:20\nStack trace:\n#0 /tmp/tmplrfs0_lh.php(27): words_in_sentence()\n\
    #1 /tmp/tmplrfs0_lh.php(31): candidate()\n#2 /tmp/tmplrfs0_lh.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmplrfs0_lh.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpjfg7qxxj.php:20\nStack trace:\n#0 /tmp/tmpjfg7qxxj.php(27): words_in_sentence()\n\
    #1 /tmp/tmpjfg7qxxj.php(31): candidate()\n#2 /tmp/tmpjfg7qxxj.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpjfg7qxxj.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpn8ar3rpf.php:20\nStack trace:\n#0 /tmp/tmpn8ar3rpf.php(28): words_in_sentence()\n\
    #1 /tmp/tmpn8ar3rpf.php(32): candidate()\n#2 /tmp/tmpn8ar3rpf.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpn8ar3rpf.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $res = [];\n    foreach ($words as $word)\
    \ {\n        if (is_prime(strlen($word))) {\n            $res[] = $word;\n   \
    \     }\n    }\n    return implode(' ', $res);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp4nj1k4vv.php:20\nStack trace:\n#0 /tmp/tmp4nj1k4vv.php(27): words_in_sentence()\n\
    #1 /tmp/tmp4nj1k4vv.php(31): candidate()\n#2 /tmp/tmp4nj1k4vv.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4nj1k4vv.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp385520sc.php:20\nStack trace:\n#0 /tmp/tmp385520sc.php(27): words_in_sentence()\n\
    #1 /tmp/tmp385520sc.php(31): candidate()\n#2 /tmp/tmp385520sc.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp385520sc.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpldkuecxf.php:20\nStack trace:\n#0 /tmp/tmpldkuecxf.php(27): words_in_sentence()\n\
    #1 /tmp/tmpldkuecxf.php(31): candidate()\n#2 /tmp/tmpldkuecxf.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpldkuecxf.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp6s6q2z32.php:20\nStack trace:\n#0 /tmp/tmp6s6q2z32.php(27): words_in_sentence()\n\
    #1 /tmp/tmp6s6q2z32.php(31): candidate()\n#2 /tmp/tmp6s6q2z32.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp6s6q2z32.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp5k714fou.php:20\nStack trace:\n#0 /tmp/tmp5k714fou.php(27): words_in_sentence()\n\
    #1 /tmp/tmp5k714fou.php(31): candidate()\n#2 /tmp/tmp5k714fou.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp5k714fou.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpb9ulljod.php:20\nStack trace:\n#0 /tmp/tmpb9ulljod.php(27): words_in_sentence()\n\
    #1 /tmp/tmpb9ulljod.php(31): candidate()\n#2 /tmp/tmpb9ulljod.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpb9ulljod.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $primes = [];\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if (is_prime($length)) {\n\
    \            $primes[] = $word;\n        }\n    }\n    return implode(' ', $primes);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpnf83u77w.php:21\nStack trace:\n#0 /tmp/tmpnf83u77w.php(28): words_in_sentence()\n\
    #1 /tmp/tmpnf83u77w.php(32): candidate()\n#2 /tmp/tmpnf83u77w.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpnf83u77w.php on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp27y19b50.php:20\nStack trace:\n#0 /tmp/tmp27y19b50.php(27): words_in_sentence()\n\
    #1 /tmp/tmp27y19b50.php(31): candidate()\n#2 /tmp/tmp27y19b50.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp27y19b50.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpjvwfjch8.php:20\nStack trace:\n#0 /tmp/tmpjvwfjch8.php(27): words_in_sentence()\n\
    #1 /tmp/tmpjvwfjch8.php(31): candidate()\n#2 /tmp/tmpjvwfjch8.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpjvwfjch8.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpneopsw9s.php:20\nStack trace:\n#0 /tmp/tmpneopsw9s.php(27): words_in_sentence()\n\
    #1 /tmp/tmpneopsw9s.php(31): candidate()\n#2 /tmp/tmpneopsw9s.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpneopsw9s.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp1keamuxy.php:20\nStack trace:\n#0 /tmp/tmp1keamuxy.php(28): words_in_sentence()\n\
    #1 /tmp/tmp1keamuxy.php(32): candidate()\n#2 /tmp/tmp1keamuxy.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmp1keamuxy.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpya3jbjj6.php:20\nStack trace:\n#0 /tmp/tmpya3jbjj6.php(28): words_in_sentence()\n\
    #1 /tmp/tmpya3jbjj6.php(32): candidate()\n#2 /tmp/tmpya3jbjj6.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpya3jbjj6.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpm2ai7_zc.php:20\nStack trace:\n#0 /tmp/tmpm2ai7_zc.php(27): words_in_sentence()\n\
    #1 /tmp/tmpm2ai7_zc.php(31): candidate()\n#2 /tmp/tmpm2ai7_zc.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpm2ai7_zc.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmppauoilr7.php:20\nStack trace:\n#0 /tmp/tmppauoilr7.php(27): words_in_sentence()\n\
    #1 /tmp/tmppauoilr7.php(31): candidate()\n#2 /tmp/tmppauoilr7.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmppauoilr7.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $prime_words = [];\n    $words = explode(' ', $sentence);\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpdvztv3r_.php:20\nStack trace:\n#0 /tmp/tmpdvztv3r_.php(28): words_in_sentence()\n\
    #1 /tmp/tmpdvztv3r_.php(32): candidate()\n#2 /tmp/tmpdvztv3r_.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpdvztv3r_.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp6jovl6w8.php:20\nStack trace:\n#0 /tmp/tmp6jovl6w8.php(28): words_in_sentence()\n\
    #1 /tmp/tmp6jovl6w8.php(32): candidate()\n#2 /tmp/tmp6jovl6w8.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmp6jovl6w8.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $primes = [2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    $result\
    \ = [];\n    foreach ($words as $word) {\n        if (in_array(strlen($word),\
    \ $primes)) {\n            $result[] = $word;\n        }\n    }\n    return implode('\
    \ ', $result);\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpjcdqfoaz.php:20\nStack trace:\n#0 /tmp/tmpjcdqfoaz.php(27): words_in_sentence()\n\
    #1 /tmp/tmpjcdqfoaz.php(31): candidate()\n#2 /tmp/tmpjcdqfoaz.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpjcdqfoaz.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp_hm_6zel.php:20\nStack trace:\n#0 /tmp/tmp_hm_6zel.php(27): words_in_sentence()\n\
    #1 /tmp/tmp_hm_6zel.php(31): candidate()\n#2 /tmp/tmp_hm_6zel.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp_hm_6zel.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpe4hwd7ys.php:20\nStack trace:\n#0 /tmp/tmpe4hwd7ys.php(28): words_in_sentence()\n\
    #1 /tmp/tmpe4hwd7ys.php(32): candidate()\n#2 /tmp/tmpe4hwd7ys.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpe4hwd7ys.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpx4ncwknx.php:20\nStack trace:\n#0 /tmp/tmpx4ncwknx.php(27): words_in_sentence()\n\
    #1 /tmp/tmpx4ncwknx.php(31): candidate()\n#2 /tmp/tmpx4ncwknx.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpx4ncwknx.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp3vcielub.php:20\nStack trace:\n#0 /tmp/tmp3vcielub.php(27): words_in_sentence()\n\
    #1 /tmp/tmp3vcielub.php(31): candidate()\n#2 /tmp/tmp3vcielub.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3vcielub.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpsr2wkq_j.php:20\nStack trace:\n#0 /tmp/tmpsr2wkq_j.php(27): words_in_sentence()\n\
    #1 /tmp/tmpsr2wkq_j.php(31): candidate()\n#2 /tmp/tmpsr2wkq_j.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpsr2wkq_j.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpp_se5spo.php:20\nStack trace:\n#0 /tmp/tmpp_se5spo.php(28): words_in_sentence()\n\
    #1 /tmp/tmpp_se5spo.php(32): candidate()\n#2 /tmp/tmpp_se5spo.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpp_se5spo.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpcl_9yfre.php:20\nStack trace:\n#0 /tmp/tmpcl_9yfre.php(28): words_in_sentence()\n\
    #1 /tmp/tmpcl_9yfre.php(32): candidate()\n#2 /tmp/tmpcl_9yfre.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpcl_9yfre.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmph5ic_39t.php:20\nStack trace:\n#0 /tmp/tmph5ic_39t.php(27): words_in_sentence()\n\
    #1 /tmp/tmph5ic_39t.php(31): candidate()\n#2 /tmp/tmph5ic_39t.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmph5ic_39t.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp82b0msw6.php:20\nStack trace:\n#0 /tmp/tmp82b0msw6.php(28): words_in_sentence()\n\
    #1 /tmp/tmp82b0msw6.php(32): candidate()\n#2 /tmp/tmp82b0msw6.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmp82b0msw6.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpnlfxk2qt.php:20\nStack trace:\n#0 /tmp/tmpnlfxk2qt.php(27): words_in_sentence()\n\
    #1 /tmp/tmpnlfxk2qt.php(31): candidate()\n#2 /tmp/tmpnlfxk2qt.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpnlfxk2qt.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpl2ze288m.php:20\nStack trace:\n#0 /tmp/tmpl2ze288m.php(27): words_in_sentence()\n\
    #1 /tmp/tmpl2ze288m.php(31): candidate()\n#2 /tmp/tmpl2ze288m.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpl2ze288m.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpgsuxi5pu.php:20\nStack trace:\n#0 /tmp/tmpgsuxi5pu.php(27): words_in_sentence()\n\
    #1 /tmp/tmpgsuxi5pu.php(31): candidate()\n#2 /tmp/tmpgsuxi5pu.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpgsuxi5pu.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmptwcwl33n.php:20\nStack trace:\n#0 /tmp/tmptwcwl33n.php(27): words_in_sentence()\n\
    #1 /tmp/tmptwcwl33n.php(31): candidate()\n#2 /tmp/tmptwcwl33n.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmptwcwl33n.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp4yq2ti53.php:20\nStack trace:\n#0 /tmp/tmp4yq2ti53.php(28): words_in_sentence()\n\
    #1 /tmp/tmp4yq2ti53.php(32): candidate()\n#2 /tmp/tmp4yq2ti53.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4yq2ti53.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmps2yk19cf.php:20\nStack trace:\n#0 /tmp/tmps2yk19cf.php(27): words_in_sentence()\n\
    #1 /tmp/tmps2yk19cf.php(31): candidate()\n#2 /tmp/tmps2yk19cf.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmps2yk19cf.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp0xn6787q.php:20\nStack trace:\n#0 /tmp/tmp0xn6787q.php(28): words_in_sentence()\n\
    #1 /tmp/tmp0xn6787q.php(32): candidate()\n#2 /tmp/tmp0xn6787q.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmp0xn6787q.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpp_4_ezsp.php:20\nStack trace:\n#0 /tmp/tmpp_4_ezsp.php(27): words_in_sentence()\n\
    #1 /tmp/tmpp_4_ezsp.php(31): candidate()\n#2 /tmp/tmpp_4_ezsp.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpp_4_ezsp.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpcxtjn0ho.php:20\nStack trace:\n#0 /tmp/tmpcxtjn0ho.php(27): words_in_sentence()\n\
    #1 /tmp/tmpcxtjn0ho.php(31): candidate()\n#2 /tmp/tmpcxtjn0ho.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpcxtjn0ho.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpxrsuawv7.php:20\nStack trace:\n#0 /tmp/tmpxrsuawv7.php(27): words_in_sentence()\n\
    #1 /tmp/tmpxrsuawv7.php(31): candidate()\n#2 /tmp/tmpxrsuawv7.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpxrsuawv7.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpzaoa2t51.php:20\nStack trace:\n#0 /tmp/tmpzaoa2t51.php(27): words_in_sentence()\n\
    #1 /tmp/tmpzaoa2t51.php(31): candidate()\n#2 /tmp/tmpzaoa2t51.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpzaoa2t51.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp0mzyu9qo.php:20\nStack trace:\n#0 /tmp/tmp0mzyu9qo.php(27): words_in_sentence()\n\
    #1 /tmp/tmp0mzyu9qo.php(31): candidate()\n#2 /tmp/tmp0mzyu9qo.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp0mzyu9qo.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpt230g2pn.php:20\nStack trace:\n#0 /tmp/tmpt230g2pn.php(27): words_in_sentence()\n\
    #1 /tmp/tmpt230g2pn.php(31): candidate()\n#2 /tmp/tmpt230g2pn.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpt230g2pn.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmps1mu2j8c.php:20\nStack trace:\n#0 /tmp/tmps1mu2j8c.php(28): words_in_sentence()\n\
    #1 /tmp/tmps1mu2j8c.php(32): candidate()\n#2 /tmp/tmps1mu2j8c.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmps1mu2j8c.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpjl1ts81j.php:20\nStack trace:\n#0 /tmp/tmpjl1ts81j.php(27): words_in_sentence()\n\
    #1 /tmp/tmpjl1ts81j.php(31): candidate()\n#2 /tmp/tmpjl1ts81j.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpjl1ts81j.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpvs1av0b0.php:20\nStack trace:\n#0 /tmp/tmpvs1av0b0.php(28): words_in_sentence()\n\
    #1 /tmp/tmpvs1av0b0.php(32): candidate()\n#2 /tmp/tmpvs1av0b0.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpvs1av0b0.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpg6hry2ro.php:20\nStack trace:\n#0 /tmp/tmpg6hry2ro.php(27): words_in_sentence()\n\
    #1 /tmp/tmpg6hry2ro.php(31): candidate()\n#2 /tmp/tmpg6hry2ro.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpg6hry2ro.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpcfs526jd.php:20\nStack trace:\n#0 /tmp/tmpcfs526jd.php(27): words_in_sentence()\n\
    #1 /tmp/tmpcfs526jd.php(31): candidate()\n#2 /tmp/tmpcfs526jd.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpcfs526jd.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpujg6hzq_.php:20\nStack trace:\n#0 /tmp/tmpujg6hzq_.php(27): words_in_sentence()\n\
    #1 /tmp/tmpujg6hzq_.php(31): candidate()\n#2 /tmp/tmpujg6hzq_.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpujg6hzq_.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpnwydv0vp.php:20\nStack trace:\n#0 /tmp/tmpnwydv0vp.php(28): words_in_sentence()\n\
    #1 /tmp/tmpnwydv0vp.php(32): candidate()\n#2 /tmp/tmpnwydv0vp.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpnwydv0vp.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmprgmcm3qa.php:20\nStack trace:\n#0 /tmp/tmprgmcm3qa.php(27): words_in_sentence()\n\
    #1 /tmp/tmprgmcm3qa.php(31): candidate()\n#2 /tmp/tmprgmcm3qa.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmprgmcm3qa.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpfumm2qry.php:20\nStack trace:\n#0 /tmp/tmpfumm2qry.php(27): words_in_sentence()\n\
    #1 /tmp/tmpfumm2qry.php(31): candidate()\n#2 /tmp/tmpfumm2qry.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpfumm2qry.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpyyuz9hys.php:20\nStack trace:\n#0 /tmp/tmpyyuz9hys.php(27): words_in_sentence()\n\
    #1 /tmp/tmpyyuz9hys.php(31): candidate()\n#2 /tmp/tmpyyuz9hys.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpyyuz9hys.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpi04e6ofo.php:20\nStack trace:\n#0 /tmp/tmpi04e6ofo.php(28): words_in_sentence()\n\
    #1 /tmp/tmpi04e6ofo.php(32): candidate()\n#2 /tmp/tmpi04e6ofo.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpi04e6ofo.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpsjnczkc6.php:20\nStack trace:\n#0 /tmp/tmpsjnczkc6.php(27): words_in_sentence()\n\
    #1 /tmp/tmpsjnczkc6.php(31): candidate()\n#2 /tmp/tmpsjnczkc6.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpsjnczkc6.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpf3ah5kqv.php:20\nStack trace:\n#0 /tmp/tmpf3ah5kqv.php(27): words_in_sentence()\n\
    #1 /tmp/tmpf3ah5kqv.php(31): candidate()\n#2 /tmp/tmpf3ah5kqv.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpf3ah5kqv.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $sentence = explode(' ', $sentence);\n    $result = [];\n    foreach ($sentence\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp207mn1bx.php:20\nStack trace:\n#0 /tmp/tmp207mn1bx.php(27): words_in_sentence()\n\
    #1 /tmp/tmp207mn1bx.php(31): candidate()\n#2 /tmp/tmp207mn1bx.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp207mn1bx.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $primes = [2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    $result\
    \ = [];\n    foreach ($words as $word) {\n        if (in_array(strlen($word),\
    \ $primes)) {\n            $result[] = $word;\n        }\n    }\n    return implode('\
    \ ', $result);\n}\necho words_in_sentence('This is a test') . PHP_EOL;\necho words_in_sentence('lets\
    \ go for swimming') . PHP_EOL;\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "is\ngo for\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $primes = [2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    $result\
    \ = [];\n    foreach ($words as $word) {\n        if (in_array(strlen($word),\
    \ $primes)) {\n            $result[] = $word;\n        }\n    }\n    return implode('\
    \ ', $result);\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpkvdetj44.php:20\nStack trace:\n#0 /tmp/tmpkvdetj44.php(27): words_in_sentence()\n\
    #1 /tmp/tmpkvdetj44.php(31): candidate()\n#2 /tmp/tmpkvdetj44.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpkvdetj44.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $primes = [2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    $result\
    \ = [];\n    foreach ($words as $word) {\n        if (in_array(strlen($word),\
    \ $primes)) {\n            $result[] = $word;\n        }\n    }\n    return implode('\
    \ ', $result);\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpr6pde9x6.php:20\nStack trace:\n#0 /tmp/tmpr6pde9x6.php(27): words_in_sentence()\n\
    #1 /tmp/tmpr6pde9x6.php(31): candidate()\n#2 /tmp/tmpr6pde9x6.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpr6pde9x6.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $primes = [];\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if (is_prime($length)) {\n\
    \            $primes[] = $word;\n        }\n    }\n    return implode(' ', $primes);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpl9ll_oui.php:21\nStack trace:\n#0 /tmp/tmpl9ll_oui.php(28): words_in_sentence()\n\
    #1 /tmp/tmpl9ll_oui.php(32): candidate()\n#2 /tmp/tmpl9ll_oui.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpl9ll_oui.php on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp54y94dax.php:20\nStack trace:\n#0 /tmp/tmp54y94dax.php(27): words_in_sentence()\n\
    #1 /tmp/tmp54y94dax.php(31): candidate()\n#2 /tmp/tmp54y94dax.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp54y94dax.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpai_xnuk7.php:20\nStack trace:\n#0 /tmp/tmpai_xnuk7.php(27): words_in_sentence()\n\
    #1 /tmp/tmpai_xnuk7.php(31): candidate()\n#2 /tmp/tmpai_xnuk7.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpai_xnuk7.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp55be5osq.php:20\nStack trace:\n#0 /tmp/tmp55be5osq.php(27): words_in_sentence()\n\
    #1 /tmp/tmp55be5osq.php(31): candidate()\n#2 /tmp/tmp55be5osq.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp55be5osq.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp33rq4p_y.php:20\nStack trace:\n#0 /tmp/tmp33rq4p_y.php(28): words_in_sentence()\n\
    #1 /tmp/tmp33rq4p_y.php(32): candidate()\n#2 /tmp/tmp33rq4p_y.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmp33rq4p_y.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpahofenvs.php:20\nStack trace:\n#0 /tmp/tmpahofenvs.php(27): words_in_sentence()\n\
    #1 /tmp/tmpahofenvs.php(31): candidate()\n#2 /tmp/tmpahofenvs.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpahofenvs.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpmwwy6tuc.php:20\nStack trace:\n#0 /tmp/tmpmwwy6tuc.php(27): words_in_sentence()\n\
    #1 /tmp/tmpmwwy6tuc.php(31): candidate()\n#2 /tmp/tmpmwwy6tuc.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpmwwy6tuc.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpxuqiasrr.php:20\nStack trace:\n#0 /tmp/tmpxuqiasrr.php(27): words_in_sentence()\n\
    #1 /tmp/tmpxuqiasrr.php(31): candidate()\n#2 /tmp/tmpxuqiasrr.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpxuqiasrr.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp989x3rwd.php:20\nStack trace:\n#0 /tmp/tmp989x3rwd.php(27): words_in_sentence()\n\
    #1 /tmp/tmp989x3rwd.php(31): candidate()\n#2 /tmp/tmp989x3rwd.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp989x3rwd.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp6096tjdu.php:20\nStack trace:\n#0 /tmp/tmp6096tjdu.php(27): words_in_sentence()\n\
    #1 /tmp/tmp6096tjdu.php(31): candidate()\n#2 /tmp/tmp6096tjdu.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp6096tjdu.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpehq7upg8.php:20\nStack trace:\n#0 /tmp/tmpehq7upg8.php(27): words_in_sentence()\n\
    #1 /tmp/tmpehq7upg8.php(31): candidate()\n#2 /tmp/tmpehq7upg8.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpehq7upg8.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmppgjioh59.php:20\nStack trace:\n#0 /tmp/tmppgjioh59.php(27): words_in_sentence()\n\
    #1 /tmp/tmppgjioh59.php(31): candidate()\n#2 /tmp/tmppgjioh59.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmppgjioh59.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpsz4e70rv.php:20\nStack trace:\n#0 /tmp/tmpsz4e70rv.php(28): words_in_sentence()\n\
    #1 /tmp/tmpsz4e70rv.php(32): candidate()\n#2 /tmp/tmpsz4e70rv.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpsz4e70rv.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmp6movjzks.php:20\nStack trace:\n#0 /tmp/tmp6movjzks.php(27): words_in_sentence()\n\
    #1 /tmp/tmp6movjzks.php(31): candidate()\n#2 /tmp/tmp6movjzks.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp6movjzks.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpye7skrto.php:20\nStack trace:\n#0 /tmp/tmpye7skrto.php(28): words_in_sentence()\n\
    #1 /tmp/tmpye7skrto.php(32): candidate()\n#2 /tmp/tmpye7skrto.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpye7skrto.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpg6gtjlce.php:20\nStack trace:\n#0 /tmp/tmpg6gtjlce.php(27): words_in_sentence()\n\
    #1 /tmp/tmpg6gtjlce.php(31): candidate()\n#2 /tmp/tmpg6gtjlce.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpg6gtjlce.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $output = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $output[] = $word;\n\
    \        }\n    }\n    return implode(' ', $output);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmplqjvi1sq.php:20\nStack trace:\n#0 /tmp/tmplqjvi1sq.php(28): words_in_sentence()\n\
    #1 /tmp/tmplqjvi1sq.php(32): candidate()\n#2 /tmp/tmplqjvi1sq.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmplqjvi1sq.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $output = [];\n    foreach ($words as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $output[] = $word;\n\
    \        }\n    }\n    return implode(' ', $output);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpnlksdw3n.php:20\nStack trace:\n#0 /tmp/tmpnlksdw3n.php(27): words_in_sentence()\n\
    #1 /tmp/tmpnlksdw3n.php(31): candidate()\n#2 /tmp/tmpnlksdw3n.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpnlksdw3n.php on line 20\n"
  exit_code: 255
  status: Exception
