name: HumanEval_119_match_parens
language: php
results:
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $l = $lst[0];\n  $r = $lst[1];\n  $l_cnt = 0;\n  $r_cnt = 0;\n  for ($i\
    \ = 0; $i < strlen($l); $i++) {\n    if ($l[$i] == '(') {\n      $l_cnt++;\n \
    \   } else {\n      $l_cnt--;\n    }\n  }\n  for ($i = 0; $i < strlen($r); $i++)\
    \ {\n    if ($r[$i] == '(') {\n      $r_cnt++;\n    } else {\n      $r_cnt--;\n\
    \    }\n  }\n  if ($l_cnt == 0 && $r_cnt == 0) {\n    return 'Yes';\n  }\n  if\
    \ ($l_cnt == 0 && $r_cnt < 0) {\n    return 'Yes';\n  }\n  if ($l_cnt > 0 && $r_cnt\
    \ == 0) {\n    return 'Yes';\n  }\n  if ($l_cnt > 0 && $r_cnt < 0) {\n    if ($l_cnt\
    \ == -$r_cnt) {\n      return 'Yes';\n    }\n  }\n  return 'No';\n}\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmph5lr2rqq.php:57\n\
    Stack trace:\n#0 /tmp/tmph5lr2rqq.php(68): test()\n#1 {main}\n  thrown in /tmp/tmph5lr2rqq.php\
    \ on line 57\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpu0og2_kp.php:43\n\
    Stack trace:\n#0 /tmp/tmpu0og2_kp.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpu0og2_kp.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $lst[0] = array_reverse($lst[0]);\n    $lst[1] = array_reverse($lst[1]);\n\
    \    $lst = array_merge($lst[0], $lst[1]);\n    $count = 0;\n    foreach ($lst\
    \ as $char) {\n        if ($char == '(') {\n            $count++;\n        } else\
    \ {\n            $count--;\n        }\n        if ($count < 0) {\n           \
    \ return 'No';\n        }\n    }\n    return 'Yes';\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqqthwe39.php:41\n\
    Stack trace:\n#0 /tmp/tmpqqthwe39.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpqqthwe39.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $lst[0] = array_reverse($lst[0]);\n    $lst[1] = array_reverse($lst[1]);\n\
    \    $str = '';\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $arr) {\n\
    \        foreach ($arr as $char) {\n            if ($char == '(') {\n        \
    \        $open++;\n            } else {\n                $close++;\n         \
    \   }\n            if ($close > $open) {\n                return 'No';\n     \
    \       }\n        }\n    }\n    if ($open == $close) {\n        return 'Yes';\n\
    \    }\n    return 'No';\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0f3bl649.php:47\n\
    Stack trace:\n#0 /tmp/tmp0f3bl649.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp0f3bl649.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count == 0 && $str2_count != 0) {\n        return\
    \ 'No';\n    } else if ($str1_count != 0 && $str2_count == 0) {\n        return\
    \ 'No';\n    } else if ($str1_count > 0 && $str2_count < 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count < 0 && $str2_count > 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpya6dm3hn.php:53\n\
    Stack trace:\n#0 /tmp/tmpya6dm3hn.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpya6dm3hn.php\
    \ on line 53\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $left = 0;\n  $right = 0;\n  foreach ($lst as $str) {\n    for ($i = 0;\
    \ $i < strlen($str); $i++) {\n      if ($str[$i] == '(') {\n        $left++;\n\
    \      } else {\n        $right++;\n      }\n    }\n  }\n  return $left == $right\
    \ ? 'Yes' : 'No';\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpeuloxuz4.php:42\n\
    Stack trace:\n#0 /tmp/tmpeuloxuz4.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpeuloxuz4.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    $open_diff = $str1_open\
    \ - $str2_open;\n    $close_diff = $str1_close - $str2_close;\n    if ($open_diff\
    \ == 0 && $close_diff == 0) {\n        return 'Yes';\n    } elseif ($open_diff\
    \ == 1 && $close_diff == -1) {\n        return 'Yes';\n    } elseif ($open_diff\
    \ == -1 && $close_diff == 1) {\n        return 'Yes';\n    } else {\n        return\
    \ 'No';\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdvwcvgca.php:37\n\
    Stack trace:\n#0 /tmp/tmpdvwcvgca.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpdvwcvgca.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str1_close = 0;\n \
    \   $str2_open = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return 'Yes';\n    }\
    \ else {\n        return 'No';\n    }\n}\nfunction candidate(...$args) {\n   \
    \ return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpewy1z9g7.php:47\n\
    Stack trace:\n#0 /tmp/tmpewy1z9g7.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpewy1z9g7.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return 'Yes';\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return 'No';\n    }\
    \ elseif ($str1_open != $str1_close && $str2_open == $str2_close) {\n        return\
    \ 'No';\n    } elseif ($str1_open != $str1_close && $str2_open != $str2_close)\
    \ {\n        if ($str1_open > $str1_close) {\n            $str1_open = $str1_open\
    \ - $str1_close;\n            $str2_close = $str2_close - $str2_open;\n      \
    \      if ($str1_open == $str2_close) {\n                return 'Yes';\n     \
    \       } else {\n                return 'No';\n            }\n        } elseif\
    \ ($str1_open < $str1_close) {\n            $str1_close = $str1_close - $str1_open;\n\
    \            $str2_open = $str2_open - $str2_close;\n            if ($str1_close\
    \ == $str2_open) {\n                return 'Yes';\n            } else {\n    \
    \            return 'No';\n            }\n        }\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpp_yx7832.php:61\n\
    Stack trace:\n#0 /tmp/tmpp_yx7832.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpp_yx7832.php\
    \ on line 61\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $lst[0] = array_reverse($lst[0]);\n    $lst[1] = array_reverse($lst[1]);\n\
    \    $lst[0] = implode($lst[0]);\n    $lst[1] = implode($lst[1]);\n    $str =\
    \ $lst[0] . $lst[1];\n    $str = str_split($str);\n    $stack = [];\n    foreach\
    \ ($str as $char) {\n        if ($char == '(') {\n            array_push($stack,\
    \ $char);\n        } else {\n            if (empty($stack)) {\n              \
    \  return 'No';\n            } else {\n                array_pop($stack);\n  \
    \          }\n        }\n    }\n    if (empty($stack)) {\n        return 'Yes';\n\
    \    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp47e8yhbd.php:48\n\
    Stack trace:\n#0 /tmp/tmp47e8yhbd.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp47e8yhbd.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $lst[0] = array_reverse($lst[0]);\n    $lst[1] = array_reverse($lst[1]);\n\
    \    $lst[0] = implode($lst[0]);\n    $lst[1] = implode($lst[1]);\n    $str =\
    \ $lst[0] . $lst[1];\n    $str = str_split($str);\n    $str = array_reverse($str);\n\
    \    $str = implode($str);\n    $str = str_split($str);\n    $count = 0;\n   \
    \ foreach ($str as $char) {\n        if ($char == '(') {\n            $count++;\n\
    \        } else {\n            $count--;\n        }\n        if ($count < 0) {\n\
    \            return 'No';\n        }\n    }\n    if ($count == 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphhvakp4x.php:47\n\
    Stack trace:\n#0 /tmp/tmphhvakp4x.php(61): test()\n#1 {main}\n  thrown in /tmp/tmphhvakp4x.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count == 0 && $str2_count < 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count > 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count > 0 && $str2_count < 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpf8la11xk.php:51\n\
    Stack trace:\n#0 /tmp/tmpf8la11xk.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpf8la11xk.php\
    \ on line 51\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1_len = strlen($s1);\n    $s2_len\
    \ = strlen($s2);\n    $s1_open = 0;\n    $s2_open = 0;\n    for ($i = 0; $i <\
    \ $s1_len; $i++) {\n        if ($s1[$i] == '(') {\n            $s1_open++;\n \
    \       } else {\n            $s1_open--;\n        }\n    }\n    for ($i = 0;\
    \ $i < $s2_len; $i++) {\n        if ($s2[$i] == '(') {\n            $s2_open++;\n\
    \        } else {\n            $s2_open--;\n        }\n    }\n    if ($s1_open\
    \ == 0 && $s2_open == 0) {\n        return 'Yes';\n    } elseif ($s1_open == 0\
    \ && $s2_open < 0) {\n        return 'Yes';\n    } elseif ($s1_open > 0 && $s2_open\
    \ == 0) {\n        return 'Yes';\n    } elseif ($s1_open > 0 && $s2_open < 0)\
    \ {\n        if ($s1_open == abs($s2_open)) {\n            return 'Yes';\n   \
    \     } else {\n            return 'No';\n        }\n    } else {\n        return\
    \ 'No';\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5wtuhm_j.php:58\n\
    Stack trace:\n#0 /tmp/tmp5wtuhm_j.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp5wtuhm_j.php\
    \ on line 58\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str1_close = 0;\n \
    \   $str2_open = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return 'Yes';\n    }\
    \ else {\n        return 'No';\n    }\n}\nfunction candidate(...$args) {\n   \
    \ return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp23jvweh2.php:47\n\
    Stack trace:\n#0 /tmp/tmp23jvweh2.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp23jvweh2.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str1_close = 0;\n \
    \   $str2_open = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return 'Yes';\n    }\
    \ else {\n        return 'No';\n    }\n}\nfunction candidate(...$args) {\n   \
    \ return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpo6bkh44j.php:47\n\
    Stack trace:\n#0 /tmp/tmpo6bkh44j.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpo6bkh44j.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    $open2 = 0;\n    $close2 = 0;\n    for\
    \ ($i = 0; $i < strlen($lst[0]); $i++) {\n        if ($lst[0][$i] == '(') {\n\
    \            $open++;\n        } else {\n            $close++;\n        }\n  \
    \  }\n    for ($i = 0; $i < strlen($lst[1]); $i++) {\n        if ($lst[1][$i]\
    \ == '(') {\n            $open2++;\n        } else {\n            $close2++;\n\
    \        }\n    }\n    if ($open == $close && $open2 == $close2) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdzurhekd.php:43\n\
    Stack trace:\n#0 /tmp/tmpdzurhekd.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpdzurhekd.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $lst[0] = array_reverse($lst[0]);\n    $lst[1] = array_reverse($lst[1]);\n\
    \    $open = 0;\n    $close = 0;\n    foreach ($lst[0] as $char) {\n        if\
    \ ($char == '(') {\n            $open++;\n        } else {\n            $close++;\n\
    \        }\n    }\n    foreach ($lst[1] as $char) {\n        if ($char == '(')\
    \ {\n            $open++;\n        } else {\n            $close++;\n        }\n\
    \    }\n    if ($open == $close) {\n        return 'Yes';\n    } else {\n    \
    \    return 'No';\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn2nf38h1.php:54\n\
    Stack trace:\n#0 /tmp/tmpn2nf38h1.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpn2nf38h1.php\
    \ on line 54\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $lst = array_merge($lst[0], $lst[1]);\n    $count = 0;\n    foreach ($lst as\
    \ $char) {\n        if ($char == '(') {\n            $count++;\n        } else\
    \ {\n            $count--;\n        }\n        if ($count < 0) {\n           \
    \ return 'No';\n        }\n    }\n    return $count == 0 ? 'Yes' : 'No';\n}\n\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptzezmhas.php:39\n\
    Stack trace:\n#0 /tmp/tmptzezmhas.php(50): test()\n#1 {main}\n  thrown in /tmp/tmptzezmhas.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpeqx78254.php:43\n\
    Stack trace:\n#0 /tmp/tmpeqx78254.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpeqx78254.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str3 = $str1 . $str2;\n\
    \    $str4 = $str2 . $str1;\n    if (is_good($str3) || is_good($str4)) {\n   \
    \     return 'Yes';\n    } else {\n        return 'No';\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_good()\
    \ in /tmp/tmpc0h5oi5h.php:18\nStack trace:\n#0 /tmp/tmpc0h5oi5h.php(26): match_parens()\n\
    #1 /tmp/tmpc0h5oi5h.php(30): candidate()\n#2 /tmp/tmpc0h5oi5h.php(44): test()\n\
    #3 {main}\n  thrown in /tmp/tmpc0h5oi5h.php on line 18\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = substr_count($str1,\
    \ '(');\n    $str2_count = substr_count($str2, '(');\n    $str1_count -= substr_count($str1,\
    \ ')');\n    $str2_count -= substr_count($str2, ')');\n    if ($str1_count ==\
    \ 0 && $str2_count == 0) {\n        return 'Yes';\n    }\n    if ($str1_count\
    \ == 0 && $str2_count > 0) {\n        return 'No';\n    }\n    if ($str1_count\
    \ > 0 && $str2_count == 0) {\n        return 'No';\n    }\n    if ($str1_count\
    \ > 0 && $str2_count > 0) {\n        return 'Yes';\n    }\n    if ($str1_count\
    \ < 0 && $str2_count < 0) {\n        return 'No';\n    }\n    if ($str1_count\
    \ < 0 && $str2_count > 0) {\n        return 'Yes';\n    }\n    if ($str1_count\
    \ > 0 && $str2_count < 0) {\n        return 'Yes';\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7p1v264x.php:50\n\
    Stack trace:\n#0 /tmp/tmp7p1v264x.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp7p1v264x.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1_open = substr_count($s1,\
    \ '(');\n    $s1_close = substr_count($s1, ')');\n    $s2_open = substr_count($s2,\
    \ '(');\n    $s2_close = substr_count($s2, ')');\n    if ($s1_open == $s1_close\
    \ && $s2_open == $s2_close) {\n        return 'Yes';\n    }\n    if ($s1_open\
    \ > $s1_close && $s2_open > $s2_close) {\n        return 'Yes';\n    }\n    if\
    \ ($s1_open < $s1_close && $s2_open < $s2_close) {\n        return 'Yes';\n  \
    \  }\n    return 'No';\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvg37d6y7.php:37\n\
    Stack trace:\n#0 /tmp/tmpvg37d6y7.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpvg37d6y7.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count > 0 && $str2_count < 0) {\n        if ($str1_count\
    \ == abs($str2_count)) {\n            return 'Yes';\n        }\n    } else if\
    \ ($str1_count < 0 && $str2_count > 0) {\n        if (abs($str1_count) == $str2_count)\
    \ {\n            return 'Yes';\n        }\n    }\n    return 'No';\n}\necho match_parens(['()(',\
    \ ')']) . PHP_EOL;\necho match_parens([')', ')']) . PHP_EOL;\necho match_parens(['(()',\
    \ ')']) . PHP_EOL;\necho match_parens(['()', '()']) . PHP_EOL;\necho match_parens(['(()',\
    \ '()']) . PHP_EOL;\necho match_parens(['(()', ')(']) . PHP_EOL;\necho match_parens(['(()',\
    \ ')((']) . PHP_EOL;\necho match_parens(['(()', ')(((']) . PHP_EOL;\necho match_parens(['(()',\
    \ ')((((']) . PHP_EOL;\necho match_parens(['(()', ')(((((']) . PHP_\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \",\" or \";\" in /tmp/tmpw8is3kuz.php on line 55\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str1_close = 0;\n \
    \   $str2_open = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return 'Yes';\n    }\
    \ else {\n        return 'No';\n    }\n}\n\nfunction candidate(...$args) {\n \
    \   return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbkp7on4b.php:48\n\
    Stack trace:\n#0 /tmp/tmpbkp7on4b.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpbkp7on4b.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return 'Yes';\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open > $str2_close) {\n        return 'Yes';\n    }\
    \ elseif ($str1_open > $str1_close && $str2_open == $str2_close) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn681hyjc.php:35\n\
    Stack trace:\n#0 /tmp/tmpn681hyjc.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpn681hyjc.php\
    \ on line 35\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s3 = $s1 . $s2;\n    $s4 = $s2\
    \ . $s1;\n    $s5 = $s1 . $s1;\n    $s6 = $s2 . $s2;\n    $s7 = $s2 . $s1;\n \
    \   $s8 = $s1 . $s2;\n    if (is_good($s3) || is_good($s4) || is_good($s5) ||\
    \ is_good($s6) || is_good($s7) || is_good($s8)) {\n        return 'Yes';\n   \
    \ } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args) {\n \
    \   return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_good()\
    \ in /tmp/tmp8kzvpfco.php:22\nStack trace:\n#0 /tmp/tmp8kzvpfco.php(29): match_parens()\n\
    #1 /tmp/tmp8kzvpfco.php(33): candidate()\n#2 /tmp/tmp8kzvpfco.php(47): test()\n\
    #3 {main}\n  thrown in /tmp/tmp8kzvpfco.php on line 22\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str1_close = 0;\n \
    \   $str2_open = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return 'Yes';\n    }\
    \ else {\n        return 'No';\n    }\n}\nfunction candidate(...$args) {\n   \
    \ return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwmfczzwj.php:47\n\
    Stack trace:\n#0 /tmp/tmpwmfczzwj.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpwmfczzwj.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($lst[0]); $i++)\
    \ {\n        if ($lst[0][$i] == '(') {\n            $open++;\n        } else {\n\
    \            $close++;\n        }\n    }\n    for ($i = 0; $i < strlen($lst[1]);\
    \ $i++) {\n        if ($lst[1][$i] == '(') {\n            $open++;\n        }\
    \ else {\n            $close++;\n        }\n    }\n    if ($open == $close) {\n\
    \        return 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpi2lvl9t8.php:50\n\
    Stack trace:\n#0 /tmp/tmpi2lvl9t8.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpi2lvl9t8.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str3 = $str1 . $str2;\n\
    \    $str4 = $str2 . $str1;\n    if (is_good($str3) || is_good($str4)) {\n   \
    \     return 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_good()\
    \ in /tmp/tmphiu4nmvm.php:18\nStack trace:\n#0 /tmp/tmphiu4nmvm.php(25): match_parens()\n\
    #1 /tmp/tmphiu4nmvm.php(29): candidate()\n#2 /tmp/tmphiu4nmvm.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmphiu4nmvm.php on line 18\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return 'Yes';\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return 'No';\n    }\
    \ elseif ($str1_open != $str1_close && $str2_open == $str2_close) {\n        return\
    \ 'No';\n    } elseif ($str1_open != $str1_close && $str2_open != $str2_close)\
    \ {\n        if ($str1_open > $str1_close) {\n            $str1_open = $str1_open\
    \ - $str1_close;\n            $str2_close = $str2_close - $str2_open;\n      \
    \      if ($str1_open == $str2_close) {\n                return 'Yes';\n     \
    \       } else {\n                return 'No';\n            }\n        } elseif\
    \ ($str1_open < $str1_close) {\n            $str1_close = $str1_close - $str1_open;\n\
    \            $str2_open = $str2_open - $str2_close;\n            if ($str1_close\
    \ == $str2_open) {\n                return 'Yes';\n            } else {\n    \
    \            return 'No';\n            }\n        }\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpeceermm5.php:61\n\
    Stack trace:\n#0 /tmp/tmpeceermm5.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpeceermm5.php\
    \ on line 61\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $left = 0;\n    $right = 0;\n    foreach ($lst as $str) {\n        for\
    \ ($i = 0; $i < strlen($str); $i++) {\n            if ($str[$i] == '(') {\n  \
    \              $left++;\n            } else {\n                $right++;\n   \
    \         }\n        }\n    }\n    return $left == $right ? 'Yes' : 'No';\n}\n\
    \nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqk94ljg5.php:42\n\
    Stack trace:\n#0 /tmp/tmpqk94ljg5.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpqk94ljg5.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $str) {\n        for\
    \ ($i = 0; $i < strlen($str); $i++) {\n            if ($str[$i] == '(') {\n  \
    \              $open++;\n            } else {\n                $close++;\n   \
    \         }\n        }\n    }\n    if ($open == $close) {\n        return 'Yes';\n\
    \    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzvii3mjv.php:45\n\
    Stack trace:\n#0 /tmp/tmpzvii3mjv.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpzvii3mjv.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $stack = [];\n    foreach ($lst[0] as $char) {\n        if ($char == '(') {\n\
    \            array_push($stack, $char);\n        } else {\n            if (empty($stack))\
    \ {\n                return 'No';\n            }\n            array_pop($stack);\n\
    \        }\n    }\n    foreach ($lst[1] as $char) {\n        if ($char == '(')\
    \ {\n            array_push($stack, $char);\n        } else {\n            if\
    \ (empty($stack)) {\n                return 'No';\n            }\n           \
    \ array_pop($stack);\n        }\n    }\n    return 'Yes';\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvb9tkppd.php:48\n\
    Stack trace:\n#0 /tmp/tmpvb9tkppd.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpvb9tkppd.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $lst = array_map(function($s) {\n    return str_split($s);\n  }, $lst);\n\
    \  $lst = array_reduce($lst, function($acc, $s) {\n    return array_merge($acc,\
    \ $s);\n  }, []);\n  $count = 0;\n  foreach ($lst as $c) {\n    if ($c == '(')\
    \ {\n      $count++;\n    } else {\n      $count--;\n    }\n    if ($count < 0)\
    \ {\n      return 'No';\n    }\n  }\n  return $count == 0 ? 'Yes' : 'No';\n}\n\
    \nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpq8ofxk49.php:42\n\
    Stack trace:\n#0 /tmp/tmpq8ofxk49.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpq8ofxk49.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str1_close = 0;\n \
    \   $str2_open = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return 'Yes';\n    }\
    \ else {\n        return 'No';\n    }\n}\nfunction candidate(...$args) {\n   \
    \ return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_28dku39.php:47\n\
    Stack trace:\n#0 /tmp/tmp_28dku39.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp_28dku39.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    $str1_open_close = $str1_open\
    \ - $str1_close;\n    $str2_open_close = $str2_open - $str2_close;\n    if ($str1_open_close\
    \ == 0 && $str2_open_close == 0) {\n        return 'Yes';\n    } elseif ($str1_open_close\
    \ == 0 && $str2_open_close != 0) {\n        return 'No';\n    } elseif ($str1_open_close\
    \ != 0 && $str2_open_close == 0) {\n        return 'No';\n    } elseif ($str1_open_close\
    \ > 0 && $str2_open_close < 0) {\n        return 'Yes';\n    } elseif ($str1_open_close\
    \ < 0 && $str2_open_close > 0) {\n        return 'Yes';\n    } else {\n      \
    \  return 'No';\n    }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4ftkbamf.php:44\n\
    Stack trace:\n#0 /tmp/tmp4ftkbamf.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp4ftkbamf.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == '(') {\n\
    \            $open++;\n        } else {\n            $close++;\n        }\n  \
    \  }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $open++;\n        } else {\n            $close++;\n        }\n\
    \    }\n    if ($open == $close) {\n        return 'Yes';\n    } else {\n    \
    \    return 'No';\n    }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprtz4c_rc.php:53\n\
    Stack trace:\n#0 /tmp/tmprtz4c_rc.php(58): test()\n#1 {main}\n  thrown in /tmp/tmprtz4c_rc.php\
    \ on line 53\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgydtxtdj.php:43\n\
    Stack trace:\n#0 /tmp/tmpgydtxtdj.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpgydtxtdj.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $str1_count = 0;\n  $str2_count\
    \ = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == '(')\
    \ {\n      $str1_count++;\n    } else {\n      $str1_count--;\n    }\n  }\n  for\
    \ ($i = 0; $i < strlen($str2); $i++) {\n    if ($str2[$i] == '(') {\n      $str2_count++;\n\
    \    } else {\n      $str2_count--;\n    }\n  }\n  if ($str1_count == 0 && $str2_count\
    \ == 0) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmqwor1k9.php:44\n\
    Stack trace:\n#0 /tmp/tmpmqwor1k9.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpmqwor1k9.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $str1_open = substr_count($str1,\
    \ '(');\n  $str1_close = substr_count($str1, ')');\n  $str2_open = substr_count($str2,\
    \ '(');\n  $str2_close = substr_count($str2, ')');\n  if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n    return 'Yes';\n  } else if ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n    return 'No';\n  } else if\
    \ ($str1_open != $str1_close && $str2_open == $str2_close) {\n    return 'No';\n\
    \  } else if ($str1_open != $str1_close && $str2_open != $str2_close) {\n    if\
    \ ($str1_open > $str1_close) {\n      $str1_open = $str1_open - $str1_close;\n\
    \      $str2_close = $str2_close - $str2_open;\n      if ($str1_open == $str2_close)\
    \ {\n        return 'Yes';\n      } else {\n        return 'No';\n      }\n  \
    \  } else if ($str1_open < $str1_close) {\n      $str1_close = $str1_close - $str1_open;\n\
    \      $str2_open = $str2_open - $str2_close;\n      if ($str1_close == $str2_open)\
    \ {\n        return 'Yes';\n      } else {\n        return 'No';\n      }\n  \
    \  }\n  }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4na8ra91.php:61\n\
    Stack trace:\n#0 /tmp/tmp4na8ra91.php(66): test()\n#1 {main}\n  thrown in /tmp/tmp4na8ra91.php\
    \ on line 61\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count == 0 && $str2_count != 0) {\n        return\
    \ 'No';\n    } else if ($str1_count != 0 && $str2_count == 0) {\n        return\
    \ 'No';\n    } else if ($str1_count < 0 && $str2_count < 0) {\n        return\
    \ 'No';\n    } else if ($str1_count > 0 && $str2_count > 0) {\n        return\
    \ 'No';\n    } else {\n        return 'Yes';\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuu0f8o82.php:53\n\
    Stack trace:\n#0 /tmp/tmpuu0f8o82.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpuu0f8o82.php\
    \ on line 53\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1_open = substr_count($s1,\
    \ '(');\n    $s1_close = substr_count($s1, ')');\n    $s2_open = substr_count($s2,\
    \ '(');\n    $s2_close = substr_count($s2, ')');\n    $s1_diff = $s1_open - $s1_close;\n\
    \    $s2_diff = $s2_open - $s2_close;\n    if ($s1_diff == 0 && $s2_diff == 0)\
    \ {\n        return 'Yes';\n    }\n    if ($s1_diff == 0 && $s2_diff != 0) {\n\
    \        return 'No';\n    }\n    if ($s1_diff != 0 && $s2_diff == 0) {\n    \
    \    return 'No';\n    }\n    if ($s1_diff != 0 && $s2_diff != 0) {\n        if\
    \ ($s1_diff == $s2_diff) {\n            return 'Yes';\n        }\n        if ($s1_diff\
    \ == -$s2_diff) {\n            return 'Yes';\n        }\n        return 'No';\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzvprnwnr.php:48\n\
    Stack trace:\n#0 /tmp/tmpzvprnwnr.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpzvprnwnr.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $left = $lst[0];\n    $right = $lst[1];\n    $left_count = substr_count($left,\
    \ '(');\n    $right_count = substr_count($right, ')');\n    if ($left_count ==\
    \ $right_count) {\n        return 'Yes';\n    }\n    return 'No';\n}\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0qojryib.php:29\n\
    Stack trace:\n#0 /tmp/tmp0qojryib.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp0qojryib.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lst = array_map(function($str) {\n        return str_split($str);\n\
    \    }, $lst);\n    $lst = array_reduce($lst, function($acc, $str) {\n       \
    \ return array_merge($acc, $str);\n    }, []);\n    $open = 0;\n    foreach ($lst\
    \ as $char) {\n        if ($char == '(') {\n            $open++;\n        } else\
    \ {\n            $open--;\n        }\n        if ($open < 0) {\n            return\
    \ 'No';\n        }\n    }\n    return $open == 0 ? 'Yes' : 'No';\n}\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmk36qzel.php:42\n\
    Stack trace:\n#0 /tmp/tmpmk36qzel.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpmk36qzel.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count > 0 && $str2_count < 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count < 0 && $str2_count > 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptlheu8py.php:50\n\
    Stack trace:\n#0 /tmp/tmptlheu8py.php(62): test()\n#1 {main}\n  thrown in /tmp/tmptlheu8py.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $str) {\n        for\
    \ ($i = 0; $i < strlen($str); $i++) {\n            if ($str[$i] == '(') {\n  \
    \              $open++;\n            } else {\n                $close++;\n   \
    \         }\n        }\n    }\n    if ($open == $close) {\n        return 'Yes';\n\
    \    } else {\n        return 'No';\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1i34ayt1.php:46\n\
    Stack trace:\n#0 /tmp/tmp1i34ayt1.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp1i34ayt1.php\
    \ on line 46\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return 'Yes';\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open > $str2_close) {\n        return 'Yes';\n    }\
    \ elseif ($str1_open > $str1_close && $str2_open == $str2_close) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmubq6_s8.php:36\n\
    Stack trace:\n#0 /tmp/tmpmubq6_s8.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpmubq6_s8.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return 'Yes';\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return 'No';\n    }\
    \ elseif ($str1_open != $str1_close && $str2_open == $str2_close) {\n        return\
    \ 'No';\n    } elseif ($str1_open != $str1_close && $str2_open != $str2_close)\
    \ {\n        if ($str1_open > $str1_close) {\n            $str1_open = $str1_open\
    \ - $str1_close;\n            $str2_close = $str2_close - $str2_open;\n      \
    \      if ($str1_open == $str2_close) {\n                return 'Yes';\n     \
    \       } else {\n                return 'No';\n            }\n        } elseif\
    \ ($str1_open < $str1_close) {\n            $str1_close = $str1_close - $str1_open;\n\
    \            $str2_open = $str2_open - $str2_close;\n            if ($str1_close\
    \ == $str2_open) {\n                return 'Yes';\n            } else {\n    \
    \            return 'No';\n            }\n        }\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6vxh85b2.php:60\n\
    Stack trace:\n#0 /tmp/tmp6vxh85b2.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp6vxh85b2.php\
    \ on line 60\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $str = '';\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < count($lst[0]);\
    \ $i++) {\n        if ($lst[0][$i] == '(') {\n            $open++;\n        }\
    \ else {\n            $close++;\n        }\n    }\n    for ($i = 0; $i < count($lst[1]);\
    \ $i++) {\n        if ($lst[1][$i] == '(') {\n            $open++;\n        }\
    \ else {\n            $close++;\n        }\n    }\n    if ($open == $close) {\n\
    \        return 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2t2h8rtb.php:53\n\
    Stack trace:\n#0 /tmp/tmp2t2h8rtb.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp2t2h8rtb.php\
    \ on line 53\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $lst[0] = array_reverse($lst[0]);\n    $lst[1] = array_reverse($lst[1]);\n\
    \    $str = '';\n    $open = 0;\n    $close = 0;\n    while (count($lst[0]) >\
    \ 0 || count($lst[1]) > 0) {\n        if (count($lst[0]) > 0) {\n            $str\
    \ .= array_pop($lst[0]);\n        }\n        if (count($lst[1]) > 0) {\n     \
    \       $str .= array_pop($lst[1]);\n        }\n    }\n    for ($i = 0; $i < strlen($str);\
    \ $i++) {\n        if ($str[$i] == '(') {\n            $open++;\n        } else\
    \ {\n            $close++;\n        }\n        if ($close > $open) {\n       \
    \     return 'No';\n        }\n    }\n    if ($open == $close) {\n        return\
    \ 'Yes';\n    }\n    return 'No';\n}\n\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpi2wgivx_.php:50\n\
    Stack trace:\n#0 /tmp/tmpi2wgivx_.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpi2wgivx_.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return 'Yes';\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return 'No';\n    }\
    \ elseif ($str1_open != $str1_close && $str2_open == $str2_close) {\n        return\
    \ 'No';\n    } elseif ($str1_open != $str1_close && $str2_open != $str2_close)\
    \ {\n        if ($str1_open > $str1_close) {\n            $str1_open = $str1_open\
    \ - $str1_close;\n            $str2_close = $str2_close - $str2_open;\n      \
    \      if ($str1_open == $str2_close) {\n                return 'Yes';\n     \
    \       } else {\n                return 'No';\n            }\n        } elseif\
    \ ($str1_open < $str1_close) {\n            $str1_close = $str1_close - $str1_open;\n\
    \            $str2_open = $str2_open - $str2_close;\n            if ($str1_close\
    \ == $str2_open) {\n                return 'Yes';\n            } else {\n    \
    \            return 'No';\n            }\n        }\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpebe8g0rt.php:61\n\
    Stack trace:\n#0 /tmp/tmpebe8g0rt.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpebe8g0rt.php\
    \ on line 61\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_count++;\n        } else {\n            $str1_count--;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count == 0 && $str2_count > 0) {\n        return\
    \ 'No';\n    } else if ($str1_count < 0 && $str2_count == 0) {\n        return\
    \ 'No';\n    } else if ($str1_count < 0 && $str2_count > 0) {\n        if ($str1_count\
    \ + $str2_count == 0) {\n            return 'Yes';\n        } else {\n       \
    \     return 'No';\n        }\n    } else if ($str1_count > 0 && $str2_count ==\
    \ 0) {\n        return 'No';\n    } else if ($str1_count > 0 && $str2_count <\
    \ 0) {\n        if ($str1_count + $str2_count == 0) {\n            return 'Yes';\n\
    \        } else {\n            return 'No';\n        }\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphx3ul_ym.php:62\n\
    Stack trace:\n#0 /tmp/tmphx3ul_ym.php(75): test()\n#1 {main}\n  thrown in /tmp/tmphx3ul_ym.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $l = str_split($lst[0]);\n    $r = str_split($lst[1]);\n    $l_count\
    \ = 0;\n    $r_count = 0;\n    foreach ($l as $char) {\n        if ($char == '(')\
    \ {\n            $l_count++;\n        } else {\n            $l_count--;\n    \
    \    }\n    }\n    foreach ($r as $char) {\n        if ($char == '(') {\n    \
    \        $r_count++;\n        } else {\n            $r_count--;\n        }\n \
    \   }\n    if ($l_count == 0 && $r_count == 0) {\n        return 'Yes';\n    }\
    \ elseif ($l_count == 0 && $r_count < 0) {\n        return 'Yes';\n    } elseif\
    \ ($l_count > 0 && $r_count == 0) {\n        return 'Yes';\n    } elseif ($l_count\
    \ > 0 && $r_count < 0) {\n        return 'Yes';\n    } else {\n        return\
    \ 'No';\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppjqzvj4w.php:51\n\
    Stack trace:\n#0 /tmp/tmppjqzvj4w.php(63): test()\n#1 {main}\n  thrown in /tmp/tmppjqzvj4w.php\
    \ on line 51\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lst = array_map(function($str) {\n        $str = str_split($str);\n\
    \        $str = array_filter($str, function($char) {\n            return $char\
    \ === '(' || $char === ')';\n        });\n        return $str;\n    }, $lst);\n\
    \    $lst = array_map(function($str) {\n        $str = array_reduce($str, function($acc,\
    \ $char) {\n            if ($char === '(') {\n                $acc++;\n      \
    \      } else {\n                $acc--;\n            }\n            return $acc;\n\
    \        }, 0);\n        return $str;\n    }, $lst);\n    $lst = array_reduce($lst,\
    \ function($acc, $num) {\n        return $acc + $num;\n    }, 0);\n    return\
    \ $lst === 0 ? 'Yes' : 'No';\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpozhtl8wq.php:51\n\
    Stack trace:\n#0 /tmp/tmpozhtl8wq.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpozhtl8wq.php\
    \ on line 51\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1_count = 0;\n    $s2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($s1); $i++) {\n        if ($s1[$i] == '(')\
    \ {\n            $s1_count++;\n        } else {\n            $s1_count--;\n  \
    \      }\n    }\n    for ($i = 0; $i < strlen($s2); $i++) {\n        if ($s2[$i]\
    \ == '(') {\n            $s2_count++;\n        } else {\n            $s2_count--;\n\
    \        }\n    }\n    if ($s1_count == 0 && $s2_count == 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn0atlf2e.php:44\n\
    Stack trace:\n#0 /tmp/tmpn0atlf2e.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpn0atlf2e.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkjk1_vd2.php:44\n\
    Stack trace:\n#0 /tmp/tmpkjk1_vd2.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpkjk1_vd2.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count == 0 && $str2_count < 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count > 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count > 0 && $str2_count < 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmps8e60mi2.php:51\n\
    Stack trace:\n#0 /tmp/tmps8e60mi2.php(63): test()\n#1 {main}\n  thrown in /tmp/tmps8e60mi2.php\
    \ on line 51\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($lst[0]); $i++)\
    \ {\n        if ($lst[0][$i] == '(') {\n            $open++;\n        } else {\n\
    \            $close++;\n        }\n    }\n    for ($i = 0; $i < strlen($lst[1]);\
    \ $i++) {\n        if ($lst[1][$i] == '(') {\n            $open++;\n        }\
    \ else {\n            $close++;\n        }\n    }\n    if ($open == $close) {\n\
    \        return 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjf1t_hky.php:50\n\
    Stack trace:\n#0 /tmp/tmpjf1t_hky.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpjf1t_hky.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str1_close = 0;\n \
    \   $str2_open = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return 'Yes';\n    }\
    \ else {\n        return 'No';\n    }\n}\necho match_parens(['()(', ')']) . PHP_EOL;\n\
    echo match_parens([')', ')']) . PHP_EOL;\nfunction candidate(...$args) {\n   \
    \ return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "No\nNo\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp75n9cjbi.php:49\n\
    Stack trace:\n#0 /tmp/tmp75n9cjbi.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp75n9cjbi.php\
    \ on line 49\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s3 = $s1 . $s2;\n    $s4 = $s2\
    \ . $s1;\n    return is_good($s3) || is_good($s4) ? 'Yes' : 'No';\n}\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_good()\
    \ in /tmp/tmp7at50a2g.php:18\nStack trace:\n#0 /tmp/tmp7at50a2g.php(21): match_parens()\n\
    #1 /tmp/tmp7at50a2g.php(25): candidate()\n#2 /tmp/tmp7at50a2g.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmp7at50a2g.php on line 18\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6n0pomqj.php:43\n\
    Stack trace:\n#0 /tmp/tmp6n0pomqj.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp6n0pomqj.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $str1_open = substr_count($str1,\
    \ '(');\n  $str1_close = substr_count($str1, ')');\n  $str2_open = substr_count($str2,\
    \ '(');\n  $str2_close = substr_count($str2, ')');\n  $str1_diff = $str1_open\
    \ - $str1_close;\n  $str2_diff = $str2_open - $str2_close;\n  if ($str1_diff ==\
    \ 0 && $str2_diff == 0) {\n    return 'Yes';\n  } elseif ($str1_diff == $str2_diff)\
    \ {\n    return 'Yes';\n  } elseif ($str1_diff == -$str2_diff) {\n    return 'Yes';\n\
    \  } else {\n    return 'No';\n  }\n}\n\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpf1ow24nr.php:39\n\
    Stack trace:\n#0 /tmp/tmpf1ow24nr.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpf1ow24nr.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str1_close = 0;\n \
    \   $str2_open = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return 'Yes';\n    }\
    \ else {\n        return 'No';\n    }\n}\nfunction candidate(...$args) {\n   \
    \ return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpe19_6ho3.php:47\n\
    Stack trace:\n#0 /tmp/tmpe19_6ho3.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpe19_6ho3.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count > 0 && $str2_count < 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count < 0 && $str2_count > 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdfvcwngb.php:49\n\
    Stack trace:\n#0 /tmp/tmpdfvcwngb.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpdfvcwngb.php\
    \ on line 49\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $lst[0] = array_reverse($lst[0]);\n    $lst[1] = array_reverse($lst[1]);\n\
    \    $lst[0] = implode('', $lst[0]);\n    $lst[1] = implode('', $lst[1]);\n  \
    \  $str = $lst[0] . $lst[1];\n    $str = str_split($str);\n    $stack = [];\n\
    \    foreach ($str as $char) {\n        if ($char == '(') {\n            array_push($stack,\
    \ $char);\n        } else {\n            if (count($stack) == 0) {\n         \
    \       return 'No';\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    if (count($stack) == 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyk46solh.php:49\n\
    Stack trace:\n#0 /tmp/tmpyk46solh.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpyk46solh.php\
    \ on line 49\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $lst[0] = array_filter($lst[0], function($x) { return $x == '('; });\n    $lst[1]\
    \ = array_filter($lst[1], function($x) { return $x == ')'; });\n    $lst[0] =\
    \ count($lst[0]);\n    $lst[1] = count($lst[1]);\n    return $lst[0] == $lst[1]\
    \ ? 'Yes' : 'No';\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6y78q0uf.php:28\n\
    Stack trace:\n#0 /tmp/tmp6y78q0uf.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp6y78q0uf.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return 'Yes';\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return 'No';\n    }\
    \ elseif ($str1_open != $str1_close && $str2_open == $str2_close) {\n        return\
    \ 'No';\n    } elseif ($str1_open != $str1_close && $str2_open != $str2_close)\
    \ {\n        if ($str1_open > $str1_close) {\n            $str1_open = $str1_open\
    \ - $str1_close;\n            $str2_close = $str2_close - $str2_open;\n      \
    \      if ($str1_open == $str2_close) {\n                return 'Yes';\n     \
    \       } else {\n                return 'No';\n            }\n        } elseif\
    \ ($str1_open < $str1_close) {\n            $str1_close = $str1_close - $str1_open;\n\
    \            $str2_open = $str2_open - $str2_close;\n            if ($str1_close\
    \ == $str2_open) {\n                return 'Yes';\n            } else {\n    \
    \            return 'No';\n            }\n        }\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpi13ndn4r.php:61\n\
    Stack trace:\n#0 /tmp/tmpi13ndn4r.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpi13ndn4r.php\
    \ on line 61\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqzxbqv5a.php:43\n\
    Stack trace:\n#0 /tmp/tmpqzxbqv5a.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpqzxbqv5a.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lst = array_map('str_split', $lst);\n    $lst = array_reduce($lst, 'array_merge',\
    \ []);\n    $lst = array_reduce($lst, function($acc, $x) {\n        if ($x ==\
    \ '(') {\n            $acc++;\n        } else {\n            $acc--;\n       \
    \ }\n        return $acc;\n    }, 0);\n    return $lst == 0 ? 'Yes' : 'No';\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpt3l9zcfl.php:41\n\
    Stack trace:\n#0 /tmp/tmpt3l9zcfl.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpt3l9zcfl.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count > 0 && $str2_count < 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count < 0 && $str2_count > 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7geo684b.php:49\n\
    Stack trace:\n#0 /tmp/tmp7geo684b.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp7geo684b.php\
    \ on line 49\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count == 0 && $str2_count > 0) {\n        if ($str2_count\
    \ % 2 == 0) {\n            return 'Yes';\n        } else {\n            return\
    \ 'No';\n        }\n    } else if ($str1_count < 0 && $str2_count == 0) {\n  \
    \      if ($str1_count % 2 == 0) {\n            return 'Yes';\n        } else\
    \ {\n            return 'No';\n        }\n    } else if ($str1_count < 0 && $str2_count\
    \ > 0) {\n        if ($str1_count % 2 == 0 && $str2_count % 2 == 0) {\n      \
    \      return 'Yes';\n        } else {\n            return 'No';\n        }\n\
    \    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxjaty4wa.php:61\n\
    Stack trace:\n#0 /tmp/tmpxjaty4wa.php(75): test()\n#1 {main}\n  thrown in /tmp/tmpxjaty4wa.php\
    \ on line 61\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return 'Yes';\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return 'No';\n    }\
    \ elseif ($str1_open != $str1_close && $str2_open == $str2_close) {\n        return\
    \ 'No';\n    } elseif ($str1_open != $str1_close && $str2_open != $str2_close)\
    \ {\n        if ($str1_open > $str1_close) {\n            if ($str2_open > $str2_close)\
    \ {\n                return 'No';\n            } else {\n                return\
    \ 'Yes';\n            }\n        } else {\n            if ($str2_open > $str2_close)\
    \ {\n                return 'Yes';\n            } else {\n                return\
    \ 'No';\n            }\n        }\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcuc63ypp.php:50\n\
    Stack trace:\n#0 /tmp/tmpcuc63ypp.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpcuc63ypp.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count == 0 && $str2_count < 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count > 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count > 0 && $str2_count < 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpy0nvrzkn.php:51\n\
    Stack trace:\n#0 /tmp/tmpy0nvrzkn.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpy0nvrzkn.php\
    \ on line 51\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $lst[0] = array_reverse($lst[0]);\n    $lst[1] = array_reverse($lst[1]);\n\
    \    $lst[0] = implode($lst[0]);\n    $lst[1] = implode($lst[1]);\n    $str =\
    \ $lst[0] . $lst[1];\n    $str = str_split($str);\n    $str = array_reverse($str);\n\
    \    $str = implode($str);\n    $str = str_split($str);\n    $count = 0;\n   \
    \ foreach ($str as $char) {\n        if ($char == '(') {\n            $count++;\n\
    \        } else {\n            $count--;\n        }\n        if ($count < 0) {\n\
    \            return 'No';\n        }\n    }\n    if ($count == 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpw7d1ippf.php:47\n\
    Stack trace:\n#0 /tmp/tmpw7d1ippf.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpw7d1ippf.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str1_close = 0;\n \
    \   $str2_open = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return 'Yes';\n    }\
    \ else {\n        return 'No';\n    }\n}\necho match_parens(['()(', ')']) . PHP_EOL;\n\
    echo match_parens([')', ')']) . PHP_EOL;\nfunction candidate(...$args) {\n   \
    \ return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "No\nNo\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpy24fs9mv.php:49\n\
    Stack trace:\n#0 /tmp/tmpy24fs9mv.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpy24fs9mv.php\
    \ on line 49\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str1_close = 0;\n \
    \   $str2_open = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return 'Yes';\n    }\
    \ else {\n        return 'No';\n    }\n}\nfunction candidate(...$args) {\n   \
    \ return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpf2fi7e7h.php:47\n\
    Stack trace:\n#0 /tmp/tmpf2fi7e7h.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpf2fi7e7h.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $str1_len = strlen($str1);\n  $str2_len\
    \ = strlen($str2);\n  $str1_open = 0;\n  $str1_close = 0;\n  $str2_open = 0;\n\
    \  $str2_close = 0;\n  for ($i = 0; $i < $str1_len; $i++) {\n    if ($str1[$i]\
    \ == '(') {\n      $str1_open++;\n    } else {\n      $str1_close++;\n    }\n\
    \  }\n  for ($i = 0; $i < $str2_len; $i++) {\n    if ($str2[$i] == '(') {\n  \
    \    $str2_open++;\n    } else {\n      $str2_close++;\n    }\n  }\n  if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n    return 'Yes';\n  } else\
    \ {\n    return 'No';\n  }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpq7sasbiw.php:48\n\
    Stack trace:\n#0 /tmp/tmpq7sasbiw.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpq7sasbiw.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == '(') {\n\
    \            $open++;\n        } else {\n            $close++;\n        }\n  \
    \  }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $open++;\n        } else {\n            $close++;\n        }\n\
    \    }\n    if ($open == $close) {\n        return 'Yes';\n    } else {\n    \
    \    return 'No';\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpl8_4bq11.php:52\n\
    Stack trace:\n#0 /tmp/tmpl8_4bq11.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpl8_4bq11.php\
    \ on line 52\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $lst[0] = array_reverse($lst[0]);\n    $lst[1] = array_reverse($lst[1]);\n\
    \    $str = '';\n    $i = 0;\n    $j = 0;\n    while ($i < count($lst[0]) && $j\
    \ < count($lst[1])) {\n        if ($lst[0][$i] == '(') {\n            $str .=\
    \ $lst[0][$i];\n            $i++;\n        } elseif ($lst[1][$j] == '(') {\n \
    \           $str .= $lst[1][$j];\n            $j++;\n        } else {\n      \
    \      $str .= $lst[0][$i];\n            $i++;\n            $str .= $lst[1][$j];\n\
    \            $j++;\n        }\n    }\n    while ($i < count($lst[0])) {\n    \
    \    $str .= $lst[0][$i];\n        $i++;\n    }\n    while ($j < count($lst[1]))\
    \ {\n        $str .= $lst[1][$j];\n        $j++;\n    }\n    $str = str_split($str);\n\
    \    $str = array_reverse($str);\n    $str = implode('', $str);\n    $str = str_split($str);\n\
    \    $count = 0;\n    foreach ($str as $char) {\n        if ($char == '(') {\n\
    \            $count++;\n        } else {\n            $count--;\n        }\n \
    \       if ($count < 0) {\n            return 'No';\n        }\n    }\n    if\
    \ ($count == 0) {\n        return 'Yes';\n    } else {\n        return 'No';\n\
    \    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpawdya4yb.php:69\n\
    Stack trace:\n#0 /tmp/tmpawdya4yb.php(83): test()\n#1 {main}\n  thrown in /tmp/tmpawdya4yb.php\
    \ on line 69\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str1_close = 0;\n \
    \   $str2_open = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return 'Yes';\n    }\
    \ else {\n        return 'No';\n    }\n}\n\nfunction candidate(...$args) {\n \
    \   return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprjwgat5h.php:48\n\
    Stack trace:\n#0 /tmp/tmprjwgat5h.php(62): test()\n#1 {main}\n  thrown in /tmp/tmprjwgat5h.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $str) {\n        for\
    \ ($i = 0; $i < strlen($str); $i++) {\n            if ($str[$i] == '(') {\n  \
    \              $open++;\n            } else {\n                $close++;\n   \
    \         }\n        }\n    }\n    if ($open == $close) {\n        return 'Yes';\n\
    \    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2z5k0l9n.php:45\n\
    Stack trace:\n#0 /tmp/tmp2z5k0l9n.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp2z5k0l9n.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    $str1_open_close = $str1_open\
    \ - $str1_close;\n    $str2_open_close = $str2_open - $str2_close;\n    if ($str1_open_close\
    \ == 0 && $str2_open_close == 0) {\n        return 'Yes';\n    } elseif ($str1_open_close\
    \ == 0 && $str2_open_close != 0) {\n        return 'No';\n    } elseif ($str1_open_close\
    \ != 0 && $str2_open_close == 0) {\n        return 'No';\n    } elseif ($str1_open_close\
    \ > 0 && $str2_open_close < 0) {\n        return 'Yes';\n    } elseif ($str1_open_close\
    \ < 0 && $str2_open_close > 0) {\n        return 'Yes';\n    } else {\n      \
    \  return 'No';\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp00egffpm.php:43\n\
    Stack trace:\n#0 /tmp/tmp00egffpm.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp00egffpm.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open === $str1_close\
    \ && $str2_open === $str2_close) {\n        return 'Yes';\n    }\n    if ($str1_open\
    \ === $str1_close && $str2_open > $str2_close) {\n        return 'Yes';\n    }\n\
    \    if ($str1_open > $str1_close && $str2_open === $str2_close) {\n        return\
    \ 'Yes';\n    }\n    return 'No';\n}\n\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsbul046i.php:37\n\
    Stack trace:\n#0 /tmp/tmpsbul046i.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpsbul046i.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $str1_len = strlen($str1);\n  $str2_len\
    \ = strlen($str2);\n  $str1_open = 0;\n  $str1_close = 0;\n  $str2_open = 0;\n\
    \  $str2_close = 0;\n  for ($i = 0; $i < $str1_len; $i++) {\n    if ($str1[$i]\
    \ == '(') {\n      $str1_open++;\n    } else {\n      $str1_close++;\n    }\n\
    \  }\n  for ($i = 0; $i < $str2_len; $i++) {\n    if ($str2[$i] == '(') {\n  \
    \    $str2_open++;\n    } else {\n      $str2_close++;\n    }\n  }\n  if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n    return 'Yes';\n  } else\
    \ {\n    return 'No';\n  }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2qkwippx.php:48\n\
    Stack trace:\n#0 /tmp/tmp2qkwippx.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp2qkwippx.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $l = $lst[0];\n    $r = $lst[1];\n    $l_count = substr_count($l, '(');\n\
    \    $r_count = substr_count($r, ')');\n    if ($l_count == $r_count) {\n    \
    \    return 'Yes';\n    }\n    return 'No';\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpa4l4wlb9.php:29\n\
    Stack trace:\n#0 /tmp/tmpa4l4wlb9.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpa4l4wlb9.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $left = 0;\n    $right = 0;\n    foreach ($lst as $str) {\n        for\
    \ ($i = 0; $i < strlen($str); $i++) {\n            if ($str[$i] == '(') {\n  \
    \              $left++;\n            } else {\n                $right++;\n   \
    \         }\n        }\n    }\n    if ($left == $right) {\n        return 'Yes';\n\
    \    } else {\n        return 'No';\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4wm_mj98.php:46\n\
    Stack trace:\n#0 /tmp/tmp4wm_mj98.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp4wm_mj98.php\
    \ on line 46\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return 'Yes';\n    } elseif ($str1_open\
    \ == $str1_close) {\n        if ($str2_open > $str2_close) {\n            if ($str2_open\
    \ - $str2_close == $str1_open) {\n                return 'Yes';\n            }\n\
    \        } elseif ($str2_open < $str2_close) {\n            if ($str2_close -\
    \ $str2_open == $str1_close) {\n                return 'Yes';\n            }\n\
    \        }\n    } elseif ($str2_open == $str2_close) {\n        if ($str1_open\
    \ > $str1_close) {\n            if ($str1_open - $str1_close == $str2_open) {\n\
    \                return 'Yes';\n            }\n        } elseif ($str1_open <\
    \ $str1_close) {\n            if ($str1_close - $str1_open == $str2_close) {\n\
    \                return 'Yes';\n            }\n        }\n    }\n    return 'No';\n\
    }\necho match_parens(['()(', ')']) . PHP_EOL;\necho match_parens([')', ')']) .\
    \ PHP_EOL;\necho match_parens(['(()', ')']) . PHP_EOL;\necho match_parens(['(()',\
    \ '()(']) . PHP_EOL;\necho match_parens(['(()', '()))']) . PHP_EOL;\necho match_parens(['\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected string content \"\", expecting\
    \ \"]\" in /tmp/tmph0fm6kfb.php on line 52\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lst = array_map(function($str) {\n        return str_split($str);\n\
    \    }, $lst);\n    $lst = array_reduce($lst, function($acc, $str) {\n       \
    \ return array_merge($acc, $str);\n    }, []);\n    $lst = array_reduce($lst,\
    \ function($acc, $char) {\n        if ($char == '(') {\n            $acc++;\n\
    \        } else {\n            $acc--;\n        }\n        return $acc;\n    },\
    \ 0);\n    return $lst == 0 ? 'Yes' : 'No';\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyevkjl7y.php:45\n\
    Stack trace:\n#0 /tmp/tmpyevkjl7y.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpyevkjl7y.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str1_close = 0;\n \
    \   $str2_open = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return 'Yes';\n    }\
    \ else {\n        return 'No';\n    }\n}\nfunction candidate(...$args) {\n   \
    \ return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvvjercv9.php:47\n\
    Stack trace:\n#0 /tmp/tmpvvjercv9.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpvvjercv9.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $left = 0;\n  $right = 0;\n  foreach ($lst as $str) {\n    for ($i = 0;\
    \ $i < strlen($str); $i++) {\n      if ($str[$i] == '(') {\n        $left++;\n\
    \      } else {\n        $right++;\n      }\n    }\n  }\n  if ($left == $right)\
    \ {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_dmj8ifp.php:46\n\
    Stack trace:\n#0 /tmp/tmp_dmj8ifp.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp_dmj8ifp.php\
    \ on line 46\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count == 0 && $str2_count < 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count > 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count > 0 && $str2_count < 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxco_ghp9.php:51\n\
    Stack trace:\n#0 /tmp/tmpxco_ghp9.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpxco_ghp9.php\
    \ on line 51\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str1_close = 0;\n \
    \   $str2_open = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return 'Yes';\n    }\
    \ else {\n        return 'No';\n    }\n}\necho match_parens(['()(', ')']) . \"\
    \\n\";\necho match_parens([')', ')']) . \"\\n\";\necho match_parens(['(()', ')'])\
    \ . \"\\n\";\necho match_parens(['(()', '()']) . \"\\n\";\necho match_parens(['(()',\
    \ '()(']) . \"\\n\";\necho match_parens(['(()', '()()']) . \"\\n\";\necho match_parens(['(()',\
    \ '())(']) . \"\\n\";\necho match_parens(['(()', '()))']) . \"\\n\";\necho match_parens(['(()',\
    \ '())))']) . \"\\n\";\necho match_parens(['(()', '()))))']) . \"\\n\";\necho\
    \ match_parens(['(()', '()))))(']) . \"\\n\";\necho match_parens(['(()', '())))))('])\
    \ . \"\\n\";\necho match_parens(['(()', '()\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected string content \"()\", expecting\
    \ \"]\" in /tmp/tmpyowgfvvi.php on line 54\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $lst = array_map(function($str) {\n    return str_split($str);\n  }, $lst);\n\
    \  $lst = array_reduce($lst, function($acc, $str) {\n    return array_merge($acc,\
    \ $str);\n  }, []);\n  $lst = array_reduce($lst, function($acc, $char) {\n   \
    \ if ($char === '(') {\n      $acc++;\n    } else {\n      $acc--;\n    }\n  \
    \  return $acc;\n  }, 0);\n  return $lst === 0 ? 'Yes' : 'No';\n}\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsya320kh.php:45\n\
    Stack trace:\n#0 /tmp/tmpsya320kh.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpsya320kh.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return 'Yes';\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return 'No';\n    }\
    \ elseif ($str1_open != $str1_close && $str2_open == $str2_close) {\n        return\
    \ 'No';\n    } elseif ($str1_open != $str1_close && $str2_open != $str2_close)\
    \ {\n        if ($str1_open > $str1_close) {\n            $str1_open = $str1_open\
    \ - $str1_close;\n            $str2_close = $str2_close - $str2_open;\n      \
    \      if ($str1_open == $str2_close) {\n                return 'Yes';\n     \
    \       } else {\n                return 'No';\n            }\n        } elseif\
    \ ($str1_open < $str1_close) {\n            $str1_close = $str1_close - $str1_open;\n\
    \            $str2_open = $str2_open - $str2_close;\n            if ($str1_close\
    \ == $str2_open) {\n                return 'Yes';\n            } else {\n    \
    \            return 'No';\n            }\n        }\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpl4pibags.php:61\n\
    Stack trace:\n#0 /tmp/tmpl4pibags.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpl4pibags.php\
    \ on line 61\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($lst[0]); $i++)\
    \ {\n        if ($lst[0][$i] == '(') {\n            $open++;\n        } else {\n\
    \            $close++;\n        }\n    }\n    for ($i = 0; $i < strlen($lst[1]);\
    \ $i++) {\n        if ($lst[1][$i] == '(') {\n            $open++;\n        }\
    \ else {\n            $close++;\n        }\n    }\n    if ($open == $close) {\n\
    \        return 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpo3k5rvu7.php:50\n\
    Stack trace:\n#0 /tmp/tmpo3k5rvu7.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpo3k5rvu7.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_good = is_good($str1);\n\
    \    $str2_good = is_good($str2);\n    if ($str1_good && $str2_good) {\n     \
    \   return 'Yes';\n    }\n    if ($str1_good) {\n        return 'Yes';\n    }\n\
    \    if ($str2_good) {\n        return 'Yes';\n    }\n    return 'No';\n}\n\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_good()\
    \ in /tmp/tmpi2wzr3_e.php:16\nStack trace:\n#0 /tmp/tmpi2wzr3_e.php(31): match_parens()\n\
    #1 /tmp/tmpi2wzr3_e.php(35): candidate()\n#2 /tmp/tmpi2wzr3_e.php(49): test()\n\
    #3 {main}\n  thrown in /tmp/tmpi2wzr3_e.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    $str1_balance = $str1_open\
    \ - $str1_close;\n    $str2_balance = $str2_open - $str2_close;\n    if ($str1_balance\
    \ == 0 && $str2_balance == 0) {\n        return 'Yes';\n    } elseif ($str1_balance\
    \ == 0 && $str2_balance != 0) {\n        if ($str2_balance > 0) {\n          \
    \  $str2_open = $str2_open - $str2_balance;\n            $str2_close = $str2_close\
    \ + $str2_balance;\n        } else {\n            $str2_open = $str2_open + $str2_balance;\n\
    \            $str2_close = $str2_close - $str2_balance;\n        }\n        if\
    \ ($str2_open == $str2_close) {\n            return 'Yes';\n        } else {\n\
    \            return 'No';\n        }\n    } elseif ($str1_balance != 0 && $str2_balance\
    \ == 0) {\n        if ($str1_balance > 0) {\n            $str1_open = $str1_open\
    \ - $str1_balance;\n            $str1_close = $str1_close + $str1_balance;\n \
    \       } else {\n            $str1_open = $str1_open + $str1_balance;\n     \
    \       $str1_close = $str1_close - $str1_balance;\n        }\n        if ($str1_open\
    \ == $str1_close) {\n            return 'Yes';\n        } else {\n           \
    \ return 'No';\n        }\n    } else {\n        if ($str1_balance > 0) {\n  \
    \          $str1_open = $str1_open - $str1\nfunction candidate(...$args) {\n \
    \   return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\" in /tmp/tmp0myakihl.php\
    \ on line 53\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lst = array_map(function($str) {\n        return str_split($str);\n\
    \    }, $lst);\n    $lst = array_reduce($lst, function($acc, $str) {\n       \
    \ return array_merge($acc, $str);\n    }, []);\n    $lst = array_reverse($lst);\n\
    \    $count = 0;\n    foreach ($lst as $char) {\n        if ($char == '(') {\n\
    \            $count++;\n        } else {\n            $count--;\n        }\n \
    \       if ($count < 0) {\n            return 'No';\n        }\n    }\n    return\
    \ $count == 0 ? 'Yes' : 'No';\n}\n\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpx0mzgz7g.php:40\n\
    Stack trace:\n#0 /tmp/tmpx0mzgz7g.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpx0mzgz7g.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str1_close = 0;\n \
    \   $str2_open = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return 'Yes';\n    }\
    \ else {\n        return 'No';\n    }\n}\nfunction candidate(...$args) {\n   \
    \ return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9ulat8yf.php:47\n\
    Stack trace:\n#0 /tmp/tmp9ulat8yf.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp9ulat8yf.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return 'Yes';\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return 'No';\n    }\
    \ elseif ($str1_open != $str1_close && $str2_open == $str2_close) {\n        return\
    \ 'No';\n    } elseif ($str1_open != $str1_close && $str2_open != $str2_close)\
    \ {\n        if ($str1_open > $str1_close) {\n            $str1_open = $str1_open\
    \ - $str1_close;\n            $str2_open = $str2_open - $str2_close;\n       \
    \     if ($str1_open == $str2_open) {\n                return 'Yes';\n       \
    \     } else {\n                return 'No';\n            }\n        } elseif\
    \ ($str1_open < $str1_close) {\n            $str1_close = $str1_close - $str1_open;\n\
    \            $str2_close = $str2_close - $str2_open;\n            if ($str1_close\
    \ == $str2_close) {\n                return 'Yes';\n            } else {\n   \
    \             return 'No';\n            }\n        }\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0elkzird.php:54\n\
    Stack trace:\n#0 /tmp/tmp0elkzird.php(68): test()\n#1 {main}\n  thrown in /tmp/tmp0elkzird.php\
    \ on line 54\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return 'Yes';\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open > $str2_close) {\n        return 'Yes';\n    }\
    \ elseif ($str1_open > $str1_close && $str2_open == $str2_close) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpoj44wgno.php:36\n\
    Stack trace:\n#0 /tmp/tmpoj44wgno.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpoj44wgno.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8xh9dypp.php:43\n\
    Stack trace:\n#0 /tmp/tmp8xh9dypp.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp8xh9dypp.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $str) {\n        for\
    \ ($i = 0; $i < strlen($str); $i++) {\n            if ($str[$i] == '(') {\n  \
    \              $open++;\n            } else {\n                $close++;\n   \
    \         }\n        }\n    }\n    if ($open == $close) {\n        return 'Yes';\n\
    \    } else {\n        return 'No';\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvrwnjyvy.php:46\n\
    Stack trace:\n#0 /tmp/tmpvrwnjyvy.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpvrwnjyvy.php\
    \ on line 46\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $left = 0;\n    $right = 0;\n    foreach ($lst as $str) {\n        for\
    \ ($i = 0; $i < strlen($str); $i++) {\n            if ($str[$i] == '(') {\n  \
    \              $left++;\n            } else {\n                $right++;\n   \
    \         }\n        }\n    }\n    if ($left == $right) {\n        return 'Yes';\n\
    \    } else {\n        return 'No';\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsekz7vxf.php:46\n\
    Stack trace:\n#0 /tmp/tmpsekz7vxf.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpsekz7vxf.php\
    \ on line 46\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_count++;\n        } else {\n            $str1_count--;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\necho match_parens(['()(',\
    \ ')']) . PHP_EOL;\necho match_parens([')', ')']) . PHP_EOL;\necho match_parens(['(()',\
    \ ')']) . PHP_EOL;\necho match_parens(['(()', '))']) . PHP_EOL;\necho match_parens(['(()',\
    \ '()']) . PHP_EOL;\necho match_parens(['()', '()']) . PHP_EOL;\necho match_parens(['()',\
    \ ')(']) . PHP_EOL;\necho match_parens(['()', ')(()']) . PHP_EOL;\necho match_parens(['()',\
    \ ')(())(']) . PHP_EOL;\necho match_parens(['()', ')(())(()']) . PHP_EOL;\necho\
    \ match_parens(['()', ')(())(())(']) . PHP_EOL;\necho match_parens(['()', ')(())(())(()'])\
    \ . PHP_EOL;\necho match_parens(['()', ')(())(()\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected string content \")(())(()\"\
    , expecting \"]\" in /tmp/tmpvboycnvh.php on line 52\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $str = '';\n    $open = 0;\n    $close = 0;\n    $i = 0;\n    $j = 0;\n   \
    \ while ($i < count($lst[0]) || $j < count($lst[1])) {\n        if ($i < count($lst[0]))\
    \ {\n            if ($lst[0][$i] == '(') {\n                $open++;\n       \
    \     } else {\n                $close++;\n            }\n            $str .=\
    \ $lst[0][$i];\n            $i++;\n        }\n        if ($j < count($lst[1]))\
    \ {\n            if ($lst[1][$j] == '(') {\n                $open++;\n       \
    \     } else {\n                $close++;\n            }\n            $str .=\
    \ $lst[1][$j];\n            $j++;\n        }\n    }\n    if ($open == $close)\
    \ {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3bfk706o.php:61\n\
    Stack trace:\n#0 /tmp/tmp3bfk706o.php(66): test()\n#1 {main}\n  thrown in /tmp/tmp3bfk706o.php\
    \ on line 61\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $left = 0;\n    $right = 0;\n    foreach ($lst as $str) {\n        for\
    \ ($i = 0; $i < strlen($str); $i++) {\n            if ($str[$i] == '(') {\n  \
    \              $left++;\n            } else {\n                $right++;\n   \
    \         }\n        }\n    }\n    return $left == $right ? 'Yes' : 'No';\n}\n\
    \nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzix65rhj.php:42\n\
    Stack trace:\n#0 /tmp/tmpzix65rhj.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpzix65rhj.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count == 0 && $str2_count < 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count > 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count > 0 && $str2_count < 0) {\n        if ($str1_count\
    \ == abs($str2_count)) {\n            return 'Yes';\n        } else {\n      \
    \      return 'No';\n        }\n    } else if ($str1_count < 0 && $str2_count\
    \ == 0) {\n        return 'Yes';\n    } else if ($str1_count < 0 && $str2_count\
    \ > 0) {\n        if (abs($str1_count) == $str2_count) {\n            return 'Yes';\n\
    \        } else {\n            return 'No';\n        }\n    } else {\n       \
    \ return 'No';\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwc6r0mbq.php:66\n\
    Stack trace:\n#0 /tmp/tmpwc6r0mbq.php(75): test()\n#1 {main}\n  thrown in /tmp/tmpwc6r0mbq.php\
    \ on line 66\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return 'Yes';\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return 'No';\n    }\
    \ elseif ($str1_open != $str1_close && $str2_open == $str2_close) {\n        return\
    \ 'No';\n    } elseif ($str1_open != $str1_close && $str2_open != $str2_close)\
    \ {\n        if ($str1_open > $str1_close) {\n            $str1_open = $str1_open\
    \ - $str1_close;\n            $str2_close = $str2_close - $str2_open;\n      \
    \      if ($str1_open == $str2_close) {\n                return 'Yes';\n     \
    \       } else {\n                return 'No';\n            }\n        } elseif\
    \ ($str1_open < $str1_close) {\n            $str1_close = $str1_close - $str1_open;\n\
    \            $str2_open = $str2_open - $str2_close;\n            if ($str1_close\
    \ == $str2_open) {\n                return 'Yes';\n            } else {\n    \
    \            return 'No';\n            }\n        }\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpk49p8vx3.php:61\n\
    Stack trace:\n#0 /tmp/tmpk49p8vx3.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpk49p8vx3.php\
    \ on line 61\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str1_close = 0;\n \
    \   $str2_open = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ > $str2_close || $str2_open > $str1_close) {\n        return 'No';\n    }\n\
    \    return 'Yes';\n}\necho match_parens(['()(', ')']) . \"\\n\";\necho match_parens([')',\
    \ ')']) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "No\nYes\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpeowex2k5.php:48\n\
    Stack trace:\n#0 /tmp/tmpeowex2k5.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpeowex2k5.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $lst[0] = array_reverse($lst[0]);\n    $lst[1] = array_reverse($lst[1]);\n\
    \    $open = 0;\n    $close = 0;\n    $open_1 = 0;\n    $close_1 = 0;\n    foreach\
    \ ($lst[0] as $value) {\n        if ($value == '(') {\n            $open++;\n\
    \        } else {\n            $close++;\n        }\n    }\n    foreach ($lst[1]\
    \ as $value) {\n        if ($value == '(') {\n            $open_1++;\n       \
    \ } else {\n            $close_1++;\n        }\n    }\n    if ($open > $close_1)\
    \ {\n        return 'No';\n    } elseif ($open_1 > $close) {\n        return 'No';\n\
    \    } else {\n        return 'Yes';\n    }\n}\necho match_parens(['()(', ')'])\
    \ . PHP_EOL;\necho match_parens([')', ')']) . PHP_EOL;\necho match_parens(['(',\
    \ ')']) . PHP_EOL;\necho match_parens(['(()', ')']) . PHP_EOL;\necho match_parens(['()',\
    \ ')']) . PHP_EOL;\necho match_parens(['()', '()']) . PHP_EOL;\necho match_parens(['()(',\
    \ '()']) . PHP_EOL;\necho match_parens(['()(', '()(']) . PHP_EOL;\necho match_parens(['()(',\
    \ '()()']) . PHP_EOL;\necho match_parens(['()(', '())(']) . PHP_EOL;\necho match_parens(['()(',\
    \ '()))']) . PHP_EOL;\necho match_parens(['()(', '())))']) . PHP_EOL;\necho match_parens(['()(',\
    \ '\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected string content \"\", expecting\
    \ \"]\" in /tmp/tmpyww75xcm.php on line 56\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3jjfeg1i.php:43\n\
    Stack trace:\n#0 /tmp/tmp3jjfeg1i.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp3jjfeg1i.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open > $str1_close)\
    \ {\n        if ($str2_open > $str2_close) {\n            return 'Yes';\n    \
    \    } else {\n            return 'No';\n        }\n    } else {\n        if ($str2_open\
    \ > $str2_close) {\n            return 'No';\n        } else {\n            return\
    \ 'Yes';\n        }\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp60bzw4qi.php:39\n\
    Stack trace:\n#0 /tmp/tmp60bzw4qi.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp60bzw4qi.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1_len = strlen($s1);\n    $s2_len\
    \ = strlen($s2);\n    $s1_open = substr_count($s1, '(');\n    $s1_close = substr_count($s1,\
    \ ')');\n    $s2_open = substr_count($s2, '(');\n    $s2_close = substr_count($s2,\
    \ ')');\n    if ($s1_open == $s1_close && $s2_open == $s2_close) {\n        return\
    \ 'Yes';\n    }\n    if ($s1_open == $s1_close) {\n        if ($s2_open > $s2_close)\
    \ {\n            return 'Yes';\n        }\n    }\n    if ($s2_open == $s2_close)\
    \ {\n        if ($s1_open > $s1_close) {\n            return 'Yes';\n        }\n\
    \    }\n    return 'No';\n}\necho match_parens(['()(', ')']) . \"\\n\";\necho\
    \ match_parens([')', ')']) . \"\\n\";\necho match_parens(['(', ')']) . \"\\n\"\
    ;\necho match_parens(['(()', ')']) . \"\\n\";\necho match_parens(['(', '()'])\
    \ . \"\\n\";\necho match_parens(['(()', '())']) . \"\\n\";\necho match_parens(['(()',\
    \ '()))']) . \"\\n\";\necho match_parens(['(()', '()))']) . \"\\n\";\necho match_parens(['(()',\
    \ '()))']) . \"\\n\";\necho match_parens(['(()', '()))']) . \"\\n\";\necho match_parens(['(()',\
    \ '()))']) . \"\\n\";\necho match_parens(['(()', '()))']) . \"\\n\";\necho match_parens(['(()',\
    \ '()))']) . \"\\n\";\necho match_parens(['(\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected string content \"(\", expecting\
    \ \"]\" in /tmp/tmpuu97zfrh.php on line 50\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count > 0 && $str2_count < 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count < 0 && $str2_count > 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpur03v425.php:49\n\
    Stack trace:\n#0 /tmp/tmpur03v425.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpur03v425.php\
    \ on line 49\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str1_close = 0;\n \
    \   $str2_open = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return 'Yes';\n    }\
    \ else {\n        return 'No';\n    }\n}\necho match_parens(['()(', ')']) . PHP_EOL;\n\
    echo match_parens([')', ')']) . PHP_EOL;\necho match_parens(['(())', ')']) . PHP_EOL;\n\
    echo match_parens(['(()))', ')']) . PHP_EOL;\necho match_parens(['(()))', '((()'])\
    \ . PHP_EOL;\necho match_parens(['(()))', '((()))']) . PHP_EOL;\necho match_parens(['(()))',\
    \ '((()))()']) . PHP_EOL;\necho match_parens(['(()))', '((()))()(']) . PHP_EOL;\n\
    echo match_parens(['(()))', '((()))()((']) . PHP_EOL;\necho match_parens(['(()))',\
    \ '((()))()(((']) . PHP_EOL;\necho match_parens(['(()))', '((()))\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected string content \"((()))\", expecting\
    \ \"]\" in /tmp/tmpysy34zzm.php on line 52\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lst = array_map(function($str) {\n        return str_split($str);\n\
    \    }, $lst);\n    $lst = array_reduce($lst, function($acc, $str) {\n       \
    \ return array_merge($acc, $str);\n    }, []);\n    $lst = array_reduce($lst,\
    \ function($acc, $char) {\n        if ($char == '(') {\n            $acc++;\n\
    \        } else {\n            $acc--;\n        }\n        return $acc;\n    },\
    \ 0);\n    return $lst == 0 ? 'Yes' : 'No';\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwvrfly8m.php:45\n\
    Stack trace:\n#0 /tmp/tmpwvrfly8m.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpwvrfly8m.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str1_close = 0;\n \
    \   $str2_open = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return 'Yes';\n    }\
    \ else {\n        return 'No';\n    }\n}\n\nfunction candidate(...$args) {\n \
    \   return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp70gx2asg.php:48\n\
    Stack trace:\n#0 /tmp/tmp70gx2asg.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp70gx2asg.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return 'Yes';\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return 'No';\n    }\
    \ elseif ($str1_open != $str1_close && $str2_open == $str2_close) {\n        return\
    \ 'No';\n    } elseif ($str1_open != $str1_close && $str2_open != $str2_close)\
    \ {\n        if ($str1_open > $str1_close) {\n            $diff1 = $str1_open\
    \ - $str1_close;\n            if ($str2_close > $str2_open) {\n              \
    \  $diff2 = $str2_close - $str2_open;\n                if ($diff1 == $diff2) {\n\
    \                    return 'Yes';\n                } else {\n               \
    \     return 'No';\n                }\n            } else {\n                return\
    \ 'No';\n            }\n        } elseif ($str1_open < $str1_close) {\n      \
    \      $diff1 = $str1_close - $str1_open;\n            if ($str2_open > $str2_close)\
    \ {\n                $diff2 = $str2_open - $str2_close;\n                if ($diff1\
    \ == $diff2) {\n                    return 'Yes';\n                } else {\n\
    \                    return 'No';\n                }\n            } else {\n \
    \               return 'No';\n            }\n        }\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpf16iqzq6.php:69\n\
    Stack trace:\n#0 /tmp/tmpf16iqzq6.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpf16iqzq6.php\
    \ on line 69\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1_open = substr_count($s1,\
    \ '(');\n    $s1_close = substr_count($s1, ')');\n    $s2_open = substr_count($s2,\
    \ '(');\n    $s2_close = substr_count($s2, ')');\n    if ($s1_open == $s1_close\
    \ && $s2_open == $s2_close) {\n        return 'Yes';\n    }\n    if ($s1_open\
    \ == $s1_close && $s2_open > $s2_close) {\n        $diff = $s2_open - $s2_close;\n\
    \        if ($s1_open >= $diff) {\n            return 'Yes';\n        }\n    }\n\
    \    if ($s1_open > $s1_close && $s2_open == $s2_close) {\n        $diff = $s1_open\
    \ - $s1_close;\n        if ($s2_open >= $diff) {\n            return 'Yes';\n\
    \        }\n    }\n    if ($s1_open > $s1_close && $s2_open > $s2_close) {\n \
    \       $diff1 = $s1_open - $s1_close;\n        $diff2 = $s2_open - $s2_close;\n\
    \        if ($diff1 == $diff2) {\n            return 'Yes';\n        }\n     \
    \   if ($diff1 > $diff2) {\n            if ($s2_open >= $diff1) {\n          \
    \      return 'Yes';\n            }\n        }\n        if ($diff2 > $diff1) {\n\
    \            if ($s1_open >= $diff2) {\n                return 'Yes';\n      \
    \      }\n        }\n    }\n    return 'No';\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8gtqb3mo.php:60\n\
    Stack trace:\n#0 /tmp/tmp8gtqb3mo.php(74): test()\n#1 {main}\n  thrown in /tmp/tmp8gtqb3mo.php\
    \ on line 60\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count > 0 && $str2_count < 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count < 0 && $str2_count > 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpy2_0q2h5.php:49\n\
    Stack trace:\n#0 /tmp/tmpy2_0q2h5.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpy2_0q2h5.php\
    \ on line 49\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return 'Yes';\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open > $str2_close) {\n        return 'Yes';\n    }\
    \ elseif ($str1_open > $str1_close && $str2_open == $str2_close) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxh3lhf7h.php:35\n\
    Stack trace:\n#0 /tmp/tmpxh3lhf7h.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpxh3lhf7h.php\
    \ on line 35\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count == 0 && $str2_count > 0) {\n        $str1_count\
    \ = $str2_count;\n        $str2_count = 0;\n        for ($i = 0; $i < strlen($str1);\
    \ $i++) {\n            if ($str1[$i] == '(') {\n                $str1_count++;\n\
    \            } else {\n                $str1_count--;\n            }\n       \
    \     if ($str1_count < 0) {\n                return 'No';\n            }\n  \
    \      }\n        return 'Yes';\n    } else if ($str1_count < 0 && $str2_count\
    \ == 0) {\n        $str2_count = $str1_count;\n        $str1_count = 0;\n    \
    \    for ($i = 0; $i < strlen($str2); $i++) {\n            if ($str2[$i] == '(')\
    \ {\n                $str2_count++;\n            } else {\n                $str2_count--;\n\
    \            }\n            if ($str2_count < 0) {\n                return 'No';\n\
    \            }\n        }\n        return 'Yes';\n    } else {\n        return\
    \ 'No';\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1afibebq.php:71\n\
    Stack trace:\n#0 /tmp/tmp1afibebq.php(85): test()\n#1 {main}\n  thrown in /tmp/tmp1afibebq.php\
    \ on line 71\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str1_close = 0;\n \
    \   $str2_open = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return 'Yes';\n    }\
    \ else if ($str1_open == $str1_close && $str2_open != $str2_close) {\n       \
    \ return 'No';\n    } else if ($str1_open != $str1_close && $str2_open == $str2_close)\
    \ {\n        return 'No';\n    } else if ($str1_open != $str1_close && $str2_open\
    \ != $str2_close) {\n        if ($str1_open > $str1_close) {\n            $str1_open\
    \ = $str1_open - $str1_close;\n            $str1_close = 0;\n        } else {\n\
    \            $str1_close = $str1_close - $str1_open;\n            $str1_open =\
    \ 0;\n        }\n        if ($str2_open > $str2_close) {\n            $str2_open\
    \ = $str2_open - $str2_close;\n            $str2_close = 0;\n        } else {\n\
    \            $str2_close = $str2_close - $str2_open;\n            $\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ variable or \"{\" or \"$\" in /tmp/tmpok9iv2ps.php on line 56\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpafchpkyc.php:43\n\
    Stack trace:\n#0 /tmp/tmpafchpkyc.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpafchpkyc.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $str1_len = strlen($str1);\n  $str2_len\
    \ = strlen($str2);\n  $str1_open = substr_count($str1, '(');\n  $str1_close =\
    \ substr_count($str1, ')');\n  $str2_open = substr_count($str2, '(');\n  $str2_close\
    \ = substr_count($str2, ')');\n  if ($str1_open == $str1_close && $str2_open ==\
    \ $str2_close) {\n    return 'Yes';\n  } else if ($str1_open == $str1_close &&\
    \ $str2_open != $str2_close) {\n    return 'No';\n  } else if ($str1_open != $str1_close\
    \ && $str2_open == $str2_close) {\n    return 'No';\n  } else if ($str1_open !=\
    \ $str1_close && $str2_open != $str2_close) {\n    if ($str1_open > $str1_close)\
    \ {\n      $str1_open = $str1_open - $str1_close;\n      $str2_open = $str2_open\
    \ - $str2_close;\n      if ($str1_open == $str2_open) {\n        return 'Yes';\n\
    \      } else {\n        return 'No';\n      }\n    } else if ($str1_open < $str1_close)\
    \ {\n      $str1_close = $str1_close - $str1_open;\n      $str2_close = $str2_close\
    \ - $str2_open;\n      if ($str1_close == $str2_close) {\n        return 'Yes';\n\
    \      } else {\n        return 'No';\n      }\n    }\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpe_y77vb8.php:54\n\
    Stack trace:\n#0 /tmp/tmpe_y77vb8.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpe_y77vb8.php\
    \ on line 54\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    $total_open = $str1_open\
    \ + $str2_open;\n    $total_close = $str1_close + $str2_close;\n    if ($total_open\
    \ == $total_close) {\n        return 'Yes';\n    } else {\n        return 'No';\n\
    \    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp174t5f2r.php:42\n\
    Stack trace:\n#0 /tmp/tmp174t5f2r.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp174t5f2r.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    $open_lst = [];\n    $close_lst = [];\n\
    \    foreach ($lst as $str) {\n        $open += substr_count($str, '(');\n   \
    \     $close += substr_count($str, ')');\n        $open_lst[] = substr_count($str,\
    \ '(');\n        $close_lst[] = substr_count($str, ')');\n    }\n    if ($open\
    \ == $close) {\n        return 'Yes';\n    }\n    if ($open > $close) {\n    \
    \    $diff = $open - $close;\n        $open_lst = array_reverse($open_lst);\n\
    \        $close_lst = array_reverse($close_lst);\n        $i = 0;\n        while\
    \ ($diff > 0) {\n            if ($open_lst[$i] > $close_lst[$i]) {\n         \
    \       $diff--;\n            }\n            $i++;\n        }\n        if ($diff\
    \ == 0) {\n            return 'Yes';\n        }\n    }\n    return 'No';\n}\n\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: "b'PHP Warning:  Undefined array key 2 in /tmp/tmpr0_rff3r.php on line 33\\\
    nPHP Warning:  Undefined array key 2 in /tmp/tmpr0_rff3r.php on line 33\\nPHP\
    \ Warning:  Undefined array key 3 in /tmp/tmpr0_rff3r.php on line 33\\nPHP Warning:\
    \  Undefined array key 3 in /tmp/tmpr0_rff3r.php on line 33\\nPHP Warning:  Undefined\
    \ array key 4 in /tmp/tmpr0_rff3r.php on line 33\\nPHP Warning:  Undefined array\
    \ key 4 in /tmp/tmpr0_rff3r.php on line 33\\nPHP Warning:  Undefined array key\
    \ 5 in /tmp/tmpr0_rff3r.php on line 33\\nPHP Warning:  Undefined array key 5 in\
    \ /tmp/tmpr0_rff3r.php on line 33\\nPHP Warning:  Undefined array key 6 in /tmp/tmpr0_rff3r.php\
    \ on line 33\\nPHP Warning:  Undefined array key 6 in /tmp/tmpr0_rff3r.php on\
    \ line 33\\nPHP Warning:  Undefined array key 7 in /tmp/tmpr0_rff3r.php on line\
    \ 33\\nPHP Warning:  Undefined array key 7 in /tmp/tmpr0_rff3r.php on line 33\\\
    nPHP Warning:  Undefined array key 8 in /tmp/tmpr0_rff3r.php on line 33\\nPHP\
    \ Warning:  Undefined array key 8 in /tmp/tmpr0_rff3r.php on line 33\\nPHP Warning:\
    \  Undefined array key 9 in /tmp/tmpr0_rff3r.php on line 33\\nPHP Warning:  Undefined\
    \ array key 9 in /tmp/tmpr0_rff3r.php on line 33\\nPHP Warning:  Undefined array\
    \ key 10 in /tmp/tmpr0_rff3r.php on line 33\\nPHP Warning:  Undefined array key\
    \ 10 in /tmp/tmpr0_rff3r.php on line 33\\nPHP Warning:  Undefined array key 11\
    \ in /tmp/tmpr0_rff3r.php on line 33\\nPHP Warning:  Undefined array key 11 in\
    \ /tmp/tmpr0_rff3r.php on line 33\\nPHP Warning:  Undefined array key 12 in /tmp/tmpr0_rff3r.php\
    \ on line 33\\nPHP Warning:  Undefined array key 12 in /tmp/tmpr0_rff3r.php on\
    \ line 33\\nPHP Warning:  Undefined array key 13 in /tmp/tmpr0_rff3r.php on line\
    \ 33\\nPHP Warning:  Undefined array key 13 in /tmp/tmpr0_rff3r.php on line 33\\\
    nPHP Warning:  Undefined array key 14 in /tmp/tmpr0_rff3r.php on line 33\\nPHP\
    \ Warning:  Undefined array key 14 in /tmp/tmpr0_rff3r.php on line 33\\nPHP Warning:\
    \  Undefined array key 15 in /tmp/tmpr0_rff3r.php on line 33\\nPHP Warning:  Undefined\
    \ array key 15 in /tmp/tmpr0_rff3r.php on line 33\\nPHP Warning:  Unde"
  exit_code: -1
  status: Timeout
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($lst[0]); $i++)\
    \ {\n        if ($lst[0][$i] == '(') {\n            $open++;\n        } else {\n\
    \            $close++;\n        }\n    }\n    for ($i = 0; $i < strlen($lst[1]);\
    \ $i++) {\n        if ($lst[1][$i] == '(') {\n            $open++;\n        }\
    \ else {\n            $close++;\n        }\n    }\n    if ($open == $close) {\n\
    \        return 'Yes';\n    } else {\n        return 'No';\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxcvt_jjz.php:51\n\
    Stack trace:\n#0 /tmp/tmpxcvt_jjz.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpxcvt_jjz.php\
    \ on line 51\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $str1_count = 0;\n  $str2_count\
    \ = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == '(')\
    \ {\n      $str1_count++;\n    } else {\n      $str1_count--;\n    }\n  }\n  for\
    \ ($i = 0; $i < strlen($str2); $i++) {\n    if ($str2[$i] == '(') {\n      $str2_count++;\n\
    \    } else {\n      $str2_count--;\n    }\n  }\n  if ($str1_count == 0 && $str2_count\
    \ == 0) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_lm1ci_8.php:44\n\
    Stack trace:\n#0 /tmp/tmp_lm1ci_8.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp_lm1ci_8.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return 'Yes';\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return 'No';\n    }\
    \ elseif ($str1_open != $str1_close && $str2_open == $str2_close) {\n        return\
    \ 'No';\n    } elseif ($str1_open != $str1_close && $str2_open != $str2_close)\
    \ {\n        if ($str1_open > $str1_close) {\n            $diff = $str1_open -\
    \ $str1_close;\n            if ($str2_open == $diff) {\n                return\
    \ 'Yes';\n            } else {\n                return 'No';\n            }\n\
    \        } elseif ($str1_open < $str1_close) {\n            $diff = $str1_close\
    \ - $str1_open;\n            if ($str2_close == $diff) {\n                return\
    \ 'Yes';\n            } else {\n                return 'No';\n            }\n\
    \        }\n    }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpi7mg2bel.php:50\n\
    Stack trace:\n#0 /tmp/tmpi7mg2bel.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpi7mg2bel.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    for ($i\
    \ = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    array_push($stack, $str1[$i]);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return 'No';\n            } else {\n              \
    \  array_pop($stack);\n            }\n        }\n    }\n    for ($i = 0; $i <\
    \ strlen($str2); $i++) {\n        if ($str2[$i] == '(') {\n            array_push($stack,\
    \ $str2[$i]);\n        } else {\n            if (count($stack) == 0) {\n     \
    \           return 'No';\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    if (count($stack) == 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9thynlia.php:54\n\
    Stack trace:\n#0 /tmp/tmp9thynlia.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp9thynlia.php\
    \ on line 54\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str1_close = 0;\n \
    \   $str2_open = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return 'Yes';\n    }\
    \ else if ($str1_open == $str1_close && $str2_open > $str2_close) {\n        return\
    \ 'Yes';\n    } else if ($str1_open > $str1_close && $str2_open == $str2_close)\
    \ {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1l50f5yl.php:51\n\
    Stack trace:\n#0 /tmp/tmp1l50f5yl.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp1l50f5yl.php\
    \ on line 51\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1_len = strlen($s1);\n    $s2_len\
    \ = strlen($s2);\n    $s1_open = 0;\n    $s2_open = 0;\n    $s1_close = 0;\n \
    \   $s2_close = 0;\n    for ($i = 0; $i < $s1_len; $i++) {\n        if ($s1[$i]\
    \ == '(') {\n            $s1_open++;\n        } else {\n            $s1_close++;\n\
    \        }\n    }\n    for ($i = 0; $i < $s2_len; $i++) {\n        if ($s2[$i]\
    \ == '(') {\n            $s2_open++;\n        } else {\n            $s2_close++;\n\
    \        }\n    }\n    if ($s1_open == $s1_close && $s2_open == $s2_close) {\n\
    \        return 'Yes';\n    } else if ($s1_open == $s1_close && $s2_open != $s2_close)\
    \ {\n        return 'No';\n    } else if ($s1_open != $s1_close && $s2_open ==\
    \ $s2_close) {\n        return 'No';\n    } else if ($s1_open != $s1_close &&\
    \ $s2_open != $s2_close) {\n        if ($s1_open > $s1_close) {\n            $s1_open\
    \ -= $s1_close;\n            $s1_close = 0;\n        } else {\n            $s1_close\
    \ -= $s1_open;\n            $s1_open = 0;\n        }\n        if ($s2_open > $s2_close)\
    \ {\n            $s2_open -= $s2_close;\n            $s2_close = 0;\n        }\
    \ else {\n            $s2_close -= $s2_open;\n            $s2_open = 0;\n    \
    \    }\n        if ($s1_open == $s2_close\nfunction candidate(...$args) {\n  \
    \  return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\" in /tmp/tmpqx288g3m.php\
    \ on line 58\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1_open = substr_count($s1,\
    \ '(');\n    $s1_close = substr_count($s1, ')');\n    $s2_open = substr_count($s2,\
    \ '(');\n    $s2_close = substr_count($s2, ')');\n    if ($s1_open == $s1_close\
    \ && $s2_open == $s2_close) {\n        return 'Yes';\n    }\n    if ($s1_open\
    \ == $s1_close) {\n        return 'Yes';\n    }\n    if ($s2_open == $s2_close)\
    \ {\n        return 'Yes';\n    }\n    return 'No';\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpag50jayk.php:37\n\
    Stack trace:\n#0 /tmp/tmpag50jayk.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpag50jayk.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    $str1_balance = $str1_open\
    \ - $str1_close;\n    $str2_balance = $str2_open - $str2_close;\n    $balance\
    \ = $str1_balance + $str2_balance;\n    if ($balance == 0) {\n        return 'Yes';\n\
    \    } elseif ($balance < 0) {\n        return 'No';\n    } else {\n        if\
    \ ($str1_balance > 0) {\n            $str1_balance = $str1_balance - $str2_balance;\n\
    \            if ($str1_balance < 0) {\n                return 'No';\n        \
    \    } else {\n                $str1_balance = $str1_balance / 2;\n          \
    \      if ($str1_balance > $str1_open) {\n                    return 'No';\n \
    \               } else {\n                    return 'Yes';\n                }\n\
    \            }\n        } else {\n            $str2_balance = $str2_balance -\
    \ $str1_balance;\n            if ($str2_balance < 0) {\n                return\
    \ 'No';\n            } else {\n                $str2_balance = $str2_balance /\
    \ 2;\n                if ($str2_balance > $str2_open) {\n                    return\
    \ 'No';\n                } else {\n                    return 'Yes';\n       \
    \         }\n            }\n        }\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmph0lg97g5.php:70\n\
    Stack trace:\n#0 /tmp/tmph0lg97g5.php(77): test()\n#1 {main}\n  thrown in /tmp/tmph0lg97g5.php\
    \ on line 70\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptztazcxs.php:44\n\
    Stack trace:\n#0 /tmp/tmptztazcxs.php(58): test()\n#1 {main}\n  thrown in /tmp/tmptztazcxs.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1_open = substr_count($s1,\
    \ '(');\n    $s1_close = substr_count($s1, ')');\n    $s2_open = substr_count($s2,\
    \ '(');\n    $s2_close = substr_count($s2, ')');\n    if ($s1_open == $s1_close\
    \ && $s2_open == $s2_close) {\n        return 'Yes';\n    }\n    if ($s1_open\
    \ == $s1_close) {\n        return 'Yes';\n    }\n    if ($s2_open == $s2_close)\
    \ {\n        return 'Yes';\n    }\n    return 'No';\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgmdax7v1.php:37\n\
    Stack trace:\n#0 /tmp/tmpgmdax7v1.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpgmdax7v1.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return 'Yes';\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open > $str2_close) {\n        return 'Yes';\n    }\
    \ elseif ($str1_open > $str1_close && $str2_open == $str2_close) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpy3uv5pav.php:36\n\
    Stack trace:\n#0 /tmp/tmpy3uv5pav.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpy3uv5pav.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return 'Yes';\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return 'No';\n    }\
    \ elseif ($str1_open != $str1_close && $str2_open == $str2_close) {\n        return\
    \ 'No';\n    } elseif ($str1_open != $str1_close && $str2_open != $str2_close)\
    \ {\n        if ($str1_open > $str1_close) {\n            $str1_open = $str1_open\
    \ - $str1_close;\n            $str2_close = $str2_close - $str2_open;\n      \
    \      if ($str1_open == $str2_close) {\n                return 'Yes';\n     \
    \       } else {\n                return 'No';\n            }\n        } elseif\
    \ ($str1_open < $str1_close) {\n            $str1_close = $str1_close - $str1_open;\n\
    \            $str2_open = $str2_open - $str2_close;\n            if ($str1_close\
    \ == $str2_open) {\n                return 'Yes';\n            } else {\n    \
    \            return 'No';\n            }\n        }\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmaburcye.php:61\n\
    Stack trace:\n#0 /tmp/tmpmaburcye.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpmaburcye.php\
    \ on line 61\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $left = 0;\n    $right = 0;\n    foreach ($lst as $str) {\n        for\
    \ ($i = 0; $i < strlen($str); $i++) {\n            if ($str[$i] == '(') {\n  \
    \              $left++;\n            } else {\n                $right++;\n   \
    \         }\n        }\n    }\n    if ($left == $right) {\n        return 'Yes';\n\
    \    } else {\n        return 'No';\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8r6d8yvf.php:46\n\
    Stack trace:\n#0 /tmp/tmp8r6d8yvf.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp8r6d8yvf.php\
    \ on line 46\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $left = 0;\n    $right = 0;\n    for ($i = 0; $i < strlen($lst[0]); $i++)\
    \ {\n        if ($lst[0][$i] == '(') {\n            $left++;\n        } else {\n\
    \            $right++;\n        }\n    }\n    for ($i = 0; $i < strlen($lst[1]);\
    \ $i++) {\n        if ($lst[1][$i] == '(') {\n            $left++;\n        }\
    \ else {\n            $right++;\n        }\n    }\n    if ($left == $right) {\n\
    \        return 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_z66f0a_.php:50\n\
    Stack trace:\n#0 /tmp/tmp_z66f0a_.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp_z66f0a_.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $str1_len = strlen($str1);\n  $str2_len\
    \ = strlen($str2);\n  $str1_open = 0;\n  $str1_close = 0;\n  $str2_open = 0;\n\
    \  $str2_close = 0;\n  for ($i = 0; $i < $str1_len; $i++) {\n    if ($str1[$i]\
    \ == '(') {\n      $str1_open++;\n    } else {\n      $str1_close++;\n    }\n\
    \  }\n  for ($i = 0; $i < $str2_len; $i++) {\n    if ($str2[$i] == '(') {\n  \
    \    $str2_open++;\n    } else {\n      $str2_close++;\n    }\n  }\n  if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n    return 'Yes';\n  } else\
    \ {\n    return 'No';\n  }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcu6ahq00.php:48\n\
    Stack trace:\n#0 /tmp/tmpcu6ahq00.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpcu6ahq00.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str1_close = 0;\n \
    \   $str2_open = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return 'Yes';\n    }\
    \ else {\n        return 'No';\n    }\n}\nfunction candidate(...$args) {\n   \
    \ return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpd328m8ql.php:47\n\
    Stack trace:\n#0 /tmp/tmpd328m8ql.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpd328m8ql.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    $open_diff = $str1_open\
    \ - $str2_open;\n    $close_diff = $str1_close - $str2_close;\n    if ($open_diff\
    \ == 0 && $close_diff == 0) {\n        return 'Yes';\n    } elseif ($open_diff\
    \ > 0 && $close_diff > 0) {\n        return 'Yes';\n    } elseif ($open_diff <\
    \ 0 && $close_diff < 0) {\n        return 'Yes';\n    } else {\n        return\
    \ 'No';\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvtdfiv60.php:37\n\
    Stack trace:\n#0 /tmp/tmpvtdfiv60.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpvtdfiv60.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $str = '';\n    $str2 = '';\n    $str3 = '';\n    $str4 = '';\n    $str5 =\
    \ '';\n    $str6 = '';\n    $str7 = '';\n    $str8 = '';\n    $str9 = '';\n  \
    \  $str10 = '';\n    $str11 = '';\n    $str12 = '';\n    $str13 = '';\n    $str14\
    \ = '';\n    $str15 = '';\n    $str16 = '';\n    $str17 = '';\n    $str18 = '';\n\
    \    $str19 = '';\n    $str20 = '';\n    $str21 = '';\n    $str22 = '';\n    $str23\
    \ = '';\n    $str24 = '';\n    $str25 = '';\n    $str26 = '';\n    $str27 = '';\n\
    \    $str28 = '';\n    $str29 = '';\n    $str30 = '';\n    $str31 = '';\n    $str32\
    \ = '';\n    $str33 = '';\n    $str34 = '';\n    $str35 = '';\n    $str36 = '';\n\
    \    $str37 = '';\n    $str38 = '';\n    $str39 = '';\n    $str40 = '';\n    $str41\
    \ = '';\n    $str42 = '';\n    $str43 = '';\n    $str44 = '';\n    $str45 = '';\n\
    \    $str46 = '';\n    $str47 = '';\n    $str48 = '';\n    $str49 = '';\n    $str50\
    \ = '';\n    $str51 = '';\n    $str52 = '';\n    $str53 = '';\n    $str54 = '';\n\
    \    $str55 = '';\n    $str56 = '';\n    $str57 = '';\n    $str58 = '';\n    $str59\
    \ = '';\n    $str60\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\" in /tmp/tmp6t58f8j3.php\
    \ on line 76\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str1_close = 0;\n \
    \   $str2_open = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return 'Yes';\n    }\
    \ else {\n        return 'No';\n    }\n}\nfunction candidate(...$args) {\n   \
    \ return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp05eib857.php:47\n\
    Stack trace:\n#0 /tmp/tmp05eib857.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp05eib857.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $lst = array_merge($lst[0], $lst[1]);\n    $count = 0;\n    foreach ($lst as\
    \ $char) {\n        if ($char == '(') {\n            $count++;\n        } elseif\
    \ ($char == ')') {\n            $count--;\n        }\n        if ($count < 0)\
    \ {\n            return 'No';\n        }\n    }\n    return $count == 0 ? 'Yes'\
    \ : 'No';\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnuxvwuxs.php:39\n\
    Stack trace:\n#0 /tmp/tmpnuxvwuxs.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpnuxvwuxs.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $lst = array_merge($lst[0], $lst[1]);\n    $count = 0;\n    foreach ($lst as\
    \ $char) {\n        if ($char == '(') {\n            $count++;\n        } else\
    \ {\n            $count--;\n        }\n        if ($count < 0) {\n           \
    \ return 'No';\n        }\n    }\n    return $count == 0 ? 'Yes' : 'No';\n}\n\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpv1_2ok5f.php:39\n\
    Stack trace:\n#0 /tmp/tmpv1_2ok5f.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpv1_2ok5f.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmiq3j_er.php:44\n\
    Stack trace:\n#0 /tmp/tmpmiq3j_er.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpmiq3j_er.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjoq1rv46.php:43\n\
    Stack trace:\n#0 /tmp/tmpjoq1rv46.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpjoq1rv46.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $s1 = $lst[0];\n  $s2 = $lst[1];\n  $s1_open = substr_count($s1, '(');\n\
    \  $s1_close = substr_count($s1, ')');\n  $s2_open = substr_count($s2, '(');\n\
    \  $s2_close = substr_count($s2, ')');\n  $s1_balance = $s1_open - $s1_close;\n\
    \  $s2_balance = $s2_open - $s2_close;\n  if ($s1_balance == 0 && $s2_balance\
    \ == 0) {\n    return 'Yes';\n  }\n  if ($s1_balance == 0 && $s2_balance > 0)\
    \ {\n    return 'Yes';\n  }\n  if ($s1_balance < 0 && $s2_balance == 0) {\n  \
    \  return 'Yes';\n  }\n  if ($s1_balance < 0 && $s2_balance > 0) {\n    return\
    \ 'Yes';\n  }\n  if ($s1_balance > 0 && $s2_balance == 0) {\n    return 'Yes';\n\
    \  }\n  if ($s1_balance > 0 && $s2_balance < 0) {\n    return 'Yes';\n  }\n  return\
    \ 'No';\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3yh6tcjs.php:50\n\
    Stack trace:\n#0 /tmp/tmp3yh6tcjs.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp3yh6tcjs.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    $str1_open_close = $str1_open\
    \ - $str1_close;\n    $str2_open_close = $str2_open - $str2_close;\n    if ($str1_open_close\
    \ == 0 && $str2_open_close == 0) {\n        return 'Yes';\n    } elseif ($str1_open_close\
    \ == 0 && $str2_open_close != 0) {\n        return 'No';\n    } elseif ($str1_open_close\
    \ != 0 && $str2_open_close == 0) {\n        return 'No';\n    } elseif ($str1_open_close\
    \ > 0 && $str2_open_close < 0) {\n        return 'Yes';\n    } elseif ($str1_open_close\
    \ < 0 && $str2_open_close > 0) {\n        return 'Yes';\n    } else {\n      \
    \  return 'No';\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpep4h0suy.php:43\n\
    Stack trace:\n#0 /tmp/tmpep4h0suy.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpep4h0suy.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdkurwge8.php:43\n\
    Stack trace:\n#0 /tmp/tmpdkurwge8.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpdkurwge8.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7s90hqky.php:43\n\
    Stack trace:\n#0 /tmp/tmp7s90hqky.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp7s90hqky.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    $str1_balance = $str1_open\
    \ - $str1_close;\n    $str2_balance = $str2_open - $str2_close;\n    $str1_balance_abs\
    \ = abs($str1_balance);\n    $str2_balance_abs = abs($str2_balance);\n    $str1_balance_abs_diff\
    \ = $str1_balance_abs - $str2_balance_abs;\n    $str2_balance_abs_diff = $str2_balance_abs\
    \ - $str1_balance_abs;\n    $str1_balance_diff = $str1_balance - $str2_balance;\n\
    \    $str2_balance_diff = $str2_balance - $str1_balance;\n    $str1_balance_diff_abs\
    \ = abs($str1_balance_diff);\n    $str2_balance_diff_abs = abs($str2_balance_diff);\n\
    \    $str1_balance_diff_abs_diff = $str1_balance_diff_abs - $str2_balance_diff_abs;\n\
    \    $str2_balance_diff_abs_diff = $str2_balance_diff_abs - $str1_balance_diff_abs;\n\
    \    $str1_balance_diff_abs_diff_abs = abs($str1_balance_diff_abs_diff);\n   \
    \ $str2_balance_diff_abs_diff_abs = abs($str2_balance_diff_abs_diff);\n    $str1_balance_diff_abs_diff_abs_diff\
    \ = $str1_balance_diff_abs_diff_abs - $str2_balance_diff_abs_diff_abs;\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  Unclosed '{' on line 13 in /tmp/tmpcia5to8k.php on line\
    \ 56\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str3 = $str1 . $str2;\n\
    \    $str4 = $str2 . $str1;\n    $str5 = $str1 . $str1;\n    $str6 = $str2 . $str2;\n\
    \    $str7 = $str1 . $str2 . $str1;\n    $str8 = $str2 . $str1 . $str2;\n    $str9\
    \ = $str1 . $str2 . $str2;\n    $str10 = $str2 . $str1 . $str1;\n    $str11 =\
    \ $str1 . $str1 . $str2;\n    $str12 = $str2 . $str2 . $str1;\n    $str13 = $str1\
    \ . $str2 . $str1 . $str2;\n    $str14 = $str2 . $str1 . $str2 . $str1;\n    $str15\
    \ = $str1 . $str2 . $str2 . $str1;\n    $str16 = $str2 . $str1 . $str1 . $str2;\n\
    \    $str17 = $str1 . $str1 . $str2 . $str2;\n    $str18 = $str2 . $str2 . $str1\
    \ . $str1;\n    $str19 = $str1 . $str2 . $str1 . $str2 . $str1;\n    $str20 =\
    \ $str2 . $str1 . $str2 . $str1 . $str2;\n    $str21 = $str1 . $str2 . $str2 .\
    \ $str1 . $str2;\n    $str22 = $str2 . $str1 . $str1 . $str2 . $str1;\n    $str23\
    \ = $str1 . $str1 . $str2 . $str2 . $str1;\n    $str24 = $str2 . $str2 . $str1\
    \ . $str1 . $str2;\n    $str25 = $str1 . $str2 . $str1 . $str2 . $str2;\n    $str26\
    \ = $str2 .\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"candidate\", expecting\
    \ \"(\" in /tmp/tmp9iaezvp_.php on line 40\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $str) {\n        for\
    \ ($i = 0; $i < strlen($str); $i++) {\n            if ($str[$i] == '(') {\n  \
    \              $open++;\n            } else {\n                $close++;\n   \
    \         }\n        }\n    }\n    return ($open == $close) ? 'Yes' : 'No';\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvqbvkows.php:42\n\
    Stack trace:\n#0 /tmp/tmpvqbvkows.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpvqbvkows.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count == 0 && $str2_count < 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count > 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count > 0 && $str2_count < 0) {\n        if ($str1_count\
    \ == abs($str2_count)) {\n            return 'Yes';\n        } else {\n      \
    \      return 'No';\n        }\n    } else if ($str1_count < 0 && $str2_count\
    \ == 0) {\n        return 'Yes';\n    } else if ($str1_count < 0 && $str2_count\
    \ > 0) {\n        if (abs($str1_count) == $str2_count) {\n            return 'Yes';\n\
    \        } else {\n            return 'No';\n        }\n    } else {\n       \
    \ return 'No';\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp69raqr8j.php:66\n\
    Stack trace:\n#0 /tmp/tmp69raqr8j.php(75): test()\n#1 {main}\n  thrown in /tmp/tmp69raqr8j.php\
    \ on line 66\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $left = 0;\n    $right = 0;\n    for ($i = 0; $i < strlen($lst[0]); $i++)\
    \ {\n        if ($lst[0][$i] == '(') {\n            $left++;\n        } else {\n\
    \            $right++;\n        }\n    }\n    for ($i = 0; $i < strlen($lst[1]);\
    \ $i++) {\n        if ($lst[1][$i] == '(') {\n            $left++;\n        }\
    \ else {\n            $right++;\n        }\n    }\n    if ($left == $right) {\n\
    \        return 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgkb7ra20.php:50\n\
    Stack trace:\n#0 /tmp/tmpgkb7ra20.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpgkb7ra20.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $str) {\n        for\
    \ ($i = 0; $i < strlen($str); $i++) {\n            if ($str[$i] == '(') {\n  \
    \              $open++;\n            } else {\n                $close++;\n   \
    \         }\n        }\n    }\n    if ($open == $close) {\n        return 'Yes';\n\
    \    } else {\n        return 'No';\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwz3mnf84.php:46\n\
    Stack trace:\n#0 /tmp/tmpwz3mnf84.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpwz3mnf84.php\
    \ on line 46\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $str = implode($lst);\n  $str = str_replace('()', '', $str);\n  if (strlen($str)\
    \ == 0) {\n    return 'Yes';\n  }\n  return 'No';\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptzvrb9ob.php:30\n\
    Stack trace:\n#0 /tmp/tmptzvrb9ob.php(41): test()\n#1 {main}\n  thrown in /tmp/tmptzvrb9ob.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $lst[0] = array_reverse($lst[0]);\n    $lst[1] = array_reverse($lst[1]);\n\
    \    $lst[0] = implode('', $lst[0]);\n    $lst[1] = implode('', $lst[1]);\n  \
    \  $str = $lst[0] . $lst[1];\n    $str = str_split($str);\n    $str = array_reverse($str);\n\
    \    $str = implode('', $str);\n    $str = str_split($str);\n    $stack = [];\n\
    \    foreach ($str as $char) {\n        if ($char == '(') {\n            array_push($stack,\
    \ $char);\n        } else {\n            if (count($stack) == 0) {\n         \
    \       return 'No';\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    if (count($stack) == 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpl9lutg1m.php:48\n\
    Stack trace:\n#0 /tmp/tmpl9lutg1m.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpl9lutg1m.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7cglkew0.php:43\n\
    Stack trace:\n#0 /tmp/tmp7cglkew0.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp7cglkew0.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    $str1_open_close = $str1_open\
    \ - $str1_close;\n    $str2_open_close = $str2_open - $str2_close;\n    if ($str1_open_close\
    \ == 0 && $str2_open_close == 0) {\n        return 'Yes';\n    } elseif ($str1_open_close\
    \ == 0 && $str2_open_close != 0) {\n        if ($str2_open_close > 0) {\n    \
    \        $str2_open_close = $str2_open_close - $str1_open;\n            if ($str2_open_close\
    \ > 0) {\n                return 'No';\n            } else {\n               \
    \ return 'Yes';\n            }\n        } else {\n            $str2_open_close\
    \ = $str2_open_close + $str1_close;\n            if ($str2_open_close < 0) {\n\
    \                return 'No';\n            } else {\n                return 'Yes';\n\
    \            }\n        }\n    } elseif ($str1_open_close != 0 && $str2_open_close\
    \ == 0) {\n        if ($str1_open_close > 0) {\n            $str1_open_close =\
    \ $str1_open_close - $str2_open;\n            if ($str1_open_close > 0) {\n  \
    \              return 'No';\n            } else {\n                return 'Yes';\n\
    \            }\n        } else {\n            $str1_open_close = $str1_open_close\
    \ + $str2_close;\n            if ($str1_open_close < 0) {\n                return\
    \ 'No';\n            }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  Unclosed '{' on line 50 in /tmp/tmpclcctrr0.php on line\
    \ 74\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return 'Yes';\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return 'No';\n    }\
    \ elseif ($str1_open != $str1_close && $str2_open == $str2_close) {\n        return\
    \ 'No';\n    } elseif ($str1_open != $str1_close && $str2_open != $str2_close)\
    \ {\n        if ($str1_open > $str1_close) {\n            $str1_open = $str1_open\
    \ - $str1_close;\n            $str2_close = $str2_close - $str2_open;\n      \
    \      if ($str1_open == $str2_close) {\n                return 'Yes';\n     \
    \       } else {\n                return 'No';\n            }\n        } elseif\
    \ ($str1_open < $str1_close) {\n            $str1_close = $str1_close - $str1_open;\n\
    \            $str2_open = $str2_open - $str2_close;\n            if ($str1_close\
    \ == $str2_open) {\n                return 'Yes';\n            } else {\n    \
    \            return 'No';\n            }\n        }\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpf8b75uyj.php:60\n\
    Stack trace:\n#0 /tmp/tmpf8b75uyj.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpf8b75uyj.php\
    \ on line 60\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str3 = $str1 . $str2;\n\
    \    $str4 = $str2 . $str1;\n    if (is_good($str3) || is_good($str4)) {\n   \
    \     return 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_good()\
    \ in /tmp/tmp3elrgln_.php:18\nStack trace:\n#0 /tmp/tmp3elrgln_.php(25): match_parens()\n\
    #1 /tmp/tmp3elrgln_.php(29): candidate()\n#2 /tmp/tmp3elrgln_.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3elrgln_.php on line 18\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count == 0 && $str2_count > 0) {\n        return\
    \ 'No';\n    } else if ($str1_count < 0 && $str2_count == 0) {\n        return\
    \ 'No';\n    } else if ($str1_count < 0 && $str2_count > 0) {\n        if ($str1_count\
    \ + $str2_count == 0) {\n            return 'Yes';\n        } else {\n       \
    \     return 'No';\n        }\n    } else if ($str1_count > 0 && $str2_count ==\
    \ 0) {\n        return 'No';\n    } else if ($str1_count > 0 && $str2_count <\
    \ 0) {\n        if ($str1_count + $str2_count == 0) {\n            return 'Yes';\n\
    \        } else {\n            return 'No';\n        }\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphq6gh260.php:61\n\
    Stack trace:\n#0 /tmp/tmphq6gh260.php(74): test()\n#1 {main}\n  thrown in /tmp/tmphq6gh260.php\
    \ on line 61\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($lst[0]); $i++)\
    \ {\n        if ($lst[0][$i] == '(') {\n            $open++;\n        } else {\n\
    \            $close++;\n        }\n    }\n    for ($i = 0; $i < strlen($lst[1]);\
    \ $i++) {\n        if ($lst[1][$i] == '(') {\n            $open++;\n        }\
    \ else {\n            $close++;\n        }\n    }\n    if ($open == $close) {\n\
    \        return 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwhf1eo7o.php:50\n\
    Stack trace:\n#0 /tmp/tmpwhf1eo7o.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpwhf1eo7o.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpknvm4yb6.php:43\n\
    Stack trace:\n#0 /tmp/tmpknvm4yb6.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpknvm4yb6.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $lst = array_merge($lst[0], $lst[1]);\n    $open = 0;\n    foreach ($lst as\
    \ $char) {\n        if ($char == '(') {\n            $open++;\n        } else\
    \ {\n            $open--;\n        }\n        if ($open < 0) {\n            return\
    \ 'No';\n        }\n    }\n    return 'Yes';\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcxkthw8s.php:38\n\
    Stack trace:\n#0 /tmp/tmpcxkthw8s.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpcxkthw8s.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lst = array_map(function($x) {\n        return str_split($x);\n    },\
    \ $lst);\n    $lst = array_reduce($lst, function($acc, $x) {\n        return array_merge($acc,\
    \ $x);\n    }, []);\n    $lst = array_reduce($lst, function($acc, $x) {\n    \
    \    if ($x == '(') {\n            array_push($acc, $x);\n        } else {\n \
    \           if (count($acc) == 0) {\n                return false;\n         \
    \   }\n            array_pop($acc);\n        }\n        return $acc;\n    }, []);\n\
    \    return count($lst) == 0 ? 'Yes' : 'No';\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmpbcyychyf.php:24\nStack trace:\n\
    #0 [internal function]: {closure}()\n#1 /tmp/tmpbcyychyf.php(30): array_reduce()\n\
    #2 /tmp/tmpbcyychyf.php(35): match_parens()\n#3 /tmp/tmpbcyychyf.php(40): candidate()\n\
    #4 /tmp/tmpbcyychyf.php(53): test()\n#5 {main}\n  thrown in /tmp/tmpbcyychyf.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return 'Yes';\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return 'No';\n    }\
    \ elseif ($str1_open != $str1_close && $str2_open == $str2_close) {\n        return\
    \ 'No';\n    } elseif ($str1_open != $str1_close && $str2_open != $str2_close)\
    \ {\n        $diff1 = $str1_open - $str1_close;\n        $diff2 = $str2_open -\
    \ $str2_close;\n        if ($diff1 == $diff2) {\n            return 'Yes';\n \
    \       } else {\n            return 'No';\n        }\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn3cfrj8q.php:42\n\
    Stack trace:\n#0 /tmp/tmpn3cfrj8q.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpn3cfrj8q.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return 'Yes';\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return 'No';\n    }\
    \ elseif ($str1_open != $str1_close && $str2_open == $str2_close) {\n        return\
    \ 'No';\n    } elseif ($str1_open != $str1_close && $str2_open != $str2_close)\
    \ {\n        if ($str1_open > $str1_close) {\n            $diff = $str1_open -\
    \ $str1_close;\n            if ($str2_open >= $diff) {\n                return\
    \ 'Yes';\n            } else {\n                return 'No';\n            }\n\
    \        } elseif ($str1_open < $str1_close) {\n            $diff = $str1_close\
    \ - $str1_open;\n            if ($str2_close >= $diff) {\n                return\
    \ 'Yes';\n            } else {\n                return 'No';\n            }\n\
    \        }\n    }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpo_4e33iy.php:50\n\
    Stack trace:\n#0 /tmp/tmpo_4e33iy.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpo_4e33iy.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $lst[0] = array_reverse($lst[0]);\n    $lst[1] = array_reverse($lst[1]);\n\
    \    $lst[0] = implode($lst[0]);\n    $lst[1] = implode($lst[1]);\n    $lst[0]\
    \ = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n    $lst[0] = array_reverse($lst[0]);\n\
    \    $lst[1] = array_reverse($lst[1]);\n    $lst[0] = implode($lst[0]);\n    $lst[1]\
    \ = implode($lst[1]);\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n\
    \    $lst[0] = array_reverse($lst[0]);\n    $lst[1] = array_reverse($lst[1]);\n\
    \    $lst[0] = implode($lst[0]);\n    $lst[1] = implode($lst[1]);\n    $lst[0]\
    \ = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n    $lst[0] = array_reverse($lst[0]);\n\
    \    $lst[1] = array_reverse($lst[1]);\n    $lst[0] = implode($lst[0]);\n    $lst[1]\
    \ = implode($lst[1]);\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n\
    \    $lst[0] = array_reverse($lst[0]);\n    $lst[1] = array_reverse($lst[1]);\n\
    \    $lst[0] = implode($lst[0\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \"]\" in /tmp/tmpaa857df0.php on line 43\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lst = array_map(function($str) {\n        return str_split($str);\n\
    \    }, $lst);\n    $lst = array_reduce($lst, function($acc, $str) {\n       \
    \ return array_merge($acc, $str);\n    }, []);\n    $count = 0;\n    foreach ($lst\
    \ as $char) {\n        if ($char == '(') {\n            $count++;\n        } else\
    \ {\n            $count--;\n        }\n        if ($count < 0) {\n           \
    \ return 'No';\n        }\n    }\n    return $count == 0 ? 'Yes' : 'No';\n}\n\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpldt9l0_s.php:42\n\
    Stack trace:\n#0 /tmp/tmpldt9l0_s.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpldt9l0_s.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str1_close = 0;\n \
    \   $str2_open = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return 'Yes';\n    }\
    \ else {\n        return 'No';\n    }\n}\nfunction candidate(...$args) {\n   \
    \ return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjur1fd1h.php:47\n\
    Stack trace:\n#0 /tmp/tmpjur1fd1h.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpjur1fd1h.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1_open = substr_count($s1,\
    \ '(');\n    $s1_close = substr_count($s1, ')');\n    $s2_open = substr_count($s2,\
    \ '(');\n    $s2_close = substr_count($s2, ')');\n    if ($s1_open == $s1_close\
    \ && $s2_open == $s2_close) {\n        return 'Yes';\n    }\n    if ($s1_open\
    \ == $s1_close && $s2_open > $s2_close) {\n        return 'Yes';\n    }\n    if\
    \ ($s1_open > $s1_close && $s2_open == $s2_close) {\n        return 'Yes';\n \
    \   }\n    return 'No';\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4m2vhdok.php:37\n\
    Stack trace:\n#0 /tmp/tmp4m2vhdok.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp4m2vhdok.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $count = 0;\n    foreach ($lst[0] as $char) {\n        if ($char == '(') {\n\
    \            $count++;\n        } else {\n            $count--;\n        }\n \
    \       if ($count < 0) {\n            return 'No';\n        }\n    }\n    foreach\
    \ ($lst[1] as $char) {\n        if ($char == '(') {\n            $count++;\n \
    \       } else {\n            $count--;\n        }\n        if ($count < 0) {\n\
    \            return 'No';\n        }\n    }\n    return 'Yes';\n}\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpki9yfx9a.php:48\n\
    Stack trace:\n#0 /tmp/tmpki9yfx9a.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpki9yfx9a.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $str) {\n        for\
    \ ($i = 0; $i < strlen($str); $i++) {\n            if ($str[$i] == '(') {\n  \
    \              $open++;\n            } else {\n                $close++;\n   \
    \         }\n        }\n    }\n    if ($open == $close) {\n        return 'Yes';\n\
    \    } else {\n        return 'No';\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgjvs23hx.php:46\n\
    Stack trace:\n#0 /tmp/tmpgjvs23hx.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpgjvs23hx.php\
    \ on line 46\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lst = array_map(function($x) { return str_split($x); }, $lst);\n   \
    \ $lst = array_reduce($lst, function($acc, $x) { return array_merge($acc, $x);\
    \ }, []);\n    $lst = array_reduce($lst, function($acc, $x) {\n        if ($x\
    \ == '(') {\n            array_push($acc, $x);\n        } else {\n           \
    \ if (count($acc) == 0) {\n                array_push($acc, $x);\n           \
    \ } else {\n                $last = array_pop($acc);\n                if ($last\
    \ != '(') {\n                    array_push($acc, $last);\n                  \
    \  array_push($acc, $x);\n                }\n            }\n        }\n      \
    \  return $acc;\n    }, []);\n    return count($lst) == 0 ? 'Yes' : 'No';\n}\n\
    \nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjj32o636.php:43\n\
    Stack trace:\n#0 /tmp/tmpjj32o636.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpjj32o636.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $str) {\n        for\
    \ ($i = 0; $i < strlen($str); $i++) {\n            if ($str[$i] == '(') {\n  \
    \              $open++;\n            } else {\n                $close++;\n   \
    \         }\n        }\n    }\n    if ($open == $close) {\n        return 'Yes';\n\
    \    } else {\n        return 'No';\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5a8fgh8z.php:46\n\
    Stack trace:\n#0 /tmp/tmp5a8fgh8z.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp5a8fgh8z.php\
    \ on line 46\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return 'Yes';\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return 'No';\n    }\
    \ elseif ($str1_open != $str1_close && $str2_open == $str2_close) {\n        return\
    \ 'No';\n    } elseif ($str1_open != $str1_close && $str2_open != $str2_close)\
    \ {\n        if ($str1_open == $str2_close && $str2_open == $str1_close) {\n \
    \           return 'Yes';\n        } else {\n            return 'No';\n      \
    \  }\n    }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpu5girtne.php:40\n\
    Stack trace:\n#0 /tmp/tmpu5girtne.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpu5girtne.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return 'Yes';\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return 'No';\n    }\
    \ elseif ($str1_open != $str1_close && $str2_open == $str2_close) {\n        return\
    \ 'No';\n    } elseif ($str1_open != $str1_close && $str2_open != $str2_close)\
    \ {\n        if ($str1_open > $str1_close) {\n            $str1_open = $str1_open\
    \ - $str1_close;\n            $str2_close = $str2_close - $str2_open;\n      \
    \      if ($str1_open == $str2_close) {\n                return 'Yes';\n     \
    \       } else {\n                return 'No';\n            }\n        } elseif\
    \ ($str1_open < $str1_close) {\n            $str1_close = $str1_close - $str1_open;\n\
    \            $str2_open = $str2_open - $str2_close;\n            if ($str1_close\
    \ == $str2_open) {\n                return 'Yes';\n            } else {\n    \
    \            return 'No';\n            }\n        }\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpw0e9d_wx.php:61\n\
    Stack trace:\n#0 /tmp/tmpw0e9d_wx.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpw0e9d_wx.php\
    \ on line 61\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count == 0 && $str2_count > 0) {\n        return\
    \ 'No';\n    } else if ($str1_count < 0 && $str2_count == 0) {\n        return\
    \ 'No';\n    } else if ($str1_count < 0 && $str2_count > 0) {\n        if ($str1_count\
    \ + $str2_count == 0) {\n            return 'Yes';\n        } else {\n       \
    \     return 'No';\n        }\n    } else if ($str1_count > 0 && $str2_count ==\
    \ 0) {\n        return 'No';\n    } else if ($str1_count > 0 && $str2_count <\
    \ 0) {\n        if ($str1_count + $str2_count == 0) {\n            return 'Yes';\n\
    \        } else {\n            return 'No';\n        }\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpy6lygyaz.php:61\n\
    Stack trace:\n#0 /tmp/tmpy6lygyaz.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpy6lygyaz.php\
    \ on line 61\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count == 0 && $str2_count < 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count > 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count > 0 && $str2_count < 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp58dzcrad.php:51\n\
    Stack trace:\n#0 /tmp/tmp58dzcrad.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp58dzcrad.php\
    \ on line 51\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_count > 0 && $str2_count < 0 && $str1_count ==\
    \ abs($str2_count)) {\n        return 'Yes';\n    } else if ($str1_count < 0 &&\
    \ $str2_count > 0 && $str2_count == abs($str1_count)) {\n        return 'Yes';\n\
    \    } else {\n        return 'No';\n    }\n}\necho match_parens(['()(', ')'])\
    \ . PHP_EOL;\necho match_parens([')', ')']) . PHP_EOL;\necho match_parens(['(()',\
    \ ')']) . PHP_EOL;\necho match_parens(['(()', '()']) . PHP_EOL;\necho match_parens(['(()',\
    \ '()(']) . PHP_EOL;\necho match_parens(['(()', '())(']) . PHP_EOL;\necho match_parens(['(()',\
    \ '())((']) . PHP_EOL;\necho match_parens(['(()', '())(()']) . PHP_EOL;\necho\
    \ match_parens(['(()', '())(())(']) . PHP_EOL;\necho match_parens(['(()', '())(())(('])\
    \ . PHP_EOL;\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Yes\nNo\nYes\nNo\nNo\nNo\nNo\nNo\nNo\nNo\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6dqxhar5.php:67\n\
    Stack trace:\n#0 /tmp/tmp6dqxhar5.php(72): test()\n#1 {main}\n  thrown in /tmp/tmp6dqxhar5.php\
    \ on line 67\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return 'Yes';\n    } elseif ($str1_open\
    \ == $str1_close) {\n        if ($str2_open > $str2_close) {\n            return\
    \ 'Yes';\n        } else {\n            return 'No';\n        }\n    } elseif\
    \ ($str2_open == $str2_close) {\n        if ($str1_open > $str1_close) {\n   \
    \         return 'Yes';\n        } else {\n            return 'No';\n        }\n\
    \    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpd6cdgxmf.php:45\n\
    Stack trace:\n#0 /tmp/tmpd6cdgxmf.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpd6cdgxmf.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8986w9q7.php:44\n\
    Stack trace:\n#0 /tmp/tmp8986w9q7.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp8986w9q7.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str1_close = 0;\n \
    \   $str2_open = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return 'Yes';\n    }\
    \ else {\n        return 'No';\n    }\n}\nfunction candidate(...$args) {\n   \
    \ return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqv3dswqz.php:47\n\
    Stack trace:\n#0 /tmp/tmpqv3dswqz.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpqv3dswqz.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1_len = strlen($s1);\n    $s2_len\
    \ = strlen($s2);\n    $s1_open = substr_count($s1, '(');\n    $s1_close = substr_count($s1,\
    \ ')');\n    $s2_open = substr_count($s2, '(');\n    $s2_close = substr_count($s2,\
    \ ')');\n    if ($s1_open == $s1_close && $s2_open == $s2_close) {\n        return\
    \ 'Yes';\n    }\n    if ($s1_open == $s1_close && $s2_open != $s2_close) {\n \
    \       return 'No';\n    }\n    if ($s1_open != $s1_close && $s2_open == $s2_close)\
    \ {\n        return 'No';\n    }\n    if ($s1_open != $s1_close && $s2_open !=\
    \ $s2_close) {\n        if ($s1_open > $s1_close) {\n            $s1_open -= $s1_close;\n\
    \            $s1_close = 0;\n        } else {\n            $s1_close -= $s1_open;\n\
    \            $s1_open = 0;\n        }\n        if ($s2_open > $s2_close) {\n \
    \           $s2_open -= $s2_close;\n            $s2_close = 0;\n        } else\
    \ {\n            $s2_close -= $s2_open;\n            $s2_open = 0;\n        }\n\
    \        if ($s1_open == $s2_close && $s2_open == $s1_close) {\n            return\
    \ 'Yes';\n        }\n        return 'No';\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnkww7vo5.php:67\n\
    Stack trace:\n#0 /tmp/tmpnkww7vo5.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpnkww7vo5.php\
    \ on line 67\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str1_close = 0;\n \
    \   $str2_open = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return 'Yes';\n    }\
    \ else {\n        return 'No';\n    }\n}\nfunction candidate(...$args) {\n   \
    \ return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpla8lma_b.php:47\n\
    Stack trace:\n#0 /tmp/tmpla8lma_b.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpla8lma_b.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return 'Yes';\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return 'No';\n    }\
    \ elseif ($str1_open != $str1_close && $str2_open == $str2_close) {\n        return\
    \ 'No';\n    } elseif ($str1_open != $str1_close && $str2_open != $str2_close)\
    \ {\n        $diff1 = $str1_open - $str1_close;\n        $diff2 = $str2_open -\
    \ $str2_close;\n        if ($diff1 == $diff2) {\n            return 'Yes';\n \
    \       } else {\n            return 'No';\n        }\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpq_hvdw3i.php:42\n\
    Stack trace:\n#0 /tmp/tmpq_hvdw3i.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpq_hvdw3i.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lst = array_map(function($str) {\n        return str_split($str);\n\
    \    }, $lst);\n    $lst = array_reduce($lst, function($acc, $str) {\n       \
    \ return array_merge($acc, $str);\n    }, []);\n    $lst = array_reduce($lst,\
    \ function($acc, $ch) {\n        if ($ch == '(') {\n            $acc[] = $ch;\n\
    \        } else {\n            if (count($acc) == 0) {\n                return\
    \ false;\n            }\n            array_pop($acc);\n        }\n        return\
    \ $acc;\n    }, []);\n    return count($lst) == 0 ? 'Yes' : 'No';\n}\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmp0ztlh2tg.php:24\nStack trace:\n\
    #0 [internal function]: {closure}()\n#1 /tmp/tmp0ztlh2tg.php(30): array_reduce()\n\
    #2 /tmp/tmp0ztlh2tg.php(35): match_parens()\n#3 /tmp/tmp0ztlh2tg.php(40): candidate()\n\
    #4 /tmp/tmp0ztlh2tg.php(53): test()\n#5 {main}\n  thrown in /tmp/tmp0ztlh2tg.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $str) {\n        for\
    \ ($i = 0; $i < strlen($str); $i++) {\n            if ($str[$i] == '(') {\n  \
    \              $open++;\n            } else {\n                $close++;\n   \
    \         }\n        }\n    }\n    if ($open == $close) {\n        return 'Yes';\n\
    \    } else {\n        return 'No';\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfaj_1v9k.php:46\n\
    Stack trace:\n#0 /tmp/tmpfaj_1v9k.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpfaj_1v9k.php\
    \ on line 46\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $a = $lst[0];\n    $b = $lst[1];\n    $c = $a . $b;\n    $d = $b . $a;\n\
    \    $e = 0;\n    $f = 0;\n    $g = 0;\n    $h = 0;\n    for ($i = 0; $i < strlen($c);\
    \ $i++) {\n        if ($c[$i] == '(') {\n            $e++;\n        } else {\n\
    \            $e--;\n        }\n        if ($e < 0) {\n            $g++;\n    \
    \    }\n    }\n    for ($i = 0; $i < strlen($d); $i++) {\n        if ($d[$i] ==\
    \ '(') {\n            $f++;\n        } else {\n            $f--;\n        }\n\
    \        if ($f < 0) {\n            $h++;\n        }\n    }\n    if ($g == 0 ||\
    \ $h == 0) {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmxki3qiu.php:61\n\
    Stack trace:\n#0 /tmp/tmpmxki3qiu.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpmxki3qiu.php\
    \ on line 61\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1_open = substr_count($s1,\
    \ '(');\n    $s1_close = substr_count($s1, ')');\n    $s2_open = substr_count($s2,\
    \ '(');\n    $s2_close = substr_count($s2, ')');\n    if ($s1_open == $s1_close\
    \ && $s2_open == $s2_close) {\n        return 'Yes';\n    }\n    if ($s1_open\
    \ == $s1_close && $s2_open > $s2_close) {\n        return 'Yes';\n    }\n    if\
    \ ($s1_open > $s1_close && $s2_open == $s2_close) {\n        return 'Yes';\n \
    \   }\n    return 'No';\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4qwytxjl.php:37\n\
    Stack trace:\n#0 /tmp/tmp4qwytxjl.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp4qwytxjl.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1_open = substr_count($s1,\
    \ '(');\n    $s1_close = substr_count($s1, ')');\n    $s2_open = substr_count($s2,\
    \ '(');\n    $s2_close = substr_count($s2, ')');\n    if ($s1_open == $s1_close\
    \ && $s2_open == $s2_close) {\n        return 'Yes';\n    }\n    if ($s1_open\
    \ == $s1_close) {\n        if ($s2_open > $s2_close) {\n            return 'Yes';\n\
    \        }\n    }\n    if ($s2_open == $s2_close) {\n        if ($s1_open > $s1_close)\
    \ {\n            return 'Yes';\n        }\n    }\n    return 'No';\n}\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpto5939yr.php:41\n\
    Stack trace:\n#0 /tmp/tmpto5939yr.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpto5939yr.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str1_close = 0;\n \
    \   $str2_open = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return 'Yes';\n    }\
    \ else {\n        return 'No';\n    }\n}\necho match_parens(['()(', ')']) . \"\
    \\n\";\necho match_parens([')', ')']) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "No\nNo\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdsgrwpxf.php:49\n\
    Stack trace:\n#0 /tmp/tmpdsgrwpxf.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpdsgrwpxf.php\
    \ on line 49\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $str1_open = substr_count($str1,\
    \ '(');\n  $str1_close = substr_count($str1, ')');\n  $str2_open = substr_count($str2,\
    \ '(');\n  $str2_close = substr_count($str2, ')');\n  if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n    return 'Yes';\n  } elseif ($str1_open ==\
    \ $str1_close && $str2_open != $str2_close) {\n    return 'No';\n  } elseif ($str1_open\
    \ != $str1_close && $str2_open == $str2_close) {\n    return 'No';\n  } elseif\
    \ ($str1_open != $str1_close && $str2_open != $str2_close) {\n    if ($str1_open\
    \ > $str1_close) {\n      $str1_open = $str1_open - $str1_close;\n      $str2_close\
    \ = $str2_close - $str2_open;\n      if ($str1_open == $str2_close) {\n      \
    \  return 'Yes';\n      } else {\n        return 'No';\n      }\n    } elseif\
    \ ($str1_open < $str1_close) {\n      $str1_close = $str1_close - $str1_open;\n\
    \      $str2_open = $str2_open - $str2_close;\n      if ($str1_close == $str2_open)\
    \ {\n        return 'Yes';\n      } else {\n        return 'No';\n      }\n  \
    \  }\n  }\n}\n\necho match_parens(['()(', ')']) . PHP_EOL;\necho match_parens([')',\
    \ ')']) . PHP_EOL;\necho match_parens(['()', ')']) . PHP_EOL;\necho match_parens(['(',\
    \ ')']) . PHP_EOL;\necho match_parens(['(\nfunction candidate(...$args) {\n  \
    \  return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected string content \"(\", expecting\
    \ \"]\" in /tmp/tmpz1t__825.php on line 51\n"
  exit_code: 255
  status: SyntaxError
