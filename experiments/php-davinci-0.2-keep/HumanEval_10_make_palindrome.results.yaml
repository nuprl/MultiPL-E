name: HumanEval_10_make_palindrome
language: php
results:
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $suffix = '';\n    for ($i = $length - 1; $i >= 0; $i--) {\n        $suffix\
    \ = $string[$i] . $suffix;\n        if (is_palindrome($suffix)) {\n          \
    \  break;\n        }\n    }\n    $prefix = strrev(substr($string, 0, $i));\n \
    \   return $string . $prefix;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpaoicusd8.php:17\nStack trace:\n#0 /tmp/tmpaoicusd8.php(26): make_palindrome()\n\
    #1 /tmp/tmpaoicusd8.php(31): candidate()\n#2 /tmp/tmpaoicusd8.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpaoicusd8.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $length; $i++) {\n       \
    \ if ($string[$i] == $string[$length - $i - 1]) {\n            $palindrome_length++;\n\
    \        } else {\n            break;\n        }\n    }\n    $prefix = substr($string,\
    \ 0, $length - $palindrome_length);\n    $prefix_reversed = strrev($prefix);\n\
    \    return $string . $prefix_reversed;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp64xjihn6.php:34\n\
    Stack trace:\n#0 /tmp/tmp64xjihn6.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp64xjihn6.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n  $string_length = strlen($string);\n\
    \  $palindrome_length = 0;\n  for ($i = 0; $i < $string_length; $i++) {\n    if\
    \ ($string[$i] == $string[$string_length - $i - 1]) {\n      $palindrome_length++;\n\
    \    } else {\n      break;\n    }\n  }\n  return $string . strrev(substr($string,\
    \ 0, $string_length - $palindrome_length));\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_vm9tu59.php:32\n\
    Stack trace:\n#0 /tmp/tmp_vm9tu59.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp_vm9tu59.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    if ($length <= 1) {\n        return $string;\n    }\n    $longest_palindrome_suffix\
    \ = '';\n    for ($i = 0; $i < $length; $i++) {\n        $substring = substr($string,\
    \ $i);\n        if (is_palindrome($substring)) {\n            $longest_palindrome_suffix\
    \ = $substring;\n            break;\n        }\n    }\n    $prefix = substr($string,\
    \ 0, $length - strlen($longest_palindrome_suffix));\n    return $string . strrev($prefix);\n\
    }\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmphlt8t1ij.php:20\nStack trace:\n#0 /tmp/tmphlt8t1ij.php(30): make_palindrome()\n\
    #1 /tmp/tmphlt8t1ij.php(36): candidate()\n#2 /tmp/tmphlt8t1ij.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmphlt8t1ij.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $len = strlen($string);\n\
    \    $i = 0;\n    $j = $len - 1;\n    while ($i < $j) {\n        if ($string[$i]\
    \ != $string[$j]) {\n            break;\n        }\n        $i++;\n        $j--;\n\
    \    }\n    if ($i >= $j) {\n        return $string;\n    }\n    $prefix = substr($string,\
    \ 0, $i);\n    $suffix = substr($string, $i);\n    return $prefix . make_palindrome(strrev($suffix))\
    \ . $suffix;\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_suffix = '';\n    for ($i = $string_length - 1; $i >= 0; $i--)\
    \ {\n        if (is_palindrome($string . $palindrome_suffix)) {\n            return\
    \ $string . $palindrome_suffix;\n        }\n        $palindrome_suffix = $string[$i]\
    \ . $palindrome_suffix;\n    }\n    return $string . $palindrome_suffix;\n}\n\n\
    function candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpt64sryn_.php:16\nStack trace:\n#0 /tmp/tmpt64sryn_.php(25): make_palindrome()\n\
    #1 /tmp/tmpt64sryn_.php(30): candidate()\n#2 /tmp/tmpt64sryn_.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpt64sryn_.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $length; $i++) {\n       \
    \ if ($string[$i] == $string[$length - $i - 1]) {\n            $palindrome_length++;\n\
    \        } else {\n            break;\n        }\n    }\n    return $string .\
    \ strrev(substr($string, 0, $length - $palindrome_length));\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpymd9d8mc.php:32\n\
    Stack trace:\n#0 /tmp/tmpymd9d8mc.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpymd9d8mc.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $suffix = '';\n    for ($i = $length - 1; $i >= 0; $i--) {\n        $suffix\
    \ = $string[$i] . $suffix;\n        if (is_palindrome($suffix)) {\n          \
    \  break;\n        }\n    }\n    return $string . strrev(substr($string, 0, $length\
    \ - strlen($suffix)));\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmp3x5w8p2j.php:17\nStack trace:\n#0 /tmp/tmp3x5w8p2j.php(25): make_palindrome()\n\
    #1 /tmp/tmp3x5w8p2j.php(30): candidate()\n#2 /tmp/tmp3x5w8p2j.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3x5w8p2j.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $longest_palindrome_suffix_length = 0;\n    for ($i = $string_length - 1;\
    \ $i >= 0; $i--) {\n        $suffix = substr($string, $i);\n        if (is_palindrome($suffix))\
    \ {\n            $longest_palindrome_suffix_length = strlen($suffix);\n      \
    \      break;\n        }\n    }\n    $prefix = substr($string, 0, $string_length\
    \ - $longest_palindrome_suffix_length);\n    $prefix_reversed = strrev($prefix);\n\
    \    return $string . $prefix_reversed;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmp7phahynl.php:17\nStack trace:\n#0 /tmp/tmp7phahynl.php(28): make_palindrome()\n\
    #1 /tmp/tmp7phahynl.php(33): candidate()\n#2 /tmp/tmp7phahynl.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmp7phahynl.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    if ($length == 0) {\n        return '';\n    }\n    $suffix = '';\n    for\
    \ ($i = $length - 1; $i >= 0; $i--) {\n        $suffix = $string[$i] . $suffix;\n\
    \        if (is_palindrome($suffix)) {\n            break;\n        }\n    }\n\
    \    return $string . strrev(substr($string, 0, $length - strlen($suffix)));\n\
    }\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpoe0p36ni.php:20\nStack trace:\n#0 /tmp/tmpoe0p36ni.php(28): make_palindrome()\n\
    #1 /tmp/tmpoe0p36ni.php(33): candidate()\n#2 /tmp/tmpoe0p36ni.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpoe0p36ni.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $suffix = '';\n    for ($i = $length - 1; $i >= 0; $i--) {\n        $suffix\
    \ = $string[$i] . $suffix;\n        if (is_palindrome($suffix)) {\n          \
    \  break;\n        }\n    }\n    return $string . strrev(substr($string, 0, $length\
    \ - strlen($suffix)));\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpt8pwmj6t.php:17\nStack trace:\n#0 /tmp/tmpt8pwmj6t.php(25): make_palindrome()\n\
    #1 /tmp/tmpt8pwmj6t.php(30): candidate()\n#2 /tmp/tmpt8pwmj6t.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpt8pwmj6t.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    if ($length <= 1) {\n        return $string;\n    }\n    $suffix = '';\n\
    \    for ($i = $length - 1; $i >= 0; $i--) {\n        $suffix = $string[$i] .\
    \ $suffix;\n        if (is_palindrome($suffix)) {\n            break;\n      \
    \  }\n    }\n    return $string . strrev(substr($string, 0, $length - strlen($suffix)));\n\
    }\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpmxdwc0en.php:20\nStack trace:\n#0 /tmp/tmpmxdwc0en.php(28): make_palindrome()\n\
    #1 /tmp/tmpmxdwc0en.php(34): candidate()\n#2 /tmp/tmpmxdwc0en.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpmxdwc0en.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    $palindrome_position = 0;\n    for ($i = 0;\
    \ $i < $string_length; $i++) {\n        $palindrome_length = max($palindrome_length,\
    \ find_palindrome_length($string, $i));\n        if ($palindrome_length == $string_length\
    \ - $i) {\n            $palindrome_position = $i;\n            break;\n      \
    \  }\n    }\n    return substr($string, 0, $palindrome_position) . strrev(substr($string,\
    \ $palindrome_position + $palindrome_length));\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function find_palindrome_length()\
    \ in /tmp/tmpcfngpnv5.php:17\nStack trace:\n#0 /tmp/tmpcfngpnv5.php(27): make_palindrome()\n\
    #1 /tmp/tmpcfngpnv5.php(32): candidate()\n#2 /tmp/tmpcfngpnv5.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpcfngpnv5.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n  $string_length = strlen($string);\n\
    \  $palindrome_suffix = '';\n  for ($i = $string_length - 1; $i >= 0; $i--) {\n\
    \    if (is_palindrome(substr($string, $i))) {\n      $palindrome_suffix = substr($string,\
    \ $i);\n      break;\n    }\n  }\n  return $string . strrev(substr($string, 0,\
    \ $string_length - strlen($palindrome_suffix)));\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpvrjc873s.php:16\nStack trace:\n#0 /tmp/tmpvrjc873s.php(25): make_palindrome()\n\
    #1 /tmp/tmpvrjc873s.php(30): candidate()\n#2 /tmp/tmpvrjc873s.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpvrjc873s.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $palindrome_length = 0;\n    $palindrome_start = 0;\n    for ($i = 0; $i\
    \ < $length; $i++) {\n        $palindrome_length = max($palindrome_length, longest_palindrome_at($string,\
    \ $i));\n        if ($palindrome_length == $length - $i) {\n            $palindrome_start\
    \ = $i;\n            break;\n        }\n    }\n    $prefix = substr($string, 0,\
    \ $palindrome_start);\n    $prefix = strrev($prefix);\n    return $string . $prefix;\n\
    }\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function longest_palindrome_at()\
    \ in /tmp/tmpfd3bbetl.php:17\nStack trace:\n#0 /tmp/tmpfd3bbetl.php(29): make_palindrome()\n\
    #1 /tmp/tmpfd3bbetl.php(34): candidate()\n#2 /tmp/tmpfd3bbetl.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpfd3bbetl.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $palindrome_suffix = find_palindrome_suffix($string);\n\
    \    $prefix = substr($string, 0, strlen($string) - strlen($palindrome_suffix));\n\
    \    return $string . strrev($prefix);\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function find_palindrome_suffix()\
    \ in /tmp/tmpkiwkanqw.php:13\nStack trace:\n#0 /tmp/tmpkiwkanqw.php(19): make_palindrome()\n\
    #1 /tmp/tmpkiwkanqw.php(23): candidate()\n#2 /tmp/tmpkiwkanqw.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmpkiwkanqw.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $longest_palindrome_length = 0;\n    $longest_palindrome_start = 0;\n   \
    \ for ($i = 0; $i < $string_length; $i++) {\n        $palindrome_length = 0;\n\
    \        $palindrome_start = $i;\n        while ($palindrome_start >= 0 && $string[$palindrome_start]\
    \ == $string[$i]) {\n            $palindrome_length++;\n            $palindrome_start--;\n\
    \        }\n        if ($palindrome_length > $longest_palindrome_length) {\n \
    \           $longest_palindrome_length = $palindrome_length;\n            $longest_palindrome_start\
    \ = $palindrome_start + 1;\n        }\n    }\n    $prefix = substr($string, 0,\
    \ $longest_palindrome_start);\n    $suffix = substr($string, $longest_palindrome_start,\
    \ $longest_palindrome_length);\n    return $string . strrev($prefix);\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfmb_k20f.php:40\n\
    Stack trace:\n#0 /tmp/tmpfmb_k20f.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfmb_k20f.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $len = strlen($string);\n\
    \    $i = $len - 1;\n    $j = 0;\n    $k = 0;\n    $l = 0;\n    while ($i > $j)\
    \ {\n        if ($string[$i] == $string[$j]) {\n            if ($i - $j < 2 ||\
    \ $string[$i - 1] == $string[$j + 1]) {\n                $k = $i;\n          \
    \      $l = $j;\n            }\n        }\n        $i--;\n        $j++;\n    }\n\
    \    $suffix = substr($string, $k + 1);\n    $prefix = strrev(substr($string,\
    \ 0, $l));\n    return $string . $prefix . $suffix;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdvve_zc3.php:40\n\
    Stack trace:\n#0 /tmp/tmpdvve_zc3.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdvve_zc3.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $string_length; $i++) {\n\
    \        $substring = substr($string, $i);\n        $substring_length = strlen($substring);\n\
    \        $palindrome_length = $substring_length;\n        for ($j = 0; $j < $substring_length;\
    \ $j++) {\n            if ($substring[$j] != $substring[$substring_length - $j\
    \ - 1]) {\n                $palindrome_length = $j;\n                break;\n\
    \            }\n        }\n        if ($palindrome_length > 0) {\n           \
    \ break;\n        }\n    }\n    $prefix = substr($string, 0, $string_length -\
    \ $palindrome_length);\n    $prefix_reversed = strrev($prefix);\n    return $string\
    \ . $prefix_reversed;\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $length; $i++) {\n       \
    \ $palindrome_length = max($palindrome_length, longest_palindrome_at($string,\
    \ $i));\n    }\n    $prefix = substr($string, 0, $length - $palindrome_length);\n\
    \    return $string . strrev($prefix);\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function longest_palindrome_at()\
    \ in /tmp/tmp50xwpk9g.php:16\nStack trace:\n#0 /tmp/tmp50xwpk9g.php(23): make_palindrome()\n\
    #1 /tmp/tmp50xwpk9g.php(28): candidate()\n#2 /tmp/tmp50xwpk9g.php(34): test()\n\
    #3 {main}\n  thrown in /tmp/tmp50xwpk9g.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $len = strlen($string);\n\
    \    if ($len < 2) {\n        return $string;\n    }\n    $longest_palindrome_suffix\
    \ = '';\n    for ($i = 0; $i < $len; $i++) {\n        $suffix = substr($string,\
    \ $len - $i);\n        $prefix = substr($string, 0, $i);\n        if ($suffix\
    \ == strrev($suffix) && strlen($suffix) > strlen($longest_palindrome_suffix))\
    \ {\n            $longest_palindrome_suffix = $suffix;\n        }\n    }\n   \
    \ return $string . strrev(substr($string, 0, $len - strlen($longest_palindrome_suffix)));\n\
    }\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6xg_97e6.php:36\n\
    Stack trace:\n#0 /tmp/tmp6xg_97e6.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp6xg_97e6.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n  if ($string == '') {\n    return\
    \ '';\n  }\n  $length = strlen($string);\n  $i = $length - 1;\n  while ($i >=\
    \ 0) {\n    if ($string[$i] == $string[$length - 1]) {\n      $i--;\n      $length--;\n\
    \    } else {\n      break;\n    }\n  }\n  $prefix = substr($string, 0, $i + 1);\n\
    \  $suffix = substr($string, $i + 1);\n  return $string . strrev($prefix);\n}\n\
    \nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5xiclzzh.php:38\n\
    Stack trace:\n#0 /tmp/tmp5xiclzzh.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp5xiclzzh.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = $string_length - 1; $i >= 0; $i--)\
    \ {\n        if (is_palindrome(substr($string, $i))) {\n            $palindrome_length\
    \ = $string_length - $i;\n            break;\n        }\n    }\n    $prefix =\
    \ substr($string, 0, $string_length - $palindrome_length);\n    return $string\
    \ . strrev($prefix);\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpb9k1vgwf.php:16\nStack trace:\n#0 /tmp/tmpb9k1vgwf.php(26): make_palindrome()\n\
    #1 /tmp/tmpb9k1vgwf.php(31): candidate()\n#2 /tmp/tmpb9k1vgwf.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpb9k1vgwf.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_length = $string_length;\n    while ($palindrome_length > 0)\
    \ {\n        $palindrome_length--;\n        $palindrome_start = $string_length\
    \ - $palindrome_length;\n        $palindrome = substr($string, $palindrome_start,\
    \ $palindrome_length);\n        if (is_palindrome($palindrome)) {\n          \
    \  $prefix = substr($string, 0, $palindrome_start);\n            return $string\
    \ . strrev($prefix);\n        }\n    }\n    return $string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpu5af0gm6.php:19\nStack trace:\n#0 /tmp/tmpu5af0gm6.php(28): make_palindrome()\n\
    #1 /tmp/tmpu5af0gm6.php(33): candidate()\n#2 /tmp/tmpu5af0gm6.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpu5af0gm6.php on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $len = strlen($string);\n\
    \    if ($len <= 1) {\n        return $string;\n    }\n    $i = $len - 1;\n  \
    \  while ($i > 0) {\n        if (substr($string, 0, $i) == strrev(substr($string,\
    \ $len - $i))) {\n            break;\n        }\n        $i--;\n    }\n    return\
    \ $string . strrev(substr($string, 0, $i));\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1nn_gelf.php:34\n\
    Stack trace:\n#0 /tmp/tmp1nn_gelf.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp1nn_gelf.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_suffix = '';\n    for ($i = $string_length - 1; $i >= 0; $i--)\
    \ {\n        if (is_palindrome($string . $palindrome_suffix)) {\n            return\
    \ $string . $palindrome_suffix;\n        }\n        $palindrome_suffix .= $string[$i];\n\
    \    }\n    return $string . $palindrome_suffix;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpbg4akwyr.php:16\nStack trace:\n#0 /tmp/tmpbg4akwyr.php(25): make_palindrome()\n\
    #1 /tmp/tmpbg4akwyr.php(30): candidate()\n#2 /tmp/tmpbg4akwyr.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpbg4akwyr.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    if ($length == 0) {\n        return '';\n    }\n    $longest_palindrome_suffix\
    \ = '';\n    for ($i = $length; $i > 0; $i--) {\n        $suffix = substr($string,\
    \ $length - $i);\n        if (is_palindrome($suffix)) {\n            $longest_palindrome_suffix\
    \ = $suffix;\n            break;\n        }\n    }\n    $prefix = substr($string,\
    \ 0, $length - strlen($longest_palindrome_suffix));\n    return $string . strrev($prefix);\n\
    }\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpj3_b4_5k.php:20\nStack trace:\n#0 /tmp/tmpj3_b4_5k.php(30): make_palindrome()\n\
    #1 /tmp/tmpj3_b4_5k.php(35): candidate()\n#2 /tmp/tmpj3_b4_5k.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpj3_b4_5k.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = $string_length - 1; $i >= 0; $i--)\
    \ {\n        if (is_palindrome(substr($string, $i))) {\n            $palindrome_length\
    \ = $string_length - $i;\n            break;\n        }\n    }\n    $prefix =\
    \ substr($string, 0, $string_length - $palindrome_length);\n    return $string\
    \ . strrev($prefix);\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpc2cxu9gv.php:16\nStack trace:\n#0 /tmp/tmpc2cxu9gv.php(26): make_palindrome()\n\
    #1 /tmp/tmpc2cxu9gv.php(31): candidate()\n#2 /tmp/tmpc2cxu9gv.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpc2cxu9gv.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $i = 0;\n    $j = $length - 1;\n    while ($i < $j) {\n        if ($string[$i]\
    \ != $string[$j]) {\n            break;\n        }\n        $i++;\n        $j--;\n\
    \    }\n    if ($i >= $j) {\n        return $string;\n    }\n    $prefix = substr($string,\
    \ 0, $i);\n    $suffix = substr($string, $i);\n    return $prefix . make_palindrome($suffix)\
    \ . strrev($prefix);\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $longest_palindrome_length = 0;\n    $longest_palindrome_start = 0;\n   \
    \ for ($i = 0; $i < $string_length; $i++) {\n        $palindrome_length = 0;\n\
    \        $palindrome_start = $i;\n        $palindrome_end = $i;\n        while\
    \ ($palindrome_start >= 0 && $palindrome_end < $string_length && $string[$palindrome_start]\
    \ == $string[$palindrome_end]) {\n            $palindrome_length += 2;\n     \
    \       $palindrome_start--;\n            $palindrome_end++;\n        }\n    \
    \    if ($palindrome_length > $longest_palindrome_length) {\n            $longest_palindrome_length\
    \ = $palindrome_length;\n            $longest_palindrome_start = $palindrome_start\
    \ + 1;\n        }\n        $palindrome_length = 1;\n        $palindrome_start\
    \ = $i - 1;\n        $palindrome_end = $i + 1;\n        while ($palindrome_start\
    \ >= 0 && $palindrome_end < $string_length && $string[$palindrome_start] == $string[$palindrome_end])\
    \ {\n            $palindrome_length += 2;\n            $palindrome_start--;\n\
    \            $palindrome_end++;\n        }\n        if ($palindrome_length > $longest_palindrome_length)\
    \ {\n            $longest_palindrome_length = $palindrome_length;\n          \
    \  $longest_palindrome_start = $palindrome_start + 1;\n        }\n    }\n    $prefix\
    \ = substr($string, 0, $longest_palindrome_start);\n    $prefix_length = strlen($prefix);\n\
    \    $prefix_reversed = '';\n    for ($i = $prefix_length - 1; $i >= 0; $i--)\
    \ {\n        $prefix_reversed .= $prefix[$i];\n    }\n    return\nfunction candidate(...$args)\
    \ {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"candidate\", expecting\
    \ \"(\" in /tmp/tmpqfu6swev.php on line 49\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n  $length = strlen($string);\n\
    \  if ($length <= 1) {\n    return $string;\n  }\n  $suffix = '';\n  for ($i =\
    \ $length - 1; $i >= 0; $i--) {\n    if (is_palindrome($string . $suffix)) {\n\
    \      return $string . $suffix . substr($string, 0, $i);\n    }\n    $suffix\
    \ = $string[$i] . $suffix;\n  }\n  return $string . $suffix;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmp1ri0et_2.php:19\nStack trace:\n#0 /tmp/tmp1ri0et_2.php(28): make_palindrome()\n\
    #1 /tmp/tmp1ri0et_2.php(34): candidate()\n#2 /tmp/tmp1ri0et_2.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmp1ri0et_2.php on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    if ($length == 0) {\n        return '';\n    }\n    $suffix = '';\n    for\
    \ ($i = $length - 1; $i >= 0; $i--) {\n        $suffix = $string[$i] . $suffix;\n\
    \        if (is_palindrome($suffix)) {\n            break;\n        }\n    }\n\
    \    return $string . substr($suffix, 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpr3qj3ntw.php:20\nStack trace:\n#0 /tmp/tmpr3qj3ntw.php(28): make_palindrome()\n\
    #1 /tmp/tmpr3qj3ntw.php(33): candidate()\n#2 /tmp/tmpr3qj3ntw.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpr3qj3ntw.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $i = 0;\n    $j = $length - 1;\n    while ($i < $j) {\n        if ($string[$i]\
    \ != $string[$j]) {\n            break;\n        }\n        $i++;\n        $j--;\n\
    \    }\n    if ($i >= $j) {\n        return $string;\n    }\n    $prefix = substr($string,\
    \ 0, $i);\n    $suffix = substr($string, $i);\n    return $suffix . make_palindrome($prefix)\
    \ . strrev($prefix);\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzn0gvlx_.php:38\n\
    Stack trace:\n#0 /tmp/tmpzn0gvlx_.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpzn0gvlx_.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $palindrome = $string;\n    for ($i = $length - 1; $i >= 0; $i--) {\n   \
    \     if (is_palindrome(substr($string, $i))) {\n            $palindrome .= strrev(substr($string,\
    \ 0, $i));\n            break;\n        }\n    }\n    return $palindrome;\n}\n\
    \nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpvwa1lr5y.php:16\nStack trace:\n#0 /tmp/tmpvwa1lr5y.php(25): make_palindrome()\n\
    #1 /tmp/tmpvwa1lr5y.php(30): candidate()\n#2 /tmp/tmpvwa1lr5y.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpvwa1lr5y.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $palindrome = $string;\n    $i = 0;\n    $j = $length - 1;\n    while ($i\
    \ < $j) {\n        if ($string[$i] == $string[$j]) {\n            $i++;\n    \
    \        $j--;\n        } else {\n            $i = 0;\n            $j--;\n   \
    \     }\n    }\n    $palindrome .= strrev(substr($string, 0, $j + 1));\n    return\
    \ $palindrome;\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfjemw7iv.php:36\n\
    Stack trace:\n#0 /tmp/tmpfjemw7iv.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpfjemw7iv.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $suffix = '';\n    for ($i = $length - 1; $i >= 0; $i--) {\n        $suffix\
    \ = $string[$i] . $suffix;\n        if (is_palindrome($suffix)) {\n          \
    \  break;\n        }\n    }\n    return $string . strrev(substr($string, 0, $length\
    \ - strlen($suffix)));\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpf3mhheb9.php:17\nStack trace:\n#0 /tmp/tmpf3mhheb9.php(25): make_palindrome()\n\
    #1 /tmp/tmpf3mhheb9.php(30): candidate()\n#2 /tmp/tmpf3mhheb9.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpf3mhheb9.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $len = strlen($string);\n\
    \    $longest_palindrome_suffix = '';\n    for ($i = 0; $i < $len; $i++) {\n \
    \       $suffix = substr($string, $i);\n        $prefix = substr($string, 0, $len\
    \ - $i);\n        if ($suffix == strrev($suffix) && strlen($suffix) > strlen($longest_palindrome_suffix))\
    \ {\n            $longest_palindrome_suffix = $suffix;\n        }\n    }\n   \
    \ return $string . strrev(substr($string, 0, $len - strlen($longest_palindrome_suffix)));\n\
    }\n\necho make_palindrome('') . \"\\n\";\necho make_palindrome('cat') . \"\\n\"\
    ;\necho make_palindrome('cata') . \"\\n\";\nfunction candidate(...$args) {\n \
    \   return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\ncatac\ncatac\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $suffix = '';\n    for ($i = $length - 1; $i >= 0; $i--) {\n        $suffix\
    \ = $string[$i] . $suffix;\n        if (is_palindrome($suffix)) {\n          \
    \  break;\n        }\n    }\n    return $string . strrev(substr($string, 0, $length\
    \ - strlen($suffix)));\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpn6l7346r.php:17\nStack trace:\n#0 /tmp/tmpn6l7346r.php(25): make_palindrome()\n\
    #1 /tmp/tmpn6l7346r.php(30): candidate()\n#2 /tmp/tmpn6l7346r.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpn6l7346r.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n  $length = strlen($string);\n\
    \  $palindrome = '';\n  for ($i = $length - 1; $i >= 0; $i--) {\n    $substring\
    \ = substr($string, $i);\n    if (is_palindrome($substring)) {\n      $palindrome\
    \ = $substring;\n      break;\n    }\n  }\n  return $string . strrev(substr($string,\
    \ 0, $length - strlen($palindrome)));\n}\n\nfunction candidate(...$args) {\n \
    \   return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmp5trcevsj.php:17\nStack trace:\n#0 /tmp/tmp5trcevsj.php(26): make_palindrome()\n\
    #1 /tmp/tmp5trcevsj.php(31): candidate()\n#2 /tmp/tmp5trcevsj.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmp5trcevsj.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $palindrome_suffix = find_longest_palindrome_suffix($string);\n\
    \    $prefix = substr($string, 0, strlen($string) - strlen($palindrome_suffix));\n\
    \    return $string . strrev($prefix);\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function find_longest_palindrome_suffix()\
    \ in /tmp/tmp8zxh7ykz.php:13\nStack trace:\n#0 /tmp/tmp8zxh7ykz.php(19): make_palindrome()\n\
    #1 /tmp/tmp8zxh7ykz.php(23): candidate()\n#2 /tmp/tmp8zxh7ykz.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmp8zxh7ykz.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    if ($string_length < 2) {\n        return $string;\n    }\n    $palindrome_length\
    \ = 0;\n    for ($i = $string_length - 1; $i >= 0; $i--) {\n        if ($string[$i]\
    \ == $string[0]) {\n            $palindrome_length++;\n        } else {\n    \
    \        $palindrome_length = 0;\n        }\n        if ($palindrome_length >\
    \ 1) {\n            break;\n        }\n    }\n    if ($palindrome_length > 1)\
    \ {\n        return $string . strrev(substr($string, 0, $string_length - $palindrome_length));\n\
    \    } else {\n        return $string . strrev(substr($string, 0, $string_length\
    \ - 1));\n    }\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptad2qemu.php:43\n\
    Stack trace:\n#0 /tmp/tmptad2qemu.php(47): test()\n#1 {main}\n  thrown in /tmp/tmptad2qemu.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $palindrome_length = 0;\n    $palindrome_index = 0;\n    for ($i = 0; $i\
    \ < $length; $i++) {\n        $palindrome_length = max($palindrome_length, get_palindrome_length($string,\
    \ $i));\n        if ($palindrome_length == $length - $i) {\n            $palindrome_index\
    \ = $i;\n            break;\n        }\n    }\n    $prefix = substr($string, 0,\
    \ $palindrome_index);\n    $prefix = strrev($prefix);\n    return $string . $prefix;\n\
    }\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function get_palindrome_length()\
    \ in /tmp/tmpkmvfhyjg.php:17\nStack trace:\n#0 /tmp/tmpkmvfhyjg.php(29): make_palindrome()\n\
    #1 /tmp/tmpkmvfhyjg.php(34): candidate()\n#2 /tmp/tmpkmvfhyjg.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpkmvfhyjg.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $palindrome_suffix = longest_palindrome_suffix($string);\n\
    \    $prefix = substr($string, 0, strlen($string) - strlen($palindrome_suffix));\n\
    \    return $string . strrev($prefix);\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function longest_palindrome_suffix()\
    \ in /tmp/tmptoinivud.php:13\nStack trace:\n#0 /tmp/tmptoinivud.php(19): make_palindrome()\n\
    #1 /tmp/tmptoinivud.php(23): candidate()\n#2 /tmp/tmptoinivud.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmptoinivud.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n  $length = strlen($string);\n\
    \  $palindrome_length = 0;\n  $palindrome_start = 0;\n  for ($i = 0; $i < $length;\
    \ $i++) {\n    $palindrome_length = max($palindrome_length, palindrome_length($string,\
    \ $i));\n    if ($palindrome_length == $length - $i) {\n      $palindrome_start\
    \ = $i;\n      break;\n    }\n  }\n  $prefix = substr($string, 0, $palindrome_start);\n\
    \  $prefix = strrev($prefix);\n  return $string . $prefix;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function palindrome_length()\
    \ in /tmp/tmp4zvbkk4k.php:17\nStack trace:\n#0 /tmp/tmp4zvbkk4k.php(29): make_palindrome()\n\
    #1 /tmp/tmp4zvbkk4k.php(34): candidate()\n#2 /tmp/tmp4zvbkk4k.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4zvbkk4k.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $length; $i++) {\n       \
    \ $substring = substr($string, $i);\n        $reverse = strrev($substring);\n\
    \        if ($substring == $reverse) {\n            $palindrome_length = $length\
    \ - $i;\n            break;\n        }\n    }\n    $prefix = substr($string, 0,\
    \ $length - $palindrome_length);\n    $reverse_prefix = strrev($prefix);\n   \
    \ return $string . $reverse_prefix;\n}\n\nfunction candidate(...$args) {\n   \
    \ return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = $string_length - 1; $i >= 0; $i--)\
    \ {\n        if (is_palindrome(substr($string, $i))) {\n            $palindrome_length\
    \ = $string_length - $i;\n            break;\n        }\n    }\n    return $string\
    \ . strrev(substr($string, 0, $string_length - $palindrome_length));\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpgqm2p4ln.php:16\nStack trace:\n#0 /tmp/tmpgqm2p4ln.php(25): make_palindrome()\n\
    #1 /tmp/tmpgqm2p4ln.php(30): candidate()\n#2 /tmp/tmpgqm2p4ln.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpgqm2p4ln.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $len = strlen($string);\n\
    \    $i = $len - 1;\n    while ($i >= 0) {\n        if (is_palindrome(substr($string,\
    \ $i))) {\n            break;\n        }\n        $i--;\n    }\n    $prefix =\
    \ substr($string, 0, $i);\n    $suffix = substr($string, $i);\n    return $suffix\
    \ . strrev($prefix);\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmplca32wqf.php:16\nStack trace:\n#0 /tmp/tmplca32wqf.php(27): make_palindrome()\n\
    #1 /tmp/tmplca32wqf.php(32): candidate()\n#2 /tmp/tmplca32wqf.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmplca32wqf.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $i = $length;\n    while ($i > 0) {\n        $prefix = substr($string, 0,\
    \ $i);\n        $suffix = substr($string, $length - $i);\n        if ($prefix\
    \ == strrev($suffix)) {\n            return $string . strrev(substr($string, 0,\
    \ $length - $i));\n        }\n        $i--;\n    }\n    return $string . strrev($string);\n\
    }\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0td9dh2w.php:33\n\
    Stack trace:\n#0 /tmp/tmp0td9dh2w.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp0td9dh2w.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    $palindrome_start = 0;\n    for ($i = 0; $i\
    \ < $string_length; $i++) {\n        $palindrome_length = max($palindrome_length,\
    \ longest_palindrome_length($string, $i, $i));\n        $palindrome_length = max($palindrome_length,\
    \ longest_palindrome_length($string, $i, $i + 1));\n    }\n    $palindrome_start\
    \ = $string_length - $palindrome_length;\n    $palindrome_prefix = substr($string,\
    \ 0, $palindrome_start);\n    $palindrome_prefix = strrev($palindrome_prefix);\n\
    \    return $string . $palindrome_prefix;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function longest_palindrome_length()\
    \ in /tmp/tmp2iei7ihn.php:17\nStack trace:\n#0 /tmp/tmp2iei7ihn.php(27): make_palindrome()\n\
    #1 /tmp/tmp2iei7ihn.php(32): candidate()\n#2 /tmp/tmp2iei7ihn.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp2iei7ihn.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $i = $length;\n    while ($i > 0) {\n        if (is_palindrome(substr($string,\
    \ 0, $i))) {\n            return $string . strrev(substr($string, $i));\n    \
    \    }\n        $i--;\n    }\n    return $string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpjgt4yj2l.php:16\nStack trace:\n#0 /tmp/tmpjgt4yj2l.php(25): make_palindrome()\n\
    #1 /tmp/tmpjgt4yj2l.php(30): candidate()\n#2 /tmp/tmpjgt4yj2l.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpjgt4yj2l.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    if ($length == 0) {\n        return '';\n    }\n    $longest_palindrome_suffix\
    \ = '';\n    for ($i = $length; $i > 0; $i--) {\n        $suffix = substr($string,\
    \ $length - $i);\n        if (is_palindrome($suffix)) {\n            $longest_palindrome_suffix\
    \ = $suffix;\n            break;\n        }\n    }\n    $prefix = substr($string,\
    \ 0, $length - strlen($longest_palindrome_suffix));\n    return $string . strrev($prefix);\n\
    }\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmp35enp3r0.php:20\nStack trace:\n#0 /tmp/tmp35enp3r0.php(30): make_palindrome()\n\
    #1 /tmp/tmp35enp3r0.php(35): candidate()\n#2 /tmp/tmp35enp3r0.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmp35enp3r0.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $len = strlen($string);\n\
    \    $i = $len - 1;\n    $j = 0;\n    $k = 0;\n    $l = 0;\n    while ($i > $j)\
    \ {\n        if ($string[$i] == $string[$j]) {\n            if ($i - $j < 2 ||\
    \ $string[$i - 1] == $string[$j + 1]) {\n                $k = $i;\n          \
    \      $l = $j;\n            }\n        }\n        $i--;\n        $j++;\n    }\n\
    \    while ($l >= 0) {\n        $string .= $string[$l];\n        $l--;\n    }\n\
    \    return $string;\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Uninitialized string offset 0 in /tmp/tmpk7jde1lq.php on\
    \ line 29\nPHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpk7jde1lq.php:41\n\
    Stack trace:\n#0 /tmp/tmpk7jde1lq.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpk7jde1lq.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    if ($length == 0) {\n        return '';\n    }\n    $longest_palindrome_suffix\
    \ = '';\n    for ($i = 0; $i < $length; $i++) {\n        $suffix = substr($string,\
    \ $length - $i);\n        $prefix = substr($string, 0, $i);\n        if ($suffix\
    \ == strrev($suffix) && strlen($suffix) > strlen($longest_palindrome_suffix))\
    \ {\n            $longest_palindrome_suffix = $suffix;\n        }\n    }\n   \
    \ $prefix = substr($string, 0, $length - strlen($longest_palindrome_suffix));\n\
    \    return $string . strrev($prefix);\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp113xheqe.php:35\n\
    Stack trace:\n#0 /tmp/tmp113xheqe.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp113xheqe.php\
    \ on line 35\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $suffix = '';\n    for ($i = $length - 1; $i >= 0; $i--) {\n        $suffix\
    \ = $string[$i] . $suffix;\n        if (is_palindrome($suffix)) {\n          \
    \  break;\n        }\n    }\n    return $string . strrev(substr($string, 0, $length\
    \ - strlen($suffix)));\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmptwmwwahh.php:17\nStack trace:\n#0 /tmp/tmptwmwwahh.php(25): make_palindrome()\n\
    #1 /tmp/tmptwmwwahh.php(30): candidate()\n#2 /tmp/tmptwmwwahh.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmptwmwwahh.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $string_length; $i++) {\n\
    \        if ($string[$i] == $string[$string_length - $i - 1]) {\n            $palindrome_length++;\n\
    \        } else {\n            break;\n        }\n    }\n    return $string .\
    \ strrev(substr($string, 0, $string_length - $palindrome_length));\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpw6kit0n3.php:32\n\
    Stack trace:\n#0 /tmp/tmpw6kit0n3.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpw6kit0n3.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $longest_palindrome_length = 0;\n    $longest_palindrome_position = 0;\n\
    \    for ($i = 0; $i < $string_length; $i++) {\n        $palindrome_length = 0;\n\
    \        $palindrome_position = $i;\n        for ($j = $i; $j < $string_length;\
    \ $j++) {\n            if ($string[$i] == $string[$j]) {\n                $palindrome_length++;\n\
    \                $palindrome_position = $j;\n            } else {\n          \
    \      break;\n            }\n        }\n        if ($palindrome_length > $longest_palindrome_length)\
    \ {\n            $longest_palindrome_length = $palindrome_length;\n          \
    \  $longest_palindrome_position = $palindrome_position;\n        }\n    }\n  \
    \  $prefix = substr($string, 0, $longest_palindrome_position + 1);\n    $suffix\
    \ = strrev($prefix);\n    return $string . $suffix;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7tzn8hyw.php:43\n\
    Stack trace:\n#0 /tmp/tmp7tzn8hyw.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp7tzn8hyw.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_suffix = '';\n    $palindrome_suffix_length = 0;\n    for ($i\
    \ = 0; $i < $string_length; $i++) {\n        $suffix = substr($string, $i);\n\
    \        $suffix_length = strlen($suffix);\n        if ($suffix_length > $palindrome_suffix_length\
    \ && is_palindrome($suffix)) {\n            $palindrome_suffix = $suffix;\n  \
    \          $palindrome_suffix_length = $suffix_length;\n        }\n    }\n   \
    \ $palindrome_prefix = substr($string, 0, $string_length - $palindrome_suffix_length);\n\
    \    $palindrome_prefix_reversed = strrev($palindrome_prefix);\n    return $string\
    \ . $palindrome_prefix_reversed;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmp_c44w0z_.php:19\nStack trace:\n#0 /tmp/tmp_c44w0z_.php(30): make_palindrome()\n\
    #1 /tmp/tmp_c44w0z_.php(35): candidate()\n#2 /tmp/tmp_c44w0z_.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmp_c44w0z_.php on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    $palindrome_start = 0;\n    for ($i = 0; $i\
    \ < $string_length; $i++) {\n        $palindrome_length = max($palindrome_length,\
    \ get_palindrome_length($string, $i, $i));\n        $palindrome_length = max($palindrome_length,\
    \ get_palindrome_length($string, $i, $i + 1));\n        if ($palindrome_length\
    \ >= $string_length - $i) {\n            break;\n        }\n    }\n    $palindrome_start\
    \ = $string_length - $palindrome_length;\n    $prefix = substr($string, 0, $palindrome_start);\n\
    \    $prefix_reversed = strrev($prefix);\n    return $string . $prefix_reversed;\n\
    }\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function get_palindrome_length()\
    \ in /tmp/tmp0138prvm.php:17\nStack trace:\n#0 /tmp/tmp0138prvm.php(30): make_palindrome()\n\
    #1 /tmp/tmp0138prvm.php(35): candidate()\n#2 /tmp/tmp0138prvm.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmp0138prvm.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n  $string_length = strlen($string);\n\
    \  for ($i = $string_length; $i > 0; $i--) {\n    if (is_palindrome(substr($string,\
    \ 0, $i))) {\n      return $string . strrev(substr($string, 0, $string_length\
    \ - $i));\n    }\n  }\n  return $string;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpna8hpd_k.php:15\nStack trace:\n#0 /tmp/tmpna8hpd_k.php(23): make_palindrome()\n\
    #1 /tmp/tmpna8hpd_k.php(28): candidate()\n#2 /tmp/tmpna8hpd_k.php(34): test()\n\
    #3 {main}\n  thrown in /tmp/tmpna8hpd_k.php on line 15\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $len = strlen($string);\n\
    \    $i = $len - 1;\n    while ($i >= 0) {\n        $prefix = substr($string,\
    \ 0, $i);\n        $suffix = substr($string, $len - $i);\n        if ($prefix\
    \ == strrev($suffix)) {\n            break;\n        }\n        $i--;\n    }\n\
    \    return $string . strrev(substr($string, 0, $i));\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpehygbly_.php:33\n\
    Stack trace:\n#0 /tmp/tmpehygbly_.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpehygbly_.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $len = strlen($string);\n\
    \    $i = $len - 1;\n    while ($i >= 0) {\n        if (is_palindrome(substr($string,\
    \ $i))) {\n            return $string . strrev(substr($string, 0, $i));\n    \
    \    }\n        $i--;\n    }\n    return $string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmp1eq46y5t.php:16\nStack trace:\n#0 /tmp/tmp1eq46y5t.php(25): make_palindrome()\n\
    #1 /tmp/tmp1eq46y5t.php(30): candidate()\n#2 /tmp/tmp1eq46y5t.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp1eq46y5t.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    for ($i = $string_length; $i > 0; $i--) {\n        $suffix = substr($string,\
    \ $string_length - $i);\n        if (is_palindrome($suffix)) {\n            $prefix\
    \ = substr($string, 0, $string_length - $i);\n            return $string . strrev($prefix);\n\
    \        }\n    }\n    return $string;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpi5h28a0h.php:16\nStack trace:\n#0 /tmp/tmpi5h28a0h.php(25): make_palindrome()\n\
    #1 /tmp/tmpi5h28a0h.php(30): candidate()\n#2 /tmp/tmpi5h28a0h.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpi5h28a0h.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $palindrome = $string;\n    for ($i = $length - 1; $i >= 0; $i--) {\n   \
    \     if (is_palindrome(substr($string, $i))) {\n            $palindrome .= strrev(substr($string,\
    \ 0, $i));\n            break;\n        }\n    }\n    return $palindrome;\n}\n\
    \nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmp2untaf73.php:16\nStack trace:\n#0 /tmp/tmp2untaf73.php(25): make_palindrome()\n\
    #1 /tmp/tmp2untaf73.php(30): candidate()\n#2 /tmp/tmp2untaf73.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp2untaf73.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    if ($length <= 1) {\n        return $string;\n    }\n    $i = $length;\n\
    \    while ($i > 0) {\n        $substring = substr($string, 0, $i);\n        if\
    \ (is_palindrome($substring)) {\n            return $string . strrev(substr($string,\
    \ $i));\n        }\n        $i--;\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpbvve4zq9.php:20\nStack trace:\n#0 /tmp/tmpbvve4zq9.php(28): make_palindrome()\n\
    #1 /tmp/tmpbvve4zq9.php(34): candidate()\n#2 /tmp/tmpbvve4zq9.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpbvve4zq9.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $palindrome_suffix = '';\n    for ($i = $length - 1; $i >= 0; $i--) {\n \
    \       if (is_palindrome(substr($string, $i))) {\n            $palindrome_suffix\
    \ = substr($string, $i);\n            break;\n        }\n    }\n    return $string\
    \ . strrev(substr($string, 0, $length - strlen($palindrome_suffix)));\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpj1_lzydc.php:16\nStack trace:\n#0 /tmp/tmpj1_lzydc.php(25): make_palindrome()\n\
    #1 /tmp/tmpj1_lzydc.php(30): candidate()\n#2 /tmp/tmpj1_lzydc.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpj1_lzydc.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = $string_length - 1; $i >= 0; $i--)\
    \ {\n        if (is_palindrome(substr($string, $i))) {\n            $palindrome_length\
    \ = $string_length - $i;\n            break;\n        }\n    }\n    $prefix =\
    \ substr($string, 0, $string_length - $palindrome_length);\n    return $string\
    \ . strrev($prefix);\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmp2nnjd_uj.php:16\nStack trace:\n#0 /tmp/tmp2nnjd_uj.php(26): make_palindrome()\n\
    #1 /tmp/tmp2nnjd_uj.php(31): candidate()\n#2 /tmp/tmp2nnjd_uj.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmp2nnjd_uj.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n  $string_length = strlen($string);\n\
    \  $palindrome_length = 0;\n  for ($i = 0; $i < $string_length; $i++) {\n    if\
    \ ($string[$i] == $string[$string_length - $i - 1]) {\n      $palindrome_length++;\n\
    \    } else {\n      break;\n    }\n  }\n  $prefix = substr($string, 0, $string_length\
    \ - $palindrome_length);\n  $prefix_reversed = strrev($prefix);\n  return $string\
    \ . $prefix_reversed;\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpe_og2kut.php:34\n\
    Stack trace:\n#0 /tmp/tmpe_og2kut.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpe_og2kut.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    // Find the longest palindromic\
    \ suffix.\n    $suffix = '';\n    for ($i = strlen($string) - 1; $i >= 0; $i--)\
    \ {\n        $suffix = $string[$i] . $suffix;\n        if (is_palindrome($suffix))\
    \ {\n            break;\n        }\n    }\n    // Append reverse of the prefix\
    \ to the end of the string.\n    $prefix = substr($string, 0, strlen($string)\
    \ - strlen($suffix));\n    return $string . strrev($prefix);\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmp7q5jekw9.php:17\nStack trace:\n#0 /tmp/tmp7q5jekw9.php(27): make_palindrome()\n\
    #1 /tmp/tmp7q5jekw9.php(32): candidate()\n#2 /tmp/tmp7q5jekw9.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp7q5jekw9.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $string_length; $i++) {\n\
    \        $substring = substr($string, $i);\n        $substring_length = strlen($substring);\n\
    \        $is_palindrome = true;\n        for ($j = 0; $j < $substring_length /\
    \ 2; $j++) {\n            if ($substring[$j] != $substring[$substring_length -\
    \ $j - 1]) {\n                $is_palindrome = false;\n                break;\n\
    \            }\n        }\n        if ($is_palindrome) {\n            $palindrome_length\
    \ = $substring_length;\n        }\n    }\n    $prefix = substr($string, 0, $string_length\
    \ - $palindrome_length);\n    $prefix_reversed = strrev($prefix);\n    return\
    \ $string . $prefix_reversed;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgtbh9xvx.php:42\n\
    Stack trace:\n#0 /tmp/tmpgtbh9xvx.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpgtbh9xvx.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $string_length; $i++) {\n\
    \        if ($string[$i] == $string[$string_length - $i - 1]) {\n            $palindrome_length++;\n\
    \        } else {\n            break;\n        }\n    }\n    $palindrome_prefix\
    \ = substr($string, 0, $palindrome_length);\n    $palindrome_suffix = strrev($palindrome_prefix);\n\
    \    return $string . $palindrome_suffix;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpc2fhco9n.php:33\n\
    Stack trace:\n#0 /tmp/tmpc2fhco9n.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpc2fhco9n.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    if (strlen($string) == 0)\
    \ {\n        return '';\n    }\n    $longest_palindrome_suffix = '';\n    for\
    \ ($i = 0; $i < strlen($string); $i++) {\n        if (is_palindrome($string, $i))\
    \ {\n            $longest_palindrome_suffix = substr($string, $i);\n        }\n\
    \    }\n    return $string . strrev(substr($string, 0, strlen($string) - strlen($longest_palindrome_suffix)));\n\
    }\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpqs0z6cfh.php:18\nStack trace:\n#0 /tmp/tmpqs0z6cfh.php(26): make_palindrome()\n\
    #1 /tmp/tmpqs0z6cfh.php(31): candidate()\n#2 /tmp/tmpqs0z6cfh.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpqs0z6cfh.php on line 18\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $len = strlen($string);\n\
    \    if ($len <= 1) {\n        return $string;\n    }\n    $suffix = '';\n   \
    \ for ($i = $len - 1; $i >= 0; $i--) {\n        $suffix = $string[$i] . $suffix;\n\
    \        if (is_palindrome($suffix)) {\n            break;\n        }\n    }\n\
    \    return $string . strrev(substr($string, 0, $len - strlen($suffix)));\n}\n\
    \nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmp_jwetopm.php:20\nStack trace:\n#0 /tmp/tmp_jwetopm.php(28): make_palindrome()\n\
    #1 /tmp/tmp_jwetopm.php(34): candidate()\n#2 /tmp/tmp_jwetopm.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmp_jwetopm.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    if ($length <= 1) {\n        return $string;\n    }\n    $palindrome_suffix\
    \ = '';\n    for ($i = 0; $i < $length; $i++) {\n        $suffix = substr($string,\
    \ $length - $i);\n        $prefix = substr($string, 0, $i);\n        if ($suffix\
    \ == strrev($prefix)) {\n            $palindrome_suffix = $suffix;\n         \
    \   break;\n        }\n    }\n    return $string . strrev(substr($string, 0, $length\
    \ - strlen($palindrome_suffix)));\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9901787a.php:36\n\
    Stack trace:\n#0 /tmp/tmp9901787a.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp9901787a.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    $palindrome_index = 0;\n    for ($i = 0; $i\
    \ < $string_length; $i++) {\n        $palindrome_length = max($palindrome_length,\
    \ get_palindrome_length($string, $i, $i));\n        $palindrome_length = max($palindrome_length,\
    \ get_palindrome_length($string, $i, $i + 1));\n        if ($palindrome_length\
    \ == $string_length - $i) {\n            $palindrome_index = $i;\n           \
    \ break;\n        }\n    }\n    $prefix = substr($string, 0, $palindrome_index);\n\
    \    $suffix = substr($string, $palindrome_index + $palindrome_length);\n    return\
    \ $string . strrev($prefix) . $suffix;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function get_palindrome_length()\
    \ in /tmp/tmpkpqndyum.php:17\nStack trace:\n#0 /tmp/tmpkpqndyum.php(30): make_palindrome()\n\
    #1 /tmp/tmpkpqndyum.php(35): candidate()\n#2 /tmp/tmpkpqndyum.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpkpqndyum.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    for ($i = $length; $i > 0; $i--) {\n        $suffix = substr($string, $length\
    \ - $i);\n        if (is_palindrome($suffix)) {\n            $prefix = substr($string,\
    \ 0, $length - $i);\n            return $string . strrev($prefix);\n        }\n\
    \    }\n    return $string;\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmp9acowwkh.php:16\nStack trace:\n#0 /tmp/tmp9acowwkh.php(25): make_palindrome()\n\
    #1 /tmp/tmp9acowwkh.php(30): candidate()\n#2 /tmp/tmp9acowwkh.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9acowwkh.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $reverse = strrev($string);\n\
    \    $longest_palindrome = '';\n    $length = strlen($string);\n    for ($i =\
    \ 0; $i < $length; $i++) {\n        $substring = substr($string, $i);\n      \
    \  if (strpos($reverse, $substring) === 0) {\n            $longest_palindrome\
    \ = $substring;\n        }\n    }\n    return $string . strrev(substr($string,\
    \ 0, strlen($string) - strlen($longest_palindrome)));\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2b4lnrnr.php:33\n\
    Stack trace:\n#0 /tmp/tmp2b4lnrnr.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp2b4lnrnr.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_suffix = '';\n    for ($i = $string_length - 1; $i >= 0; $i--)\
    \ {\n        $palindrome_suffix .= $string[$i];\n        if (is_palindrome($palindrome_suffix))\
    \ {\n            break;\n        }\n    }\n    $palindrome_prefix = strrev(substr($string,\
    \ 0, $i));\n    return $string . $palindrome_prefix;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpwng0ora6.php:17\nStack trace:\n#0 /tmp/tmpwng0ora6.php(26): make_palindrome()\n\
    #1 /tmp/tmpwng0ora6.php(31): candidate()\n#2 /tmp/tmpwng0ora6.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpwng0ora6.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $palindrome_suffix = find_longest_palindrome_suffix($string);\n\
    \    $prefix = substr($string, 0, strlen($string) - strlen($palindrome_suffix));\n\
    \    return $string . strrev($prefix);\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function find_longest_palindrome_suffix()\
    \ in /tmp/tmp1t30wtn9.php:13\nStack trace:\n#0 /tmp/tmp1t30wtn9.php(19): make_palindrome()\n\
    #1 /tmp/tmp1t30wtn9.php(23): candidate()\n#2 /tmp/tmp1t30wtn9.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmp1t30wtn9.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $length; $i++) {\n       \
    \ if ($string[$i] == $string[$length - $i - 1]) {\n            $palindrome_length++;\n\
    \        } else {\n            break;\n        }\n    }\n    $prefix = substr($string,\
    \ 0, $length - $palindrome_length);\n    $prefix_reversed = strrev($prefix);\n\
    \    return $string . $prefix_reversed;\n}\n\necho make_palindrome('') . \"\\\
    n\";\necho make_palindrome('cat') . \"\\n\";\necho make_palindrome('cata') . \"\
    \\n\";\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\ncattac\ncataatac\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp277ok15x.php:37\n\
    Stack trace:\n#0 /tmp/tmp277ok15x.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp277ok15x.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $length; $i++) {\n       \
    \ if ($string[$i] == $string[$length - $i - 1]) {\n            $palindrome_length++;\n\
    \        } else {\n            break;\n        }\n    }\n    $prefix = substr($string,\
    \ 0, $length - $palindrome_length);\n    $prefix_reversed = strrev($prefix);\n\
    \    return $string . $prefix_reversed;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1lrpwdjg.php:34\n\
    Stack trace:\n#0 /tmp/tmp1lrpwdjg.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp1lrpwdjg.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $length; $i++) {\n       \
    \ if ($string[$i] == $string[$length - $i - 1]) {\n            $palindrome_length++;\n\
    \        } else {\n            break;\n        }\n    }\n    return $string .\
    \ strrev(substr($string, 0, $length - $palindrome_length));\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpr5955s2_.php:32\n\
    Stack trace:\n#0 /tmp/tmpr5955s2_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpr5955s2_.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $string_length; $i++) {\n\
    \        $substring = substr($string, 0, $string_length - $i);\n        if (is_palindrome($substring))\
    \ {\n            $palindrome_length = strlen($substring);\n            break;\n\
    \        }\n    }\n    $prefix = substr($string, 0, $string_length - $palindrome_length);\n\
    \    $prefix_reversed = strrev($prefix);\n    return $string . $prefix_reversed;\n\
    }\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmppv3w7sye.php:17\nStack trace:\n#0 /tmp/tmppv3w7sye.php(28): make_palindrome()\n\
    #1 /tmp/tmppv3w7sye.php(33): candidate()\n#2 /tmp/tmppv3w7sye.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmppv3w7sye.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $length; $i++) {\n       \
    \ if ($string[$i] == $string[$length - $i - 1]) {\n            $palindrome_length++;\n\
    \        } else {\n            break;\n        }\n    }\n    $prefix = substr($string,\
    \ 0, $length - $palindrome_length);\n    $prefix_reversed = strrev($prefix);\n\
    \    return $string . $prefix_reversed;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzderllym.php:34\n\
    Stack trace:\n#0 /tmp/tmpzderllym.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpzderllym.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $string_length; $i++) {\n\
    \        $substring = substr($string, $i);\n        $substring_length = strlen($substring);\n\
    \        if ($substring_length <= $palindrome_length) {\n            break;\n\
    \        }\n        $substring_reversed = strrev($substring);\n        if ($substring\
    \ === $substring_reversed) {\n            $palindrome_length = $substring_length;\n\
    \        }\n    }\n    $prefix = substr($string, 0, $string_length - $palindrome_length);\n\
    \    $prefix_reversed = strrev($prefix);\n    return $string . $prefix_reversed;\n\
    }\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $len = strlen($string);\n\
    \    $i = 0;\n    $j = $len - 1;\n    $k = 0;\n    while ($i < $j) {\n       \
    \ if ($string[$i] == $string[$j]) {\n            $i++;\n            $j--;\n  \
    \      } else {\n            $i = 0;\n            $k++;\n            $j = $len\
    \ - 1 - $k;\n        }\n    }\n    return $string . strrev(substr($string, 0,\
    \ $k));\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $palindrome_suffix = find_longest_palindrome_suffix($string);\n\
    \    $prefix = substr($string, 0, strlen($string) - strlen($palindrome_suffix));\n\
    \    return $string . strrev($prefix);\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function find_longest_palindrome_suffix()\
    \ in /tmp/tmpxyryy7gu.php:13\nStack trace:\n#0 /tmp/tmpxyryy7gu.php(19): make_palindrome()\n\
    #1 /tmp/tmpxyryy7gu.php(23): candidate()\n#2 /tmp/tmpxyryy7gu.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmpxyryy7gu.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    if (strlen($string) == 0)\
    \ {\n        return $string;\n    }\n    $longest_palindrome_suffix = find_longest_palindrome_suffix($string);\n\
    \    $prefix = substr($string, 0, strlen($string) - strlen($longest_palindrome_suffix));\n\
    \    return $string . strrev($prefix);\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function find_longest_palindrome_suffix()\
    \ in /tmp/tmpdthkmq8b.php:16\nStack trace:\n#0 /tmp/tmpdthkmq8b.php(22): make_palindrome()\n\
    #1 /tmp/tmpdthkmq8b.php(27): candidate()\n#2 /tmp/tmpdthkmq8b.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmpdthkmq8b.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n  $length = strlen($string);\n\
    \  if ($length <= 1) {\n    return $string;\n  }\n  $longest_palindrome_suffix\
    \ = '';\n  for ($i = 0; $i < $length; $i++) {\n    $suffix = substr($string, $length\
    \ - $i);\n    $prefix = substr($string, 0, $i);\n    if ($suffix == strrev($suffix)\
    \ && strlen($suffix) > strlen($longest_palindrome_suffix)) {\n      $longest_palindrome_suffix\
    \ = $suffix;\n    }\n  }\n  return $string . strrev(substr($string, 0, $length\
    \ - strlen($longest_palindrome_suffix)));\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbj81y3mt.php:36\n\
    Stack trace:\n#0 /tmp/tmpbj81y3mt.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpbj81y3mt.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = $length - 1; $i >= 0; $i--) {\n  \
    \      if ($string[$i] == $string[$length - 1 - $i]) {\n            $palindrome_length++;\n\
    \        } else {\n            break;\n        }\n    }\n    $prefix = substr($string,\
    \ 0, $length - $palindrome_length);\n    $prefix_reversed = strrev($prefix);\n\
    \    return $string . $prefix_reversed;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyqtz2flu.php:34\n\
    Stack trace:\n#0 /tmp/tmpyqtz2flu.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpyqtz2flu.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $palindrome_suffix = '';\n    for ($i = $length - 1; $i >= 0; $i--) {\n \
    \       $palindrome_suffix .= $string[$i];\n        if (is_palindrome($palindrome_suffix))\
    \ {\n            break;\n        }\n    }\n    return $string . strrev(substr($string,\
    \ 0, $length - strlen($palindrome_suffix)));\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpyco42csg.php:17\nStack trace:\n#0 /tmp/tmpyco42csg.php(25): make_palindrome()\n\
    #1 /tmp/tmpyco42csg.php(30): candidate()\n#2 /tmp/tmpyco42csg.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpyco42csg.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $longest_palindrome_suffix = '';\n    for ($i = 0; $i < $length; $i++) {\n\
    \        $substring = substr($string, $i);\n        if (is_palindrome($substring))\
    \ {\n            $longest_palindrome_suffix = $substring;\n        }\n    }\n\
    \    $prefix = substr($string, 0, $length - strlen($longest_palindrome_suffix));\n\
    \    return $string . strrev($prefix);\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpe5060o9n.php:17\nStack trace:\n#0 /tmp/tmpe5060o9n.php(26): make_palindrome()\n\
    #1 /tmp/tmpe5060o9n.php(31): candidate()\n#2 /tmp/tmpe5060o9n.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpe5060o9n.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $length; $i++) {\n       \
    \ $substring = substr($string, $i);\n        $reversed_substring = strrev($substring);\n\
    \        if ($substring == $reversed_substring) {\n            $palindrome_length\
    \ = $length - $i;\n            break;\n        }\n    }\n    $prefix = substr($string,\
    \ 0, $length - $palindrome_length);\n    $reversed_prefix = strrev($prefix);\n\
    \    return $string . $reversed_prefix;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $palindrome_suffix = find_palindrome_suffix($string);\n\
    \    $prefix = substr($string, 0, strlen($string) - strlen($palindrome_suffix));\n\
    \    return $string . strrev($prefix);\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function find_palindrome_suffix()\
    \ in /tmp/tmplailkskk.php:13\nStack trace:\n#0 /tmp/tmplailkskk.php(19): make_palindrome()\n\
    #1 /tmp/tmplailkskk.php(23): candidate()\n#2 /tmp/tmplailkskk.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmplailkskk.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $i = $length;\n    while ($i > 0) {\n        $substring = substr($string,\
    \ 0, $i);\n        if (is_palindrome($substring)) {\n            $prefix = substr($string,\
    \ $i);\n            $prefix = strrev($prefix);\n            return $string . $prefix;\n\
    \        }\n        $i--;\n    }\n    return $string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpupnx08zj.php:17\nStack trace:\n#0 /tmp/tmpupnx08zj.php(28): make_palindrome()\n\
    #1 /tmp/tmpupnx08zj.php(33): candidate()\n#2 /tmp/tmpupnx08zj.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpupnx08zj.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $length; $i++) {\n       \
    \ if ($string[$i] == $string[$length - $i - 1]) {\n            $palindrome_length++;\n\
    \        } else {\n            break;\n        }\n    }\n    $prefix = substr($string,\
    \ 0, $length - $palindrome_length);\n    $prefix_reversed = strrev($prefix);\n\
    \    return $string . $prefix_reversed;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_i2_mz1x.php:34\n\
    Stack trace:\n#0 /tmp/tmp_i2_mz1x.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp_i2_mz1x.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $len = strlen($string);\n\
    \    $i = $len - 1;\n    while ($i >= 0) {\n        if (is_palindrome(substr($string,\
    \ $i))) {\n            return $string . strrev(substr($string, 0, $i));\n    \
    \    }\n        $i--;\n    }\n    return $string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpdqrhd_21.php:16\nStack trace:\n#0 /tmp/tmpdqrhd_21.php(25): make_palindrome()\n\
    #1 /tmp/tmpdqrhd_21.php(30): candidate()\n#2 /tmp/tmpdqrhd_21.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpdqrhd_21.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $palindrome_suffix = find_longest_palindrome_suffix($string);\n\
    \    $prefix = substr($string, 0, strlen($string) - strlen($palindrome_suffix));\n\
    \    return $string . strrev($prefix);\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function find_longest_palindrome_suffix()\
    \ in /tmp/tmpopq1f6g1.php:13\nStack trace:\n#0 /tmp/tmpopq1f6g1.php(19): make_palindrome()\n\
    #1 /tmp/tmpopq1f6g1.php(23): candidate()\n#2 /tmp/tmpopq1f6g1.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmpopq1f6g1.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $length; $i++) {\n       \
    \ if ($string[$i] == $string[$length - $i - 1]) {\n            $palindrome_length++;\n\
    \        } else {\n            break;\n        }\n    }\n    return $string .\
    \ strrev(substr($string, 0, $length - $palindrome_length));\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpj8j5qhmd.php:32\n\
    Stack trace:\n#0 /tmp/tmpj8j5qhmd.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpj8j5qhmd.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    if ($length <= 1) {\n        return $string;\n    }\n    $palindrome_suffix\
    \ = '';\n    for ($i = $length; $i > 0; $i--) {\n        $suffix = substr($string,\
    \ $length - $i);\n        if (is_palindrome($suffix)) {\n            $palindrome_suffix\
    \ = $suffix;\n            break;\n        }\n    }\n    $prefix = substr($string,\
    \ 0, $length - strlen($palindrome_suffix));\n    return $string . strrev($prefix);\n\
    }\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmp59h5o5zi.php:20\nStack trace:\n#0 /tmp/tmp59h5o5zi.php(30): make_palindrome()\n\
    #1 /tmp/tmp59h5o5zi.php(36): candidate()\n#2 /tmp/tmp59h5o5zi.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmp59h5o5zi.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = $string_length - 1; $i >= 0; $i--)\
    \ {\n        if (is_palindrome($string, $i)) {\n            $palindrome_length\
    \ = $i + 1;\n            break;\n        }\n    }\n    $prefix = substr($string,\
    \ 0, $string_length - $palindrome_length);\n    $prefix_reversed = strrev($prefix);\n\
    \    return $string . $prefix_reversed;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpxo4qua33.php:16\nStack trace:\n#0 /tmp/tmpxo4qua33.php(27): make_palindrome()\n\
    #1 /tmp/tmpxo4qua33.php(32): candidate()\n#2 /tmp/tmpxo4qua33.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpxo4qua33.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    $palindrome_index = 0;\n    for ($i = 0; $i\
    \ < $string_length; $i++) {\n        $palindrome_length = max($palindrome_length,\
    \ longest_palindrome_length($string, $i));\n        if ($palindrome_length ==\
    \ $string_length - $i) {\n            $palindrome_index = $i;\n            break;\n\
    \        }\n    }\n    $prefix = substr($string, 0, $palindrome_index);\n    $prefix_reversed\
    \ = strrev($prefix);\n    return $string . $prefix_reversed;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function longest_palindrome_length()\
    \ in /tmp/tmpbketlrds.php:17\nStack trace:\n#0 /tmp/tmpbketlrds.php(29): make_palindrome()\n\
    #1 /tmp/tmpbketlrds.php(34): candidate()\n#2 /tmp/tmpbketlrds.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpbketlrds.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n  $string_length = strlen($string);\n\
    \  $palindrome_suffix = '';\n  for ($i = $string_length - 1; $i >= 0; $i--) {\n\
    \    $palindrome_suffix .= $string[$i];\n    if (is_palindrome($palindrome_suffix))\
    \ {\n      break;\n    }\n  }\n  $palindrome_prefix = substr($string, 0, $string_length\
    \ - strlen($palindrome_suffix));\n  return $string . strrev($palindrome_prefix);\n\
    }\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpfl91jcra.php:17\nStack trace:\n#0 /tmp/tmpfl91jcra.php(26): make_palindrome()\n\
    #1 /tmp/tmpfl91jcra.php(31): candidate()\n#2 /tmp/tmpfl91jcra.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpfl91jcra.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $len = strlen($string);\n\
    \    $i = $len - 1;\n    while ($i >= 0) {\n        if (is_palindrome(substr($string,\
    \ $i))) {\n            break;\n        }\n        $i--;\n    }\n    $prefix =\
    \ substr($string, 0, $i);\n    $prefix = strrev($prefix);\n    return $string\
    \ . $prefix;\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpfue26rr_.php:16\nStack trace:\n#0 /tmp/tmpfue26rr_.php(27): make_palindrome()\n\
    #1 /tmp/tmpfue26rr_.php(32): candidate()\n#2 /tmp/tmpfue26rr_.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpfue26rr_.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $palindrome_suffix = find_palindrome_suffix($string);\n\
    \    $palindrome_prefix = strrev(substr($string, 0, strlen($string) - strlen($palindrome_suffix)));\n\
    \    return $string . $palindrome_prefix;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function find_palindrome_suffix()\
    \ in /tmp/tmpz14m5mmw.php:13\nStack trace:\n#0 /tmp/tmpz14m5mmw.php(19): make_palindrome()\n\
    #1 /tmp/tmpz14m5mmw.php(23): candidate()\n#2 /tmp/tmpz14m5mmw.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmpz14m5mmw.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $length; $i++) {\n       \
    \ if ($string[$i] === $string[$length - 1 - $i]) {\n            $palindrome_length++;\n\
    \        } else {\n            break;\n        }\n    }\n    $prefix = substr($string,\
    \ 0, $length - $palindrome_length);\n    $prefix_reversed = strrev($prefix);\n\
    \    return $string . $prefix_reversed;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjnwgls9p.php:34\n\
    Stack trace:\n#0 /tmp/tmpjnwgls9p.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpjnwgls9p.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n  $len = strlen($string);\n \
    \ if ($len == 0) {\n    return '';\n  }\n  $i = $len - 1;\n  while ($i >= 0) {\n\
    \    if (is_palindrome(substr($string, $i))) {\n      return $string . strrev(substr($string,\
    \ 0, $i));\n    }\n    $i--;\n  }\n  return $string . strrev($string);\n}\n\n\
    function candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmph_747lbv.php:19\nStack trace:\n#0 /tmp/tmph_747lbv.php(28): make_palindrome()\n\
    #1 /tmp/tmph_747lbv.php(33): candidate()\n#2 /tmp/tmph_747lbv.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmph_747lbv.php on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n  $string_length = strlen($string);\n\
    \  $palindrome_suffix = '';\n  for ($i = 0; $i < $string_length; $i++) {\n   \
    \ $palindrome_suffix = $string[$i] . $palindrome_suffix;\n    if (is_palindrome($palindrome_suffix))\
    \ {\n      break;\n    }\n  }\n  return $string . strrev(substr($string, 0, $string_length\
    \ - strlen($palindrome_suffix)));\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmp1ro5zqgl.php:17\nStack trace:\n#0 /tmp/tmp1ro5zqgl.php(25): make_palindrome()\n\
    #1 /tmp/tmp1ro5zqgl.php(30): candidate()\n#2 /tmp/tmp1ro5zqgl.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp1ro5zqgl.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n  $length = strlen($string);\n\
    \  $palindrome_suffix = '';\n  for ($i = 0; $i < $length; $i++) {\n    $substring\
    \ = substr($string, $i);\n    if (is_palindrome($substring)) {\n      $palindrome_suffix\
    \ = $substring;\n      break;\n    }\n  }\n  return $string . strrev(substr($string,\
    \ 0, $length - strlen($palindrome_suffix)));\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpf1v1_3ml.php:17\nStack trace:\n#0 /tmp/tmpf1v1_3ml.php(26): make_palindrome()\n\
    #1 /tmp/tmpf1v1_3ml.php(31): candidate()\n#2 /tmp/tmpf1v1_3ml.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpf1v1_3ml.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n  $n = strlen($string);\n  $i\
    \ = $n - 1;\n  while ($i >= 0) {\n    if (is_palindrome(substr($string, $i)))\
    \ {\n      break;\n    }\n    $i--;\n  }\n  return $string . strrev(substr($string,\
    \ 0, $i));\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmp4c0zd677.php:16\nStack trace:\n#0 /tmp/tmp4c0zd677.php(25): make_palindrome()\n\
    #1 /tmp/tmp4c0zd677.php(30): candidate()\n#2 /tmp/tmp4c0zd677.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4c0zd677.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    if (strlen($string) <= 1)\
    \ {\n        return $string;\n    }\n    $longest_palindrome = '';\n    for ($i\
    \ = 0; $i < strlen($string); $i++) {\n        $palindrome = $string[$i];\n   \
    \     for ($j = 1; $i - $j >= 0 && $i + $j < strlen($string); $j++) {\n      \
    \      if ($string[$i - $j] == $string[$i + $j]) {\n                $palindrome\
    \ = $string[$i - $j] . $palindrome . $string[$i + $j];\n            } else {\n\
    \                break;\n            }\n        }\n        if (strlen($palindrome)\
    \ > strlen($longest_palindrome)) {\n            $longest_palindrome = $palindrome;\n\
    \        }\n    }\n    if (strlen($longest_palindrome) == strlen($string)) {\n\
    \        return $string;\n    }\n    $prefix = substr($string, 0, strlen($string)\
    \ - strlen($longest_palindrome));\n    return $string . strrev($prefix);\n}\n\n\
    function candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $palindrome_suffix = '';\n    for ($i = $length - 1; $i >= 0; $i--) {\n \
    \       $substring = substr($string, $i);\n        if (is_palindrome($substring))\
    \ {\n            $palindrome_suffix = $substring;\n            break;\n      \
    \  }\n    }\n    $palindrome_prefix = strrev(substr($string, 0, $length - strlen($palindrome_suffix)));\n\
    \    return $string . $palindrome_prefix;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpkdsuom3g.php:17\nStack trace:\n#0 /tmp/tmpkdsuom3g.php(27): make_palindrome()\n\
    #1 /tmp/tmpkdsuom3g.php(32): candidate()\n#2 /tmp/tmpkdsuom3g.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpkdsuom3g.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $palindrome_suffix = find_longest_palindrome_suffix($string);\n\
    \    $palindrome_prefix = substr($string, 0, strlen($string) - strlen($palindrome_suffix));\n\
    \    return $string . strrev($palindrome_prefix);\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function find_longest_palindrome_suffix()\
    \ in /tmp/tmpkinhbnxq.php:13\nStack trace:\n#0 /tmp/tmpkinhbnxq.php(19): make_palindrome()\n\
    #1 /tmp/tmpkinhbnxq.php(23): candidate()\n#2 /tmp/tmpkinhbnxq.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmpkinhbnxq.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $string_length; $i++) {\n\
    \        $substring = substr($string, $i);\n        $substring_length = strlen($substring);\n\
    \        if ($substring_length <= $palindrome_length) {\n            break;\n\
    \        }\n        if (is_palindrome($substring)) {\n            $palindrome_length\
    \ = $substring_length;\n        }\n    }\n    $prefix = substr($string, 0, $string_length\
    \ - $palindrome_length);\n    $prefix_reversed = strrev($prefix);\n    return\
    \ $string . $prefix_reversed;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpbaitzdjm.php:21\nStack trace:\n#0 /tmp/tmpbaitzdjm.php(31): make_palindrome()\n\
    #1 /tmp/tmpbaitzdjm.php(36): candidate()\n#2 /tmp/tmpbaitzdjm.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpbaitzdjm.php on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    if ($length == 0) {\n        return '';\n    }\n    $palindrome_suffix =\
    \ '';\n    for ($i = $length; $i > 0; $i--) {\n        $suffix = substr($string,\
    \ $length - $i);\n        if (is_palindrome($suffix)) {\n            $palindrome_suffix\
    \ = $suffix;\n            break;\n        }\n    }\n    $palindrome_prefix = substr($string,\
    \ 0, $length - strlen($palindrome_suffix));\n    return $string . strrev($palindrome_prefix);\n\
    }\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmps9mcz1la.php:20\nStack trace:\n#0 /tmp/tmps9mcz1la.php(30): make_palindrome()\n\
    #1 /tmp/tmps9mcz1la.php(35): candidate()\n#2 /tmp/tmps9mcz1la.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmps9mcz1la.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $len = strlen($string);\n\
    \    $i = $len - 1;\n    while ($i >= 0) {\n        if (is_palindrome(substr($string,\
    \ $i))) {\n            break;\n        }\n        $i--;\n    }\n    return $string\
    \ . strrev(substr($string, 0, $i));\n}\n\nfunction candidate(...$args) {\n   \
    \ return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmp1uh1ppvc.php:16\nStack trace:\n#0 /tmp/tmp1uh1ppvc.php(25): make_palindrome()\n\
    #1 /tmp/tmp1uh1ppvc.php(30): candidate()\n#2 /tmp/tmp1uh1ppvc.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp1uh1ppvc.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $length; $i++) {\n       \
    \ if ($string[$i] == $string[$length - $i - 1]) {\n            $palindrome_length++;\n\
    \        } else {\n            break;\n        }\n    }\n    $prefix = substr($string,\
    \ 0, $length - $palindrome_length);\n    $prefix_reversed = strrev($prefix);\n\
    \    return $string . $prefix_reversed;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmzob2ck1.php:34\n\
    Stack trace:\n#0 /tmp/tmpmzob2ck1.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpmzob2ck1.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $len = strlen($string);\n\
    \    $i = 0;\n    $j = $len - 1;\n    $k = 0;\n    while ($i < $j) {\n       \
    \ if ($string[$i] == $string[$j]) {\n            $i++;\n            $j--;\n  \
    \      } else {\n            $i = 0;\n            $k++;\n            $j = $len\
    \ - 1 - $k;\n        }\n    }\n    $prefix = substr($string, 0, $len - $k);\n\
    \    return $string . strrev($prefix);\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpri01j36x.php:37\n\
    Stack trace:\n#0 /tmp/tmpri01j36x.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpri01j36x.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $string_length; $i++) {\n\
    \        if (is_palindrome(substr($string, $i))) {\n            $palindrome_length\
    \ = $string_length - $i;\n            break;\n        }\n    }\n    return $string\
    \ . strrev(substr($string, 0, $string_length - $palindrome_length));\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmp5yi0kto7.php:16\nStack trace:\n#0 /tmp/tmp5yi0kto7.php(25): make_palindrome()\n\
    #1 /tmp/tmp5yi0kto7.php(30): candidate()\n#2 /tmp/tmp5yi0kto7.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp5yi0kto7.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $i = 0;\n    $j = $length - 1;\n    while ($i < $j) {\n        if ($string[$i]\
    \ != $string[$j]) {\n            break;\n        }\n        $i++;\n        $j--;\n\
    \    }\n    if ($i >= $j) {\n        return $string;\n    }\n    $prefix = substr($string,\
    \ 0, $i);\n    $suffix = substr($string, $i);\n    return $prefix . make_palindrome($suffix)\
    \ . strrev($prefix);\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $len = strlen($string);\n\
    \    $i = 0;\n    $j = $len - 1;\n    $k = 0;\n    while ($i < $j) {\n       \
    \ if ($string[$i] != $string[$j]) {\n            $k = 0;\n        }\n        if\
    \ ($string[$i] == $string[$j]) {\n            $k = $i;\n        }\n        $i++;\n\
    \        $j--;\n    }\n    $prefix = substr($string, 0, $k + 1);\n    $suffix\
    \ = strrev($prefix);\n    return $string . $suffix;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9t2nwafs.php:38\n\
    Stack trace:\n#0 /tmp/tmp9t2nwafs.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp9t2nwafs.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    for ($i = $length; $i > 0; $i--) {\n        $substring = substr($string,\
    \ 0, $i);\n        if ($substring == strrev($substring)) {\n            return\
    \ $string . strrev(substr($string, 0, $length - $i));\n        }\n    }\n    return\
    \ $string;\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $len = strlen($string);\n\
    \    $i = 0;\n    $j = $len - 1;\n    while ($i < $j) {\n        if ($string[$i]\
    \ != $string[$j]) {\n            break;\n        }\n        $i++;\n        $j--;\n\
    \    }\n    $prefix = substr($string, 0, $i);\n    $suffix = substr($string, $i);\n\
    \    return $string . strrev($prefix);\n}\n\necho make_palindrome('') . \"\\n\"\
    ;\necho make_palindrome('cat') . \"\\n\";\necho make_palindrome('cata') . \"\\\
    n\";\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\ncat\ncata\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptni0n_lk.php:38\n\
    Stack trace:\n#0 /tmp/tmptni0n_lk.php(43): test()\n#1 {main}\n  thrown in /tmp/tmptni0n_lk.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $i = $length;\n    while ($i > 0) {\n        if (is_palindrome(substr($string,\
    \ 0, $i))) {\n            return $string . strrev(substr($string, $i));\n    \
    \    }\n        $i--;\n    }\n    return $string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpq7njt9__.php:16\nStack trace:\n#0 /tmp/tmpq7njt9__.php(25): make_palindrome()\n\
    #1 /tmp/tmpq7njt9__.php(30): candidate()\n#2 /tmp/tmpq7njt9__.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpq7njt9__.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $reverse = strrev($string);\n\
    \    $length = strlen($string);\n    for ($i = 0; $i < $length; $i++) {\n    \
    \    if (substr($string, 0, $length - $i) == substr($reverse, $i)) {\n       \
    \     return $string . substr($reverse, $i);\n        }\n    }\n    return $string;\n\
    }\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2eelpea0.php:29\n\
    Stack trace:\n#0 /tmp/tmp2eelpea0.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2eelpea0.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_len = strlen($string);\n\
    \    $palindrome_len = 0;\n    $palindrome_start = 0;\n    for ($i = 0; $i < $string_len;\
    \ $i++) {\n        $palindrome_len = max($palindrome_len, find_palindrome_len($string,\
    \ $i, $i));\n        $palindrome_len = max($palindrome_len, find_palindrome_len($string,\
    \ $i, $i + 1));\n        if ($palindrome_len == $string_len - $i) {\n        \
    \    $palindrome_start = $i;\n            break;\n        }\n    }\n    return\
    \ substr($string, 0, $palindrome_start) . strrev(substr($string, $palindrome_start\
    \ + $palindrome_len));\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function find_palindrome_len()\
    \ in /tmp/tmpqp9979h4.php:17\nStack trace:\n#0 /tmp/tmpqp9979h4.php(28): make_palindrome()\n\
    #1 /tmp/tmpqp9979h4.php(33): candidate()\n#2 /tmp/tmpqp9979h4.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpqp9979h4.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_suffix = '';\n    for ($i = $string_length - 1; $i >= 0; $i--)\
    \ {\n        $palindrome_suffix .= $string[$i];\n        if (is_palindrome($palindrome_suffix))\
    \ {\n            break;\n        }\n    }\n    $palindrome_prefix = strrev(substr($string,\
    \ 0, $i));\n    return $string . $palindrome_prefix;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpekm_uok7.php:17\nStack trace:\n#0 /tmp/tmpekm_uok7.php(26): make_palindrome()\n\
    #1 /tmp/tmpekm_uok7.php(31): candidate()\n#2 /tmp/tmpekm_uok7.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpekm_uok7.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    for ($i = $string_length; $i > 0; $i--) {\n        $substring = substr($string,\
    \ 0, $i);\n        if (is_palindrome($substring)) {\n            return $string\
    \ . strrev(substr($string, $i));\n        }\n    }\n    return $string;\n}\n\n\
    function candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpzfhgz3gm.php:16\nStack trace:\n#0 /tmp/tmpzfhgz3gm.php(24): make_palindrome()\n\
    #1 /tmp/tmpzfhgz3gm.php(29): candidate()\n#2 /tmp/tmpzfhgz3gm.php(35): test()\n\
    #3 {main}\n  thrown in /tmp/tmpzfhgz3gm.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $string_length; $i++) {\n\
    \        if ($string[$i] == $string[$string_length - $i - 1]) {\n            $palindrome_length++;\n\
    \        } else {\n            break;\n        }\n    }\n    return $string .\
    \ strrev(substr($string, 0, $string_length - $palindrome_length));\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpex6eud3r.php:32\n\
    Stack trace:\n#0 /tmp/tmpex6eud3r.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpex6eud3r.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $i = $length;\n    while ($i > 0) {\n        $substring = substr($string,\
    \ 0, $i);\n        if (is_palindrome($substring)) {\n            $prefix = substr($string,\
    \ $i);\n            return $string . strrev($prefix);\n        }\n        $i--;\n\
    \    }\n    return $string;\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpf4myjrvq.php:17\nStack trace:\n#0 /tmp/tmpf4myjrvq.php(27): make_palindrome()\n\
    #1 /tmp/tmpf4myjrvq.php(32): candidate()\n#2 /tmp/tmpf4myjrvq.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpf4myjrvq.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $len = strlen($string);\n\
    \    $i = 0;\n    while ($i < $len) {\n        if (is_palindrome(substr($string,\
    \ $i))) {\n            break;\n        }\n        $i++;\n    }\n    return $string\
    \ . strrev(substr($string, 0, $i));\n}\n\nfunction candidate(...$args) {\n   \
    \ return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmp0i4fhuit.php:16\nStack trace:\n#0 /tmp/tmp0i4fhuit.php(25): make_palindrome()\n\
    #1 /tmp/tmp0i4fhuit.php(30): candidate()\n#2 /tmp/tmp0i4fhuit.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp0i4fhuit.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $len = strlen($string);\n\
    \    $i = $len - 1;\n    while ($i >= 0) {\n        if (is_palindrome(substr($string,\
    \ $i))) {\n            break;\n        }\n        $i--;\n    }\n    $prefix =\
    \ substr($string, 0, $i);\n    $suffix = substr($string, $i);\n    return $suffix\
    \ . strrev($prefix);\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmp4ucnemzo.php:16\nStack trace:\n#0 /tmp/tmp4ucnemzo.php(27): make_palindrome()\n\
    #1 /tmp/tmp4ucnemzo.php(32): candidate()\n#2 /tmp/tmp4ucnemzo.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4ucnemzo.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $i = $length;\n    while ($i > 0) {\n        $substring = substr($string,\
    \ 0, $i);\n        if (is_palindrome($substring)) {\n            $prefix = substr($string,\
    \ $i);\n            $prefix = strrev($prefix);\n            return $string . $prefix;\n\
    \        }\n        $i--;\n    }\n    return $string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpj3gsyxzm.php:17\nStack trace:\n#0 /tmp/tmpj3gsyxzm.php(28): make_palindrome()\n\
    #1 /tmp/tmpj3gsyxzm.php(33): candidate()\n#2 /tmp/tmpj3gsyxzm.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpj3gsyxzm.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_suffix = '';\n    $palindrome_suffix_length = 0;\n    for ($i\
    \ = $string_length - 1; $i >= 0; $i--) {\n        $palindrome_suffix = $string[$i]\
    \ . $palindrome_suffix;\n        if (is_palindrome($palindrome_suffix)) {\n  \
    \          $palindrome_suffix_length = strlen($palindrome_suffix);\n         \
    \   break;\n        }\n    }\n    $palindrome_prefix = substr($string, 0, $string_length\
    \ - $palindrome_suffix_length);\n    return $string . strrev($palindrome_prefix);\n\
    }\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpuajxhf7w.php:18\nStack trace:\n#0 /tmp/tmpuajxhf7w.php(28): make_palindrome()\n\
    #1 /tmp/tmpuajxhf7w.php(33): candidate()\n#2 /tmp/tmpuajxhf7w.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpuajxhf7w.php on line 18\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $palindrome = $string;\n    for ($i = $length - 1; $i >= 0; $i--) {\n   \
    \     if (is_palindrome(substr($string, $i))) {\n            $palindrome .= strrev(substr($string,\
    \ 0, $i));\n            break;\n        }\n    }\n    return $palindrome;\n}\n\
    \nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpah00qnkx.php:16\nStack trace:\n#0 /tmp/tmpah00qnkx.php(25): make_palindrome()\n\
    #1 /tmp/tmpah00qnkx.php(30): candidate()\n#2 /tmp/tmpah00qnkx.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpah00qnkx.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $palindrome = '';\n    for ($i = $length - 1; $i >= 0; $i--) {\n        $palindrome\
    \ .= $string[$i];\n        if (is_palindrome($string . $palindrome)) {\n     \
    \       return $string . $palindrome;\n        }\n    }\n    return $string .\
    \ $palindrome;\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpsgu9xhwu.php:17\nStack trace:\n#0 /tmp/tmpsgu9xhwu.php(25): make_palindrome()\n\
    #1 /tmp/tmpsgu9xhwu.php(30): candidate()\n#2 /tmp/tmpsgu9xhwu.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpsgu9xhwu.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n  $palindrome_suffix = longest_palindrome_suffix($string);\n\
    \  $prefix = substr($string, 0, strlen($string) - strlen($palindrome_suffix));\n\
    \  return $string . strrev($prefix);\n}\n\nfunction candidate(...$args) {\n  \
    \  return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function longest_palindrome_suffix()\
    \ in /tmp/tmp03u3z8li.php:13\nStack trace:\n#0 /tmp/tmp03u3z8li.php(19): make_palindrome()\n\
    #1 /tmp/tmp03u3z8li.php(23): candidate()\n#2 /tmp/tmp03u3z8li.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmp03u3z8li.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n  $string_length = strlen($string);\n\
    \  for ($i = $string_length; $i > 0; $i--) {\n    $substring = substr($string,\
    \ 0, $i);\n    if (is_palindrome($substring)) {\n      return $string . strrev(substr($string,\
    \ $i));\n    }\n  }\n  return $string;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpbx7b09h2.php:16\nStack trace:\n#0 /tmp/tmpbx7b09h2.php(24): make_palindrome()\n\
    #1 /tmp/tmpbx7b09h2.php(29): candidate()\n#2 /tmp/tmpbx7b09h2.php(35): test()\n\
    #3 {main}\n  thrown in /tmp/tmpbx7b09h2.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n  $length = strlen($string);\n\
    \  $i = $length - 1;\n  while ($i >= 0) {\n    $substring = substr($string, $i);\n\
    \    if (is_palindrome($substring)) {\n      $prefix = substr($string, 0, $i);\n\
    \      $reverse_prefix = strrev($prefix);\n      return $string . $reverse_prefix;\n\
    \    }\n    $i--;\n  }\n  return $string;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpq0y7oebm.php:17\nStack trace:\n#0 /tmp/tmpq0y7oebm.php(28): make_palindrome()\n\
    #1 /tmp/tmpq0y7oebm.php(33): candidate()\n#2 /tmp/tmpq0y7oebm.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpq0y7oebm.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_suffix = '';\n    for ($i = $string_length - 1; $i >= 0; $i--)\
    \ {\n        $palindrome_suffix .= $string[$i];\n        if (is_palindrome($palindrome_suffix))\
    \ {\n            break;\n        }\n    }\n    $palindrome_prefix = substr($string,\
    \ 0, $string_length - strlen($palindrome_suffix));\n    return $string . strrev($palindrome_prefix);\n\
    }\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmp33gdsj_u.php:17\nStack trace:\n#0 /tmp/tmp33gdsj_u.php(26): make_palindrome()\n\
    #1 /tmp/tmp33gdsj_u.php(31): candidate()\n#2 /tmp/tmp33gdsj_u.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmp33gdsj_u.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $max_palindrome_length = 0;\n    for ($i = 0; $i < $length; $i++) {\n   \
    \     $palindrome_length = 0;\n        for ($j = 0; $j <= $i; $j++) {\n      \
    \      if ($string[$i - $j] == $string[$i + $j]) {\n                $palindrome_length\
    \ += 2;\n            } else {\n                break;\n            }\n       \
    \ }\n        if ($palindrome_length > $max_palindrome_length) {\n            $max_palindrome_length\
    \ = $palindrome_length;\n        }\n    }\n    $prefix = substr($string, 0, $length\
    \ - $max_palindrome_length);\n    return $string . strrev($prefix);\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Uninitialized string offset 3 in /tmp/tmpnjx_p42u.php on\
    \ line 18\nPHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnjx_p42u.php:39\n\
    Stack trace:\n#0 /tmp/tmpnjx_p42u.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpnjx_p42u.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n  $length = strlen($string);\n\
    \  if ($length == 0) {\n    return '';\n  }\n  $palindrome_suffix = '';\n  for\
    \ ($i = $length - 1; $i >= 0; $i--) {\n    $suffix = substr($string, $i);\n  \
    \  if (is_palindrome($suffix)) {\n      $palindrome_suffix = $suffix;\n      break;\n\
    \    }\n  }\n  $prefix = substr($string, 0, $length - strlen($palindrome_suffix));\n\
    \  return $string . strrev($prefix);\n}\n\nfunction candidate(...$args) {\n  \
    \  return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmplttlw5d1.php:20\nStack trace:\n#0 /tmp/tmplttlw5d1.php(30): make_palindrome()\n\
    #1 /tmp/tmplttlw5d1.php(35): candidate()\n#2 /tmp/tmplttlw5d1.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmplttlw5d1.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $len = strlen($string);\n\
    \    $i = $len;\n    while ($i > 0) {\n        if (is_palindrome(substr($string,\
    \ 0, $i))) {\n            break;\n        }\n        $i--;\n    }\n    return\
    \ $string . strrev(substr($string, 0, $len - $i));\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmppkus0vnv.php:16\nStack trace:\n#0 /tmp/tmppkus0vnv.php(25): make_palindrome()\n\
    #1 /tmp/tmppkus0vnv.php(30): candidate()\n#2 /tmp/tmppkus0vnv.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmppkus0vnv.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $palindrome_suffix = '';\n    for ($i = $length - 1; $i >= 0; $i--) {\n \
    \       $substring = substr($string, $i);\n        if (is_palindrome($substring))\
    \ {\n            $palindrome_suffix = $substring;\n            break;\n      \
    \  }\n    }\n    $palindrome_prefix = strrev(substr($string, 0, $length - strlen($palindrome_suffix)));\n\
    \    return $string . $palindrome_prefix;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmp5nt8vd0n.php:17\nStack trace:\n#0 /tmp/tmp5nt8vd0n.php(27): make_palindrome()\n\
    #1 /tmp/tmp5nt8vd0n.php(32): candidate()\n#2 /tmp/tmp5nt8vd0n.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp5nt8vd0n.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $longest_palindrome_length = 0;\n    $longest_palindrome_index = 0;\n   \
    \ for ($i = 0; $i < $string_length; $i++) {\n        $palindrome_length = 0;\n\
    \        $palindrome_index = 0;\n        if ($string[$i] == $string[$i + 1]) {\n\
    \            $palindrome_length = 2;\n            $palindrome_index = $i;\n  \
    \          $i++;\n        }\n        if ($string[$i] == $string[$i + 1] && $string[$i]\
    \ == $string[$i + 2]) {\n            $palindrome_length = 3;\n            $palindrome_index\
    \ = $i;\n            $i += 2;\n        }\n        while ($i + $palindrome_length\
    \ < $string_length && $string[$i - $palindrome_length] == $string[$i + $palindrome_length])\
    \ {\n            $palindrome_length++;\n        }\n        if ($palindrome_length\
    \ > $longest_palindrome_length) {\n            $longest_palindrome_length = $palindrome_length;\n\
    \            $longest_palindrome_index = $palindrome_index;\n        }\n    }\n\
    \    $prefix = substr($string, 0, $longest_palindrome_index);\n    $prefix_reversed\
    \ = strrev($prefix);\n    return $string . $prefix_reversed;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Uninitialized string offset 1 in /tmp/tmpvvdnix9k.php on\
    \ line 19\nPHP Warning:  Uninitialized string offset 1 in /tmp/tmpvvdnix9k.php\
    \ on line 24\nPHP Warning:  Uninitialized string offset 3 in /tmp/tmpvvdnix9k.php\
    \ on line 19\nPHP Warning:  Uninitialized string offset 3 in /tmp/tmpvvdnix9k.php\
    \ on line 24\nPHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvvdnix9k.php:49\n\
    Stack trace:\n#0 /tmp/tmpvvdnix9k.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpvvdnix9k.php\
    \ on line 49\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $palindrome_suffix = '';\n    for ($i = $length - 1; $i >= 0; $i--) {\n \
    \       $palindrome_suffix .= $string[$i];\n        if (is_palindrome($palindrome_suffix))\
    \ {\n            break;\n        }\n    }\n    $palindrome_prefix = strrev(substr($string,\
    \ 0, $i));\n    return $string . $palindrome_prefix;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmp_6ok1kv_.php:17\nStack trace:\n#0 /tmp/tmp_6ok1kv_.php(26): make_palindrome()\n\
    #1 /tmp/tmp_6ok1kv_.php(31): candidate()\n#2 /tmp/tmp_6ok1kv_.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmp_6ok1kv_.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $palindrome_suffix = find_palindrome_suffix($string);\n    $palindrome_prefix\
    \ = substr($string, 0, $length - strlen($palindrome_suffix));\n    $palindrome_prefix\
    \ = strrev($palindrome_prefix);\n    return $string . $palindrome_prefix;\n}\n\
    \nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function find_palindrome_suffix()\
    \ in /tmp/tmpxp1grufr.php:14\nStack trace:\n#0 /tmp/tmpxp1grufr.php(21): make_palindrome()\n\
    #1 /tmp/tmpxp1grufr.php(25): candidate()\n#2 /tmp/tmpxp1grufr.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmpxp1grufr.php on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $len = strlen($string);\n\
    \    $i = $len - 1;\n    while ($i >= 0) {\n        if (is_palindrome(substr($string,\
    \ $i))) {\n            break;\n        }\n        $i--;\n    }\n    $prefix =\
    \ substr($string, 0, $i);\n    $prefix = strrev($prefix);\n    return $string\
    \ . $prefix;\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpuffud3oj.php:16\nStack trace:\n#0 /tmp/tmpuffud3oj.php(27): make_palindrome()\n\
    #1 /tmp/tmpuffud3oj.php(32): candidate()\n#2 /tmp/tmpuffud3oj.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpuffud3oj.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_suffix = '';\n    for ($i = $string_length - 1; $i >= 0; $i--)\
    \ {\n        if (is_palindrome($string . $palindrome_suffix)) {\n            return\
    \ $string . $palindrome_suffix;\n        }\n        $palindrome_suffix = $string[$i]\
    \ . $palindrome_suffix;\n    }\n    return $string . $palindrome_suffix;\n}\n\n\
    function candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpsg6_y2o6.php:16\nStack trace:\n#0 /tmp/tmpsg6_y2o6.php(25): make_palindrome()\n\
    #1 /tmp/tmpsg6_y2o6.php(30): candidate()\n#2 /tmp/tmpsg6_y2o6.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpsg6_y2o6.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_suffix = '';\n    for ($i = $string_length - 1; $i >= 0; $i--)\
    \ {\n        $palindrome_suffix .= $string[$i];\n        if (is_palindrome($palindrome_suffix))\
    \ {\n            break;\n        }\n    }\n    $palindrome_prefix = substr($string,\
    \ 0, $string_length - strlen($palindrome_suffix));\n    return $string . strrev($palindrome_prefix);\n\
    }\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpo173qpoz.php:17\nStack trace:\n#0 /tmp/tmpo173qpoz.php(26): make_palindrome()\n\
    #1 /tmp/tmpo173qpoz.php(31): candidate()\n#2 /tmp/tmpo173qpoz.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpo173qpoz.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $longest_palindrome_length = 0;\n    $longest_palindrome_start = 0;\n   \
    \ for ($i = 0; $i < $string_length; $i++) {\n        $palindrome_length = 0;\n\
    \        $palindrome_start = $i;\n        for ($j = 0; $j < $string_length; $j++)\
    \ {\n            if ($string[$i + $j] == $string[$i - $j]) {\n               \
    \ $palindrome_length += 2;\n            } else {\n                break;\n   \
    \         }\n        }\n        if ($palindrome_length > $longest_palindrome_length)\
    \ {\n            $longest_palindrome_length = $palindrome_length;\n          \
    \  $longest_palindrome_start = $palindrome_start;\n        }\n    }\n    $palindrome_prefix\
    \ = substr($string, 0, $longest_palindrome_start - $longest_palindrome_length\
    \ / 2);\n    $palindrome_prefix_reversed = strrev($palindrome_prefix);\n    return\
    \ $string . $palindrome_prefix_reversed;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Warning:  Uninitialized string offset 3 in /tmp/tmp3z350t5y.php on\
    \ line 20\nPHP Warning:  Uninitialized string offset 3 in /tmp/tmp3z350t5y.php\
    \ on line 20\nPHP Warning:  Uninitialized string offset 3 in /tmp/tmp3z350t5y.php\
    \ on line 20\nPHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3z350t5y.php:44\n\
    Stack trace:\n#0 /tmp/tmp3z350t5y.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp3z350t5y.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = $string_length - 1; $i >= 0; $i--)\
    \ {\n        if (is_palindrome(substr($string, $i))) {\n            $palindrome_length\
    \ = $string_length - $i;\n            break;\n        }\n    }\n    $prefix =\
    \ substr($string, 0, $string_length - $palindrome_length);\n    return $string\
    \ . strrev($prefix);\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpgseb1ar3.php:16\nStack trace:\n#0 /tmp/tmpgseb1ar3.php(26): make_palindrome()\n\
    #1 /tmp/tmpgseb1ar3.php(31): candidate()\n#2 /tmp/tmpgseb1ar3.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpgseb1ar3.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $palindrome_suffix = find_palindrome_suffix($string);\n\
    \    $string_prefix = substr($string, 0, strlen($string) - strlen($palindrome_suffix));\n\
    \    return $string . strrev($string_prefix);\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function find_palindrome_suffix()\
    \ in /tmp/tmpk28istdp.php:13\nStack trace:\n#0 /tmp/tmpk28istdp.php(19): make_palindrome()\n\
    #1 /tmp/tmpk28istdp.php(23): candidate()\n#2 /tmp/tmpk28istdp.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmpk28istdp.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $string_length; $i++) {\n\
    \        $substring = substr($string, $i);\n        $substring_length = strlen($substring);\n\
    \        if ($substring_length <= $palindrome_length) {\n            break;\n\
    \        }\n        $substring_reversed = strrev($substring);\n        if ($substring\
    \ === $substring_reversed) {\n            $palindrome_length = $substring_length;\n\
    \        }\n    }\n    $prefix = substr($string, 0, $string_length - $palindrome_length);\n\
    \    $prefix_reversed = strrev($prefix);\n    return $string . $prefix_reversed;\n\
    }\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $i = 0;\n    $j = $length - 1;\n    while ($i < $j) {\n        if ($string[$i]\
    \ != $string[$j]) {\n            break;\n        }\n        $i++;\n        $j--;\n\
    \    }\n    if ($i >= $j) {\n        return $string;\n    }\n    $prefix = substr($string,\
    \ 0, $i);\n    $suffix = substr($string, $i);\n    return $string . strrev($prefix);\n\
    }\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkx0ilwqj.php:38\n\
    Stack trace:\n#0 /tmp/tmpkx0ilwqj.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpkx0ilwqj.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $length; $i++) {\n       \
    \ $palindrome_length = max($palindrome_length, find_palindrome_length($string,\
    \ $i, $i));\n        $palindrome_length = max($palindrome_length, find_palindrome_length($string,\
    \ $i, $i + 1));\n    }\n    $prefix = substr($string, 0, $length - $palindrome_length);\n\
    \    return $string . strrev($prefix);\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function find_palindrome_length()\
    \ in /tmp/tmpaucrr_9h.php:16\nStack trace:\n#0 /tmp/tmpaucrr_9h.php(24): make_palindrome()\n\
    #1 /tmp/tmpaucrr_9h.php(29): candidate()\n#2 /tmp/tmpaucrr_9h.php(35): test()\n\
    #3 {main}\n  thrown in /tmp/tmpaucrr_9h.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $len = strlen($string);\n\
    \    $max_len = 0;\n    $max_pos = 0;\n    for ($i = 0; $i < $len; $i++) {\n \
    \       $len1 = is_palindrome($string, $i, $i);\n        $len2 = is_palindrome($string,\
    \ $i, $i + 1);\n        $len = max($len1, $len2);\n        if ($len > $max_len)\
    \ {\n            $max_len = $len;\n            $max_pos = $i;\n        }\n   \
    \ }\n    $prefix = substr($string, 0, $max_pos - $max_len + 1);\n    $suffix =\
    \ substr($string, $max_pos + $max_len);\n    return $prefix . strrev($prefix)\
    \ . $suffix;\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmphjwaz0wv.php:17\nStack trace:\n#0 /tmp/tmphjwaz0wv.php(31): make_palindrome()\n\
    #1 /tmp/tmphjwaz0wv.php(36): candidate()\n#2 /tmp/tmphjwaz0wv.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmphjwaz0wv.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    if ($string_length <= 1) {\n        return $string;\n    }\n    $palindrome_suffix\
    \ = '';\n    for ($i = $string_length - 1; $i >= 0; $i--) {\n        if (is_palindrome($string\
    \ . $palindrome_suffix)) {\n            return $string . $palindrome_suffix;\n\
    \        }\n        $palindrome_suffix = $string[$i] . $palindrome_suffix;\n \
    \   }\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpmghl6aa6.php:19\nStack trace:\n#0 /tmp/tmpmghl6aa6.php(27): make_palindrome()\n\
    #1 /tmp/tmpmghl6aa6.php(33): candidate()\n#2 /tmp/tmpmghl6aa6.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpmghl6aa6.php on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    for ($i = $length; $i > 0; $i--) {\n        $suffix = substr($string, $length\
    \ - $i);\n        if (is_palindrome($suffix)) {\n            $prefix = substr($string,\
    \ 0, $length - $i);\n            return $string . strrev($prefix);\n        }\n\
    \    }\n    return $string;\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpxk6smpfh.php:16\nStack trace:\n#0 /tmp/tmpxk6smpfh.php(25): make_palindrome()\n\
    #1 /tmp/tmpxk6smpfh.php(30): candidate()\n#2 /tmp/tmpxk6smpfh.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpxk6smpfh.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $longest_palindrome_suffix = '';\n    for ($i = 0; $i < $length; $i++) {\n\
    \        $suffix = substr($string, $i);\n        if (is_palindrome($suffix)) {\n\
    \            $longest_palindrome_suffix = $suffix;\n            break;\n     \
    \   }\n    }\n    $prefix = substr($string, 0, $length - strlen($longest_palindrome_suffix));\n\
    \    return $string . strrev($prefix);\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpnafjljvg.php:17\nStack trace:\n#0 /tmp/tmpnafjljvg.php(27): make_palindrome()\n\
    #1 /tmp/tmpnafjljvg.php(32): candidate()\n#2 /tmp/tmpnafjljvg.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpnafjljvg.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = $string_length - 1; $i >= 0; $i--)\
    \ {\n        if (is_palindrome(substr($string, $i))) {\n            $palindrome_length\
    \ = $string_length - $i;\n            break;\n        }\n    }\n    $prefix =\
    \ substr($string, 0, $string_length - $palindrome_length);\n    return $string\
    \ . strrev($prefix);\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpn5j1hacs.php:16\nStack trace:\n#0 /tmp/tmpn5j1hacs.php(26): make_palindrome()\n\
    #1 /tmp/tmpn5j1hacs.php(31): candidate()\n#2 /tmp/tmpn5j1hacs.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpn5j1hacs.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $suffix = '';\n    for ($i = $length - 1; $i >= 0; $i--) {\n        $suffix\
    \ = $string[$i] . $suffix;\n        if (is_palindrome($suffix)) {\n          \
    \  break;\n        }\n    }\n    return $string . strrev(substr($string, 0, $length\
    \ - strlen($suffix)));\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmp6n_14p50.php:17\nStack trace:\n#0 /tmp/tmp6n_14p50.php(25): make_palindrome()\n\
    #1 /tmp/tmp6n_14p50.php(30): candidate()\n#2 /tmp/tmp6n_14p50.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp6n_14p50.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    if ($length == 0) {\n        return '';\n    }\n    $suffix = '';\n    for\
    \ ($i = $length - 1; $i >= 0; $i--) {\n        $suffix = $string[$i] . $suffix;\n\
    \        if (is_palindrome($suffix)) {\n            break;\n        }\n    }\n\
    \    return $string . substr($suffix, 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpyro6wtxc.php:20\nStack trace:\n#0 /tmp/tmpyro6wtxc.php(28): make_palindrome()\n\
    #1 /tmp/tmpyro6wtxc.php(33): candidate()\n#2 /tmp/tmpyro6wtxc.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpyro6wtxc.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $length; $i++) {\n       \
    \ if ($string[$i] == $string[$length - $i - 1]) {\n            $palindrome_length++;\n\
    \        } else {\n            break;\n        }\n    }\n    $prefix = substr($string,\
    \ 0, $length - $palindrome_length);\n    $prefix_reverse = strrev($prefix);\n\
    \    return $string . $prefix_reverse;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvoa6_72o.php:34\n\
    Stack trace:\n#0 /tmp/tmpvoa6_72o.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpvoa6_72o.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $string_length; $i++) {\n\
    \        $substring = substr($string, $i);\n        $substring_length = strlen($substring);\n\
    \        if ($substring_length <= $palindrome_length) {\n            break;\n\
    \        }\n        if (is_palindrome($substring)) {\n            $palindrome_length\
    \ = $substring_length;\n        }\n    }\n    $prefix = substr($string, 0, $string_length\
    \ - $palindrome_length);\n    $prefix_reversed = strrev($prefix);\n    return\
    \ $string . $prefix_reversed;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpxgcziu6l.php:21\nStack trace:\n#0 /tmp/tmpxgcziu6l.php(31): make_palindrome()\n\
    #1 /tmp/tmpxgcziu6l.php(36): candidate()\n#2 /tmp/tmpxgcziu6l.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpxgcziu6l.php on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n  $string_length = strlen($string);\n\
    \  $palindrome_length = 0;\n  $palindrome_index = 0;\n  for ($i = 0; $i < $string_length;\
    \ $i++) {\n    $palindrome_length = max($palindrome_length, get_palindrome_length($string,\
    \ $i));\n    if ($palindrome_length == $string_length - $i) {\n      $palindrome_index\
    \ = $i;\n      break;\n    }\n  }\n  $palindrome_prefix = substr($string, 0, $palindrome_index);\n\
    \  $palindrome_suffix = substr($string, $palindrome_index + $palindrome_length);\n\
    \  return $string . strrev($palindrome_prefix) . $palindrome_suffix;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function get_palindrome_length()\
    \ in /tmp/tmpzpznmleb.php:17\nStack trace:\n#0 /tmp/tmpzpznmleb.php(29): make_palindrome()\n\
    #1 /tmp/tmpzpznmleb.php(34): candidate()\n#2 /tmp/tmpzpznmleb.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpzpznmleb.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $palindrome_suffix = find_palindrome_suffix($string);\n\
    \    $prefix = substr($string, 0, strlen($string) - strlen($palindrome_suffix));\n\
    \    return $string . strrev($prefix);\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function find_palindrome_suffix()\
    \ in /tmp/tmp5f7d43g5.php:13\nStack trace:\n#0 /tmp/tmp5f7d43g5.php(19): make_palindrome()\n\
    #1 /tmp/tmp5f7d43g5.php(23): candidate()\n#2 /tmp/tmp5f7d43g5.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmp5f7d43g5.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $suffix = '';\n    for ($i = $length - 1; $i >= 0; $i--) {\n        $suffix\
    \ = $string[$i] . $suffix;\n        if (is_palindrome($suffix)) {\n          \
    \  break;\n        }\n    }\n    return $string . strrev(substr($string, 0, $length\
    \ - strlen($suffix)));\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmprtlu_1y3.php:17\nStack trace:\n#0 /tmp/tmprtlu_1y3.php(25): make_palindrome()\n\
    #1 /tmp/tmprtlu_1y3.php(30): candidate()\n#2 /tmp/tmprtlu_1y3.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmprtlu_1y3.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_suffix = '';\n    for ($i = $string_length - 1; $i >= 0; $i--)\
    \ {\n        $palindrome_suffix .= $string[$i];\n        if (is_palindrome($palindrome_suffix))\
    \ {\n            break;\n        }\n    }\n    $palindrome_prefix = substr($string,\
    \ 0, $string_length - strlen($palindrome_suffix));\n    return $string . strrev($palindrome_prefix);\n\
    }\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpo0cwc396.php:17\nStack trace:\n#0 /tmp/tmpo0cwc396.php(26): make_palindrome()\n\
    #1 /tmp/tmpo0cwc396.php(31): candidate()\n#2 /tmp/tmpo0cwc396.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpo0cwc396.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n  $string_length = strlen($string);\n\
    \  $palindrome_length = 0;\n  for ($i = 0; $i < $string_length; $i++) {\n    if\
    \ ($string[$i] == $string[$string_length - $i - 1]) {\n      $palindrome_length++;\n\
    \    } else {\n      break;\n    }\n  }\n  $prefix = substr($string, 0, $string_length\
    \ - $palindrome_length);\n  $prefix_reversed = strrev($prefix);\n  return $string\
    \ . $prefix_reversed;\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqqqdm3ep.php:34\n\
    Stack trace:\n#0 /tmp/tmpqqqdm3ep.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpqqqdm3ep.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_suffix = '';\n    for ($i = $string_length - 1; $i >= 0; $i--)\
    \ {\n        $palindrome_suffix .= $string[$i];\n        if (is_palindrome($palindrome_suffix))\
    \ {\n            break;\n        }\n    }\n    $palindrome_prefix = substr($string,\
    \ 0, $string_length - strlen($palindrome_suffix));\n    return $string . strrev($palindrome_prefix);\n\
    }\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmp5m_xtyov.php:17\nStack trace:\n#0 /tmp/tmp5m_xtyov.php(26): make_palindrome()\n\
    #1 /tmp/tmp5m_xtyov.php(31): candidate()\n#2 /tmp/tmp5m_xtyov.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmp5m_xtyov.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    for ($i = $length; $i > 0; $i--) {\n        $suffix = substr($string, $length\
    \ - $i);\n        if (is_palindrome($suffix)) {\n            $prefix = substr($string,\
    \ 0, $length - $i);\n            return $string . strrev($prefix);\n        }\n\
    \    }\n    return $string;\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmp1m5cy5kk.php:16\nStack trace:\n#0 /tmp/tmp1m5cy5kk.php(25): make_palindrome()\n\
    #1 /tmp/tmp1m5cy5kk.php(30): candidate()\n#2 /tmp/tmp1m5cy5kk.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp1m5cy5kk.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $suffix = '';\n    for ($i = $length - 1; $i >= 0; $i--) {\n        $suffix\
    \ = $string[$i] . $suffix;\n        if (is_palindrome($suffix)) {\n          \
    \  break;\n        }\n    }\n    $prefix = substr($string, 0, $i);\n    return\
    \ $string . strrev($prefix);\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmp63j1en0u.php:17\nStack trace:\n#0 /tmp/tmp63j1en0u.php(26): make_palindrome()\n\
    #1 /tmp/tmp63j1en0u.php(31): candidate()\n#2 /tmp/tmp63j1en0u.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmp63j1en0u.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_suffix = '';\n    $palindrome_suffix_length = 0;\n    for ($i\
    \ = 0; $i < $string_length; $i++) {\n        $suffix = substr($string, $i);\n\
    \        $suffix_length = strlen($suffix);\n        $prefix = substr($string,\
    \ 0, $string_length - $suffix_length);\n        if ($suffix == strrev($suffix)\
    \ && $suffix_length > $palindrome_suffix_length) {\n            $palindrome_suffix\
    \ = $suffix;\n            $palindrome_suffix_length = $suffix_length;\n      \
    \  }\n    }\n    return $string . strrev(substr($string, 0, $string_length - $palindrome_suffix_length));\n\
    }\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $suffix = '';\n    for ($i = $length - 1; $i >= 0; $i--) {\n        $suffix\
    \ = $string[$i] . $suffix;\n        if (is_palindrome($suffix)) {\n          \
    \  break;\n        }\n    }\n    return $string . strrev(substr($string, 0, $length\
    \ - strlen($suffix)));\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpp8bsjcuv.php:17\nStack trace:\n#0 /tmp/tmpp8bsjcuv.php(25): make_palindrome()\n\
    #1 /tmp/tmpp8bsjcuv.php(30): candidate()\n#2 /tmp/tmpp8bsjcuv.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpp8bsjcuv.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n  $string_length = strlen($string);\n\
    \  $palindrome_length = $string_length;\n  while ($palindrome_length > 0) {\n\
    \    $palindrome_length--;\n    $palindrome_start = $string_length - $palindrome_length;\n\
    \    $palindrome = substr($string, $palindrome_start, $palindrome_length);\n \
    \   if (is_palindrome($palindrome)) {\n      $prefix = substr($string, 0, $palindrome_start);\n\
    \      return $string . strrev($prefix);\n    }\n  }\n  return $string;\n}\n\n\
    function candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmptd5gdcq9.php:19\nStack trace:\n#0 /tmp/tmptd5gdcq9.php(28): make_palindrome()\n\
    #1 /tmp/tmptd5gdcq9.php(33): candidate()\n#2 /tmp/tmptd5gdcq9.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmptd5gdcq9.php on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $string_length; $i++) {\n\
    \        $substring = substr($string, 0, $string_length - $i);\n        if (is_palindrome($substring))\
    \ {\n            $palindrome_length = strlen($substring);\n            break;\n\
    \        }\n    }\n    $prefix = substr($string, 0, $string_length - $palindrome_length);\n\
    \    $reverse_prefix = strrev($prefix);\n    return $string . $reverse_prefix;\n\
    }\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpu6bzc0on.php:17\nStack trace:\n#0 /tmp/tmpu6bzc0on.php(28): make_palindrome()\n\
    #1 /tmp/tmpu6bzc0on.php(33): candidate()\n#2 /tmp/tmpu6bzc0on.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpu6bzc0on.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = $length - 1; $i >= 0; $i--) {\n  \
    \      if ($string[$i] == $string[$length - 1 - $i]) {\n            $palindrome_length++;\n\
    \        } else {\n            break;\n        }\n    }\n    return $string .\
    \ strrev(substr($string, 0, $length - $palindrome_length));\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7d_yh23v.php:32\n\
    Stack trace:\n#0 /tmp/tmp7d_yh23v.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp7d_yh23v.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $max_palindrome_length = 0;\n    for ($i = 0; $i < $length; $i++) {\n   \
    \     $palindrome_length = 0;\n        for ($j = 0; $j <= $i; $j++) {\n      \
    \      if ($string[$i - $j] == $string[$i + $j]) {\n                $palindrome_length\
    \ += 2;\n            } else {\n                break;\n            }\n       \
    \ }\n        if ($palindrome_length > $max_palindrome_length) {\n            $max_palindrome_length\
    \ = $palindrome_length;\n        }\n    }\n    $prefix = substr($string, 0, $length\
    \ - $max_palindrome_length);\n    return $string . strrev($prefix);\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Uninitialized string offset 3 in /tmp/tmpxhwcxksb.php on\
    \ line 18\nPHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxhwcxksb.php:39\n\
    Stack trace:\n#0 /tmp/tmpxhwcxksb.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpxhwcxksb.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    $palindrome_start = 0;\n    $palindrome_end\
    \ = 0;\n    for ($i = 0; $i < $string_length; $i++) {\n        $palindrome_length\
    \ = max($palindrome_length, get_palindrome_length($string, $i, $i));\n       \
    \ $palindrome_length = max($palindrome_length, get_palindrome_length($string,\
    \ $i, $i + 1));\n        if ($palindrome_length > $palindrome_end - $palindrome_start)\
    \ {\n            $palindrome_start = $i - ($palindrome_length - 1) / 2;\n    \
    \        $palindrome_end = $i + $palindrome_length / 2;\n        }\n    }\n  \
    \  $prefix = substr($string, 0, $palindrome_start);\n    $suffix = substr($string,\
    \ $palindrome_end + 1);\n    return $prefix . $string . strrev($prefix);\n}\n\n\
    function candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function get_palindrome_length()\
    \ in /tmp/tmp5mrbt359.php:18\nStack trace:\n#0 /tmp/tmp5mrbt359.php(31): make_palindrome()\n\
    #1 /tmp/tmp5mrbt359.php(36): candidate()\n#2 /tmp/tmp5mrbt359.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmp5mrbt359.php on line 18\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    if ($string_length == 0) {\n        return '';\n    }\n    $longest_palindrome_suffix\
    \ = '';\n    for ($i = $string_length; $i > 0; $i--) {\n        $suffix = substr($string,\
    \ $string_length - $i);\n        if (is_palindrome($suffix)) {\n            $longest_palindrome_suffix\
    \ = $suffix;\n            break;\n        }\n    }\n    $prefix = substr($string,\
    \ 0, $string_length - strlen($longest_palindrome_suffix));\n    return $string\
    \ . strrev($prefix);\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpforf7no1.php:20\nStack trace:\n#0 /tmp/tmpforf7no1.php(30): make_palindrome()\n\
    #1 /tmp/tmpforf7no1.php(35): candidate()\n#2 /tmp/tmpforf7no1.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpforf7no1.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $longest_palindrome_length = 0;\n    $longest_palindrome_start = 0;\n   \
    \ for ($i = 0; $i < $string_length; $i++) {\n        $palindrome_length = 0;\n\
    \        $palindrome_start = $i;\n        for ($j = $i; $j < $string_length; $j++)\
    \ {\n            if ($string[$j] == $string[$string_length - $j + $i - 1]) {\n\
    \                $palindrome_length++;\n            } else {\n               \
    \ break;\n            }\n        }\n        if ($palindrome_length > $longest_palindrome_length)\
    \ {\n            $longest_palindrome_length = $palindrome_length;\n          \
    \  $longest_palindrome_start = $palindrome_start;\n        }\n    }\n    $prefix\
    \ = substr($string, 0, $longest_palindrome_start);\n    $prefix_reversed = strrev($prefix);\n\
    \    return $string . $prefix_reversed;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n  $length = strlen($string);\n\
    \  $palindrome_length = 0;\n  for ($i = 0; $i < $length; $i++) {\n    if ($string[$i]\
    \ == $string[$length - $i - 1]) {\n      $palindrome_length++;\n    } else {\n\
    \      break;\n    }\n  }\n  $prefix = substr($string, 0, $length - $palindrome_length);\n\
    \  $prefix_reversed = strrev($prefix);\n  return $string . $prefix_reversed;\n\
    }\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_jrpn2qb.php:34\n\
    Stack trace:\n#0 /tmp/tmp_jrpn2qb.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp_jrpn2qb.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n  $length = strlen($string);\n\
    \  if ($length == 0) {\n    return '';\n  }\n  $longest_palindrome_suffix = '';\n\
    \  for ($i = $length; $i > 0; $i--) {\n    $suffix = substr($string, $length -\
    \ $i);\n    if (is_palindrome($suffix)) {\n      $longest_palindrome_suffix =\
    \ $suffix;\n      break;\n    }\n  }\n  $prefix = substr($string, 0, $length -\
    \ strlen($longest_palindrome_suffix));\n  return $string . strrev($prefix);\n\
    }\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpjnmu82dn.php:20\nStack trace:\n#0 /tmp/tmpjnmu82dn.php(30): make_palindrome()\n\
    #1 /tmp/tmpjnmu82dn.php(35): candidate()\n#2 /tmp/tmpjnmu82dn.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpjnmu82dn.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $palindrome_suffix = '';\n    for ($i = $length - 1; $i >= 0; $i--) {\n \
    \       if (is_palindrome($string . $palindrome_suffix)) {\n            return\
    \ $string . $palindrome_suffix;\n        }\n        $palindrome_suffix = $string[$i]\
    \ . $palindrome_suffix;\n    }\n    return $string . $palindrome_suffix;\n}\n\n\
    function candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpewer2fqj.php:16\nStack trace:\n#0 /tmp/tmpewer2fqj.php(25): make_palindrome()\n\
    #1 /tmp/tmpewer2fqj.php(30): candidate()\n#2 /tmp/tmpewer2fqj.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpewer2fqj.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n  $string_length = strlen($string);\n\
    \  if ($string_length < 2) {\n    return $string;\n  }\n  $max_palindrome_length\
    \ = 0;\n  $max_palindrome_start = 0;\n  for ($i = 0; $i < $string_length; $i++)\
    \ {\n    $palindrome_length = 0;\n    $palindrome_start = $i;\n    for ($j = $i;\
    \ $j < $string_length; $j++) {\n      if ($string[$j] == $string[$string_length\
    \ - $j + $i - 1]) {\n        $palindrome_length++;\n      } else {\n        break;\n\
    \      }\n    }\n    if ($palindrome_length > $max_palindrome_length) {\n    \
    \  $max_palindrome_length = $palindrome_length;\n      $max_palindrome_start =\
    \ $palindrome_start;\n    }\n  }\n  $prefix = substr($string, 0, $max_palindrome_start);\n\
    \  $prefix_reversed = strrev($prefix);\n  return $string . $prefix_reversed;\n\
    }\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $length; $i++) {\n       \
    \ if ($string[$i] == $string[$length - $i - 1]) {\n            $palindrome_length++;\n\
    \        } else {\n            break;\n        }\n    }\n    $prefix = substr($string,\
    \ 0, $length - $palindrome_length);\n    $prefix_reversed = strrev($prefix);\n\
    \    return $string . $prefix_reversed;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpx7zglf6j.php:34\n\
    Stack trace:\n#0 /tmp/tmpx7zglf6j.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpx7zglf6j.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $palindrome_suffix = find_palindrome_suffix($string);\n\
    \    $palindrome_prefix = strrev(substr($string, 0, strlen($string) - strlen($palindrome_suffix)));\n\
    \    return $string . $palindrome_prefix;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function find_palindrome_suffix()\
    \ in /tmp/tmp4hs62q8v.php:13\nStack trace:\n#0 /tmp/tmp4hs62q8v.php(19): make_palindrome()\n\
    #1 /tmp/tmp4hs62q8v.php(23): candidate()\n#2 /tmp/tmp4hs62q8v.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4hs62q8v.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $length; $i++) {\n       \
    \ if ($string[$i] == $string[$length - $i - 1]) {\n            $palindrome_length++;\n\
    \        } else {\n            break;\n        }\n    }\n    $prefix = substr($string,\
    \ 0, $length - $palindrome_length);\n    $prefix_reversed = strrev($prefix);\n\
    \    return $string . $prefix_reversed;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp761xzvf4.php:34\n\
    Stack trace:\n#0 /tmp/tmp761xzvf4.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp761xzvf4.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $length; $i++) {\n       \
    \ if ($string[$i] == $string[$length - $i - 1]) {\n            $palindrome_length++;\n\
    \        } else {\n            break;\n        }\n    }\n    $prefix = substr($string,\
    \ 0, $length - $palindrome_length);\n    $prefix_reversed = strrev($prefix);\n\
    \    return $string . $prefix_reversed;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    jerry\") !== \"jerryrrej\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9_jpfzpz.php:34\n\
    Stack trace:\n#0 /tmp/tmp9_jpfzpz.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp9_jpfzpz.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $palindrome_suffix = '';\n    for ($i = $length - 1; $i >= 0; $i--) {\n \
    \       $palindrome_suffix .= $string[$i];\n        if (is_palindrome($palindrome_suffix))\
    \ {\n            break;\n        }\n    }\n    return $string . strrev(substr($string,\
    \ 0, $length - strlen($palindrome_suffix)));\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmp0be3q9qh.php:17\nStack trace:\n#0 /tmp/tmp0be3q9qh.php(25): make_palindrome()\n\
    #1 /tmp/tmp0be3q9qh.php(30): candidate()\n#2 /tmp/tmp0be3q9qh.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp0be3q9qh.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $palindrome_length = 0;\n    $palindrome_start = 0;\n    for ($i = 0; $i\
    \ < $length; $i++) {\n        $palindrome_length = max($palindrome_length, palindrome_length($string,\
    \ $i, $i));\n        $palindrome_length = max($palindrome_length, palindrome_length($string,\
    \ $i, $i + 1));\n    }\n    $palindrome_start = $length - $palindrome_length;\n\
    \    return substr($string, 0, $palindrome_start) . strrev(substr($string, $palindrome_start));\n\
    }\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function palindrome_length()\
    \ in /tmp/tmpqgjm7t10.php:17\nStack trace:\n#0 /tmp/tmpqgjm7t10.php(25): make_palindrome()\n\
    #1 /tmp/tmpqgjm7t10.php(30): candidate()\n#2 /tmp/tmpqgjm7t10.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpqgjm7t10.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $palindrome = $string;\n    for ($i = $length - 1; $i >= 0; $i--) {\n   \
    \     if (is_palindrome(substr($string, $i))) {\n            $palindrome .= strrev(substr($string,\
    \ 0, $i));\n            break;\n        }\n    }\n    return $palindrome;\n}\n\
    \nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpfd7qggf4.php:16\nStack trace:\n#0 /tmp/tmpfd7qggf4.php(25): make_palindrome()\n\
    #1 /tmp/tmpfd7qggf4.php(30): candidate()\n#2 /tmp/tmpfd7qggf4.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpfd7qggf4.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n  $string_length = strlen($string);\n\
    \  $longest_palindrome_length = 0;\n  $longest_palindrome_start = 0;\n  for ($i\
    \ = 0; $i < $string_length; $i++) {\n    $palindrome_length = 0;\n    $palindrome_start\
    \ = $i;\n    $j = $i;\n    while ($j < $string_length) {\n      if ($string[$i]\
    \ == $string[$j]) {\n        $palindrome_length++;\n        $i++;\n        $j++;\n\
    \      } else {\n        break;\n      }\n    }\n    if ($palindrome_length >\
    \ $longest_palindrome_length) {\n      $longest_palindrome_length = $palindrome_length;\n\
    \      $longest_palindrome_start = $palindrome_start;\n    }\n  }\n  $prefix =\
    \ substr($string, 0, $longest_palindrome_start);\n  $prefix_length = strlen($prefix);\n\
    \  $prefix_reversed = '';\n  for ($i = $prefix_length - 1; $i >= 0; $i--) {\n\
    \    $prefix_reversed .= $prefix[$i];\n  }\n  return $string . $prefix_reversed;\n\
    }\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9bv0421w.php:50\n\
    Stack trace:\n#0 /tmp/tmp9bv0421w.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp9bv0421w.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n  $string_length = strlen($string);\n\
    \  $palindrome_length = 0;\n  for ($i = 0; $i < $string_length; $i++) {\n    $substring\
    \ = substr($string, 0, $string_length - $i);\n    if (is_palindrome($substring))\
    \ {\n      $palindrome_length = strlen($substring);\n      break;\n    }\n  }\n\
    \  return $string . substr(strrev($string), $palindrome_length);\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmp0z6t0xtt.php:17\nStack trace:\n#0 /tmp/tmp0z6t0xtt.php(26): make_palindrome()\n\
    #1 /tmp/tmp0z6t0xtt.php(31): candidate()\n#2 /tmp/tmp0z6t0xtt.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmp0z6t0xtt.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $palindrome_suffix = '';\n    for ($i = $length - 1; $i >= 0; $i--) {\n \
    \       $palindrome_suffix .= $string[$i];\n        if (is_palindrome($palindrome_suffix))\
    \ {\n            break;\n        }\n    }\n    return $string . strrev(substr($string,\
    \ 0, $length - strlen($palindrome_suffix)));\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_palindrome(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"x\") !== \"x\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmp87zd_606.php:17\nStack trace:\n#0 /tmp/tmp87zd_606.php(25): make_palindrome()\n\
    #1 /tmp/tmp87zd_606.php(30): candidate()\n#2 /tmp/tmp87zd_606.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp87zd_606.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $length = strlen($string);\n\
    \    $max_palindrome_length = 0;\n    $max_palindrome_start = 0;\n    for ($i\
    \ = 0; $i < $length; $i++) {\n        $palindrome_length = 0;\n        $palindrome_start\
    \ = $i;\n        while ($palindrome_start > 0 && $i + $palindrome_length < $length\
    \ && $string[$palindrome_start - 1] == $string[$i + $palindrome_length]) {\n \
    \           $palindrome_length++;\n            $palindrome_start--;\n        }\n\
    \        if ($palindrome_length > $max_palindrome_length) {\n            $max_palindrome_length\
    \ = $palindrome_length;\n            $max_palindrome_start = $palindrome_start;\n\
    \        }\n    }\n    $prefix = substr($string, 0, $max_palindrome_start);\n\
    \    $prefix_reversed = strrev($prefix);\n    return $string . $prefix_reversed;\n\
    }\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpz5y0nacw.php:40\n\
    Stack trace:\n#0 /tmp/tmpz5y0nacw.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpz5y0nacw.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_suffix = '';\n    for ($i = $string_length - 1; $i >= 0; $i--)\
    \ {\n        $palindrome_suffix .= $string[$i];\n        if (is_palindrome($palindrome_suffix))\
    \ {\n            $palindrome_prefix = substr($string, 0, $i);\n            return\
    \ $string . strrev($palindrome_prefix);\n        }\n    }\n    return $string;\n\
    }\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_palindrome()\
    \ in /tmp/tmpkue61pzr.php:17\nStack trace:\n#0 /tmp/tmpkue61pzr.php(26): make_palindrome()\n\
    #1 /tmp/tmpkue61pzr.php(31): candidate()\n#2 /tmp/tmpkue61pzr.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpkue61pzr.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $len = strlen($string);\n\
    \    $i = 0;\n    while ($i < $len) {\n        if ($string[$i] == $string[$len\
    \ - 1]) {\n            $i++;\n            $len--;\n        } else {\n        \
    \    break;\n        }\n    }\n    $prefix = substr($string, 0, $i);\n    $suffix\
    \ = substr($string, $i);\n    return $string . strrev($prefix);\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1bya85zv.php:34\n\
    Stack trace:\n#0 /tmp/tmp1bya85zv.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp1bya85zv.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $len = strlen($string);\n\
    \    $i = 0;\n    $j = $len - 1;\n    while ($i < $j) {\n        if ($string[$i]\
    \ != $string[$j]) {\n            break;\n        }\n        $i++;\n        $j--;\n\
    \    }\n    if ($i >= $j) {\n        return $string;\n    }\n    $prefix = substr($string,\
    \ 0, $i);\n    $suffix = substr($string, $i);\n    return $prefix . strrev($suffix)\
    \ . $suffix;\n}\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp429zqoq_.php:38\n\
    Stack trace:\n#0 /tmp/tmp429zqoq_.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp429zqoq_.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
    // Algorithm idea is simple:\n// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n\
    // ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n\
    // 'catac'\nfunction make_palindrome($string) {\n    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $string_length; $i++) {\n\
    \        if ($string[$i] === $string[$string_length - $i - 1]) {\n           \
    \ $palindrome_length++;\n        } else {\n            break;\n        }\n   \
    \ }\n    return $string . strrev(substr($string, 0, $string_length - $palindrome_length));\n\
    }\n\nfunction candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppct00ob2.php:32\n\
    Stack trace:\n#0 /tmp/tmppct00ob2.php(37): test()\n#1 {main}\n  thrown in /tmp/tmppct00ob2.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
