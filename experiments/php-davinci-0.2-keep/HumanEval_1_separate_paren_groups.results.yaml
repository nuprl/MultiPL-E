name: HumanEval_1_separate_paren_groups
language: php
results:
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $paren_count = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $current_char = $paren_string[$i];\n\
    \        if ($current_char === '(') {\n            $paren_count++;\n        }\
    \ elseif ($current_char === ')') {\n            $paren_count--;\n        }\n \
    \       $current_group .= $current_char;\n        if ($paren_count === 0) {\n\
    \            $paren_groups[] = $current_group;\n            $current_group = '';\n\
    \        }\n    }\n    return $paren_groups;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $start = 0;\n    $end = 0;\n    $open_parens = 0;\n    $close_parens\
    \ = 0;\n    for ($i = 0; $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i]\
    \ == '(') {\n            $open_parens++;\n            if ($open_parens == 1) {\n\
    \                $start = $i;\n            }\n        } else {\n            $close_parens++;\n\
    \            if ($close_parens == $open_parens) {\n                $end = $i;\n\
    \                $paren_groups[] = substr($paren_string, $start, $end - $start\
    \ + 1);\n                $open_parens = 0;\n                $close_parens = 0;\n\
    \            }\n        }\n    }\n    return $paren_groups;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } elseif ($char ===\
    \ ')') {\n            $open_parens--;\n        }\n        $current_group .= $char;\n\
    \        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ if ($paren_string[$i] == ')') {\n            $open_parens--;\n            $current_group\
    \ .= ')';\n            if ($open_parens == 0) {\n                $paren_groups[]\
    \ = $current_group;\n                $current_group = '';\n            }\n   \
    \     }\n    }\n    return $paren_groups;\n}\n\nfunction candidate(...$args) {\n\
    \    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } else if ($char\
    \ === ')') {\n            $open_parens--;\n        }\n        $current_group .=\
    \ $char;\n        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('  ',\
    \ ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected string content \"\" in /tmp/tmp0q4awoop.php\
    \ on line 34\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } else if ($char\
    \ === ')') {\n            $open_parens--;\n        }\n        $current_group .=\
    \ $char;\n        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \t$paren_string = str_replace(' ', '', $paren_string);\n\t$paren_groups = [];\n\
    \t$current_group = '';\n\t$open_parens = 0;\n\tfor ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n\t\tif ($paren_string[$i] == '(') {\n\t\t\t$open_parens++;\n\t\t\t\
    $current_group .= '(';\n\t\t} else {\n\t\t\t$open_parens--;\n\t\t\t$current_group\
    \ .= ')';\n\t\t}\n\t\tif ($open_parens == 0) {\n\t\t\t$paren_groups[] = $current_group;\n\
    \t\t\t$current_group = '';\n\t\t}\n\t}\n\treturn $paren_groups;\n}\n\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ array();\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0;\
    \ $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n\
    \            $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } elseif ($char ===\
    \ ')') {\n            $open_parens--;\n        }\n        $current_group .= $char;\n\
    \        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_groups = [];\n\
    \  $current_group = '';\n  $open_parens = 0;\n  for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n    $char = $paren_string[$i];\n    if ($char === '(') {\n      $open_parens++;\n\
    \    } elseif ($char === ')') {\n      $open_parens--;\n    }\n    $current_group\
    \ .= $char;\n    if ($open_parens === 0) {\n      $paren_groups[] = $current_group;\n\
    \      $current_group = '';\n    }\n  }\n  return $paren_groups;\n}\n\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } else if ($char\
    \ === ')') {\n            $open_parens--;\n        }\n        $current_group .=\
    \ $char;\n        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } elseif ($char ===\
    \ ')') {\n            $open_parens--;\n        }\n        $current_group .= $char;\n\
    \        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $open_parens = 0;\n    $current_group = '';\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } elseif ($char ===\
    \ ')') {\n            $open_parens--;\n        }\n        $current_group .= $char;\n\
    \        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_groups = [];\n\
    \  $current_paren_group = '';\n  $open_parens = 0;\n  for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n    $char = $paren_string[$i];\n    if ($char === '(') {\n      $open_parens++;\n\
    \    } elseif ($char === ')') {\n      $open_parens--;\n    }\n    $current_paren_group\
    \ .= $char;\n    if ($open_parens === 0) {\n      $paren_groups[] = $current_paren_group;\n\
    \      $current_paren_group = '';\n    }\n  }\n  return $paren_groups;\n}\n\n\
    function candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } else if ($char\
    \ === ')') {\n            $open_parens--;\n        }\n        $current_group .=\
    \ $char;\n        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $result = [];\n\
    \    $start = 0;\n    $end = 0;\n    $open = 0;\n    $close = 0;\n    for ($i\
    \ = 0; $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(')\
    \ {\n            $open++;\n            if ($open == 1) {\n                $start\
    \ = $i;\n            }\n        } else {\n            $close++;\n            if\
    \ ($open == $close) {\n                $end = $i;\n                $result[] =\
    \ substr($paren_string, $start, $end - $start + 1);\n                $open = 0;\n\
    \                $close = 0;\n            }\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $paren_count = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $paren_count++;\n        } else if ($char\
    \ === ')') {\n            $paren_count--;\n        }\n        $current_group .=\
    \ $char;\n        if ($paren_count === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_paren_group = '';\n    $open_parens = 0;\n    for ($i = 0;\
    \ $i < strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n  \
    \      if ($char === '(') {\n            $open_parens++;\n        } elseif ($char\
    \ === ')') {\n            $open_parens--;\n        }\n        $current_paren_group\
    \ .= $char;\n        if ($open_parens === 0) {\n            $paren_groups[] =\
    \ $current_paren_group;\n            $current_paren_group = '';\n        }\n \
    \   }\n    return $paren_groups;\n}\n\nfunction candidate(...$args) {\n    return\
    \ separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((()))\
    \ (((())))\") !== array(\"()\", \"(())\", \"((()))\", \"(((())))\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(\"\
    (()(())((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ( ) (( )) (( )( ))\") !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $paren_group = '';\n    $paren_count = 0;\n    for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n        if ($paren_string[$i] == '(') {\n            $paren_count++;\n\
    \        } else {\n            $paren_count--;\n        }\n        $paren_group\
    \ .= $paren_string[$i];\n        if ($paren_count == 0) {\n            $paren_groups[]\
    \ = $paren_group;\n            $paren_group = '';\n        }\n    }\n    return\
    \ $paren_groups;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $paren_count = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $current_char = $paren_string[$i];\n\
    \        if ($current_char === '(') {\n            $paren_count++;\n        }\
    \ elseif ($current_char === ')') {\n            $paren_count--;\n        }\n \
    \       $current_group .= $current_char;\n        if ($paren_count === 0) {\n\
    \            $paren_groups[] = $current_group;\n            $current_group = '';\n\
    \        }\n    }\n    return $paren_groups;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $current_group_open_parens = 0;\n    for\
    \ ($i = 0; $i < strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n\
    \        if ($char === '(') {\n            $current_group_open_parens++;\n   \
    \     } else if ($char === ')') {\n            $current_group_open_parens--;\n\
    \        }\n        $current_group .= $char;\n        if ($current_group_open_parens\
    \ === 0) {\n            $paren_groups[] = $current_group;\n            $current_group\
    \ = '';\n        }\n    }\n    return $paren_groups;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $result = [];\n    $start = 0;\n    $end = 0;\n    $open = 0;\n    $close\
    \ = 0;\n    for ($i = 0; $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i]\
    \ == '(') {\n            $open++;\n            if ($open == 1) {\n           \
    \     $start = $i;\n            }\n        } else if ($paren_string[$i] == ')')\
    \ {\n            $close++;\n            if ($open == $close) {\n             \
    \   $end = $i;\n                $result[] = substr($paren_string, $start, $end\
    \ - $start + 1);\n                $open = 0;\n                $close = 0;\n  \
    \          }\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_t91h__2.php:41\n\
    Stack trace:\n#0 /tmp/tmp_t91h__2.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp_t91h__2.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } elseif ($char ===\
    \ ')') {\n            $open_parens--;\n        }\n        $current_group .= $char;\n\
    \        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array =\
    \ str_split($paren_string);\n    $paren_groups = [];\n    $current_group = '';\n\
    \    $open_parens = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ === '(') {\n            $open_parens++;\n        } elseif ($paren === ')') {\n\
    \            $open_parens--;\n        }\n        $current_group .= $paren;\n \
    \       if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $paren_count = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $paren_count++;\n        } elseif ($char ===\
    \ ')') {\n            $paren_count--;\n        }\n        $current_group .= $char;\n\
    \        if ($paren_count === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } else if ($char\
    \ === ')') {\n            $open_parens--;\n        }\n        $current_group .=\
    \ $char;\n        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $paren_count = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $paren_count++;\n        } else if ($char\
    \ === ')') {\n            $paren_count--;\n        }\n        $current_group .=\
    \ $char;\n        if ($paren_count === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ array();\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0;\
    \ $i < strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n  \
    \      if ($char == '(') {\n            $open_parens++;\n        } else if ($char\
    \ == ')') {\n            $open_parens--;\n        }\n        $current_group .=\
    \ $char;\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } elseif ($char ===\
    \ ')') {\n            $open_parens--;\n        }\n        $current_group .= $char;\n\
    \        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } elseif ($char ===\
    \ ')') {\n            $open_parens--;\n        }\n        $current_group .= $char;\n\
    \        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_paren_group = '';\n    $open_paren_count = 0;\n    for ($i\
    \ = 0; $i < strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n\
    \        if ($char === '(') {\n            $open_paren_count++;\n        } elseif\
    \ ($char === ')') {\n            $open_paren_count--;\n        }\n        $current_paren_group\
    \ .= $char;\n        if ($open_paren_count === 0) {\n            $paren_groups[]\
    \ = $current_paren_group;\n            $current_paren_group = '';\n        }\n\
    \    }\n    return $paren_groups;\n}\n\nfunction candidate(...$args) {\n    return\
    \ separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((()))\
    \ (((())))\") !== array(\"()\", \"(())\", \"((()))\", \"(((())))\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(\"\
    (()(())((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ( ) (( )) (( )( ))\") !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_groups = [];\n\
    \  $current_group = '';\n  $open_parens = 0;\n  for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n    if ($paren_string[$i] === '(') {\n      $open_parens++;\n     \
    \ $current_group .= '(';\n    } else {\n      $open_parens--;\n      $current_group\
    \ .= ')';\n    }\n    if ($open_parens === 0) {\n      $paren_groups[] = $current_group;\n\
    \      $current_group = '';\n    }\n  }\n  return $paren_groups;\n}\n\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } else if ($char\
    \ === ')') {\n            $open_parens--;\n        }\n        $current_group .=\
    \ $char;\n        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } elseif ($char ===\
    \ ')') {\n            $open_parens--;\n        }\n        $current_group .= $char;\n\
    \        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } elseif ($char ===\
    \ ')') {\n            $open_parens--;\n        }\n        $current_group .= $char;\n\
    \        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } elseif ($char ===\
    \ ')') {\n            $open_parens--;\n        }\n        $current_group .= $char;\n\
    \        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_groups = [];\n\
    \  $current_group = '';\n  $open_parens = 0;\n  for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n    $char = $paren_string[$i];\n    if ($char === '(') {\n      $open_parens++;\n\
    \    } else if ($char === ')') {\n      $open_parens--;\n    }\n    $current_group\
    \ .= $char;\n    if ($open_parens === 0) {\n      $paren_groups[] = $current_group;\n\
    \      $current_group = '';\n    }\n  }\n  return $paren_groups;\n}\n\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_paren_group = '';\n    $open_paren_count = 0;\n    for ($i\
    \ = 0; $i < strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n\
    \        if ($char === '(') {\n            $open_paren_count++;\n        } else\
    \ if ($char === ')') {\n            $open_paren_count--;\n        }\n        $current_paren_group\
    \ .= $char;\n        if ($open_paren_count === 0) {\n            $paren_groups[]\
    \ = $current_paren_group;\n            $current_paren_group = '';\n        }\n\
    \    }\n    return $paren_groups;\n}\n\nfunction candidate(...$args) {\n    return\
    \ separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((()))\
    \ (((())))\") !== array(\"()\", \"(())\", \"((()))\", \"(((())))\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(\"\
    (()(())((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ( ) (( )) (( )( ))\") !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } elseif ($char ===\
    \ ')') {\n            $open_parens--;\n        }\n        $current_group .= $char;\n\
    \        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ array();\n    $current_paren_group = '';\n    $open_parens = 0;\n    for ($i\
    \ = 0; $i < strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n\
    \        if ($char == '(') {\n            $open_parens++;\n        } else if ($char\
    \ == ')') {\n            $open_parens--;\n        }\n        $current_paren_group\
    \ .= $char;\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_paren_group;\n\
    \            $current_paren_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = preg_replace('/\\s+/', '', $paren_string);\n    $paren_groups\
    \ = [];\n    $current_group = '';\n    $current_open_parens = 0;\n    for ($i\
    \ = 0; $i < strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n\
    \        if ($char === '(') {\n            $current_open_parens++;\n        }\
    \ elseif ($char === ')') {\n            $current_open_parens--;\n        }\n \
    \       $current_group .= $char;\n        if ($current_open_parens === 0) {\n\
    \            $paren_groups[] = $current_group;\n            $current_group = '';\n\
    \        }\n    }\n    return $paren_groups;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $current_open_parens = 0;\n    for ($i =\
    \ 0; $i < strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n\
    \        if ($char === '(') {\n            $current_open_parens++;\n        }\
    \ else if ($char === ')') {\n            $current_open_parens--;\n        }\n\
    \        $current_group .= $char;\n        if ($current_open_parens === 0) {\n\
    \            $paren_groups[] = $current_group;\n            $current_group = '';\n\
    \        }\n    }\n    return $paren_groups;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_paren_count = 0;\n    for ($i = 0;\
    \ $i < strlen($paren_string); $i++) {\n        $current_char = $paren_string[$i];\n\
    \        if ($current_char === '(') {\n            $open_paren_count++;\n    \
    \    } elseif ($current_char === ')') {\n            $open_paren_count--;\n  \
    \      }\n        $current_group .= $current_char;\n        if ($open_paren_count\
    \ === 0) {\n            $paren_groups[] = $current_group;\n            $current_group\
    \ = '';\n        }\n    }\n    return $paren_groups;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_groups = [];\n\
    \  $current_group = '';\n  $open_parens = 0;\n  for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n    $char = $paren_string[$i];\n    if ($char === '(') {\n      $open_parens++;\n\
    \    } elseif ($char === ')') {\n      $open_parens--;\n    }\n    $current_group\
    \ .= $char;\n    if ($open_parens === 0) {\n      $paren_groups[] = $current_group;\n\
    \      $current_group = '';\n    }\n  }\n  return $paren_groups;\n}\n\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } else if ($char\
    \ === ')') {\n            $open_parens--;\n        }\n        $current_group .=\
    \ $char;\n        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $current_level = 0;\n    for ($i = 0; $i\
    \ < strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n     \
    \   if ($char == '(') {\n            $current_level++;\n        } elseif ($char\
    \ == ')') {\n            $current_level--;\n        }\n        $current_group\
    \ .= $char;\n        if ($current_level == 0) {\n            $paren_groups[] =\
    \ $current_group;\n            $current_group = '';\n        }\n    }\n    return\
    \ $paren_groups;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } else if ($char\
    \ === ')') {\n            $open_parens--;\n        }\n        $current_group .=\
    \ $char;\n        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('  ',\
    \ ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected string content \"\" in /tmp/tmpefg42trm.php\
    \ on line 34\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('((',\
    \ '( (', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\" in /tmp/tmpjifruuyl.php\
    \ on line 33\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_paren_group = '';\n    $open_parens = 0;\n    for ($i = 0;\
    \ $i < strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n  \
    \      if ($char === '(') {\n            $open_parens++;\n        } elseif ($char\
    \ === ')') {\n            $open_parens--;\n        }\n        $current_paren_group\
    \ .= $char;\n        if ($open_parens === 0) {\n            $paren_groups[] =\
    \ $current_paren_group;\n            $current_paren_group = '';\n        }\n \
    \   }\n    return $paren_groups;\n}\n\nfunction candidate(...$args) {\n    return\
    \ separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((()))\
    \ (((())))\") !== array(\"()\", \"(())\", \"((()))\", \"(((())))\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(\"\
    (()(())((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ( ) (( )) (( )( ))\") !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ array();\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0;\
    \ $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n\
    \            $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } elseif ($char ===\
    \ ')') {\n            $open_parens--;\n        }\n        $current_group .= $char;\n\
    \        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    // Your code here\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnpquxcz9.php:17\n\
    Stack trace:\n#0 /tmp/tmpnpquxcz9.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpnpquxcz9.php\
    \ on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ array();\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0;\
    \ $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n\
    \            $open_parens++;\n            $current_group .= '(';\n        } else\
    \ if ($paren_string[$i] == ')') {\n            $open_parens--;\n            $current_group\
    \ .= ')';\n            if ($open_parens == 0) {\n                $paren_groups[]\
    \ = $current_group;\n                $current_group = '';\n            }\n   \
    \     }\n    }\n    return $paren_groups;\n}\n\nfunction candidate(...$args) {\n\
    \    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $paren_count = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $current_char = $paren_string[$i];\n\
    \        if ($current_char === '(') {\n            $paren_count++;\n        }\
    \ elseif ($current_char === ')') {\n            $paren_count--;\n        }\n \
    \       $current_group .= $current_char;\n        if ($paren_count === 0) {\n\
    \            $paren_groups[] = $current_group;\n            $current_group = '';\n\
    \        }\n    }\n    return $paren_groups;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_groups = [];\n\
    \  $current_group = '';\n  $open_parens = 0;\n  for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n    $char = $paren_string[$i];\n    if ($char === '(') {\n      $open_parens++;\n\
    \    } else if ($char === ')') {\n      $open_parens--;\n    }\n    $current_group\
    \ .= $char;\n    if ($open_parens === 0) {\n      $paren_groups[] = $current_group;\n\
    \      $current_group = '';\n    }\n  }\n  return $paren_groups;\n}\n\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $current_depth = 0;\n    for ($i = 0; $i\
    \ < strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n     \
    \   if ($char == '(') {\n            $current_depth++;\n        } elseif ($char\
    \ == ')') {\n            $current_depth--;\n        }\n        $current_group\
    \ .= $char;\n        if ($current_depth == 0) {\n            $paren_groups[] =\
    \ $current_group;\n            $current_group = '';\n        }\n    }\n    return\
    \ $paren_groups;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_groups = [];\n\
    \  $current_group = '';\n  $current_depth = 0;\n  for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n    $char = $paren_string[$i];\n    if ($char === '(') {\n      $current_depth++;\n\
    \    } else {\n      $current_depth--;\n    }\n    $current_group .= $char;\n\
    \    if ($current_depth === 0) {\n      $paren_groups[] = $current_group;\n  \
    \    $current_group = '';\n    }\n  }\n  return $paren_groups;\n}\n\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_paren_group = '';\n    $open_parens = 0;\n    for ($i = 0;\
    \ $i < strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n  \
    \      if ($char === '(') {\n            $open_parens++;\n        } elseif ($char\
    \ === ')') {\n            $open_parens--;\n        }\n        $current_paren_group\
    \ .= $char;\n        if ($open_parens === 0) {\n            $paren_groups[] =\
    \ $current_paren_group;\n            $current_paren_group = '';\n        }\n \
    \   }\n    return $paren_groups;\n}\n\nfunction candidate(...$args) {\n    return\
    \ separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((()))\
    \ (((())))\") !== array(\"()\", \"(())\", \"((()))\", \"(((())))\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(\"\
    (()(())((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ( ) (( )) (( )( ))\") !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $paren_count = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $paren_count++;\n        } elseif ($char ===\
    \ ')') {\n            $paren_count--;\n        }\n        $current_group .= $char;\n\
    \        if ($paren_count === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_paren_group = '';\n    $open_paren_count = 0;\n    for ($i\
    \ = 0; $i < strlen($paren_string); $i++) {\n        $current_paren = $paren_string[$i];\n\
    \        if ($current_paren === '(') {\n            $open_paren_count++;\n   \
    \     } else if ($current_paren === ')') {\n            $open_paren_count--;\n\
    \        }\n        $current_paren_group .= $current_paren;\n        if ($open_paren_count\
    \ === 0) {\n            $paren_groups[] = $current_paren_group;\n            $current_paren_group\
    \ = '';\n        }\n    }\n    return $paren_groups;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ if ($paren_string[$i] == ')') {\n            $open_parens--;\n            $current_group\
    \ .= ')';\n            if ($open_parens == 0) {\n                $paren_groups[]\
    \ = $current_group;\n                $current_group = '';\n            }\n   \
    \     }\n    }\n    return $paren_groups;\n}\n\nfunction candidate(...$args) {\n\
    \    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_groups = [];\n\
    \  $current_group = '';\n  $open_parens = 0;\n  for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n    $current_char = $paren_string[$i];\n    if ($current_char === '(')\
    \ {\n      $open_parens++;\n    } else if ($current_char === ')') {\n      $open_parens--;\n\
    \    }\n    $current_group .= $current_char;\n    if ($open_parens === 0) {\n\
    \      $paren_groups[] = $current_group;\n      $current_group = '';\n    }\n\
    \  }\n  return $paren_groups;\n}\n\nfunction candidate(...$args) {\n    return\
    \ separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((()))\
    \ (((())))\") !== array(\"()\", \"(())\", \"((()))\", \"(((())))\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(\"\
    (()(())((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ( ) (( )) (( )( ))\") !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } elseif ($char ===\
    \ ')') {\n            $open_parens--;\n        }\n        $current_group .= $char;\n\
    \        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } else if ($char\
    \ === ')') {\n            $open_parens--;\n        }\n        $current_group .=\
    \ $char;\n        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $result = [];\n  $open_parens = 0;\n  $current_string = '';\n  for ($i = 0;\
    \ $i < strlen($paren_string); $i++) {\n    $char = $paren_string[$i];\n    if\
    \ ($char === '(') {\n      $open_parens++;\n      $current_string .= $char;\n\
    \    } else if ($char === ')') {\n      $open_parens--;\n      $current_string\
    \ .= $char;\n      if ($open_parens === 0) {\n        $result[] = $current_string;\n\
    \        $current_string = '';\n      }\n    }\n  }\n  return $result;\n}\n\n\
    function candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \t$paren_string = str_replace(' ', '', $paren_string);\n\t$paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n\t$paren_string = str_replace('()', '', $paren_string);\n\
    \t$paren_string = str_replace('(', '', $paren_string);\n\t$paren_string = str_replace(')',\
    \ '', $paren_string);\n\t$paren_string = str_replace(' ', '', $paren_string);\n\
    \t$paren_string = str_replace(')(', ') (', $paren_string);\n\t$paren_string =\
    \ str_replace('()', '', $paren_string);\n\t$paren_string = str_replace('(', '',\
    \ $paren_string);\n\t$paren_string = str_replace(')', '', $paren_string);\n\t\
    $paren_string = str_replace(' ', '', $paren_string);\n\t$paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n\t$paren_string = str_replace('()', '', $paren_string);\n\
    \t$paren_string = str_replace('(', '', $paren_string);\n\t$paren_string = str_replace(')',\
    \ '', $paren_string);\n\t$paren_string = str_replace(' ', '', $paren_string);\n\
    \t$paren_string = str_replace(')(', ') (', $paren_string);\n\t$paren_string =\
    \ str_replace('()', '', $paren_string);\n\t$paren_string = str_replace('(', '',\
    \ $paren_string);\n\t$paren_string = str_replace(')', '', $paren_string);\n\t\
    $paren_string = str_replace(' ', '', $paren_string);\n\t$paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n\t$paren_string = str_replace('()', '', $paren_string);\n\
    \t$paren_string = str_replace('(', '', $paren_string);\n\t$paren_string = str_replace(')',\
    \ '', $paren_string);\n\t$paren_string =\nfunction candidate(...$args) {\n   \
    \ return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"candidate\", expecting\
    \ \"(\" in /tmp/tmpiqm5xlxq.php on line 35\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ if ($paren_string[$i] == ')') {\n            $open_parens--;\n            $current_group\
    \ .= ')';\n            if ($open_parens == 0) {\n                $paren_groups[]\
    \ = $current_group;\n                $current_group = '';\n            }\n   \
    \     }\n    }\n    return $paren_groups;\n}\n\nfunction candidate(...$args) {\n\
    \    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } elseif ($char ===\
    \ ')') {\n            $open_parens--;\n        }\n        $current_group .= $char;\n\
    \        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } else if ($char\
    \ === ')') {\n            $open_parens--;\n        }\n        $current_group .=\
    \ $char;\n        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ if ($paren_string[$i] == ')') {\n            $open_parens--;\n            $current_group\
    \ .= ')';\n            if ($open_parens == 0) {\n                $paren_groups[]\
    \ = $current_group;\n                $current_group = '';\n            }\n   \
    \     }\n    }\n    return $paren_groups;\n}\n\nfunction candidate(...$args) {\n\
    \    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } elseif ($char ===\
    \ ')') {\n            $open_parens--;\n        }\n        $current_group .= $char;\n\
    \        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } else if ($char\
    \ === ')') {\n            $open_parens--;\n        }\n        $current_group .=\
    \ $char;\n        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array =\
    \ str_split($paren_string);\n    $paren_groups = [];\n    $current_group = '';\n\
    \    $open_parens = 0;\n    foreach ($paren_array as $char) {\n        if ($char\
    \ === '(') {\n            $open_parens++;\n        } elseif ($char === ')') {\n\
    \            $open_parens--;\n        }\n        $current_group .= $char;\n  \
    \      if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } elseif ($char ===\
    \ ')') {\n            $open_parens--;\n        }\n        $current_group .= $char;\n\
    \        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $current_open_parens = 0;\n    for ($i =\
    \ 0; $i < strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n\
    \        if ($char === '(') {\n            $current_open_parens++;\n        }\
    \ elseif ($char === ')') {\n            $current_open_parens--;\n        }\n \
    \       $current_group .= $char;\n        if ($current_open_parens === 0) {\n\
    \            $paren_groups[] = $current_group;\n            $current_group = '';\n\
    \        }\n    }\n    return $paren_groups;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } elseif ($char ===\
    \ ')') {\n            $open_parens--;\n        }\n        $current_group .= $char;\n\
    \        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_groups = [];\n\
    \  $current_group = '';\n  $open_parens = 0;\n  for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n    $char = $paren_string[$i];\n    if ($char === '(') {\n      $open_parens++;\n\
    \    } elseif ($char === ')') {\n      $open_parens--;\n    }\n    $current_group\
    \ .= $char;\n    if ($open_parens === 0) {\n      $paren_groups[] = $current_group;\n\
    \      $current_group = '';\n    }\n  }\n  return $paren_groups;\n}\n\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $current_open_parens = 0;\n    for ($i =\
    \ 0; $i < strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n\
    \        if ($char === '(') {\n            $current_open_parens++;\n        }\
    \ else if ($char === ')') {\n            $current_open_parens--;\n        }\n\
    \        $current_group .= $char;\n        if ($current_open_parens === 0) {\n\
    \            $paren_groups[] = $current_group;\n            $current_group = '';\n\
    \        }\n    }\n    return $paren_groups;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $paren_count = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $current_char = $paren_string[$i];\n\
    \        if ($current_char === '(') {\n            $paren_count++;\n        }\
    \ else if ($current_char === ')') {\n            $paren_count--;\n        }\n\
    \        $current_group .= $current_char;\n        if ($paren_count === 0) {\n\
    \            $paren_groups[] = $current_group;\n            $current_group = '';\n\
    \        }\n    }\n    return $paren_groups;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $result = [];\n    $open_paren_count = 0;\n    $current_paren_group = '';\n\
    \    for ($i = 0; $i < strlen($paren_string); $i++) {\n        $current_char =\
    \ $paren_string[$i];\n        if ($current_char === '(') {\n            $open_paren_count++;\n\
    \            $current_paren_group .= $current_char;\n        } elseif ($current_char\
    \ === ')') {\n            $open_paren_count--;\n            $current_paren_group\
    \ .= $current_char;\n            if ($open_paren_count === 0) {\n            \
    \    $result[] = $current_paren_group;\n                $current_paren_group =\
    \ '';\n            }\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $current_depth = 0;\n    for ($i = 0; $i\
    \ < strlen($paren_string); $i++) {\n        $current_char = $paren_string[$i];\n\
    \        if ($current_char == '(') {\n            $current_depth++;\n        }\
    \ else {\n            $current_depth--;\n        }\n        $current_group .=\
    \ $current_char;\n        if ($current_depth == 0) {\n            $paren_groups[]\
    \ = $current_group;\n            $current_group = '';\n        }\n    }\n    return\
    \ $paren_groups;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } elseif ($char ===\
    \ ')') {\n            $open_parens--;\n        }\n        $current_group .= $char;\n\
    \        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } else if ($char\
    \ === ')') {\n            $open_parens--;\n        }\n        $current_group .=\
    \ $char;\n        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_groups = [];\n\
    \  $current_group = '';\n  $open_parens = 0;\n  for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n    $char = $paren_string[$i];\n    if ($char === '(') {\n      $open_parens++;\n\
    \    } else if ($char === ')') {\n      $open_parens--;\n    }\n    $current_group\
    \ .= $char;\n    if ($open_parens === 0) {\n      $paren_groups[] = $current_group;\n\
    \      $current_group = '';\n    }\n  }\n  return $paren_groups;\n}\n\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } elseif ($char ===\
    \ ')') {\n            $open_parens--;\n        }\n        $current_group .= $char;\n\
    \        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $result = [];\n    $open_paren_count = 0;\n    $current_group = '';\n   \
    \ for ($i = 0; $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i]\
    \ == '(') {\n            $open_paren_count++;\n            $current_group .= '(';\n\
    \        } else if ($paren_string[$i] == ')') {\n            $open_paren_count--;\n\
    \            $current_group .= ')';\n        }\n        if ($open_paren_count\
    \ == 0) {\n            $result[] = $current_group;\n            $current_group\
    \ = '';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpv1le9dmu.php:33\n\
    Stack trace:\n#0 /tmp/tmpv1le9dmu.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpv1le9dmu.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('((',\
    \ '( (', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\" in /tmp/tmpxr62in8n.php\
    \ on line 33\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } else if ($char\
    \ === ')') {\n            $open_parens--;\n        }\n        $current_group .=\
    \ $char;\n        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } else if ($char\
    \ === ')') {\n            $open_parens--;\n        }\n        $current_group .=\
    \ $char;\n        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(())',\
    \ '', $paren_string);\n    $paren_string = str_replace('(()())', '', $paren_string);\n\
    \    $paren_string = str_replace('(()()())', '', $paren_string);\n    $paren_string\
    \ = str_replace('(()()()())', '', $paren_string);\n    $paren_string = str_replace('(()()()()())',\
    \ '', $paren_string);\n    $paren_string = str_replace('(()()()()()())', '', $paren_string);\n\
    \    $paren_string = str_replace('(()()()()()()())', '', $paren_string);\n   \
    \ $paren_string = str_replace('(()()()()()()()())', '', $paren_string);\n    $paren_string\
    \ = str_replace('(()()()()()()()()())', '', $paren_string);\n    $paren_string\
    \ = str_replace('(()()()()()()()()()())', '', $paren_string);\n    $paren_string\
    \ = str_replace('(()()()()()()()()()()())', '', $paren_string);\n    $paren_string\
    \ = str_replace('(()()()()()()()()()()()())', '', $paren_string);\n    $paren_string\
    \ = str_replace('(()()()()()()()()()()()()())', '', $paren_string);\n    $paren_string\
    \ = str_replace('(()()()()()()()()()()()()()())', '', $paren_string);\n    $paren_string\
    \ = str_replace('(()()()()()()()()()()()()()()())', '', $paren_string);\n    $paren_string\
    \ = str_replace('(()()()()()()()()()()()()()()()())', '', $paren_string);\n  \
    \  $paren_string = str_replace('(()()()()()\nfunction candidate(...$args) {\n\
    \    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected string content \"(()()()()()\"\
    \ in /tmp/tmpk4xm7ka1.php on line 27\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_paren_group = '';\n    $open_parens = 0;\n    for ($i = 0;\
    \ $i < strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n  \
    \      if ($char === '(') {\n            $open_parens++;\n        } else if ($char\
    \ === ')') {\n            $open_parens--;\n        }\n        $current_paren_group\
    \ .= $char;\n        if ($open_parens === 0) {\n            $paren_groups[] =\
    \ $current_paren_group;\n            $current_paren_group = '';\n        }\n \
    \   }\n    return $paren_groups;\n}\n\nfunction candidate(...$args) {\n    return\
    \ separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((()))\
    \ (((())))\") !== array(\"()\", \"(())\", \"((()))\", \"(((())))\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(\"\
    (()(())((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ( ) (( )) (( )( ))\") !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $paren_count = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $current_char = $paren_string[$i];\n\
    \        if ($current_char === '(') {\n            $paren_count++;\n        }\
    \ elseif ($current_char === ')') {\n            $paren_count--;\n        }\n \
    \       $current_group .= $current_char;\n        if ($paren_count === 0) {\n\
    \            $paren_groups[] = $current_group;\n            $current_group = '';\n\
    \        }\n    }\n    return $paren_groups;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $start = 0;\n    $end = 0;\n    $open_parens = 0;\n    $close_parens\
    \ = 0;\n    for ($i = 0; $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i]\
    \ == '(') {\n            $open_parens++;\n            if ($open_parens == 1) {\n\
    \                $start = $i;\n            }\n        } else {\n            $close_parens++;\n\
    \            if ($close_parens == $open_parens) {\n                $end = $i;\n\
    \                $paren_groups[] = substr($paren_string, $start, $end - $start\
    \ + 1);\n                $open_parens = 0;\n                $close_parens = 0;\n\
    \            }\n        }\n    }\n    return $paren_groups;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ if ($paren_string[$i] == ')') {\n            $open_parens--;\n            $current_group\
    \ .= ')';\n            if ($open_parens == 0) {\n                $paren_groups[]\
    \ = $current_group;\n                $current_group = '';\n            }\n   \
    \     }\n    }\n    return $paren_groups;\n}\n\nfunction candidate(...$args) {\n\
    \    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } elseif ($char ===\
    \ ')') {\n            $open_parens--;\n        }\n        $current_group .= $char;\n\
    \        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } else if ($char\
    \ === ')') {\n            $open_parens--;\n        }\n        $current_group .=\
    \ $char;\n        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_groups = [];\n\
    \  $current_group = '';\n  $open_parens = 0;\n  for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n    $char = $paren_string[$i];\n    if ($char === '(') {\n      $open_parens++;\n\
    \    } else if ($char === ')') {\n      $open_parens--;\n    }\n    $current_group\
    \ .= $char;\n    if ($open_parens === 0) {\n      $paren_groups[] = $current_group;\n\
    \      $current_group = '';\n    }\n  }\n  return $paren_groups;\n}\n\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ if ($paren_string[$i] == ')') {\n            $open_parens--;\n            $current_group\
    \ .= ')';\n            if ($open_parens == 0) {\n                $paren_groups[]\
    \ = $current_group;\n                $current_group = '';\n            }\n   \
    \     }\n    }\n    return $paren_groups;\n}\n\nfunction candidate(...$args) {\n\
    \    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $paren_count = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $paren_count++;\n        } else if ($char\
    \ === ')') {\n            $paren_count--;\n        }\n        $current_group .=\
    \ $char;\n        if ($paren_count === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } elseif ($char ===\
    \ ')') {\n            $open_parens--;\n        }\n        $current_group .= $char;\n\
    \        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $paren_count = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $paren_count++;\n        } else if ($char\
    \ === ')') {\n            $paren_count--;\n        }\n        $current_group .=\
    \ $char;\n        if ($paren_count === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_paren_count = 0;\n    for ($i = 0;\
    \ $i < strlen($paren_string); $i++) {\n        $current_char = $paren_string[$i];\n\
    \        if ($current_char === '(') {\n            $open_paren_count++;\n    \
    \    } else if ($current_char === ')') {\n            $open_paren_count--;\n \
    \       }\n        $current_group .= $current_char;\n        if ($open_paren_count\
    \ === 0) {\n            $paren_groups[] = $current_group;\n            $current_group\
    \ = '';\n        }\n    }\n    return $paren_groups;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } else if ($char\
    \ === ')') {\n            $open_parens--;\n        }\n        $current_group .=\
    \ $char;\n        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $paren_count = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $paren_count++;\n        } elseif ($char ===\
    \ ')') {\n            $paren_count--;\n        }\n        $current_group .= $char;\n\
    \        if ($paren_count === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } else if ($char\
    \ === ')') {\n            $open_parens--;\n        }\n        $current_group .=\
    \ $char;\n        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ array();\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0;\
    \ $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n\
    \            $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } else if ($char\
    \ === ')') {\n            $open_parens--;\n        }\n        $current_group .=\
    \ $char;\n        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $current_depth = 0;\n    for ($i = 0; $i\
    \ < strlen($paren_string); $i++) {\n        $current_char = $paren_string[$i];\n\
    \        if ($current_char == '(') {\n            $current_depth++;\n        }\
    \ elseif ($current_char == ')') {\n            $current_depth--;\n        }\n\
    \        $current_group .= $current_char;\n        if ($current_depth == 0) {\n\
    \            $paren_groups[] = $current_group;\n            $current_group = '';\n\
    \        }\n    }\n    return $paren_groups;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_paren_group = '';\n    $open_paren_count = 0;\n    for ($i\
    \ = 0; $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(')\
    \ {\n            $open_paren_count++;\n            $current_paren_group .= '(';\n\
    \        } else if ($paren_string[$i] == ')') {\n            $open_paren_count--;\n\
    \            $current_paren_group .= ')';\n        }\n        if ($open_paren_count\
    \ == 0) {\n            array_push($paren_groups, $current_paren_group);\n    \
    \        $current_paren_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $paren_count = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $current_char = $paren_string[$i];\n\
    \        if ($current_char === '(') {\n            $paren_count++;\n        }\
    \ else if ($current_char === ')') {\n            $paren_count--;\n        }\n\
    \        $current_group .= $current_char;\n        if ($paren_count === 0) {\n\
    \            $paren_groups[] = $current_group;\n            $current_group = '';\n\
    \        }\n    }\n    return $paren_groups;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } else if ($char\
    \ === ')') {\n            $open_parens--;\n        }\n        $current_group .=\
    \ $char;\n        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' \
    \ ', ' ', $paren_string);\n    $paren_string = explode(' ', $paren_string);\n\
    \    $paren_string = array_filter($paren_string);\n    $paren_string = array_values($paren_string);\n\
    \    $paren_string = array_chunk($paren_string, 2);\n    $paren_string = array_map(function($a)\
    \ {\n        return $a[0] . $a[1];\n    }, $paren_string);\n    return $paren_string;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp08zadecs.php:30\n\
    Stack trace:\n#0 /tmp/tmp08zadecs.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp08zadecs.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_groups = [];\n\
    \  $current_group = '';\n  $paren_count = 0;\n  for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n    $current_char = $paren_string[$i];\n    if ($current_char === '(')\
    \ {\n      $paren_count++;\n    } else if ($current_char === ')') {\n      $paren_count--;\n\
    \    }\n    $current_group .= $current_char;\n    if ($paren_count === 0) {\n\
    \      $paren_groups[] = $current_group;\n      $current_group = '';\n    }\n\
    \  }\n  return $paren_groups;\n}\n\nfunction candidate(...$args) {\n    return\
    \ separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((()))\
    \ (((())))\") !== array(\"()\", \"(())\", \"((()))\", \"(((())))\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(\"\
    (()(())((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ( ) (( )) (( )( ))\") !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    // Your code here\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfbmkz9q7.php:17\n\
    Stack trace:\n#0 /tmp/tmpfbmkz9q7.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpfbmkz9q7.php\
    \ on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } elseif ($char ===\
    \ ')') {\n            $open_parens--;\n        }\n        $current_group .= $char;\n\
    \        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \t$paren_string = str_replace(' ', '', $paren_string);\n\t$paren_groups = [];\n\
    \t$current_group = '';\n\t$open_parens = 0;\n\tfor ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n\t\t$current_char = $paren_string[$i];\n\t\tif ($current_char == '(')\
    \ {\n\t\t\t$open_parens++;\n\t\t} elseif ($current_char == ')') {\n\t\t\t$open_parens--;\n\
    \t\t}\n\t\t$current_group .= $current_char;\n\t\tif ($open_parens == 0) {\n\t\t\
    \t$paren_groups[] = $current_group;\n\t\t\t$current_group = '';\n\t\t}\n\t}\n\t\
    return $paren_groups;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } elseif ($char ===\
    \ ')') {\n            $open_parens--;\n        }\n        $current_group .= $char;\n\
    \        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ array();\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0;\
    \ $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n\
    \            $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } elseif ($char ===\
    \ ')') {\n            $open_parens--;\n        }\n        $current_group .= $char;\n\
    \        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $start = 0;\n    $end = 0;\n    $open_parens = 0;\n    for ($i = 0;\
    \ $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n\
    \            if ($open_parens == 0) {\n                $start = $i;\n        \
    \    }\n            $open_parens++;\n        } else {\n            $open_parens--;\n\
    \            if ($open_parens == 0) {\n                $end = $i;\n          \
    \      $paren_groups[] = substr($paren_string, $start, $end - $start + 1);\n \
    \           }\n        }\n    }\n    return $paren_groups;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $current_char = $paren_string[$i];\n\
    \        if ($current_char === '(') {\n            $open_parens++;\n        }\
    \ else if ($current_char === ')') {\n            $open_parens--;\n        }\n\
    \        $current_group .= $current_char;\n        if ($open_parens === 0) {\n\
    \            $paren_groups[] = $current_group;\n            $current_group = '';\n\
    \        }\n    }\n    return $paren_groups;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace(' ',\
    \ ')(', $paren_string);\n    $paren_string = '('.$paren_string.')';\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    return explode(' ', $paren_string);\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1luk1h7_.php:26\n\
    Stack trace:\n#0 /tmp/tmp1luk1h7_.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp1luk1h7_.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $paren_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n        $char = $paren_string[$i];\n        if ($char === '(') {\n\
    \            $open_parens++;\n        } elseif ($char === ')') {\n           \
    \ $open_parens--;\n        }\n        $paren_group .= $char;\n        if ($open_parens\
    \ === 0) {\n            $paren_groups[] = $paren_group;\n            $paren_group\
    \ = '';\n        }\n    }\n    return $paren_groups;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_paren_count = 0;\n    for ($i = 0;\
    \ $i < strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n  \
    \      if ($char === '(') {\n            $open_paren_count++;\n        } elseif\
    \ ($char === ')') {\n            $open_paren_count--;\n        }\n        $current_group\
    \ .= $char;\n        if ($open_paren_count === 0) {\n            $paren_groups[]\
    \ = $current_group;\n            $current_group = '';\n        }\n    }\n    return\
    \ $paren_groups;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } elseif ($char ===\
    \ ')') {\n            $open_parens--;\n        }\n        $current_group .= $char;\n\
    \        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $paren_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n        $char = $paren_string[$i];\n        if ($char === '(') {\n\
    \            $open_parens++;\n        } elseif ($char === ')') {\n           \
    \ $open_parens--;\n        }\n        $paren_group .= $char;\n        if ($open_parens\
    \ === 0) {\n            $paren_groups[] = $paren_group;\n            $paren_group\
    \ = '';\n        }\n    }\n    return $paren_groups;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } else if ($char\
    \ === ')') {\n            $open_parens--;\n        }\n        $current_group .=\
    \ $char;\n        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } else if ($char\
    \ === ')') {\n            $open_parens--;\n        }\n        $current_group .=\
    \ $char;\n        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } else if ($char\
    \ === ')') {\n            $open_parens--;\n        }\n        $current_group .=\
    \ $char;\n        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } else if ($char\
    \ === ')') {\n            $open_parens--;\n        }\n        $current_group .=\
    \ $char;\n        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } else if ($char\
    \ === ')') {\n            $open_parens--;\n        }\n        $current_group .=\
    \ $char;\n        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_groups = [];\n\
    \  $current_group = '';\n  $open_parens = 0;\n  for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n    if ($paren_string[$i] === '(') {\n      $open_parens++;\n     \
    \ $current_group .= '(';\n    } else {\n      $open_parens--;\n      $current_group\
    \ .= ')';\n    }\n    if ($open_parens === 0) {\n      $paren_groups[] = $current_group;\n\
    \      $current_group = '';\n    }\n  }\n  return $paren_groups;\n}\n\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_groups = [];\n\
    \  $current_group = '';\n  $open_parens = 0;\n  for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n    $char = $paren_string[$i];\n    if ($char === '(') {\n      $open_parens++;\n\
    \    } elseif ($char === ')') {\n      $open_parens--;\n    }\n    $current_group\
    \ .= $char;\n    if ($open_parens === 0) {\n      $paren_groups[] = $current_group;\n\
    \      $current_group = '';\n    }\n  }\n  return $paren_groups;\n}\n\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $paren_count = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $paren_count++;\n        } elseif ($char ===\
    \ ')') {\n            $paren_count--;\n        }\n        $current_group .= $char;\n\
    \        if ($paren_count === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } elseif ($char ===\
    \ ')') {\n            $open_parens--;\n        }\n        $current_group .= $char;\n\
    \        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } elseif ($char ===\
    \ ')') {\n            $open_parens--;\n        }\n        $current_group .= $char;\n\
    \        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_groups = [];\n\
    \  $open_parens = 0;\n  $current_group = '';\n  for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n    if ($paren_string[$i] === '(') {\n      $open_parens++;\n     \
    \ $current_group .= '(';\n    } else {\n      $open_parens--;\n      $current_group\
    \ .= ')';\n    }\n    if ($open_parens === 0) {\n      $paren_groups[] = $current_group;\n\
    \      $current_group = '';\n    }\n  }\n  return $paren_groups;\n}\n\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $paren_count = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $paren_count++;\n        } elseif ($char ===\
    \ ')') {\n            $paren_count--;\n        }\n        $current_group .= $char;\n\
    \        if ($paren_count === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\n\
    function candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"candidate\", expecting\
    \ \"(\" in /tmp/tmpdl65lrkq.php on line 35\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ array();\n    $current_group = '';\n    $paren_count = 0;\n    for ($i = 0;\
    \ $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n\
    \            $paren_count++;\n        } else {\n            $paren_count--;\n\
    \        }\n        $current_group .= $paren_string[$i];\n        if ($paren_count\
    \ == 0) {\n            $paren_groups[] = $current_group;\n            $current_group\
    \ = '';\n        }\n    }\n    return $paren_groups;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $paren_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n        $char = $paren_string[$i];\n        if ($char === '(') {\n\
    \            $open_parens++;\n        } elseif ($char === ')') {\n           \
    \ $open_parens--;\n        }\n        $paren_group .= $char;\n        if ($open_parens\
    \ === 0) {\n            $paren_groups[] = $paren_group;\n            $paren_group\
    \ = '';\n        }\n    }\n    return $paren_groups;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } else if ($char\
    \ === ')') {\n            $open_parens--;\n        }\n        $current_group .=\
    \ $char;\n        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $open_parens = 0;\n    $current_group = '';\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } elseif ($char ===\
    \ ')') {\n            $open_parens--;\n        }\n        $current_group .= $char;\n\
    \        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } elseif ($char ===\
    \ ')') {\n            $open_parens--;\n        }\n        $current_group .= $char;\n\
    \        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n       \
    \ if ($char === '(') {\n            $open_parens++;\n        } else if ($char\
    \ === ')') {\n            $open_parens--;\n        }\n        $current_group .=\
    \ $char;\n        if ($open_parens === 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ [];\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n  \
    \          $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\n\
    function candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"candidate\", expecting\
    \ \"(\" in /tmp/tmp_2v29gl8.php on line 35\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ array();\n    $current_group = '';\n    $open_parens = 0;\n    for ($i = 0;\
    \ $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n\
    \            $open_parens++;\n            $current_group .= '(';\n        } else\
    \ {\n            $open_parens--;\n            $current_group .= ')';\n       \
    \ }\n        if ($open_parens == 0) {\n            $paren_groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $result = [];\n\
    \    $start = 0;\n    $end = 0;\n    $open_parens = 0;\n    $closed_parens = 0;\n\
    \    for ($i = 0; $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i]\
    \ == '(') {\n            $open_parens++;\n            if ($open_parens == 1) {\n\
    \                $start = $i;\n            }\n        } else {\n            $closed_parens++;\n\
    \            if ($closed_parens == $open_parens) {\n                $end = $i;\n\
    \                $result[] = substr($paren_string, $start, $end - $start + 1);\n\
    \                $open_parens = 0;\n                $closed_parens = 0;\n    \
    \        }\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the list of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
    // ['()', '(())', '(()())']\nfunction separate_paren_groups($paren_string) {\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_groups = [];\n\
    \  $current_group = '';\n  $open_parens = 0;\n  for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n    if ($paren_string[$i] === '(') {\n      $open_parens++;\n     \
    \ $current_group .= '(';\n    } else {\n      $open_parens--;\n      $current_group\
    \ .= ')';\n    }\n    if ($open_parens === 0) {\n      $paren_groups[] = $current_group;\n\
    \      $current_group = '';\n    }\n  }\n  return $paren_groups;\n}\n\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
