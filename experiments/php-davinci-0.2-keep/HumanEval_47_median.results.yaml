name: HumanEval_47_median
language: php
results:
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    $mid = floor($len /\
    \ 2);\n    if ($len % 2 == 0) {\n        return ($l[$mid - 1] + $l[$mid]) / 2;\n\
    \    } else {\n        return $l[$mid];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppvffjqan.php:24\n\
    Stack trace:\n#0 /tmp/tmppvffjqan.php(30): test()\n#1 {main}\n  thrown in /tmp/tmppvffjqan.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjydqykfh.php:23\n\
    Stack trace:\n#0 /tmp/tmpjydqykfh.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjydqykfh.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpe06go54b.php:23\n\
    Stack trace:\n#0 /tmp/tmpe06go54b.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpe06go54b.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $n = count($l);\n    if ($n % 2 == 0)\
    \ {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmp6e4ed01l.php:9\nStack trace:\n\
    #0 /tmp/tmp6e4ed01l.php(18): median()\n#1 /tmp/tmp6e4ed01l.php(22): candidate()\n\
    #2 /tmp/tmp6e4ed01l.php(29): test()\n#3 {main}\n  thrown in /tmp/tmp6e4ed01l.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpercz4h_0.php:23\n\
    Stack trace:\n#0 /tmp/tmpercz4h_0.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpercz4h_0.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmkykn241.php:23\n\
    Stack trace:\n#0 /tmp/tmpmkykn241.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpmkykn241.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxy50l2m2.php:23\n\
    Stack trace:\n#0 /tmp/tmpxy50l2m2.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpxy50l2m2.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpt7mlz9fj.php:23\n\
    Stack trace:\n#0 /tmp/tmpt7mlz9fj.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpt7mlz9fj.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmikfve_c.php:23\n\
    Stack trace:\n#0 /tmp/tmpmikfve_c.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpmikfve_c.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjgk9nl6m.php:23\n\
    Stack trace:\n#0 /tmp/tmpjgk9nl6m.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjgk9nl6m.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp42j6ofyg.php:23\n\
    Stack trace:\n#0 /tmp/tmp42j6ofyg.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp42j6ofyg.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmyyw7slf.php:23\n\
    Stack trace:\n#0 /tmp/tmpmyyw7slf.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpmyyw7slf.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmph2krkaiw.php:23\n\
    Stack trace:\n#0 /tmp/tmph2krkaiw.php(29): test()\n#1 {main}\n  thrown in /tmp/tmph2krkaiw.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp16nkh1gg.php:23\n\
    Stack trace:\n#0 /tmp/tmp16nkh1gg.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp16nkh1gg.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0b0ob2v8.php:23\n\
    Stack trace:\n#0 /tmp/tmp0b0ob2v8.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp0b0ob2v8.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $n = count($l);\n    if ($n % 2 == 0)\
    \ {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmpam4g73kj.php:9\nStack trace:\n\
    #0 /tmp/tmpam4g73kj.php(18): median()\n#1 /tmp/tmpam4g73kj.php(22): candidate()\n\
    #2 /tmp/tmpam4g73kj.php(29): test()\n#3 {main}\n  thrown in /tmp/tmpam4g73kj.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4vu0cbfp.php:23\n\
    Stack trace:\n#0 /tmp/tmp4vu0cbfp.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp4vu0cbfp.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $n = count($l);\n    if ($n % 2 == 0)\
    \ {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmpxut3z7n4.php:9\nStack trace:\n\
    #0 /tmp/tmpxut3z7n4.php(18): median()\n#1 /tmp/tmpxut3z7n4.php(22): candidate()\n\
    #2 /tmp/tmpxut3z7n4.php(29): test()\n#3 {main}\n  thrown in /tmp/tmpxut3z7n4.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpclh7kp6z.php:23\n\
    Stack trace:\n#0 /tmp/tmpclh7kp6z.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpclh7kp6z.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = array_values($l);\n    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2 - 1] + $l[$n / 2]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpk4fkq3c4.php:24\n\
    Stack trace:\n#0 /tmp/tmpk4fkq3c4.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpk4fkq3c4.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4jh7e_57.php:23\n\
    Stack trace:\n#0 /tmp/tmp4jh7e_57.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp4jh7e_57.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $n = count($l);\n    if ($n % 2 == 0)\
    \ {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmp1g__ab7d.php:9\nStack trace:\n\
    #0 /tmp/tmp1g__ab7d.php(18): median()\n#1 /tmp/tmp1g__ab7d.php(22): candidate()\n\
    #2 /tmp/tmp1g__ab7d.php(29): test()\n#3 {main}\n  thrown in /tmp/tmp1g__ab7d.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $n = count($l);\n    sort($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmped0y1cja.php:23\n\
    Stack trace:\n#0 /tmp/tmped0y1cja.php(29): test()\n#1 {main}\n  thrown in /tmp/tmped0y1cja.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $len = count($l);\n    if ($len % 2 ==\
    \ 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmph08jz_5q.php:9\nStack trace:\n\
    #0 /tmp/tmph08jz_5q.php(18): median()\n#1 /tmp/tmph08jz_5q.php(22): candidate()\n\
    #2 /tmp/tmph08jz_5q.php(29): test()\n#3 {main}\n  thrown in /tmp/tmph08jz_5q.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxq6288_y.php:23\n\
    Stack trace:\n#0 /tmp/tmpxq6288_y.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpxq6288_y.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvep3knst.php:23\n\
    Stack trace:\n#0 /tmp/tmpvep3knst.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpvep3knst.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpf4klcrq1.php:23\n\
    Stack trace:\n#0 /tmp/tmpf4klcrq1.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpf4klcrq1.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0w9t4ocp.php:23\n\
    Stack trace:\n#0 /tmp/tmp0w9t4ocp.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp0w9t4ocp.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphzrhpi7b.php:23\n\
    Stack trace:\n#0 /tmp/tmphzrhpi7b.php(29): test()\n#1 {main}\n  thrown in /tmp/tmphzrhpi7b.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpftad94k_.php:23\n\
    Stack trace:\n#0 /tmp/tmpftad94k_.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpftad94k_.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqgq3_7mi.php:23\n\
    Stack trace:\n#0 /tmp/tmpqgq3_7mi.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpqgq3_7mi.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $sorted = sort($l);\n    $length = count($l);\n    $middle\
    \ = floor($length / 2);\n    if ($length % 2) {\n        return $l[$middle];\n\
    \    } else {\n        return ($l[$middle - 1] + $l[$middle]) / 2;\n    }\n}\n\
    \nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_kfh_wid.php:24\n\
    Stack trace:\n#0 /tmp/tmp_kfh_wid.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp_kfh_wid.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2wvkfy92.php:23\n\
    Stack trace:\n#0 /tmp/tmp2wvkfy92.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2wvkfy92.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbtjf1se5.php:23\n\
    Stack trace:\n#0 /tmp/tmpbtjf1se5.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbtjf1se5.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n\
    \ / 2 - 1] + $l[$n / 2]) / 2;\n    } else {\n        return $l[($n - 1) / 2];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000,\
    \ 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpt5a7gfg9.php:21\n\
    Stack trace:\n#0 /tmp/tmpt5a7gfg9.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpt5a7gfg9.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6ohf8a53.php:23\n\
    Stack trace:\n#0 /tmp/tmp6ohf8a53.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6ohf8a53.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp12mi7o5k.php:23\n\
    Stack trace:\n#0 /tmp/tmp12mi7o5k.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp12mi7o5k.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $sorted = $l;\n    sort($sorted);\n    $n = count($sorted);\n\
    \    if ($n % 2 == 0) {\n        return ($sorted[$n / 2] + $sorted[$n / 2 - 1])\
    \ / 2;\n    } else {\n        return $sorted[$n / 2];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwat3i2ti.php:24\n\
    Stack trace:\n#0 /tmp/tmpwat3i2ti.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpwat3i2ti.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwd8y4ypa.php:23\n\
    Stack trace:\n#0 /tmp/tmpwd8y4ypa.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpwd8y4ypa.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_85j9w9k.php:23\n\
    Stack trace:\n#0 /tmp/tmp_85j9w9k.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp_85j9w9k.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $n = count($l);\n    if ($n == 0) {\n        return null;\n\
    \    }\n    sort($l);\n    $mid = intval($n / 2);\n    if ($n % 2 == 0) {\n  \
    \      return ($l[$mid] + $l[$mid - 1]) / 2;\n    } else {\n        return $l[$mid];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000,\
    \ 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppr6nxpwx.php:27\n\
    Stack trace:\n#0 /tmp/tmppr6nxpwx.php(33): test()\n#1 {main}\n  thrown in /tmp/tmppr6nxpwx.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $n = count($l);\n    if ($n % 2 == 0)\
    \ {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmp756q6j66.php:9\nStack trace:\n\
    #0 /tmp/tmp756q6j66.php(18): median()\n#1 /tmp/tmp756q6j66.php(22): candidate()\n\
    #2 /tmp/tmp756q6j66.php(29): test()\n#3 {main}\n  thrown in /tmp/tmp756q6j66.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_t7pn5_5.php:23\n\
    Stack trace:\n#0 /tmp/tmp_t7pn5_5.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp_t7pn5_5.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $n = count($l);\n    if ($n % 2 == 0)\
    \ {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmppxs4en45.php:9\nStack trace:\n\
    #0 /tmp/tmppxs4en45.php(18): median()\n#1 /tmp/tmppxs4en45.php(22): candidate()\n\
    #2 /tmp/tmppxs4en45.php(29): test()\n#3 {main}\n  thrown in /tmp/tmppxs4en45.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3ki73d81.php:23\n\
    Stack trace:\n#0 /tmp/tmp3ki73d81.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp3ki73d81.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpg8hqw9ek.php:23\n\
    Stack trace:\n#0 /tmp/tmpg8hqw9ek.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpg8hqw9ek.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4x31n_bm.php:23\n\
    Stack trace:\n#0 /tmp/tmp4x31n_bm.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp4x31n_bm.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $sorted = $l;\n    sort($sorted);\n    $len = count($sorted);\n\
    \    if ($len % 2 == 0) {\n        return ($sorted[$len / 2] + $sorted[$len /\
    \ 2 - 1]) / 2;\n    } else {\n        return $sorted[($len - 1) / 2];\n    }\n\
    }\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplhcbvdqg.php:24\n\
    Stack trace:\n#0 /tmp/tmplhcbvdqg.php(30): test()\n#1 {main}\n  thrown in /tmp/tmplhcbvdqg.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    $mid = floor($len /\
    \ 2);\n    if ($len % 2 == 0) {\n        return ($l[$mid - 1] + $l[$mid]) / 2;\n\
    \    } else {\n        return $l[$mid];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpe1n1_8bz.php:24\n\
    Stack trace:\n#0 /tmp/tmpe1n1_8bz.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpe1n1_8bz.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbdq64djo.php:23\n\
    Stack trace:\n#0 /tmp/tmpbdq64djo.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbdq64djo.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpu6u2fv1f.php:23\n\
    Stack trace:\n#0 /tmp/tmpu6u2fv1f.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpu6u2fv1f.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $n = count($l);\n    if ($n % 2 == 0)\
    \ {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmp1uydbc9x.php:9\nStack trace:\n\
    #0 /tmp/tmp1uydbc9x.php(18): median()\n#1 /tmp/tmp1uydbc9x.php(22): candidate()\n\
    #2 /tmp/tmp1uydbc9x.php(29): test()\n#3 {main}\n  thrown in /tmp/tmp1uydbc9x.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3tba7b_m.php:23\n\
    Stack trace:\n#0 /tmp/tmp3tba7b_m.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp3tba7b_m.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $length = count($l);\n    if ($length\
    \ % 2 == 0) {\n        return ($l[$length / 2] + $l[$length / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$length / 2];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmpljbho3mx.php:9\nStack trace:\n\
    #0 /tmp/tmpljbho3mx.php(18): median()\n#1 /tmp/tmpljbho3mx.php(22): candidate()\n\
    #2 /tmp/tmpljbho3mx.php(29): test()\n#3 {main}\n  thrown in /tmp/tmpljbho3mx.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $len = count($l);\n    if ($len % 2 ==\
    \ 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[$len / 2];\n    }\n}\n\nfunction candidate(...$args) {\n  \
    \  return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmpxsur051b.php:9\nStack trace:\n\
    #0 /tmp/tmpxsur051b.php(18): median()\n#1 /tmp/tmpxsur051b.php(22): candidate()\n\
    #2 /tmp/tmpxsur051b.php(29): test()\n#3 {main}\n  thrown in /tmp/tmpxsur051b.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[$len / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjkgh57n2.php:23\n\
    Stack trace:\n#0 /tmp/tmpjkgh57n2.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjkgh57n2.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5gz3w8c4.php:23\n\
    Stack trace:\n#0 /tmp/tmp5gz3w8c4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp5gz3w8c4.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $len = count($l);\n    if ($len % 2 ==\
    \ 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmprtmj3inu.php:9\nStack trace:\n\
    #0 /tmp/tmprtmj3inu.php(18): median()\n#1 /tmp/tmprtmj3inu.php(22): candidate()\n\
    #2 /tmp/tmprtmj3inu.php(29): test()\n#3 {main}\n  thrown in /tmp/tmprtmj3inu.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqa_ee0w0.php:23\n\
    Stack trace:\n#0 /tmp/tmpqa_ee0w0.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpqa_ee0w0.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $n = count($l);\n    if ($n % 2 == 0)\
    \ {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmpufyzq59z.php:9\nStack trace:\n\
    #0 /tmp/tmpufyzq59z.php(18): median()\n#1 /tmp/tmpufyzq59z.php(22): candidate()\n\
    #2 /tmp/tmpufyzq59z.php(29): test()\n#3 {main}\n  thrown in /tmp/tmpufyzq59z.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqeyjw2ih.php:23\n\
    Stack trace:\n#0 /tmp/tmpqeyjw2ih.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpqeyjw2ih.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmkkln4xr.php:23\n\
    Stack trace:\n#0 /tmp/tmpmkkln4xr.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpmkkln4xr.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpltfoah98.php:23\n\
    Stack trace:\n#0 /tmp/tmpltfoah98.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpltfoah98.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\tsort($l);\n\t$n = count($l);\n\tif ($n % 2 == 0) {\n\t\treturn\
    \ ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n\t} else {\n\t\treturn $l[$n / 2];\n\t}\n\
    }\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_vpa4w34.php:23\n\
    Stack trace:\n#0 /tmp/tmp_vpa4w34.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp_vpa4w34.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $size = count($l);\n    if ($size % 2 == 0)\
    \ {\n        return ($l[$size / 2] + $l[$size / 2 - 1]) / 2;\n    } else {\n \
    \       return $l[$size / 2];\n    }\n}\n\nfunction candidate(...$args) {\n  \
    \  return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpldvojkp5.php:23\n\
    Stack trace:\n#0 /tmp/tmpldvojkp5.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpldvojkp5.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphy0zoc21.php:23\n\
    Stack trace:\n#0 /tmp/tmphy0zoc21.php(29): test()\n#1 {main}\n  thrown in /tmp/tmphy0zoc21.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $n = count($l);\n    if ($n == 0) {\n        return null;\n\
    \    }\n    sort($l);\n    $mid = $n / 2;\n    if ($n % 2 == 0) {\n        return\
    \ ($l[$mid - 1] + $l[$mid]) / 2;\n    } else {\n        return $l[$mid];\n   \
    \ }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000,\
    \ 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmps4kppot2.php:27\n\
    Stack trace:\n#0 /tmp/tmps4kppot2.php(33): test()\n#1 {main}\n  thrown in /tmp/tmps4kppot2.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $n = count($l);\n    if ($n % 2 == 0)\
    \ {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmpljyam6u2.php:9\nStack trace:\n\
    #0 /tmp/tmpljyam6u2.php(18): median()\n#1 /tmp/tmpljyam6u2.php(22): candidate()\n\
    #2 /tmp/tmpljyam6u2.php(29): test()\n#3 {main}\n  thrown in /tmp/tmpljyam6u2.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $len = count($l);\n    if ($len % 2 ==\
    \ 0) {\n        $median = ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n\
    \        $median = $l[($len - 1) / 2];\n    }\n    return $median;\n}\n\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmpqc3xrgq3.php:9\nStack trace:\n\
    #0 /tmp/tmpqc3xrgq3.php(19): median()\n#1 /tmp/tmpqc3xrgq3.php(23): candidate()\n\
    #2 /tmp/tmpqc3xrgq3.php(30): test()\n#3 {main}\n  thrown in /tmp/tmpqc3xrgq3.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp42ki9_bm.php:23\n\
    Stack trace:\n#0 /tmp/tmp42ki9_bm.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp42ki9_bm.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmps4jrk1sr.php:23\n\
    Stack trace:\n#0 /tmp/tmps4jrk1sr.php(29): test()\n#1 {main}\n  thrown in /tmp/tmps4jrk1sr.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $sorted = $l;\n    sort($sorted);\n    $n = count($sorted);\n\
    \    if ($n % 2 == 0) {\n        return ($sorted[$n / 2] + $sorted[$n / 2 - 1])\
    \ / 2;\n    } else {\n        return $sorted[$n / 2];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_2t876ct.php:24\n\
    Stack trace:\n#0 /tmp/tmp_2t876ct.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp_2t876ct.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuyp95rrc.php:23\n\
    Stack trace:\n#0 /tmp/tmpuyp95rrc.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpuyp95rrc.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9do0vblq.php:23\n\
    Stack trace:\n#0 /tmp/tmp9do0vblq.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp9do0vblq.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpky6wqpz8.php:23\n\
    Stack trace:\n#0 /tmp/tmpky6wqpz8.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpky6wqpz8.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $len = count($l);\n    if ($len % 2 ==\
    \ 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmpicxstycx.php:9\nStack trace:\n\
    #0 /tmp/tmpicxstycx.php(18): median()\n#1 /tmp/tmpicxstycx.php(22): candidate()\n\
    #2 /tmp/tmpicxstycx.php(29): test()\n#3 {main}\n  thrown in /tmp/tmpicxstycx.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpa49bavdn.php:23\n\
    Stack trace:\n#0 /tmp/tmpa49bavdn.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpa49bavdn.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptckti6ya.php:23\n\
    Stack trace:\n#0 /tmp/tmptckti6ya.php(29): test()\n#1 {main}\n  thrown in /tmp/tmptckti6ya.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphu8c1i4e.php:23\n\
    Stack trace:\n#0 /tmp/tmphu8c1i4e.php(29): test()\n#1 {main}\n  thrown in /tmp/tmphu8c1i4e.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[$len / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1nseziq1.php:23\n\
    Stack trace:\n#0 /tmp/tmp1nseziq1.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp1nseziq1.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp41tix_l9.php:23\n\
    Stack trace:\n#0 /tmp/tmp41tix_l9.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp41tix_l9.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvpco5mgx.php:23\n\
    Stack trace:\n#0 /tmp/tmpvpco5mgx.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpvpco5mgx.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[$len / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpeju_64o6.php:23\n\
    Stack trace:\n#0 /tmp/tmpeju_64o6.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpeju_64o6.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $n = count($l);\n    if ($n % 2 == 0)\
    \ {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmphnzplcch.php:9\nStack trace:\n\
    #0 /tmp/tmphnzplcch.php(18): median()\n#1 /tmp/tmphnzplcch.php(22): candidate()\n\
    #2 /tmp/tmphnzplcch.php(29): test()\n#3 {main}\n  thrown in /tmp/tmphnzplcch.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvaawys6r.php:23\n\
    Stack trace:\n#0 /tmp/tmpvaawys6r.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpvaawys6r.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpb3ky14mt.php:23\n\
    Stack trace:\n#0 /tmp/tmpb3ky14mt.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpb3ky14mt.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0sb43j31.php:23\n\
    Stack trace:\n#0 /tmp/tmp0sb43j31.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp0sb43j31.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $sorted = sort($l);\n    $len = count($l);\n    if ($len %\
    \ 2 == 0) {\n        $median = ($l[$len/2] + $l[$len/2 - 1]) / 2;\n    } else\
    \ {\n        $median = $l[($len - 1) / 2];\n    }\n    return $median;\n}\n\n\
    function candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6vue55jo.php:24\n\
    Stack trace:\n#0 /tmp/tmp6vue55jo.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp6vue55jo.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpchnrvf9h.php:23\n\
    Stack trace:\n#0 /tmp/tmpchnrvf9h.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpchnrvf9h.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5z83wtek.php:23\n\
    Stack trace:\n#0 /tmp/tmp5z83wtek.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp5z83wtek.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp45hdoqb3.php:23\n\
    Stack trace:\n#0 /tmp/tmp45hdoqb3.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp45hdoqb3.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n\
    \ / 2 - 1] + $l[$n / 2]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n\
    }\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgcvav0fl.php:21\n\
    Stack trace:\n#0 /tmp/tmpgcvav0fl.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpgcvav0fl.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpim_75gyz.php:23\n\
    Stack trace:\n#0 /tmp/tmpim_75gyz.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpim_75gyz.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $len = count($l);\n    $mid = floor($len\
    \ / 2);\n    if ($len % 2 == 0) {\n        return ($l[$mid] + $l[$mid - 1]) /\
    \ 2;\n    } else {\n        return $l[$mid];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmpzfaryo3r.php:9\nStack trace:\n\
    #0 /tmp/tmpzfaryo3r.php(19): median()\n#1 /tmp/tmpzfaryo3r.php(23): candidate()\n\
    #2 /tmp/tmpzfaryo3r.php(30): test()\n#3 {main}\n  thrown in /tmp/tmpzfaryo3r.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $len = count($l);\n    if ($len % 2 ==\
    \ 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmpafefrl1e.php:9\nStack trace:\n\
    #0 /tmp/tmpafefrl1e.php(18): median()\n#1 /tmp/tmpafefrl1e.php(22): candidate()\n\
    #2 /tmp/tmpafefrl1e.php(29): test()\n#3 {main}\n  thrown in /tmp/tmpafefrl1e.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $size = count($l);\n    if ($size % 2 == 0)\
    \ {\n        return ($l[$size / 2] + $l[$size / 2 - 1]) / 2;\n    } else {\n \
    \       return $l[$size / 2];\n    }\n}\n\nfunction candidate(...$args) {\n  \
    \  return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_rurzyat.php:23\n\
    Stack trace:\n#0 /tmp/tmp_rurzyat.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp_rurzyat.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqhayejbw.php:23\n\
    Stack trace:\n#0 /tmp/tmpqhayejbw.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpqhayejbw.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvbwui0_l.php:23\n\
    Stack trace:\n#0 /tmp/tmpvbwui0_l.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpvbwui0_l.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6l7vq450.php:23\n\
    Stack trace:\n#0 /tmp/tmp6l7vq450.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6l7vq450.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $sorted = $l;\n    sort($sorted);\n    $len = count($sorted);\n\
    \    if ($len % 2 == 0) {\n        return ($sorted[$len / 2] + $sorted[$len /\
    \ 2 - 1]) / 2;\n    } else {\n        return $sorted[($len - 1) / 2];\n    }\n\
    }\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9kvo0bpq.php:24\n\
    Stack trace:\n#0 /tmp/tmp9kvo0bpq.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp9kvo0bpq.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmqzd18db.php:23\n\
    Stack trace:\n#0 /tmp/tmpmqzd18db.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpmqzd18db.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsxqootc1.php:23\n\
    Stack trace:\n#0 /tmp/tmpsxqootc1.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpsxqootc1.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp977maakw.php:23\n\
    Stack trace:\n#0 /tmp/tmp977maakw.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp977maakw.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $n = count($l);\n    if ($n == 0) {\n        return null;\n\
    \    }\n    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpa9ydfj_8.php:26\n\
    Stack trace:\n#0 /tmp/tmpa9ydfj_8.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpa9ydfj_8.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $n = count($l);\n    if ($n % 2 == 0)\
    \ {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmpzb4c64nn.php:9\nStack trace:\n\
    #0 /tmp/tmpzb4c64nn.php(18): median()\n#1 /tmp/tmpzb4c64nn.php(22): candidate()\n\
    #2 /tmp/tmpzb4c64nn.php(29): test()\n#3 {main}\n  thrown in /tmp/tmpzb4c64nn.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $len = count($l);\n    if ($len == 0) {\n        return 0;\n\
    \    }\n    sort($l);\n    if ($len % 2 == 0) {\n        return ($l[$len / 2]\
    \ + $l[$len / 2 - 1]) / 2;\n    } else {\n        return $l[$len / 2];\n    }\n\
    }\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpk78pzkm2.php:26\n\
    Stack trace:\n#0 /tmp/tmpk78pzkm2.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpk78pzkm2.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpixcg7am_.php:23\n\
    Stack trace:\n#0 /tmp/tmpixcg7am_.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpixcg7am_.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $len = count($l);\n    if ($len % 2 ==\
    \ 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmpbua03ja4.php:9\nStack trace:\n\
    #0 /tmp/tmpbua03ja4.php(18): median()\n#1 /tmp/tmpbua03ja4.php(22): candidate()\n\
    #2 /tmp/tmpbua03ja4.php(29): test()\n#3 {main}\n  thrown in /tmp/tmpbua03ja4.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpno44y3tj.php:23\n\
    Stack trace:\n#0 /tmp/tmpno44y3tj.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpno44y3tj.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $len = count($l);\n    if ($len % 2 ==\
    \ 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmp2tqq5qxp.php:9\nStack trace:\n\
    #0 /tmp/tmp2tqq5qxp.php(18): median()\n#1 /tmp/tmp2tqq5qxp.php(22): candidate()\n\
    #2 /tmp/tmp2tqq5qxp.php(29): test()\n#3 {main}\n  thrown in /tmp/tmp2tqq5qxp.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2hw6c5a2.php:23\n\
    Stack trace:\n#0 /tmp/tmp2hw6c5a2.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2hw6c5a2.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9_vkjy7l.php:23\n\
    Stack trace:\n#0 /tmp/tmp9_vkjy7l.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp9_vkjy7l.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgyor_1hl.php:23\n\
    Stack trace:\n#0 /tmp/tmpgyor_1hl.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpgyor_1hl.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[$len / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp04c6apjv.php:23\n\
    Stack trace:\n#0 /tmp/tmp04c6apjv.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp04c6apjv.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpg7868fll.php:23\n\
    Stack trace:\n#0 /tmp/tmpg7868fll.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpg7868fll.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp30ljfmlx.php:23\n\
    Stack trace:\n#0 /tmp/tmp30ljfmlx.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp30ljfmlx.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $length = count($l);\n    if ($length\
    \ % 2 == 0) {\n        $median = ($l[$length / 2] + $l[$length / 2 - 1]) / 2;\n\
    \    } else {\n        $median = $l[($length - 1) / 2];\n    }\n    return $median;\n\
    }\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmpouoyvjz2.php:9\nStack trace:\n\
    #0 /tmp/tmpouoyvjz2.php(19): median()\n#1 /tmp/tmpouoyvjz2.php(23): candidate()\n\
    #2 /tmp/tmpouoyvjz2.php(30): test()\n#3 {main}\n  thrown in /tmp/tmpouoyvjz2.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $n = count($l);\n    if ($n % 2 == 0)\
    \ {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($n - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmph89jg_9b.php:9\nStack trace:\n\
    #0 /tmp/tmph89jg_9b.php(18): median()\n#1 /tmp/tmph89jg_9b.php(22): candidate()\n\
    #2 /tmp/tmph89jg_9b.php(29): test()\n#3 {main}\n  thrown in /tmp/tmph89jg_9b.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $n = count($l);\n    if ($n % 2 == 0)\
    \ {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmp4f7vu0dn.php:9\nStack trace:\n\
    #0 /tmp/tmp4f7vu0dn.php(18): median()\n#1 /tmp/tmp4f7vu0dn.php(22): candidate()\n\
    #2 /tmp/tmp4f7vu0dn.php(29): test()\n#3 {main}\n  thrown in /tmp/tmp4f7vu0dn.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmph_jr20p0.php:23\n\
    Stack trace:\n#0 /tmp/tmph_jr20p0.php(29): test()\n#1 {main}\n  thrown in /tmp/tmph_jr20p0.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\tsort($l);\n\t$n = count($l);\n\tif ($n % 2 == 0) {\n\t\treturn\
    \ ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n\t} else {\n\t\treturn $l[$n / 2];\n\t}\n\
    }\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmwgk47g6.php:23\n\
    Stack trace:\n#0 /tmp/tmpmwgk47g6.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpmwgk47g6.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $len = count($l);\n    if ($len % 2 ==\
    \ 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmprndl6_fw.php:9\nStack trace:\n\
    #0 /tmp/tmprndl6_fw.php(18): median()\n#1 /tmp/tmprndl6_fw.php(22): candidate()\n\
    #2 /tmp/tmprndl6_fw.php(29): test()\n#3 {main}\n  thrown in /tmp/tmprndl6_fw.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6ge7ld8h.php:23\n\
    Stack trace:\n#0 /tmp/tmp6ge7ld8h.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6ge7ld8h.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $len = count($l);\n    if ($len % 2 ==\
    \ 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[$len / 2];\n    }\n}\n\nfunction candidate(...$args) {\n  \
    \  return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmp3h2s_e_y.php:9\nStack trace:\n\
    #0 /tmp/tmp3h2s_e_y.php(18): median()\n#1 /tmp/tmp3h2s_e_y.php(22): candidate()\n\
    #2 /tmp/tmp3h2s_e_y.php(29): test()\n#3 {main}\n  thrown in /tmp/tmp3h2s_e_y.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $n = count($l);\n    if ($n % 2 == 0)\
    \ {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmpkbb0zf18.php:9\nStack trace:\n\
    #0 /tmp/tmpkbb0zf18.php(18): median()\n#1 /tmp/tmpkbb0zf18.php(22): candidate()\n\
    #2 /tmp/tmpkbb0zf18.php(29): test()\n#3 {main}\n  thrown in /tmp/tmpkbb0zf18.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyg3z4grg.php:23\n\
    Stack trace:\n#0 /tmp/tmpyg3z4grg.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpyg3z4grg.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $len = count($l);\n    if ($len % 2 ==\
    \ 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmptn2arycf.php:9\nStack trace:\n\
    #0 /tmp/tmptn2arycf.php(18): median()\n#1 /tmp/tmptn2arycf.php(22): candidate()\n\
    #2 /tmp/tmptn2arycf.php(29): test()\n#3 {main}\n  thrown in /tmp/tmptn2arycf.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0zx1aco_.php:23\n\
    Stack trace:\n#0 /tmp/tmp0zx1aco_.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp0zx1aco_.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqmfbzqr8.php:23\n\
    Stack trace:\n#0 /tmp/tmpqmfbzqr8.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpqmfbzqr8.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        $mid = $len / 2;\n        return ($l[$mid] + $l[$mid - 1]) / 2;\n   \
    \ } else {\n        $mid = ($len - 1) / 2;\n        return $l[$mid];\n    }\n\
    }\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp40wgbzw_.php:25\n\
    Stack trace:\n#0 /tmp/tmp40wgbzw_.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp40wgbzw_.php\
    \ on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnk8arrpm.php:23\n\
    Stack trace:\n#0 /tmp/tmpnk8arrpm.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpnk8arrpm.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpd1uw_kml.php:23\n\
    Stack trace:\n#0 /tmp/tmpd1uw_kml.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpd1uw_kml.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpeo0zmqt4.php:23\n\
    Stack trace:\n#0 /tmp/tmpeo0zmqt4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpeo0zmqt4.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpf6cxbc48.php:23\n\
    Stack trace:\n#0 /tmp/tmpf6cxbc48.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpf6cxbc48.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpw3vodc4q.php:23\n\
    Stack trace:\n#0 /tmp/tmpw3vodc4q.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpw3vodc4q.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpc9s8l2cp.php:23\n\
    Stack trace:\n#0 /tmp/tmpc9s8l2cp.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpc9s8l2cp.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $n = count($l);\n    if ($n % 2 == 0)\
    \ {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmpc1uisjmb.php:9\nStack trace:\n\
    #0 /tmp/tmpc1uisjmb.php(18): median()\n#1 /tmp/tmpc1uisjmb.php(22): candidate()\n\
    #2 /tmp/tmpc1uisjmb.php(29): test()\n#3 {main}\n  thrown in /tmp/tmpc1uisjmb.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\t$n = count($l);\n\tif ($n % 2 == 0) {\n\t\treturn ($l[$n / 2\
    \ - 1] + $l[$n / 2]) / 2;\n\t} else {\n\t\treturn $l[($n - 1) / 2];\n\t}\n}\n\n\
    function candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5))\
    \ !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0cyduuzq.php:21\n\
    Stack trace:\n#0 /tmp/tmp0cyduuzq.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp0cyduuzq.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $len = count($l);\n    if ($len % 2 ==\
    \ 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmpvlp8gumc.php:9\nStack trace:\n\
    #0 /tmp/tmpvlp8gumc.php(18): median()\n#1 /tmp/tmpvlp8gumc.php(22): candidate()\n\
    #2 /tmp/tmpvlp8gumc.php(29): test()\n#3 {main}\n  thrown in /tmp/tmpvlp8gumc.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpoizqte95.php:23\n\
    Stack trace:\n#0 /tmp/tmpoizqte95.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpoizqte95.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptpc0au_s.php:23\n\
    Stack trace:\n#0 /tmp/tmptpc0au_s.php(29): test()\n#1 {main}\n  thrown in /tmp/tmptpc0au_s.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphwmlvc0t.php:23\n\
    Stack trace:\n#0 /tmp/tmphwmlvc0t.php(29): test()\n#1 {main}\n  thrown in /tmp/tmphwmlvc0t.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjr8ni_00.php:23\n\
    Stack trace:\n#0 /tmp/tmpjr8ni_00.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjr8ni_00.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp45xeotkr.php:23\n\
    Stack trace:\n#0 /tmp/tmp45xeotkr.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp45xeotkr.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $n = count($l);\n    if ($n % 2 == 0)\
    \ {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmp_je0k3xt.php:9\nStack trace:\n\
    #0 /tmp/tmp_je0k3xt.php(18): median()\n#1 /tmp/tmp_je0k3xt.php(22): candidate()\n\
    #2 /tmp/tmp_je0k3xt.php(29): test()\n#3 {main}\n  thrown in /tmp/tmp_je0k3xt.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpk5jxcxko.php:23\n\
    Stack trace:\n#0 /tmp/tmpk5jxcxko.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpk5jxcxko.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpu04m306k.php:23\n\
    Stack trace:\n#0 /tmp/tmpu04m306k.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpu04m306k.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $n = count($l);\n    if ($n % 2 == 0)\
    \ {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmpkpwjh7vl.php:9\nStack trace:\n\
    #0 /tmp/tmpkpwjh7vl.php(18): median()\n#1 /tmp/tmpkpwjh7vl.php(22): candidate()\n\
    #2 /tmp/tmpkpwjh7vl.php(29): test()\n#3 {main}\n  thrown in /tmp/tmpkpwjh7vl.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $n = count($l);\n    if ($n % 2 == 0)\
    \ {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmpotqbhwjx.php:9\nStack trace:\n\
    #0 /tmp/tmpotqbhwjx.php(18): median()\n#1 /tmp/tmpotqbhwjx.php(22): candidate()\n\
    #2 /tmp/tmpotqbhwjx.php(29): test()\n#3 {main}\n  thrown in /tmp/tmpotqbhwjx.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp13w662fv.php:23\n\
    Stack trace:\n#0 /tmp/tmp13w662fv.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp13w662fv.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5z7mzxzm.php:23\n\
    Stack trace:\n#0 /tmp/tmp5z7mzxzm.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp5z7mzxzm.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpidsgpdfs.php:23\n\
    Stack trace:\n#0 /tmp/tmpidsgpdfs.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpidsgpdfs.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_fhcx100.php:23\n\
    Stack trace:\n#0 /tmp/tmp_fhcx100.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp_fhcx100.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpx8ck9g3h.php:23\n\
    Stack trace:\n#0 /tmp/tmpx8ck9g3h.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpx8ck9g3h.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwpn7stzb.php:23\n\
    Stack trace:\n#0 /tmp/tmpwpn7stzb.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpwpn7stzb.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqvrdbbrg.php:23\n\
    Stack trace:\n#0 /tmp/tmpqvrdbbrg.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpqvrdbbrg.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3ybqmo8d.php:23\n\
    Stack trace:\n#0 /tmp/tmp3ybqmo8d.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp3ybqmo8d.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjqrzahk2.php:23\n\
    Stack trace:\n#0 /tmp/tmpjqrzahk2.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjqrzahk2.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7n_9vi04.php:23\n\
    Stack trace:\n#0 /tmp/tmp7n_9vi04.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp7n_9vi04.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnhfds1fc.php:23\n\
    Stack trace:\n#0 /tmp/tmpnhfds1fc.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpnhfds1fc.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $n = count($l);\n    if ($n % 2 == 0)\
    \ {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmprai6c56x.php:9\nStack trace:\n\
    #0 /tmp/tmprai6c56x.php(18): median()\n#1 /tmp/tmprai6c56x.php(22): candidate()\n\
    #2 /tmp/tmprai6c56x.php(29): test()\n#3 {main}\n  thrown in /tmp/tmprai6c56x.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3p98f5s_.php:23\n\
    Stack trace:\n#0 /tmp/tmp3p98f5s_.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp3p98f5s_.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpw_ei_iuj.php:23\n\
    Stack trace:\n#0 /tmp/tmpw_ei_iuj.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpw_ei_iuj.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplhfis_94.php:23\n\
    Stack trace:\n#0 /tmp/tmplhfis_94.php(29): test()\n#1 {main}\n  thrown in /tmp/tmplhfis_94.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8uo2sxpj.php:23\n\
    Stack trace:\n#0 /tmp/tmp8uo2sxpj.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp8uo2sxpj.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[$len / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1gxiooh9.php:23\n\
    Stack trace:\n#0 /tmp/tmp1gxiooh9.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp1gxiooh9.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptueer6x1.php:23\n\
    Stack trace:\n#0 /tmp/tmptueer6x1.php(29): test()\n#1 {main}\n  thrown in /tmp/tmptueer6x1.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpz7c8rpkg.php:23\n\
    Stack trace:\n#0 /tmp/tmpz7c8rpkg.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpz7c8rpkg.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpm5ptnh_d.php:23\n\
    Stack trace:\n#0 /tmp/tmpm5ptnh_d.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpm5ptnh_d.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpp2qd501h.php:23\n\
    Stack trace:\n#0 /tmp/tmpp2qd501h.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpp2qd501h.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $n = count($l);\n    if ($n % 2 == 0)\
    \ {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($n - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmpwczrllg9.php:9\nStack trace:\n\
    #0 /tmp/tmpwczrllg9.php(18): median()\n#1 /tmp/tmpwczrllg9.php(22): candidate()\n\
    #2 /tmp/tmpwczrllg9.php(29): test()\n#3 {main}\n  thrown in /tmp/tmpwczrllg9.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0qhjidng.php:23\n\
    Stack trace:\n#0 /tmp/tmp0qhjidng.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp0qhjidng.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp65auau8b.php:23\n\
    Stack trace:\n#0 /tmp/tmp65auau8b.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp65auau8b.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp01i34tsa.php:23\n\
    Stack trace:\n#0 /tmp/tmp01i34tsa.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp01i34tsa.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpb8q9d7bw.php:23\n\
    Stack trace:\n#0 /tmp/tmpb8q9d7bw.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpb8q9d7bw.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4iyj29g2.php:23\n\
    Stack trace:\n#0 /tmp/tmp4iyj29g2.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp4iyj29g2.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $n = count($l);\n    if ($n == 0) {\n        return 0;\n \
    \   }\n    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return median(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !==\
    \ 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_ydsnkn4.php:26\n\
    Stack trace:\n#0 /tmp/tmp_ydsnkn4.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp_ydsnkn4.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqov8sw51.php:23\n\
    Stack trace:\n#0 /tmp/tmpqov8sw51.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpqov8sw51.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n\
    \ / 2 - 1] + $l[$n / 2]) / 2;\n    } else {\n        return $l[($n - 1) / 2];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000,\
    \ 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbrosm26r.php:21\n\
    Stack trace:\n#0 /tmp/tmpbrosm26r.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpbrosm26r.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpe7i6ywgf.php:23\n\
    Stack trace:\n#0 /tmp/tmpe7i6ywgf.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpe7i6ywgf.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp26yj5wkg.php:23\n\
    Stack trace:\n#0 /tmp/tmp26yj5wkg.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp26yj5wkg.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $len = count($l);\n    if ($len % 2 ==\
    \ 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmpwnsu61d2.php:9\nStack trace:\n\
    #0 /tmp/tmpwnsu61d2.php(18): median()\n#1 /tmp/tmpwnsu61d2.php(22): candidate()\n\
    #2 /tmp/tmpwnsu61d2.php(29): test()\n#3 {main}\n  thrown in /tmp/tmpwnsu61d2.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $n = count($l);\n    if ($n % 2 == 0)\
    \ {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmpmxeqwhxn.php:9\nStack trace:\n\
    #0 /tmp/tmpmxeqwhxn.php(18): median()\n#1 /tmp/tmpmxeqwhxn.php(22): candidate()\n\
    #2 /tmp/tmpmxeqwhxn.php(29): test()\n#3 {main}\n  thrown in /tmp/tmpmxeqwhxn.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $n = count($l);\n    if ($n % 2 == 0)\
    \ {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmp_xt62sns.php:9\nStack trace:\n\
    #0 /tmp/tmp_xt62sns.php(18): median()\n#1 /tmp/tmp_xt62sns.php(22): candidate()\n\
    #2 /tmp/tmp_xt62sns.php(29): test()\n#3 {main}\n  thrown in /tmp/tmp_xt62sns.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdu1dif0s.php:23\n\
    Stack trace:\n#0 /tmp/tmpdu1dif0s.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpdu1dif0s.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqgsh2756.php:23\n\
    Stack trace:\n#0 /tmp/tmpqgsh2756.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpqgsh2756.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcav9cnib.php:23\n\
    Stack trace:\n#0 /tmp/tmpcav9cnib.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpcav9cnib.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfn7qm1ix.php:23\n\
    Stack trace:\n#0 /tmp/tmpfn7qm1ix.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpfn7qm1ix.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpm63pxsgg.php:23\n\
    Stack trace:\n#0 /tmp/tmpm63pxsgg.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpm63pxsgg.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp97xdx2ey.php:23\n\
    Stack trace:\n#0 /tmp/tmp97xdx2ey.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp97xdx2ey.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnjypi4jz.php:23\n\
    Stack trace:\n#0 /tmp/tmpnjypi4jz.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpnjypi4jz.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpam_tid1z.php:23\n\
    Stack trace:\n#0 /tmp/tmpam_tid1z.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpam_tid1z.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxb_xzs2d.php:23\n\
    Stack trace:\n#0 /tmp/tmpxb_xzs2d.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpxb_xzs2d.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    $l = sort($l);\n    $n = count($l);\n    if ($n % 2 == 0)\
    \ {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmpox03_ust.php:9\nStack trace:\n\
    #0 /tmp/tmpox03_ust.php(18): median()\n#1 /tmp/tmpox03_ust.php(22): candidate()\n\
    #2 /tmp/tmpox03_ust.php(29): test()\n#3 {main}\n  thrown in /tmp/tmpox03_ust.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgg13vzmc.php:23\n\
    Stack trace:\n#0 /tmp/tmpgg13vzmc.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpgg13vzmc.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n\t$l = sort($l);\n\t$n = count($l);\n\tif ($n % 2 == 0) {\n\t\t\
    return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n\t} else {\n\t\treturn $l[$n / 2];\n\
    \t}\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000,\
    \ 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, bool given in /tmp/tmpy6l6es6n.php:9\nStack trace:\n\
    #0 /tmp/tmpy6l6es6n.php(18): median()\n#1 /tmp/tmpy6l6es6n.php(22): candidate()\n\
    #2 /tmp/tmpy6l6es6n.php(29): test()\n#3 {main}\n  thrown in /tmp/tmpy6l6es6n.php\
    \ on line 9\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpj01kfy6b.php:23\n\
    Stack trace:\n#0 /tmp/tmpj01kfy6b.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpj01kfy6b.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6,\
    \ 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9om8di_6.php:23\n\
    Stack trace:\n#0 /tmp/tmp9om8di_6.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp9om8di_6.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 1, 2, 4, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-10,\
    \ 4, 6, 1000, 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(5)) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(6, 5)) !== 5.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(8, 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp74n20c69.php:23\n\
    Stack trace:\n#0 /tmp/tmp74n20c69.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp74n20c69.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return median of elements in the list l.\n// >>> median([3,\
    \ 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction\
    \ median($l) {\n    sort($l);\n    $count = count($l);\n    if ($count % 2 ==\
    \ 0) {\n        $mid = $count / 2;\n        return ($l[$mid - 1] + $l[$mid]) /\
    \ 2;\n    } else {\n        $mid = floor($count / 2);\n        return $l[$mid];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return median(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000,\
    \ 10, 20)) !== 8.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6,\
    \ 5)) !== 5.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8,\
    \ 1, 3, 9, 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyi2v7crt.php:25\n\
    Stack trace:\n#0 /tmp/tmpyi2v7crt.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpyi2v7crt.php\
    \ on line 25\n"
  exit_code: 255
  status: Exception
