name: HumanEval_127_intersection
language: php
results:
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersect = [];\n    $intersect[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersect[1] = min($interval1[1], $interval2[1]);\n    if ($intersect[0]\
    \ > $intersect[1]) {\n        return \"NO\";\n    }\n    $length = $intersect[1]\
    \ - $intersect[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n\
    \    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n  \
    \          return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nfunction\
    \ candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4))\
    \ !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyckoj8dm.php:43\n\
    Stack trace:\n#0 /tmp/tmpyckoj8dm.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpyckoj8dm.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $interval1 = [$interval1[0], $interval1[1]];\n  $interval2 = [$interval2[0],\
    \ $interval2[1]];\n  sort($interval1);\n  sort($interval2);\n  $intersection =\
    \ [];\n  if ($interval1[0] <= $interval2[0] && $interval1[1] >= $interval2[0])\
    \ {\n    $intersection = [$interval2[0], $interval1[1]];\n  } else if ($interval2[0]\
    \ <= $interval1[0] && $interval2[1] >= $interval1[0]) {\n    $intersection = [$interval1[0],\
    \ $interval2[1]];\n  }\n  if (empty($intersection)) {\n    return \"NO\";\n  }\n\
    \  $length = $intersection[1] - $intersection[0];\n  if ($length < 2) {\n    return\
    \ \"NO\";\n  }\n  if ($length == 2) {\n    return \"YES\";\n  }\n  for ($i = 2;\
    \ $i < $length; $i++) {\n    if ($length % $i == 0) {\n      return \"NO\";\n\
    \    }\n  }\n  return \"YES\";\n}\n\necho intersection([1, 2], [2, 3]) . \"\\\
    n\";\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3, -1],\
    \ [-5, 5]) . \"\\n\";\necho intersection([-3, -1], [-5, -3]) . \"\\n\";\necho\
    \ intersection([-3, -1], [-5, -4]) . \"\\n\";\necho intersection([-3, -1], [-5,\
    \ -2]) . \"\\n\";\necho intersection([-3, -1], [-5, -1]) . \"\\n\";\necho intersection([-3,\
    \ -1], [-5, 0]) . \"\\n\";\necho intersection([-3, -1], [-5, 1]) . \"\\n\";\n\
    echo intersection([-3, -1], [-5, 2]) . \"\\n\";\necho intersection([-3, -1\nfunction\
    \ candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4))\
    \ !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \"]\" in /tmp/tmpgqcuqgfd.php on line 58\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $interval1 = [$interval1[0], $interval1[1]];\n  $interval2 = [$interval2[0],\
    \ $interval2[1]];\n  sort($interval1);\n  sort($interval2);\n  $intersection =\
    \ [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n  if\
    \ ($intersection[0] > $intersection[1]) {\n    return \"NO\";\n  }\n  $length\
    \ = $intersection[1] - $intersection[0] + 1;\n  if ($length < 2) {\n    return\
    \ \"NO\";\n  }\n  for ($i = 2; $i < $length; $i++) {\n    if ($length % $i ==\
    \ 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpa3ftd2qp.php:44\n\
    Stack trace:\n#0 /tmp/tmpa3ftd2qp.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpa3ftd2qp.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    \nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppmkp12pg.php:42\n\
    Stack trace:\n#0 /tmp/tmppmkp12pg.php(51): test()\n#1 {main}\n  thrown in /tmp/tmppmkp12pg.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length < 2)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n \
    \       if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_o53s877.php:41\n\
    Stack trace:\n#0 /tmp/tmp_o53s877.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp_o53s877.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $interval1 = [$interval1[0], $interval1[1]];\n  $interval2 = [$interval2[0],\
    \ $interval2[1]];\n  sort($interval1);\n  sort($interval2);\n  $intersection =\
    \ [];\n  $intersection[0] = max($interval1[0], $interval2[0]);\n  $intersection[1]\
    \ = min($interval1[1], $interval2[1]);\n  if ($intersection[0] > $intersection[1])\
    \ {\n    return \"NO\";\n  }\n  $length = $intersection[1] - $intersection[0]\
    \ + 1;\n  if ($length == 1) {\n    return \"NO\";\n  }\n  for ($i = 2; $i <= sqrt($length);\
    \ $i++) {\n    if ($length % $i == 0) {\n      return \"NO\";\n    }\n  }\n  return\
    \ \"YES\";\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8ceismia.php:47\n\
    Stack trace:\n#0 /tmp/tmp8ceismia.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp8ceismia.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $interval1 = array_map('intval', explode(', ', $interval1));\n  $interval2\
    \ = array_map('intval', explode(', ', $interval2));\n  $intersection = [max($interval1[0],\
    \ $interval2[0]), min($interval1[1], $interval2[1])];\n  if ($intersection[0]\
    \ > $intersection[1]) {\n    return 'NO';\n  }\n  $length = $intersection[1] -\
    \ $intersection[0] + 1;\n  return isPrime($length) ? 'YES' : 'NO';\n}\n\nfunction\
    \ candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4))\
    \ !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: explode(): Argument #2 ($string)\
    \ must be of type string, array given in /tmp/tmpc9e_b0bw.php:19\nStack trace:\n\
    #0 /tmp/tmpc9e_b0bw.php(19): explode()\n#1 /tmp/tmpc9e_b0bw.php(30): intersection()\n\
    #2 /tmp/tmpc9e_b0bw.php(34): candidate()\n#3 /tmp/tmpc9e_b0bw.php(44): test()\n\
    #4 {main}\n  thrown in /tmp/tmpc9e_b0bw.php on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    \necho intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0,\
    \ 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpq9s43vts.php:45\n\
    Stack trace:\n#0 /tmp/tmpq9s43vts.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpq9s43vts.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    \nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1j33yh08.php:42\n\
    Stack trace:\n#0 /tmp/tmp1j33yh08.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp1j33yh08.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    \necho intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0,\
    \ 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8ed81ppx.php:45\n\
    Stack trace:\n#0 /tmp/tmp8ed81ppx.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp8ed81ppx.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0],\
    \ $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n    $intersection\
    \ = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n \
    \       if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7_gn12jq.php:45\n\
    Stack trace:\n#0 /tmp/tmp7_gn12jq.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp7_gn12jq.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    \necho intersection([1, 2], [2, 3]);\necho \"\\n\";\necho intersection([-1, 1],\
    \ [0, 4]);\necho \"\\n\";\necho intersection([-3, -1], [-5, 5]);\necho \"\\n\"\
    ;\necho intersection([1, 2], [3, 4]);\necho \"\\n\";\necho intersection([1, 2],\
    \ [2, 4]);\necho \"\\n\";\necho intersection([1, 2], [1, 2]);\necho \"\\n\";\n\
    echo intersection([1, 2], [2, 2]);\necho \"\\n\";\necho intersection([1, 2], [1,\
    \ 1]);\necho \"\\n\";\necho intersection([1, 2], [0, 1]);\necho \"\\n\";\necho\
    \ intersection([1, 2], [0, 2]);\necho \"\\n\";\necho intersection([1, 2], [0,\
    \ 3]);\necho \"\\n\";\necho intersection([1, 2], [0, 4]);\necho \"\\n\";\necho\
    \ intersection([1, 2], [0, 5]);\necho \"\\n\";\necho intersection([1, 2], [0,\
    \ 6]);\necho \"\\n\";\necho intersection([1, 2], [0, 7]);\necho \"\\n\";\necho\
    \ intersection([1, 2], [0, 8]);\necho \"\\n\";\necho intersection([1, 2], [0,\
    \ 9]);\necho \"\\n\";\necho intersection([1, 2], [0, 10]);\necho \"\\n\";\necho\
    \ intersection([1, 2], [0, 11]);\necho \"\\n\";\necho intersection([1, 2], [0,\
    \ 12]);\necho \"\\n\";\necho intersection([1, 2],\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"candidate\", expecting\
    \ \"(\" in /tmp/tmp8gz14kx5.php on line 77\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $start = max($interval1[0], $interval2[0]);\n  $end = min($interval1[1], $interval2[1]);\n\
    \  if ($start > $end) return \"NO\";\n  if ($start == $end) return \"YES\";\n\
    \  $length = $end - $start + 1;\n  return isPrime($length) ? \"YES\" : \"NO\"\
    ;\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"\
    NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_4nv02np.php:32\n\
    Stack trace:\n#0 /tmp/tmp_4nv02np.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp_4nv02np.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0],\
    \ $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n    if ($interval1[1]\
    \ < $interval2[0] || $interval2[1] < $interval1[0]) {\n        return \"NO\";\n\
    \    }\n    $intersection = [max($interval1[0], $interval2[0]), min($interval1[1],\
    \ $interval2[1])];\n    $length = $intersection[1] - $intersection[0] + 1;\n \
    \   if ($length < 2) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}\n\nfunction candidate(...$args) {\n    return\
    \ intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpunxozquv.php:45\n\
    Stack trace:\n#0 /tmp/tmpunxozquv.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpunxozquv.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = array_map('intval', explode(', ', $interval1));\n    $interval2\
    \ = array_map('intval', explode(', ', $interval2));\n    $intersection = [max($interval1[0],\
    \ $interval2[0]), min($interval1[1], $interval2[1])];\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return 'NO';\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length < 2) {\n        return 'NO';\n    }\n\
    \    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i === 0) {\n \
    \           return 'NO';\n        }\n    }\n    return 'YES';\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: explode(): Argument #2 ($string)\
    \ must be of type string, array given in /tmp/tmpn7j19vug.php:19\nStack trace:\n\
    #0 /tmp/tmpn7j19vug.php(19): explode()\n#1 /tmp/tmpn7j19vug.php(38): intersection()\n\
    #2 /tmp/tmpn7j19vug.php(42): candidate()\n#3 /tmp/tmpn7j19vug.php(52): test()\n\
    #4 {main}\n  thrown in /tmp/tmpn7j19vug.php on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $intersection = array_intersect($interval1, $interval2);\n  if (empty($intersection))\
    \ {\n    return \"NO\";\n  }\n  $length = count($intersection);\n  if ($length\
    \ == 1) {\n    return \"YES\";\n  }\n  for ($i = 2; $i < $length; $i++) {\n  \
    \  if ($length % $i == 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\"\
    ;\n}\n\necho intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1],\
    \ [0, 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4))\
    \ !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "YES\nNO\nNO\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7fvy5ukn.php:43\n\
    Stack trace:\n#0 /tmp/tmp7fvy5ukn.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp7fvy5ukn.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) return \"NO\";\n    $length = $end -\
    \ $start + 1;\n    if ($length == 1) return \"NO\";\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) return \"NO\";\n    }\n    return \"\
    YES\";\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1vneht8x.php:36\n\
    Stack trace:\n#0 /tmp/tmp1vneht8x.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp1vneht8x.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersect = [];\n    $intersect[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersect[1] = min($interval1[1], $interval2[1]);\n    if ($intersect[0]\
    \ > $intersect[1]) {\n        return \"NO\";\n    }\n    $length = $intersect[1]\
    \ - $intersect[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n\
    \    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n  \
    \          return \"NO\";\n        }\n    }\n    return \"YES\";\n}\nfunction\
    \ candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4))\
    \ !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsey4o_v1.php:42\n\
    Stack trace:\n#0 /tmp/tmpsey4o_v1.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpsey4o_v1.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0],\
    \ $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n    $interval\
    \ = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    if ($interval[0] > $interval[1]) {\n        return \"NO\";\n    }\n    if\
    \ (isPrime($interval[1] - $interval[0] + 1)) {\n        return \"YES\";\n    }\n\
    \    return \"NO\";\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function isPrime()\
    \ in /tmp/tmp5nw0610l.php:27\nStack trace:\n#0 /tmp/tmp5nw0610l.php(33): intersection()\n\
    #1 /tmp/tmp5nw0610l.php(37): candidate()\n#2 /tmp/tmp5nw0610l.php(47): test()\n\
    #3 {main}\n  thrown in /tmp/tmp5nw0610l.php on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $intersect = [];\n  $intersect[0] = max($interval1[0], $interval2[0]);\n  $intersect[1]\
    \ = min($interval1[1], $interval2[1]);\n  if ($intersect[0] > $intersect[1]) return\
    \ \"NO\";\n  return isPrime($intersect[1] - $intersect[0] + 1) ? \"YES\" : \"\
    NO\";\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function isPrime()\
    \ in /tmp/tmpd_aw5u9r.php:23\nStack trace:\n#0 /tmp/tmpd_aw5u9r.php(27): intersection()\n\
    #1 /tmp/tmpd_aw5u9r.php(31): candidate()\n#2 /tmp/tmpd_aw5u9r.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpd_aw5u9r.php on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0],\
    \ $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n    $intersection\
    \ = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    if (isPrime($intersection[1] - $intersection[0] + 1)) {\n        return \"\
    YES\";\n    }\n    return \"NO\";\n}\nfunction candidate(...$args) {\n    return\
    \ intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function isPrime()\
    \ in /tmp/tmpgnggbhh8.php:27\nStack trace:\n#0 /tmp/tmpgnggbhh8.php(33): intersection()\n\
    #1 /tmp/tmpgnggbhh8.php(37): candidate()\n#2 /tmp/tmpgnggbhh8.php(47): test()\n\
    #3 {main}\n  thrown in /tmp/tmpgnggbhh8.php on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0],\
    \ $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n    $intersection\
    \ = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}\nfunction candidate(...$args) {\n\
    \    return intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp01v3krt8.php:40\n\
    Stack trace:\n#0 /tmp/tmp01v3krt8.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp01v3krt8.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = [];\n    $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[1] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return \"NO\";\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n \
    \   }\n    for ($i = 2; $i <= sqrt($length); $i++) {\n        if ($length % $i\
    \ == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n\
    }\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1),\
    \ array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkai2m8q7.php:43\n\
    Stack trace:\n#0 /tmp/tmpkai2m8q7.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpkai2m8q7.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = array_intersect($interval1, $interval2);\n    if (empty($intersection))\
    \ {\n        return \"NO\";\n    }\n    $length = count($intersection);\n    if\
    \ ($length == 1) {\n        return \"YES\";\n    }\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}\n\nfunction candidate(...$args) {\n    return\
    \ intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3zhzusyd.php:40\n\
    Stack trace:\n#0 /tmp/tmp3zhzusyd.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp3zhzusyd.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = [];\n    $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[1] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return \"NO\";\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n \
    \   }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    function candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5wx9ojmf.php:43\n\
    Stack trace:\n#0 /tmp/tmp5wx9ojmf.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp5wx9ojmf.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0],\
    \ $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n    $intersection\
    \ = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n \
    \       if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\necho intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1,\
    \ 1], [0, 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4))\
    \ !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7oljyx55.php:47\n\
    Stack trace:\n#0 /tmp/tmp7oljyx55.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp7oljyx55.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $start = max($interval1[0], $interval2[0]);\n  $end = min($interval1[1], $interval2[1]);\n\
    \  $length = $end - $start;\n  if ($length <= 0) {\n    return \"NO\";\n  }\n\
    \  if ($length == 1) {\n    return \"NO\";\n  }\n  if ($length == 2) {\n    return\
    \ \"YES\";\n  }\n  for ($i = 2; $i < $length; $i++) {\n    if ($length % $i ==\
    \ 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}\necho intersection([1,\
    \ 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho\
    \ intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NO\nNO\nYES\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = explode(',', $interval1);\n    $interval2 = explode(',', $interval2);\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return 'NO';\n    }\n   \
    \ $length = $end - $start + 1;\n    if ($length < 2) {\n        return 'NO';\n\
    \    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return 'NO';\n        }\n    }\n    return 'YES';\n}\necho intersection('1,2',\
    \ '2,3') . '<br>';\necho intersection('-1,1', '0,4') . '<br>';\necho intersection('-3,-1',\
    \ '-5,5') . '<br>';\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: NO<br>YES<br>YES<br>
  stderr: "PHP Fatal error:  Uncaught TypeError: explode(): Argument #2 ($string)\
    \ must be of type string, array given in /tmp/tmpp4gvxcwk.php:19\nStack trace:\n\
    #0 /tmp/tmpp4gvxcwk.php(19): explode()\n#1 /tmp/tmpp4gvxcwk.php(41): intersection()\n\
    #2 /tmp/tmpp4gvxcwk.php(45): candidate()\n#3 /tmp/tmpp4gvxcwk.php(55): test()\n\
    #4 {main}\n  thrown in /tmp/tmpp4gvxcwk.php on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = [];\n    $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[1] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return \"NO\";\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n \
    \   }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    function candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpl3e4hxwa.php:43\n\
    Stack trace:\n#0 /tmp/tmpl3e4hxwa.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpl3e4hxwa.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0],\
    \ $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n    if ($interval1[0]\
    \ > $interval2[1] || $interval2[0] > $interval1[1]) {\n        return \"NO\";\n\
    \    }\n    $intersection = [max($interval1[0], $interval2[0]), min($interval1[1],\
    \ $interval2[1])];\n    $length = $intersection[1] - $intersection[0] + 1;\n \
    \   if ($length < 2) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}\n\nfunction candidate(...$args) {\n    return\
    \ intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvb7munku.php:45\n\
    Stack trace:\n#0 /tmp/tmpvb7munku.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpvb7munku.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = [];\n    $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[1] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return \"NO\";\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n \
    \   }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\necho\
    \ intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4])\
    \ . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3cpqz7pd.php:45\n\
    Stack trace:\n#0 /tmp/tmp3cpqz7pd.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp3cpqz7pd.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $intersection = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \  if ($intersection[0] > $intersection[1]) {\n    return \"NO\";\n  }\n  $length\
    \ = $intersection[1] - $intersection[0] + 1;\n  if ($length == 1) {\n    return\
    \ \"NO\";\n  }\n  $isPrime = true;\n  for ($i = 2; $i < $length; $i++) {\n   \
    \ if ($length % $i == 0) {\n      $isPrime = false;\n      break;\n    }\n  }\n\
    \  return $isPrime ? \"YES\" : \"NO\";\n}\n\nfunction candidate(...$args) {\n\
    \    return intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpm660ev2j.php:43\n\
    Stack trace:\n#0 /tmp/tmpm660ev2j.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpm660ev2j.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    \nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5idgz_gh.php:42\n\
    Stack trace:\n#0 /tmp/tmp5idgz_gh.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp5idgz_gh.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    \nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_odjuem_.php:42\n\
    Stack trace:\n#0 /tmp/tmp_odjuem_.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp_odjuem_.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0],\
    \ $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n    $intersection\
    \ = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n \
    \       if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\n\necho intersection([1, 2], [2, 3]) . \"\\n\";\necho\
    \ intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5])\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpz1o6kzb0.php:48\n\
    Stack trace:\n#0 /tmp/tmpz1o6kzb0.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpz1o6kzb0.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = range($interval1[0], $interval1[1]);\n    $interval2 = range($interval2[0],\
    \ $interval2[1]);\n    $intersection = array_intersect($interval1, $interval2);\n\
    \    if (count($intersection) == 0) {\n        return \"NO\";\n    }\n    $length\
    \ = count($intersection);\n    if ($length == 1) {\n        return \"NO\";\n \
    \   }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    function candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8zyn7i_m.php:43\n\
    Stack trace:\n#0 /tmp/tmp8zyn7i_m.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp8zyn7i_m.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = array_map('intval', explode(', ', $interval1));\n    $interval2\
    \ = array_map('intval', explode(', ', $interval2));\n    $intersection = [max($interval1[0],\
    \ $interval2[0]), min($interval1[1], $interval2[1])];\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return 'NO';\n    }\n    return isPrime($intersection[1]\
    \ - $intersection[0] + 1) ? 'YES' : 'NO';\n}\nfunction candidate(...$args) {\n\
    \    return intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: explode(): Argument #2 ($string)\
    \ must be of type string, array given in /tmp/tmpwa57068r.php:19\nStack trace:\n\
    #0 /tmp/tmpwa57068r.php(19): explode()\n#1 /tmp/tmpwa57068r.php(28): intersection()\n\
    #2 /tmp/tmpwa57068r.php(32): candidate()\n#3 /tmp/tmpwa57068r.php(42): test()\n\
    #4 {main}\n  thrown in /tmp/tmpwa57068r.php on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0],\
    \ $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n    $intersection\
    \ = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n \
    \       if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\n\necho intersection([1, 2], [2, 3]) . \"\\n\";\necho\
    \ intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5])\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpf6dedvfi.php:48\n\
    Stack trace:\n#0 /tmp/tmpf6dedvfi.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpf6dedvfi.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n \
    \       if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9wrhxwnq.php:41\n\
    Stack trace:\n#0 /tmp/tmp9wrhxwnq.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp9wrhxwnq.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start1 = $interval1[0];\n    $end1 = $interval1[1];\n    $start2 = $interval2[0];\n\
    \    $end2 = $interval2[1];\n    if ($start1 > $end1 || $start2 > $end2) {\n \
    \       return \"NO\";\n    }\n    $intersectionStart = max($start1, $start2);\n\
    \    $intersectionEnd = min($end1, $end2);\n    if ($intersectionStart > $intersectionEnd)\
    \ {\n        return \"NO\";\n    }\n    $intersectionLength = $intersectionEnd\
    \ - $intersectionStart + 1;\n    if ($intersectionLength == 1) {\n        return\
    \ \"NO\";\n    }\n    for ($i = 2; $i <= sqrt($intersectionLength); $i++) {\n\
    \        if ($intersectionLength % $i == 0) {\n            return \"NO\";\n  \
    \      }\n    }\n    return \"YES\";\n}\n\necho intersection([1, 2], [2, 3]) .\
    \ \"\\n\";\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3,\
    \ -1], [-5, 5]) . \"\\n\";\necho intersection([-3, -1], [-5, -4]) . \"\\n\";\n\
    echo intersection([-3, -1], [-5, -6]) . \"\\n\";\necho intersection([-3, -1],\
    \ [-5, -7]) . \"\\n\";\necho intersection([-3, -1], [-5, -8]) . \"\\n\";\necho\
    \ intersection([-3, -1], [-5, -9]) . \"\\n\";\necho intersection([-3, -1], [-5,\
    \ -10]) . \"\\n\";\necho intersection([-3, -1], [-5, -11]) . \"\\n\";\necho intersection([-3,\
    \ -1], [-5, -12]) . \"\\n\";\necho intersection([-3, -1], [-5, -13]) . \"\\n\"\
    ;\necho intersection([-3, -1], [-5, -14]) . \"\\n\";\necho intersection([-3, -1],\
    \ [-5, -15]) . \"\\n\";\necho intersection([-3\nfunction candidate(...$args) {\n\
    \    return intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \"]\" in /tmp/tmp06kjxd4p.php on line 58\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = [];\n    $intersection[] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return \"NO\";\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length < 2) {\n        return \"NO\";\n  \
    \  }\n    for ($i = 2; $i <= sqrt($length); $i++) {\n        if ($length % $i\
    \ == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n\
    }\nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmldqm0a0.php:42\n\
    Stack trace:\n#0 /tmp/tmpmldqm0a0.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpmldqm0a0.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $start = max($interval1[0], $interval2[0]);\n  $end = min($interval1[1], $interval2[1]);\n\
    \  $length = $end - $start;\n  if ($length < 0) return \"NO\";\n  return isPrime($length)\
    \ ? \"YES\" : \"NO\";\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function isPrime()\
    \ in /tmp/tmptm05ao3z.php:23\nStack trace:\n#0 /tmp/tmptm05ao3z.php(27): intersection()\n\
    #1 /tmp/tmptm05ao3z.php(31): candidate()\n#2 /tmp/tmptm05ao3z.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmptm05ao3z.php on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length < 2) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    \necho intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0,\
    \ 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpd8kjp3bs.php:45\n\
    Stack trace:\n#0 /tmp/tmpd8kjp3bs.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpd8kjp3bs.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = [];\n    $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[1] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return \"NO\";\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length == 2) {\n        return \"YES\";\n\
    \    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    echo intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4])\
    \ . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "YES\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpf2q2ivwh.php:45\n\
    Stack trace:\n#0 /tmp/tmpf2q2ivwh.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpf2q2ivwh.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $start = max($interval1[0], $interval2[0]);\n  $end = min($interval1[1], $interval2[1]);\n\
    \  $length = $end - $start;\n  if ($length < 0) {\n    return \"NO\";\n  }\n \
    \ if ($length == 1) {\n    return \"NO\";\n  }\n  if ($length == 2) {\n    return\
    \ \"YES\";\n  }\n  for ($i = 2; $i < $length; $i++) {\n    if ($length % $i ==\
    \ 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyva790mx.php:43\n\
    Stack trace:\n#0 /tmp/tmpyva790mx.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpyva790mx.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = [];\n    $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[1] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return \"NO\";\n    }\n    return isPrime($intersection[1]\
    \ - $intersection[0] + 1) ? \"YES\" : \"NO\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function isPrime()\
    \ in /tmp/tmp_ecjv6d5.php:25\nStack trace:\n#0 /tmp/tmp_ecjv6d5.php(29): intersection()\n\
    #1 /tmp/tmp_ecjv6d5.php(33): candidate()\n#2 /tmp/tmp_ecjv6d5.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmp_ecjv6d5.php on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = [];\n    $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[1] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return \"NO\";\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    return isPrime($length) ? \"YES\" : \"NO\";\n}\n\
    function candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function isPrime()\
    \ in /tmp/tmpn02_o50c.php:26\nStack trace:\n#0 /tmp/tmpn02_o50c.php(29): intersection()\n\
    #1 /tmp/tmpn02_o50c.php(33): candidate()\n#2 /tmp/tmpn02_o50c.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmpn02_o50c.php on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = [];\n    $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[1] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return \"NO\";\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n \
    \   }\n    for ($i = 2; $i <= sqrt($length); $i++) {\n        if ($length % $i\
    \ == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n\
    }\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1),\
    \ array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpl8ler897.php:43\n\
    Stack trace:\n#0 /tmp/tmpl8ler897.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpl8ler897.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $intersection = array_intersect($interval1, $interval2);\n  if (count($intersection)\
    \ == 0) {\n    return \"NO\";\n  }\n  $length = count($intersection);\n  if ($length\
    \ == 1) {\n    return \"YES\";\n  }\n  for ($i = 2; $i < $length; $i++) {\n  \
    \  if ($length % $i == 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\"\
    ;\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"\
    NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3chj_mdt.php:40\n\
    Stack trace:\n#0 /tmp/tmp3chj_mdt.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp3chj_mdt.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $intersection = [];\n  for ($i = $interval1[0]; $i <= $interval1[1]; $i++)\
    \ {\n    for ($j = $interval2[0]; $j <= $interval2[1]; $j++) {\n      if ($i ==\
    \ $j) {\n        $intersection[] = $i;\n      }\n    }\n  }\n  if (count($intersection)\
    \ == 0) {\n    return \"NO\";\n  }\n  $length = count($intersection);\n  for ($i\
    \ = 2; $i < $length; $i++) {\n    if ($length % $i == 0) {\n      return \"NO\"\
    ;\n    }\n  }\n  return \"YES\";\n}\necho intersection([1, 2], [2, 3]) . \"\\\
    n\";\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3, -1],\
    \ [-5, 5]) . \"\\n\";\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "YES\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp07e319dt.php:46\n\
    Stack trace:\n#0 /tmp/tmp07e319dt.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp07e319dt.php\
    \ on line 46\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = explode(',', $interval1);\n    $interval2 = explode(',', $interval2);\n\
    \    $interval1[0] = (int)$interval1[0];\n    $interval1[1] = (int)$interval1[1];\n\
    \    $interval2[0] = (int)$interval2[0];\n    $interval2[1] = (int)$interval2[1];\n\
    \    $intersection = [];\n    if ($interval1[0] < $interval2[0]) {\n        if\
    \ ($interval1[1] < $interval2[0]) {\n            return 'NO';\n        } else\
    \ {\n            $intersection[0] = $interval2[0];\n            if ($interval1[1]\
    \ < $interval2[1]) {\n                $intersection[1] = $interval1[1];\n    \
    \        } else {\n                $intersection[1] = $interval2[1];\n       \
    \     }\n        }\n    } else {\n        if ($interval2[1] < $interval1[0]) {\n\
    \            return 'NO';\n        } else {\n            $intersection[0] = $interval1[0];\n\
    \            if ($interval2[1] < $interval1[1]) {\n                $intersection[1]\
    \ = $interval2[1];\n            } else {\n                $intersection[1] = $interval1[1];\n\
    \            }\n        }\n    }\n    $length = $intersection[1] - $intersection[0]\
    \ + 1;\n    if ($length == 1) {\n        return 'NO';\n    }\n    if ($length\
    \ == 2) {\n        return 'YES';\n    }\n    for ($i = 2; $i < $length; $i++)\
    \ {\n        if ($length % $i == 0) {\n            return 'NO';\n        }\n \
    \   }\n    return 'YES';\n}\necho intersection('1,2', '2,3') . '<br>';\necho intersection('-1,1',\
    \ '0,4') . '<br>';\necho intersection('\nfunction candidate(...$args) {\n    return\
    \ intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected string content \"\" in /tmp/tmp0dkftthb.php\
    \ on line 65\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0],\
    \ $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n    $intersection\
    \ = [];\n    if ($interval1[0] <= $interval2[0] && $interval1[1] >= $interval2[0])\
    \ {\n        $intersection = [$interval2[0], $interval1[1]];\n    } else if ($interval2[0]\
    \ <= $interval1[0] && $interval2[1] >= $interval1[0]) {\n        $intersection\
    \ = [$interval1[0], $interval2[1]];\n    }\n    if (count($intersection) == 0)\
    \ {\n        return \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0];\n\
    \    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}\nfunction candidate(...$args) {\n\
    \    return intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn6ou441o.php:48\n\
    Stack trace:\n#0 /tmp/tmpn6ou441o.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpn6ou441o.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $start = max($interval1[0], $interval2[0]);\n  $end = min($interval1[1], $interval2[1]);\n\
    \  if ($start > $end) {\n    return \"NO\";\n  }\n  $length = $end - $start +\
    \ 1;\n  if ($length < 2) {\n    return \"NO\";\n  }\n  for ($i = 2; $i < $length;\
    \ $i++) {\n    if ($length % $i == 0) {\n      return \"NO\";\n    }\n  }\n  return\
    \ \"YES\";\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppc8lx7iv.php:42\n\
    Stack trace:\n#0 /tmp/tmppc8lx7iv.php(51): test()\n#1 {main}\n  thrown in /tmp/tmppc8lx7iv.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length < 2) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    \nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0kgzc7kf.php:42\n\
    Stack trace:\n#0 /tmp/tmp0kgzc7kf.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp0kgzc7kf.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = [];\n    $intersection[] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return \"NO\";\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n \
    \   }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    function candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpy4d8c2qm.php:43\n\
    Stack trace:\n#0 /tmp/tmpy4d8c2qm.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpy4d8c2qm.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = explode(',', $interval1);\n    $interval2 = explode(',', $interval2);\n\
    \    $interval1[0] = (int)$interval1[0];\n    $interval1[1] = (int)$interval1[1];\n\
    \    $interval2[0] = (int)$interval2[0];\n    $interval2[1] = (int)$interval2[1];\n\
    \    $intersection = [];\n    if ($interval1[0] <= $interval2[0] && $interval1[1]\
    \ >= $interval2[0]) {\n        $intersection[0] = $interval2[0];\n    } else if\
    \ ($interval2[0] <= $interval1[0] && $interval2[1] >= $interval1[0]) {\n     \
    \   $intersection[0] = $interval1[0];\n    } else {\n        return 'NO';\n  \
    \  }\n    if ($interval1[1] <= $interval2[1]) {\n        $intersection[1] = $interval1[1];\n\
    \    } else {\n        $intersection[1] = $interval2[1];\n    }\n    $intersection[1]\
    \ -= $intersection[0];\n    if ($intersection[1] < 2) {\n        return 'NO';\n\
    \    }\n    for ($i = 2; $i <= sqrt($intersection[1]); $i++) {\n        if ($intersection[1]\
    \ % $i == 0) {\n            return 'NO';\n        }\n    }\n    return 'YES';\n\
    }\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1),\
    \ array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: explode(): Argument #2 ($string)\
    \ must be of type string, array given in /tmp/tmpssuhrnva.php:19\nStack trace:\n\
    #0 /tmp/tmpssuhrnva.php(19): explode()\n#1 /tmp/tmpssuhrnva.php(51): intersection()\n\
    #2 /tmp/tmpssuhrnva.php(55): candidate()\n#3 /tmp/tmpssuhrnva.php(65): test()\n\
    #4 {main}\n  thrown in /tmp/tmpssuhrnva.php on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = array_map('intval', explode(', ', $interval1));\n    $interval2\
    \ = array_map('intval', explode(', ', $interval2));\n    $intersection = [];\n\
    \    for ($i = $interval1[0]; $i <= $interval1[1]; $i++) {\n        for ($j =\
    \ $interval2[0]; $j <= $interval2[1]; $j++) {\n            if ($i == $j) {\n \
    \               $intersection[] = $i;\n            }\n        }\n    }\n    if\
    \ (count($intersection) == 0) {\n        return 'NO';\n    }\n    $length = count($intersection);\n\
    \    if ($length == 1) {\n        return 'YES';\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return 'NO';\n\
    \        }\n    }\n    return 'YES';\n}\n\necho intersection('(1, 2)', '(2, 3)')\
    \ . \"\\n\";\necho intersection('(-1, 1)', '(0, 4)') . \"\\n\";\necho intersection('(-3,\
    \ -1)', '(-5, 5)') . \"\\n\";\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "YES\nYES\nNO\n"
  stderr: "PHP Fatal error:  Uncaught TypeError: explode(): Argument #2 ($string)\
    \ must be of type string, array given in /tmp/tmpsiv51egu.php:19\nStack trace:\n\
    #0 /tmp/tmpsiv51egu.php(19): explode()\n#1 /tmp/tmpsiv51egu.php(48): intersection()\n\
    #2 /tmp/tmpsiv51egu.php(52): candidate()\n#3 /tmp/tmpsiv51egu.php(62): test()\n\
    #4 {main}\n  thrown in /tmp/tmpsiv51egu.php on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = range($interval1[0], $interval1[1]);\n    $interval2 = range($interval2[0],\
    \ $interval2[1]);\n    $intersection = array_intersect($interval1, $interval2);\n\
    \    if (count($intersection) == 0) {\n        return \"NO\";\n    }\n    $intersection\
    \ = count($intersection);\n    if ($intersection == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $intersection; $i++) {\n        if ($intersection\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n\necho intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1],\
    \ [0, 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4))\
    \ !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpi6kwczbl.php:46\n\
    Stack trace:\n#0 /tmp/tmpi6kwczbl.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpi6kwczbl.php\
    \ on line 46\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if($start > $end) return \"NO\";\n    $length = $end -\
    \ $start + 1;\n    return isPrime($length) ? \"YES\" : \"NO\";\n}\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function isPrime()\
    \ in /tmp/tmpsj5sn6mv.php:23\nStack trace:\n#0 /tmp/tmpsj5sn6mv.php(26): intersection()\n\
    #1 /tmp/tmpsj5sn6mv.php(30): candidate()\n#2 /tmp/tmpsj5sn6mv.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpsj5sn6mv.php on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    \nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp43wt2u_r.php:42\n\
    Stack trace:\n#0 /tmp/tmp43wt2u_r.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp43wt2u_r.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = [];\n    $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[1] = min($interval1[1], $interval2[1]);\n    if($intersection[0]\
    \ > $intersection[1]) {\n        return \"NO\";\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if($length == 1) {\n        return \"NO\";\n  \
    \  }\n    for($i = 2; $i < $length; $i++) {\n        if($length % $i == 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\necho\
    \ intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4])\
    \ . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3r_60dcx.php:46\n\
    Stack trace:\n#0 /tmp/tmp3r_60dcx.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp3r_60dcx.php\
    \ on line 46\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = [];\n    $intersection[] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return \"NO\";\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n \
    \   }\n    for ($i = 2; $i <= sqrt($length); $i++) {\n        if ($length % $i\
    \ == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n\
    }\n\necho intersection([1, 2], [2, 3]);\necho \"\\n\";\necho intersection([-1,\
    \ 1], [0, 4]);\necho \"\\n\";\necho intersection([-3, -1], [-5, 5]);\necho \"\\\
    n\";\necho intersection([1, 2], [3, 4]);\necho \"\\n\";\necho intersection([1,\
    \ 2], [2, 4]);\necho \"\\n\";\necho intersection([1, 2], [1, 2]);\necho \"\\n\"\
    ;\necho intersection([1, 2], [1, 3]);\necho \"\\n\";\necho intersection([1, 2],\
    \ [2, 2]);\necho \"\\n\";\necho intersection([1, 2], [1, 1]);\necho \"\\n\";\n\
    echo intersection([1, 2], [0, 1]);\necho \"\\n\";\necho intersection([1, 2], [0,\
    \ 2]);\necho \"\\n\";\necho intersection([1, 2], [0, 3]);\necho \"\\n\";\necho\
    \ intersection([1, 2], [0, 4]);\necho \"\\n\";\necho intersection([1, 2], [0,\
    \ 5]);\necho \"\\n\";\necho intersection([1, 2], [0, 6]);\necho \"\\n\";\necho\
    \ intersection([1, 2], [0, 7]);\necho \"\\n\";\necho intersection([1, 2], [0,\
    \ 8]);\necho \"\\n\";\necho intersection([1, 2], [0, 9]);\necho \"\\n\";\necho\
    \ intersection([1, 2], [0, 10]);\necho \"\\\nfunction candidate(...$args) {\n\
    \    return intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"NO\", expecting\
    \ \",\" or \";\" in /tmp/tmpdn8m8nif.php on line 80\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i <= sqrt($length); $i++) {\n        if ($length %\
    \ $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1),\
    \ array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5w0427vo.php:41\n\
    Stack trace:\n#0 /tmp/tmp5w0427vo.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp5w0427vo.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    \necho intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0,\
    \ 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp031j4g6j.php:45\n\
    Stack trace:\n#0 /tmp/tmp031j4g6j.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp031j4g6j.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    \nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpofiefoxn.php:42\n\
    Stack trace:\n#0 /tmp/tmpofiefoxn.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpofiefoxn.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $start = max($interval1[0], $interval2[0]);\n  $end = min($interval1[1], $interval2[1]);\n\
    \  if ($start > $end) {\n    return \"NO\";\n  }\n  $length = $end - $start +\
    \ 1;\n  if ($length < 2) {\n    return \"NO\";\n  }\n  for ($i = 2; $i < $length;\
    \ $i++) {\n    if ($length % $i == 0) {\n      return \"NO\";\n    }\n  }\n  return\
    \ \"YES\";\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5sxw_2lh.php:42\n\
    Stack trace:\n#0 /tmp/tmp5sxw_2lh.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp5sxw_2lh.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = array_intersect(range($interval1[0], $interval1[1]), range($interval2[0],\
    \ $interval2[1]));\n    if (count($intersection) == 0) {\n        return \"NO\"\
    ;\n    }\n    $length = count($intersection);\n    if ($length == 1) {\n     \
    \   return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if\
    \ ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return\
    \ \"YES\";\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuainp6lv.php:41\n\
    Stack trace:\n#0 /tmp/tmpuainp6lv.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpuainp6lv.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $intersection = array_intersect(range($interval1[0], $interval1[1]), range($interval2[0],\
    \ $interval2[1]));\n  if (count($intersection) == 0) {\n    return \"NO\";\n \
    \ }\n  return isPrime(count($intersection)) ? \"YES\" : \"NO\";\n}\n\nfunction\
    \ candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4))\
    \ !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function isPrime()\
    \ in /tmp/tmptumpjhkg.php:23\nStack trace:\n#0 /tmp/tmptumpjhkg.php(27): intersection()\n\
    #1 /tmp/tmptumpjhkg.php(31): candidate()\n#2 /tmp/tmptumpjhkg.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmptumpjhkg.php on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    \necho intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0,\
    \ 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxlh8ob7k.php:45\n\
    Stack trace:\n#0 /tmp/tmpxlh8ob7k.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpxlh8ob7k.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    \necho intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0,\
    \ 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2k2z7kcd.php:45\n\
    Stack trace:\n#0 /tmp/tmp2k2z7kcd.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp2k2z7kcd.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = explode(',', $interval1);\n    $interval2 = explode(',', $interval2);\n\
    \    $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $intersection = [max($interval1[0], $interval2[0]), min($interval1[1],\
    \ $interval2[1])];\n    if ($intersection[0] > $intersection[1]) {\n        return\
    \ 'NO';\n    }\n    $length = $intersection[1] - $intersection[0] + 1;\n    if\
    \ ($length == 1) {\n        return 'NO';\n    }\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            return 'NO';\n      \
    \  }\n    }\n    return 'YES';\n}\necho intersection('1,2', '2,3') . PHP_EOL;\n\
    echo intersection('-1,1', '0,4') . PHP_EOL;\necho intersection('-3,-1', '-5,5')\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught TypeError: explode(): Argument #2 ($string)\
    \ must be of type string, array given in /tmp/tmpmamdg5l5.php:19\nStack trace:\n\
    #0 /tmp/tmpmamdg5l5.php(19): explode()\n#1 /tmp/tmpmamdg5l5.php(42): intersection()\n\
    #2 /tmp/tmpmamdg5l5.php(46): candidate()\n#3 /tmp/tmpmamdg5l5.php(56): test()\n\
    #4 {main}\n  thrown in /tmp/tmpmamdg5l5.php on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $interval1 = array_map('intval', explode(', ', $interval1));\n  $interval2\
    \ = array_map('intval', explode(', ', $interval2));\n  $intersection = [max($interval1[0],\
    \ $interval2[0]), min($interval1[1], $interval2[1])];\n  if ($intersection[0]\
    \ > $intersection[1]) {\n    return 'NO';\n  }\n  return isPrime($intersection[1]\
    \ - $intersection[0] + 1) ? 'YES' : 'NO';\n}\n\nfunction candidate(...$args) {\n\
    \    return intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: explode(): Argument #2 ($string)\
    \ must be of type string, array given in /tmp/tmpkekdjyka.php:19\nStack trace:\n\
    #0 /tmp/tmpkekdjyka.php(19): explode()\n#1 /tmp/tmpkekdjyka.php(29): intersection()\n\
    #2 /tmp/tmpkekdjyka.php(33): candidate()\n#3 /tmp/tmpkekdjyka.php(43): test()\n\
    #4 {main}\n  thrown in /tmp/tmpkekdjyka.php on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = array_map('intval', explode(', ', $interval1));\n    $interval2\
    \ = array_map('intval', explode(', ', $interval2));\n    $intersection = [max($interval1[0],\
    \ $interval2[0]), min($interval1[1], $interval2[1])];\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return 'NO';\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    return isPrime($length) ? 'YES' : 'NO';\n}\nfunction\
    \ candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4))\
    \ !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: explode(): Argument #2 ($string)\
    \ must be of type string, array given in /tmp/tmpzlluxhv_.php:19\nStack trace:\n\
    #0 /tmp/tmpzlluxhv_.php(19): explode()\n#1 /tmp/tmpzlluxhv_.php(29): intersection()\n\
    #2 /tmp/tmpzlluxhv_.php(33): candidate()\n#3 /tmp/tmpzlluxhv_.php(43): test()\n\
    #4 {main}\n  thrown in /tmp/tmpzlluxhv_.php on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = range($interval1[0], $interval1[1]);\n    $interval2 = range($interval2[0],\
    \ $interval2[1]);\n    $intersection = array_intersect($interval1, $interval2);\n\
    \    if (empty($intersection)) {\n        return \"NO\";\n    }\n    $length =\
    \ count($intersection);\n    if ($length == 1) {\n        return \"NO\";\n   \
    \ }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nfunction\
    \ candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4))\
    \ !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpe9ppmnwo.php:43\n\
    Stack trace:\n#0 /tmp/tmpe9ppmnwo.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpe9ppmnwo.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1_start = $interval1[0];\n    $interval1_end = $interval1[1];\n\
    \    $interval2_start = $interval2[0];\n    $interval2_end = $interval2[1];\n\
    \    $intersection_start = max($interval1_start, $interval2_start);\n    $intersection_end\
    \ = min($interval1_end, $interval2_end);\n    if ($intersection_start > $intersection_end)\
    \ {\n        return \"NO\";\n    }\n    if (is_prime($intersection_end - $intersection_start\
    \ + 1)) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_prime()\
    \ in /tmp/tmpqun0__am.php:28\nStack trace:\n#0 /tmp/tmpqun0__am.php(34): intersection()\n\
    #1 /tmp/tmpqun0__am.php(38): candidate()\n#2 /tmp/tmpqun0__am.php(48): test()\n\
    #3 {main}\n  thrown in /tmp/tmpqun0__am.php on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    if ($length == 2) {\n        return \"YES\";\n    }\n    for ($i\
    \ = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp38yfd97s.php:44\n\
    Stack trace:\n#0 /tmp/tmp38yfd97s.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp38yfd97s.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = explode(',', $interval1);\n    $interval2 = explode(',', $interval2);\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return 'NO';\n    }\n   \
    \ $length = $end - $start + 1;\n    if ($length < 2) {\n        return 'NO';\n\
    \    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return 'NO';\n        }\n    }\n    return 'YES';\n}\n\necho\
    \ intersection('1,2', '2,3') . \"\\n\";\necho intersection('-1,1', '0,4') . \"\
    \\n\";\necho intersection('-3,-1', '-5,5') . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught TypeError: explode(): Argument #2 ($string)\
    \ must be of type string, array given in /tmp/tmppunz10wb.php:19\nStack trace:\n\
    #0 /tmp/tmppunz10wb.php(19): explode()\n#1 /tmp/tmppunz10wb.php(42): intersection()\n\
    #2 /tmp/tmppunz10wb.php(46): candidate()\n#3 /tmp/tmppunz10wb.php(56): test()\n\
    #4 {main}\n  thrown in /tmp/tmppunz10wb.php on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    \necho intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0,\
    \ 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxjh4x2ac.php:45\n\
    Stack trace:\n#0 /tmp/tmpxjh4x2ac.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpxjh4x2ac.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length < 2) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    \necho intersection([-3, -1], [-5, 5]) . \"<br>\";\necho intersection([1, 2],\
    \ [2, 3]) . \"<br>\";\necho intersection([-1, 1], [0, 4]) . \"<br>\";\necho intersection([-3,\
    \ -1], [-5, 5]) . \"<br>\";\necho intersection([-3, -1], [-5, 5]) . \"<br>\";\n\
    echo intersection([-3, -1], [-5, 5]) . \"<br>\";\necho intersection([-3, -1],\
    \ [-5, 5]) . \"<br>\";\necho intersection([-3, -1], [-5, 5]) . \"<br>\";\necho\
    \ intersection([-3, -1], [-5, 5]) . \"<br>\";\necho intersection([-3, -1], [-5,\
    \ 5]) . \"<br>\";\necho intersection([-3, -1], [-5, 5]) . \"<br>\";\necho intersection([-3,\
    \ -1], [-5, 5]) . \"<br>\";\necho intersection([-3, -1], [-5, 5]) . \"<br>\";\n\
    echo intersection([-3, -1], [-5, 5]) . \"<br>\";\necho intersection([-3, -1],\
    \ [-5, 5]) . \"<br>\";\necho intersection([-3, -1], [-5, 5]) . \"<br>\";\necho\
    \ intersection([-3, -1], [-5, 5]) . \"<br>\";\necho intersection([-3, -1], [-5,\
    \ 5]) . \"<br>\";\necho intersection([-3, -1], [-5, 5\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \"]\" in /tmp/tmpd48wrn4h.php on line 55\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = [];\n    $intersection[] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return \"NO\";\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n \
    \   }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\necho\
    \ intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4])\
    \ . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpavyvaa4m.php:45\n\
    Stack trace:\n#0 /tmp/tmpavyvaa4m.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpavyvaa4m.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length < 2) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i <= sqrt($length); $i++) {\n        if ($length %\
    \ $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"\
    NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpykasqzio.php:42\n\
    Stack trace:\n#0 /tmp/tmpykasqzio.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpykasqzio.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $intersection = [];\n  $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \  $intersection[1] = min($interval1[1], $interval2[1]);\n  if ($intersection[0]\
    \ > $intersection[1]) {\n    return \"NO\";\n  }\n  $length = $intersection[1]\
    \ - $intersection[0] + 1;\n  if ($length == 1) {\n    return \"NO\";\n  }\n  for\
    \ ($i = 2; $i < $length; $i++) {\n    if ($length % $i == 0) {\n      return \"\
    NO\";\n    }\n  }\n  return \"YES\";\n}\n\nfunction candidate(...$args) {\n  \
    \  return intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqcqgp1el.php:43\n\
    Stack trace:\n#0 /tmp/tmpqcqgp1el.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpqcqgp1el.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    $length = $end - $start;\n    if ($length < 0) {\n    \
    \    return \"NO\";\n    }\n    return isPrime($length) ? \"YES\" : \"NO\";\n\
    }\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1),\
    \ array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function isPrime()\
    \ in /tmp/tmp4oor5hzi.php:25\nStack trace:\n#0 /tmp/tmp4oor5hzi.php(29): intersection()\n\
    #1 /tmp/tmp4oor5hzi.php(33): candidate()\n#2 /tmp/tmp4oor5hzi.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4oor5hzi.php on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if (isPrime($length)) {\n        return\
    \ \"YES\";\n    }\n    return \"NO\";\n}\nfunction candidate(...$args) {\n   \
    \ return intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function isPrime()\
    \ in /tmp/tmpdbnjn9xy.php:25\nStack trace:\n#0 /tmp/tmpdbnjn9xy.php(31): intersection()\n\
    #1 /tmp/tmpdbnjn9xy.php(35): candidate()\n#2 /tmp/tmpdbnjn9xy.php(45): test()\n\
    #3 {main}\n  thrown in /tmp/tmpdbnjn9xy.php on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    \necho intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0,\
    \ 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1mug7yx_.php:45\n\
    Stack trace:\n#0 /tmp/tmp1mug7yx_.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1mug7yx_.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0],\
    \ $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n    $intersection\
    \ = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n \
    \       if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpz5r7keqn.php:45\n\
    Stack trace:\n#0 /tmp/tmpz5r7keqn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpz5r7keqn.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length < 2) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    \necho intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0,\
    \ 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphoup6kmk.php:45\n\
    Stack trace:\n#0 /tmp/tmphoup6kmk.php(54): test()\n#1 {main}\n  thrown in /tmp/tmphoup6kmk.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = array_intersect($interval1, $interval2);\n    if (count($intersection)\
    \ === 0) {\n        return \"NO\";\n    }\n    $length = max($intersection) -\
    \ min($intersection);\n    return isPrime($length) ? \"YES\" : \"NO\";\n}\n\n\
    function candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function isPrime()\
    \ in /tmp/tmpilabyifs.php:24\nStack trace:\n#0 /tmp/tmpilabyifs.php(28): intersection()\n\
    #1 /tmp/tmpilabyifs.php(32): candidate()\n#2 /tmp/tmpilabyifs.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpilabyifs.php on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $interval1 = array_map('intval', explode(', ', $interval1));\n  $interval2\
    \ = array_map('intval', explode(', ', $interval2));\n  $intersection = array_intersect($interval1,\
    \ $interval2);\n  if (count($intersection) == 0) {\n    return 'NO';\n  }\n  $length\
    \ = count($intersection);\n  if ($length == 1) {\n    return 'YES';\n  }\n  for\
    \ ($i = 2; $i < $length; $i++) {\n    if ($length % $i == 0) {\n      return 'NO';\n\
    \    }\n  }\n  return 'YES';\n}\n\nfunction candidate(...$args) {\n    return\
    \ intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: explode(): Argument #2 ($string)\
    \ must be of type string, array given in /tmp/tmpjgqt13mn.php:19\nStack trace:\n\
    #0 /tmp/tmpjgqt13mn.php(19): explode()\n#1 /tmp/tmpjgqt13mn.php(38): intersection()\n\
    #2 /tmp/tmpjgqt13mn.php(42): candidate()\n#3 /tmp/tmpjgqt13mn.php(52): test()\n\
    #4 {main}\n  thrown in /tmp/tmpjgqt13mn.php on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length <= 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    echo intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4])\
    \ . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpudec908n.php:44\n\
    Stack trace:\n#0 /tmp/tmpudec908n.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpudec908n.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval = [];\n    $interval[0] = max($interval1[0], $interval2[0]);\n\
    \    $interval[1] = min($interval1[1], $interval2[1]);\n    if ($interval[0] >\
    \ $interval[1]) {\n        return \"NO\";\n    }\n    $length = $interval[1] -\
    \ $interval[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n\
    \    if ($length == 2) {\n        return \"YES\";\n    }\n    for ($i = 2; $i\
    \ < $length; $i++) {\n        if ($length % $i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuhl2ogwy.php:46\n\
    Stack trace:\n#0 /tmp/tmpuhl2ogwy.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpuhl2ogwy.php\
    \ on line 46\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    if ($interval1[0] > $interval1[1]) {\n        $interval1 =\
    \ array_reverse($interval1);\n    }\n    if ($interval2[0] > $interval2[1]) {\n\
    \        $interval2 = array_reverse($interval2);\n    }\n    $intersection = [];\n\
    \    if ($interval1[0] <= $interval2[0] && $interval1[1] >= $interval2[0]) {\n\
    \        $intersection[] = $interval2[0];\n    }\n    if ($interval1[0] <= $interval2[1]\
    \ && $interval1[1] >= $interval2[1]) {\n        $intersection[] = $interval2[1];\n\
    \    }\n    if ($interval2[0] <= $interval1[0] && $interval2[1] >= $interval1[0])\
    \ {\n        $intersection[] = $interval1[0];\n    }\n    if ($interval2[0] <=\
    \ $interval1[1] && $interval2[1] >= $interval1[1]) {\n        $intersection[]\
    \ = $interval1[1];\n    }\n    if (count($intersection) == 0) {\n        return\
    \ \"NO\";\n    }\n    $intersection = array_unique($intersection);\n    sort($intersection);\n\
    \    $length = $intersection[count($intersection) - 1] - $intersection[0];\n \
    \   if ($length == 0) {\n        return \"YES\";\n    }\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    if ($length == 2) {\n        return \"\
    YES\";\n    }\n    if ($length % 2 == 0) {\n        return \"NO\";\n    }\n  \
    \  for ($i = 3; $i <= sqrt($length); $i += 2) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n   \nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  Unclosed '{' on line 58 in /tmp/tmp0cl4sm10.php on line\
    \ 78\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $start = max($interval1[0], $interval2[0]);\n  $end = min($interval1[1], $interval2[1]);\n\
    \  if ($start > $end) {\n    return \"NO\";\n  }\n  $length = $end - $start +\
    \ 1;\n  if ($length == 1) {\n    return \"NO\";\n  }\n  for ($i = 2; $i < $length;\
    \ $i++) {\n    if ($length % $i == 0) {\n      return \"NO\";\n    }\n  }\n  return\
    \ \"YES\";\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpa_js1ewr.php:42\n\
    Stack trace:\n#0 /tmp/tmpa_js1ewr.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpa_js1ewr.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $interval1 = array_map('intval', explode(', ', $interval1));\n  $interval2\
    \ = array_map('intval', explode(', ', $interval2));\n  $intersection = array_intersect($interval1,\
    \ $interval2);\n  if (count($intersection) == 0) {\n    return 'NO';\n  }\n  $length\
    \ = count($intersection);\n  if ($length == 1) {\n    return 'YES';\n  }\n  for\
    \ ($i = 2; $i < $length; $i++) {\n    if ($length % $i == 0) {\n      return 'NO';\n\
    \    }\n  }\n  return 'YES';\n}\n\necho intersection('(1, 2)', '(2, 3)') . \"\\\
    n\";\necho intersection('(-1, 1)', '(0, 4)') . \"\\n\";\necho intersection('(-3,\
    \ -1)', '(-5, 5)') . \"\\n\";\necho intersection('(1, 3)', '(2, 4)') . \"\\n\"\
    ;\necho intersection('(1, 3)', '(3, 4)') . \"\\n\";\necho intersection('(1, 3)',\
    \ '(2, 5)') . \"\\n\";\necho intersection('(1, 3)', '(3, 5)') . \"\\n\";\necho\
    \ intersection('(1, 3)', '(4, 5)') . \"\\n\";\necho intersection('(1, 3)', '(5,\
    \ 6)') . \"\\n\";\necho intersection('(1, 3)', '(6, 7)') . \"\\n\";\necho intersection('(1,\
    \ 3)', '(7, 8)') . \"\\n\";\necho intersection('(1, 3)', '(8, 9)') . \"\\n\";\n\
    echo intersection('(1, 3)', '(9, 10)') . \"\\n\";\necho intersection('(1, 3)',\
    \ '(10, 11)') . \"\\n\";\necho intersection('(1, 3)', '(11, 12)') . \"\\n\";\n\
    echo intersection('(1, 3)', '(12, 13)') . \"\\n\";\necho intersection('(1, 3)',\
    \ '(13, 14)') . \"\\n\";\necho intersection\nfunction candidate(...$args) {\n\
    \    return intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \",\" or \";\" in /tmp/tmpfq_67sd0.php on line 55\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    $length = $end - $start;\n    if ($length < 0) {\n    \
    \    return \"NO\";\n    }\n    if ($length == 1) {\n        return \"NO\";\n\
    \    }\n    if ($length == 2) {\n        return \"YES\";\n    }\n    for ($i =\
    \ 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxa_ei1kj.php:44\n\
    Stack trace:\n#0 /tmp/tmpxa_ei1kj.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpxa_ei1kj.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0],\
    \ $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n    if ($interval1[1]\
    \ < $interval2[0] || $interval2[1] < $interval1[0]) {\n        return \"NO\";\n\
    \    }\n    $intersection = [max($interval1[0], $interval2[0]), min($interval1[1],\
    \ $interval2[1])];\n    $length = $intersection[1] - $intersection[0] + 1;\n \
    \   if ($length < 2) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}\n\necho intersection([1, 2], [2, 3]) . \"\
    \\n\";\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3,\
    \ -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5e0dy0qf.php:48\n\
    Stack trace:\n#0 /tmp/tmp5e0dy0qf.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp5e0dy0qf.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $intersection = [];\n  $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \  $intersection[1] = min($interval1[1], $interval2[1]);\n  if ($intersection[0]\
    \ > $intersection[1]) {\n    return \"NO\";\n  }\n  return isPrime($intersection[1]\
    \ - $intersection[0] + 1) ? \"YES\" : \"NO\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function isPrime()\
    \ in /tmp/tmp61wda_cy.php:25\nStack trace:\n#0 /tmp/tmp61wda_cy.php(29): intersection()\n\
    #1 /tmp/tmp61wda_cy.php(33): candidate()\n#2 /tmp/tmp61wda_cy.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmp61wda_cy.php on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = [];\n    if ($interval1[0] <= $interval2[0] && $interval1[1]\
    \ >= $interval2[0]) {\n        $intersection[] = $interval2[0];\n    }\n    if\
    \ ($interval1[0] <= $interval2[1] && $interval1[1] >= $interval2[1]) {\n     \
    \   $intersection[] = $interval2[1];\n    }\n    if ($interval2[0] <= $interval1[0]\
    \ && $interval2[1] >= $interval1[0]) {\n        $intersection[] = $interval1[0];\n\
    \    }\n    if ($interval2[0] <= $interval1[1] && $interval2[1] >= $interval1[1])\
    \ {\n        $intersection[] = $interval1[1];\n    }\n    if (count($intersection)\
    \ == 0) {\n        return \"NO\";\n    }\n    $intersection = array_unique($intersection);\n\
    \    sort($intersection);\n    $length = $intersection[count($intersection) -\
    \ 1] - $intersection[0];\n    if ($length == 1) {\n        return \"NO\";\n  \
    \  }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\necho\
    \ intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4])\
    \ . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\necho intersection([-3,\
    \ -1], [-5, -4]) . \"\\n\";\necho intersection([-3, -1], [-5, -3]) . \"\\n\";\n\
    echo intersection([-3, -1], [-5, -2]) . \"\\n\";\necho intersection([-3, -1],\
    \ [-5, -1]) . \"\\n\";\necho intersection([-3, -1], [-5, 0]) . \"\\n\";\necho\
    \ intersection([-3, -1\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \"]\" in /tmp/tmpdvzyyuv5.php on line 58\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = [];\n    $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[1] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return \"NO\";\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n \
    \   }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    function candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpv4tco3yg.php:43\n\
    Stack trace:\n#0 /tmp/tmpv4tco3yg.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpv4tco3yg.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = explode(',', $interval1);\n    $interval2 = explode(',', $interval2);\n\
    \    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0],\
    \ $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n    if ($interval1[0]\
    \ > $interval2[1] || $interval2[0] > $interval1[1]) {\n        return 'NO';\n\
    \    }\n    $intersection = [max($interval1[0], $interval2[0]), min($interval1[1],\
    \ $interval2[1])];\n    $length = $intersection[1] - $intersection[0] + 1;\n \
    \   if ($length < 2) {\n        return 'NO';\n    }\n    for ($i = 2; $i <= sqrt($length);\
    \ $i++) {\n        if ($length % $i == 0) {\n            return 'NO';\n      \
    \  }\n    }\n    return 'YES';\n}\n\necho intersection('1,2', '2,3') . PHP_EOL;\n\
    echo intersection('-1,1', '0,4') . PHP_EOL;\necho intersection('-3,-1', '-5,5')\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught TypeError: explode(): Argument #2 ($string)\
    \ must be of type string, array given in /tmp/tmpy4dngcui.php:19\nStack trace:\n\
    #0 /tmp/tmpy4dngcui.php(19): explode()\n#1 /tmp/tmpy4dngcui.php(45): intersection()\n\
    #2 /tmp/tmpy4dngcui.php(49): candidate()\n#3 /tmp/tmpy4dngcui.php(59): test()\n\
    #4 {main}\n  thrown in /tmp/tmpy4dngcui.php on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $intersect = array_intersect(range($interval1[0], $interval1[1]), range($interval2[0],\
    \ $interval2[1]));\n  if (count($intersect) == 0) {\n    return \"NO\";\n  }\n\
    \  return isPrime(count($intersect)) ? \"YES\" : \"NO\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function isPrime()\
    \ in /tmp/tmpuuniujia.php:23\nStack trace:\n#0 /tmp/tmpuuniujia.php(27): intersection()\n\
    #1 /tmp/tmpuuniujia.php(31): candidate()\n#2 /tmp/tmpuuniujia.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpuuniujia.php on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersect = [];\n    $intersect[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersect[1] = min($interval1[1], $interval2[1]);\n    if ($intersect[0]\
    \ > $intersect[1]) {\n        return \"NO\";\n    }\n    $length = $intersect[1]\
    \ - $intersect[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n\
    \    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n  \
    \          return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nfunction\
    \ candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4))\
    \ !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmps4c1kfl4.php:43\n\
    Stack trace:\n#0 /tmp/tmps4c1kfl4.php(52): test()\n#1 {main}\n  thrown in /tmp/tmps4c1kfl4.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = array_intersect(range($interval1[0], $interval1[1]), range($interval2[0],\
    \ $interval2[1]));\n    if (count($intersection) == 0) {\n        return \"NO\"\
    ;\n    }\n    $length = count($intersection);\n    if ($length == 1) {\n     \
    \   return \"NO\";\n    }\n    if ($length == 2) {\n        return \"YES\";\n\
    \    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    echo intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4])\
    \ . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyp_2y12o.php:47\n\
    Stack trace:\n#0 /tmp/tmpyp_2y12o.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpyp_2y12o.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start1 = $interval1[0];\n    $end1 = $interval1[1];\n    $start2 = $interval2[0];\n\
    \    $end2 = $interval2[1];\n    $intersection = [];\n    if ($start1 <= $start2)\
    \ {\n        if ($end1 < $start2) {\n            return \"NO\";\n        } else\
    \ {\n            $intersection[] = $start2;\n            if ($end1 < $end2) {\n\
    \                $intersection[] = $end1;\n            } else {\n            \
    \    $intersection[] = $end2;\n            }\n        }\n    } else {\n      \
    \  if ($end2 < $start1) {\n            return \"NO\";\n        } else {\n    \
    \        $intersection[] = $start1;\n            if ($end2 < $end1) {\n      \
    \          $intersection[] = $end2;\n            } else {\n                $intersection[]\
    \ = $end1;\n            }\n        }\n    }\n    $length = $intersection[1] -\
    \ $intersection[0] + 1;\n    if ($length < 2) {\n        return \"NO\";\n    }\n\
    \    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n  \
    \          return \"NO\";\n        }\n    }\n    return \"YES\";\n}\necho intersection([1,\
    \ 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho\
    \ intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2eyokt79.php:67\n\
    Stack trace:\n#0 /tmp/tmp2eyokt79.php(76): test()\n#1 {main}\n  thrown in /tmp/tmp2eyokt79.php\
    \ on line 67\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $intersection = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \  if ($intersection[0] > $intersection[1]) {\n    return \"NO\";\n  }\n  $length\
    \ = $intersection[1] - $intersection[0] + 1;\n  if ($length == 1) {\n    return\
    \ \"NO\";\n  }\n  for ($i = 2; $i < $length; $i++) {\n    if ($length % $i ==\
    \ 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1fi9mee7.php:41\n\
    Stack trace:\n#0 /tmp/tmp1fi9mee7.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp1fi9mee7.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $intersect = array_intersect(range($interval1[0], $interval1[1]), range($interval2[0],\
    \ $interval2[1]));\n  return count($intersect) > 1 && isPrime(count($intersect))\
    \ ? 'YES' : 'NO';\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function isPrime()\
    \ in /tmp/tmpgjoghqvf.php:20\nStack trace:\n#0 /tmp/tmpgjoghqvf.php(24): intersection()\n\
    #1 /tmp/tmpgjoghqvf.php(29): candidate()\n#2 /tmp/tmpgjoghqvf.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpgjoghqvf.php on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length < 2)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n \
    \       if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\n\necho intersection([1, 2], [2, 3]) . \"\\n\";\necho\
    \ intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5])\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp69ftoimj.php:44\n\
    Stack trace:\n#0 /tmp/tmp69ftoimj.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp69ftoimj.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    $length = $end - $start;\n    if ($length <= 0) {\n   \
    \     return \"NO\";\n    }\n    if ($length == 1) {\n        return \"NO\";\n\
    \    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    echo intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4])\
    \ . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NO\nNO\nYES\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = array_map('intval', explode(', ', $interval1));\n    $interval2\
    \ = array_map('intval', explode(', ', $interval2));\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (count($intersection) == 0) {\n        return 'NO';\n \
    \   }\n    $length = count($intersection);\n    $primes = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    return in_array($length, $primes) ? 'YES' : 'NO';\n}\n\necho intersection('1,\
    \ 2', '2, 3') . PHP_EOL;\necho intersection('-1, 1', '0, 4') . PHP_EOL;\necho\
    \ intersection('-3, -1', '-5, 5') . PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NO\nNO\nNO\n"
  stderr: "PHP Fatal error:  Uncaught TypeError: explode(): Argument #2 ($string)\
    \ must be of type string, array given in /tmp/tmp5x2yiq3j.php:19\nStack trace:\n\
    #0 /tmp/tmp5x2yiq3j.php(19): explode()\n#1 /tmp/tmp5x2yiq3j.php(34): intersection()\n\
    #2 /tmp/tmp5x2yiq3j.php(38): candidate()\n#3 /tmp/tmp5x2yiq3j.php(48): test()\n\
    #4 {main}\n  thrown in /tmp/tmp5x2yiq3j.php on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length <= 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    \necho intersection([1, 2], [2, 3]);\necho \"\\n\";\necho intersection([-1, 1],\
    \ [0, 4]);\necho \"\\n\";\necho intersection([-3, -1], [-5, 5]);\necho \"\\n\"\
    ;\necho intersection([-3, -1], [-5, -4]);\necho \"\\n\";\necho intersection([-3,\
    \ -1], [-5, -6]);\necho \"\\n\";\necho intersection([-3, -1], [-5, -2]);\necho\
    \ \"\\n\";\necho intersection([-3, -1], [-5, -1]);\necho \"\\n\";\necho intersection([-3,\
    \ -1], [-5, 0]);\necho \"\\n\";\necho intersection([-3, -1], [-5, 1]);\necho \"\
    \\n\";\necho intersection([-3, -1], [-5, 2]);\necho \"\\n\";\necho intersection([-3,\
    \ -1], [-5, 3]);\necho \"\\n\";\necho intersection([-3, -1], [-5, 4]);\necho \"\
    \\n\";\necho intersection([-3, -1], [-5, 5]);\necho \"\\n\";\necho intersection([-3,\
    \ -1], [-4, 5]);\necho \"\\n\";\necho intersection([-3, -1], [-3, 5]);\necho \"\
    \\n\";\necho intersection([-3, -1], [-2, 5]);\necho \"\\n\";\necho intersection([-3,\
    \ -1], [-1, 5]);\necho \"\\n\";\necho intersection([-3, -1], [0, 5]);\necho \"\
    \\n\";\necho intersection([-3, -1],\nfunction candidate(...$args) {\n    return\
    \ intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"candidate\", expecting\
    \ \"(\" in /tmp/tmpw8l227t2.php on line 73\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = array_map('intval', explode(', ', $interval1));\n    $interval2\
    \ = array_map('intval', explode(', ', $interval2));\n    $intersection = [max($interval1[0],\
    \ $interval2[0]), min($interval1[1], $interval2[1])];\n    if ($intersection[0]\
    \ > $intersection[1]) return 'NO';\n    $length = $intersection[1] - $intersection[0]\
    \ + 1;\n    if ($length == 1) return 'NO';\n    if ($length == 2) return 'YES';\n\
    \    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) return\
    \ 'NO';\n    }\n    return 'YES';\n}\n\nfunction candidate(...$args) {\n    return\
    \ intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: explode(): Argument #2 ($string)\
    \ must be of type string, array given in /tmp/tmpqae7kn1n.php:19\nStack trace:\n\
    #0 /tmp/tmpqae7kn1n.php(19): explode()\n#1 /tmp/tmpqae7kn1n.php(33): intersection()\n\
    #2 /tmp/tmpqae7kn1n.php(37): candidate()\n#3 /tmp/tmpqae7kn1n.php(47): test()\n\
    #4 {main}\n  thrown in /tmp/tmpqae7kn1n.php on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    if ($intersection[0] > $intersection[1]) return \"NO\";\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length == 1) return \"NO\";\n    if ($length\
    \ == 2) return \"YES\";\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) return \"NO\";\n    }\n    return \"YES\";\n}\n\necho intersection([1,\
    \ 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho\
    \ intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3ox25_be.php:39\n\
    Stack trace:\n#0 /tmp/tmp3ox25_be.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp3ox25_be.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length <= 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    \nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_tzptgct.php:42\n\
    Stack trace:\n#0 /tmp/tmp_tzptgct.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp_tzptgct.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = array_map('intval', explode(', ', $interval1));\n    $interval2\
    \ = array_map('intval', explode(', ', $interval2));\n    $intersection = [];\n\
    \    if ($interval1[0] >= $interval2[0] && $interval1[0] <= $interval2[1]) {\n\
    \        $intersection[] = $interval1[0];\n    }\n    if ($interval1[1] >= $interval2[0]\
    \ && $interval1[1] <= $interval2[1]) {\n        $intersection[] = $interval1[1];\n\
    \    }\n    if ($interval2[0] >= $interval1[0] && $interval2[0] <= $interval1[1])\
    \ {\n        $intersection[] = $interval2[0];\n    }\n    if ($interval2[1] >=\
    \ $interval1[0] && $interval2[1] <= $interval1[1]) {\n        $intersection[]\
    \ = $interval2[1];\n    }\n    if (empty($intersection)) {\n        return 'NO';\n\
    \    }\n    $intersection = array_unique($intersection);\n    sort($intersection);\n\
    \    $length = $intersection[count($intersection) - 1] - $intersection[0];\n \
    \   if ($length < 2) {\n        return 'NO';\n    }\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            return 'NO';\n      \
    \  }\n    }\n    return 'YES';\n}\necho intersection('(1, 2)', '(2, 3)') . '<br>';\n\
    echo intersection('(-1, 1)', '(0, 4)') . '<br>';\necho intersection('(-3, -1)',\
    \ '(-5, 5)') . '<br>';\necho intersection('(-3, -1)', '(-5, -4)') . '<br>';\n\
    echo intersection('(-3, -1)', '(-5, -2)') . '<br>';\necho\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"candidate\", expecting\
    \ \"(\" in /tmp/tmp86t6m0xq.php on line 56\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = explode(',', $interval1);\n    $interval2 = explode(',', $interval2);\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return 'NO';\n    }\n   \
    \ $length = $end - $start + 1;\n    if ($length == 1) {\n        return 'NO';\n\
    \    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return 'NO';\n        }\n    }\n    return 'YES';\n}\necho intersection('(1,\
    \ 2)', '(2, 3)') . PHP_EOL;\necho intersection('(-1, 1)', '(0, 4)') . PHP_EOL;\n\
    echo intersection('(-3, -1)', '(-5, 5)') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NO\nNO\nNO\n"
  stderr: "PHP Fatal error:  Uncaught TypeError: explode(): Argument #2 ($string)\
    \ must be of type string, array given in /tmp/tmpuznvdt6v.php:19\nStack trace:\n\
    #0 /tmp/tmpuznvdt6v.php(19): explode()\n#1 /tmp/tmpuznvdt6v.php(41): intersection()\n\
    #2 /tmp/tmpuznvdt6v.php(45): candidate()\n#3 /tmp/tmpuznvdt6v.php(55): test()\n\
    #4 {main}\n  thrown in /tmp/tmpuznvdt6v.php on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    \nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxoo86k6q.php:42\n\
    Stack trace:\n#0 /tmp/tmpxoo86k6q.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpxoo86k6q.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0],\
    \ $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n    $intersection\
    \ = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n \
    \       if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\necho intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1,\
    \ 1], [0, 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4))\
    \ !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpw6fkdavh.php:47\n\
    Stack trace:\n#0 /tmp/tmpw6fkdavh.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpw6fkdavh.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    echo intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4])\
    \ . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzfjwojdh.php:44\n\
    Stack trace:\n#0 /tmp/tmpzfjwojdh.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpzfjwojdh.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = [];\n    $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[1] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return \"NO\";\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n \
    \   }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    function candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzdc7ehqn.php:43\n\
    Stack trace:\n#0 /tmp/tmpzdc7ehqn.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpzdc7ehqn.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $intersection = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \  if ($intersection[0] > $intersection[1]) return \"NO\";\n  return isPrime($intersection[1]\
    \ - $intersection[0] + 1) ? \"YES\" : \"NO\";\n}\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function isPrime()\
    \ in /tmp/tmprh6e2c2x.php:21\nStack trace:\n#0 /tmp/tmprh6e2c2x.php(24): intersection()\n\
    #1 /tmp/tmprh6e2c2x.php(28): candidate()\n#2 /tmp/tmprh6e2c2x.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmprh6e2c2x.php on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length < 2) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    echo intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4])\
    \ . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpk675w016.php:44\n\
    Stack trace:\n#0 /tmp/tmpk675w016.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpk675w016.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0],\
    \ $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n    $interval\
    \ = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    if ($interval[0] > $interval[1]) {\n        return \"NO\";\n    }\n    $length\
    \ = $interval[1] - $interval[0] + 1;\n    if ($length == 1) {\n        return\
    \ \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"\
    NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpptkw78nm.php:45\n\
    Stack trace:\n#0 /tmp/tmpptkw78nm.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpptkw78nm.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if (isPrime($length)) {\n        return\
    \ \"YES\";\n    }\n    return \"NO\";\n}\nfunction candidate(...$args) {\n   \
    \ return intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function isPrime()\
    \ in /tmp/tmp0645i9wg.php:25\nStack trace:\n#0 /tmp/tmp0645i9wg.php(31): intersection()\n\
    #1 /tmp/tmp0645i9wg.php(35): candidate()\n#2 /tmp/tmp0645i9wg.php(45): test()\n\
    #3 {main}\n  thrown in /tmp/tmp0645i9wg.php on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = explode(',', $interval1);\n    $interval2 = explode(',', $interval2);\n\
    \    $interval1[0] = (int)$interval1[0];\n    $interval1[1] = (int)$interval1[1];\n\
    \    $interval2[0] = (int)$interval2[0];\n    $interval2[1] = (int)$interval2[1];\n\
    \    $intersection = [];\n    $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[1] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return 'NO';\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length < 2) {\n        return 'NO';\n    }\n\
    \    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n  \
    \          return 'NO';\n        }\n    }\n    return 'YES';\n}\n\necho intersection('1,2',\
    \ '2,3') . PHP_EOL;\necho intersection('-1,1', '0,4') . PHP_EOL;\necho intersection('-3,-1',\
    \ '-5,5') . PHP_EOL;\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught TypeError: explode(): Argument #2 ($string)\
    \ must be of type string, array given in /tmp/tmpl1fe72_2.php:19\nStack trace:\n\
    #0 /tmp/tmpl1fe72_2.php(19): explode()\n#1 /tmp/tmpl1fe72_2.php(47): intersection()\n\
    #2 /tmp/tmpl1fe72_2.php(51): candidate()\n#3 /tmp/tmpl1fe72_2.php(61): test()\n\
    #4 {main}\n  thrown in /tmp/tmpl1fe72_2.php on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    \nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptm8kaneh.php:42\n\
    Stack trace:\n#0 /tmp/tmptm8kaneh.php(51): test()\n#1 {main}\n  thrown in /tmp/tmptm8kaneh.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length < 2) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    \nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqmcluudw.php:42\n\
    Stack trace:\n#0 /tmp/tmpqmcluudw.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpqmcluudw.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = explode(',', $interval1);\n    $interval2 = explode(',', $interval2);\n\
    \    $intersection = [];\n    if ($interval1[0] >= $interval2[0] && $interval1[0]\
    \ <= $interval2[1]) {\n        $intersection[] = $interval1[0];\n    }\n    if\
    \ ($interval1[1] >= $interval2[0] && $interval1[1] <= $interval2[1]) {\n     \
    \   $intersection[] = $interval1[1];\n    }\n    if ($interval2[0] >= $interval1[0]\
    \ && $interval2[0] <= $interval1[1]) {\n        $intersection[] = $interval2[0];\n\
    \    }\n    if ($interval2[1] >= $interval1[0] && $interval2[1] <= $interval1[1])\
    \ {\n        $intersection[] = $interval2[1];\n    }\n    if (count($intersection)\
    \ == 0) {\n        return 'NO';\n    }\n    $intersection = max($intersection)\
    \ - min($intersection);\n    if ($intersection == 1) {\n        return 'NO';\n\
    \    }\n    for ($i = 2; $i < $intersection; $i++) {\n        if ($intersection\
    \ % $i == 0) {\n            return 'NO';\n        }\n    }\n    return 'YES';\n\
    }\necho intersection('1,2', '2,3') . \"\\n\";\necho intersection('-1,1', '0,4')\
    \ . \"\\n\";\necho intersection('-3,-1', '-5,5') . \"\\n\";\necho intersection('-1,1',\
    \ '0,4') . \"\\n\";\necho intersection('-3,-1', '-5,5') . \"\\n\";\necho intersection('-1,1',\
    \ '0,4') . \"\\n\";\necho intersection('-3,-1', '-5,5') . \"\\n\";\necho intersection('-1,1',\
    \ '0,4') . \"\\n\";\necho intersection('-3,-1',\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"candidate\", expecting\
    \ \"(\" in /tmp/tmpc3hlf2lp.php on line 57\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = [];\n    $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[1] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return \"NO\";\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n \
    \   }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    function candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpq3uwti2k.php:43\n\
    Stack trace:\n#0 /tmp/tmpq3uwti2k.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpq3uwti2k.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $start = max($interval1[0], $interval2[0]);\n  $end = min($interval1[1], $interval2[1]);\n\
    \  if ($start > $end) return \"NO\";\n  if ($start == $end) return \"YES\";\n\
    \  $prime = true;\n  for ($i = 2; $i < $end; $i++) {\n    if ($end % $i == 0)\
    \ {\n      $prime = false;\n      break;\n    }\n  }\n  return $prime ? \"YES\"\
    \ : \"NO\";\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9o_x2n5e.php:38\n\
    Stack trace:\n#0 /tmp/tmp9o_x2n5e.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp9o_x2n5e.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = array_map('intval', explode(', ', $interval1));\n    $interval2\
    \ = array_map('intval', explode(', ', $interval2));\n    $intersection = [max($interval1[0],\
    \ $interval2[0]), min($interval1[1], $interval2[1])];\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return 'NO';\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length < 2) {\n        return 'NO';\n    }\n\
    \    if ($length == 2) {\n        return 'YES';\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return 'NO';\n\
    \        }\n    }\n    return 'YES';\n}\necho intersection('1, 2', '2, 3') . PHP_EOL;\n\
    echo intersection('-1, 1', '0, 4') . PHP_EOL;\necho intersection('-3, -1', '-5,\
    \ 5') . PHP_EOL;\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught TypeError: explode(): Argument #2 ($string)\
    \ must be of type string, array given in /tmp/tmps8qlrqt1.php:19\nStack trace:\n\
    #0 /tmp/tmps8qlrqt1.php(19): explode()\n#1 /tmp/tmps8qlrqt1.php(43): intersection()\n\
    #2 /tmp/tmps8qlrqt1.php(47): candidate()\n#3 /tmp/tmps8qlrqt1.php(57): test()\n\
    #4 {main}\n  thrown in /tmp/tmps8qlrqt1.php on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n \
    \       if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmekuaqui.php:41\n\
    Stack trace:\n#0 /tmp/tmpmekuaqui.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpmekuaqui.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    \nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpid2n1q7g.php:42\n\
    Stack trace:\n#0 /tmp/tmpid2n1q7g.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpid2n1q7g.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = explode(',', $interval1);\n    $interval2 = explode(',', $interval2);\n\
    \    $interval1[0] = (int)$interval1[0];\n    $interval1[1] = (int)$interval1[1];\n\
    \    $interval2[0] = (int)$interval2[0];\n    $interval2[1] = (int)$interval2[1];\n\
    \    $intersection = [];\n    if ($interval1[0] <= $interval2[0] && $interval1[1]\
    \ >= $interval2[0]) {\n        $intersection[] = $interval2[0];\n    }\n    if\
    \ ($interval1[0] <= $interval2[1] && $interval1[1] >= $interval2[1]) {\n     \
    \   $intersection[] = $interval2[1];\n    }\n    if ($interval2[0] <= $interval1[0]\
    \ && $interval2[1] >= $interval1[0]) {\n        $intersection[] = $interval1[0];\n\
    \    }\n    if ($interval2[0] <= $interval1[1] && $interval2[1] >= $interval1[1])\
    \ {\n        $intersection[] = $interval1[1];\n    }\n    if (count($intersection)\
    \ == 0) {\n        return 'NO';\n    }\n    sort($intersection);\n    $intersection\
    \ = $intersection[1] - $intersection[0];\n    if ($intersection == 1) {\n    \
    \    return 'NO';\n    }\n    for ($i = 2; $i < $intersection; $i++) {\n     \
    \   if ($intersection % $i == 0) {\n            return 'NO';\n        }\n    }\n\
    \    return 'YES';\n}\necho intersection('1, 2', '2, 3') . '<br>';\necho intersection('-1,\
    \ 1', '0, 4') . '<br>';\necho intersection('-3, -1', '-5, 5') . '<br>';\necho\
    \ intersection('-\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected string content \"-\" in /tmp/tmpwypiupni.php\
    \ on line 56\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $intersect = array_intersect(range($interval1[0], $interval1[1]), range($interval2[0],\
    \ $interval2[1]));\n  if (count($intersect) == 0) {\n    return \"NO\";\n  }\n\
    \  $length = count($intersect);\n  if ($length == 1) {\n    return \"NO\";\n \
    \ }\n  for ($i = 2; $i < $length; $i++) {\n    if ($length % $i == 0) {\n    \
    \  return \"NO\";\n    }\n  }\n  return \"YES\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpak_qyzdj.php:41\n\
    Stack trace:\n#0 /tmp/tmpak_qyzdj.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpak_qyzdj.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    \nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6b8hu6db.php:42\n\
    Stack trace:\n#0 /tmp/tmp6b8hu6db.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp6b8hu6db.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0],\
    \ $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n    $interval1\
    \ = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0], $interval2[1]];\n\
    \    if ($interval1[0] > $interval2[1] || $interval2[0] > $interval1[1]) {\n \
    \       return \"NO\";\n    }\n    $intersection = [max($interval1[0], $interval2[0]),\
    \ min($interval1[1], $interval2[1])];\n    $length = $intersection[1] - $intersection[0]\
    \ + 1;\n    if ($length < 2) {\n        return \"NO\";\n    }\n    for ($i = 2;\
    \ $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\necho intersection([1, 2],\
    \ [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3,\
    \ -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdmgkao_7.php:50\n\
    Stack trace:\n#0 /tmp/tmpdmgkao_7.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpdmgkao_7.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = [];\n    $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[1] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return \"NO\";\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n \
    \   }\n    $prime = true;\n    for ($i = 2; $i < $length; $i++) {\n        if\
    \ ($length % $i == 0) {\n            $prime = false;\n            break;\n   \
    \     }\n    }\n    return $prime ? \"YES\" : \"NO\";\n}\necho intersection([1,\
    \ 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho\
    \ intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0nzdal6k.php:47\n\
    Stack trace:\n#0 /tmp/tmp0nzdal6k.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp0nzdal6k.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length < 2) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    function candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2kksgb_t.php:41\n\
    Stack trace:\n#0 /tmp/tmp2kksgb_t.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp2kksgb_t.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0],\
    \ $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n    $intersection\
    \ = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    $length = $intersection[1] - $intersection[0];\n    if ($length <= 0) {\n\
    \        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n     \
    \   if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n \
    \   return \"YES\";\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmps0g35w32.php:42\n\
    Stack trace:\n#0 /tmp/tmps0g35w32.php(51): test()\n#1 {main}\n  thrown in /tmp/tmps0g35w32.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    echo intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4])\
    \ . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpv45408l3.php:44\n\
    Stack trace:\n#0 /tmp/tmpv45408l3.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpv45408l3.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0],\
    \ $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n    if ($interval1[1]\
    \ < $interval2[0] || $interval2[1] < $interval1[0]) {\n        return \"NO\";\n\
    \    }\n    $intersection = [max($interval1[0], $interval2[0]), min($interval1[1],\
    \ $interval2[1])];\n    $length = $intersection[1] - $intersection[0] + 1;\n \
    \   if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}\n\nfunction candidate(...$args) {\n\
    \    return intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6lge1zem.php:45\n\
    Stack trace:\n#0 /tmp/tmp6lge1zem.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp6lge1zem.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = array_map('intval', explode(', ', $interval1));\n    $interval2\
    \ = array_map('intval', explode(', ', $interval2));\n    $intersection = [];\n\
    \    if ($interval1[0] <= $interval2[0] && $interval2[0] <= $interval1[1]) {\n\
    \        $intersection[] = $interval2[0];\n    }\n    if ($interval2[0] <= $interval1[0]\
    \ && $interval1[0] <= $interval2[1]) {\n        $intersection[] = $interval1[0];\n\
    \    }\n    if ($interval1[0] <= $interval2[1] && $interval2[1] <= $interval1[1])\
    \ {\n        $intersection[] = $interval2[1];\n    }\n    if ($interval2[0] <=\
    \ $interval1[1] && $interval1[1] <= $interval2[1]) {\n        $intersection[]\
    \ = $interval1[1];\n    }\n    if (empty($intersection)) {\n        return 'NO';\n\
    \    }\n    $intersection = array_unique($intersection);\n    sort($intersection);\n\
    \    $length = $intersection[count($intersection) - 1] - $intersection[0];\n \
    \   if ($length == 1) {\n        return 'NO';\n    }\n    $prime = true;\n   \
    \ for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n     \
    \       $prime = false;\n            break;\n        }\n    }\n    return $prime\
    \ ? 'YES' : 'NO';\n}\necho intersection('1, 2', '2, 3') . '<br>';\necho intersection('-1,\
    \ 1', '0, 4') . '<br>';\necho intersection('-3, -1', '-5, 5') . '<br>';\necho\
    \ intersection('-3, -1', '-5, -1') . '<br>';\necho intersection('-3, -1', '-5,\
    \ -2')\nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"\
    NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \",\" or \";\" in /tmp/tmp4vgwg_6m.php on line 57\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length < 2) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    \necho intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0,\
    \ 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyexbf5hh.php:45\n\
    Stack trace:\n#0 /tmp/tmpyexbf5hh.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpyexbf5hh.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    $length = $end - $start;\n    if ($length < 0) {\n    \
    \    return \"NO\";\n    }\n    if ($length == 1) {\n        return \"NO\";\n\
    \    }\n    if ($length == 2) {\n        return \"YES\";\n    }\n    for ($i =\
    \ 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyer3qks3.php:44\n\
    Stack trace:\n#0 /tmp/tmpyer3qks3.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpyer3qks3.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length < 2) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    \nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6q967h8f.php:42\n\
    Stack trace:\n#0 /tmp/tmp6q967h8f.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp6q967h8f.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $intersection = [];\n  $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \  $intersection[1] = min($interval1[1], $interval2[1]);\n  if ($intersection[0]\
    \ > $intersection[1]) {\n    return \"NO\";\n  }\n  $length = $intersection[1]\
    \ - $intersection[0] + 1;\n  if ($length == 1) {\n    return \"NO\";\n  }\n  for\
    \ ($i = 2; $i < $length; $i++) {\n    if ($length % $i == 0) {\n      return \"\
    NO\";\n    }\n  }\n  return \"YES\";\n}\n\nfunction candidate(...$args) {\n  \
    \  return intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9a4io96f.php:43\n\
    Stack trace:\n#0 /tmp/tmp9a4io96f.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp9a4io96f.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    $length = $end - $start;\n    if ($length < 0) {\n    \
    \    return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if\
    \ ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return\
    \ \"YES\";\n}\n\necho intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1,\
    \ 1], [0, 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4))\
    \ !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "YES\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppt43gj1g.php:41\n\
    Stack trace:\n#0 /tmp/tmppt43gj1g.php(51): test()\n#1 {main}\n  thrown in /tmp/tmppt43gj1g.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = array_map('intval', explode(', ', $interval1));\n    $interval2\
    \ = array_map('intval', explode(', ', $interval2));\n    $start = max($interval1[0],\
    \ $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n    if ($start\
    \ > $end) {\n        return 'NO';\n    }\n    $length = $end - $start + 1;\n \
    \   if ($length == 1) {\n        return 'NO';\n    }\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            return 'NO';\n      \
    \  }\n    }\n    return 'YES';\n}\n\necho intersection('(1, 2)', '(2, 3)') . \"\
    \\n\";\necho intersection('(-1, 1)', '(0, 4)') . \"\\n\";\necho intersection('(-3,\
    \ -1)', '(-5, 5)') . \"\\n\";\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "YES\nYES\nNO\n"
  stderr: "PHP Fatal error:  Uncaught TypeError: explode(): Argument #2 ($string)\
    \ must be of type string, array given in /tmp/tmp0jbjp9tr.php:19\nStack trace:\n\
    #0 /tmp/tmp0jbjp9tr.php(19): explode()\n#1 /tmp/tmp0jbjp9tr.php(42): intersection()\n\
    #2 /tmp/tmp0jbjp9tr.php(46): candidate()\n#3 /tmp/tmp0jbjp9tr.php(56): test()\n\
    #4 {main}\n  thrown in /tmp/tmp0jbjp9tr.php on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $interval1 = explode(',', $interval1);\n  $interval2 = explode(',', $interval2);\n\
    \  $interval1[0] = (int)$interval1[0];\n  $interval1[1] = (int)$interval1[1];\n\
    \  $interval2[0] = (int)$interval2[0];\n  $interval2[1] = (int)$interval2[1];\n\
    \  $intersection = [];\n  if ($interval1[0] > $interval2[0]) {\n    $temp = $interval1;\n\
    \    $interval1 = $interval2;\n    $interval2 = $temp;\n  }\n  if ($interval1[1]\
    \ < $interval2[0]) {\n    return 'NO';\n  }\n  $intersection[0] = $interval2[0];\n\
    \  $intersection[1] = $interval1[1] < $interval2[1] ? $interval1[1] : $interval2[1];\n\
    \  $length = $intersection[1] - $intersection[0] + 1;\n  if ($length <= 1) {\n\
    \    return 'NO';\n  }\n  for ($i = 2; $i <= sqrt($length); $i++) {\n    if ($length\
    \ % $i == 0) {\n      return 'NO';\n    }\n  }\n  return 'YES';\n}\n\necho intersection('1,2',\
    \ '2,3') . \"\\n\";\necho intersection('-1,1', '0,4') . \"\\n\";\necho intersection('-3,-1',\
    \ '-5,5') . \"\\n\";\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught TypeError: explode(): Argument #2 ($string)\
    \ must be of type string, array given in /tmp/tmp91s9eqy0.php:19\nStack trace:\n\
    #0 /tmp/tmp91s9eqy0.php(19): explode()\n#1 /tmp/tmp91s9eqy0.php(52): intersection()\n\
    #2 /tmp/tmp91s9eqy0.php(56): candidate()\n#3 /tmp/tmp91s9eqy0.php(66): test()\n\
    #4 {main}\n  thrown in /tmp/tmp91s9eqy0.php on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $intersection = [];\n  for ($i = $interval1[0]; $i <= $interval1[1]; $i++)\
    \ {\n    for ($j = $interval2[0]; $j <= $interval2[1]; $j++) {\n      if ($i ==\
    \ $j) {\n        $intersection[] = $i;\n      }\n    }\n  }\n  if (count($intersection)\
    \ == 0) {\n    return \"NO\";\n  }\n  $length = count($intersection);\n  $isPrime\
    \ = true;\n  for ($i = 2; $i < $length; $i++) {\n    if ($length % $i == 0) {\n\
    \      $isPrime = false;\n      break;\n    }\n  }\n  if ($isPrime) {\n    return\
    \ \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n\necho intersection([1, 2],\
    \ [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3,\
    \ -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "YES\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp01va8um_.php:53\n\
    Stack trace:\n#0 /tmp/tmp01va8um_.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp01va8um_.php\
    \ on line 53\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $start = max($interval1[0], $interval2[0]);\n  $end = min($interval1[1], $interval2[1]);\n\
    \  if ($start > $end) {\n    return \"NO\";\n  }\n  $len = $end - $start + 1;\n\
    \  if ($len < 2) {\n    return \"NO\";\n  }\n  if ($len == 2) {\n    return \"\
    YES\";\n  }\n  if ($len % 2 == 0) {\n    return \"NO\";\n  }\n  for ($i = 3; $i\
    \ <= sqrt($len); $i += 2) {\n    if ($len % $i == 0) {\n      return \"NO\";\n\
    \    }\n  }\n  return \"YES\";\n}\n\nfunction candidate(...$args) {\n    return\
    \ intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvxlob12z.php:48\n\
    Stack trace:\n#0 /tmp/tmpvxlob12z.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpvxlob12z.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0],\
    \ $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n    $intersection\
    \ = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i <= sqrt($length); $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\necho intersection([1, 2], [2, 3]) . \"\\n\";\n\
    echo intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3, -1], [-5,\
    \ 5]) . \"\\n\";\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3_sbdlaq.php:47\n\
    Stack trace:\n#0 /tmp/tmp3_sbdlaq.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp3_sbdlaq.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = array_map('intval', explode(', ', $interval1));\n    $interval2\
    \ = array_map('intval', explode(', ', $interval2));\n    $intersection = [max($interval1[0],\
    \ $interval2[0]), min($interval1[1], $interval2[1])];\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return 'NO';\n    }\n    return isPrime($intersection[1]\
    \ - $intersection[0] + 1) ? 'YES' : 'NO';\n}\nfunction candidate(...$args) {\n\
    \    return intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: explode(): Argument #2 ($string)\
    \ must be of type string, array given in /tmp/tmpnv2e3uyi.php:19\nStack trace:\n\
    #0 /tmp/tmpnv2e3uyi.php(19): explode()\n#1 /tmp/tmpnv2e3uyi.php(28): intersection()\n\
    #2 /tmp/tmpnv2e3uyi.php(32): candidate()\n#3 /tmp/tmpnv2e3uyi.php(42): test()\n\
    #4 {main}\n  thrown in /tmp/tmpnv2e3uyi.php on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $intersection = [];\n  if ($interval1[0] >= $interval2[0] && $interval1[0]\
    \ <= $interval2[1]) {\n    $intersection[] = $interval1[0];\n  }\n  if ($interval1[1]\
    \ >= $interval2[0] && $interval1[1] <= $interval2[1]) {\n    $intersection[] =\
    \ $interval1[1];\n  }\n  if ($interval2[0] >= $interval1[0] && $interval2[0] <=\
    \ $interval1[1]) {\n    $intersection[] = $interval2[0];\n  }\n  if ($interval2[1]\
    \ >= $interval1[0] && $interval2[1] <= $interval1[1]) {\n    $intersection[] =\
    \ $interval2[1];\n  }\n  if (count($intersection) > 1) {\n    $length = abs($intersection[0]\
    \ - $intersection[1]);\n    if ($length == 1) {\n      return \"NO\";\n    }\n\
    \    for ($i = 2; $i < $length; $i++) {\n      if ($length % $i == 0) {\n    \
    \    return \"NO\";\n      }\n    }\n    return \"YES\";\n  }\n  return \"NO\"\
    ;\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"\
    NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8m3n9q_2.php:52\n\
    Stack trace:\n#0 /tmp/tmp8m3n9q_2.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp8m3n9q_2.php\
    \ on line 52\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    \nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3jvx8ryb.php:42\n\
    Stack trace:\n#0 /tmp/tmp3jvx8ryb.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp3jvx8ryb.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0],\
    \ $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n    $intersection\
    \ = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n \
    \       if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprsbe3q6j.php:45\n\
    Stack trace:\n#0 /tmp/tmprsbe3q6j.php(54): test()\n#1 {main}\n  thrown in /tmp/tmprsbe3q6j.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = array_map('intval', explode(', ', $interval1));\n    $interval2\
    \ = array_map('intval', explode(', ', $interval2));\n    $intersection = [];\n\
    \    $intersection[] = max($interval1[0], $interval2[0]);\n    $intersection[]\
    \ = min($interval1[1], $interval2[1]);\n    $length = $intersection[1] - $intersection[0];\n\
    \    if ($length <= 0) {\n        return 'NO';\n    }\n    if ($length == 1) {\n\
    \        return 'NO';\n    }\n    if ($length == 2) {\n        return 'YES';\n\
    \    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return 'NO';\n        }\n    }\n    return 'YES';\n}\n\nfunction\
    \ candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4))\
    \ !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: explode(): Argument #2 ($string)\
    \ must be of type string, array given in /tmp/tmp974o7pho.php:19\nStack trace:\n\
    #0 /tmp/tmp974o7pho.php(19): explode()\n#1 /tmp/tmp974o7pho.php(43): intersection()\n\
    #2 /tmp/tmp974o7pho.php(47): candidate()\n#3 /tmp/tmp974o7pho.php(57): test()\n\
    #4 {main}\n  thrown in /tmp/tmp974o7pho.php on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0],\
    \ $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n    $intersection\
    \ = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i <= sqrt($length); $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpocppiz1o.php:45\n\
    Stack trace:\n#0 /tmp/tmpocppiz1o.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpocppiz1o.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $interval1 = array_map('intval', explode(', ', $interval1));\n  $interval2\
    \ = array_map('intval', explode(', ', $interval2));\n  $intersection = [max($interval1[0],\
    \ $interval2[0]), min($interval1[1], $interval2[1])];\n  if ($intersection[0]\
    \ > $intersection[1]) return 'NO';\n  return isPrime($intersection[1] - $intersection[0]\
    \ + 1) ? 'YES' : 'NO';\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: explode(): Argument #2 ($string)\
    \ must be of type string, array given in /tmp/tmpb3kka91v.php:19\nStack trace:\n\
    #0 /tmp/tmpb3kka91v.php(19): explode()\n#1 /tmp/tmpb3kka91v.php(27): intersection()\n\
    #2 /tmp/tmpb3kka91v.php(31): candidate()\n#3 /tmp/tmpb3kka91v.php(41): test()\n\
    #4 {main}\n  thrown in /tmp/tmpb3kka91v.php on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = [];\n    $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[1] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return \"NO\";\n    }\n    if (isPrime($intersection[1]\
    \ - $intersection[0] + 1)) {\n        return \"YES\";\n    }\n    return \"NO\"\
    ;\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1),\
    \ array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function isPrime()\
    \ in /tmp/tmpzg8joy_f.php:25\nStack trace:\n#0 /tmp/tmpzg8joy_f.php(31): intersection()\n\
    #1 /tmp/tmpzg8joy_f.php(35): candidate()\n#2 /tmp/tmpzg8joy_f.php(45): test()\n\
    #3 {main}\n  thrown in /tmp/tmpzg8joy_f.php on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0],\
    \ $interval2[1]];\n    if ($interval1[0] > $interval1[1]) {\n        $interval1\
    \ = [$interval1[1], $interval1[0]];\n    }\n    if ($interval2[0] > $interval2[1])\
    \ {\n        $interval2 = [$interval2[1], $interval2[0]];\n    }\n    if ($interval1[0]\
    \ > $interval2[1] || $interval2[0] > $interval1[1]) {\n        return \"NO\";\n\
    \    }\n    $intersection = [max($interval1[0], $interval2[0]), min($interval1[1],\
    \ $interval2[1])];\n    $length = $intersection[1] - $intersection[0];\n    if\
    \ ($length == 1) {\n        return \"NO\";\n    }\n    $primes = [2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    if (in_array($length, $primes)) {\n        return \"YES\";\n \
    \   }\n    return \"NO\";\n}\necho intersection([1, 2], [2, 3]) . \"\\n\";\necho\
    \ intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5])\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "NO\nNO\nYES\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = array_map('intval', explode(', ', $interval1));\n    $interval2\
    \ = array_map('intval', explode(', ', $interval2));\n    $intersection = [];\n\
    \    for ($i = $interval1[0]; $i <= $interval1[1]; $i++) {\n        for ($j =\
    \ $interval2[0]; $j <= $interval2[1]; $j++) {\n            if ($i == $j) {\n \
    \               $intersection[] = $i;\n            }\n        }\n    }\n    if\
    \ (empty($intersection)) {\n        return 'NO';\n    }\n    $length = count($intersection);\n\
    \    if ($length == 1) {\n        return 'NO';\n    }\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            return 'NO';\n      \
    \  }\n    }\n    return 'YES';\n}\n\nfunction candidate(...$args) {\n    return\
    \ intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: explode(): Argument #2 ($string)\
    \ must be of type string, array given in /tmp/tmp4jlqeyxh.php:19\nStack trace:\n\
    #0 /tmp/tmp4jlqeyxh.php(19): explode()\n#1 /tmp/tmp4jlqeyxh.php(45): intersection()\n\
    #2 /tmp/tmp4jlqeyxh.php(49): candidate()\n#3 /tmp/tmp4jlqeyxh.php(59): test()\n\
    #4 {main}\n  thrown in /tmp/tmp4jlqeyxh.php on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = explode(',', $interval1);\n    $interval2 = explode(',', $interval2);\n\
    \    $intersection = [];\n    if ($interval1[0] <= $interval2[0] && $interval1[1]\
    \ >= $interval2[0]) {\n        $intersection[] = $interval2[0];\n    }\n    if\
    \ ($interval1[0] <= $interval2[1] && $interval1[1] >= $interval2[1]) {\n     \
    \   $intersection[] = $interval2[1];\n    }\n    if ($interval2[0] <= $interval1[0]\
    \ && $interval2[1] >= $interval1[0]) {\n        $intersection[] = $interval1[0];\n\
    \    }\n    if ($interval2[0] <= $interval1[1] && $interval2[1] >= $interval1[1])\
    \ {\n        $intersection[] = $interval1[1];\n    }\n    if (count($intersection)\
    \ == 0) {\n        return 'NO';\n    }\n    $intersection = array_unique($intersection);\n\
    \    sort($intersection);\n    $intersection = array_values($intersection);\n\
    \    $length = $intersection[count($intersection) - 1] - $intersection[0];\n \
    \   if ($length == 0) {\n        return 'NO';\n    }\n    $prime = true;\n   \
    \ for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n     \
    \       $prime = false;\n            break;\n        }\n    }\n    return $prime\
    \ ? 'YES' : 'NO';\n}\n\necho intersection('1,2', '2,3') . PHP_EOL;\necho intersection('-1,1',\
    \ '0,4') . PHP_EOL;\necho intersection('-3,-1', '-5,5') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught TypeError: explode(): Argument #2 ($string)\
    \ must be of type string, array given in /tmp/tmpny_rmju_.php:19\nStack trace:\n\
    #0 /tmp/tmpny_rmju_.php(19): explode()\n#1 /tmp/tmpny_rmju_.php(58): intersection()\n\
    #2 /tmp/tmpny_rmju_.php(62): candidate()\n#3 /tmp/tmpny_rmju_.php(72): test()\n\
    #4 {main}\n  thrown in /tmp/tmpny_rmju_.php on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i <= sqrt($length); $i++) {\n        if ($length %\
    \ $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n\necho intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1],\
    \ [0, 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4))\
    \ !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1nr3ovzg.php:45\n\
    Stack trace:\n#0 /tmp/tmp1nr3ovzg.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1nr3ovzg.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    \nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp__rqihfx.php:42\n\
    Stack trace:\n#0 /tmp/tmp__rqihfx.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp__rqihfx.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersect = [];\n    $intersect[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersect[1] = min($interval1[1], $interval2[1]);\n    if ($intersect[0]\
    \ > $intersect[1]) {\n        return \"NO\";\n    }\n    $length = $intersect[1]\
    \ - $intersect[0] + 1;\n    if (isPrime($length)) {\n        return \"YES\";\n\
    \    }\n    return \"NO\";\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function isPrime()\
    \ in /tmp/tmpw2r6mjuh.php:26\nStack trace:\n#0 /tmp/tmpw2r6mjuh.php(32): intersection()\n\
    #1 /tmp/tmpw2r6mjuh.php(36): candidate()\n#2 /tmp/tmpw2r6mjuh.php(46): test()\n\
    #3 {main}\n  thrown in /tmp/tmpw2r6mjuh.php on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    $length = $end - $start;\n    if ($length < 0) {\n    \
    \    return \"NO\";\n    }\n    if ($length == 1) {\n        return \"NO\";\n\
    \    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\necho\
    \ intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4])\
    \ . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "YES\nNO\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpma07s_6a.php:43\n\
    Stack trace:\n#0 /tmp/tmpma07s_6a.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpma07s_6a.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0],\
    \ $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n    $intersection\
    \ = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    if ($intersection[0] > $intersection[1]) return \"NO\";\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length == 1) return \"NO\";\n    for ($i =\
    \ 2; $i < $length; $i++) {\n        if ($length % $i == 0) return \"NO\";\n  \
    \  }\n    return \"YES\";\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8wsf0e7g.php:39\n\
    Stack trace:\n#0 /tmp/tmp8wsf0e7g.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp8wsf0e7g.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    $length = $end - $start;\n    if ($length < 0) {\n    \
    \    return \"NO\";\n    }\n    if ($length == 1) {\n        return \"NO\";\n\
    \    }\n    if ($length == 2) {\n        return \"YES\";\n    }\n    if ($length\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    for ($i = 3; $i <= sqrt($length);\
    \ $i += 2) {\n        if ($length % $i == 0) {\n            return \"NO\";\n \
    \       }\n    }\n    return \"YES\";\n}\n\nfunction candidate(...$args) {\n \
    \   return intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0],\
    \ $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n    $intersection\
    \ = [];\n    if ($interval1[0] <= $interval2[0] && $interval1[1] >= $interval2[0])\
    \ {\n        $intersection[] = $interval2[0];\n    }\n    if ($interval1[0] <=\
    \ $interval2[1] && $interval1[1] >= $interval2[1]) {\n        $intersection[]\
    \ = $interval2[1];\n    }\n    if ($interval2[0] <= $interval1[0] && $interval2[1]\
    \ >= $interval1[0]) {\n        $intersection[] = $interval1[0];\n    }\n    if\
    \ ($interval2[0] <= $interval1[1] && $interval2[1] >= $interval1[1]) {\n     \
    \   $intersection[] = $interval1[1];\n    }\n    if (count($intersection) == 0)\
    \ {\n        return \"NO\";\n    }\n    sort($intersection);\n    $length = $intersection[1]\
    \ - $intersection[0];\n    if ($length == 1) {\n        return \"NO\";\n    }\n\
    \    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n  \
    \          return \"NO\";\n        }\n    }\n    return \"YES\";\n}\necho intersection([1,\
    \ 2], [2, 3]) . \"<br>\";\necho intersection([-1, 1], [0, 4]) . \"<br>\";\necho\
    \ intersection([-3, -1], [-5, 5]) . \"<br>\";\necho intersection([-3, -1], [-5,\
    \ -4]) . \"<br>\";\necho intersection([-3, -1], [-5, -6]) . \"<br>\";\necho intersection([-3,\
    \ -1], [-5, -7]) . \"<br>\";\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: YES<br>NO<br>YES<br>NO<br>NO<br>NO<br>
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsksiwn20.php:62\n\
    Stack trace:\n#0 /tmp/tmpsksiwn20.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpsksiwn20.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0],\
    \ $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n    $intersection\
    \ = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length < 2)\
    \ {\n        return \"NO\";\n    }\n    if ($length == 2) {\n        return \"\
    YES\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i\
    \ == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n\
    }\n\necho intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1],\
    \ [0, 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4))\
    \ !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp131__d2k.php:51\n\
    Stack trace:\n#0 /tmp/tmp131__d2k.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp131__d2k.php\
    \ on line 51\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = [];\n    $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[1] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return \"NO\";\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    return isPrime($length) ? \"YES\" : \"NO\";\n}\n\
    \nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function isPrime()\
    \ in /tmp/tmp4s9y_od6.php:26\nStack trace:\n#0 /tmp/tmp4s9y_od6.php(30): intersection()\n\
    #1 /tmp/tmp4s9y_od6.php(34): candidate()\n#2 /tmp/tmp4s9y_od6.php(44): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4s9y_od6.php on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $start = max($interval1[0], $interval2[0]);\n  $end = min($interval1[1], $interval2[1]);\n\
    \  if ($start > $end) return \"NO\";\n  $length = $end - $start + 1;\n  if ($length\
    \ < 2) return \"NO\";\n  for ($i = 2; $i < $length; $i++) {\n    if ($length %\
    \ $i == 0) return \"NO\";\n  }\n  return \"YES\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2y8ubeh4.php:36\n\
    Stack trace:\n#0 /tmp/tmp2y8ubeh4.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp2y8ubeh4.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $interval1 = range($interval1[0], $interval1[1]);\n  $interval2 = range($interval2[0],\
    \ $interval2[1]);\n  $intersection = array_intersect($interval1, $interval2);\n\
    \  if (count($intersection) == 0) {\n    return \"NO\";\n  }\n  $length = count($intersection);\n\
    \  if ($length == 1) {\n    return \"NO\";\n  }\n  for ($i = 2; $i < $length;\
    \ $i++) {\n    if ($length % $i == 0) {\n      return \"NO\";\n    }\n  }\n  return\
    \ \"YES\";\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp07ogoexr.php:43\n\
    Stack trace:\n#0 /tmp/tmp07ogoexr.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp07ogoexr.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    \nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbpl38g31.php:42\n\
    Stack trace:\n#0 /tmp/tmpbpl38g31.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpbpl38g31.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = [];\n    if ($interval1[0] <= $interval2[0] && $interval1[1]\
    \ >= $interval2[0]) {\n        $intersection[] = $interval2[0];\n    }\n    if\
    \ ($interval1[0] <= $interval2[1] && $interval1[1] >= $interval2[1]) {\n     \
    \   $intersection[] = $interval2[1];\n    }\n    if ($interval2[0] <= $interval1[0]\
    \ && $interval2[1] >= $interval1[0]) {\n        $intersection[] = $interval1[0];\n\
    \    }\n    if ($interval2[0] <= $interval1[1] && $interval2[1] >= $interval1[1])\
    \ {\n        $intersection[] = $interval1[1];\n    }\n    if (count($intersection)\
    \ == 0) {\n        return \"NO\";\n    }\n    $intersection = array_unique($intersection);\n\
    \    if (count($intersection) == 1) {\n        return \"YES\";\n    }\n    $intersection\
    \ = array_values($intersection);\n    $length = $intersection[1] - $intersection[0];\n\
    \    if ($length == 1) {\n        return \"YES\";\n    }\n    for ($i = 2; $i\
    \ < $length; $i++) {\n        if ($length % $i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";\n}\necho intersection([1, 2], [2,\
    \ 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3,\
    \ -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "YES\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyqsvn3rh.php:59\n\
    Stack trace:\n#0 /tmp/tmpyqsvn3rh.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpyqsvn3rh.php\
    \ on line 59\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    $length = $end - $start;\n    if ($length < 0) {\n    \
    \    return \"NO\";\n    }\n    if ($length == 1) {\n        return \"NO\";\n\
    \    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    echo intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4])\
    \ . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "YES\nNO\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmps6sy5p8e.php:44\n\
    Stack trace:\n#0 /tmp/tmps6sy5p8e.php(54): test()\n#1 {main}\n  thrown in /tmp/tmps6sy5p8e.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $start = max($interval1[0], $interval2[0]);\n  $end = min($interval1[1], $interval2[1]);\n\
    \  if ($start > $end) return \"NO\";\n  return isPrime($end - $start + 1) ? \"\
    YES\" : \"NO\";\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function isPrime()\
    \ in /tmp/tmppw0dhjsq.php:22\nStack trace:\n#0 /tmp/tmppw0dhjsq.php(26): intersection()\n\
    #1 /tmp/tmppw0dhjsq.php(30): candidate()\n#2 /tmp/tmppw0dhjsq.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmppw0dhjsq.php on line 22\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = [];\n    $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[1] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return \"NO\";\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n \
    \   }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    function candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4t7xad75.php:43\n\
    Stack trace:\n#0 /tmp/tmp4t7xad75.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp4t7xad75.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = array_map('intval', explode(', ', $interval1));\n    $interval2\
    \ = array_map('intval', explode(', ', $interval2));\n    $intersection = [max($interval1[0],\
    \ $interval2[0]), min($interval1[1], $interval2[1])];\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return 'NO';\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    return isPrime($length) ? 'YES' : 'NO';\n}\nfunction\
    \ candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4))\
    \ !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: explode(): Argument #2 ($string)\
    \ must be of type string, array given in /tmp/tmpxcblsnjl.php:19\nStack trace:\n\
    #0 /tmp/tmpxcblsnjl.php(19): explode()\n#1 /tmp/tmpxcblsnjl.php(29): intersection()\n\
    #2 /tmp/tmpxcblsnjl.php(33): candidate()\n#3 /tmp/tmpxcblsnjl.php(43): test()\n\
    #4 {main}\n  thrown in /tmp/tmpxcblsnjl.php on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    $length = $end - $start;\n    if ($length <= 0) {\n   \
    \     return \"NO\";\n    }\n    if ($length == 1) {\n        return \"NO\";\n\
    \    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    function candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = explode(',', $interval1);\n    $interval2 = explode(',', $interval2);\n\
    \    $interval1[0] = (int)$interval1[0];\n    $interval1[1] = (int)$interval1[1];\n\
    \    $interval2[0] = (int)$interval2[0];\n    $interval2[1] = (int)$interval2[1];\n\
    \    $intersection = [];\n    $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[1] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return 'NO';\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length < 2) {\n        return 'NO';\n    }\n\
    \    if ($length == 2) {\n        return 'YES';\n    }\n    for ($i = 2; $i <=\
    \ sqrt($length); $i++) {\n        if ($length % $i == 0) {\n            return\
    \ 'NO';\n        }\n    }\n    return 'YES';\n}\necho intersection('1,2', '2,3')\
    \ . '<br>';\necho intersection('-1,1', '0,4') . '<br>';\necho intersection('-3,-1',\
    \ '-5,5') . '<br>';\necho intersection('-5,-1', '-5,5') . '<br>';\necho intersection('-5,5',\
    \ '-5,-1') . '<br>';\necho intersection('-5,5', '-5,5') . '<br>';\necho intersection('-5,5',\
    \ '-5,6') . '<br>';\necho intersection('-5,5', '-6,6') . '<br>';\necho intersection('-5,5',\
    \ '-6,7') . '<br>';\necho intersection('-5,5', '-7,7') . '<br>';\necho intersection\n\
    function candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \",\" or \";\" in /tmp/tmpmjvjmkur.php on line 56\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = explode(',', $interval1);\n    $interval2 = explode(',', $interval2);\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return 'NO';\n    }\n   \
    \ $length = $end - $start + 1;\n    if ($length < 2) {\n        return 'NO';\n\
    \    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return 'NO';\n        }\n    }\n    return 'YES';\n}\necho intersection('1,2',\
    \ '2,3') . '<br>';\necho intersection('-1,1', '0,4') . '<br>';\necho intersection('-3,-1',\
    \ '-5,5') . '<br>';\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: NO<br>YES<br>YES<br>
  stderr: "PHP Fatal error:  Uncaught TypeError: explode(): Argument #2 ($string)\
    \ must be of type string, array given in /tmp/tmprxq19xm_.php:19\nStack trace:\n\
    #0 /tmp/tmprxq19xm_.php(19): explode()\n#1 /tmp/tmprxq19xm_.php(41): intersection()\n\
    #2 /tmp/tmprxq19xm_.php(45): candidate()\n#3 /tmp/tmprxq19xm_.php(55): test()\n\
    #4 {main}\n  thrown in /tmp/tmprxq19xm_.php on line 19\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $intersection = [];\n    if ($interval1[0] > $interval2[0])\
    \ {\n        $intersection = [$interval1[0], $interval2[1]];\n    } else {\n \
    \       $intersection = [$interval2[0], $interval1[1]];\n    }\n    $length =\
    \ $intersection[1] - $intersection[0];\n    if ($length <= 0) {\n        return\
    \ \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n\necho intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1],\
    \ [0, 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4))\
    \ !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "NO\nYES\nNO\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzq71_c1k.php:48\n\
    Stack trace:\n#0 /tmp/tmpzq71_c1k.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpzq71_c1k.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $start = max($interval1[0], $interval2[0]);\n  $end = min($interval1[1], $interval2[1]);\n\
    \  $length = $end - $start;\n  if ($length < 0) {\n    return \"NO\";\n  }\n \
    \ if ($length == 0) {\n    return \"YES\";\n  }\n  for ($i = 2; $i <= $length\
    \ / 2; $i++) {\n    if ($length % $i == 0) {\n      return \"NO\";\n    }\n  }\n\
    \  return \"YES\";\n}\n\necho intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1,\
    \ 1], [0, 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4))\
    \ !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "YES\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjj28zqia.php:44\n\
    Stack trace:\n#0 /tmp/tmpjj28zqia.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpjj28zqia.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if (isPrime($length)) {\n        return\
    \ \"YES\";\n    }\n    return \"NO\";\n}\nfunction candidate(...$args) {\n   \
    \ return intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function isPrime()\
    \ in /tmp/tmplt2co6wy.php:25\nStack trace:\n#0 /tmp/tmplt2co6wy.php(31): intersection()\n\
    #1 /tmp/tmplt2co6wy.php(35): candidate()\n#2 /tmp/tmplt2co6wy.php(45): test()\n\
    #3 {main}\n  thrown in /tmp/tmplt2co6wy.php on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n\
    \    $intersection = array_intersect($interval1, $interval2);\n    $intersection\
    \ = array_unique($intersection);\n    $intersection = array_values($intersection);\n\
    \    if (count($intersection) == 0) {\n        return \"NO\";\n    }\n    $length\
    \ = $intersection[count($intersection) - 1] - $intersection[0];\n    if ($length\
    \ == 1) {\n        return \"NO\";\n    }\n    if ($length == 2) {\n        return\
    \ \"YES\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\necho intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1],\
    \ [0, 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4))\
    \ !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "YES\nNO\nNO\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmps_x1yl8x.php:49\n\
    Stack trace:\n#0 /tmp/tmps_x1yl8x.php(59): test()\n#1 {main}\n  thrown in /tmp/tmps_x1yl8x.php\
    \ on line 49\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = range($interval1[0], $interval1[1]);\n    $interval2 = range($interval2[0],\
    \ $interval2[1]);\n    $intersection = array_intersect($interval1, $interval2);\n\
    \    if (count($intersection) == 0) {\n        return \"NO\";\n    }\n    $length\
    \ = count($intersection);\n    if ($length == 1) {\n        return \"NO\";\n \
    \   }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    function candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpva1cddat.php:43\n\
    Stack trace:\n#0 /tmp/tmpva1cddat.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpva1cddat.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \  $interval1 = [$interval1[0], $interval1[1]];\n  $interval2 = [$interval2[0],\
    \ $interval2[1]];\n  sort($interval1);\n  sort($interval2);\n  $intersection =\
    \ [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n  if\
    \ ($intersection[0] > $intersection[1]) {\n    return \"NO\";\n  }\n  $length\
    \ = $intersection[1] - $intersection[0] + 1;\n  if ($length == 1) {\n    return\
    \ \"NO\";\n  }\n  for ($i = 2; $i < $length; $i++) {\n    if ($length % $i ==\
    \ 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpovun7093.php:45\n\
    Stack trace:\n#0 /tmp/tmpovun7093.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpovun7093.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = [];\n    $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[1] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return \"NO\";\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n \
    \   }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    function candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpy5gq6lpd.php:43\n\
    Stack trace:\n#0 /tmp/tmpy5gq6lpd.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpy5gq6lpd.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = [];\n    $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[1] = min($interval1[1], $interval2[1]);\n    return $intersection[0]\
    \ <= $intersection[1] ? isPrime($intersection[1] - $intersection[0] + 1) ? \"\
    YES\" : \"NO\" : \"NO\";\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !==\
    \ \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function isPrime()\
    \ in /tmp/tmpix87rnxr.php:22\nStack trace:\n#0 /tmp/tmpix87rnxr.php(25): intersection()\n\
    #1 /tmp/tmpix87rnxr.php(29): candidate()\n#2 /tmp/tmpix87rnxr.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpix87rnxr.php on line 22\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $intersection = [max($interval1[0], $interval2[0]), min($interval1[1],\
    \ $interval2[1])];\n    if ($intersection[0] > $intersection[1]) {\n        return\
    \ 'NO';\n    }\n    $length = $intersection[1] - $intersection[0] + 1;\n    if\
    \ ($length == 1) {\n        return 'NO';\n    }\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            return 'NO';\n      \
    \  }\n    }\n    return 'YES';\n}\n\nfunction candidate(...$args) {\n    return\
    \ intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp08ipj5ns.php:43\n\
    Stack trace:\n#0 /tmp/tmp08ipj5ns.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp08ipj5ns.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    \necho intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0,\
    \ 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return intersection(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5,\
    \ 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "NO\nYES\nYES\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvswl6uc_.php:45\n\
    Stack trace:\n#0 /tmp/tmpvswl6uc_.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpvswl6uc_.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    return isPrime($length) ? \"YES\" : \"NO\"\
    ;\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"\
    NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function isPrime()\
    \ in /tmp/tmpv71fch3c.php:25\nStack trace:\n#0 /tmp/tmpv71fch3c.php(29): intersection()\n\
    #1 /tmp/tmpv71fch3c.php(33): candidate()\n#2 /tmp/tmpv71fch3c.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmpv71fch3c.php on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    \nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0rm51kiv.php:42\n\
    Stack trace:\n#0 /tmp/tmp0rm51kiv.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp0rm51kiv.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = [];\n    $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[1] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return \"NO\";\n    }\n    if (isPrime($intersection[1]\
    \ - $intersection[0] + 1)) {\n        return \"YES\";\n    }\n    return \"NO\"\
    ;\n}\nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1),\
    \ array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function isPrime()\
    \ in /tmp/tmpo3rwlt3z.php:25\nStack trace:\n#0 /tmp/tmpo3rwlt3z.php(31): intersection()\n\
    #1 /tmp/tmpo3rwlt3z.php(35): candidate()\n#2 /tmp/tmpo3rwlt3z.php(45): test()\n\
    #3 {main}\n  thrown in /tmp/tmpo3rwlt3z.php on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0],\
    \ $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n    $intersection\
    \ = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}\n\nfunction candidate(...$args) {\n\
    \    return intersection(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2), array(2, 3)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1), array(0, 4)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, 2),\
    \ array(-4, 0)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(-11, 2), array(-1, -1)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 5)) !== \"NO\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(1,\
    \ 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpesqw23v_.php:41\n\
    Stack trace:\n#0 /tmp/tmpesqw23v_.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpesqw23v_.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = [];\n    $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[1] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return \"NO\";\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n \
    \   }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    function candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzpl0drjw.php:43\n\
    Stack trace:\n#0 /tmp/tmpzpl0drjw.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpzpl0drjw.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    return isPrime($length) ? \"YES\" : \"NO\"\
    ;\n}\n\nfunction candidate(...$args) {\n    return intersection(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"\
    NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1), array(0, 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-3, -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-11, 2),\
    \ array(-1, -1)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2), array(3, 5)) !== \"NO\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2), array(1, 2)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -2), array(-3,\
    \ -2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function isPrime()\
    \ in /tmp/tmpilznextj.php:25\nStack trace:\n#0 /tmp/tmpilznextj.php(29): intersection()\n\
    #1 /tmp/tmpilznextj.php(33): candidate()\n#2 /tmp/tmpilznextj.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmpilznextj.php on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given two intervals,\n// where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
    \ are closed which means that the interval (start, end)\n// includes both start\
    \ and end.\n// For each given interval, it is assumed that its start is less or\
    \ equal its end.\n// Your task is to determine whether the length of intersection\
    \ of these two \n// intervals is a prime number.\n// Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not\
    \ a prime number.\n// If the length of the intersection is a prime number, return\
    \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
    \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3))\
    \ ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
    \ -1), (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n\
    \    $intersection = array_intersect(range($interval1[0], $interval1[1]), range($interval2[0],\
    \ $interval2[1]));\n    if (count($intersection) === 0) {\n        return \"NO\"\
    ;\n    }\n    return isPrime(count($intersection)) ? \"YES\" : \"NO\";\n}\n\n\
    function candidate(...$args) {\n    return intersection(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
    \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
    \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function isPrime()\
    \ in /tmp/tmpjrv9n258.php:23\nStack trace:\n#0 /tmp/tmpjrv9n258.php(27): intersection()\n\
    #1 /tmp/tmpjrv9n258.php(31): candidate()\n#2 /tmp/tmpjrv9n258.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpjrv9n258.php on line 23\n"
  exit_code: 255
  status: Exception
