name: HumanEval_126_is_sorted
language: php
results:
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \tsort($lst);\n\tif($lst == $lst){\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\
    \t}\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfeg91360.php:31\n\
    Stack trace:\n#0 /tmp/tmpfeg91360.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpfeg91360.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] >= $lst[$i + 1])\
    \ {\n\t\t\t$sorted = false;\n\t\t}\n\t}\n\treturn $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]) . PHP_EOL;\necho is_sorted([1, 2, 2, 2, 3, 4]) . PHP_EOL;\n\
    echo is_sorted([1, 2, 3, 4, 5]) . PHP_EOL;\necho is_sorted([1, 3, 2, 4, 5]) .\
    \ PHP_EOL;\necho is_sorted([1, 2, 3, 4, 5, 6]) . PHP_EOL;\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) . PHP_EOL;\necho is_sorted([1, 3, 2, 4, 5, 6, 7]) . PHP_EOL;\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n1\n\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsudet2j9.php:46\n\
    Stack trace:\n#0 /tmp/tmpsudet2j9.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpsudet2j9.php\
    \ on line 46\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$prev = $lst[0];\n\tfor ($i = 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i]\
    \ < $prev) {\n\t\t\t$sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$prev = $lst[$i];\n\
    \t}\n\treturn $sorted;\n}\necho is_sorted([1, 2, 3, 4, 5]) . \"\\n\";\necho is_sorted([1,\
    \ 3, 2, 4, 5]) . \"\\n\";\necho is_sorted([1, 2, 2, 3, 3, 4]) . \"\\n\";\necho\
    \ is_sorted([1, 2, 2, 2, 3, 4]) . \"\\n\";\nfunction candidate(...$args) {\n \
    \   return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmpuu7jf8du.php on line 16\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuu7jf8du.php:44\n\
    Stack trace:\n#0 /tmp/tmpuu7jf8du.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpuu7jf8du.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1])\
    \ {\n\t\t\t$sorted = false;\n\t\t}\n\t}\n\treturn $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]) . PHP_EOL;\necho is_sorted([1, 2, 2, 2, 3, 4]) . PHP_EOL;\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqqeh3nu5.php:39\n\
    Stack trace:\n#0 /tmp/tmpqqeh3nu5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpqqeh3nu5.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$last = $lst[0];\n\tforeach ($lst as $num) {\n\t\tif ($num < $last) {\n\t\t\t\
    $sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$last = $num;\n\t}\n\treturn $sorted;\n\
    }\necho is_sorted([5]) . PHP_EOL;\necho is_sorted([1, 2, 3, 4, 5]) . PHP_EOL;\n\
    echo is_sorted([1, 3, 2, 4, 5]) . PHP_EOL;\necho is_sorted([1, 2, 3, 4, 5, 6])\
    \ . PHP_EOL;\necho is_sorted([1, 2, 3, 4, 5, 6, 7]) . PHP_EOL;\necho is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) . PHP_EOL;\necho is_sorted([1, 2, 2, 3, 3, 4]) . PHP_EOL;\n\
    echo is_sorted([1, 2, 2, 2, 3, 4]) . PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n\n1\n1\n\n1\n1\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmpa4pgr4ln.php on line 16\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpa4pgr4ln.php:48\n\
    Stack trace:\n#0 /tmp/tmpa4pgr4ln.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpa4pgr4ln.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1])\
    \ {\n\t\t\t$sorted = false;\n\t\t}\n\t}\n\treturn $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]) . PHP_EOL;\necho is_sorted([1, 2, 2, 2, 3, 4]) . PHP_EOL;\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpciyx0brb.php:39\n\
    Stack trace:\n#0 /tmp/tmpciyx0brb.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpciyx0brb.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$prev = $lst[0];\n\tfor ($i = 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i]\
    \ < $prev) {\n\t\t\t$sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$prev = $lst[$i];\n\
    \t}\n\treturn $sorted;\n}\necho is_sorted([1, 2, 3, 4, 5]) . \"\\n\";\necho is_sorted([1,\
    \ 3, 2, 4, 5]) . \"\\n\";\necho is_sorted([1, 2, 2, 3, 3, 4]) . \"\\n\";\necho\
    \ is_sorted([1, 2, 2, 2, 3, 4]) . \"\\n\";\nfunction candidate(...$args) {\n \
    \   return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmps004qp4x.php on line 16\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmps004qp4x.php:44\n\
    Stack trace:\n#0 /tmp/tmps004qp4x.php(50): test()\n#1 {main}\n  thrown in /tmp/tmps004qp4x.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$prev = $lst[0];\n\tfor ($i = 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i]\
    \ < $prev) {\n\t\t\t$sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$prev = $lst[$i];\n\
    \t}\n\treturn $sorted;\n}\necho is_sorted([1, 2, 3, 4, 5]);\necho \"\\n\";\necho\
    \ is_sorted([1, 3, 2, 4, 5]);\necho \"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6]);\n\
    echo \"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6, 7]);\necho \"\\n\";\necho is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]);\necho \"\\n\";\necho is_sorted([1, 2, 2, 3, 3, 4]);\necho\
    \ \"\\n\";\necho is_sorted([1, 2, 2, 2, 3, 4]);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n\n1\n1\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmpp0nigzi6.php on line 16\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpp0nigzi6.php:54\n\
    Stack trace:\n#0 /tmp/tmpp0nigzi6.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpp0nigzi6.php\
    \ on line 54\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] >= $lst[$i + 1])\
    \ {\n\t\t\t$sorted = false;\n\t\t}\n\t}\n\treturn $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcyu7jfl1.php:40\n\
    Stack trace:\n#0 /tmp/tmpcyu7jfl1.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpcyu7jfl1.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$arr = array_unique($lst);\n\
    \tsort($arr);\n\tif ($arr == $lst) {\n\t\treturn true;\n\t} else {\n\t\treturn\
    \ false;\n\t}\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpx35qlly2.php:40\n\
    Stack trace:\n#0 /tmp/tmpx35qlly2.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpx35qlly2.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst2 = $lst;\n\tsort($lst2);\n\tif ($lst == $lst2)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprly9yeji.php:40\n\
    Stack trace:\n#0 /tmp/tmprly9yeji.php(46): test()\n#1 {main}\n  thrown in /tmp/tmprly9yeji.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \tsort($lst);\n\tif ($lst == $lst) {\n\t\treturn \"True\";\n\t} else {\n\t\treturn\
    \ \"False\";\n\t}\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 'True'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6xira4b6.php:29\n\
    Stack trace:\n#0 /tmp/tmp6xira4b6.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp6xira4b6.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst2 = $lst;\n\tsort($lst2);\n\tif ($lst == $lst2)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6zy87999.php:40\n\
    Stack trace:\n#0 /tmp/tmp6zy87999.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp6zy87999.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst_sorted = $lst;\n\tsort($lst_sorted);\n\t\
    return $lst == $lst_sorted;\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpk4bb019o.php:36\n\
    Stack trace:\n#0 /tmp/tmpk4bb019o.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpk4bb019o.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$prev = $lst[0];\n\tfor ($i = 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i]\
    \ < $prev) {\n\t\t\t$sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$prev = $lst[$i];\n\
    \t}\n\treturn $sorted;\n}\necho is_sorted([5]) . \"<br>\";\necho is_sorted([1,\
    \ 2, 3, 4, 5]) . \"<br>\";\necho is_sorted([1, 3, 2, 4, 5]) . \"<br>\";\necho\
    \ is_sorted([1, 2, 3, 4, 5, 6]) . \"<br>\";\necho is_sorted([1, 2, 3, 4, 5, 6,\
    \ 7]) . \"<br>\";\necho is_sorted([1, 3, 2, 4, 5, 6, 7]) . \"<br>\";\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]) . \"<br>\";\necho is_sorted([1, 2, 2, 2, 3, 4]) . \"<br>\";\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 1<br>1<br><br>1<br>1<br><br>1<br>1<br>
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmpn1_kpvte.php on line 16\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn1_kpvte.php:48\n\
    Stack trace:\n#0 /tmp/tmpn1_kpvte.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpn1_kpvte.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$sorted = $lst;\n\tsort($sorted);\n\treturn $lst == $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxcf16fit.php:37\n\
    Stack trace:\n#0 /tmp/tmpxcf16fit.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpxcf16fit.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1])\
    \ {\n\t\t\t$sorted = false;\n\t\t}\n\t}\n\treturn $sorted;\n}\n\necho is_sorted([1,\
    \ 2, 3, 4, 5]);\necho is_sorted([1, 3, 2, 4, 5]);\necho is_sorted([1, 2, 3, 4,\
    \ 5, 6]);\necho is_sorted([1, 2, 3, 4, 5, 6, 7]);\necho is_sorted([1, 3, 2, 4,\
    \ 5, 6, 7]);\necho is_sorted([1, 2, 2, 3, 3, 4]);\necho is_sorted([1, 2, 2, 2,\
    \ 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '11111'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5bfu6o1q.php:45\n\
    Stack trace:\n#0 /tmp/tmp5bfu6o1q.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp5bfu6o1q.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1])\
    \ {\n\t\t\t$sorted = false;\n\t\t}\n\t}\n\treturn $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]) . PHP_EOL;\necho is_sorted([1, 2, 2, 2, 3, 4]) . PHP_EOL;\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5bhyv_s1.php:39\n\
    Stack trace:\n#0 /tmp/tmp5bhyv_s1.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp5bhyv_s1.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$sorted = $lst;\n\tsort($sorted);\n\treturn $lst == $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpncv42lyl.php:37\n\
    Stack trace:\n#0 /tmp/tmpncv42lyl.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpncv42lyl.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$sorted = $lst;\n\tsort($sorted);\n\treturn $lst == $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6b4tos0i.php:37\n\
    Stack trace:\n#0 /tmp/tmp6b4tos0i.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp6b4tos0i.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$newLst = array_unique($lst);\n\
    \tsort($newLst);\n\tif ($newLst == $lst) {\n\t\treturn true;\n\t} else {\n\t\t\
    return false;\n\t}\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpg889fzij.php:40\n\
    Stack trace:\n#0 /tmp/tmpg889fzij.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpg889fzij.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    for ($i = 0; $i < count($lst) - 1; $i++) {\n        if ($lst[$i] > $lst[$i\
    \ + 1]) {\n            $sorted = false;\n        }\n    }\n    return $sorted;\n\
    }\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpa6i5aka8.php:38\n\
    Stack trace:\n#0 /tmp/tmpa6i5aka8.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpa6i5aka8.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$arr = array_unique($lst);\n\
    \tsort($arr);\n\tif ($arr == $lst) {\n\t\treturn true;\n\t} else {\n\t\treturn\
    \ false;\n\t}\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjpc4nkzb.php:40\n\
    Stack trace:\n#0 /tmp/tmpjpc4nkzb.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpjpc4nkzb.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$prev = $lst[0];\n\tfor ($i = 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i]\
    \ < $prev) {\n\t\t\t$sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$prev = $lst[$i];\n\
    \t}\n\treturn $sorted;\n}\necho is_sorted([1, 2, 3, 4, 5]);\necho is_sorted([1,\
    \ 3, 2, 4, 5]);\necho is_sorted([1, 2, 3, 4, 5, 6]);\necho is_sorted([1, 2, 3,\
    \ 4, 5, 6, 7]);\necho is_sorted([1, 3, 2, 4, 5, 6, 7]);\necho is_sorted([1, 2,\
    \ 2, 3, 3, 4]);\necho is_sorted([1, 2, 2, 2, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '11111'
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmp5gxcp3_b.php on line 16\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5gxcp3_b.php:47\n\
    Stack trace:\n#0 /tmp/tmp5gxcp3_b.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp5gxcp3_b.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = $lst;\n\
    \tsort($sorted);\n\t$count = count($lst);\n\tfor ($i = 0; $i < $count; $i++) {\n\
    \t\tif ($lst[$i] != $sorted[$i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ true;\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6o3txu1e.php:40\n\
    Stack trace:\n#0 /tmp/tmp6o3txu1e.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp6o3txu1e.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1])\
    \ {\n\t\t\t$sorted = false;\n\t\t}\n\t}\n\treturn $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpg0nflg6q.php:38\n\
    Stack trace:\n#0 /tmp/tmpg0nflg6q.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpg0nflg6q.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$sorted = $lst;\n\tsort($sorted);\n\treturn $lst == $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmps8d12pd_.php:37\n\
    Stack trace:\n#0 /tmp/tmps8d12pd_.php(41): test()\n#1 {main}\n  thrown in /tmp/tmps8d12pd_.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$prev = $lst[0];\n\tforeach ($lst as $num) {\n\t\tif ($num < $prev) {\n\t\t\t\
    $sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$prev = $num;\n\t}\n\treturn $sorted;\n\
    }\necho is_sorted([1, 2, 2, 3, 3, 4]) . PHP_EOL;\necho is_sorted([1, 2, 2, 2,\
    \ 3, 4]) . PHP_EOL;\necho is_sorted([1, 2, 3, 4, 5]) . PHP_EOL;\necho is_sorted([1,\
    \ 3, 2, 4, 5]) . PHP_EOL;\necho is_sorted([1, 2, 3, 4, 5, 6]) . PHP_EOL;\necho\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) . PHP_EOL;\necho is_sorted([1, 3, 2, 4, 5,\
    \ 6, 7]) . PHP_EOL;\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n1\n\n1\n1\n\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmpxva5ux4t.php on line 16\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxva5ux4t.php:47\n\
    Stack trace:\n#0 /tmp/tmpxva5ux4t.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpxva5ux4t.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$arr = array_unique($lst);\n\
    \tsort($arr);\n\tif ($arr == $lst) {\n\t\treturn \"True\";\n\t} else {\n\t\treturn\
    \ \"False\";\n\t}\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 'False'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmo_bik59.php:29\n\
    Stack trace:\n#0 /tmp/tmpmo_bik59.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpmo_bik59.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$last = $lst[0];\n\tfor ($i = 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i]\
    \ < $last) {\n\t\t\t$sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$last = $lst[$i];\n\
    \t}\n\treturn $sorted;\n}\necho is_sorted([1, 2, 3, 4, 5]) . \"\\n\";\necho is_sorted([1,\
    \ 3, 2, 4, 5]) . \"\\n\";\necho is_sorted([1, 2, 2, 3, 3, 4]) . \"\\n\";\necho\
    \ is_sorted([1, 2, 2, 2, 3, 4]) . \"\\n\";\nfunction candidate(...$args) {\n \
    \   return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmpfnuwsvp0.php on line 16\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfnuwsvp0.php:44\n\
    Stack trace:\n#0 /tmp/tmpfnuwsvp0.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpfnuwsvp0.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst2 = $lst;\n\tsort($lst2);\n\tif ($lst == $lst2)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnrhx4_nw.php:40\n\
    Stack trace:\n#0 /tmp/tmpnrhx4_nw.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpnrhx4_nw.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$arr = array_count_values($lst);\n\
    \t$arr2 = array_unique($lst);\n\tif (count($arr) == count($arr2)) {\n\t\t$arr3\
    \ = array_diff($lst, $arr2);\n\t\tif (count($arr3) == 0) {\n\t\t\treturn true;\n\
    \t\t}\n\t}\n\treturn false;\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0fyz0bba.php:33\n\
    Stack trace:\n#0 /tmp/tmp0fyz0bba.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp0fyz0bba.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst_sorted = $lst;\n\tsort($lst_sorted);\n\t\
    if ($lst == $lst_sorted) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t\
    }\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n  \
    \  return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1vghcww5.php:40\n\
    Stack trace:\n#0 /tmp/tmp1vghcww5.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp1vghcww5.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$prev = $lst[0];\n\tfor ($i = 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i]\
    \ < $prev) {\n\t\t\t$sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$prev = $lst[$i];\n\
    \t}\n\treturn $sorted;\n}\necho is_sorted([1, 2, 3, 4, 5]);\necho is_sorted([1,\
    \ 3, 2, 4, 5]);\necho is_sorted([1, 2, 3, 4, 5, 6]);\necho is_sorted([1, 2, 3,\
    \ 4, 5, 6, 7]);\necho is_sorted([1, 3, 2, 4, 5, 6, 7]);\necho is_sorted([1, 2,\
    \ 2, 3, 3, 4]);\necho is_sorted([1, 2, 2, 2, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '11111'
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmpyryfv1bj.php on line 16\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyryfv1bj.php:47\n\
    Stack trace:\n#0 /tmp/tmpyryfv1bj.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpyryfv1bj.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] >= $lst[$i + 1])\
    \ {\n\t\t\t$sorted = false;\n\t\t}\n\t}\n\treturn $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_uinna46.php:40\n\
    Stack trace:\n#0 /tmp/tmp_uinna46.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp_uinna46.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$prev = $lst[0];\n\tfor ($i = 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i]\
    \ < $prev) {\n\t\t\t$sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$prev = $lst[$i];\n\
    \t}\n\treturn $sorted;\n}\necho is_sorted([1, 2, 3, 4, 5]) . \"\\n\";\necho is_sorted([1,\
    \ 3, 2, 4, 5]) . \"\\n\";\necho is_sorted([1, 2, 2, 3, 3, 4]) . \"\\n\";\necho\
    \ is_sorted([1, 2, 2, 2, 3, 4]) . \"\\n\";\nfunction candidate(...$args) {\n \
    \   return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmpngl_1ulg.php on line 16\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpngl_1ulg.php:44\n\
    Stack trace:\n#0 /tmp/tmpngl_1ulg.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpngl_1ulg.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst_sorted = $lst;\n\tsort($lst_sorted);\n\t\
    if ($lst == $lst_sorted) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t\
    }\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n  \
    \  return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmlooxqrw.php:40\n\
    Stack trace:\n#0 /tmp/tmpmlooxqrw.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpmlooxqrw.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1])\
    \ {\n\t\t\t$sorted = false;\n\t\t}\n\t}\n\treturn $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]) . PHP_EOL;\necho is_sorted([1, 2, 2, 2, 3, 4]) . PHP_EOL;\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmponun4tve.php:39\n\
    Stack trace:\n#0 /tmp/tmponun4tve.php(45): test()\n#1 {main}\n  thrown in /tmp/tmponun4tve.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$count = count($lst);\n\
    \t$sorted = true;\n\tfor ($i = 0; $i < $count - 1; $i++) {\n\t\tif ($lst[$i] >\
    \ $lst[$i + 1]) {\n\t\t\t$sorted = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn\
    \ $sorted;\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptxgz1d34.php:40\n\
    Stack trace:\n#0 /tmp/tmptxgz1d34.php(46): test()\n#1 {main}\n  thrown in /tmp/tmptxgz1d34.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1])\
    \ {\n\t\t\t$sorted = false;\n\t\t}\n\t}\n\treturn $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnm6f3o_y.php:38\n\
    Stack trace:\n#0 /tmp/tmpnm6f3o_y.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpnm6f3o_y.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \tsort($lst);\n\t$lst = implode(\",\", $lst);\n\t$lst = explode(\",\", $lst);\n\
    \treturn $lst;\n}\necho \"<pre>\";\nprint_r(is_sorted([1, 2, 2, 3, 3, 4]));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n\
    )\n</pre>"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvh3s3mbx.php:29\n\
    Stack trace:\n#0 /tmp/tmpvh3s3mbx.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpvh3s3mbx.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1])\
    \ {\n\t\t\t$sorted = false;\n\t\t}\n\t}\n\treturn $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprn6836pw.php:38\n\
    Stack trace:\n#0 /tmp/tmprn6836pw.php(44): test()\n#1 {main}\n  thrown in /tmp/tmprn6836pw.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst1 = $lst;\n\tsort($lst1);\n\tif($lst == $lst1){\n\
    \t\treturn \"True\";\n\t}\n\telse{\n\t\treturn \"False\";\n\t}\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 'True'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwazfuhox.php:32\n\
    Stack trace:\n#0 /tmp/tmpwazfuhox.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpwazfuhox.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] >= $lst[$i + 1])\
    \ {\n\t\t\t$sorted = false;\n\t\t}\n\t}\n\treturn $sorted;\n}\necho is_sorted([5])\
    \ . \"\\n\";\necho is_sorted([1, 2, 3, 4, 5]) . \"\\n\";\necho is_sorted([1, 3,\
    \ 2, 4, 5]) . \"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6]) . \"\\n\";\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) . \"\\n\";\necho is_sorted([1, 3, 2, 4, 5, 6, 7]) . \"\\\
    n\";\necho is_sorted([1, 2, 2, 3, 3, 4]) . \"\\n\";\necho is_sorted([1, 2, 2,\
    \ 2, 3, 4]) . \"\\n\";\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n\n1\n1\n\n\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp14k3ssuw.php:47\n\
    Stack trace:\n#0 /tmp/tmp14k3ssuw.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp14k3ssuw.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$last = null;\n\tforeach ($lst as $num) {\n\t\tif ($last !== null && $num <\
    \ $last) {\n\t\t\t$sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$last = $num;\n\t\
    }\n\treturn $sorted;\n}\necho is_sorted([1, 2, 3, 4, 5]) . \"\\n\";\necho is_sorted([1,\
    \ 3, 2, 4, 5]) . \"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6]) . \"\\n\";\necho\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) . \"\\n\";\necho is_sorted([1, 3, 2, 4, 5,\
    \ 6, 7]) . \"\\n\";\necho is_sorted([1, 2, 2, 3, 3, 4]) . \"\\n\";\necho is_sorted([1,\
    \ 2, 2, 2, 3, 4]) . \"\\n\";\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n\n1\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpb2447h9d.php:47\n\
    Stack trace:\n#0 /tmp/tmpb2447h9d.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpb2447h9d.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] >= $lst[$i + 1])\
    \ {\n\t\t\t$sorted = false;\n\t\t}\n\t}\n\treturn $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzq_9n3py.php:40\n\
    Stack trace:\n#0 /tmp/tmpzq_9n3py.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpzq_9n3py.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1])\
    \ {\n\t\t\t$sorted = false;\n\t\t}\n\t}\n\treturn $sorted;\n}\necho is_sorted([5])\
    \ . \"\\n\";\necho is_sorted([1, 2, 3, 4, 5]) . \"\\n\";\necho is_sorted([1, 3,\
    \ 2, 4, 5]) . \"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6]) . \"\\n\";\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) . \"\\n\";\necho is_sorted([1, 3, 2, 4, 5, 6, 7]) . \"\\\
    n\";\necho is_sorted([1, 2, 2, 3, 3, 4]) . \"\\n\";\necho is_sorted([1, 2, 2,\
    \ 2, 3, 4]) . \"\\n\";\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n\n1\n1\n\n1\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8mvy8y_s.php:45\n\
    Stack trace:\n#0 /tmp/tmp8mvy8y_s.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp8mvy8y_s.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$prev = $lst[0];\n\tfor ($i = 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i]\
    \ < $prev) {\n\t\t\t$sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$prev = $lst[$i];\n\
    \t}\n\treturn $sorted;\n}\necho is_sorted([1, 2, 3, 4, 5]) . \"\\n\";\necho is_sorted([1,\
    \ 3, 2, 4, 5]) . \"\\n\";\necho is_sorted([1, 2, 2, 3, 3, 4]) . \"\\n\";\necho\
    \ is_sorted([1, 2, 2, 2, 3, 4]) . \"\\n\";\nfunction candidate(...$args) {\n \
    \   return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmpc8viesie.php on line 16\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpc8viesie.php:44\n\
    Stack trace:\n#0 /tmp/tmpc8viesie.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpc8viesie.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst2 = $lst;\n\tsort($lst2);\n\tif ($lst == $lst2)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbmla416n.php:40\n\
    Stack trace:\n#0 /tmp/tmpbmla416n.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpbmla416n.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \tsort($lst);\n\treturn $lst == $lst;\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpywfvz2ib.php:27\n\
    Stack trace:\n#0 /tmp/tmpywfvz2ib.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpywfvz2ib.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$prev = $lst[0];\n\tfor ($i = 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i]\
    \ < $prev) {\n\t\t\t$sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$prev = $lst[$i];\n\
    \t}\n\treturn $sorted;\n}\necho is_sorted([1, 2, 3, 4, 5]) . \"\\n\";\necho is_sorted([1,\
    \ 3, 2, 4, 5]) . \"\\n\";\necho is_sorted([1, 2, 2, 3, 3, 4]) . \"\\n\";\necho\
    \ is_sorted([1, 2, 2, 2, 3, 4]) . \"\\n\";\nfunction candidate(...$args) {\n \
    \   return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmp1byd_m8c.php on line 16\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1byd_m8c.php:44\n\
    Stack trace:\n#0 /tmp/tmp1byd_m8c.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp1byd_m8c.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = $lst;\n\
    \tsort($sorted);\n\t$duplicates = array_unique($lst);\n\tif ($lst == $sorted &&\
    \ count($lst) == count($duplicates)) {\n\t\treturn true;\n\t} else {\n\t\treturn\
    \ false;\n\t}\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkn05yw27.php:41\n\
    Stack trace:\n#0 /tmp/tmpkn05yw27.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpkn05yw27.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1])\
    \ {\n\t\t\t$sorted = false;\n\t\t}\n\t}\n\treturn $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphhqv19r1.php:38\n\
    Stack trace:\n#0 /tmp/tmphhqv19r1.php(44): test()\n#1 {main}\n  thrown in /tmp/tmphhqv19r1.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst2 = $lst;\n\t\
    sort($lst2);\n\tif ($lst == $lst2) {\n\t\treturn true;\n\t} else {\n\t\treturn\
    \ false;\n\t}\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpac20aydb.php:38\n\
    Stack trace:\n#0 /tmp/tmpac20aydb.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpac20aydb.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = $lst;\n\
    \tsort($sorted);\n\tif ($lst === $sorted) {\n\t\treturn true;\n\t}\n\treturn false;\n\
    }\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3wxqfs4j.php:37\n\
    Stack trace:\n#0 /tmp/tmp3wxqfs4j.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp3wxqfs4j.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$new_lst = array_unique($lst);\n\
    \tsort($new_lst);\n\tif ($new_lst == $lst) {\n\t\treturn true;\n\t} else {\n\t\
    \treturn false;\n\t}\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxuho1tdc.php:40\n\
    Stack trace:\n#0 /tmp/tmpxuho1tdc.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpxuho1tdc.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = array_unique($lst);\n\
    \tsort($sorted);\n\tif ($lst == $sorted) {\n\t\treturn true;\n\t} else {\n\t\t\
    return false;\n\t}\n}\necho is_sorted([5]);\necho is_sorted([1, 2, 3, 4, 5]);\n\
    echo is_sorted([1, 3, 2, 4, 5]);\necho is_sorted([1, 2, 3, 4, 5, 6]);\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]);\necho is_sorted([1, 3, 2, 4, 5, 6, 7]);\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\necho is_sorted([1, 2, 2, 2, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1111'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpeynl2g82.php:47\n\
    Stack trace:\n#0 /tmp/tmpeynl2g82.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpeynl2g82.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$arr = array_unique($lst);\n\
    \tsort($arr);\n\tif ($arr == $lst) {\n\t\treturn true;\n\t} else {\n\t\treturn\
    \ false;\n\t}\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsqazm1br.php:40\n\
    Stack trace:\n#0 /tmp/tmpsqazm1br.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpsqazm1br.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst_sorted = $lst;\n\tsort($lst_sorted);\n\t\
    return $lst == $lst_sorted;\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwqe1iyog.php:36\n\
    Stack trace:\n#0 /tmp/tmpwqe1iyog.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpwqe1iyog.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst2 = $lst;\n\tsort($lst2);\n\tif ($lst == $lst2)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9k57imu_.php:40\n\
    Stack trace:\n#0 /tmp/tmp9k57imu_.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp9k57imu_.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$len = count($lst);\n\tfor ($i = 0; $i < $len\
    \ - 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1]) {\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\treturn true;\n}\necho is_sorted([1, 2, 2, 3, 3, 4]) . \"\\n\";\necho\
    \ is_sorted([1, 2, 2, 2, 3, 4]) . \"\\n\";\necho is_sorted([1, 2, 3, 4, 5]) .\
    \ \"\\n\";\necho is_sorted([1, 3, 2, 4, 5]) . \"\\n\";\necho is_sorted([1, 2,\
    \ 3, 4, 5, 6]) . \"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6, 7]) . \"\\n\";\n\
    echo is_sorted([1, 3, 2, 4, 5, 6, 7]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n1\n\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyf5vvdw4.php:46\n\
    Stack trace:\n#0 /tmp/tmpyf5vvdw4.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpyf5vvdw4.php\
    \ on line 46\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$count = 0;\n\t\
    for ($i=0; $i < count($lst); $i++) { \n\t\tif ($lst[$i] < $lst[$i+1]) {\n\t\t\t\
    $count++;\n\t\t}\n\t}\n\tif ($count == count($lst)-1) {\n\t\treturn \"True\";\n\
    \t}else{\n\t\treturn \"False\";\n\t}\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 'False'
  stderr: "PHP Warning:  Undefined array key 6 in /tmp/tmpss6ilibc.php on line 17\n\
    PHP Warning:  Undefined array key 1 in /tmp/tmpss6ilibc.php on line 17\nPHP Fatal\
    \ error:  Uncaught Exception: Test failed! in /tmp/tmpss6ilibc.php:33\nStack trace:\n\
    #0 /tmp/tmpss6ilibc.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpss6ilibc.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1])\
    \ {\n\t\t\t$sorted = false;\n\t\t}\n\t}\n\treturn $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfohe0f6g.php:38\n\
    Stack trace:\n#0 /tmp/tmpfohe0f6g.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpfohe0f6g.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst2 = $lst;\n\tsort($lst2);\n\treturn $lst ==\
    \ $lst2;\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnh84gia0.php:36\n\
    Stack trace:\n#0 /tmp/tmpnh84gia0.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpnh84gia0.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$sorted = $lst;\n\tsort($sorted);\n\treturn $lst == $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]) . \"\\n\";\necho is_sorted([1, 2, 2, 2, 3, 4]) . \"\\n\";\n\
    echo is_sorted([1, 2, 3, 4, 5]) . \"\\n\";\necho is_sorted([1, 3, 2, 4, 5]) .\
    \ \"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6]) . \"\\n\";\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) . \"\\n\";\necho is_sorted([1, 3, 2, 4, 5, 6, 7]) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n1\n\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptaqpxumt.php:43\n\
    Stack trace:\n#0 /tmp/tmptaqpxumt.php(47): test()\n#1 {main}\n  thrown in /tmp/tmptaqpxumt.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$sorted = $lst;\n\tsort($sorted);\n\treturn $lst == $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]) . PHP_EOL;\necho is_sorted([1, 2, 2, 2, 3, 4]) . PHP_EOL;\n\
    echo is_sorted([1, 2, 3, 4, 5]) . PHP_EOL;\necho is_sorted([1, 3, 2, 4, 5]) .\
    \ PHP_EOL;\necho is_sorted([1, 2, 3, 4, 5, 6]) . PHP_EOL;\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) . PHP_EOL;\necho is_sorted([1, 3, 2, 4, 5, 6, 7]) . PHP_EOL;\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n1\n\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4z5x2_kj.php:43\n\
    Stack trace:\n#0 /tmp/tmp4z5x2_kj.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp4z5x2_kj.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst2 = $lst;\n\tsort($lst2);\n\tif ($lst == $lst2)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpatrko7k2.php:40\n\
    Stack trace:\n#0 /tmp/tmpatrko7k2.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpatrko7k2.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$prev = $lst[0];\n\tfor ($i = 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i]\
    \ < $prev) {\n\t\t\t$sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$prev = $lst[$i];\n\
    \t}\n\treturn $sorted;\n}\necho is_sorted([1, 2, 3, 4, 5]) . \"\\n\";\necho is_sorted([1,\
    \ 3, 2, 4, 5]) . \"\\n\";\necho is_sorted([1, 2, 2, 3, 3, 4]) . \"\\n\";\necho\
    \ is_sorted([1, 2, 2, 2, 3, 4]) . \"\\n\";\nfunction candidate(...$args) {\n \
    \   return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmp1j00c01d.php on line 16\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1j00c01d.php:44\n\
    Stack trace:\n#0 /tmp/tmp1j00c01d.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp1j00c01d.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst2 = $lst;\n\tsort($lst2);\n\tif ($lst == $lst2)\
    \ {\n\t\treturn \"True\";\n\t} else {\n\t\treturn \"False\";\n\t}\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 'True'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpge9uwt9y.php:31\n\
    Stack trace:\n#0 /tmp/tmpge9uwt9y.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpge9uwt9y.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst2 = $lst;\n\t\
    sort($lst2);\n\tif ($lst == $lst2) {\n\t\treturn true;\n\t} else {\n\t\treturn\
    \ false;\n\t}\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9gi_yrfe.php:38\n\
    Stack trace:\n#0 /tmp/tmp9gi_yrfe.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp9gi_yrfe.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst = array_diff($lst, array(''));\n\t$lst =\
    \ array_values($lst);\n\t$lst = array_diff($lst, array(null));\n\t$lst = array_values($lst);\n\
    \t$lst = array_diff($lst, array(0));\n\t$lst = array_values($lst);\n\t$lst = array_diff($lst,\
    \ array(false));\n\t$lst = array_values($lst);\n\t$lst = array_diff($lst, array(true));\n\
    \t$lst = array_values($lst);\n\t$lst = array_diff($lst, array(array()));\n\t$lst\
    \ = array_values($lst);\n\t$lst = array_diff($lst, array(array(null)));\n\t$lst\
    \ = array_values($lst);\n\t$lst = array_diff($lst, array(array(0)));\n\t$lst =\
    \ array_values($lst);\n\t$lst = array_diff($lst, array(array(false)));\n\t$lst\
    \ = array_values($lst);\n\t$lst = array_diff($lst, array(array(true)));\n\t$lst\
    \ = array_values($lst);\n\t$lst = array_diff($lst, array(array(array())));\n\t\
    $lst = array_values($lst);\n\t$lst = array_diff($lst, array(array(array(null))));\n\
    \t$lst = array_values($lst);\n\t$lst = array_diff($lst, array(array(array(0))));\n\
    \t$lst = array_values($lst);\n\t$lst = array_diff($lst, array(array(array(false))));\n\
    \t$lst = array_values($lst);\n\t$lst = array_diff($lst, array(array(array(true))));\n\
    \t$lst = array_values($lst\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \")\" in /tmp/tmpwxmrw6fr.php on line 47\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = $lst;\n\
    \tsort($sorted);\n\tif ($lst == $sorted) {\n\t\treturn true;\n\t} else {\n\t\t\
    return false;\n\t}\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpe2ek1qhn.php:38\n\
    Stack trace:\n#0 /tmp/tmpe2ek1qhn.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpe2ek1qhn.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst2 = $lst;\n\tsort($lst2);\n\tif ($lst == $lst2)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuxdu2p2x.php:40\n\
    Stack trace:\n#0 /tmp/tmpuxdu2p2x.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpuxdu2p2x.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$count = count($lst);\n\
    \t$duplicate = 0;\n\tfor ($i=0; $i < $count; $i++) { \n\t\tif ($lst[$i] == $lst[$i+1])\
    \ {\n\t\t\t$duplicate++;\n\t\t}\n\t}\n\tif ($duplicate > 0) {\n\t\treturn false;\n\
    \t}\n\telse {\n\t\treturn true;\n\t}\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Undefined array key 6 in /tmp/tmpcq30w3br.php on line 18\n\
    PHP Warning:  Undefined array key 1 in /tmp/tmpcq30w3br.php on line 18\nPHP Warning:\
    \  Undefined array key 5 in /tmp/tmpcq30w3br.php on line 18\nPHP Warning:  Undefined\
    \ array key 5 in /tmp/tmpcq30w3br.php on line 18\nPHP Fatal error:  Uncaught Exception:\
    \ Test failed! in /tmp/tmpcq30w3br.php:37\nStack trace:\n#0 /tmp/tmpcq30w3br.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpcq30w3br.php on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] >= $lst[$i + 1])\
    \ {\n\t\t\t$sorted = false;\n\t\t}\n\t}\n\treturn $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwo3zho2k.php:40\n\
    Stack trace:\n#0 /tmp/tmpwo3zho2k.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpwo3zho2k.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$sorted = $lst;\n\tsort($sorted);\n\treturn $lst == $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbdt3gtrw.php:37\n\
    Stack trace:\n#0 /tmp/tmpbdt3gtrw.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpbdt3gtrw.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$prev = 0;\n\tforeach ($lst as $num) {\n\t\tif ($num < $prev) {\n\t\t\t$sorted\
    \ = false;\n\t\t\tbreak;\n\t\t}\n\t\t$prev = $num;\n\t}\n\treturn $sorted;\n}\n\
    echo is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxyelq0o8.php:41\n\
    Stack trace:\n#0 /tmp/tmpxyelq0o8.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpxyelq0o8.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$prev = $lst[0];\n\tfor ($i = 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i]\
    \ < $prev) {\n\t\t\t$sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$prev = $lst[$i];\n\
    \t}\n\treturn $sorted;\n}\necho is_sorted([1, 2, 3, 4, 5]) . \"\\n\";\necho is_sorted([1,\
    \ 3, 2, 4, 5]) . \"\\n\";\necho is_sorted([1, 2, 2, 3, 3, 4]) . \"\\n\";\necho\
    \ is_sorted([1, 2, 2, 2, 3, 4]) . \"\\n\";\nfunction candidate(...$args) {\n \
    \   return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmpwz_ja7sp.php on line 16\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwz_ja7sp.php:44\n\
    Stack trace:\n#0 /tmp/tmpwz_ja7sp.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpwz_ja7sp.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$sorted = $lst;\n\tsort($sorted);\n\treturn $lst == $sorted;\n}\necho is_sorted([5])\
    \ . \"\\n\";\necho is_sorted([1, 2, 3, 4, 5]) . \"\\n\";\necho is_sorted([1, 3,\
    \ 2, 4, 5]) . \"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6]) . \"\\n\";\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) . \"\\n\";\necho is_sorted([1, 3, 2, 4, 5, 6, 7]) . \"\\\
    n\";\necho is_sorted([1, 2, 2, 3, 3, 4]) . \"\\n\";\necho is_sorted([1, 2, 2,\
    \ 2, 3, 4]) . \"\\n\";\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n\n1\n1\n\n\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpt5yhejon.php:44\n\
    Stack trace:\n#0 /tmp/tmpt5yhejon.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpt5yhejon.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst2 = $lst;\n\tsort($lst2);\n\tif ($lst == $lst2)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpii916lwf.php:40\n\
    Stack trace:\n#0 /tmp/tmpii916lwf.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpii916lwf.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = array_unique($lst);\n\
    \tif (count($lst) == count($sorted)) {\n\t\tsort($sorted);\n\t\tif ($lst == $sorted)\
    \ {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\necho is_sorted([5]) .\
    \ \"\\n\";\necho is_sorted([1, 2, 3, 4, 5]) . \"\\n\";\necho is_sorted([1, 3,\
    \ 2, 4, 5]) . \"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6]) . \"\\n\";\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) . \"\\n\";\necho is_sorted([1, 3, 2, 4, 5, 6, 7]) . \"\\\
    n\";\necho is_sorted([1, 2, 2, 3, 3, 4]) . \"\\n\";\necho is_sorted([1, 2, 2,\
    \ 2, 3, 4]) . \"\\n\";\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n\n1\n1\n\n\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjswoljl1.php:48\n\
    Stack trace:\n#0 /tmp/tmpjswoljl1.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpjswoljl1.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$last = $lst[0];\n\tfor ($i = 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i]\
    \ < $last) {\n\t\t\t$sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$last = $lst[$i];\n\
    \t}\n\treturn $sorted;\n}\necho is_sorted([1, 2, 3, 4, 5]) . \"\\n\";\necho is_sorted([1,\
    \ 3, 2, 4, 5]) . \"\\n\";\necho is_sorted([1, 2, 2, 3, 3, 4]) . \"\\n\";\necho\
    \ is_sorted([1, 2, 2, 2, 3, 4]) . \"\\n\";\nfunction candidate(...$args) {\n \
    \   return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmpy9s4yppo.php on line 16\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpy9s4yppo.php:44\n\
    Stack trace:\n#0 /tmp/tmpy9s4yppo.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpy9s4yppo.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst2 = $lst;\n\tsort($lst2);\n\tif ($lst == $lst2)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvzqf8bqp.php:40\n\
    Stack trace:\n#0 /tmp/tmpvzqf8bqp.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpvzqf8bqp.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst_sort = $lst;\n\tsort($lst_sort);\n\tif ($lst === $lst_sort) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_sorted([1, 3, 2, 4, 5,\
    \ 6, 7]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpiwcjbcf3.php:41\n\
    Stack trace:\n#0 /tmp/tmpiwcjbcf3.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpiwcjbcf3.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$count = count($lst);\n\
    \t$i = 0;\n\twhile ($i < $count) {\n\t\tif ($lst[$i] < $lst[$i + 1]) {\n\t\t\t\
    $i++;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\necho\
    \ is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Undefined array key 1 in /tmp/tmpefx1e0a3.php on line 18\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpefx1e0a3.php:32\n\
    Stack trace:\n#0 /tmp/tmpefx1e0a3.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpefx1e0a3.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = $lst;\n\
    \tsort($sorted);\n\t$duplicates = array_diff_assoc($lst, $sorted);\n\tif (count($duplicates)\
    \ > 0) {\n\t\treturn false;\n\t}\n\treturn $lst == $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7o32kdb7.php:38\n\
    Stack trace:\n#0 /tmp/tmp7o32kdb7.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp7o32kdb7.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1])\
    \ {\n\t\t\t$sorted = false;\n\t\t}\n\t}\n\treturn $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]) . \"\\n\";\necho is_sorted([1, 2, 2, 2, 3, 4]) . \"\\n\";\n\
    echo is_sorted([1, 2, 3, 4, 5]) . \"\\n\";\necho is_sorted([1, 3, 2, 4, 5]) .\
    \ \"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6]) . \"\\n\";\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) . \"\\n\";\necho is_sorted([1, 3, 2, 4, 5, 6, 7]) . \"\\\
    n\";\necho is_sorted([5]) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n1\n\n1\n1\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_u0lx7r7.php:45\n\
    Stack trace:\n#0 /tmp/tmp_u0lx7r7.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp_u0lx7r7.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$last = $lst[0];\n\tforeach ($lst as $num) {\n\t\tif ($num < $last) {\n\t\t\t\
    $sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$last = $num;\n\t}\n\treturn $sorted;\n\
    }\necho is_sorted([1, 2, 2, 3, 3, 4]) . PHP_EOL;\necho is_sorted([1, 2, 2, 2,\
    \ 3, 4]) . PHP_EOL;\necho is_sorted([1, 2, 3, 4, 5]) . PHP_EOL;\necho is_sorted([1,\
    \ 3, 2, 4, 5]) . PHP_EOL;\necho is_sorted([1, 2, 3, 4, 5, 6]) . PHP_EOL;\necho\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) . PHP_EOL;\necho is_sorted([1, 3, 2, 4, 5,\
    \ 6, 7]) . PHP_EOL;\necho is_sorted([5]) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n1\n\n1\n1\n\n1\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmpuuc2dpjt.php on line 16\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuuc2dpjt.php:48\n\
    Stack trace:\n#0 /tmp/tmpuuc2dpjt.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpuuc2dpjt.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$result = true;\n\
    \tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1])\
    \ {\n\t\t\t$result = false;\n\t\t}\n\t}\n\treturn $result;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpil5lwnl3.php:38\n\
    Stack trace:\n#0 /tmp/tmpil5lwnl3.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpil5lwnl3.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$arr = array_unique($lst);\n\
    \tsort($arr);\n\tif ($arr == $lst) {\n\t\treturn true;\n\t} else {\n\t\treturn\
    \ false;\n\t}\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8youbfj7.php:40\n\
    Stack trace:\n#0 /tmp/tmp8youbfj7.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp8youbfj7.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1])\
    \ {\n\t\t\t$sorted = false;\n\t\t}\n\t}\n\treturn $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp768xc2yo.php:38\n\
    Stack trace:\n#0 /tmp/tmp768xc2yo.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp768xc2yo.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] >= $lst[$i + 1])\
    \ {\n\t\t\t$sorted = false;\n\t\t}\n\t}\n\treturn $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6me_e_ne.php:40\n\
    Stack trace:\n#0 /tmp/tmp6me_e_ne.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp6me_e_ne.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$sorted = $lst;\n\tsort($sorted);\n\treturn $lst == $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkpc0928x.php:37\n\
    Stack trace:\n#0 /tmp/tmpkpc0928x.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpkpc0928x.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$i = 0;\n\twhile ($i < count($lst) - 1) {\n\t\tif ($lst[$i] > $lst[$i + 1])\
    \ {\n\t\t\t$sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$i++;\n\t}\n\treturn $sorted;\n\
    }\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpza8_ugob.php:41\n\
    Stack trace:\n#0 /tmp/tmpza8_ugob.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpza8_ugob.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] >= $lst[$i + 1])\
    \ {\n\t\t\t$sorted = false;\n\t\t}\n\t}\n\treturn $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpu_748o7_.php:40\n\
    Stack trace:\n#0 /tmp/tmpu_748o7_.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpu_748o7_.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] >= $lst[$i + 1])\
    \ {\n\t\t\t$sorted = false;\n\t\t}\n\t}\n\treturn $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgqpztu8x.php:40\n\
    Stack trace:\n#0 /tmp/tmpgqpztu8x.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpgqpztu8x.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$prev = $lst[0];\n\tforeach ($lst as $num) {\n\t\tif ($num < $prev) {\n\t\t\t\
    $sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$prev = $num;\n\t}\n\treturn $sorted;\n\
    }\necho is_sorted([1, 2, 2, 3, 3, 4]) . \"\\n\";\necho is_sorted([1, 2, 2, 2,\
    \ 3, 4]) . \"\\n\";\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmpl8y7fsuu.php on line 16\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpl8y7fsuu.php:42\n\
    Stack trace:\n#0 /tmp/tmpl8y7fsuu.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpl8y7fsuu.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \tsort($lst);\n\tif ($lst == $lst) {\n\t\treturn \"True\";\n\t} else {\n\t\treturn\
    \ \"False\";\n\t}\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 'True'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdcwgg3g8.php:29\n\
    Stack trace:\n#0 /tmp/tmpdcwgg3g8.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpdcwgg3g8.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \tsort($lst);\n\t$lst2 = $lst;\n\tsort($lst2, SORT_NUMERIC);\n\tif ($lst === $lst2)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuac331zp.php:33\n\
    Stack trace:\n#0 /tmp/tmpuac331zp.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpuac331zp.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i < count($lst) - 1) {\n\t\t\
    \tif ($lst[$i] > $lst[$i + 1]) {\n\t\t\t\t$sorted = false;\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn $sorted;\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp38e0xxpu.php:40\n\
    Stack trace:\n#0 /tmp/tmp38e0xxpu.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp38e0xxpu.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    $lst = array_values($lst);\n    $lst2 = $lst;\n    sort($lst2);\n    if ($lst\
    \ == $lst2) {\n        return true;\n    } else {\n        return false;\n   \
    \ }\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpi1gh5bwa.php:40\n\
    Stack trace:\n#0 /tmp/tmpi1gh5bwa.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpi1gh5bwa.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst2 = $lst;\n\tsort($lst2);\n\tif ($lst ===\
    \ $lst2) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\necho \"<br>\";\necho is_sorted([1, 2, 2, 2, 3, 4]);\necho\
    \ \"<br>\";\necho is_sorted([1, 2, 3, 4, 5]);\necho \"<br>\";\necho is_sorted([1,\
    \ 3, 2, 4, 5]);\necho \"<br>\";\necho is_sorted([1, 2, 3, 4, 5, 6]);\necho \"\
    <br>\";\necho is_sorted([1, 2, 3, 4, 5, 6, 7]);\necho \"<br>\";\necho is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]);\necho \"<br>\";\necho is_sorted([5]);\necho \"<br>\";\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 1<br>1<br>1<br><br>1<br>1<br><br>1<br>
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmilxexcc.php:55\n\
    Stack trace:\n#0 /tmp/tmpmilxexcc.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpmilxexcc.php\
    \ on line 55\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$sorted = $lst;\n\tsort($sorted);\n\treturn $lst == $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp22rzcwfn.php:37\n\
    Stack trace:\n#0 /tmp/tmp22rzcwfn.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp22rzcwfn.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$prev = $lst[0];\n\tfor ($i = 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i]\
    \ < $prev) {\n\t\t\t$sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$prev = $lst[$i];\n\
    \t}\n\treturn $sorted;\n}\necho is_sorted([1, 2, 3, 4, 5]) . \"\\n\";\necho is_sorted([1,\
    \ 3, 2, 4, 5]) . \"\\n\";\necho is_sorted([1, 2, 2, 3, 3, 4]) . \"\\n\";\necho\
    \ is_sorted([1, 2, 2, 2, 3, 4]) . \"\\n\";\nfunction candidate(...$args) {\n \
    \   return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmpanktnekd.php on line 16\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpanktnekd.php:44\n\
    Stack trace:\n#0 /tmp/tmpanktnekd.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpanktnekd.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst2 = $lst;\n\tsort($lst2);\n\tif ($lst == $lst2)\
    \ {\n\t\treturn \"True\";\n\t} else {\n\t\treturn \"False\";\n\t}\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 'True'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpt8o8si8o.php:31\n\
    Stack trace:\n#0 /tmp/tmpt8o8si8o.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpt8o8si8o.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$prev = $lst[0];\n\tfor ($i = 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i]\
    \ < $prev) {\n\t\t\t$sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$prev = $lst[$i];\n\
    \t}\n\treturn $sorted;\n}\necho is_sorted([1, 2, 3, 4, 5]) . \"\\n\";\necho is_sorted([1,\
    \ 3, 2, 4, 5]) . \"\\n\";\necho is_sorted([1, 2, 2, 3, 3, 4]) . \"\\n\";\necho\
    \ is_sorted([1, 2, 2, 2, 3, 4]) . \"\\n\";\nfunction candidate(...$args) {\n \
    \   return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmp4ahoc0ul.php on line 16\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4ahoc0ul.php:44\n\
    Stack trace:\n#0 /tmp/tmp4ahoc0ul.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp4ahoc0ul.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1])\
    \ {\n\t\t\t$sorted = false;\n\t\t}\n\t}\n\treturn $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzxrchydj.php:38\n\
    Stack trace:\n#0 /tmp/tmpzxrchydj.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpzxrchydj.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$arr = array_count_values($lst);\n\
    \t$arr2 = array_unique($lst);\n\tif (count($arr) == count($arr2)) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_sorted([1, 2, 2, 3, 3,\
    \ 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2kir863l.php:31\n\
    Stack trace:\n#0 /tmp/tmp2kir863l.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp2kir863l.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$last = $lst[0];\n\tfor ($i = 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i]\
    \ < $last) {\n\t\t\t$sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$last = $lst[$i];\n\
    \t}\n\treturn $sorted;\n}\necho is_sorted([5]) . \"\\n\";\necho is_sorted([1,\
    \ 2, 3, 4, 5]) . \"\\n\";\necho is_sorted([1, 3, 2, 4, 5]) . \"\\n\";\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6]) . \"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6, 7]) . \"\\n\"\
    ;\necho is_sorted([1, 3, 2, 4, 5, 6, 7]) . \"\\n\";\necho is_sorted([1, 2, 2,\
    \ 3, 3, 4]) . \"\\n\";\necho is_sorted([1, 2, 2, 2, 3, 4]) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1\n1\n\n1\n1\n\n1\n1\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmprgbalt3t.php on line 16\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprgbalt3t.php:48\n\
    Stack trace:\n#0 /tmp/tmprgbalt3t.php(54): test()\n#1 {main}\n  thrown in /tmp/tmprgbalt3t.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        if\
    \ ($lst[$i] < $prev) {\n            $sorted = false;\n            break;\n   \
    \     }\n        $prev = $lst[$i];\n    }\n    return $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]) . \"\\n\";\necho is_sorted([1, 2, 2, 2, 3, 4]) . \"\\n\";\n\
    echo is_sorted([1, 2, 3, 4, 5]) . \"\\n\";\necho is_sorted([1, 3, 2, 4, 5]) .\
    \ \"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6]) . \"\\n\";\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) . \"\\n\";\necho is_sorted([1, 3, 2, 4, 5, 6, 7]) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n1\n\n1\n1\n\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmpz4ckc595.php on line 16\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpz4ckc595.php:47\n\
    Stack trace:\n#0 /tmp/tmpz4ckc595.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpz4ckc595.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst2 = $lst;\n\tsort($lst2);\n\tif ($lst == $lst2)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4d3jir51.php:40\n\
    Stack trace:\n#0 /tmp/tmp4d3jir51.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp4d3jir51.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        if\
    \ ($lst[$i] < $prev) {\n            $sorted = false;\n            break;\n   \
    \     }\n        $prev = $lst[$i];\n    }\n    return $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmpua209hav.php on line 16\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpua209hav.php:41\n\
    Stack trace:\n#0 /tmp/tmpua209hav.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpua209hav.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$sorted = $lst;\n\tsort($sorted);\n\treturn $lst\
    \ == $sorted;\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmps81xq7so.php:36\n\
    Stack trace:\n#0 /tmp/tmps81xq7so.php(42): test()\n#1 {main}\n  thrown in /tmp/tmps81xq7so.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$sorted = $lst;\n\tsort($sorted);\n\treturn $lst == $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpe5_fglq1.php:37\n\
    Stack trace:\n#0 /tmp/tmpe5_fglq1.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpe5_fglq1.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$last = $lst[0];\n\tforeach ($lst as $num) {\n\t\tif ($num < $last) {\n\t\t\t\
    $sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$last = $num;\n\t}\n\treturn $sorted;\n\
    }\necho is_sorted([1, 2, 2, 3, 3, 4]) . \"\\n\";\necho is_sorted([1, 2, 2, 2,\
    \ 3, 4]) . \"\\n\";\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmphla5pmtm.php on line 16\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphla5pmtm.php:42\n\
    Stack trace:\n#0 /tmp/tmphla5pmtm.php(48): test()\n#1 {main}\n  thrown in /tmp/tmphla5pmtm.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] >= $lst[$i + 1])\
    \ {\n\t\t\t$sorted = false;\n\t\t}\n\t}\n\treturn $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgifr43ie.php:40\n\
    Stack trace:\n#0 /tmp/tmpgifr43ie.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpgifr43ie.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = $lst;\n\
    \tsort($sorted);\n\tif ($lst == $sorted) {\n\t\treturn true;\n\t} else {\n\t\t\
    return false;\n\t}\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0kjdl18f.php:38\n\
    Stack trace:\n#0 /tmp/tmp0kjdl18f.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp0kjdl18f.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst2 = $lst;\n\tsort($lst2);\n\treturn $lst ==\
    \ $lst2;\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpc8h28hoy.php:36\n\
    Stack trace:\n#0 /tmp/tmpc8h28hoy.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpc8h28hoy.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst2 = $lst;\n\tsort($lst2);\n\tif ($lst == $lst2)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpt866b_qx.php:40\n\
    Stack trace:\n#0 /tmp/tmpt866b_qx.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpt866b_qx.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1])\
    \ {\n\t\t\t$sorted = false;\n\t\t}\n\t}\n\treturn $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjc_y61wz.php:38\n\
    Stack trace:\n#0 /tmp/tmpjc_y61wz.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpjc_y61wz.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    for ($i = 0; $i < count($lst) - 1; $i++) {\n        if ($lst[$i] >= $lst[$i\
    \ + 1]) {\n            $sorted = false;\n        }\n    }\n    return $sorted;\n\
    }\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmn2mc80a.php:40\n\
    Stack trace:\n#0 /tmp/tmpmn2mc80a.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpmn2mc80a.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = $lst;\n\
    \tsort($sorted);\n\tif ($lst == $sorted) {\n\t\treturn true;\n\t} else {\n\t\t\
    return false;\n\t}\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpac7kjt8j.php:38\n\
    Stack trace:\n#0 /tmp/tmpac7kjt8j.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpac7kjt8j.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$arr = array_unique($lst);\n\
    \t$arr2 = $lst;\n\tsort($arr2);\n\tif ($arr == $arr2) {\n\t\treturn true;\n\t\
    } else {\n\t\treturn false;\n\t}\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5hnde9ec.php:41\n\
    Stack trace:\n#0 /tmp/tmp5hnde9ec.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp5hnde9ec.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst_sorted = $lst;\n\tsort($lst_sorted);\n\t\
    if ($lst == $lst_sorted) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t\
    }\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n  \
    \  return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5nlq0hy5.php:40\n\
    Stack trace:\n#0 /tmp/tmp5nlq0hy5.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp5nlq0hy5.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] >= $lst[$i + 1])\
    \ {\n\t\t\t$sorted = false;\n\t\t}\n\t}\n\treturn $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]) . PHP_EOL;\necho is_sorted([1, 2, 2, 2, 3, 4]) . PHP_EOL;\n\
    echo is_sorted([1, 2, 3, 4, 5]) . PHP_EOL;\necho is_sorted([1, 3, 2, 4, 5]) .\
    \ PHP_EOL;\necho is_sorted([1, 2, 3, 4, 5, 6]) . PHP_EOL;\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) . PHP_EOL;\necho is_sorted([1, 3, 2, 4, 5, 6, 7]) . PHP_EOL;\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n1\n\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpj7ugw51z.php:46\n\
    Stack trace:\n#0 /tmp/tmpj7ugw51z.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpj7ugw51z.php\
    \ on line 46\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst_sort = $lst;\n\tsort($lst_sort);\n\tif ($lst\
    \ == $lst_sort) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho\
    \ is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7yjy2zss.php:40\n\
    Stack trace:\n#0 /tmp/tmp7yjy2zss.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp7yjy2zss.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1])\
    \ {\n\t\t\t$sorted = false;\n\t\t}\n\t}\n\treturn $sorted;\n}\necho is_sorted([5])\
    \ . \"<br>\";\necho is_sorted([1, 2, 3, 4, 5]) . \"<br>\";\necho is_sorted([1,\
    \ 3, 2, 4, 5]) . \"<br>\";\necho is_sorted([1, 2, 3, 4, 5, 6]) . \"<br>\";\necho\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) . \"<br>\";\necho is_sorted([1, 3, 2, 4, 5,\
    \ 6, 7]) . \"<br>\";\necho is_sorted([1, 2, 2, 3, 3, 4]) . \"<br>\";\necho is_sorted([1,\
    \ 2, 2, 2, 3, 4]) . \"<br>\";\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 1<br>1<br><br>1<br>1<br><br>1<br>1<br>
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpb1__5sga.php:45\n\
    Stack trace:\n#0 /tmp/tmpb1__5sga.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpb1__5sga.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$prev = $lst[0];\n\tfor ($i = 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i]\
    \ < $prev) {\n\t\t\t$sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$prev = $lst[$i];\n\
    \t}\n\treturn $sorted;\n}\necho is_sorted([1, 2, 3, 4, 5]) . \"\\n\";\necho is_sorted([1,\
    \ 3, 2, 4, 5]) . \"\\n\";\necho is_sorted([1, 2, 2, 3, 3, 4]) . \"\\n\";\necho\
    \ is_sorted([1, 2, 2, 2, 3, 4]) . \"\\n\";\nfunction candidate(...$args) {\n \
    \   return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmph7h4qjs6.php on line 16\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmph7h4qjs6.php:44\n\
    Stack trace:\n#0 /tmp/tmph7h4qjs6.php(50): test()\n#1 {main}\n  thrown in /tmp/tmph7h4qjs6.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1])\
    \ {\n\t\t\t$sorted = false;\n\t\t}\n\t}\n\treturn $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyfaodxg3.php:38\n\
    Stack trace:\n#0 /tmp/tmpyfaodxg3.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpyfaodxg3.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1])\
    \ {\n\t\t\t$sorted = false;\n\t\t}\n\t}\n\treturn $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmlm34fq1.php:38\n\
    Stack trace:\n#0 /tmp/tmpmlm34fq1.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpmlm34fq1.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$i = 0;\n\t$j =\
    \ 1;\n\t$count = count($lst);\n\twhile($j < $count){\n\t\tif($lst[$i] < $lst[$j]){\n\
    \t\t\t$i++;\n\t\t\t$j++;\n\t\t}else{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ true;\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfvntcu49.php:45\n\
    Stack trace:\n#0 /tmp/tmpfvntcu49.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpfvntcu49.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$prev = $lst[0];\n\tfor ($i = 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i]\
    \ < $prev) {\n\t\t\t$sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$prev = $lst[$i];\n\
    \t}\n\treturn $sorted;\n}\necho is_sorted([1, 2, 3, 4, 5]) . \"\\n\";\necho is_sorted([1,\
    \ 3, 2, 4, 5]) . \"\\n\";\necho is_sorted([1, 2, 2, 3, 3, 4]) . \"\\n\";\necho\
    \ is_sorted([1, 2, 2, 2, 3, 4]) . \"\\n\";\nfunction candidate(...$args) {\n \
    \   return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmpemmipbya.php on line 16\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpemmipbya.php:44\n\
    Stack trace:\n#0 /tmp/tmpemmipbya.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpemmipbya.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$last = null;\n\tforeach ($lst as $item) {\n\t\tif ($last !== null && $item\
    \ <= $last) {\n\t\t\t$sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$last = $item;\n\
    \t}\n\treturn $sorted;\n}\necho is_sorted([5]) . \"\\n\";\necho is_sorted([1,\
    \ 2, 3, 4, 5]) . \"\\n\";\necho is_sorted([1, 3, 2, 4, 5]) . \"\\n\";\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6]) . \"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6, 7]) . \"\\n\"\
    ;\necho is_sorted([1, 3, 2, 4, 5, 6, 7]) . \"\\n\";\necho is_sorted([1, 2, 2,\
    \ 3, 3, 4]) . \"\\n\";\necho is_sorted([1, 2, 2, 2, 3, 4]) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1\n1\n\n1\n1\n\n\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpratqthpr.php:50\n\
    Stack trace:\n#0 /tmp/tmpratqthpr.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpratqthpr.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    for ($i = 0; $i < count($lst) - 1; $i++) {\n        if ($lst[$i] > $lst[$i\
    \ + 1]) {\n            $sorted = false;\n        }\n    }\n    return $sorted;\n\
    }\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpj7a9mozr.php:38\n\
    Stack trace:\n#0 /tmp/tmpj7a9mozr.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpj7a9mozr.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$newArr = [];\n\t\
    foreach ($lst as $key => $value) {\n\t\tif (in_array($value, $newArr)) {\n\t\t\
    \treturn false;\n\t\t}\n\t\t$newArr[] = $value;\n\t}\n\t$newArr = array_unique($newArr);\n\
    \t$newArr = array_values($newArr);\n\tif ($newArr == $lst) {\n\t\treturn true;\n\
    \t}\n\treturn false;\n}\necho is_sorted([5]);\necho \"<br>\";\necho is_sorted([1,\
    \ 2, 3, 4, 5]);\necho \"<br>\";\necho is_sorted([1, 3, 2, 4, 5]);\necho \"<br>\"\
    ;\necho is_sorted([1, 2, 3, 4, 5, 6]);\necho \"<br>\";\necho is_sorted([1, 2,\
    \ 3, 4, 5, 6, 7]);\necho \"<br>\";\necho is_sorted([1, 3, 2, 4, 5, 6, 7]);\necho\
    \ \"<br>\";\necho is_sorted([1, 2, 2, 3, 3, 4]);\necho \"<br>\";\necho is_sorted([1,\
    \ 2, 2, 2, 3, 4]);\necho \"<br>\";\necho is_sorted([1, 2, 2, 2, 3, 4, 4]);\necho\
    \ \"<br>\";\necho is_sorted([1, 2, 2, 2, 3, 4, 4, 4]);\necho \"<br>\";\necho is_sorted([1,\
    \ 2, 2, 2, 3, 4, 4, 4, 5]);\necho \"<br>\";\necho is_sorted([1, 2, 2, 2, 3, 4,\
    \ 4, 4, 5, 5]);\necho \"<br>\";\necho is_sorted([1, 2, 2, 2, 3, 4, 4, 4, 5, 5,\
    \ 5]);\necho \"<br>\";\necho is_sorted([1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 5, 6]);\n\
    echo \"<br>\";\necho is_s\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \",\" or \";\" in /tmp/tmprvfwofp7.php on line 58\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst1 = $lst;\n\tsort($lst1);\n\tif($lst == $lst1){\n\
    \t\treturn \"True\";\n\t}else{\n\t\treturn \"False\";\n\t}\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 'True'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpefxb41oh.php:31\n\
    Stack trace:\n#0 /tmp/tmpefxb41oh.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpefxb41oh.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \tsort($lst);\n\tif ($lst == $lst) {\n\t\treturn true;\n\t} else {\n\t\treturn\
    \ false;\n\t}\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpadvxvnz8.php:31\n\
    Stack trace:\n#0 /tmp/tmpadvxvnz8.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpadvxvnz8.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$sorted = $lst;\n\tsort($sorted);\n\treturn $lst == $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpv5_kyah7.php:37\n\
    Stack trace:\n#0 /tmp/tmpv5_kyah7.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpv5_kyah7.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1])\
    \ {\n\t\t\t$sorted = false;\n\t\t}\n\t}\n\treturn $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppby62qmv.php:38\n\
    Stack trace:\n#0 /tmp/tmppby62qmv.php(44): test()\n#1 {main}\n  thrown in /tmp/tmppby62qmv.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$prev = 0;\n\tforeach ($lst as $num) {\n\t\tif ($num < $prev) {\n\t\t\t$sorted\
    \ = false;\n\t\t\tbreak;\n\t\t}\n\t\t$prev = $num;\n\t}\n\treturn $sorted;\n}\n\
    echo is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0s41kbsn.php:41\n\
    Stack trace:\n#0 /tmp/tmp0s41kbsn.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp0s41kbsn.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst2 = $lst;\n\tsort($lst2);\n\tif ($lst == $lst2)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpm4w5xkk7.php:40\n\
    Stack trace:\n#0 /tmp/tmpm4w5xkk7.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpm4w5xkk7.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$prev = $lst[0];\n\tfor ($i = 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i]\
    \ < $prev) {\n\t\t\t$sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$prev = $lst[$i];\n\
    \t}\n\treturn $sorted;\n}\necho is_sorted([1, 2, 3, 4, 5]);\necho is_sorted([1,\
    \ 3, 2, 4, 5]);\necho is_sorted([1, 2, 3, 4, 5, 6]);\necho is_sorted([1, 2, 3,\
    \ 4, 5, 6, 7]);\necho is_sorted([1, 3, 2, 4, 5, 6, 7]);\necho is_sorted([1, 2,\
    \ 2, 3, 3, 4]);\necho is_sorted([1, 2, 2, 2, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '11111'
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmpmnaoy216.php on line 16\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmnaoy216.php:47\n\
    Stack trace:\n#0 /tmp/tmpmnaoy216.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpmnaoy216.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$i = 0;\n\t$j =\
    \ 1;\n\t$length = count($lst);\n\twhile($i < $length - 1){\n\t\tif($lst[$i] >\
    \ $lst[$j]){\n\t\t\treturn false;\n\t\t}\n\t\t$i++;\n\t\t$j++;\n\t}\n\treturn\
    \ true;\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphunmsa_j.php:42\n\
    Stack trace:\n#0 /tmp/tmphunmsa_j.php(48): test()\n#1 {main}\n  thrown in /tmp/tmphunmsa_j.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$sorted = $lst;\n\tsort($sorted);\n\tif($lst ==\
    \ $sorted){\n\t\treturn true;\n\t}\n\treturn false;\n}\necho is_sorted([1, 2,\
    \ 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp93jg9bt3.php:39\n\
    Stack trace:\n#0 /tmp/tmp93jg9bt3.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp93jg9bt3.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1])\
    \ {\n\t\t\t$sorted = false;\n\t\t}\n\t}\n\treturn $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppp1ile3y.php:38\n\
    Stack trace:\n#0 /tmp/tmppp1ile3y.php(44): test()\n#1 {main}\n  thrown in /tmp/tmppp1ile3y.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$count = count($lst);\n\
    \t$sorted = true;\n\tfor ($i = 0; $i < $count - 1; $i++) {\n\t\tif ($lst[$i] >=\
    \ $lst[$i + 1]) {\n\t\t\t$sorted = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn\
    \ $sorted;\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4ad0mlb_.php:42\n\
    Stack trace:\n#0 /tmp/tmp4ad0mlb_.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp4ad0mlb_.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$prev = $lst[0];\n\tforeach ($lst as $num) {\n\t\tif ($num < $prev) {\n\t\t\t\
    $sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$prev = $num;\n\t}\n\treturn $sorted;\n\
    }\necho is_sorted([5]) . PHP_EOL;\necho is_sorted([1, 2, 3, 4, 5]) . PHP_EOL;\n\
    echo is_sorted([1, 3, 2, 4, 5]) . PHP_EOL;\necho is_sorted([1, 2, 3, 4, 5, 6])\
    \ . PHP_EOL;\necho is_sorted([1, 2, 3, 4, 5, 6, 7]) . PHP_EOL;\necho is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) . PHP_EOL;\necho is_sorted([1, 2, 2, 3, 3, 4]) . PHP_EOL;\n\
    echo is_sorted([1, 2, 2, 2, 3, 4]) . PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n\n1\n1\n\n1\n1\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmpn80n89cd.php on line 16\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn80n89cd.php:48\n\
    Stack trace:\n#0 /tmp/tmpn80n89cd.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpn80n89cd.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst_sorted = $lst;\n\tsort($lst_sorted);\n\t\
    return $lst == $lst_sorted;\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpeim8584h.php:36\n\
    Stack trace:\n#0 /tmp/tmpeim8584h.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpeim8584h.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$last = $lst[0];\n\tfor ($i = 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i]\
    \ <= $last) {\n\t\t\t$sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$last = $lst[$i];\n\
    \t}\n\treturn $sorted;\n}\necho is_sorted([1, 2, 3, 4, 5]) . \"\\n\";\necho is_sorted([1,\
    \ 3, 2, 4, 5]) . \"\\n\";\necho is_sorted([1, 2, 2, 3, 3, 4]) . \"\\n\";\necho\
    \ is_sorted([1, 2, 2, 2, 3, 4]) . \"\\n\";\nfunction candidate(...$args) {\n \
    \   return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n\n\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmpa2l22mj6.php on line 16\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpa2l22mj6.php:46\n\
    Stack trace:\n#0 /tmp/tmpa2l22mj6.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpa2l22mj6.php\
    \ on line 46\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$prev = $lst[0];\n\tfor ($i = 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i]\
    \ < $prev) {\n\t\t\t$sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$prev = $lst[$i];\n\
    \t}\n\treturn $sorted;\n}\necho is_sorted([1, 2, 3, 4, 5]) . \"\\n\";\necho is_sorted([1,\
    \ 3, 2, 4, 5]) . \"\\n\";\necho is_sorted([1, 2, 2, 3, 3, 4]) . \"\\n\";\necho\
    \ is_sorted([1, 2, 2, 2, 3, 4]) . \"\\n\";\nfunction candidate(...$args) {\n \
    \   return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmpaydhffkn.php on line 16\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpaydhffkn.php:44\n\
    Stack trace:\n#0 /tmp/tmpaydhffkn.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpaydhffkn.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$last = $lst[0];\n\tforeach ($lst as $num) {\n\t\tif ($num < $last) {\n\t\t\t\
    $sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$last = $num;\n\t}\n\treturn $sorted;\n\
    }\necho is_sorted([1, 2, 2, 3, 3, 4]) . PHP_EOL;\necho is_sorted([1, 2, 2, 2,\
    \ 3, 4]) . PHP_EOL;\necho is_sorted([1, 2, 3, 4, 5]) . PHP_EOL;\necho is_sorted([1,\
    \ 3, 2, 4, 5]) . PHP_EOL;\necho is_sorted([1, 2, 3, 4, 5, 6]) . PHP_EOL;\necho\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) . PHP_EOL;\necho is_sorted([1, 3, 2, 4, 5,\
    \ 6, 7]) . PHP_EOL;\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n1\n\n1\n1\n\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmpayzkn0uu.php on line 16\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpayzkn0uu.php:47\n\
    Stack trace:\n#0 /tmp/tmpayzkn0uu.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpayzkn0uu.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \tsort($lst);\n\t$lst2 = $lst;\n\trsort($lst2);\n\tif ($lst == $lst2) {\n\t\t\
    return false;\n\t} else {\n\t\treturn true;\n\t}\n}\necho is_sorted([1, 2, 2,\
    \ 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplr5x_avd.php:31\n\
    Stack trace:\n#0 /tmp/tmplr5x_avd.php(46): test()\n#1 {main}\n  thrown in /tmp/tmplr5x_avd.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$prev = $lst[0];\n\tfor ($i = 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i]\
    \ < $prev) {\n\t\t\t$sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$prev = $lst[$i];\n\
    \t}\n\treturn $sorted;\n}\necho is_sorted([1, 2, 3, 4, 5]);\necho \"\\n\";\necho\
    \ is_sorted([1, 3, 2, 4, 5]);\necho \"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6]);\n\
    echo \"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6, 7]);\necho \"\\n\";\necho is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]);\necho \"\\n\";\necho is_sorted([1, 2, 2, 3, 3, 4]);\necho\
    \ \"\\n\";\necho is_sorted([1, 2, 2, 2, 3, 4]);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n\n1\n1\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmp6m68gv84.php on line 16\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6m68gv84.php:54\n\
    Stack trace:\n#0 /tmp/tmp6m68gv84.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp6m68gv84.php\
    \ on line 54\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$count = count($lst);\n\
    \t$i = 0;\n\t$j = 1;\n\twhile ($j < $count) {\n\t\tif ($lst[$i] > $lst[$j]) {\n\
    \t\t\treturn false;\n\t\t}\n\t\t$i++;\n\t\t$j++;\n\t}\n\treturn true;\n}\necho\
    \ is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqxrmgx7m.php:42\n\
    Stack trace:\n#0 /tmp/tmpqxrmgx7m.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpqxrmgx7m.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$sorted = $lst;\n\tsort($sorted);\n\treturn $lst == $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp08skfe2x.php:37\n\
    Stack trace:\n#0 /tmp/tmp08skfe2x.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp08skfe2x.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst2 = $lst;\n\tsort($lst2);\n\tif ($lst == $lst2)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9rs80ur2.php:40\n\
    Stack trace:\n#0 /tmp/tmp9rs80ur2.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp9rs80ur2.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$sorted = $lst;\n\tsort($sorted);\n\treturn $lst == $sorted;\n}\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfnjemh1_.php:36\n\
    Stack trace:\n#0 /tmp/tmpfnjemh1_.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpfnjemh1_.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst2 = $lst;\n\tsort($lst2);\n\treturn $lst ==\
    \ $lst2;\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkmqz9knv.php:36\n\
    Stack trace:\n#0 /tmp/tmpkmqz9knv.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpkmqz9knv.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst2 = $lst;\n\tsort($lst2);\n\treturn $lst ==\
    \ $lst2;\n}\necho is_sorted([1, 3, 2, 4, 5, 6, 7]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9i7l50zb.php:36\n\
    Stack trace:\n#0 /tmp/tmp9i7l50zb.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp9i7l50zb.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$sorted = $lst;\n\tsort($sorted);\n\tif ($lst\
    \ == $sorted) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho\
    \ is_sorted([5]);\necho is_sorted([1, 2, 3, 4, 5]);\necho is_sorted([1, 3, 2,\
    \ 4, 5]);\necho is_sorted([1, 2, 3, 4, 5, 6]);\necho is_sorted([1, 2, 3, 4, 5,\
    \ 6, 7]);\necho is_sorted([1, 3, 2, 4, 5, 6, 7]);\necho is_sorted([1, 2, 2, 3,\
    \ 3, 4]);\necho is_sorted([1, 2, 2, 2, 3, 4]);\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '111111'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpff3f1zm8.php:47\n\
    Stack trace:\n#0 /tmp/tmpff3f1zm8.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpff3f1zm8.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst_sorted = $lst;\n\tsort($lst_sorted);\n\t\
    if ($lst == $lst_sorted) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t\
    }\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n  \
    \  return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbd4ygzz1.php:40\n\
    Stack trace:\n#0 /tmp/tmpbd4ygzz1.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpbd4ygzz1.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\
    \tif ($lst[$i] > $lst[$i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwhubze6l.php:39\n\
    Stack trace:\n#0 /tmp/tmpwhubze6l.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpwhubze6l.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$sorted = $lst;\n\tsort($sorted);\n\treturn $lst == $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5_2w_g74.php:37\n\
    Stack trace:\n#0 /tmp/tmp5_2w_g74.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp5_2w_g74.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1])\
    \ {\n\t\t\t$sorted = false;\n\t\t}\n\t}\n\treturn $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpoaq8fnyv.php:38\n\
    Stack trace:\n#0 /tmp/tmpoaq8fnyv.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpoaq8fnyv.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst2 = $lst;\n\tsort($lst2);\n\tif($lst == $lst2){\n\
    \t\treturn \"True\";\n\t}else{\n\t\treturn \"False\";\n\t}\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 'True'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn86r6x3t.php:31\n\
    Stack trace:\n#0 /tmp/tmpn86r6x3t.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpn86r6x3t.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$duplicate = false;\n\tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i]\
    \ > $lst[$i + 1]) {\n\t\t\t$sorted = false;\n\t\t}\n\t\tif ($lst[$i] == $lst[$i\
    \ + 1]) {\n\t\t\t$duplicate = true;\n\t\t}\n\t}\n\tif ($duplicate) {\n\t\t$sorted\
    \ = false;\n\t}\n\treturn $sorted;\n}\necho is_sorted([1, 2, 3, 4, 5]);\necho\
    \ is_sorted([1, 3, 2, 4, 5]);\necho is_sorted([1, 2, 3, 4, 5, 6]);\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]);\necho is_sorted([1, 3, 2, 4, 5, 6, 7]);\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\necho is_sorted([1, 2, 2, 2, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '111'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_laoh2ku.php:53\n\
    Stack trace:\n#0 /tmp/tmp_laoh2ku.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp_laoh2ku.php\
    \ on line 53\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst2 = $lst;\n\tsort($lst2);\n\tif ($lst ===\
    \ $lst2) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpq3tlkkxy.php:40\n\
    Stack trace:\n#0 /tmp/tmpq3tlkkxy.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpq3tlkkxy.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$prev = $lst[0];\n\tfor ($i = 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i]\
    \ < $prev) {\n\t\t\t$sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$prev = $lst[$i];\n\
    \t}\n\treturn $sorted;\n}\necho is_sorted([1, 2, 3, 4, 5]);\necho is_sorted([1,\
    \ 3, 2, 4, 5]);\necho is_sorted([1, 2, 3, 4, 5, 6]);\necho is_sorted([1, 2, 3,\
    \ 4, 5, 6, 7]);\necho is_sorted([1, 3, 2, 4, 5, 6, 7]);\necho is_sorted([1, 2,\
    \ 2, 3, 3, 4]);\necho is_sorted([1, 2, 2, 2, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '11111'
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmpsi858lae.php on line 16\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsi858lae.php:47\n\
    Stack trace:\n#0 /tmp/tmpsi858lae.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpsi858lae.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$prev = $lst[0];\n\tforeach ($lst as $num) {\n\t\tif ($num < $prev) {\n\t\t\t\
    $sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$prev = $num;\n\t}\n\treturn $sorted;\n\
    }\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmp8cotxfo8.php on line 16\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8cotxfo8.php:41\n\
    Stack trace:\n#0 /tmp/tmp8cotxfo8.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp8cotxfo8.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = $lst;\n\
    \tsort($sorted);\n\t$count = count($lst);\n\tfor ($i = 0; $i < $count; $i++) {\n\
    \t\tif ($lst[$i] != $sorted[$i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ true;\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4bpjpi3_.php:40\n\
    Stack trace:\n#0 /tmp/tmp4bpjpi3_.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp4bpjpi3_.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst2 = $lst;\n\t\
    sort($lst2);\n\tif ($lst == $lst2) {\n\t\treturn true;\n\t} else {\n\t\treturn\
    \ false;\n\t}\n}\necho is_sorted([1, 2, 2, 3, 3, 4]) . \"\\n\";\necho is_sorted([1,\
    \ 2, 2, 2, 3, 4]) . \"\\n\";\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpaeesmjnu.php:39\n\
    Stack trace:\n#0 /tmp/tmpaeesmjnu.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpaeesmjnu.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst2 = $lst;\n\tsort($lst2);\n\tif($lst == $lst2){\n\
    \t\treturn true;\n\t}\n\treturn false;\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxu7brmzv.php:39\n\
    Stack trace:\n#0 /tmp/tmpxu7brmzv.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpxu7brmzv.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$sorted = $lst;\n\tsort($sorted);\n\treturn $lst == $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdn_tlykl.php:37\n\
    Stack trace:\n#0 /tmp/tmpdn_tlykl.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpdn_tlykl.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$sorted = $lst;\n\tsort($sorted);\n\tif ($lst\
    \ == $sorted) {\n\t\treturn true;\n\t}\n\treturn false;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpoby98umy.php:39\n\
    Stack trace:\n#0 /tmp/tmpoby98umy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpoby98umy.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst2 = $lst;\n\tsort($lst2);\n\tif ($lst == $lst2)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]) . \"\\n\";\necho is_sorted([1, 2, 2, 2, 3, 4]) . \"\\n\";\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpimf2f_6k.php:41\n\
    Stack trace:\n#0 /tmp/tmpimf2f_6k.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpimf2f_6k.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$len = count($lst);\n\tfor ($i = 0; $i < $len\
    \ - 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1]) {\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\treturn true;\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpv864_jrg.php:40\n\
    Stack trace:\n#0 /tmp/tmpv864_jrg.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpv864_jrg.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$sorted = $lst;\n\tsort($sorted);\n\tif ($lst\
    \ == $sorted) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho\
    \ is_sorted([5]);\necho is_sorted([1, 2, 3, 4, 5]);\necho is_sorted([1, 3, 2,\
    \ 4, 5]);\necho is_sorted([1, 2, 3, 4, 5, 6]);\necho is_sorted([1, 2, 3, 4, 5,\
    \ 6, 7]);\necho is_sorted([1, 3, 2, 4, 5, 6, 7]);\necho is_sorted([1, 2, 2, 3,\
    \ 3, 4]);\necho is_sorted([1, 2, 2, 2, 3, 4]);\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '111111'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6wrs9krq.php:47\n\
    Stack trace:\n#0 /tmp/tmp6wrs9krq.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp6wrs9krq.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$count = count($lst);\n\
    \t$i = 0;\n\twhile($i < $count - 1){\n\t\tif($lst[$i] > $lst[$i + 1]){\n\t\t\t\
    return false;\n\t\t}\n\t\t$i++;\n\t}\n\treturn true;\n}\necho is_sorted([1, 2,\
    \ 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpb_jjz505.php:40\n\
    Stack trace:\n#0 /tmp/tmpb_jjz505.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpb_jjz505.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$result = true;\n\
    \t$lst_length = count($lst);\n\tfor ($i = 0; $i < $lst_length; $i++) {\n\t\tif\
    \ ($i + 1 < $lst_length) {\n\t\t\tif ($lst[$i] > $lst[$i + 1]) {\n\t\t\t\t$result\
    \ = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn $result;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpat9t8b88.php:42\n\
    Stack trace:\n#0 /tmp/tmpat9t8b88.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpat9t8b88.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = array_unique($lst);\n\
    \tsort($sorted);\n\tif ($lst == $sorted) {\n\t\treturn true;\n\t} else {\n\t\t\
    return false;\n\t}\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqkch7q6a.php:40\n\
    Stack trace:\n#0 /tmp/tmpqkch7q6a.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpqkch7q6a.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst2 = $lst;\n\tsort($lst2);\n\tif ($lst == $lst2)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpx5pn8qk4.php:40\n\
    Stack trace:\n#0 /tmp/tmpx5pn8qk4.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpx5pn8qk4.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$flag = true;\n\t\
    for($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif($lst[$i] > $lst[$i + 1]) {\n\
    \t\t\t$flag = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn $flag;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzrgfwsmw.php:39\n\
    Stack trace:\n#0 /tmp/tmpzrgfwsmw.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpzrgfwsmw.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst2 = $lst;\n\tsort($lst2);\n\tif($lst == $lst2){\n\
    \t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n}\necho is_sorted([1, 2, 2,\
    \ 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpztcle32j.php:40\n\
    Stack trace:\n#0 /tmp/tmpztcle32j.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpztcle32j.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$last = $lst[0];\n\tfor ($i = 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i]\
    \ < $last) {\n\t\t\t$sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$last = $lst[$i];\n\
    \t}\n\treturn $sorted;\n}\necho is_sorted([1, 2, 3, 4, 5]) . \"\\n\";\necho is_sorted([1,\
    \ 3, 2, 4, 5]) . \"\\n\";\necho is_sorted([1, 2, 2, 3, 3, 4]) . \"\\n\";\necho\
    \ is_sorted([1, 2, 2, 2, 3, 4]) . \"\\n\";\nfunction candidate(...$args) {\n \
    \   return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmpgh0gpgew.php on line 16\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgh0gpgew.php:44\n\
    Stack trace:\n#0 /tmp/tmpgh0gpgew.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpgh0gpgew.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $sorted = true;\n\
    \  $prev = $lst[0];\n  for ($i = 1; $i < count($lst); $i++) {\n    if ($lst[$i]\
    \ < $prev) {\n      $sorted = false;\n      break;\n    }\n    $prev = $lst[$i];\n\
    \  }\n  return $sorted;\n}\necho is_sorted([1, 2, 3, 4, 5]) . \"\\n\";\necho is_sorted([1,\
    \ 3, 2, 4, 5]) . \"\\n\";\necho is_sorted([1, 2, 2, 3, 3, 4]) . \"\\n\";\necho\
    \ is_sorted([1, 2, 2, 2, 3, 4]) . \"\\n\";\nfunction candidate(...$args) {\n \
    \   return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmp8_skq6ow.php on line 16\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8_skq6ow.php:44\n\
    Stack trace:\n#0 /tmp/tmp8_skq6ow.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp8_skq6ow.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$sorted = $lst;\n\tsort($sorted);\n\treturn $lst == $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxf7q6p_4.php:37\n\
    Stack trace:\n#0 /tmp/tmpxf7q6p_4.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpxf7q6p_4.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst2 = $lst;\n\tsort($lst2);\n\tif ($lst == $lst2)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp38hwy9ux.php:40\n\
    Stack trace:\n#0 /tmp/tmp38hwy9ux.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp38hwy9ux.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst1 = $lst;\n\tsort($lst1);\n\tif ($lst == $lst1)\
    \ {\n\t\treturn \"True\";\n\t} else {\n\t\treturn \"False\";\n\t}\n}\necho is_sorted([5]);\n\
    echo \"<br>\";\necho is_sorted([1, 2, 3, 4, 5]);\necho \"<br>\";\necho is_sorted([1,\
    \ 3, 2, 4, 5]);\necho \"<br>\";\necho is_sorted([1, 2, 3, 4, 5, 6]);\necho \"\
    <br>\";\necho is_sorted([1, 2, 3, 4, 5, 6, 7]);\necho \"<br>\";\necho is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]);\necho \"<br>\";\necho is_sorted([1, 2, 2, 3, 3, 4]);\necho\
    \ \"<br>\";\necho is_sorted([1, 2, 2, 2, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: True<br>True<br>False<br>True<br>True<br>False<br>True<br>True
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp80sdk5ce.php:45\n\
    Stack trace:\n#0 /tmp/tmp80sdk5ce.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp80sdk5ce.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$last = $lst[0];\n\tfor ($i = 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i]\
    \ < $last) {\n\t\t\t$sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$last = $lst[$i];\n\
    \t}\n\treturn $sorted;\n}\necho is_sorted([5]) . \"\\n\";\necho is_sorted([1,\
    \ 2, 3, 4, 5]) . \"\\n\";\necho is_sorted([1, 3, 2, 4, 5]) . \"\\n\";\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6]) . \"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6, 7]) . \"\\n\"\
    ;\necho is_sorted([1, 3, 2, 4, 5, 6, 7]) . \"\\n\";\necho is_sorted([1, 2, 2,\
    \ 3, 3, 4]) . \"\\n\";\necho is_sorted([1, 2, 2, 2, 3, 4]) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1\n1\n\n1\n1\n\n1\n1\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmpkaehjspe.php on line 16\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkaehjspe.php:48\n\
    Stack trace:\n#0 /tmp/tmpkaehjspe.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpkaehjspe.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$arr = array_unique($lst);\n\
    \tsort($arr);\n\tif($arr == $lst){\n\t\treturn \"True\";\n\t}else{\n\t\treturn\
    \ \"False\";\n\t}\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 'False'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbdtn9bkv.php:29\n\
    Stack trace:\n#0 /tmp/tmpbdtn9bkv.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpbdtn9bkv.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \t$prev = $lst[0];\n\tforeach ($lst as $key => $value) {\n\t\tif ($value < $prev)\
    \ {\n\t\t\t$sorted = false;\n\t\t}\n\t\t$prev = $value;\n\t}\n\treturn $sorted;\n\
    }\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmp5hivm5jt.php on line 16\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5hivm5jt.php:40\n\
    Stack trace:\n#0 /tmp/tmp5hivm5jt.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp5hivm5jt.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1])\
    \ {\n\t\t\t$sorted = false;\n\t\t}\n\t}\n\treturn $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpo96arxdb.php:38\n\
    Stack trace:\n#0 /tmp/tmpo96arxdb.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpo96arxdb.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1])\
    \ {\n\t\t\t$sorted = false;\n\t\t}\n\t}\n\treturn $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzev4987k.php:38\n\
    Stack trace:\n#0 /tmp/tmpzev4987k.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpzev4987k.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$temp = $lst;\n\t\
    sort($temp);\n\tif ($temp == $lst) {\n\t\treturn true;\n\t} else {\n\t\treturn\
    \ false;\n\t}\n}\necho is_sorted([5]);\necho is_sorted([1, 2, 3, 4, 5]);\necho\
    \ is_sorted([1, 3, 2, 4, 5]);\necho is_sorted([1, 2, 3, 4, 5, 6]);\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]);\necho is_sorted([1, 3, 2, 4, 5, 6, 7]);\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\necho is_sorted([1, 2, 2, 2, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '111111'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5x3enz19.php:45\n\
    Stack trace:\n#0 /tmp/tmp5x3enz19.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp5x3enz19.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$newArr = [];\n\t\
    foreach ($lst as $key => $value) {\n\t\tif (!in_array($value, $newArr)) {\n\t\t\
    \t$newArr[] = $value;\n\t\t}\n\t}\n\tif (count($newArr) == count($lst)) {\n\t\t\
    sort($lst);\n\t\tif ($lst == $newArr) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn\
    \ false;\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6dkln3ov.php:46\n\
    Stack trace:\n#0 /tmp/tmp6dkln3ov.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp6dkln3ov.php\
    \ on line 46\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$count = count($lst);\n\
    \tfor ($i = 0; $i < $count; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1]) {\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn true;\n}\necho is_sorted([1, 2, 3, 4, 5]);\n\
    echo \"<br>\";\necho is_sorted([1, 3, 2, 4, 5]);\necho \"<br>\";\necho is_sorted([1,\
    \ 2, 3, 4, 5, 6]);\necho \"<br>\";\necho is_sorted([1, 2, 3, 4, 5, 6, 7]);\necho\
    \ \"<br>\";\necho is_sorted([1, 3, 2, 4, 5, 6, 7]);\necho \"<br>\";\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\necho \"<br>\";\necho is_sorted([1, 2, 2, 2, 3, 4]);\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: <br><br><br><br><br><br>
  stderr: "PHP Warning:  Undefined array key 5 in /tmp/tmphn1t2j_6.php on line 17\n\
    PHP Warning:  Undefined array key 6 in /tmp/tmphn1t2j_6.php on line 17\nPHP Warning:\
    \  Undefined array key 7 in /tmp/tmphn1t2j_6.php on line 17\nPHP Warning:  Undefined\
    \ array key 6 in /tmp/tmphn1t2j_6.php on line 17\nPHP Warning:  Undefined array\
    \ key 6 in /tmp/tmphn1t2j_6.php on line 17\nPHP Warning:  Undefined array key\
    \ 1 in /tmp/tmphn1t2j_6.php on line 17\nPHP Fatal error:  Uncaught Exception:\
    \ Test failed! in /tmp/tmphn1t2j_6.php:41\nStack trace:\n#0 /tmp/tmphn1t2j_6.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmphn1t2j_6.php on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i > 0) {\n\t\t\tif ($lst[$i]\
    \ < $lst[$i - 1]) {\n\t\t\t\t$sorted = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn $sorted;\n\
    }\necho is_sorted([5]) . \"\\n\";\necho is_sorted([1, 2, 3, 4, 5]) . \"\\n\";\n\
    echo is_sorted([1, 3, 2, 4, 5]) . \"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6])\
    \ . \"\\n\";\necho is_sorted([1, 2, 3, 4, 5, 6, 7]) . \"\\n\";\necho is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) . \"\\n\";\necho is_sorted([1, 2, 2, 3, 3, 4]) . \"\\n\"\
    ;\necho is_sorted([1, 2, 2, 2, 3, 4]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n\n1\n1\n\n1\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5z746f7r.php:47\n\
    Stack trace:\n#0 /tmp/tmp5z746f7r.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp5z746f7r.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$sorted = true;\n\
    \tfor ($i = 0; $i < count($lst) - 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1])\
    \ {\n\t\t\t$sorted = false;\n\t\t}\n\t}\n\treturn $sorted;\n}\necho is_sorted([1,\
    \ 2, 2, 3, 3, 4]);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9mtv2cmo.php:38\n\
    Stack trace:\n#0 /tmp/tmp9mtv2cmo.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp9mtv2cmo.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$lst_sorted = $lst;\n\tsort($lst_sorted);\n\t\
    if ($lst == $lst_sorted) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t\
    }\n}\necho is_sorted([5]) . \"<br>\";\necho is_sorted([1, 2, 3, 4, 5]) . \"<br>\"\
    ;\necho is_sorted([1, 3, 2, 4, 5]) . \"<br>\";\necho is_sorted([1, 2, 3, 4, 5,\
    \ 6]) . \"<br>\";\necho is_sorted([1, 2, 3, 4, 5, 6, 7]) . \"<br>\";\necho is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) . \"<br>\";\necho is_sorted([1, 2, 2, 3, 3, 4]) . \"<br>\"\
    ;\necho is_sorted([1, 2, 2, 2, 3, 4]) . \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 1<br>1<br><br>1<br>1<br><br>1<br>1<br>
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7b8y5l7v.php:47\n\
    Stack trace:\n#0 /tmp/tmp7b8y5l7v.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp7b8y5l7v.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n\t$arr = array_unique($lst);\n\
    \t$arr2 = $lst;\n\tsort($arr2);\n\tif ($arr == $arr2) {\n\t\treturn true;\n\t\
    } else {\n\t\treturn false;\n\t}\n}\necho is_sorted([1, 2, 2, 3, 3, 4]);\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2h7qj6sy.php:41\n\
    Stack trace:\n#0 /tmp/tmp2h7qj6sy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp2h7qj6sy.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
