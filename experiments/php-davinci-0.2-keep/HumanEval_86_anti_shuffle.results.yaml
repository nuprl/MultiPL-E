name: HumanEval_86_anti_shuffle
language: php
results:
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n     \
    \   $new_arr[] = implode('', str_split($word));\n    }\n    $new_arr = array_map(function($word)\
    \ {\n        $arr = str_split($word);\n        sort($arr);\n        return implode('',\
    \ $arr);\n    }, $new_arr);\n    return implode(' ', $new_arr);\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwfdjirn_.php:26\n\
    Stack trace:\n#0 /tmp/tmpwfdjirn_.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpwfdjirn_.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6ry9vgqu.php:26\n\
    Stack trace:\n#0 /tmp/tmp6ry9vgqu.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp6ry9vgqu.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $newArr = [];\n  foreach ($arr as $word) {\n    $newArr[] = str_split($word);\n\
    \    sort($newArr[count($newArr) - 1]);\n    $newArr[count($newArr) - 1] = implode('',\
    \ $newArr[count($newArr) - 1]);\n  }\n  return implode(' ', $newArr);\n}\n\necho\
    \ anti_shuffle('Hi') . \"\\n\";\necho anti_shuffle('hello') . \"\\n\";\necho anti_shuffle('Hello\
    \ World!!!') . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi\nehllo\nHello !!!Wdlor\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $res = [];\n  foreach ($arr as $word) {\n    $res[] = implode('',\
    \ str_split($word));\n  }\n  return implode(' ', $res);\n}\n\necho anti_shuffle('Hi')\
    \ . \"\\n\";\necho anti_shuffle('hello') . \"\\n\";\necho anti_shuffle('Hello\
    \ World!!!') . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi\nhello\nHello World!!!\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplruxgece.php:29\n\
    Stack trace:\n#0 /tmp/tmplruxgece.php(37): test()\n#1 {main}\n  thrown in /tmp/tmplruxgece.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[] = implode('',\
    \ str_split($word));\n  }\n  return implode(' ', $new_arr);\n}\n\necho anti_shuffle('Hi');\n\
    echo '<br>';\necho anti_shuffle('hello');\necho '<br>';\necho anti_shuffle('Hello\
    \ World!!!');\necho '<br>';\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: Hi<br>hello<br>Hello World!!!<br>
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpusiyr4ik.php:33\n\
    Stack trace:\n#0 /tmp/tmpusiyr4ik.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpusiyr4ik.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[] = str_split($word);\n\
    \  }\n  foreach ($new_arr as $key => $word) {\n    sort($new_arr[$key]);\n  }\n\
    \  $new_str = '';\n  foreach ($new_arr as $key => $word) {\n    $new_str .= implode('',\
    \ $new_arr[$key]) . ' ';\n  }\n  return trim($new_str);\n}\necho anti_shuffle('Hi');\n\
    echo anti_shuffle('hello');\necho anti_shuffle('Hello World!!!');\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: HiehlloHello !!!Wdlor
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $result = [];\n    foreach ($arr as $word) {\n      \
    \  $result[] = implode('', str_split($word));\n    }\n    return implode(' ',\
    \ $result);\n}\n\necho anti_shuffle('Hi') . PHP_EOL;\necho anti_shuffle('hello')\
    \ . PHP_EOL;\necho anti_shuffle('Hello World!!!') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nhello\nHello World!!!\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxa3m21rm.php:29\n\
    Stack trace:\n#0 /tmp/tmpxa3m21rm.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpxa3m21rm.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = anti_shuffle_word($word);\n    }\n    return implode(' ', $result);\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmpk91ya90u.php:15\nStack trace:\n#0 /tmp/tmpk91ya90u.php(21): anti_shuffle()\n\
    #1 /tmp/tmpk91ya90u.php(25): candidate()\n#2 /tmp/tmpk91ya90u.php(34): test()\n\
    #3 {main}\n  thrown in /tmp/tmpk91ya90u.php on line 15\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = explode('\
    \ ', $s);\n    $s = array_map(function($s) {\n        $s = str_split($s);\n  \
    \      sort($s);\n        return implode('', $s);\n    }, $s);\n    return implode('\
    \ ', $s);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\n\necho anti_shuffle('Hi') . \"\\n\";\necho anti_shuffle('hello')\
    \ . \"\\n\";\necho anti_shuffle('Hello World!!!') . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nhello\nHello World!!!\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0p_m5tg6.php:29\n\
    Stack trace:\n#0 /tmp/tmp0p_m5tg6.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp0p_m5tg6.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1rrv5ans.php:26\n\
    Stack trace:\n#0 /tmp/tmp1rrv5ans.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp1rrv5ans.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\n\necho anti_shuffle('Hi') . \"\\n\";\necho anti_shuffle('hello')\
    \ . \"\\n\";\necho anti_shuffle('Hello World!!!') . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nhello\nHello World!!!\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8xiwov_5.php:29\n\
    Stack trace:\n#0 /tmp/tmp8xiwov_5.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp8xiwov_5.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $newArr = [];\n  foreach ($arr as $word) {\n    $newArr[] = str_split($word);\n\
    \    sort($newArr[count($newArr) - 1]);\n    $newArr[count($newArr) - 1] = implode('',\
    \ $newArr[count($newArr) - 1]);\n  }\n  return implode(' ', $newArr);\n}\n\necho\
    \ anti_shuffle('Hi') . PHP_EOL;\necho anti_shuffle('hello') . PHP_EOL;\necho anti_shuffle('Hello\
    \ World!!!') . PHP_EOL;\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi\nehllo\nHello !!!Wdlor\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6qu3zcl8.php:26\n\
    Stack trace:\n#0 /tmp/tmp6qu3zcl8.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp6qu3zcl8.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $result = [];\n  foreach ($arr as $word) {\n    $result[] = implode('',\
    \ str_split($word));\n  }\n  return implode(' ', $result);\n}\n\necho anti_shuffle('Hi')\
    \ . PHP_EOL;\necho anti_shuffle('hello') . PHP_EOL;\necho anti_shuffle('Hello\
    \ World!!!') . PHP_EOL;\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi\nhello\nHello World!!!\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpq_m_aare.php:29\n\
    Stack trace:\n#0 /tmp/tmpq_m_aare.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpq_m_aare.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = '';\n    foreach ($words as $word) {\n  \
    \      $result .= implode('', str_split($word)) . ' ';\n    }\n    return trim($result);\n\
    }\n\necho anti_shuffle('Hi');\necho '<br>';\necho anti_shuffle('hello');\necho\
    \ '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello\
    \ World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\n\
    echo anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\n\
    echo '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello\
    \ World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\n\
    echo anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\n\
    echo '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello\
    \ World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\n\
    echo anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\n\
    echo '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello\
    \ World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\n\
    echo anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\n\
    echo '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello\
    \ World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\n\
    echo anti_\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \",\" or \";\" in /tmp/tmpbi0zh0ku.php on line 71\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $result = '';\n    foreach ($arr as $word) {\n      \
    \  $result .= implode('', str_split($word)) . ' ';\n    }\n    return trim($result);\n\
    }\n\necho anti_shuffle('Hi') . PHP_EOL;\necho anti_shuffle('hello') . PHP_EOL;\n\
    echo anti_shuffle('Hello World!!!') . PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi\nhello\nHello World!!!\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpba8jj2am.php:29\n\
    Stack trace:\n#0 /tmp/tmpba8jj2am.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpba8jj2am.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[] = implode('',\
    \ str_split($word));\n  }\n  $new_arr = array_map('sort_str', $new_arr);\n  return\
    \ implode(' ', $new_arr);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: array_map(): Argument #1 ($callback)\
    \ must be a valid callback or null, function \"sort_str\" not found or invalid\
    \ function name in /tmp/tmpybd3pkr2.php:17\nStack trace:\n#0 /tmp/tmpybd3pkr2.php(17):\
    \ array_map()\n#1 /tmp/tmpybd3pkr2.php(22): anti_shuffle()\n#2 /tmp/tmpybd3pkr2.php(26):\
    \ candidate()\n#3 /tmp/tmpybd3pkr2.php(35): test()\n#4 {main}\n  thrown in /tmp/tmpybd3pkr2.php\
    \ on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  $new_words = [];\n  foreach ($words as $word) {\n    $new_words[]\
    \ = anti_shuffle_word($word);\n  }\n  return implode(' ', $new_words);\n}\n\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmpbgf8ege1.php:15\nStack trace:\n#0 /tmp/tmpbgf8ege1.php(21): anti_shuffle()\n\
    #1 /tmp/tmpbgf8ege1.php(25): candidate()\n#2 /tmp/tmpbgf8ege1.php(34): test()\n\
    #3 {main}\n  thrown in /tmp/tmpbgf8ege1.php on line 15\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = '';\n    foreach ($words as $word) {\n  \
    \      $result .= implode('', str_split($word)) . ' ';\n    }\n    return trim($result);\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuhm50cbz.php:26\n\
    Stack trace:\n#0 /tmp/tmpuhm50cbz.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpuhm50cbz.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  foreach ($arr as $key => $value) {\n    $arr[$key] = str_split($value);\n\
    \    sort($arr[$key]);\n    $arr[$key] = implode('', $arr[$key]);\n  }\n  return\
    \ implode(' ', $arr);\n}\n\necho anti_shuffle('Hi') . PHP_EOL;\necho anti_shuffle('hello')\
    \ . PHP_EOL;\necho anti_shuffle('Hello World!!!') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nehllo\nHello !!!Wdlor\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpp3ljneao.php:26\n\
    Stack trace:\n#0 /tmp/tmpp3ljneao.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpp3ljneao.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[] = implode('',\
    \ str_split($word));\n  }\n  $new_arr = array_map('sort_word', $new_arr);\n  return\
    \ implode(' ', $new_arr);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: array_map(): Argument #1 ($callback)\
    \ must be a valid callback or null, function \"sort_word\" not found or invalid\
    \ function name in /tmp/tmpe1_0w8zo.php:17\nStack trace:\n#0 /tmp/tmpe1_0w8zo.php(17):\
    \ array_map()\n#1 /tmp/tmpe1_0w8zo.php(22): anti_shuffle()\n#2 /tmp/tmpe1_0w8zo.php(26):\
    \ candidate()\n#3 /tmp/tmpe1_0w8zo.php(35): test()\n#4 {main}\n  thrown in /tmp/tmpe1_0w8zo.php\
    \ on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $s = explode('\
    \ ', $s);\n  foreach ($s as $key => $value) {\n    $s[$key] = str_split($value);\n\
    \    sort($s[$key]);\n    $s[$key] = implode('', $s[$key]);\n  }\n  return implode('\
    \ ', $s);\n}\necho anti_shuffle('Hi') . \"\\n\";\necho anti_shuffle('hello') .\
    \ \"\\n\";\necho anti_shuffle('Hello World!!!') . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nehllo\nHello !!!Wdlor\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\n\necho anti_shuffle('Hi') . \"\\n\";\necho anti_shuffle('hello')\
    \ . \"\\n\";\necho anti_shuffle('Hello World!!!') . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nhello\nHello World!!!\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqes2_f2i.php:29\n\
    Stack trace:\n#0 /tmp/tmpqes2_f2i.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpqes2_f2i.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  $new_words = [];\n  foreach ($words as $word) {\n    $new_words[]\
    \ = implode(array_map('chr', sort(array_map('ord', str_split($word)))));\n  }\n\
    \  return implode(' ', $new_words);\n}\n\necho anti_shuffle('Hi') . PHP_EOL;\n\
    echo anti_shuffle('hello') . PHP_EOL;\necho anti_shuffle('Hello World!!!') . PHP_EOL;\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Notice:  Only variables should be passed by reference in /tmp/tmp79v1xjrh.php\
    \ on line 15\nPHP Fatal error:  Uncaught TypeError: array_map(): Argument #2 ($array)\
    \ must be of type array, bool given in /tmp/tmp79v1xjrh.php:15\nStack trace:\n\
    #0 /tmp/tmp79v1xjrh.php(15): array_map()\n#1 /tmp/tmp79v1xjrh.php(20): anti_shuffle()\n\
    #2 {main}\n  thrown in /tmp/tmp79v1xjrh.php on line 15\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = explode('\
    \ ', $s);\n    foreach ($s as $key => $value) {\n        $s[$key] = str_split($value);\n\
    \        sort($s[$key]);\n        $s[$key] = implode('', $s[$key]);\n    }\n \
    \   return implode(' ', $s);\n}\necho anti_shuffle('Hi');\necho anti_shuffle('hello');\n\
    echo anti_shuffle('Hello World!!!');\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: HiehlloHello !!!Wdlor
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n     \
    \   $new_arr[] = implode('', str_split($word));\n    }\n    $new_arr = array_map(function($word)\
    \ {\n        sort($word);\n        return implode('', $word);\n    }, $new_arr);\n\
    \    return implode(' ', $new_arr);\n}\n\nfunction candidate(...$args) {\n   \
    \ return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: sort(): Argument #1 ($array) must\
    \ be of type array, string given in /tmp/tmpxuqmw43u.php:18\nStack trace:\n#0\
    \ /tmp/tmpxuqmw43u.php(18): sort()\n#1 [internal function]: {closure}()\n#2 /tmp/tmpxuqmw43u.php(20):\
    \ array_map()\n#3 /tmp/tmpxuqmw43u.php(25): anti_shuffle()\n#4 /tmp/tmpxuqmw43u.php(29):\
    \ candidate()\n#5 /tmp/tmpxuqmw43u.php(38): test()\n#6 {main}\n  thrown in /tmp/tmpxuqmw43u.php\
    \ on line 18\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = '';\n    foreach ($words as $word) {\n  \
    \      $result .= implode('', str_split($word)) . ' ';\n    }\n    return $result;\n\
    }\n\necho anti_shuffle('Hi') . PHP_EOL;\necho anti_shuffle('hello') . PHP_EOL;\n\
    echo anti_shuffle('Hello World!!!') . PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi \nhello \nHello World!!! \n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpu5rabc49.php:28\n\
    Stack trace:\n#0 /tmp/tmpu5rabc49.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpu5rabc49.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = explode('\
    \ ', $s);\n    $result = [];\n    foreach ($s as $word) {\n        $result[] =\
    \ implode('', str_split($word));\n    }\n    return implode(' ', $result);\n}\n\
    \necho anti_shuffle('Hi');\necho anti_shuffle('hello');\necho anti_shuffle('Hello\
    \ World!!!');\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: HihelloHello World!!!
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpoaxcspa6.php:29\n\
    Stack trace:\n#0 /tmp/tmpoaxcspa6.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpoaxcspa6.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[] = implode('',\
    \ str_split($word));\n  }\n  return implode(' ', $new_arr);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpv9kc33tl.php:26\n\
    Stack trace:\n#0 /tmp/tmpv9kc33tl.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpv9kc33tl.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $newArr = [];\n    foreach ($arr as $word) {\n      \
    \  $newArr[] = str_split($word);\n        sort($newArr[count($newArr) - 1]);\n\
    \        $newArr[count($newArr) - 1] = implode('', $newArr[count($newArr) - 1]);\n\
    \    }\n    return implode(' ', $newArr);\n}\n\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = explode('\
    \ ', $s);\n    foreach ($s as $key => $value) {\n        $s[$key] = str_split($value);\n\
    \        sort($s[$key]);\n        $s[$key] = implode('', $s[$key]);\n    }\n \
    \   return implode(' ', $s);\n}\n\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  $result = [];\n  foreach ($words as $word) {\n    $result[]\
    \ = implode('', str_split($word));\n  }\n  return implode(' ', $result);\n}\n\n\
    echo anti_shuffle('Hi');\necho anti_shuffle('hello');\necho anti_shuffle('Hello\
    \ World!!!');\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: HihelloHello World!!!
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1ofe9ugj.php:29\n\
    Stack trace:\n#0 /tmp/tmp1ofe9ugj.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp1ofe9ugj.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $result = [];\n    foreach ($arr as $word) {\n      \
    \  $result[] = join('', str_split($word));\n    }\n    return join(' ', $result);\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpf0wdg96r.php:26\n\
    Stack trace:\n#0 /tmp/tmpf0wdg96r.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpf0wdg96r.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsiqmmo56.php:26\n\
    Stack trace:\n#0 /tmp/tmpsiqmmo56.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpsiqmmo56.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $new_words);\n}\n\necho anti_shuffle('Hi') . \"\\n\";\necho anti_shuffle('hello')\
    \ . \"\\n\";\necho anti_shuffle('Hello World!!!') . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nhello\nHello World!!!\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1749g_ja.php:29\n\
    Stack trace:\n#0 /tmp/tmp1749g_ja.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp1749g_ja.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[] = str_split($word);\n\
    \  }\n  foreach ($new_arr as $key => $value) {\n    sort($new_arr[$key]);\n  }\n\
    \  foreach ($new_arr as $key => $value) {\n    $new_arr[$key] = implode('', $new_arr[$key]);\n\
    \  }\n  return implode(' ', $new_arr);\n}\n\necho anti_shuffle('Hi');\necho '<br>';\n\
    echo anti_shuffle('hello');\necho '<br>';\necho anti_shuffle('Hello World!!!');\n\
    echo '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello\
    \ World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\n\
    echo anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\n\
    echo '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello\
    \ World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\n\
    echo anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\n\
    echo '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello\
    \ World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\n\
    echo anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\n\
    echo '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello\
    \ World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\n\
    echo anti_\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \",\" or \";\" in /tmp/tmpnzcsojzj.php on line 69\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $newArr = [];\n    foreach ($arr as $word) {\n      \
    \  $newArr[] = implode(array_unique(str_split($word)));\n    }\n    return implode('\
    \ ', $newArr);\n}\n\necho anti_shuffle('Hi') . PHP_EOL;\necho anti_shuffle('hello')\
    \ . PHP_EOL;\necho anti_shuffle('Hello World!!!') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nhelo\nHelo World!\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcm86zwkz.php:29\n\
    Stack trace:\n#0 /tmp/tmpcm86zwkz.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpcm86zwkz.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $newArr = [];\n    foreach ($arr as $key => $value) {\n\
    \        $newArr[] = str_split($value);\n        sort($newArr[$key]);\n      \
    \  $newArr[$key] = implode('', $newArr[$key]);\n    }\n    return implode(' ',\
    \ $newArr);\n}\n\necho anti_shuffle('Hello World!!!');\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: Hello !!!Wdlor
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfyygu6bs.php:26\n\
    Stack trace:\n#0 /tmp/tmpfyygu6bs.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpfyygu6bs.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $s = explode('\
    \ ', $s);\n  foreach ($s as $key => $value) {\n    $s[$key] = str_split($value);\n\
    \    sort($s[$key]);\n    $s[$key] = implode('', $s[$key]);\n  }\n  return implode('\
    \ ', $s);\n}\necho anti_shuffle('Hello World!!!');\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: Hello !!!Wdlor
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmph8c_fjai.php:26\n\
    Stack trace:\n#0 /tmp/tmph8c_fjai.php(34): test()\n#1 {main}\n  thrown in /tmp/tmph8c_fjai.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[] = str_split($word);\n\
    \  }\n  foreach ($new_arr as $key => $word) {\n    sort($new_arr[$key]);\n  }\n\
    \  foreach ($new_arr as $key => $word) {\n    $new_arr[$key] = implode('', $new_arr[$key]);\n\
    \  }\n  return implode(' ', $new_arr);\n}\n\necho anti_shuffle('Hi') . \"\\n\"\
    ;\necho anti_shuffle('hello') . \"\\n\";\necho anti_shuffle('Hello World!!!')\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi\nehllo\nHello !!!Wdlor\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $res = [];\n    foreach ($arr as $word) {\n        $res[]\
    \ = implode('', str_split($word));\n    }\n    return implode(' ', $res);\n}\n\
    \nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjmi7a2ac.php:26\n\
    Stack trace:\n#0 /tmp/tmpjmi7a2ac.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpjmi7a2ac.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = explode('\
    \ ', $s);\n    foreach ($s as $key => $value) {\n        $s[$key] = str_split($value);\n\
    \        sort($s[$key]);\n        $s[$key] = implode('', $s[$key]);\n    }\n \
    \   return implode(' ', $s);\n}\necho anti_shuffle('Hello World!!!');\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: Hello !!!Wdlor
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  $result = [];\n  foreach ($words as $word) {\n    $result[]\
    \ = implode('', str_split($word));\n  }\n  return implode(' ', $result);\n}\n\n\
    echo anti_shuffle('Hi') . \"\\n\";\necho anti_shuffle('hello') . \"\\n\";\necho\
    \ anti_shuffle('Hello World!!!') . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi\nhello\nHello World!!!\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyzqzj3lk.php:29\n\
    Stack trace:\n#0 /tmp/tmpyzqzj3lk.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpyzqzj3lk.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\n\necho anti_shuffle('Hi') . PHP_EOL;\necho anti_shuffle('hello')\
    \ . PHP_EOL;\necho anti_shuffle('Hello World!!!') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nhello\nHello World!!!\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmpwqird_.php:29\n\
    Stack trace:\n#0 /tmp/tmpmpwqird_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpmpwqird_.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  $result = [];\n  foreach ($words as $word) {\n    $chars\
    \ = str_split($word);\n    sort($chars);\n    $result[] = implode('', $chars);\n\
    \  }\n  return implode(' ', $result);\n}\n\necho anti_shuffle('Hi') . \"\\n\"\
    ;\necho anti_shuffle('hello') . \"\\n\";\necho anti_shuffle('Hello World!!!')\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi\nehllo\nHello !!!Wdlor\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $res = [];\n    foreach ($arr as $word) {\n        $res[]\
    \ = implode('', str_split($word));\n    }\n    return implode(' ', $res);\n}\n\
    \nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbps5yrp2.php:26\n\
    Stack trace:\n#0 /tmp/tmpbps5yrp2.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbps5yrp2.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\n\necho anti_shuffle('Hi');\necho anti_shuffle('hello');\necho\
    \ anti_shuffle('Hello World!!!');\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: HihelloHello World!!!
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpy0pl85v6.php:29\n\
    Stack trace:\n#0 /tmp/tmpy0pl85v6.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpy0pl85v6.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $new_words);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp92x5yd0e.php:26\n\
    Stack trace:\n#0 /tmp/tmp92x5yd0e.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp92x5yd0e.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  $result = [];\n  foreach ($words as $word) {\n    $result[]\
    \ = implode('', str_split($word));\n  }\n  return implode(' ', $result);\n}\n\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8lwseh3f.php:26\n\
    Stack trace:\n#0 /tmp/tmp8lwseh3f.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp8lwseh3f.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $res = '';\n    foreach ($arr as $word) {\n        $res\
    \ .= implode('', str_split($word)) . ' ';\n    }\n    return trim($res);\n}\n\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpw8mcsqqm.php:26\n\
    Stack trace:\n#0 /tmp/tmpw8mcsqqm.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpw8mcsqqm.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = explode('\
    \ ', $s);\n    $s = array_map(function($x) {\n        $x = str_split($x);\n  \
    \      sort($x);\n        return implode('', $x);\n    }, $s);\n    return implode('\
    \ ', $s);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  $new_words = [];\n  foreach ($words as $word) {\n    $new_words[]\
    \ = str_split($word);\n    sort($new_words[count($new_words) - 1]);\n    $new_words[count($new_words)\
    \ - 1] = implode('', $new_words[count($new_words) - 1]);\n  }\n  return implode('\
    \ ', $new_words);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $result = [];\n    foreach ($arr as $word) {\n      \
    \  $result[] = join('', str_split($word));\n    }\n    return join(' ', $result);\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6lblc5zy.php:26\n\
    Stack trace:\n#0 /tmp/tmp6lblc5zy.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp6lblc5zy.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    foreach ($arr as $key => $value) {\n        $arr[$key]\
    \ = str_split($value);\n        sort($arr[$key]);\n        $arr[$key] = implode('',\
    \ $arr[$key]);\n    }\n    return implode(' ', $arr);\n}\necho anti_shuffle('Hello\
    \ World!!!');\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: Hello !!!Wdlor
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $result = [];\n    foreach ($arr as $word) {\n      \
    \  $result[] = str_split($word);\n        sort($result[count($result) - 1]);\n\
    \        $result[count($result) - 1] = implode('', $result[count($result) - 1]);\n\
    \    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $res = [];\n    foreach ($arr as $word) {\n        $res[]\
    \ = implode('', str_split($word));\n    }\n    return implode(' ', $res);\n}\n\
    \nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpa4ujfr3a.php:26\n\
    Stack trace:\n#0 /tmp/tmpa4ujfr3a.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpa4ujfr3a.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  foreach ($words as $key => $word) {\n    $words[$key] =\
    \ str_split($word);\n    sort($words[$key]);\n    $words[$key] = implode('', $words[$key]);\n\
    \  }\n  return implode(' ', $words);\n}\n\necho anti_shuffle('Hi');\necho anti_shuffle('hello');\n\
    echo anti_shuffle('Hello World!!!');\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: HiehlloHello !!!Wdlor
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[] = str_split($word);\n\
    \  }\n  foreach ($new_arr as $key => $value) {\n    sort($new_arr[$key]);\n  }\n\
    \  foreach ($new_arr as $key => $value) {\n    $new_arr[$key] = implode($new_arr[$key]);\n\
    \  }\n  return implode(' ', $new_arr);\n}\n\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  $result = [];\n  foreach ($words as $word) {\n    $result[]\
    \ = join('', str_split($word));\n  }\n  return join(' ', $result);\n}\n\necho\
    \ anti_shuffle('Hi') . \"\\n\";\necho anti_shuffle('hello') . \"\\n\";\necho anti_shuffle('Hello\
    \ World!!!') . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi\nhello\nHello World!!!\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9ueuiyf_.php:29\n\
    Stack trace:\n#0 /tmp/tmp9ueuiyf_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp9ueuiyf_.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $result = '';\n    foreach ($arr as $word) {\n      \
    \  $result .= implode('', str_split($word)) . ' ';\n    }\n    return trim($result);\n\
    }\n\necho anti_shuffle('Hello World!!!');\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: Hello World!!!
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5h2q_j0e.php:27\n\
    Stack trace:\n#0 /tmp/tmp5h2q_j0e.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp5h2q_j0e.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = explode('\
    \ ', $s);\n    $s = array_map(function($word) {\n        $word = str_split($word);\n\
    \        sort($word);\n        return implode('', $word);\n    }, $s);\n    return\
    \ implode(' ', $s);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $new_arr = [];\n    foreach ($arr as $key => $value)\
    \ {\n        $new_arr[] = str_split($value);\n        sort($new_arr[$key]);\n\
    \        $new_arr[$key] = implode($new_arr[$key]);\n    }\n    return implode('\
    \ ', $new_arr);\n}\n\necho anti_shuffle('Hi') . PHP_EOL;\necho anti_shuffle('hello')\
    \ . PHP_EOL;\necho anti_shuffle('Hello World!!!') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nehllo\nHello !!!Wdlor\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[] = implode(array_unique(str_split($word)));\n\
    \  }\n  return implode(' ', $new_arr);\n}\n\necho anti_shuffle('Hi') . PHP_EOL;\n\
    echo anti_shuffle('hello') . PHP_EOL;\necho anti_shuffle('Hello World!!!') . PHP_EOL;\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nhelo\nHelo World!\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvcqzfyau.php:29\n\
    Stack trace:\n#0 /tmp/tmpvcqzfyau.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpvcqzfyau.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $new_words);\n}\n\necho anti_shuffle('Hi') . \"\\n\";\necho anti_shuffle('hello')\
    \ . \"\\n\";\necho anti_shuffle('Hello World!!!') . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nhello\nHello World!!!\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_iwotazg.php:29\n\
    Stack trace:\n#0 /tmp/tmp_iwotazg.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp_iwotazg.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $result = '';\n    foreach ($arr as $word) {\n      \
    \  $result .= implode('', str_split($word)) . ' ';\n    }\n    return $result;\n\
    }\necho anti_shuffle('Hello World!!!');\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: 'Hello World!!! '
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4k2kmyi2.php:25\n\
    Stack trace:\n#0 /tmp/tmp4k2kmyi2.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp4k2kmyi2.php\
    \ on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = '';\n    foreach ($words as $word) {\n  \
    \      $result .= implode('', str_split($word)) . ' ';\n    }\n    return trim($result);\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpt_ilx3ku.php:26\n\
    Stack trace:\n#0 /tmp/tmpt_ilx3ku.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpt_ilx3ku.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = '';\n    foreach ($words as $word) {\n  \
    \      $result .= implode('', str_split($word)) . ' ';\n    }\n    return $result;\n\
    }\n\necho anti_shuffle('Hi') . PHP_EOL;\necho anti_shuffle('hello') . PHP_EOL;\n\
    echo anti_shuffle('Hello World!!!') . PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi \nhello \nHello World!!! \n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpv_iic1i_.php:28\n\
    Stack trace:\n#0 /tmp/tmpv_iic1i_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpv_iic1i_.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\n\necho anti_shuffle('Hi') . PHP_EOL;\necho anti_shuffle('hello')\
    \ . PHP_EOL;\necho anti_shuffle('Hello World!!!') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nhello\nHello World!!!\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqjia3xif.php:29\n\
    Stack trace:\n#0 /tmp/tmpqjia3xif.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpqjia3xif.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $newArr = [];\n  foreach ($arr as $word) {\n    $newArr[] = implode(array_unique(str_split($word)));\n\
    \  }\n  return implode(' ', $newArr);\n}\n\necho anti_shuffle('Hi');\necho anti_shuffle('hello');\n\
    echo anti_shuffle('Hello World!!!');\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: HiheloHelo World!
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpic3suzjt.php:29\n\
    Stack trace:\n#0 /tmp/tmpic3suzjt.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpic3suzjt.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5mr2vhwi.php:26\n\
    Stack trace:\n#0 /tmp/tmp5mr2vhwi.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp5mr2vhwi.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp99gt0xve.php:26\n\
    Stack trace:\n#0 /tmp/tmp99gt0xve.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp99gt0xve.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $result = '';\n    foreach ($arr as $word) {\n      \
    \  $result .= implode('', str_split($word)) . ' ';\n    }\n    return $result;\n\
    }\necho anti_shuffle('Hello World!!!');\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: 'Hello World!!! '
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkr4ar0h6.php:25\n\
    Stack trace:\n#0 /tmp/tmpkr4ar0h6.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpkr4ar0h6.php\
    \ on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $new_words);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5n0imlhp.php:26\n\
    Stack trace:\n#0 /tmp/tmp5n0imlhp.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp5n0imlhp.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $result = '';\n  foreach ($arr as $word) {\n    $result .= str_split($word);\n\
    \    sort($result);\n    $result = implode($result);\n    $result .= ' ';\n  }\n\
    \  return $result;\n}\necho anti_shuffle('Hi');\necho anti_shuffle('hello');\n\
    echo anti_shuffle('Hello World!!!');\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Array to string conversion in /tmp/tmpa6cq5qbw.php on line\
    \ 15\nPHP Fatal error:  Uncaught TypeError: sort(): Argument #1 ($array) must\
    \ be of type array, string given in /tmp/tmpa6cq5qbw.php:16\nStack trace:\n#0\
    \ /tmp/tmpa6cq5qbw.php(16): sort()\n#1 /tmp/tmpa6cq5qbw.php(22): anti_shuffle()\n\
    #2 {main}\n  thrown in /tmp/tmpa6cq5qbw.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $newArr = [];\n  foreach ($arr as $word) {\n    $newArr[] = str_split($word);\n\
    \    sort($newArr[count($newArr) - 1]);\n    $newArr[count($newArr) - 1] = implode('',\
    \ $newArr[count($newArr) - 1]);\n  }\n  return implode(' ', $newArr);\n}\n\necho\
    \ anti_shuffle('Hi') . \"\\n\";\necho anti_shuffle('hello') . \"\\n\";\necho anti_shuffle('Hello\
    \ World!!!') . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi\nehllo\nHello !!!Wdlor\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  $new_words = [];\n  foreach ($words as $word) {\n    $new_words[]\
    \ = anti_shuffle_word($word);\n  }\n  return implode(' ', $new_words);\n}\n\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmpg96x8__p.php:15\nStack trace:\n#0 /tmp/tmpg96x8__p.php(21): anti_shuffle()\n\
    #1 /tmp/tmpg96x8__p.php(25): candidate()\n#2 /tmp/tmpg96x8__p.php(34): test()\n\
    #3 {main}\n  thrown in /tmp/tmpg96x8__p.php on line 15\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    foreach ($words as $key => $word) {\n        $words[$key]\
    \ = anti_shuffle_word($word);\n    }\n    return implode(' ', $words);\n}\n\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmp259en3le.php:14\nStack trace:\n#0 /tmp/tmp259en3le.php(20): anti_shuffle()\n\
    #1 /tmp/tmp259en3le.php(24): candidate()\n#2 /tmp/tmp259en3le.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmp259en3le.php on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = '';\n    foreach ($words as $word) {\n  \
    \      $result .= implode('', str_split($word)) . ' ';\n    }\n    return $result;\n\
    }\n\necho anti_shuffle('Hi') . PHP_EOL;\necho anti_shuffle('hello') . PHP_EOL;\n\
    echo anti_shuffle('Hello World!!!') . PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi \nhello \nHello World!!! \n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0p4ykqxq.php:28\n\
    Stack trace:\n#0 /tmp/tmp0p4ykqxq.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp0p4ykqxq.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $newArr = [];\n    foreach ($arr as $value) {\n     \
    \   $newArr[] = str_split($value);\n        sort($newArr[count($newArr) - 1]);\n\
    \        $newArr[count($newArr) - 1] = implode('', $newArr[count($newArr) - 1]);\n\
    \    }\n    return implode(' ', $newArr);\n}\n\necho anti_shuffle('Hi');\necho\
    \ '<br>';\necho anti_shuffle('hello');\necho '<br>';\necho anti_shuffle('Hello\
    \ World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\n\
    echo anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\n\
    echo '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello\
    \ World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\n\
    echo anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\n\
    echo '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello\
    \ World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\n\
    echo anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\n\
    echo '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello\
    \ World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\n\
    echo anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\n\
    echo '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \",\" or \";\" in /tmp/tmpq4zsq4qx.php on line 67\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjiijr7wy.php:26\n\
    Stack trace:\n#0 /tmp/tmpjiijr7wy.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpjiijr7wy.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n     \
    \   $new_arr[] = implode('', str_split($word));\n    }\n    $new_arr = array_map(function($word)\
    \ {\n        return implode('', str_split($word));\n    }, $arr);\n    sort($new_arr);\n\
    \    return implode(' ', $new_arr);\n}\n\necho anti_shuffle('Hi') . PHP_EOL;\n\
    echo anti_shuffle('hello') . PHP_EOL;\necho anti_shuffle('Hello World!!!') . PHP_EOL;\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nhello\nHello World!!!\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpq2aal4ag.php:33\n\
    Stack trace:\n#0 /tmp/tmpq2aal4ag.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpq2aal4ag.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\n\necho anti_shuffle('Hi') . PHP_EOL;\necho anti_shuffle('hello')\
    \ . PHP_EOL;\necho anti_shuffle('Hello World!!!') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nhello\nHello World!!!\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxshlnfiv.php:29\n\
    Stack trace:\n#0 /tmp/tmpxshlnfiv.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpxshlnfiv.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n     \
    \   $new_arr[] = implode('', str_split($word));\n    }\n    return implode(' ',\
    \ $new_arr);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjwnbnj00.php:26\n\
    Stack trace:\n#0 /tmp/tmpjwnbnj00.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpjwnbnj00.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[] = implode('',\
    \ str_split($word));\n  }\n  $new_arr = array_map('sort_str', $new_arr);\n  return\
    \ implode(' ', $new_arr);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: array_map(): Argument #1 ($callback)\
    \ must be a valid callback or null, function \"sort_str\" not found or invalid\
    \ function name in /tmp/tmp60gqtbn9.php:17\nStack trace:\n#0 /tmp/tmp60gqtbn9.php(17):\
    \ array_map()\n#1 /tmp/tmp60gqtbn9.php(22): anti_shuffle()\n#2 /tmp/tmp60gqtbn9.php(26):\
    \ candidate()\n#3 /tmp/tmp60gqtbn9.php(35): test()\n#4 {main}\n  thrown in /tmp/tmp60gqtbn9.php\
    \ on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsx1soyy2.php:26\n\
    Stack trace:\n#0 /tmp/tmpsx1soyy2.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpsx1soyy2.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_words_string =\
    \ [];\n    foreach ($new_words as $word) {\n        $new_words_string[] = implode('',\
    \ $word);\n    }\n    return implode(' ', $new_words_string);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\n\necho anti_shuffle('Hi') . \"\\n\";\necho anti_shuffle('hello')\
    \ . \"\\n\";\necho anti_shuffle('Hello World!!!') . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nhello\nHello World!!!\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpi3ybtimr.php:29\n\
    Stack trace:\n#0 /tmp/tmpi3ybtimr.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpi3ybtimr.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $result = [];\n    foreach ($arr as $word) {\n      \
    \  $result[] = implode('', str_split($word));\n    }\n    return implode(' ',\
    \ $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9dbeew3n.php:26\n\
    Stack trace:\n#0 /tmp/tmp9dbeew3n.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp9dbeew3n.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = '';\n    foreach ($words as $word) {\n  \
    \      $result .= implode('', str_split($word)) . ' ';\n    }\n    return trim($result);\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_g4msvv7.php:26\n\
    Stack trace:\n#0 /tmp/tmp_g4msvv7.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp_g4msvv7.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpeqty6bc6.php:26\n\
    Stack trace:\n#0 /tmp/tmpeqty6bc6.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpeqty6bc6.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  $result = [];\n  foreach ($words as $word) {\n    $result[]\
    \ = implode('', str_split($word));\n  }\n  return implode(' ', $result);\n}\n\n\
    echo anti_shuffle('Hi') . \"\\n\";\necho anti_shuffle('hello') . \"\\n\";\necho\
    \ anti_shuffle('Hello World!!!') . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi\nhello\nHello World!!!\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprkithq9h.php:29\n\
    Stack trace:\n#0 /tmp/tmprkithq9h.php(37): test()\n#1 {main}\n  thrown in /tmp/tmprkithq9h.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\n\necho anti_shuffle('Hi') . PHP_EOL;\necho anti_shuffle('hello')\
    \ . PHP_EOL;\necho anti_shuffle('Hello World!!!') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nhello\nHello World!!!\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkpo0p9xp.php:29\n\
    Stack trace:\n#0 /tmp/tmpkpo0p9xp.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpkpo0p9xp.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\necho anti_shuffle('Hi') . \"\\n\";\necho anti_shuffle('hello')\
    \ . \"\\n\";\necho anti_shuffle('Hello World!!!') . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nhello\nHello World!!!\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvgpfejv8.php:28\n\
    Stack trace:\n#0 /tmp/tmpvgpfejv8.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpvgpfejv8.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[] = implode('',\
    \ str_split($word));\n  }\n  return implode(' ', $new_arr);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpm11yik41.php:26\n\
    Stack trace:\n#0 /tmp/tmpm11yik41.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpm11yik41.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n     \
    \   $new_arr[] = implode('', str_split($word));\n    }\n    $new_arr = array_map(function($word)\
    \ {\n        $arr = str_split($word);\n        sort($arr);\n        return implode('',\
    \ $arr);\n    }, $new_arr);\n    return implode(' ', $new_arr);\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfiqyqh_c.php:26\n\
    Stack trace:\n#0 /tmp/tmpfiqyqh_c.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpfiqyqh_c.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_4lpmsxg.php:26\n\
    Stack trace:\n#0 /tmp/tmp_4lpmsxg.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp_4lpmsxg.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $result = '';\n    foreach ($arr as $word) {\n      \
    \  $result .= implode('', str_split($word)) . ' ';\n    }\n    return trim($result);\n\
    }\n\necho anti_shuffle('Hi') . PHP_EOL;\necho anti_shuffle('hello') . PHP_EOL;\n\
    echo anti_shuffle('Hello World!!!') . PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi\nhello\nHello World!!!\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyvybtgvv.php:29\n\
    Stack trace:\n#0 /tmp/tmpyvybtgvv.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpyvybtgvv.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[] = implode(str_split($word));\n\
    \  }\n  return implode(' ', $new_arr);\n}\n\necho anti_shuffle('Hi') . PHP_EOL;\n\
    echo anti_shuffle('hello') . PHP_EOL;\necho anti_shuffle('Hello World!!!') . PHP_EOL;\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nhello\nHello World!!!\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpe3zf3yga.php:29\n\
    Stack trace:\n#0 /tmp/tmpe3zf3yga.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpe3zf3yga.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = explode('\
    \ ', $s);\n    $s = array_map(function($word) {\n        $word = str_split($word);\n\
    \        sort($word);\n        return implode('', $word);\n    }, $s);\n    return\
    \ implode(' ', $s);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  $result = '';\n  foreach ($words as $word) {\n    $result\
    \ .= implode('', str_split($word)) . ' ';\n  }\n  return trim($result);\n}\n\n\
    echo anti_shuffle('Hi');\necho anti_shuffle('hello');\necho anti_shuffle('Hello\
    \ World!!!');\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: HihelloHello World!!!
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8repg038.php:29\n\
    Stack trace:\n#0 /tmp/tmp8repg038.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp8repg038.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = explode('\
    \ ', $s);\n    $result = '';\n    foreach ($s as $word) {\n        $result .=\
    \ implode('', str_split($word)) . ' ';\n    }\n    return $result;\n}\n\necho\
    \ anti_shuffle('Hi') . PHP_EOL;\necho anti_shuffle('hello') . PHP_EOL;\necho anti_shuffle('Hello\
    \ World!!!') . PHP_EOL;\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi \nhello \nHello World!!! \n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2kqgeih2.php:28\n\
    Stack trace:\n#0 /tmp/tmp2kqgeih2.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp2kqgeih2.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n     \
    \   $new_arr[] = implode('', str_split($word));\n    }\n    $new_arr = array_map(function($word)\
    \ {\n        $arr = str_split($word);\n        sort($arr);\n        return implode('',\
    \ $arr);\n    }, $new_arr);\n    return implode(' ', $new_arr);\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  $new_words = [];\n  foreach ($words as $word) {\n    $new_words[]\
    \ = implode(str_split($word));\n  }\n  return implode(' ', $new_words);\n}\n\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwtk179os.php:26\n\
    Stack trace:\n#0 /tmp/tmpwtk179os.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpwtk179os.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n     \
    \   $new_arr[] = implode('', str_split($word));\n    }\n    sort($new_arr);\n\
    \    return implode(' ', $new_arr);\n}\n\nfunction candidate(...$args) {\n   \
    \ return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpssmhf9mw.php:27\n\
    Stack trace:\n#0 /tmp/tmpssmhf9mw.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpssmhf9mw.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    foreach ($arr as $key => $value) {\n        $arr[$key]\
    \ = str_split($value);\n        sort($arr[$key]);\n        $arr[$key] = implode('',\
    \ $arr[$key]);\n    }\n    return implode(' ', $arr);\n}\necho anti_shuffle('Hello\
    \ World!!!');\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: Hello !!!Wdlor
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $res = [];\n    foreach ($arr as $word) {\n        $res[]\
    \ = join('', str_split($word));\n    }\n    return join(' ', $res);\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmj9jxkiz.php:26\n\
    Stack trace:\n#0 /tmp/tmpmj9jxkiz.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpmj9jxkiz.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $result = '';\n    foreach ($arr as $word) {\n      \
    \  $result .= str_split($word);\n        sort($result);\n        $result .= '\
    \ ';\n    }\n    return $result;\n}\n\necho anti_shuffle('Hi');\necho anti_shuffle('hello');\n\
    echo anti_shuffle('Hello World!!!');\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Array to string conversion in /tmp/tmpzr1ppiy6.php on line\
    \ 15\nPHP Fatal error:  Uncaught TypeError: sort(): Argument #1 ($array) must\
    \ be of type array, string given in /tmp/tmpzr1ppiy6.php:16\nStack trace:\n#0\
    \ /tmp/tmpzr1ppiy6.php(16): sort()\n#1 /tmp/tmpzr1ppiy6.php(22): anti_shuffle()\n\
    #2 {main}\n  thrown in /tmp/tmpzr1ppiy6.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $s = explode('\
    \ ', $s);\n  $result = [];\n  foreach ($s as $word) {\n    $result[] = implode('',\
    \ str_split($word));\n  }\n  return implode(' ', $result);\n}\n\necho anti_shuffle('Hi')\
    \ . PHP_EOL;\necho anti_shuffle('hello') . PHP_EOL;\necho anti_shuffle('Hello\
    \ World!!!') . PHP_EOL;\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi\nhello\nHello World!!!\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpc7je_m3b.php:29\n\
    Stack trace:\n#0 /tmp/tmpc7je_m3b.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpc7je_m3b.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $result = '';\n    foreach ($arr as $word) {\n      \
    \  $result .= implode('', str_split($word)) . ' ';\n    }\n    return $result;\n\
    }\n\necho anti_shuffle('Hi') . PHP_EOL;\necho anti_shuffle('hello') . PHP_EOL;\n\
    echo anti_shuffle('Hello World!!!') . PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi \nhello \nHello World!!! \n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpauigatzf.php:28\n\
    Stack trace:\n#0 /tmp/tmpauigatzf.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpauigatzf.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n\t$words =\
    \ explode(' ', $s);\n\t$result = [];\n\tforeach ($words as $word) {\n\t\t$result[]\
    \ = implode('', str_split($word));\n\t}\n\treturn implode(' ', $result);\n}\n\n\
    echo anti_shuffle('Hi') . \"\\n\";\necho anti_shuffle('hello') . \"\\n\";\necho\
    \ anti_shuffle('Hello World!!!') . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi\nhello\nHello World!!!\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcwmas8qs.php:29\n\
    Stack trace:\n#0 /tmp/tmpcwmas8qs.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpcwmas8qs.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  foreach ($arr as $key => $value) {\n    $arr[$key] = str_split($value);\n\
    \    sort($arr[$key]);\n    $arr[$key] = implode('', $arr[$key]);\n  }\n  return\
    \ implode(' ', $arr);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = explode('\
    \ ', $s);\n    foreach ($s as $key => $value) {\n        $s[$key] = str_split($value);\n\
    \        sort($s[$key]);\n        $s[$key] = implode('', $s[$key]);\n    }\n \
    \   return implode(' ', $s);\n}\n\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  $result = [];\n  foreach ($words as $word) {\n    $chars\
    \ = str_split($word);\n    sort($chars);\n    $result[] = implode('', $chars);\n\
    \  }\n  return implode(' ', $result);\n}\n\nfunction candidate(...$args) {\n \
    \   return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[] = str_split($word);\n\
    \  }\n  foreach ($new_arr as $key => $value) {\n    sort($new_arr[$key]);\n  }\n\
    \  foreach ($new_arr as $key => $value) {\n    $new_arr[$key] = implode('', $new_arr[$key]);\n\
    \  }\n  return implode(' ', $new_arr);\n}\n\necho anti_shuffle('Hi');\necho '<br>';\n\
    echo anti_shuffle('hello');\necho '<br>';\necho anti_shuffle('Hello World!!!');\n\
    echo '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello\
    \ World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\n\
    echo anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\n\
    echo '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello\
    \ World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\n\
    echo anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\n\
    echo '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello\
    \ World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\n\
    echo anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\n\
    echo '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello\
    \ World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\n\
    echo anti_\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \",\" or \";\" in /tmp/tmpumvr9mo5.php on line 69\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $result = '';\n    foreach ($arr as $word) {\n      \
    \  $result .= implode('', str_split($word)) . ' ';\n    }\n    return $result;\n\
    }\n\necho anti_shuffle('Hi') . PHP_EOL;\necho anti_shuffle('hello') . PHP_EOL;\n\
    echo anti_shuffle('Hello World!!!') . PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi \nhello \nHello World!!! \n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppqz2su_y.php:28\n\
    Stack trace:\n#0 /tmp/tmppqz2su_y.php(37): test()\n#1 {main}\n  thrown in /tmp/tmppqz2su_y.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\n\necho anti_shuffle('Hi');\necho anti_shuffle('hello');\necho\
    \ anti_shuffle('Hello World!!!');\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: HihelloHello World!!!
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprxsaro_j.php:29\n\
    Stack trace:\n#0 /tmp/tmprxsaro_j.php(37): test()\n#1 {main}\n  thrown in /tmp/tmprxsaro_j.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $res = '';\n    foreach ($arr as $word) {\n        $res\
    \ .= str_split($word);\n        sort($res);\n        $res .= ' ';\n    }\n   \
    \ return $res;\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Array to string conversion in /tmp/tmpxpkq0eb6.php on line\
    \ 15\nPHP Fatal error:  Uncaught TypeError: sort(): Argument #1 ($array) must\
    \ be of type array, string given in /tmp/tmpxpkq0eb6.php:16\nStack trace:\n#0\
    \ /tmp/tmpxpkq0eb6.php(16): sort()\n#1 /tmp/tmpxpkq0eb6.php(23): anti_shuffle()\n\
    #2 /tmp/tmpxpkq0eb6.php(27): candidate()\n#3 /tmp/tmpxpkq0eb6.php(36): test()\n\
    #4 {main}\n  thrown in /tmp/tmpxpkq0eb6.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $result = [];\n    foreach ($arr as $word) {\n      \
    \  $result[] = implode('', str_split($word));\n    }\n    return implode(' ',\
    \ $result);\n}\n\necho anti_shuffle('Hi') . PHP_EOL;\necho anti_shuffle('hello')\
    \ . PHP_EOL;\necho anti_shuffle('Hello World!!!') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nhello\nHello World!!!\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpszg8449g.php:29\n\
    Stack trace:\n#0 /tmp/tmpszg8449g.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpszg8449g.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $new_arr = [];\n    foreach ($arr as $value) {\n    \
    \    $new_arr[] = str_split($value);\n    }\n    foreach ($new_arr as $key =>\
    \ $value) {\n        sort($new_arr[$key]);\n    }\n    $new_arr2 = [];\n    foreach\
    \ ($new_arr as $value) {\n        $new_arr2[] = implode('', $value);\n    }\n\
    \    return implode(' ', $new_arr2);\n}\n\necho anti_shuffle('Hi') . PHP_EOL;\n\
    echo anti_shuffle('hello') . PHP_EOL;\necho anti_shuffle('Hello World!!!') . PHP_EOL;\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nehllo\nHello !!!Wdlor\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $s = explode('\
    \ ', $s);\n  foreach ($s as $key => $value) {\n    $s[$key] = str_split($value);\n\
    \    sort($s[$key]);\n    $s[$key] = implode('', $s[$key]);\n  }\n  return implode('\
    \ ', $s);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = explode('\
    \ ', $s);\n    foreach ($s as $key => $value) {\n        $s[$key] = str_split($value);\n\
    \        sort($s[$key]);\n        $s[$key] = implode('', $s[$key]);\n    }\n \
    \   return implode(' ', $s);\n}\n\necho anti_shuffle('Hi');\necho '<br>';\necho\
    \ anti_shuffle('hello');\necho '<br>';\necho anti_shuffle('Hello World!!!');\n\
    echo '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello\
    \ World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\n\
    echo anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\n\
    echo '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello\
    \ World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\n\
    echo anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\n\
    echo '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello\
    \ World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\n\
    echo anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\n\
    echo '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello\
    \ World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\n\
    echo anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\n\
    echo '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: Hi<br>ehllo<br>Hello !!!Wdlor<br>Hello !!!Wdlor<br>Hello !!!Wdlor<br>Hello
    !!!Wdlor<br>Hello !!!Wdlor<br>Hello !!!Wdlor<br>Hello !!!Wdlor<br>Hello !!!Wdlor<br>Hello
    !!!Wdlor<br>Hello !!!Wdlor<br>Hello !!!Wdlor<br>Hello !!!Wdlor<br>Hello !!!Wdlor<br>Hello
    !!!Wdlor<br>Hello !!!Wdlor<br>Hello !!!Wdlor<br>Hello !!!Wdlor<br>Hello !!!Wdlor<br>Hello
    !!!Wdlor<br>Hello !!!Wdlor<br>Hello !!!Wdlor<br>Hello !!!Wdlor<br>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = '';\n    foreach ($words as $word) {\n  \
    \      $result .= implode('', str_split($word)) . ' ';\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2dkq3alw.php:25\n\
    Stack trace:\n#0 /tmp/tmp2dkq3alw.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp2dkq3alw.php\
    \ on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\n\necho anti_shuffle('Hi') . PHP_EOL;\necho anti_shuffle('hello')\
    \ . PHP_EOL;\necho anti_shuffle('Hello World!!!') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nhello\nHello World!!!\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplnqqtxqm.php:29\n\
    Stack trace:\n#0 /tmp/tmplnqqtxqm.php(37): test()\n#1 {main}\n  thrown in /tmp/tmplnqqtxqm.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $result = '';\n  foreach ($arr as $word) {\n    $result .= str_split($word);\n\
    \    sort($result);\n    $result = implode('', $result);\n    $result .= ' ';\n\
    \  }\n  return $result;\n}\necho anti_shuffle('Hello World!!!');\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Array to string conversion in /tmp/tmp7ebtw613.php on line\
    \ 15\nPHP Fatal error:  Uncaught TypeError: sort(): Argument #1 ($array) must\
    \ be of type array, string given in /tmp/tmp7ebtw613.php:16\nStack trace:\n#0\
    \ /tmp/tmp7ebtw613.php(16): sort()\n#1 /tmp/tmp7ebtw613.php(22): anti_shuffle()\n\
    #2 {main}\n  thrown in /tmp/tmp7ebtw613.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\n\necho anti_shuffle('Hi');\necho '<br>';\necho anti_shuffle('hello');\n\
    echo '<br>';\necho anti_shuffle('Hello World!!!');\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: Hi<br>hello<br>Hello World!!!
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmper1i55g0.php:31\n\
    Stack trace:\n#0 /tmp/tmper1i55g0.php(39): test()\n#1 {main}\n  thrown in /tmp/tmper1i55g0.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[] = implode('',\
    \ str_split($word));\n  }\n  return implode(' ', $new_arr);\n}\necho anti_shuffle('Hi');\n\
    echo anti_shuffle('hello');\necho anti_shuffle('Hello World!!!');\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: HihelloHello World!!!
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn5vyjwdf.php:28\n\
    Stack trace:\n#0 /tmp/tmpn5vyjwdf.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpn5vyjwdf.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $newArr = [];\n  foreach ($arr as $word) {\n    $newArr[] = str_split($word);\n\
    \    sort($newArr[count($newArr) - 1]);\n    $newArr[count($newArr) - 1] = implode('',\
    \ $newArr[count($newArr) - 1]);\n  }\n  return implode(' ', $newArr);\n}\n\necho\
    \ anti_shuffle('Hi') . \"\\n\";\necho anti_shuffle('hello') . \"\\n\";\necho anti_shuffle('Hello\
    \ World!!!') . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi\nehllo\nHello !!!Wdlor\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $res = [];\n    foreach ($arr as $word) {\n        $res[]\
    \ = implode('', str_split($word));\n    }\n    return implode(' ', $res);\n}\n\
    \nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpijtrw129.php:26\n\
    Stack trace:\n#0 /tmp/tmpijtrw129.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpijtrw129.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n     \
    \   $new_arr[] = implode('', str_split($word));\n    }\n    $new_arr = array_map(function($word)\
    \ {\n        $arr = str_split($word);\n        sort($arr);\n        return implode('',\
    \ $arr);\n    }, $new_arr);\n    return implode(' ', $new_arr);\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbll4gdg4.php:26\n\
    Stack trace:\n#0 /tmp/tmpbll4gdg4.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbll4gdg4.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $newArr = [];\n  foreach ($arr as $word) {\n    $newArr[] = implode('',\
    \ str_split($word));\n  }\n  $newStr = implode(' ', $newArr);\n  return $newStr;\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_ws36_x5.php:27\n\
    Stack trace:\n#0 /tmp/tmp_ws36_x5.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp_ws36_x5.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    foreach ($arr as $key => $value) {\n        $arr[$key]\
    \ = str_split($value);\n        sort($arr[$key]);\n        $arr[$key] = implode('',\
    \ $arr[$key]);\n    }\n    return implode(' ', $arr);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpatfbi6g8.php:26\n\
    Stack trace:\n#0 /tmp/tmpatfbi6g8.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpatfbi6g8.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  $result = [];\n  foreach ($words as $word) {\n    $result[]\
    \ = implode('', str_split($word));\n  }\n  return implode(' ', $result);\n}\n\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbx1lafsi.php:26\n\
    Stack trace:\n#0 /tmp/tmpbx1lafsi.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbx1lafsi.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  $result = [];\n  foreach ($words as $word) {\n    $result[]\
    \ = implode('', str_split($word));\n  }\n  return implode(' ', $result);\n}\n\n\
    echo anti_shuffle('Hi') . \"\\n\";\necho anti_shuffle('hello') . \"\\n\";\necho\
    \ anti_shuffle('Hello World!!!') . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi\nhello\nHello World!!!\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsobvt2di.php:29\n\
    Stack trace:\n#0 /tmp/tmpsobvt2di.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpsobvt2di.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $res = '';\n    foreach ($arr as $word) {\n        $res\
    \ .= str_split($word);\n        sort($res);\n        $res .= ' ';\n    }\n   \
    \ return $res;\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Array to string conversion in /tmp/tmp4rb5ibzz.php on line\
    \ 15\nPHP Fatal error:  Uncaught TypeError: sort(): Argument #1 ($array) must\
    \ be of type array, string given in /tmp/tmp4rb5ibzz.php:16\nStack trace:\n#0\
    \ /tmp/tmp4rb5ibzz.php(16): sort()\n#1 /tmp/tmp4rb5ibzz.php(23): anti_shuffle()\n\
    #2 /tmp/tmp4rb5ibzz.php(27): candidate()\n#3 /tmp/tmp4rb5ibzz.php(36): test()\n\
    #4 {main}\n  thrown in /tmp/tmp4rb5ibzz.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $result = '';\n    foreach ($arr as $word) {\n      \
    \  $result .= implode('', str_split($word)) . ' ';\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwzzidacg.php:25\n\
    Stack trace:\n#0 /tmp/tmpwzzidacg.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpwzzidacg.php\
    \ on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpy94r5cit.php:26\n\
    Stack trace:\n#0 /tmp/tmpy94r5cit.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpy94r5cit.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $result = '';\n    foreach ($arr as $word) {\n      \
    \  $result .= str_split($word);\n        sort($result);\n        $result .= '\
    \ ';\n    }\n    return $result;\n}\n\necho anti_shuffle('Hi') . PHP_EOL;\necho\
    \ anti_shuffle('hello') . PHP_EOL;\necho anti_shuffle('Hello World!!!') . PHP_EOL;\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Array to string conversion in /tmp/tmpq0ut_n08.php on line\
    \ 15\nPHP Fatal error:  Uncaught TypeError: sort(): Argument #1 ($array) must\
    \ be of type array, string given in /tmp/tmpq0ut_n08.php:16\nStack trace:\n#0\
    \ /tmp/tmpq0ut_n08.php(16): sort()\n#1 /tmp/tmpq0ut_n08.php(22): anti_shuffle()\n\
    #2 {main}\n  thrown in /tmp/tmpq0ut_n08.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $result = [];\n    foreach ($arr as $word) {\n      \
    \  $result[] = implode('', str_split($word));\n    }\n    return implode(' ',\
    \ $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpijvtzm5l.php:26\n\
    Stack trace:\n#0 /tmp/tmpijvtzm5l.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpijvtzm5l.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptfzcbdi5.php:26\n\
    Stack trace:\n#0 /tmp/tmptfzcbdi5.php(34): test()\n#1 {main}\n  thrown in /tmp/tmptfzcbdi5.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\n\necho anti_shuffle('Hi') . \"\\n\";\necho anti_shuffle('hello')\
    \ . \"\\n\";\necho anti_shuffle('Hello World!!!') . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nhello\nHello World!!!\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpg3pjin34.php:29\n\
    Stack trace:\n#0 /tmp/tmpg3pjin34.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpg3pjin34.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $newArr = [];\n  foreach ($arr as $word) {\n    $newArr[] = str_split($word);\n\
    \    sort($newArr[count($newArr) - 1]);\n    $newArr[count($newArr) - 1] = implode('',\
    \ $newArr[count($newArr) - 1]);\n  }\n  return implode(' ', $newArr);\n}\necho\
    \ anti_shuffle('Hi') . \"\\n\";\necho anti_shuffle('hello') . \"\\n\";\necho anti_shuffle('Hello\
    \ World!!!') . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi\nehllo\nHello !!!Wdlor\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $result = [];\n    foreach ($arr as $word) {\n      \
    \  $result[] = implode('', str_split($word));\n    }\n    return implode(' ',\
    \ $result);\n}\n\necho anti_shuffle('Hi');\necho '<br>';\necho anti_shuffle('hello');\n\
    echo '<br>';\necho anti_shuffle('Hello World!!!');\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: Hi<br>hello<br>Hello World!!!
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpp_1mu87r.php:31\n\
    Stack trace:\n#0 /tmp/tmpp_1mu87r.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpp_1mu87r.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $result = [];\n    foreach ($arr as $word) {\n      \
    \  $result[] = str_split($word);\n        sort($result[count($result) - 1]);\n\
    \        $result[count($result) - 1] = implode('', $result[count($result) - 1]);\n\
    \    }\n    return implode(' ', $result);\n}\n\necho anti_shuffle('Hi');\necho\
    \ '<br>';\necho anti_shuffle('hello');\necho '<br>';\necho anti_shuffle('Hello\
    \ World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\n\
    echo anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\n\
    echo '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello\
    \ World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\n\
    echo anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\n\
    echo '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello\
    \ World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\n\
    echo anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\n\
    echo '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello\
    \ World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\n\
    echo anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\n\
    echo '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello\
    \ World!!!');\necho '<br>';\necho anti_shuffle\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \",\" or \";\" in /tmp/tmpra387pmk.php on line 69\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $res = [];\n  foreach ($arr as $word) {\n    $res[] = implode('',\
    \ str_split($word));\n  }\n  return implode(' ', $res);\n}\n\necho anti_shuffle('Hi')\
    \ . PHP_EOL;\necho anti_shuffle('hello') . PHP_EOL;\necho anti_shuffle('Hello\
    \ World!!!') . PHP_EOL;\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi\nhello\nHello World!!!\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1zqk49dl.php:29\n\
    Stack trace:\n#0 /tmp/tmp1zqk49dl.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp1zqk49dl.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[] = str_split($word);\n\
    \  }\n  foreach ($new_arr as $key => $word) {\n    sort($new_arr[$key]);\n  }\n\
    \  $new_arr2 = [];\n  foreach ($new_arr as $word) {\n    $new_arr2[] = implode('',\
    \ $word);\n  }\n  return implode(' ', $new_arr2);\n}\n\necho anti_shuffle('Hi');\n\
    echo '<br>';\necho anti_shuffle('hello');\necho '<br>';\necho anti_shuffle('Hello\
    \ World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\n\
    echo anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\n\
    echo '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello\
    \ World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\n\
    echo anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\n\
    echo '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello\
    \ World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\n\
    echo anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\n\
    echo '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello\
    \ World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\n\
    echo anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\n\
    echo '<br>';\necho anti_\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \",\" or \";\" in /tmp/tmpfcp6y2fe.php on line 70\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpycli9wy8.php:26\n\
    Stack trace:\n#0 /tmp/tmpycli9wy8.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpycli9wy8.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\n\necho anti_shuffle('Hi');\necho anti_shuffle('hello');\necho\
    \ anti_shuffle('Hello World!!!');\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: HihelloHello World!!!
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjl58of5n.php:29\n\
    Stack trace:\n#0 /tmp/tmpjl58of5n.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpjl58of5n.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpawtmpy80.php:26\n\
    Stack trace:\n#0 /tmp/tmpawtmpy80.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpawtmpy80.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = '';\n    foreach ($words as $word) {\n  \
    \      $result .= str_split($word);\n        sort($result);\n        $result .=\
    \ ' ';\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Array to string conversion in /tmp/tmp3wes29mu.php on line\
    \ 15\nPHP Fatal error:  Uncaught TypeError: sort(): Argument #1 ($array) must\
    \ be of type array, string given in /tmp/tmp3wes29mu.php:16\nStack trace:\n#0\
    \ /tmp/tmp3wes29mu.php(16): sort()\n#1 /tmp/tmp3wes29mu.php(23): anti_shuffle()\n\
    #2 /tmp/tmp3wes29mu.php(27): candidate()\n#3 /tmp/tmp3wes29mu.php(36): test()\n\
    #4 {main}\n  thrown in /tmp/tmp3wes29mu.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $newArr = [];\n  foreach ($arr as $word) {\n    $newArr[] = implode(array_unique(str_split($word)));\n\
    \  }\n  return implode(' ', $newArr);\n}\necho anti_shuffle('Hi') . PHP_EOL;\n\
    echo anti_shuffle('hello') . PHP_EOL;\necho anti_shuffle('Hello World!!!') . PHP_EOL;\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nhelo\nHelo World!\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppxf8oqdj.php:28\n\
    Stack trace:\n#0 /tmp/tmppxf8oqdj.php(36): test()\n#1 {main}\n  thrown in /tmp/tmppxf8oqdj.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = explode('\
    \ ', $s);\n    foreach ($s as $key => $value) {\n        $s[$key] = str_split($value);\n\
    \        sort($s[$key]);\n        $s[$key] = implode('', $s[$key]);\n    }\n \
    \   return implode(' ', $s);\n}\n\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = '';\n    foreach ($words as $word) {\n  \
    \      $result .= implode('', str_split($word)) . ' ';\n    }\n    return trim($result);\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkgv7ury5.php:26\n\
    Stack trace:\n#0 /tmp/tmpkgv7ury5.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpkgv7ury5.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $result = '';\n  foreach ($arr as $word) {\n    $result .= implode('',\
    \ str_split($word)) . ' ';\n  }\n  return $result;\n}\necho anti_shuffle('Hi');\n\
    echo '<br>';\necho anti_shuffle('hello');\necho '<br>';\necho anti_shuffle('Hello\
    \ World!!!');\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: 'Hi <br>hello <br>Hello World!!! '
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpq8_2011y.php:29\n\
    Stack trace:\n#0 /tmp/tmpq8_2011y.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpq8_2011y.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $newArr = [];\n    foreach ($arr as $word) {\n      \
    \  $newArr[] = implode('', str_split($word));\n    }\n    $newArr = array_map(function($word)\
    \ {\n        sort($word);\n        return implode('', $word);\n    }, $newArr);\n\
    \    return implode(' ', $newArr);\n}\n\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: sort(): Argument #1 ($array) must\
    \ be of type array, string given in /tmp/tmpr0tyc7n5.php:18\nStack trace:\n#0\
    \ /tmp/tmpr0tyc7n5.php(18): sort()\n#1 [internal function]: {closure}()\n#2 /tmp/tmpr0tyc7n5.php(20):\
    \ array_map()\n#3 /tmp/tmpr0tyc7n5.php(25): anti_shuffle()\n#4 /tmp/tmpr0tyc7n5.php(29):\
    \ candidate()\n#5 /tmp/tmpr0tyc7n5.php(38): test()\n#6 {main}\n  thrown in /tmp/tmpr0tyc7n5.php\
    \ on line 18\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n     \
    \   $new_arr[] = implode('', str_split($word));\n    }\n    $new_arr = array_map(function($word)\
    \ {\n        $arr = str_split($word);\n        sort($arr);\n        return implode('',\
    \ $arr);\n    }, $new_arr);\n    return implode(' ', $new_arr);\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $new_words);\n}\n\necho anti_shuffle('Hi') . \"\\n\";\necho anti_shuffle('hello')\
    \ . \"\\n\";\necho anti_shuffle('Hello World!!!') . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nhello\nHello World!!!\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxtvd57kq.php:29\n\
    Stack trace:\n#0 /tmp/tmpxtvd57kq.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpxtvd57kq.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = str_split($word);\n        sort($result[count($result) - 1]);\n\
    \        $result[count($result) - 1] = implode('', $result[count($result) - 1]);\n\
    \    }\n    return implode(' ', $result);\n}\n\necho anti_shuffle('Hi');\necho\
    \ anti_shuffle('hello');\necho anti_shuffle('Hello World!!!');\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: HiehlloHello !!!Wdlor
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjotdhxq5.php:26\n\
    Stack trace:\n#0 /tmp/tmpjotdhxq5.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpjotdhxq5.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n     \
    \   $new_arr[] = str_split($word);\n    }\n    foreach ($new_arr as $key => $value)\
    \ {\n        sort($new_arr[$key]);\n    }\n    foreach ($new_arr as $key => $value)\
    \ {\n        $new_arr[$key] = implode('', $new_arr[$key]);\n    }\n    return\
    \ implode(' ', $new_arr);\n}\n\necho anti_shuffle('Hi') . PHP_EOL;\necho anti_shuffle('hello')\
    \ . PHP_EOL;\necho anti_shuffle('Hello World!!!') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nehllo\nHello !!!Wdlor\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $result = [];\n    foreach ($arr as $word) {\n      \
    \  $result[] = implode('', str_split($word));\n    }\n    return implode(' ',\
    \ $result);\n}\n\necho anti_shuffle('Hi');\necho anti_shuffle('hello');\necho\
    \ anti_shuffle('Hello World!!!');\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: HihelloHello World!!!
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7axrxrx5.php:29\n\
    Stack trace:\n#0 /tmp/tmp7axrxrx5.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp7axrxrx5.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $res = '';\n    foreach ($arr as $word) {\n        $res\
    \ .= implode('', str_split($word)) . ' ';\n    }\n    return $res;\n}\n\necho\
    \ anti_shuffle('Hi') . \"\\n\";\necho anti_shuffle('hello') . \"\\n\";\necho anti_shuffle('Hello\
    \ World!!!') . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi \nhello \nHello World!!! \n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprs70m3ia.php:28\n\
    Stack trace:\n#0 /tmp/tmprs70m3ia.php(37): test()\n#1 {main}\n  thrown in /tmp/tmprs70m3ia.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $new_words);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8ok3kie3.php:26\n\
    Stack trace:\n#0 /tmp/tmp8ok3kie3.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp8ok3kie3.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7fx7d7x6.php:26\n\
    Stack trace:\n#0 /tmp/tmp7fx7d7x6.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp7fx7d7x6.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $result = [];\n    foreach ($arr as $word) {\n      \
    \  $result[] = implode('', str_split($word));\n    }\n    return implode(' ',\
    \ $result);\n}\n\necho anti_shuffle('Hi');\necho anti_shuffle('hello');\necho\
    \ anti_shuffle('Hello World!!!');\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: HihelloHello World!!!
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzb3kvu4o.php:29\n\
    Stack trace:\n#0 /tmp/tmpzb3kvu4o.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpzb3kvu4o.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    foreach ($words as $key => $word) {\n        $words[$key]\
    \ = implode('', str_split($word));\n        sort($words[$key]);\n        $words[$key]\
    \ = implode('', $words[$key]);\n    }\n    return implode(' ', $words);\n}\n\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: sort(): Argument #1 ($array) must\
    \ be of type array, string given in /tmp/tmp0k74afp7.php:15\nStack trace:\n#0\
    \ /tmp/tmp0k74afp7.php(15): sort()\n#1 /tmp/tmp0k74afp7.php(22): anti_shuffle()\n\
    #2 /tmp/tmp0k74afp7.php(26): candidate()\n#3 /tmp/tmp0k74afp7.php(35): test()\n\
    #4 {main}\n  thrown in /tmp/tmp0k74afp7.php on line 15\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  $new_words = [];\n  foreach ($words as $word) {\n    $new_words[]\
    \ = implode(str_split($word));\n  }\n  return implode(' ', $new_words);\n}\n\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmps8y5p0lc.php:26\n\
    Stack trace:\n#0 /tmp/tmps8y5p0lc.php(34): test()\n#1 {main}\n  thrown in /tmp/tmps8y5p0lc.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[] = implode('',\
    \ str_split($word));\n  }\n  $new_arr = array_map('str_split', $new_arr);\n  foreach\
    \ ($new_arr as $key => $value) {\n    sort($new_arr[$key]);\n  }\n  $new_arr =\
    \ array_map('implode', $new_arr);\n  return implode(' ', $new_arr);\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $newArr = [];\n  foreach ($arr as $key => $value) {\n    $newArr[]\
    \ = str_split($value);\n    sort($newArr[$key]);\n    $newArr[$key] = implode('',\
    \ $newArr[$key]);\n  }\n  return implode(' ', $newArr);\n}\necho anti_shuffle('Hello\
    \ World!!!');\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: Hello !!!Wdlor
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n     \
    \   $new_arr[] = implode('', str_split($word));\n    }\n    return implode(' ',\
    \ $new_arr);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp12x29mfj.php:26\n\
    Stack trace:\n#0 /tmp/tmp12x29mfj.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp12x29mfj.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_sentence = '';\n\
    \    foreach ($new_words as $word) {\n        $new_sentence .= implode('', $word)\
    \ . ' ';\n    }\n    return trim($new_sentence);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = join('', str_split($word));\n    }\n    return join('\
    \ ', $new_words);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpra90kubk.php:26\n\
    Stack trace:\n#0 /tmp/tmpra90kubk.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpra90kubk.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $result = [];\n    foreach ($arr as $word) {\n      \
    \  $result[] = implode('', str_split($word));\n    }\n    return implode(' ',\
    \ $result);\n}\necho anti_shuffle('Hi');\necho anti_shuffle('hello');\necho anti_shuffle('Hello\
    \ World!!!');\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: HihelloHello World!!!
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpi4__1dt9.php:28\n\
    Stack trace:\n#0 /tmp/tmpi4__1dt9.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpi4__1dt9.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $result = [];\n  foreach ($arr as $word) {\n    $result[] = implode('',\
    \ str_split($word));\n  }\n  return implode(' ', $result);\n}\n\necho anti_shuffle('Hi');\n\
    echo anti_shuffle('hello');\necho anti_shuffle('Hello World!!!');\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: HihelloHello World!!!
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppk6deyb4.php:29\n\
    Stack trace:\n#0 /tmp/tmppk6deyb4.php(37): test()\n#1 {main}\n  thrown in /tmp/tmppk6deyb4.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = str_split($word);\n        sort($result[count($result) - 1]);\n\
    \        $result[count($result) - 1] = implode('', $result[count($result) - 1]);\n\
    \    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = explode('\
    \ ', $s);\n    foreach ($s as $key => $value) {\n        $s[$key] = str_split($value);\n\
    \        sort($s[$key]);\n        $s[$key] = implode('', $s[$key]);\n    }\n \
    \   return implode(' ', $s);\n}\n\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  foreach ($arr as $key => $value) {\n    $arr[$key] = str_split($value);\n\
    \    sort($arr[$key]);\n    $arr[$key] = implode('', $arr[$key]);\n  }\n  return\
    \ implode(' ', $arr);\n}\necho anti_shuffle('Hello World!!!');\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: Hello !!!Wdlor
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  $result = [];\n  foreach ($words as $word) {\n    $result[]\
    \ = implode('', str_split($word));\n  }\n  return implode(' ', $result);\n}\n\n\
    echo anti_shuffle('Hi') . \"\\n\";\necho anti_shuffle('hello') . \"\\n\";\necho\
    \ anti_shuffle('Hello World!!!') . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi\nhello\nHello World!!!\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpk9qs3d1e.php:29\n\
    Stack trace:\n#0 /tmp/tmpk9qs3d1e.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpk9qs3d1e.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[] = str_split($word);\n\
    \  }\n  foreach ($new_arr as $key => $value) {\n    sort($new_arr[$key]);\n  }\n\
    \  foreach ($new_arr as $key => $value) {\n    $new_arr[$key] = implode($new_arr[$key]);\n\
    \  }\n  return implode(' ', $new_arr);\n}\necho anti_shuffle('Hello World!!!');\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: Hello !!!Wdlor
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $result = [];\n    foreach ($arr as $word) {\n      \
    \  $result[] = implode('', str_split($word));\n    }\n    return implode(' ',\
    \ $result);\n}\n\necho anti_shuffle('Hi') . PHP_EOL;\necho anti_shuffle('hello')\
    \ . PHP_EOL;\necho anti_shuffle('Hello World!!!') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nhello\nHello World!!!\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpirtj8ij2.php:29\n\
    Stack trace:\n#0 /tmp/tmpirtj8ij2.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpirtj8ij2.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $result = [];\n  foreach ($arr as $word) {\n    $result[] = implode('',\
    \ str_split($word));\n  }\n  return implode(' ', $result);\n}\n\necho anti_shuffle('Hi');\n\
    echo anti_shuffle('hello');\necho anti_shuffle('Hello World!!!');\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: HihelloHello World!!!
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpo2cx9q1t.php:29\n\
    Stack trace:\n#0 /tmp/tmpo2cx9q1t.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpo2cx9q1t.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $newArr = [];\n  foreach ($arr as $word) {\n    $newArr[] = str_split($word);\n\
    \    sort($newArr[count($newArr) - 1]);\n    $newArr[count($newArr) - 1] = implode('',\
    \ $newArr[count($newArr) - 1]);\n  }\n  return implode(' ', $newArr);\n}\n\necho\
    \ anti_shuffle('Hi') . PHP_EOL;\necho anti_shuffle('hello') . PHP_EOL;\necho anti_shuffle('Hello\
    \ World!!!') . PHP_EOL;\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi\nehllo\nHello !!!Wdlor\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $result = '';\n  foreach ($arr as $word) {\n    $result .= str_split($word);\n\
    \    sort($result);\n    $result = implode($result);\n    $result .= ' ';\n  }\n\
    \  return trim($result);\n}\n\necho anti_shuffle('Hi') . PHP_EOL;\necho anti_shuffle('hello')\
    \ . PHP_EOL;\necho anti_shuffle('Hello World!!!') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Array to string conversion in /tmp/tmpiz1tdjm6.php on line\
    \ 15\nPHP Fatal error:  Uncaught TypeError: sort(): Argument #1 ($array) must\
    \ be of type array, string given in /tmp/tmpiz1tdjm6.php:16\nStack trace:\n#0\
    \ /tmp/tmpiz1tdjm6.php(16): sort()\n#1 /tmp/tmpiz1tdjm6.php(23): anti_shuffle()\n\
    #2 {main}\n  thrown in /tmp/tmpiz1tdjm6.php on line 16\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1z9pcj20.php:26\n\
    Stack trace:\n#0 /tmp/tmp1z9pcj20.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp1z9pcj20.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $result = [];\n    foreach ($arr as $word) {\n      \
    \  $result[] = implode('', str_split($word));\n    }\n    return implode(' ',\
    \ $result);\n}\necho anti_shuffle('Hi') . PHP_EOL;\necho anti_shuffle('hello')\
    \ . PHP_EOL;\necho anti_shuffle('Hello World!!!') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nhello\nHello World!!!\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpaayfbpxo.php:28\n\
    Stack trace:\n#0 /tmp/tmpaayfbpxo.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpaayfbpxo.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $result = '';\n    foreach ($arr as $word) {\n      \
    \  $result .= implode('', str_split($word)) . ' ';\n    }\n    return trim($result);\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwnoaeaa9.php:26\n\
    Stack trace:\n#0 /tmp/tmpwnoaeaa9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpwnoaeaa9.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[] = str_split($word);\n\
    \  }\n  foreach ($new_arr as $key => $value) {\n    sort($new_arr[$key]);\n  }\n\
    \  foreach ($new_arr as $key => $value) {\n    $new_arr[$key] = implode($new_arr[$key]);\n\
    \  }\n  return implode(' ', $new_arr);\n}\n\necho anti_shuffle('Hi') . PHP_EOL;\n\
    echo anti_shuffle('hello') . PHP_EOL;\necho anti_shuffle('Hello World!!!') . PHP_EOL;\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nehllo\nHello !!!Wdlor\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $newarr = [];\n    foreach ($arr as $word) {\n      \
    \  $newarr[] = str_split($word);\n    }\n    foreach ($newarr as $key => $value)\
    \ {\n        sort($newarr[$key]);\n    }\n    foreach ($newarr as $key => $value)\
    \ {\n        $newarr[$key] = implode('', $newarr[$key]);\n    }\n    return implode('\
    \ ', $newarr);\n}\n\necho anti_shuffle('Hi') . PHP_EOL;\necho anti_shuffle('hello')\
    \ . PHP_EOL;\necho anti_shuffle('Hello World!!!') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nehllo\nHello !!!Wdlor\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[] = implode('',\
    \ str_split($word));\n  }\n  return implode(' ', $new_arr);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpva2g0kqx.php:26\n\
    Stack trace:\n#0 /tmp/tmpva2g0kqx.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpva2g0kqx.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $new_words);\n}\n\necho anti_shuffle('Hi') . PHP_EOL;\necho anti_shuffle('hello')\
    \ . PHP_EOL;\necho anti_shuffle('Hello World!!!') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nhello\nHello World!!!\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp56d4q9_h.php:29\n\
    Stack trace:\n#0 /tmp/tmp56d4q9_h.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp56d4q9_h.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $newArr = [];\n  foreach ($arr as $word) {\n    $newArr[] = str_split($word);\n\
    \    sort($newArr[count($newArr) - 1]);\n    $newArr[count($newArr) - 1] = implode('',\
    \ $newArr[count($newArr) - 1]);\n  }\n  return implode(' ', $newArr);\n}\n\necho\
    \ anti_shuffle('Hi') . PHP_EOL;\necho anti_shuffle('hello') . PHP_EOL;\necho anti_shuffle('Hello\
    \ World!!!') . PHP_EOL;\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi\nehllo\nHello !!!Wdlor\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $result = [];\n    foreach ($arr as $word) {\n      \
    \  $result[] = implode('', str_split($word));\n    }\n    return implode(' ',\
    \ $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnvrf5vna.php:26\n\
    Stack trace:\n#0 /tmp/tmpnvrf5vna.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpnvrf5vna.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $result = '';\n    foreach ($arr as $word) {\n      \
    \  $result .= implode('', str_split($word)) . ' ';\n    }\n    return $result;\n\
    }\necho anti_shuffle('Hi');\necho '<br>';\necho anti_shuffle('hello');\necho '<br>';\n\
    echo anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\n\
    echo '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello\
    \ World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\n\
    echo anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\n\
    echo '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello\
    \ World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\n\
    echo anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\n\
    echo '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello\
    \ World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\n\
    echo anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\n\
    echo '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello\
    \ World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\n\
    echo anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle('Hello World!!!');\n\
    echo '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\necho anti_shuffle\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \",\" or \";\" in /tmp/tmpz86pmffo.php on line 70\n"
  exit_code: 255
  status: SyntaxError
