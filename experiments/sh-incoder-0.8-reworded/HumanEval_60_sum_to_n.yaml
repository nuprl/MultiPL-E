name: HumanEval_60_sum_to_n
language: sh
prompt: "#!/bin/bash\n# sum_to_n is a function that sums numbers from 1 to n.\n# >>>\
  \ $(sum_to_n \"30\")\n# \"465\"\n# >>> $(sum_to_n \"100\")\n# \"5050\"\n# >>> $(sum_to_n\
  \ \"5\")\n# \"15\"\n# >>> $(sum_to_n \"10\")\n# \"55\"\n# >>> $(sum_to_n \"1\")\n\
  # \"1\"\n#\n# $1 is an integer\nsum_to_n() {\n"
tests: "}\n\ncandidate() {\n    sum_to_n \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
  \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"21\" ]]\n    [[ $(candidate\
  \ \"11\") = \"66\" ]]\n    [[ $(candidate \"30\") = \"465\" ]]\n    [[ $(candidate\
  \ \"100\") = \"5050\" ]]\n}\n\nrun_test"
completions: ["    local i\n    local total=0\n    shift\n    while [ $# -gt 0 ];\
    \ do\n        ((total+=$1))\n        shift\n    done\n    echo \"$total\"", '  echo
    "$(($1*($1+1)/2))"', "    local n=\"$1\"\n    local sum=\"0\"\n    # Make sure\
    \ that the integer is a number by trying to convert to it\n    # with echo $((...)).\n\
    \    if [[ ${n} == *[!0-9]*$ ]]; then\n        echo \"Usage: $(basename $0) n\"\
    \ >&2\n        return 1\n    fi\n    # Loop until you run out of numbers.\n  \
    \  for (( i=1; i<=$n; i++ )); do\n        (( sum+=i ))\n    done\n    echo \"\
    ${sum}\"", "    local sum=$1\n    local i=$2\n    while (( i <= $2 )); do\n  \
    \      sum=$(expr $sum + $i)\n        i=$(expr $i + 1)\n    done\n    echo \"\
    $sum\"", "    local sum=0\n    for (( n=1; n<=$1; n++ ))\n    do\n        sum=$(($sum\
    \ + $n))\n    done\n    echo \"$sum\"", "  local n=$1 sum=0 i\n  for ((i=1; i\
    \ <= $n; i++)); do\n    ((sum+=i))\n  done\n  echo \"$sum\"", "  echo $(seq $1\
    \ $(($1+1)) | tr '\\n' '|' | \\\n    awk '{sum += $1} END {printf \"%d\\n\", sum}')",
  "  (( n = $1 ))\n  (( sum = 0))\n  for i in $(seq 1 $n); do\n    (( sum += i))\n\
    \  done\n  echo $sum", "  local n=$1\n  local sum=0\n  for ((i=1; i<=n; i++));\
    \ do\n    sum=$(($sum+$i))\n  done\n  echo $sum", "  local sum=0\n  local i\n\
    \  for ((i=1; i<=$1; i++)); do\n    sum=$((sum + i))\n  done\n  echo $sum", " \
    \ local n=$1\n  ((n%2)) && echo \"$((n+1))\" || echo \"$((n+1))\"", "    local\
    \ sum=0\n    local n=$1\n    shift\n    for (( ; ; )); do\n        ((sum+=1))\n\
    \        if (( n == 0 )); then\n            echo ${sum}\n            return 0\n\
    \        fi\n        ((--n))\n    done", "  sum=0\n  for i in $(eval echo {1..$1})\n\
    \  do\n    sum=$(($sum+$i))\n  done\n  echo $sum", "  local n=\"$1\"\n  local\
    \ sum=0\n  for i in $(seq 1 $n); do\n    sum=$((sum + i))\n  done\n  echo $sum",
  "\tlocal n=$1\n\tlocal sum=0\n\tfor ((i=1; i<=$n; i++)); do\n\t\tsum=$((sum + i))\n\
    \tdone\n\techo $sum", "    local sum=0\n    for i in $(seq $1); do sum=$((sum\
    \ + $2)); done\n    echo $sum", "  local n=$1\n  local sum=0\n  for i in $(seq\
    \ $n); do\n    sum=$(( sum + i ))\n  done\n  echo $sum", "  local n=\"$1\"\n \
    \ (( n-- )) || return 0\n  local sum=0\n  while (( n )); do\n    (( sum+=n ))\n\
    \    (( n-- ))\n  done\n  echo $(( sum % 2 )) | bc", "\tlocal sum=0\n\tfor i in\
    \ $(seq $1); do\n\t\t((sum+=i))\n\tdone\n\techo $sum", "    local n=${1:-30}\n\
    \    if [ \"$n\" == \"0\" ]; then\n        n=$1\n    fi\n    local sum=0\n   \
    \ while [ \"$n\" -gt 0 ]; do\n        ((sum+=1))\n        n=$((n - 1))\n    done\n\
    \    echo \"$sum\"", "  local n=$1\n  local sum=0\n  if [ \"$n\" -lt 1 ]; then\n\
    \    echo 0\n    return\n  fi\n  while [ \"$n\" -gt 0 ]; do\n    (( sum += n ))\n\
    \    n=$(( n - 1 ))\n  done\n  echo $sum", "  local sum=0\n  local count=$1\n\
    \  while [ \"$count\" -gt 0 ]; do\n    ((sum+=count))\n    count=$((count-1))\n\
    \  done\n  echo $sum", "\tlocal sum=0\n\tlocal i\n\n\tfor i in $(seq $1); do\n\
    \t\tsum=$(($sum+$i))\n\tdone\n\techo $sum", "    if [ $# -eq 1 ] ; then\n    \
    \    local x=$1\n        echo $(( $x + $x ))\n    elif [ $# -eq 2 ] ; then\n \
    \       local x=$1\n        local y=$2\n        echo $(( $x + $y ))\n    else\n\
    \        echo \"Too many arguments.\"\n        exit 1\n    fi", "  local n=\"\
    $1\"\n  local i=0\n  while (( i <= n )); do\n    (( i++ ))\n  done\n  echo $((\
    \ $i + 1 ))", "  local total=0\n  for i in $(seq $1) ; do\n    ((total += i))\n\
    \  done\n  echo \"$total\"", "    local n=$1\n    local sum=0\n    while [ \"\
    $n\" -gt 0 ]\n    do\n        (( sum+=n ))\n        n=$(( n-1 ))\n    done\n \
    \   echo \"$sum\"", "  local n=$1\n  local sum=0\n  for i in $(seq 1 $n); do\n\
    \    sum=$((sum + i))\n  done\n  echo $sum", "    local x=\"$1\"\n    local result=\"\
    $2\"\n    while [ \"$x\" -gt 0 ]; do\n        result=\"$(($result + $x))\"\n \
    \       x=\"$(($x - 1))\"\n    done\n    echo \"$result\"", "  local NUM=$1\n\
    \  local SUM=0\n  local i\n  for i in $(eval echo {1..$NUM}); do\n    ((SUM +=\
    \ i))\n  done\n  echo $SUM", "  local n x\n  n=\"$1\"\n  x=\"0\"\n  while [ \"\
    $n\" -gt 0 ]; do\n    x=$(($x+$(n-1)))\n    n=$(($n-1))\n  done\n  echo $x", " \
    \ local n=$1\n  echo $((n%15+((n%5)+1))%100+((n%10+1)+1))", "   sum=0\n   for\
    \ ((i=1; i<=$1; i++)); do\n      sum=$(($sum + $i))\n   done\n   echo \"$sum\"",
  "  # We need a way to count from 1 to $1, without running into problems.\n  # The\
    \ easiest way to do this in bash is to use $(( )) to sum the number\n  # of times.\n\
    \  # e.g. \"$( (($1) + 1 ))\" sums $1 to $1\n  # e.g. \"$( (($1) + 1 )) times\
    \ 2\" times 2 of $1\n  # e.g. \"$( (($1) + 1 )) times 3 times 2\" times 3 of $1,\
    \ times 2\n  # of $1\n  # ...\n  local i=1\n  while [ $i -le $1 ]; do\n    # we\
    \ start i at 1 instead of 0, as we already added 1 to $1 above\n    (( i++ ))\n\
    \    # add 1 to i using $(( )) to evaluate the expression in $() as the value\n\
    \    # of the expression; this is what we want, as we want to see \"1+1+1+...\n\
    \    sum=\"$((sum+1))\"\n  done\n  echo \"$sum\"", "\tlocal n=\"$1\"\n\tlocal\
    \ sum\n\tif (( $n == 1 )); then\n\t\tsum=\"$n\"\n\telse\n\t\tsum=$(echo \"($(n\
    \ * $n + 1))/2\" | bc -l)\n\tfi\n\tprintf \"%3d\\n\" \"$sum\"", "  # We use $@\
    \ instead of \"$1\" so that our function works for lists of arguments.\n  local\
    \ sum=0\n  for i in $(seq 1 $@); do\n    ((sum += $i))\n  done\n  echo $sum",
  "\tlocal n=\"$1\"\n\tlocal sum=0\n\t\n\t# While loop will exit when loop condition\
    \ is false\n\twhile [ \"$n\" -gt 0 ]; do\n\t\t(( sum += n ))\n\t\t(( n-- ))\n\t\
    done\n\techo \"$sum\"", "  local n=\"$1\"\n  local sum=0\n  while ((n--)); do\n\
    \    ((sum+=1))\n  done\n  echo $sum", '  echo "$(( $1 + $( seq "$1" ) ))"', '  echo
    "$(( $1 * $1 + $2 ))"', '    echo "$(($1+1)$1)"', "    local sum=$1\n    local\
    \ n=$2\n    if [ $n -lt 1 ]; then\n        return\n    fi\n    for ((i=1; i<=$n;\
    \ i++)); do\n        sum=$((sum+i))\n    done\n    echo \"$sum\"", "  local number\n\
    \  for ((number=$1; number>1; number--))\n  do\n    echo $(( $number + $1 ))\n\
    \  done", "    local n=\"$1\"\n    local result\n    for ((i = 1; i <= n; i++));\
    \ do\n        result+=\"$((i - 1))\"\n    done\n    echo \"$result\"", "  local\
    \ n=$1\n  local sum=0\n  local i=$1\n  while [ $i -ne 0 ]; do\n    (( sum += i\
    \ ))\n    (( i -= 1 ))\n  done\n  echo $sum", "    local n=$1\n    local sum=0\n\
    \    if [ -z \"$n\" ];then\n        n=1\n    fi\n    for i in $(seq $n); do\n\
    \        sum=$((sum+i))\n    done\n    echo \"$sum\"", "  local n=$1\n  echo \"\
    $(( $(seq $n) +1 ))\"", "   local n=\"$1\"\n   local sum=0\n   for (( i=1; i<=\"\
    $n\" ; i++ )); do\n      sum=\"$(($sum+$i))\"\n   done\n   echo \"$sum\"", " \
    \   local n=\"$1\"\n    local sum=0\n\n    # print first n-1 numbers from 1..n\n\
    \    for (( i=1; i<=n; i++ )); do\n        sum=$(( $sum + $i ))\n    done\n\n\
    \    echo \"$sum\"", "  local n=\"${1}\"; shift\n  local sum\n  ((sum=0))\n  for\
    \ ((i=1; i<=$n; i++)); do\n    ((sum+=i))\n  done\n  echo \"$sum\"", "\tif [[\
    \ \"$1\" -gt 1 ]] ; then\n\t\tlocal sum=0\n\t\tfor i in $(seq 1 $1); do\n\t\t\t\
    sum=$(($sum+$1))\n\t\tdone\n\t\techo $sum\n\telse\n\t\techo $1\n\tfi", '  (( $#
    )) && echo $(( $1 + $(sum_to_n $(($2-1))) ))', "    (( $1 == 0 )) && return 0\n\
    \    local n=$1\n    local sum=1\n    for i in $(seq $n); do\n        ((sum *=\
    \ i)); sum=$(echo $sum | bc)\n    done\n    echo $sum", "    local number=$1\n\
    \    local sum=0\n    while [ $number -gt 1 ]; do\n        ((sum+=number))\n \
    \       number=$((number-1))\n    done\n    echo $sum", "\tlet \"sum+=${1}\"\n\
    \tlet \"sum*=10\"", "  local n=\"$1\"\n  ((n>0)) && echo \"$((n+(n<0?-1:1)))\"",
  "    local n=$1\n    if [ $n -eq 1 ]\n    then\n        echo $((n+1))\n    elif\
    \ [ $n -eq 2 ]\n    then\n        echo $((n+1))\n        echo $((n+1))\n    elif\
    \ [ $n -le 100 ]\n    then\n        sum_to_n $(expr $((n-2)) + 1)\n        echo\
    \ $((n+1))\n        sum_to_n $(expr $((n-2)) + 1)\n        echo $((n+1))\n   \
    \ fi", "  local n=$1\n  local sum\n  for ((i=1; i <= n; i++)); do\n    ((sum +=\
    \ i))\n  done\n  echo $sum", "  local n=\"$1\"\n  if [ \"$n\" -eq \"1\" ]; then\n\
    \    echo \"1\"\n  else\n    echo \"$(echo \"$n + 1\" | bc)\"\n  fi", "  if [\
    \ -z ${1} ]; then\n    echo \"Usage: $(basename \"$0\") n\" >&2\n    exit 2\n\
    \  fi\n  local n sum\n  sum=0\n  n=$1\n  until [ $n -gt 0 ]; do\n    sum=$(( $sum\
    \ + $n ))\n    n=$(( $n - 1 ))\n  done\n  echo $sum", "  local -r n=$1\n  (( n\
    \ = n + 1 ))\n  echo $(( $(nproc --pid $$ -wc -l < <(tail -n +2 -- \"$0\")) +$(nproc\
    \ --pid $$ -wc -l < <(head -n -1 -- \"$0\")) ))", "  local n=$1\n  echo $((n<2\
    \ ? 1 : ($((n<10 ? $((n<1000 ? $((n<10000 ? $((n<1000000 ? $((n<10000000 ? $((n<100000000\
    \ ? $((n<1000000000 ? $((n<10000000000 ? $((n<100000000000 ? $((n<1000000000000\
    \ ? $((n<100000000000000 ? $((n<1000000000000000 ? $((n<10000000000000000 ? $((n<100000000000000000\
    \ ? $((n<1000000000000000000 ? $((n<10000000000000000000 ? $((n<100000000000000000000\
    \ ? $((n<10000000000000000000000 ? $((n<100000000000000000000000 ? $((n<1000000000000000000000000\
    \ ? $((n<10000000000000000000000000 ? $((n<100000000000000000000000000 ? $((n<1000000000000000000000000000\
    \ ? $((n<10000000000000000000000000000 ? $((n<1000000000000000000000000000000\
    \ ? $((n<10000000000000000000000000000000 ? $((n<100000000000000000000000000000000\
    \ ? $((n<1000000000000000000000000000000000 ? $((n<100000000000000000000000000000000000000000\
    \ ? $((n<1000000000000000000000000000000000000000000 ? $((n<10000000000000000000000000000000000000000000\
    \ ? $((n<100000000000000000000000000000000000000000000 ? $((n<100000000000000000000000000000000000000\
    \ ? $((n<1000000000000000000000000000000000000000 ? $((n<10000000000000000000000000000000000000000\
    \ ? $((n<100000000000000000000000000000000000000000 ? $((n<100000000000000000000000000000000000000000\
    \ ? $((n<1000000000000000000000000000000000000000000 ? $((n<10000000000000000000000000000000000000000000\
    \ ? $((n<100000000000000000000000000000000000000000000 ? $((n<10000000000000000000000000000000000000000000000\
    \ ? $((n<100000000000000000000000000000000000000000000000 ? $((n<1000000000000000000000000000000000000000000000000\
    \ ? $((n<100000000000000000000000000000000000000000 ? $((n<100000000000000000000000000000000000000000\
    \ ? $((n<1000000000000000000000000000000000000000000 ? $((n<10000000000000000000000000000000000000000000\
    \ ? $((n<1000000000000000000000000000000000000000000 ? $((n<10000000000000000000000000000000000000000000\
    \ ? $((n<10000000000000000000000000000000000000000 ? $((n<100000000000000000000000000000000000000000\
    \ ? $((n<100000000000000000000000000000000000000000 ? $((n<1000000000000000000000000000000000000000000\
    \ ? $((n<10000000000000000000000000000000000000000000 ? $((n<1000000000000000000000000000000000000000000\
    \ ? $((n<1000000000000000000000000000000000000000000", "  local n=$1\n  echo $((\
    \ ${n} * $1 ))", '    echo "$(($1 + $2))"', "\tlocal num=$1\n\tlocal sum=0\n\t\
    local cur\n\twhile (( num > 0 )); do\n\t\tcur=$((num % 10))\n\t\tsum=$((sum +\
    \ cur))\n\t\t(( num = num / 10 ))\n\tdone\n\techo \"$sum\"", "    local n=$1\n\
    \    local sum=0\n    for ((i=1;i<=n;++i)); do\n        sum=$((sum + i))\n   \
    \ done\n    echo \"$sum\"", "  local n=\"$1\"\n  # sum is the running total.\n\
    \  local sum=0\n  while [ \"$n\" -gt 0 ]; do\n    (( sum=sum+n ))\n    n=\"$((\
    \ n-1 ))\"\n  done\n  echo \"$sum\"", "\tlocal n=$1\n\tlocal sum=0\n\tfor (( i=1\
    \ ; i<=$n ; i++ )); do\n\t\tsum=$(($sum + $i))\n\tdone\n\techo \"$sum\"", "  \
    \  sum=0\n    for i in {1..$1};\n    do\n        sum=$(( ${sum} + $i ))\n    done\n\
    \    echo $sum", "\tlocal n=$1 acc=$2\n\tif (( n <= 0 )); then\n\t\techo \"$acc\"\
    \n\telse\n\t\tsum_to_n $(( n - 1 )) $(( $1 + $acc ))\n\tfi", "  local n=\"$1\"\
    \n  (( n == 0 )) && return 1\n  local total=0\n  local number=$(( $(nproc --all\
    \ --pids > /dev/null || true) ))\n  (( $number > 1 )) && local i=1 \n  while ((\
    \ $i <= $number )); do\n    (( $i <= $n )) && total=$(( $total + $i )) && i=$((\
    \ i + 1 ))\n    (( $number < $i )) && return $total\n    (( $number > $n )) &&\
    \ break\n  done", "  local n=$1\n  local sum=0\n  local j=1\n  while [ $n -gt\
    \ $j ]\n  do\n    sum=$(($sum + $j))\n    j=$(($j + 1))\n  done\n  echo $(($sum\
    \ % 10 + 1))", "  local n sum\n  ((n=$(echo \"$1\"|bc -l))) || return\n  sum=0\n\
    \  for i in $(eval echo {1..\"$n\"}); do\n    ((sum+=\"$i\"))\n  done\n  echo\
    \ \"$sum\"", "  ((n=$1)); # bash handles arithmetic\n  echo \"$(( 1 + $n ))\"",
  "  local total\n  if [[ \"$1\" = \"0\" ]]; then\n    total=0\n  elif [[ \"$1\" =~\
    \ ^[0-9]+$ ]]; then\n    total=$(( $1 + 1 ))\n  else\n    echo \"bad parameter:\
    \ $1\"\n  fi\n  echo \"$total\"", "  local n=$1\n  local sum=0\n  for ((i=1; i<=$n;\
    \ i++)); do\n    ((sum += i))\n  done\n  echo $sum", "  local n=$1\n  local i\
    \ sum=0\n  for i in {1..n}; do\n    sum=$(( $sum + i ))\n  done\n  echo $sum",
  "  local n=${1}\n  local sum=0\n  for i in $(seq 1 $n); do\n    ((sum += i))\n \
    \ done\n  echo $sum", "  local SUM=0\n  while [ $1 -gt 0 ]; do\n    SUM=$(( $1\
    \ + $SUM ))\n    shift\n  done\n  echo $SUM", "    local number=$1\n    local\
    \ sum=0\n    while [ $number -gt 0 ]; do\n        sum=$(($sum + $number))\n  \
    \      number=$(($number - 1))\n    done\n    echo $sum", "    local n=$1\n  \
    \  local sum=0\n    while [ \"$n\" -gt 0 ]; do\n        ((n--))\n        ((sum+=1))\n\
    \    done\n    echo $sum", "  local NUM=\"${1}\"\n  local n=$(( NUM + 1 ))\n \
    \ echo \"$(( ${#NUM} - n + 1 ))\"", "  local NUM=$1\n  local VALUE=0\n  local\
    \ SUM=0\n  while [ $NUM -gt 0 ]; do\n    (( SUM+=NUM ))\n    (( NUM-=1 ))\n  done\n\
    \  echo $SUM", "  local n=$1\n  shift\n  local sum=0\n  for i in $(seq 1 $n);\
    \ do\n    sum=$((sum + $i)) \n  done\n  echo $sum", "    local n=$1\n    if [\
    \ $n -le 0 ]; then\n        echo \"$n\"\n    else\n        let result=$n*(n+1)/2\n\
    \        echo \"$result\"\n    fi", "    n=$1\n    echo $(seq $n|fold -w 0 '+'\
    \ | tail -n +$((n - 1)) | head -n 1)", "  local sum=0\n  for i in $(seq 1 \"$1\"\
    ); do\n    sum=$((sum + i))\n  done\n  echo \"$sum\"", "  local n=$1\n  echo $((\
    \ $n + $(n) ))", "  local result=$(expr $1 + 1 )\n  echo $(( 10#$result ))", " \
    \   local n sum\n    n=$1; shift\n    for i in $(seq $n); do\n        sum=$(($sum\
    \ + $i));\n    done\n    echo \"$sum\"", "  local n=$1; shift;\n  echo $(( ((1+n)*$1\
    \ )) | bc)", "  local n=$1\n  echo $(seq \"$n\" | fold -w1 | xargs -n1 \"$1 +\"\
    ) | bc", "    local n=$1 start=1\n    echo -n \"$(python -c \"print('$((start+$1))')\"\
    )\"\n    while [ \"$((start+$1))\" -le \"$n\" ]; do\n        start=$(python -c\
    \ \"print('$((start+$1))')\")\n        echo -n \"$((start+$1))\"\n    done", " \
    \ local n=\"$1\"\n  ((n>0)) && echo $((n%+(n>>1)*n))", "  local n=$1\n  local\
    \ sum=0\n  local nstring=\"$1\"\n  if [ \"$nstring\" = \"\" ]; then\n    nstring=\"\
    1\"\n  fi\n  nstring=$(nstring)\n  while [ \"$n\" -gt 0 ]; do\n    (( sum += n\
    \ ))\n    n=$(( n - 1 ))\n  done\n  echo \"$sum\"", "  local SUM=$1\n  local NUM=1\n\
    \  local SUMLEN=`expr $SUM - 1`\n\n  while [ \"$NUM\" -le \"$SUMLEN\" ]\n  do\n\
    \     SUM += $NUM\n     NUM=$(( NUM + 1 ))\n  done\n\n  echo $SUM", "  local sum=0\n\
    \  local n=$1\n  while [ $n -gt 1 ]; do\n    local -a arr=( $((n--)) $((n--))\
    \ $((n--)) )\n    sum=`expr $sum + ${arr[*]}`\n  done\n  echo $sum", "  local\
    \ sum=0\n  local i=\"$1\"\n  while [ \"$i\" -gt 0 ]; do\n    ((sum+=i))\n    i=\"\
    $((i-1))\"\n  done\n  printf \"%i\\n\" \"$sum\"", "  if [ \"$#\" -eq 1 ];then\n\
    \    local x=\"$1\"\n    let x=x+1\n  else\n    local x=\"1\"\n  fi\n  echo \"\
    $x\"", "  local sum=0\n  for i in $(seq 1 $1); do\n    sum=$((sum + i))\n  done\n\
    \  echo $sum", "  local number=$1\n  local sum\n  IFS=+ read -r sum <<< \"$(python\
    \ -c \"\n    import sys\n    sum = 0\n    for i in range($1; $i + 1): sum += $i\n\
    \    print('$sum')\n  \")\"\n  echo \"$sum\"", "    local n=$1\n    local sum=0\n\
    \    while [ \"$n\" -gt 0 ]; do\n        let sum=sum+n\n        n=$((n-1))\n \
    \   done\n    printf \"%d\\n\" $sum", "  local n=\"$1\"\n  local sum\n  ((sum=1))\n\
    \  while [ \"$sum\" -le \"$n\" ]; do\n    ((sum+=1))\n  done\n  echo \"$sum\"",
  "   local sum=0\n   for ((i=$1; i!=0; i=$(($i+1)))); do\n      sum=$(($sum+$i))\n\
    \   done\n   echo $sum", "  local sum=0\n  for ((i=1; i<=$1; i++ ))\n  do\n  \
    \  sum=$((sum+i))\n  done\n  echo $sum", "        local sum=0\n        while [\
    \ $1 -gt 0 ]; do\n                sum=$(($sum + $1))\n                shift\n\
    \        done\n        echo $sum", "  local sum=0\n  for i in $(seq 1 $1) ; do\n\
    \    (( sum += i ))\n  done\n  echo $sum", "    local sum=1\n    while [ $1 -gt\
    \ 0 ]; do\n        sum=$((sum + 1))\n        shift\n    done\n    echo \"$sum\"",
  "  local n=\"$1\"\n  local sum=\"0\"\n  while [ \"$n\" -gt 0 ]; do\n    sum=\"$((sum\
    \ + n))\"\n    n=\"$((n - 1))\"\n  done\n  printf '%s' \"$sum\"", "  local n=$1\
    \ i=1\n  echo $((n * (n + 1)) / 2)", "    local n=\"$1\"\n    shift\n    local\
    \ sum=0\n    for ((i=1; i<=$n; i++)); do\n        sum=$(($sum + $i))\n    done\n\
    \    echo $sum", '  echo $(( $1 * $(( $1 + 1 )) ))', "  local sum=0\n  while [\
    \ \"$1\" -gt 0 ]; do\n    (( sum+=1 ))\n    shift\n  done\n  echo $(( sum * 2\
    \ ))", "    local -n count=$1; shift\n    if [ $# -eq 0 ]\n    then\n        echo\
    \ \"0\"\n    else\n        # sums the numbers form 1 to $1 and outputs the sum.\n\
    \        # >>> echo $(sum_to_n \"30\")\n        # 465\n        echo $(eval echo\
    \ {1..$1}); \n    fi", "    local n=$1\n    echo \"$(( ${n} * $( echo \"$(( $n\
    \ * ${n} - 1 )\" )) ))\"", "  local n=$1 start=$2 sum=$3 i=$4\n  for ((i=1; i\
    \ <= n; i++)); do\n    sum=$((sum + i))\n  done\n  echo $sum", "    local number=\"\
    $1\"\n    echo \"$(( ${#number} + 1 ))\"", "  local i\n  local sum=0\n  for ((\
    \ i=$1; i<=$1; i++ )); do\n    sum=$(($sum+$i))\n  done\n  echo $sum", "    local\
    \ N=$1\n    local n=$((N-1))\n    echo $(( ${n} + ${N} ))", "    local n=\"${1}\"\
    \n    if [[ ! -z \"$n\" ]]; then\n        local sum=$(echo \"$n+1\" | bc)\n  \
    \      echo \"$sum\"\n    else\n        echo \"0\"\n    fi", "  local sum=0\n\
    \  local count=$1\n  while [ \"$count\" -gt 0 ]\n  do\n    sum=$((sum+count))\n\
    \    count=$((count-1))\n  done\n  echo \"$sum\"", "    local n=$1\n    if [ $n\
    \ -eq 1 ] ; then return $1 ; fi\n    local sum=0\n    for ((i=1; i<$n; i++));\
    \ do\n        sum=$((sum+i))\n    done\n    return $sum", "    local n=$1\n  \
    \  echo \"$(( (n - 1) * (n - 2) / 2 ))\"", "    local i\n    local sum=0\n\n \
    \   if [ -z \"$1\" ]; then\n        echo \"Usage: $0 integer\"\n        return\
    \ 1\n    fi\n\n    # Get the integer from $1\n    i=$(echo \"$1\" | sed 's/^[^0-9]*//;s/[^0-9]*$//;s/^0*//;s/\
    \ *$//')\n\n    # Sum all numbers from 1 to $i\n    for (( i=1;i<=$i;i++ )); do\n\
    \        sum=$(( $sum + $i ))\n    done\n    echo \"$sum\"", "\techo $(($1*($1+1)/2))",
  "  local sum=1\n  for i in $(seq $1 $2); do\n    sum=$(($sum + $i))\n  done\n  echo\
    \ $sum", "    local sum=0\n    local N=$1\n    for ((i=1; i<=$N; i++))\n    do\n\
    \        sum=$((sum+i))\n    done\n    echo \"$sum\"", "  local sum=0\n  for ((i=$1;\
    \ i<=$2; i++)); do\n    sum=`expr $sum + $i`\n  done\n  echo $sum", "    local\
    \ NUM=$1; shift\n    local SUM=0\n    for ((i=0; i < NUM; i++)); do\n        SUM=$((SUM\
    \ + i))\n    done\n    echo \"$SUM\"", "  local sum=0\n  local i\n  for ((i=$1;\
    \ i>0; i=$((i-1))); do\n    ((sum+=i))\n  done\n  echo $sum", "  if (( $# < 1\
    \ )); then\n    echo \"Not enough arguments\"\n    exit 1\n  fi\n  local i sum=0\n\
    \  for i in $(seq 0 $1); do\n    sum=$(( sum + $i ))\n  done\n  echo $sum", " \
    \ local i sum\n  sum=0\n  for ((i=1; i <= $1; i++)); do\n    sum=$((sum + i))\n\
    \  done\n  echo \"$sum\"", "\tif [ -n \"$1\" ]; then\n\t\techo $(( 1 + $1 ))\n\
    \telse\n\t\techo 0\n\tfi", "  # sum 1 through $1 to $1\n  local num=1\n  while\
    \ [ $num -le $1 ]; do\n    echo -n $((num+=1))\n  done", "  local n=$1\n  ((n==0))\
    \ && echo \"0\"\n  local -r result=0\n  local -r digits=$((n-1))\n  while [ \"\
    $n\" -gt 0 ]; do\n    ((result+=1))\n    ((n-=10))\n  done\n  printf \"%0${digits}d\"\
    \ \"$result\"", "  local n=$1\n  local sum=0\n  while [ $n -gt 0 ]; do\n    sum=$(($sum\
    \ + $n))\n    n=$(($n - 1))\n  done\n  echo $sum", "  local n=\"$1\"\n  local\
    \ sum=1\n  for i in $(seq 1 $n); do\n    sum=$((sum+i))\n  done\n  echo $sum",
  "  local result=0\n  for i in $(seq 1 $1); do\n    result=$((result+$2))\n  done\n\
    \  echo $result", "  local SUM=\"${1:-$(( $1 + 1 ))}\"\n  (( SUM == $1 )) && echo\
    \ \"$SUM\" || echo \"$SUM+\"", "  local n=$1 cur\n  cur=$(( ${cur}+1 ))\n  echo\
    \ ${cur}", "\techo \"$(($1*($1+1)))\"", "  sum=1\n  for i in $(seq $1); do\n \
    \   sum=$(($sum + $i))\n  done\n  echo $sum", "\t[[ $1 = +([1-9]) ]] || {\n\t\t\
    echo \"Bad value for $1\" 1>&2\n\t\texit 1\n\t}\n\tlocal sum=1\n\twhile (($1--))\n\
    \tdo\n\t\tsum=$((sum + 1))\n\tdone\n\techo $sum", "    (( $# == 1 )) && return\n\
    \    (( $# == 2 )) && return\n    (( $# == 3 )) && return\n    (( $# == 4 )) &&\
    \ return\n\n    (( $# < 5 )) && return 0\n\n    (( $1 == 1 )) && return\n    ((\
    \ $1 == 2 )) && return\n    (( $1 == 3 )) && return\n    (( $1 == 4 )) && return\n\
    \n    (( $1 == 10 )) && return\n    (( $1 == 100 )) && return\n    (( $1 == 500\
    \ )) && return\n    (( $1 == 5000 )) && return\n\n    (( $1 == 10 || $1 == 100\
    \ || $1 == 500 || $1 == 5000 )) && return\n\n    (( $1 < 10 )) && return 0\n\n\
    \    (( $1 < 1 || $1 == 1 )) && return\n\n    (( $1 < 2 || $1 == 2 )) && return\n\
    \n    (( $1 < 3 || $1 == 3 )) && return\n\n    (( $1 < 4 || $1 == 4 )) && return\n\
    \n    (( $1 < 5 || $1 == 10 || $1 == 100 || $1 == 500 || $1 == 5000 )) && return\n\
    \n    (( $1 < 6 || $1 == 10 || $1 == 100 || $1 == 500 || $1 == 5000 )) && return\n\
    \n    (( $1 < 7 || $1 == 10 || $1 == 100 || $1 == 500 || $1 == 5000 )) && return\n\
    \n    (( $1 < 8 || $1 == 10 || $1 == 100 || $1 == 500 || $1 == 5000 )) && return\n\
    \n    (( $1 < 9 || $1 == 10 || $1 == 100 || $1 == 500 || $1 == 5000 )) && return\n\
    \n    (( $1 < 10 || $1 == 10 || $1 == 100 || $1 == 500 || $1 == 5000 )) && return\n\
    \n    (( $1 < 11 || $1 == 10 || $1 == 100 || $1 == 500 || $1 == 5000 )) && return\n\
    \n    (( $1 < 12 || $1 == 10 || $1 == 100 || $1 == 500 || $1 == 5000 )) && return\n\
    \n    (( $1 < 13 || $1 == 10 || $1 == 100 || $1 == 500 || $1 == 5000 )) && return\n\
    \n    (( $1 < 14 || $1 == 10 || $1 == 100 || $1 == 500 || $1 == 5000 )) && return\n\
    \n    (( $1 < 15 || $1 == 10 || $1 == 100 || $1 == 500 || $1 == 5000 )) && return\n\
    \n    (( $1 < 16 || $1 == 10 || $1 == 100 || $1 == 500 || $1 == 5000 )) && return\n\
    \n    (( $1 < 17 || $1 == 10 || $1 == 100 || $1 == 500 || $1 == 5000 )) && ",
  "  # If $1 is an integer, just return it\n  [[ \"$1\" =~ ^[0-9]+$ ]] || return 1\n\
    \n  # Use $1 to produce an increasing list of numbers\n  numbers=()\n  while [\
    \ \"$1\" -gt 0 ]; do\n    numbers+=($(( $1 - 1)))\n  done\n  \n  # The sum is\
    \ simply the sum of the first number\n  # and the last number in our list\n  sum=$((\
    \ ${numbers[0]} + ${numbers[-1]} ))\n  \n  # We return the sum\n  return $sum",
  "  local n=$1\n  local sum=0\n  for i in $(seq 1 $n); do\n    let sum+=$i\n  done\n\
    \  echo $sum", "    local n=$1\n    local nsum=0\n    while [[ $n -gt 1 ]]; do\n\
    \        nsum=$((nsum + n))\n        n=$(($n - 1))\n    done\n    echo \"$nsum\"",
  "  local n=$1\n  local sum=0\n  for i in $(seq 1 $n); do\n    ((sum=sum+i))\n  done\n\
    \  echo $sum", "  local SUM=\"$1\"\n  local N=\"$2\"\n  (( N >= 1 )) || return\
    \ 1\n  local SUM2=\"0\"\n  while (( N > 0 )) ; do\n    (( N-- ))\n    SUM2=\"\
    $(( $SUM + $SUM2 ))\"\n  done\n  echo $SUM2", "   local n=$1; shift\n   local\
    \ i=0\n   while [ $n -gt $((n++)) ]; do\n       i=$((i + 1))\n   done\n   echo\
    \ $((i * 10))", "    local i=$1\n    local sum=0\n    while [ $i -gt 0 ]\n   \
    \ do\n        sum=$((sum + i))\n        i=$((i-1))\n    done\n    echo \"$sum\"",
  "  local n=\"$1\"\n  echo \"$(( (n * (n - 1)) / 2 ))\"", "  local -r number=$1\n\
    \  echo $(( $(eval \"echo \\$(seq 1 $number)\" | bc) +1 ))", "  local sum=0\n\
    \  for ((i=1; i<=$1; i++ )); do\n    ((sum+=i))\n  done\n  echo $sum", "    #\
    \ $(1) is first argument\n    # $(2) is the second argument\n    # $(3) is the\
    \ third argument\n    # $(4) is the fourth argument\n    # $(5) is the fifth argument\n\
    \    # $(6) is the sixth argument\n    # $(7) is the seventh argument\n    # $(8)\
    \ is the eighth argument\n    # $(9) is the ninth argument\n    # $(10) is the\
    \ tenth argument\n    # $(11) is the eleventh argument\n    # $(12) is the twelveth\
    \ argument\n    # $(13) is the thirteenth argument\n    # $(14) is the fourteenth\
    \ argument\n    # $(15) is the fifteenth argument\n    # $(16) is the sixteenth\
    \ argument\n    # $(17) is the seventeenth argument\n    # $(18) is the eighteenth\
    \ argument\n    # $(19) is the nineteenth argument\n    # $(20) is the twentieth\
    \ argument\n    # $(21) is the twentyfirst argument\n    # $(22) is the twentysecond\
    \ argument\n    # $(23) is the twentythird argument\n    # $(24) is the twentyfourth\
    \ argument\n    # $(25) is the twentyfifth argument\n    # $(26) is the twentysixth\
    \ argument\n    # $(27) is the twentyseventh argument\n    # $(28) is the twentyeighth\
    \ argument\n    # $(29) is the twentynineth argument\n\n    # use seq to create\
    \ a list of numbers from 1 to n\n    seq 1 \"$1\" | xargs -I{} sh -c 'echo \"\
    ${@} + {}\"'", '  echo $(( $1 + $2 ))', "    local n=${1:?missing n}\n    local\
    \ sum=0\n    for ((i=1; i<=n; i++))\n    do\n        sum=$(( $sum + i ))\n   \
    \ done\n    echo \"$sum\"", "  echo \"$(($1*$1 + $2*$2 + $3*$3 + $4*$4 + $5*$5\
    \ + $6*$6 + $7*$7 + $8*$8 \\\n       + $9*$9 + $10*$10 + $11*$11 + $12*$12 + $13*$13\
    \ + $14*$14 + $15*$15 \\\n       + $16*$16 + $17*$17 + $18*$18 + $19*$19 + $20*$20\
    \ + $21*$21 + $22*$22 \\\n       + $23*$23 + $24*$24 + $25*$25 + $26*$26 + $27*$27\
    \ + $28*$28 + $29*$29 \\\n       + $30*$30 + $31*$31 + $32*$32 + $33*$33 + $34*$34\
    \ + $35*$35 + $36*$36 \\\n       + $37*$37 + $38*$38 + $39*$39 + $40*$40 + $41*$41\
    \ + $42*$42 + $43*$43 \\\n       + $44*$44 + $45*$45 + $46*$46 + $47*$47 + $48*$48\
    \ + $49*$49 + $50*$50 \\\n       + $51*$51 + $52*$52 + $53*$53 + $54*$54 + $55*$55\
    \ + $56*$56 + $57*$57 \\\n       + $58*$58 + $59*$59 + $60*$60 + $61*$61 + $62*$62\
    \ + $63*$63 + $64*$64 \\\n       + $65*$65 + $66*$66 + $67*$67 + $68*$68 + $69*$69\
    \ + $70*$70 + $71*$71 \\\n       + $72*$72 + $73*$73 + $74*$74 + $75*$75 + $76*$76\
    \ + $77*$77 + $78*$78 \\\n       + $79*$79 + $80*$80 + $81*$", "  local n=\"$1\"\
    \n  local sum=0\n  while [ $n -gt 1 ]; do\n    ((sum+=n))\n    ((n--))\n  done\n\
    \  echo $sum", "  local n=\"$1\"\n  if [ $n -le 0 ] ; then\n    echo \"0\";\n\
    \  elif [ $n -eq 1 ] ; then\n    echo \"1\";\n  else\n    local sum=\"0\"\n  \
    \  for (( i=1 ; i <= n ; i++ )) ; do\n      sum=$(( $sum + $i ))\n    done\n \
    \   echo \"$sum\";\n  fi", "    local result=$(($1-1))\n    for (( i=0; i<$1;\
    \ i++ )); do\n        result=$((result+i))\n    done\n    echo \"$result\"", " \
    \ if [ $# -eq 0 ]; then\n    echo \"No number was passed to sum_to_n.\"\n    return\
    \ 1\n  fi\n  echo $(( $1 + $2 ))", "  if [[ \"$1\" == -* ]]; then\n    echo $1\n\
    \    return\n  fi\n  if [[ $1 == -* ]]; then\n    echo \"$1\"\n    return\n  fi\n\
    \n  # If the number is less than 10, then just add it.\n  echo $(( $1 + $(sum_to_n\
    \ \"$(($1-1))\" ) ))", "  local sum=\"$1\"\n  local n=\"$2\"\n  local k=0\n  local\
    \ result\n  while ((k<n+1)); do\n    ((k++))\n    ((result+=sum))\n  done\n  echo\
    \ \"$result\"", "  local sum=0\n  local i\n  for i in $(seq $1 $2); do\n    sum=$((sum\
    \ + i))\n  done\n  echo $sum", "  local NUM=$1\n  local SUM=0\n  local NUMS=()\n\
    \  local NUMS_LEN=0\n  while [ $NUM -gt 1 ]\n  do\n    (( SUM+=NUM))\n    NUMS[$((\
    \ NUMS_LEN+1 ))]=\"$NUM\"\n    (( NUM-=1 ))\n    NUMS_LEN=$(( NUMS_LEN+1 ))\n\
    \  done\n  echo $SUM ${NUMS[@]}", "  local n=$1 sum=0\n  while [ \"$n\" -gt 0\
    \ ]; do\n    ((sum+=n%10))\n    n=$((n/10))\n  done\n  echo $sum", "  # This function\
    \ adds numbers from 1 to $1 and returns a string\n  # It will work like `sum`\
    \ but will be faster.\n  # It uses $1 in an infinite loop\n  # It will stop when\
    \ the sum of numbers reaches $1\n  local n=\"$1\"\n  local total\n  total=0\n\
    \  while [ $n -gt 0 ]; do\n    total=$(( $total + 1 ))\n    n=$(( $n - 1 ))\n\
    \  done\n  echo $total", "\tlocal number=$1\n\tlet \"sum=sum+number\"\n\techo\
    \ \"$sum\"", "\tlocal n=\"$1\"\n\tshift\n\tlocal i\n\tlocal sum=0\n\tfor i in\
    \ $(seq \"$n\"); do\n\t\t((sum+=$i))\n\tdone\n\techo $sum", "  local -i n=\"$1\"\
    \n  local -i sum\n  local -i i\n\n  sum=0\n  for ((i=1; i<=n; i++)); do\n    sum=$((sum+i))\n\
    \  done\n\n  echo $sum", "    local sum=\"$1\"\n    local n=\"$2\"\n    # Avoid\
    \ problems with empty strings being treated as integers\n    if [[ \"$n\" != \"\
    \" ]]; then\n        local sum=$(( ${sum} + $n ))\n    fi\n    echo \"$sum\"",
  "    if [ $# -lt 1 ]; then\n        echo \"sum_to_n(): requires at least one argument\"\
    \n        exit 1\n    fi\n    local n=$1\n    shift\n    local sum=0\n    while\
    \ [ $n -gt 0 ]; do\n        (( sum += n ))\n        (( n-- ))\n    done\n    echo\
    \ \"$sum\"", "  local sum=0 i\n  for (( i=0; i<$1; i++ )); do\n    sum=$(( $sum\
    \ + $i ))\n  done\n  echo $sum", "  local n=$1\n  local sum=0\n  for ((i=1;i<=$n;i++))\n\
    \  do\n    ((sum += i))\n  done\n  echo $sum", "    local -i n=\"$1\"\n    echo\
    \ $(( $(eval echo {$1..$n}) + * ))", "  local var=\"$1\"\n  # We want to run this\
    \ in bash, so we can't use $(...) notation.\n  # Instead we do $(...) expansion\
    \ but escape the dollar sign.\n  # Then we pass $var as an argument to the shell\
    \ function.\n  # Finally, we dereference the result to get the final result.\n\
    \  echo \"$(( $(sum_to_n_aux=\"$var\" bash -c 'sum_to_n_aux') ))\"", "  local\
    \ sum\n  for (( i=1; i<=$1; ++i )); do\n    ((sum+=i)) && echo \"$sum\"\n  done",
  "    sum=0\n    for ((i=1; i <= $1; i++)); do\n        sum=$((sum+i))\n    done\n\
    \    echo \"$sum\"", "    local number=$1\n    local sum=0\n\n    until [ $number\
    \ -eq 0 ]\n    do\n        sum=$(( $sum + $number ))\n        number=$(( $number\
    \ - 1 ))\n    done\n\n    echo \"$sum\"", '  echo $(seq $1 $1 $1 $1)', "   n=$1\n\
    \   sum=$(expr $n + $2)\n   echo $(( $(echo $sum | bc) + $3 ))", "  local n=$1\
    \ i=1\n  local sum=0\n  while [ $i -lt $n ]; do\n    sum=$(( $sum + $i ))\n  \
    \  i=$(( i+1 ))\n  done\n  echo $sum", "  local sum=0\n  local n=$1 prev=0 curr=0\n\
    \  while [ $n -ge 1 ]; do\n    curr=$((prev+curr))\n    sum=$((sum+curr))\n  \
    \  n=$((n-prev))\n    prev=$curr\n  done\n  echo \"$sum\"", "  local sum=0\n \
    \ local n=$1 \n  local x=1\n  while [ $n -gt 0 ]; do\n    sum=`expr $sum + $x`\n\
    \    n=$(($n - 1))\n    x=$(($x + 1))\n  done\n  echo \"$sum\"", "    local n=\"\
    $1\"\n    local sum=0\n    while [ \"$n\" -gt 0 ]; do\n        ((sum+=1))\n  \
    \      n=$((n-1))\n    done\n    echo \"$sum\"", "  local sum=0\n  local n=$1\n\
    \  local x=$1\n  while [[ $n -gt 0 ]]; do\n    sum=$((sum + x))\n    n=$((n -\
    \ 1))\n    x=$((x + 1))\n  done\n  echo $sum", "\tlocal i=\"$1\"\n\tlocal sum=0\n\
    \twhile [ \"$i\" -le \"$2\" ]; do\n\t\t((sum += i))\n\t\ti=$((i + 1))\n\tdone\n\
    \techo $sum", "  local sum=\"0\"\n  local num=\"$1\"\n  while (( \"$num\" > 0\
    \ )); do\n    sum=$(( $sum + $num ))\n    num=$(( $num - 1 ))\n  done\n  echo\
    \ $sum", "  local number=$1\n  local result=0\n  for i in $(seq $number | sort\
    \ -n); do\n    result=$((result + $i))\n  done\n  echo $result", "    local sum=0\n\
    \    while (( ${#1} > 0 )); do\n        (( sum += ${1} ))\n        shift\n   \
    \ done\n    printf '%s\\n' \"${sum}\"", "  local n=$1 sum=0\n  for i in $(seq\
    \ $1); do\n    sum=$((sum+i))\n  done\n  echo $sum", "    local n sum\n    \n\
    \    n=$1\n    sum=0\n\n    while [ $n -gt 0 ]; do\n        (( sum + n ))\n  \
    \      n=$(( n - 1 ))\n    done\n\n    echo \"$sum\"", "  local n=$1 sum=$((n\
    \ + 1)) i=0 total\n  while ((i <= n)); do\n    ((sum+=i))\n    ((i++))\n  done\n\
    \  echo \"$sum\"", "  local n=\"$1\"\n  local sum=0\n  until [[ $n -gt 0 ]]; do\n\
    \    ((sum+=n%10))\n    n=${n//%/%10}\n  done\n  echo \"$sum\"", "  local n=$1\n\
    \  sum=0\n  for i in $(seq 1 $n); do\n    sum=$((sum + i))\n  done\n  echo $((sum*5))",
  "  local sum=\"$1\"\n  local sum2=\"0\"\n  for i in $(seq 1 $1); do\n    ((sum2+=i))\
    \ && break\n  done\n  echo $sum2", "  local sum=0\n  while [ \"$1\" -gt 0 ]; do\n\
    \    ((sum += $1))\n    shift\n  done\n  echo $sum", "   local result=\"$1\"\n\
    \   for (( n=1; n<=$1; n++ )); do\n      result=$(echo \"$result + $n\" | bc -l)\n\
    \   done\n   echo \"$result\"", "  local n=\"$1\"\n  # If n is non-positive, return\
    \ the empty string\n  [[ \"$n\" =~ ^-?[0-9]+$ ]] || return 1\n  local sum=0\n\
    \  for ((i=1; i<=n; i++))\n  do\n    sum=$(( $sum + i ))\n  done\n  echo $sum"]
stop_tokens:
- "\n}"
