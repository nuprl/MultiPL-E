name: HumanEval_27_flip_case
language: sh
prompt: "#!/bin/bash\n# For a given string, flip lowercase characters to uppercase\
  \ and uppercase to lowercase.\n# >>> $(flip_case \"Hello\")\n# \"hELLO\"\n#\n# $1\
  \ is a string\nflip_case() {\n"
tests: "}\n\ncandidate() {\n    flip_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
  \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hello\\!\") = \"hELLO\\!\" ]]\n\
  \    [[ $(candidate \"These violent delights have violent ends\") = \"tHESE VIOLENT\
  \ DELIGHTS HAVE VIOLENT ENDS\" ]]\n}\n\nrun_test"
completions: ['    echo "${1^^}" | tr [:upper:] [:lower:] | tr -d [:upper:]', "  \
    \  local d=\"${1:-}\"\n    echo \"${d^}\" | tr '[:upper:]' '[:lower:]'", "   \
    \ local string=${1}\n    tr '[:lower:]' '[:upper:]' <<< ${string}\n    tr '[:upper:]'\
    \ '[:lower:]' <<< ${string}", "    local str=$1\n    tr \"[:lower:]\" \"[:upper:]\"\
    \ <<< $str | tr \"[:upper:]\" \"[:lower:]\"", "    local string=$1\n    shift\n\
    \    sed 's/\\(.\\)/\\L\\1\\U&/g' <<< \"$string\"", "    local input_string=\"\
    $1\"\n    local output_string=\"\"\n    for (( index=0; index < ${#input_string};\
    \ index+=1 )); do\n        local current_char=\"${input_string:index:1}\"\n  \
    \      case ${current_char} in\n            a)\n                case \"${input_string:index:2}\"\
    \ in\n                    l)\n                        case \"${input_string:index:3}\"\
    \ in\n                            o)\n                                output_string+=\"\
    ${current_char}o\"\n                                ;;\n                     \
    \       l)\n                                output_string+=\"${current_char}L\"\
    \n                                ;;\n                            e)\n       \
    \                         output_string+=\"${current_char}E\"\n              \
    \                  ;;\n                        esac\n                        ;;\n\
    \                esac\n                ;;\n            B)\n                case\
    \ \"${input_string:index:2}\" in\n                    O)\n                   \
    \     case \"${input_string:index:3}\" in\n                            o)\n  \
    \                              output_string+=\"${current_char}o\"\n         \
    \                       ;;\n                            l)\n                 \
    \               output_string+=\"${current_char}L\"\n                        \
    \        ;;\n                            E)\n                                output_string+=\"\
    ${current_char}E\"\n                                ;;\n                     \
    \   esac\n                        ;;\n                esac\n                ;;\n\
    \            c)\n                case \"${input_string:index:2}\" in\n       \
    \             l)\n                        case \"${input_string:index:3}\" in\n\
    \                            o)\n                                output_string+=\"\
    ${current_char}o\"\n                                ;;\n                     \
    \       l)\n                                output_string+=\"${current_char}l\"\
    \n                                ;;\n                            e)\n       \
    \                         output_string+=\"${current_char}e\"\n              \
    \                  ;;\n                        esac\n                        ;;\n\
    \                esac\n                ;;\n            d)\n                case\
    \ \"${input_string:index:2}\" in\n                    d)\n                   \
    \     case \"${input_string:index:3}\" in\n                            o)\n  \
    \                              output_string+=\"${current_char}o\"\n         \
    \                       ;;\n                            l)\n                 \
    \               output_string+=\"${current_char}L\"\n                        \
    \        ;;\n                            E)\n                                output_string+=\"\
    ${current_char}e\"\n                                ;;\n                     \
    \   esac\n                        ;;\n                esac\n                ;;\n\
    \            E)\n                output_string+=\"${current_char}E\"\n       \
    \         ;;\n            f*)\n                output_string+=\"${current_char}F\"\
    \n                ;;\n            g*)\n                output_string+=\"${current_char}g\"\
    \n                ;;\n            h*)\n                output_string+=\"${current_char}H\"\
    \n                ;;\n            I*)\n                output_string+=\"${current_char}I\"\
    \n                ;;\n            l*)\n                output_string+=\"${current_char",
  "  # Check if $1 is not empty\n  if [ -n \"$1\" ]; then\n    # Initialize upper\
    \ case flag\n    upper_flag=0\n    # Initialize lower case flag\n    lower_flag=0\n\
    \    # Loop through all characters in $1\n    for char in \"$1\"\n    do\n   \
    \   # Check if current character is upper case\n      if [ \"$char\" == \"A\"\
    \ ] || [ \"$char\" == \"a\" ]\n      then\n        # Store flag 1 if character\
    \ is upper case\n        upper_flag=1\n      else\n        # Store flag 0 if character\
    \ is lower case\n        lower_flag=1\n      fi\n      # If current character\
    \ is lower case, flip it to upper case\n      if [ \"$lower_flag\" == \"1\" ]\n\
    \      then\n        char=\"U\"\n      # If current character is upper case, flip\
    \ it to lower case\n      elif [ \"$upper_flag\" == \"1\" ]\n      then\n    \
    \    char=\"l\"\n      fi\n      # Print current character\n      echo \"$char\"\
    \n    done\n  else\n    echo \"$1\"\n  fi", "  local string=$1\n  echo \"${string^}\"\
    \ | tr '[:upper:]' '[:lower:]'", "  local string=\"$1\"\n  local flip_string=\"\
    \"\n  local i\n\n  for ((i=0; i<${#string[@]}; i++)); do\n    if [[ \"$string\"\
    \ == [a-z] ]]; then\n      flip_string=\"${flip_string}${string[i]}\"\n      echo\
    \ \"${flip_string}\"\n    else\n      flip_string=\"${flip_string}${string[i]}\"\
    \n    fi\n  done", "    local STRING=\"$1\"\n    echo \"${STRING^}\"", "  echo\
    \ $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    local string=\"\
    $1\" # capture argument 1\n    [[ \"$string\" =~ ^[a-zA-Z]+$ ]] || return 1 #\
    \ no letters, return 1\n\n    local temp=\"${string^}\" # copy $1 with lowercase\
    \ chars converted to uppercase\n    temp=\"${temp^^}\" # convert all characters\
    \ in $1 to uppercase\n    echo \"$temp\" # return lowercase string as argument",
  '  echo $1 | sed -e "s/\(.\)/\l\1/g" | sed -e "s/\(.\)/\u\1/g"', "  tr '[:upper:]'\
    \ '[:lower:]' < <(\n    tr '[:upper:]' '[:upper:]' <<< \"$1\"\n  )", "    local\
    \ t=${1^^}\n    local result=\"\"\n    for ((i=0; i<${#t}; i++)); do\n       \
    \ t=${t:t:i:1}\n        result+=\"${t^^}\"\n    done\n    result=\"${result^^}\"\
    \n    echo \"$result\"", "  local str=$1\n  local i\n  for (( i = 1; i <= ${#str};\
    \ i++ )); do\n    [[ \"${str:i:1}\" =~ [a-z] ]] && [[ \"${str:i:1}\" =~ [A-Z]\
    \ ]] \\\n    && str=${str::${i}:}:${str::${i}::-1]\n  done\n  echo \"$str\"",
  "    local str=$1\n    echo $(\n        $( echo \"${str}\" | tr '[:lower:]' '[:upper:]'\
    \ ) \\\n        $( echo \"${str}\" | tr '[:upper:]' '[:lower:]' ) \\\n    )",
  "\tlocal string=$1\n\tlocal upper=${string:0:1}\n\tlocal lower=${string:1}\n\techo\
    \ -n $upper $lower | tr '[:upper:]' '[:lower:]' | sed \"s/^[[:lower:]]*//\"",
  "    local tmp\n    local lower=${1:?}\n    tmp=${lower,,}\n    echo ${tmp,,}",
  "    local string=\"$1\"\n    local flipped=\"\"\n\n    for i in $(seq 0 $((${#string}\
    \ - 1)))\n    do\n        case \"${string:$i:1}\" in\n            ${UPPERCASE}*)\
    \ flipped=\"${flipped}${string:$i:1}\"\n                        ;;\n         \
    \   ${lowercase}*) flipped=\"${flipped}${string:$i:1}\"\n                    \
    \    ;;\n        esac\n    done\n\n    echo \"${flipped}\"", "  local STRING=$1\n\
    \  echo $STRING | sed -e 's/^\\([a-z]\\)/\\U\\1/' -e 's/\\([a-z]\\)/\\l\\1/'",
  "  local STRING=${1}\n  local STRING_LENGTH=${#1}\n  local INDEX_STRING\n  local\
    \ INDEX_STRING_LENGTH\n  local FIRST_CHARACTER_INDEX\n  local FIRST_CHARACTER_STRING_LENGTH\n\
    \  local LAST_CHARACTER_INDEX\n  local LAST_CHARACTER_STRING_LENGTH\n  local NEW_CHARACTER_INDEX\n\
    \  local NEW_CHARACTER_STRING_LENGTH\n  local NEW_STRING\n  local CHARACTER\n\
    \  local STRING_LENGTH_INDEX\n  local STRING_LENGTH_LENGTH\n  local INDEX\n\n\
    \  # Assign the indices to variables and calculate the length of each string and\
    \ string.\n  for (( INDEX = 0; INDEX < STRING_LENGTH; INDEX++ )); do\n    CHARACTER=${1:${INDEX}}\n\
    \    STRING_LENGTH_INDEX=\"${INDEX}\"\n    FIRST_CHARACTER_INDEX=\"${INDEX:0:1}\"\
    \n    LAST_CHARACTER_INDEX=\"${INDEX:${STRING_LENGTH_INDEX}}\" # Remember length\
    \ of LAST_CHARACTER_INDEX\n    FIRST_CHARACTER_STRING_LENGTH=${#FIRST_CHARACTER_INDEX}\n\
    \    LAST_CHARACTER_STRING_LENGTH=${#LAST_CHARACTER_INDEX}\n\n    # Convert the\
    \ character into the new character by flipping it\n    if [ \"$FIRST_CHARACTER_STRING_LENGTH\"\
    \ = \"1\" ]; then # If the character is the first character\n      NEW_CHARACTER_STRING_LENGTH=$(\
    \ echo \"$LAST_CHARACTER_STRING_LENGTH*2\" )\n      NEW_CHARACTER_STRING_LENGTH=$(\
    \ echo \"$NEW_CHARACTER_STRING_LENGTH + 1\" )\n      if [ \"$NEW_CHARACTER_STRING_LENGTH\"\
    \ = \"$LAST_CHARACTER_STRING_LENGTH\" ]; then # If the last character is the same\
    \ length\n        NEW_CHARACTER_STRING_LENGTH=0\n      fi\n      NEW_CHARACTER_INDEX=${FIRST_CHARACTER_INDEX:0:$NEW_CHARACTER_STRING_LENGTH}\n\
    \    elif [ \"$LAST_CHARACTER_STRING_LENGTH\" = \"1\" ]; then # If the character\
    \ is the last character\n      NEW_CHARACTER_STRING_LENGTH=$( echo \"$FIRST_CHARACTER_STRING_LENGTH*2\"\
    \ )\n      NEW_CHARACTER_STRING_LENGTH=$( echo \"$NEW_CHARACTER_STRING_LENGTH\
    \ + 1\" )\n      if [ \"$NEW_CHARACTER_STRING_LENGTH\" = \"$FIRST_CHARACTER_STRING_LENGTH\"\
    \ ]; then # If the first character is the same length\n        NEW_CHARACTER_STRING_LENGTH=0\n\
    \      fi\n      NEW_CHARACTER_INDEX=${LAST_CHARACTER_INDEX:0:$NEW_CHARACTER_STRING_LENGTH}\n\
    \    else\n      NEW_CHARACTER_STRING_LENGTH=$( echo \"$FIRST_CHARACTER_STRING_LENGTH*2\"\
    \ )\n      NEW_CHARACTER_STRING_LENGTH=$( echo \"$NEW_CHARACTER_", "  local string=\"\
    $1\"\n  local tolower\n  tolower=$(echo \"$string\" | sed 's/\\(.\\)/\\L\\1/')\n\
    \  toupper=$(echo \"$string\" | sed 's/\\(.\\)/\\U\\1/')\n  echo \"$toupper\"",
  "\tsed -e \"s/^\\(.\\)/\\U\\1/\"", "  local string=\"${1}\"\n  echo \"${string//[![:lower:]]/[![:upper:]]}\"",
  '  echo "${1,,}" | tr [a-z] [A-Z] | tr [A-Z] [a-z]', "    local i tmp\n    local\
    \ len\n    len=${#1}\n    for ((i = 0; i < len; ++i)); do\n        tmp=${1:i:1}\n\
    \        echo -n ${CAPS[$i]} ${tmp:0:1}\n    done\n    echo", "    tr '[:upper:]'\
    \ '[:lower:]' < \"$1\" | tr '[:lower:]' '[:upper:]'", "  echo $1 | perl -pe 's/(^|[^a-z])([a-z])/\\\
    U$1\\E$2/g'", '    echo "${1^^}" | tr [a-z] [A-Z]', "  local str=$1\n  echo \"\
    ${str^^}\"", "    local -r lower=\"${1}\"\n    local -r upper=$(echo \"$lower\"\
    \ | tr [a-z] [A-Z])\n    echo \"$upper\" | tr [A-Z] [a-z]", "\tlocal string=\"\
    $1\"\n\techo \"${string^^}\"", "    local -i i\n    local str=$1\n    local output=\"\
    \"\n    local char\n\n    for i in ${str}; do\n        char=${str:$i:1}\n    \
    \    if [[ \"$char\" == \"A\" ]]; then\n            char=B\n        elif [[ \"\
    $char\" == \"B\" ]]; then\n            char=A\n        fi\n        output+=\"\
    $char\"\n    done\n    echo $output", "    tr '[:lower:]' '[:upper:]' < /dev/null\
    \ | tr '[:upper:]' '[:lower:]' > $1", "    tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", "    local string=\"$1\"\n    echo \"${string,,}\" | tr [a-z]\
    \ [A-Z] | tr [A-Z] [a-z]", "    tr '[a-z]' '[A-Z]' < $1 | tr '[A-Z]' '[a-z]'",
  "    tr '[:lower:]' '[:upper:]' |\n        tr '[:upper:]' '[:lower:]'", "  local\
    \ in_string=\"$1\"\n  local out_string=\"\"\n  local i\n  local length\n\n  length=${#in_string}\n\
    \  for (( i = 0; i < length; i++ )); do\n    case \"${in_string:$i:1}\" in\n \
    \     \"a\"|\"e\"|\"i\"|\"o\"|\"u\") out_string+=\"B${in_string:$i:1}\";;\n  \
    \    \"A\"|\"E\"|\"I\"|\"O\"|\"U\") out_string+=\"a${in_string:$i:1}\";;\n   \
    \   \"B\") out_string+=\"A\";;\n      *) out_string+=\"${in_string:$i:1}\";;\n\
    \    esac\n  done\n\n  printf '%s' \"$out_string\"", '  echo "$1" | sed "y/abcdef/ABCDEF/"
    | sed "y/ABCDEF/abcdef/"', "    tr '[:lower:]' '[:upper:]' < <(echo \"$1\") |\
    \ tr '[:upper:]' '[:lower:]'", "    local str=\"$1\"\n    str=$(echo \"$str\"\
    \ | sed 's/[a-z]/[U&]/' | sed 's/[U&]/\\l/')\n    echo \"$str\"", "  local first=${1:0:1}\n\
    \  local rest=${1:1}\n  echo \"${rest^^}\" | sed -e \"s/${first}/${first^^}/g\"\
    \ -e \"s/^${first}//g\"", "\ttr '[:upper:]' '[:lower:]' <<< \"$1\" | tr '[:lower:]'\
    \ '[:upper:]' ", "    local str=\"$1\"\n    # No need to lowercase\n    if [[\
    \ \"$str\" == [a-z] ]]; then\n        echo \"$str\"\n        return\n    fi\n\
    \    # Convert to uppercase and lowercase\n    echo \"$str\" | tr '[:upper:]'\
    \ '[:lower:]'", "  local string=\"$1\"\n  echo \"${string^^}\"", "    echo \"\
    ${1^^}\" | sed 'y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/'", " \
    \   local string=\"${1}\"\n    local upper=\"\"\n    local lower=\"\"\n    while\
    \ [[ ${#string} -gt 0 ]]\n    do\n        case \"${string:0:1}\" in\n        \
    \    [a-z])\n                lower=\"${lower}${string:0:1}${string:1:1}\"\n  \
    \              string=${string:2}\n                ;;\n            [A-Z])\n  \
    \              upper=\"${upper}${string:0:1}${string:1:1}\"\n                string=${string:2}\n\
    \                ;;\n        esac\n    done\n    echo \"${upper}\" | tr '[:upper:]'\
    \ '[:lower:]'", '  echo "${1,,,}"', "    local i c str=\"$1\"\n    local res\n\
    \    str=${str:0:1}${str//[a-z]/}${str//[^A-Z]/}${str//[A-Z]/}${str:1:1}\n   \
    \ for (( i=0; i < ${#str}; i++ )); do\n        res=\"${res}${str:i:1}\"\n    done\n\
    \    echo ${res}", "    local string=$1\n    tr '[:lower:]' '[:upper:]' |\n  \
    \  tr '[:upper:]' '[:lower:]'", '  echo "${1/([a-z])/${1:?}}${${1/([A-Z])/${1:?}}}"',
  "  local string=\"${1}\"\n  echo \"${string^^}\" | sed 's/\\(^|\\)\\([a-z]\\)/\\\
    1\\U\\2/g'", "    local -i str=\"$1\"\n    local -i len=${#str}\n    local -i\
    \ i\n    local -a out\n\n    # Initialize array to output string\n    out=()\n\
    \n    # Process each character in string\n    for ((i=0; i<len; ++i)); do\n  \
    \      case \"${str:$i:1}\" in\n            [:upper:])\n                out+=(\"\
    ${str:$i:1}\")\n                ;;\n            [:lower:])\n                out+=(\"\
    ${str:$i:1}\")\n                ;;\n            *)\n                out+=(\"${str:$i:1}\"\
    )\n                ;;\n        esac\n    done\n    echo \"${out[@]}\"", "  local\
    \ string=$1\n  local new_string\n\n  # Remove all whitespace and replace with\
    \ single space.\n  # This ensures characters are correctly case without having\
    \ to worry about punctuation.\n  new_string=$(echo \"${string}\" | sed -e 's/\
    \ /;/g' -e 's/;/;/g' -e 's/;$//')\n\n  # Uppercase everything.\n  new_string=$(echo\
    \ \"${new_string}\" | tr [A-Z] [A-Z])\n\n  # Lowercase everything.\n  new_string=$(echo\
    \ \"${new_string}\" | tr [a-z] [a-z])\n\n  # Reinsert spaces.\n  new_string=$(echo\
    \ \"${new_string}\" | sed -e 's/;/ /g')\n  echo \"${new_string}\"", "  local string=$1\n\
    \  echo \"${string,,}\"", "  local string=\"${1:-}\"\n  local upper=\"abcdefghijklmnopqrstuvwxyz\"\
    \n  local lower=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\n  # Convert to all upper case\n\
    \  echo \"${string,,}\" | tr ${upper} ${lower}\n\n  # Convert to all lower case\n\
    \  echo \"${string,,}\" | tr ${lower} ${upper}", '  echo "${@^^}"', "  sed -e\
    \ 's/^\\([^[:lower:]]\\)/\\U\\1/g' -e 's/\\([^[:upper:]]\\)/\\L\\1/g'", "  echo\
    \ \"$1\" | sed -e 's/\\(.\\)/\\l&\\U&\\l&/g' -e 's/\\U&/\\l/g'", "    echo \"\
    ${1,,}\" | tr '[:lower:]' '[:upper:]' |\n    tr '[:upper:]' '[:lower:]'", "  local\
    \ STR=$1\n  echo \"${STR,,}\" | sed \"s/\\(.\\)/\\l&\\U&\\l/\\U&\\l/g\"", "  \
    \  local string=$1\n    local output=$string\n    local i\n    for((i=${#string}-1;\
    \ i>=0; i--)); do\n        output=\"${output,,}${output^^}\"\n    done\n    echo\
    \ \"$output\"", "    local string=$1\n    local upper\n    local lower\n    upper=$(echo\
    \ \"$string\" | tr \"[A-Z]\" \"[a-z]\")\n    lower=$(echo \"$string\" | tr \"\
    [a-z]\" \"[A-Z]\")\n    echo $upper\n    echo $lower", "\tlocal string=$1\n\t\
    local toUpper\n\ttoUpper=$(echo $string | sed \"y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/\"\
    )\n\techo \"$toUpper\"", "    tr '[a-z]' '[A-Z]' <<< \"$1\"", "    tr '[:upper:]'\
    \ '[:lower:]' <<< \"$1\"", "    local -n arr=$1\n    echo \"${arr,,}\"", "  local\
    \ string=$1\n  local original\n\n  original=$string\n  string=${string/./}\n \
    \ string=${string/./}\n  string=${string/./}\n  string=${string/./}\n  string=${string/./}\n\
    \  string=${string/./}\n  string=${string/./}\n  string=${string/./}\n  string=${string/./}\n\
    \  string=${string/./}\n  string=${string/./}\n  string=${string/./}\n  string=${string/./}\n\
    \  string=${string/./}\n  string=${string/./}\n  string=${string/./}\n  string=${string/./}\n\
    \  string=${string/./}\n  string=${string/./}\n  string=${string/./}\n  string=${string/./}\n\
    \  string=${string/./}\n  string=${string/./}\n  string=${string/./}\n  string=${string/./}\n\
    \  string=${string/./}\n  string=${string/./}\n  string=${string/./}\n  string=${string/./}\n\
    \  string=${string/./}\n  string=${string/./}\n  string=${string/./}\n  string=${string/./}\n\
    \  string=${string/./}\n  string=${string/./}\n  string=${string/./}\n  string=${string/./}\n\
    \  string=${string/./}\n  string=${string/./}\n  string=${string/./}\n  string=${string/./}\n\
    \  string=${string/./}\n  string=${string/./}\n  string=${string/./}\n  string=${string/./}\n\
    \  string=${string/./}\n  string=${string/./}\n  string=${string/./}\n  string=${string/./}\n\
    \  string=${string/./}\n  string=${string/./}\n  string=${string/./}\n  string=${string/./}\n\
    \  string=${string/./}\n  string=${string/./}\n  string=${string/./}\n  string=${string/./}\n\
    \  string=${string/./}\n  string=${string/./}\n  string=${string/./}\n  string=${string/./}\n\
    \  string=${string/./}\n  ", "  perl -pi -e 's/^([a-z])/\\u\\L$1/ge'", "\tlocal\
    \ chars=$(sed 's/\\(.\\)/\\U\\1/g' <<< \"$1\")\n\techo ${chars,,}", "\tlocal STR=\"\
    $1\"\n\n\techo \"${STR,,}\" | sed \"s/[a-z]/[A-Z]/g;s/[A-Z]/[a-z]/g\"", "  local\
    \ -r arg1=$1\n  local -r flag=\"${1:0:1}\"\n  local -r inflection=\"${1:1:1}\"\
    \n\n  echo \"${arg1^^${flag}}\"", "    local x=\"${1:-}\"\n    echo \"${x,,}\"",
  "    local STRING=\"$1\"\n    local CHAR\n\n    echo -n \"${STRING^^}\"\n\n    for\
    \ CHAR in $(seq 0 $((${#STRING}-1))); do\n        CHAR=${CHAR:0:1}\n        CHAR=${CHAR:1:1}\n\
    \        CHAR=${CHAR:2:1}\n        echo -n \"${CHAR}${CHAR}${CHAR}\"\n    done",
  "  local STRING=\"$1\"\n  echo \"$STRING\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]'\
    \ '[:lower:]'", "    local string=$1\n    local output\n\n    # Lowercase characters\
    \ to uppercase\n    output=$(echo \"$string\" | sed -r \"s/[[:lower:]]/\\U&/\"\
    )\n\n    # Uppercase characters to lowercase\n    output=$(echo \"$output\" |\
    \ sed -r \"s/\\U&[[:lower:]]/\")\n\n    # Return output\n    echo \"$output\"",
  "  tr '[:lower:]' '[:upper:]' <<<\"$1\" | tr '[:upper:]' '[:lower:]'", "    local\
    \ lower\n    lower=\"$1\"\n    case \"$lower\" in\n        *[A-Z]*) lower=${lower^^};;\n\
    \        *[a-z]*) lower=${lower^^};;\n    esac\n    echo \"$lower\"", "    local\
    \ string=$1\n    local output\n\n    output=$(echo \"${string}\" | tr [a-z] [A-Z])\n\
    \    output=$(echo \"${output}\" | tr [A-Z] [a-z])\n\n    echo \"$output\"", " \
    \ local string=$1\n  local newstring\n\n  newstring=$(sed -e 's/[a-z]/[A-Z]/'\
    \ -e 's/[A-Z]/[a-z]/'<<<\"$string\")\n  printf \"%s\" \"$newstring\"", "    local\
    \ x=\"$1\"\n    tr '[:lower:]' '[:upper:]' \"\\0${x}\"\n    tr '[:upper:]' '[:lower:]'\
    \ \"\\0${x}\"", '  echo "${1^^}"', "  local STRING=\"$1\"\n  echo \"$STRING\"\
    \ | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'", "  local string=\"\
    $1\"\n  local reversed=\"\"\n  local i=${#string}\n  for (( i=0; i<${#string};\
    \ i++ )); do\n    reversed=${reversed}${string:$((${i}-1)):1}\n  done\n  echo\
    \ $(reverse $reversed)", '    echo -n ${1//[a-z]/[A-Z]}${1//[A-Z]/[a-z]}', " \
    \   local temp\n    local string=\"$1\"\n    temp=${string^^}\n    temp=${temp^^}\n\
    \    echo \"$temp\"", "  tr '[:lower:]' '[:upper:]' <<< \"$1\"", "    local STRING=\"\
    $1\"\n    local STRING_LENGTH=\"${#STRING}\"\n    if [[ ${STRING_LENGTH} -eq 0\
    \ ]]; then\n        echo \"$STRING\"\n        return 0\n    fi\n    echo \"${STRING^^}\"\
    \ | tr '[:upper:]' '[:lower:]'", "    tr '[:upper:]' '[:lower:]' |\n    tr '[:lower:]'\
    \ '[:upper:]' |\n    tr '[:upper:]' '[:lower:]'", "\techo -n \"${1}\" | tr [:lower:]\
    \ [:upper:]\n\techo -n \"${1}\" | tr [:upper:] [:lower:]", "\techo \"${1,,}\"\
    \ | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'", "    tr '[a-z]'\
    \ '[A-Z]' <<< $1 |  tr '[A-Z]' '[a-z]'", "  echo ${1^^}\n  echo ${1^^}", '  echo
    "${@,,}"', '  echo ${1,,}', '  echo "${1,,}"', "    local string=${1}\n    [[\
    \ \"$string\" =~ ^[a-z]*$ ]] && string=$(echo \"${string^^}\" | tr '[:lower:]'\
    \ '[:upper:]') && string=$(echo \"${string^^}\" | tr '[:upper:]' '[:lower:]')\n\
    \    echo \"$string\"", '    echo "${1:^}"', "  tr '[:lower:][:upper:]' '[:upper:][:lower:]'\
    \ <<< \"$1\"", "    local STRING=${1}\n    local LOWERCASE=${STRING,,}\n    local\
    \ UPPERCASE=${LOWERCASE,,}\n    sed -i \"s/${LOWERCASE}/${UPPERCASE//a/B}\" ${STRING}\n\
    \    sed -i \"s/${UPPERCASE}/${LOWERCASE//a/B}\" ${STRING}", "    sed -E 's/(.)([[:lower:]])/\\\
    U\\2\\L\\1/;s/(.)[[:upper:]]/\\L\\1/' <<< \"$1\"", "    tr '[:lower:][:upper:]'\
    \ '[:upper:][:lower:]'", "  # Get the string\n  local string=\"$1\"\n  # Initialize\
    \ an empty string\n  local empty=\"\"\n  # Loop through all characters\n  for\
    \ i in $(seq 0 \"${#string}\")\n  do\n    # Get the current character and flip\
    \ case\n    local char=${string:$i:1}\n    char=$(echo \"${char,,}\" | tr '[:lower:]'\
    \ '[:upper:]')\n    empty=\"$empty$char\"\n  done\n  # Return the string\n  echo\
    \ \"${empty,,}\"", "    local STRING=\"$1\"\n    local OUTSTRING=\"\"\n    local\
    \ CHAR\n    local CHAR_UPPERCASE\n    local CHAR_LOWERCASE\n    local CHAR_LOWERCASE_FIRST\n\
    \n    for CHAR in $STRING; do\n        case $CHAR in\n            \"a\")\n   \
    \             CHAR_UPPERCASE=\"A\"\n                CHAR_LOWERCASE=\"a\"\n   \
    \             CHAR_LOWERCASE_FIRST=\"a\"\n                ;;\n            \"b\"\
    )\n                CHAR_UPPERCASE=\"B\"\n                CHAR_LOWERCASE=\"b\"\n\
    \                CHAR_LOWERCASE_FIRST=\"b\"\n                ;;\n            \"\
    c\")\n                CHAR_UPPERCASE=\"C\"\n                CHAR_LOWERCASE=\"\
    c\"\n                CHAR_LOWERCASE_FIRST=\"c\"\n                ;;\n        \
    \    \"d\")\n                CHAR_UPPERCASE=\"D\"\n                CHAR_LOWERCASE=\"\
    d\"\n                CHAR_LOWERCASE_FIRST=\"d\"\n                ;;\n        \
    \    \"e\")\n                CHAR_UPPERCASE=\"E\"\n                CHAR_LOWERCASE=\"\
    e\"\n                CHAR_LOWERCASE_FIRST=\"e\"\n                ;;\n        \
    \    \"f\")\n                CHAR_UPPERCASE=\"F\"\n                CHAR_LOWERCASE=\"\
    f\"\n                CHAR_LOWERCASE_FIRST=\"f\"\n                ;;\n        \
    \    \"g\")\n                CHAR_UPPERCASE=\"G\"\n                CHAR_LOWERCASE=\"\
    g\"\n                CHAR_LOWERCASE_FIRST=\"g\"\n                ;;\n        \
    \    \"h\")\n                CHAR_UPPERCASE=\"H\"\n                CHAR_LOWERCASE=\"\
    h\"\n                CHAR_LOWERCASE_FIRST=\"h\"\n                ;;\n        \
    \    \"i\")\n                CHAR_UPPERCASE=\"I\"\n                CHAR_LOWERCASE=\"\
    i\"\n                CHAR_LOWERCASE_FIRST=\"i\"\n                ;;\n        \
    \    \"j\")\n                CHAR_UPPERCASE=\"J\"\n                CHAR_LOWERCASE=\"\
    j\"\n                CHAR_LOWERCASE_FIRST=\"j\"\n                ;;\n        \
    \    \"k\")\n                CHAR_UPPERCASE=\"K\"\n                CHAR_LOWERCASE=\"\
    k\"\n                CHAR_LOWERCASE_FIRST=\"k\"\n                ;;\n        \
    \    \"l\")\n                CHAR_UPPERCASE=\"L\"\n                CHAR_LOWERCASE=\"\
    l\"\n                CHAR_LOWERCASE_FIRST=\"l\"\n                ;;\n        \
    \    \"m\")\n", '    echo "${1:0:1}${1:1:1}${1:2:1}${1:3:1}${1:4:1}${1:5:1}${1:6:1}${1:7:1}"',
  "    tr '[:upper:]' '[:lower:]' <<< \"$1\"", "    tr '[:lower:]' '[:upper:]' <<<\
    \ \"$1\"\n    tr '[:upper:]' '[:lower:]' <<< \"$1\"", "    tr '[:upper:]' '[:lower:]'\
    \ \"$1\" | tr '[:lower:]' '[:upper:]'", '  echo "${1,,}"', "    local string=\"\
    $1\"\n    local string2=\"\"\n\n    for i in $(seq 0 $((${#string[@]} - 1)));\
    \ do\n        local char=${string:$i:1}\n        local char2=\"\"\n\n        if\
    \ [[ $char == [a-z] ]]; then\n            char2=${char:0:1}\n            char2=${char2:1}\n\
    \        fi\n\n        local char3=${char2}\n        local char4=\"\"\n\n    \
    \    if [[ $char2 == [A-Z] ]]; then\n            char4=${char2}\n        else\n\
    \            char4=${char3:0:1}\n            char4=${char4:1}\n        fi\n\n\
    \        local char5=${char4}\n\n        char5=${char5:0:1}\n        char5=${char5:1}\n\
    \n        string2=\"$string2$char5\"\n    done\n\n    echo \"$string2\"", '    echo
    $1 | sed -e "s/^\(.\)/\U\1/" -e "s/\(.\)/\l\1/g"', "  tr '[:lower:]' '[:upper:]'\
    \ \"${1^^}\" | tr '[:upper:]' '[:lower:]'", "    local string=\"$1\" # capture\
    \ string\n    local output=\"\"    # capture output\n    local character\n   \
    \ for (( i=0; i<${#string}; i++ )); do\n        character=\"${string:$i:1}\" #\
    \ Capture current character\n        # Character is lower case, convert to uppercase\n\
    \        if [[ ${character} == [[:lower:]]* ]]; then\n            character=\"\
    $(echo \"${character}\" | tr '[:lower:]' '[:upper:]')\"\n        # Character is\
    \ uppercase, convert to lower case\n        elif [[ ${character} == [[:upper:]]*\
    \ ]]; then\n            character=\"$(echo \"${character}\" | tr '[:upper:]' '[:lower:]')\"\
    \n        # Character has no change\n        fi\n        \n        # Append character\
    \ to the output\n        output+=\"${character}\"\n    done\n\n    # Return output\n\
    \    echo \"$output\"", "  tr '[:upper:]' '[:lower:]' < <(tr '[:lower:]' '[:upper:]'\
    \ <<< \"$1\")", "  echo -n \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", '  echo -n "${1/[[:lower:]]/[[:upper:]]}" | sed "s/[[:upper:]]/[[:lower:]]/g"
    | tr "[A-Z]" "[a-z]"', "  echo \"$1\" | sed 's/\\(.\\)/\\U\\1/'", "    tr '[:lower:]'\
    \ '[:upper:]' < $1 |  tr '[:upper:]' '[:lower:]'", "    echo $1 | sed -e 'y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/'\
    \ -e 'y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/' -e 'y/\xC7\u015E\
    \u011E\u0130\u015E\u011F\u0130\xF6\u015F\u011F\xFC\xDC/\xE7\u015F\u011F\u0130\u015F\
    \u011F\u0130\xF6\xDC/' -e 's/\xC7/\xE7/g' -e 's/\u011E/\u011F/g' -e 's/\u0130\
    /\u0131/g' -e 's/\u011F/\u011F/g' -e 's/\u0130/\u0131/g' -e 's/\u011F/\u011F/g'\
    \ -e 's/\xF6/\xF6/g' -e 's/\xFC/\xFC/g'", "    local string i upper\n    for string\
    \ in \"$@\"; do\n        if [[ $string =~ ([[:upper:]]) ]]; then\n           \
    \ upper=${BASH_REMATCH[1]}\n            lower=${string^}\n            string=${lower^^}\n\
    \        fi\n        echo \"$string\"\n    done", "    [[ -z \"$1\" ]] && return\n\
    \    local result=\"${1}\"\n    local flag\n    for flag in \"${result,,}\"; do\n\
    \        case \"$flag\" in\n            [a-zA-Z])\n                echo \"${flag^^}\"\
    \n                ;;\n            [A-Z])\n                echo \"${flag^^}\"\n\
    \                ;;\n            *)\n                echo \"$flag\"\n        \
    \        ;;\n        esac\n    done", "    local string=$1\n    echo $string |\
    \ sed -e \"y/abcdefghijklmnopqrstuvwxyz/cABCDEFGHIJKLMNOPQRSTUVWXYZ/\" -e \"y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/\"\
    \ | sed -e \"y/'//g\" -e \"y/^//g\" -e \"y/$//g\" -e \"s/ //g\"", "    local str=\"\
    $1\"\n    tr \"[:lower:]\" \"[:upper:]\" <<< \"$str\" | tr \"[:upper:]\" \"[:lower:]\"",
  '   echo "${1,,}" | sed "y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/"
    | sed "y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/"', "    local\
    \ string=\"$1\"\n    local temp\n    IFS=- read -ra array <<< \"$string\"\n  \
    \  for (( i=0; i<${#array[@]}; i++ )); do\n        temp=\"${array[i]}\"\n    \
    \    array[i]=\"${array[i+1]}\"\n        array[i+1]=\"${temp}\"\n    done\n  \
    \  echo \"${array[@]}\"", "    local string=\"$1\"\n    local flipped=\"\"\n \
    \   local i\n    for (( i = 0; i < ${#string}; ++i )); do\n        local c=${string:$i:1}\n\
    \        case \"$c\" in\n        [[:lower:]]) flipped+=${c:^} ;;\n        [[:upper:]])\
    \ flipped+=${c:^^} ;;\n        *)\n        ;;\n        esac\n    done\n    echo\
    \ \"${flipped}\"", "    local a=\"$1\"\n    local b=\"\"\n    for i in $(echo\
    \ $a | sed -e 's/\\(.\\)/\\1\\u\\1/g'); do\n        b=\"$b$i\"\n    done\n   \
    \ echo \"$b\"", "    local STRING=\"$1\"\n    local CAPITALS\n    local LOWERCASE\n\
    \n    # Split string into lowercase\n    CAPITALS=$(echo \"$STRING\" | tr [A-Z]\
    \ [A-Z])\n    # Split string into uppercase\n    LOWERCASE=$(echo \"$STRING\"\
    \ | tr [a-z] [A-Z])\n    # Concatenate strings back together\n    echo \"$CAPITALS$LOWERCASE\"",
  '  echo "${1,,}$(echo "${1,,}" | sed "y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/"
    | sed "y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/")"', "    echo\
    \ $(echo \"$1\" | sed 'y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/'|\
    \ sed 'y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/')", "    local\
    \ input=\"$1\"\n    local output=\"${input,,}\"\n    output=\"${output,,}\"\n\
    \    output=\"${output^^}\"\n    local output=\"${output^^}\"\n    echo \"$output\"",
  "  local s=$1\n  sed -e 'y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/'\
    \ \\\n        -e 'y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/' \\\
    \n        -e 'y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/' <<< \"\
    $s\"", "    local str=\"${1:-}\"\n    tr '[:upper:]' '[:lower:]' <<< \"${str}\"\
    \n    tr '[:lower:]' '[:upper:]' <<< \"${str}\"", "  awk 'BEGIN {\n    s=\"$1\"\
    \n    for (i = 1; i <= length(s); i++) {\n      t = tolower(substr(s, i, 1));\n\
    \      print t substr(s, i, 1) t toupper(t)\n    }\n  }'", "  local string=$1\n\
    \  echo \"${string^}\"", "  local STRING=$1\n\n  # Loop through every character\
    \ in STRING\n  for (( i=0; i < ${#STRING}; i++ ))\n  do\n    # Get the current\
    \ character\n    CHAR=${STRING:$i:1}\n\n    # If character is lowercase\n    if\
    \ [[ $CHAR == [[:lower:]]* ]]\n    then\n      # Uppercase it\n      CHAR=$(echo\
    \ $CHAR | tr [[:lower:]] [[:upper:]]);\n    fi\n\n    # Print the character with\
    \ the updated case\n    echo ${STRING:$i:1}${CHAR}\n\n  done", "  echo \"$1\"\
    \ | sed -e 's/\\(.\\)/\\U\\1/'", "    echo \"$1\" | sed -e 's/\\(.\\)/\\U\\1/g'",
  "    local F=$1\n    echo \"${F,,}\"", "  echo $1 | sed -e 's/\\(.*\\)/\\U\\1\\\
    L/'", "    tr '[:lower:]' '[:upper:]' <<< \"$1\"\n    tr '[:upper:]' '[:lower:]'\
    \ <<< \"$1\"", "  echo \"${1,,}${2,,}\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", "  echo \"${1,,}\" | tr '[a-z]' '[A-Z]' > /tmp/$$\n  echo \"${1,,}\"\
    \ | tr [A-Z] [a-z] > /tmp/$$\n  mv -f /tmp/$$ /tmp/$$.bak\n  echo \"${1,,}\" |\
    \ tr '[A-Z]' '[a-z]' > /tmp/$$\n  mv -f /tmp/$$ /tmp/$$.bak", "    local -n arr=$1\n\
    \    local output\n    for (( i = 0; i < ${#arr}; ++i )); do\n        output=\"\
    ${arr[${i}]^}\"\n        arr[i]=\"${output^^}\"\n    done\n    arr=( \"${arr[@]}\"\
    \ )\n    arr=( \"${arr[@]^}\" )\n    arr=( \"${arr[@]^^}\" )\n    arr=( \"${arr[@]^^^}\"\
    \ )\n    arr=( \"${arr[@]}\" \"${arr[@]^^}\" )\n    arr=( \"${arr[@]^^^}\" )",
  "    tr '[:upper:]' '[:lower:]' <<< \"$1\" | tr '[:lower:]' '[:upper:]'", "\tstr=$1\n\
    \ttr '[:upper:]' '[:lower:]' <<< ${str//?/}", "  local -r string=\"$1\"\n  echo\
    \ \"${string^}\"", "\techo -n \"${1:0:1}${1:1:1}${1:2:1}${1:3:1}${1:4:1}${1:5:1}${1:6:1}${1:7:1}\"",
  "    local str=\"$1\"\n    # Convert any uppercase characters to lowercase by changing\
    \ them to lower case.\n    tr '[:upper:]' '[:lower:]' <<< \"$str\"\n    # Now\
    \ convert any lowercase characters to uppercase by changing them to upper case.\n\
    \    tr '[:lower:]' '[:upper:]' <<< \"$str\"\n    # Return the new string.\n \
    \   echo \"$str\"", "  local string=\"$1\"\n  echo \"${string,,}\" | tr '[:upper:]'\
    \ '[:lower:]'", "  echo \"${1^^}\" | tr '[:upper:]' '[:lower:]'", "    local str=\"\
    $1\"\n    local lower\n    local upper\n    local flipped\n\n    for lower in\
    \ $(echo $str | tr [a-z] [A-Z]); do\n        upper=$(echo $lower | tr [A-Z] [a-z])\n\
    \        printf \"%s%s\\n\" \"$upper\" \"$lower\"\n    done", '  echo "$1" | tr
    [a-z] [A-Z] | tr [A-Z] [a-z]', "\ttr \"[:lower:][:upper:]\" \"[:upper:][:lower:]\"\
    \ \"$1\"", "    tr '[:upper:]' '[:lower:]' < \"$1\"\n    tr '[:lower:]' '[:upper:]'\
    \ > \"$1\"", "  echo \"${1:,}\"\n  echo \"${1,,}\"\n  echo \"${1,,}\" | tr '[:upper:]'\
    \ '[:lower:]' |\n    tr '[:upper:]' '[:upper:]'\n  echo \"${1:,}\" | sed 's/\\\
    (.\\)/\\U\\1/'", "    tr '[:lower:][:upper:]' ':upper:' |\n    tr '[:upper:][:lower:]'\
    \ ':lower:' |\n    tr '[:upper:]' ':lower:'", "  local lower=$1\n  echo \"${lower,,}\"\
    \ | tr \"[:lower:]\" \"[:upper:]\" |\n    tr \"[:upper:]\" \"[:lower:]\"", " \
    \   python -c \"print('${1:^}${1:0:1}${1:1:1}${1:2:1}${1:3:1}${1:4:1}${1:5:1}${1:6:1}${1:7:1}')\"",
  "    local STR=\"$1\"\n    local S\n    for S in \"${STR,,}\"; do\n        echo\
    \ \"${S:0:1}${S:1}${S:2:1}\"\n    done", "  tr '[:lower:]' '[:upper:]' <<< \"\
    $1\"\n  tr '[:upper:]' '[:lower:]' <<< \"$1\"", "    local str=$1 oldcase newcase\n\
    \n    oldcase=$(tr '[:lower:]' '[:upper:]' <<< $1)\n    newcase=$(tr '[:upper:]'\
    \ '[:lower:]' <<< $1)\n\n    echo $oldcase", "    local string=\"$1\"\n\n    #\
    \ Flip the cases of every character of $string\n    local newString=\"\"\n   \
    \ for ((i = 0; i < ${#string}; ++i)); do\n        local letter=\"${string::${i},1}\"\
    \n        case \"${letter}\" in\n            a)\n                newString=\"\
    ${newString}A\"\n                ;;\n            B)\n                newString=\"\
    ${newString}B\"\n                ;;\n            c)\n                newString=\"\
    ${newString}C\"\n                ;;\n            d)\n                newString=\"\
    ${newString}D\"\n                ;;\n            e)\n                newString=\"\
    ${newString}E\"\n                ;;\n            f)\n                newString=\"\
    ${newString}F\"\n                ;;\n            g)\n                newString=\"\
    ${newString}G\"\n                ;;\n            H)\n                newString=\"\
    ${newString}h\"\n                ;;\n            i)\n                newString=\"\
    ${newString}I\"\n                ;;\n            j)\n                newString=\"\
    ${newString}J\"\n                ;;\n            k)\n                newString=\"\
    ${newString}K\"\n                ;;\n            l)\n                newString=\"\
    ${newString}L\"\n                ;;\n            M)\n                newString=\"\
    ${newString}M\"\n                ;;\n            N)\n                newString=\"\
    ${newString}N\"\n                ;;\n            o)\n                newString=\"\
    ${newString}O\"\n                ;;\n            p)\n                newString=\"\
    ${newString}P\"\n                ;;\n            Q)\n                newString=\"\
    ${newString}Q\"\n                ;;\n            R)\n                newString=\"\
    ${newString}R\"\n                ;;\n            s)\n                newString=\"\
    ${newString}S\"\n                ;;\n            t)\n                newString=\"\
    ${newString}T\"\n                ;;\n            u)\n                newString=\"\
    ${newString}U\"\n                ;;\n            v)\n                newString=\"\
    ${newString}V\"\n                ;;\n            W)\n                newString=\"\
    ${newString}W\"\n                ;;\n            X)\n                newString=\"\
    ${newString}X\"\n                ;;\n            Y)\n                newString=\"\
    ${newString}Y\"\n                ;;\n            z)\n                newString=\"\
    ${newString}Z\"\n                ;;\n        esac\n    done\n\n    echo \"${newString}\"",
  "  echo \"$1\" | tr '[a-z]' '[A-Z]' | tr '[A-Z]' '[a-z]'", "    local string=$1\n\
    \    echo ${string^}", "  tr '[:lower:]' '[:upper:]' <<< \"$1\"", "    local IFS=$'\\\
    n'\n    echo \"${1,,}\" | tr [:upper:] [:lower:] | tr [:upper:] [:upper:]", " \
    \   local FLIP_CHARS=${1:-}\n    local IFS=${FLIP_CHARS//[\\[\\]]/}\n    echo\
    \ $1 | tr [a-z] [A-Z] | tr [A-Z] [a-z]", "    local string=$1\n    echo \"${string^}\"",
  "  echo $(echo ${1} | sed -e 's/\\(.\\)/\\U\\1/' -e 'y/\\l/\\E\\l/g' -e 'y/\\E\\\
    l/\\l/g')", "  echo \"${1^^}\" | tr '[:upper:]' '[:lower:]'", "  echo \"$1\" |\
    \ tr '[a-z]' '[A-Z]'\n  echo \"$1\" | tr '[A-Z]' '[a-z]'", "    tr '[:lower:]'\
    \ '[:upper:]' <<< \"$1\" | tr '[:upper:]' '[:lower:]'", "    tr '[:lower:]' '[:upper:]'\
    \ <<< $1 | tr '[:upper:]' '[:lower:]'", '  printf "%s\n" "$1" | sed "s/\(.*\)/\L\1/"',
  "  local string=\"$1\"\n  echo \"${string^}${string^^}\"", "    local result=${1}\n\
    \    echo ${result^^}", '    echo "${1}" | tr "[a-z]" "[A-Z]"', "  echo $1 | tr\
    \ '[:lower:]' '[:upper:]' | tr A-Z a-z", '    echo "${1,,}" "${1,,}" | sed -r
    "s/(^| )([a-z])/\U\2/g" | sed -r "s/(^| )([A-Z])/\L\2/g"', "    tr '[:lower:]'\
    \ '[:upper:]' < \"$1\" | tr '[:upper:]' '[:lower:]'", "   local string=$1\n  \
    \ echo \"${string^}\"", "    local t=\"$1\"\n\n    local len=\"${#t}\"\n    local\
    \ i\n\n    for ((i=0; i<${len}; i++)); do\n        t=\"${t:0:1}${t:1:1}${t:2:1}${t:3:1}\"\
    \n    done\n    echo \"$t\"", "    tr '[:lower:]' '[:upper:]' < <(tr '[:upper:]'\
    \ '[:lower:]' <<< \"$1\")", "    # convert lowercase letters to uppercase\n  \
    \  local new_string=\"\"\n    local c\n    \n    for c in \"$1\"; do\n       \
    \ case \"$c\" in\n            A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z)\
    \ new_string+=\"$c\";;\n        esac\n    done\n\n    # convert uppercase letters\
    \ to lowercase\n    c=0\n    for c in $new_string; do\n        case \"$c\" in\n\
    \            A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z)\
    \ new_string+=\"a$c\";;\n        esac\n    done\n\n    echo \"$new_string\"",
  "   local string=\"${1:-}\"\n   string=\"${string,,}\"\n   string=\"${string^^}\"\
    \n   string=\"${string,,}\"\n   echo \"${string^^}\"", "  local input_string=\"\
    $1\"\n  local output_string=\"\"\n\n  for ((i=0; i<${#input_string}; i++)); do\n\
    \    local char=${input_string:i:1}\n    case \"$char\" in\n      [a-z]) output_string+=\"\
    [A-Z]\" ;;\n      [A-Z]) output_string+=\"[a-z]\" ;;\n      *) output_string+=\"\
    $char\" ;;\n    esac\n  done\n\n  echo \"$output_string\"", "    echo \"${1,,}\"\
    \ | tr \"[:lower:]\" \"[:upper:]\" > \"${1,,}\"\n    echo \"${1,,}\" | tr \"[:upper:]\"\
    \ \"[:lower:]\" > \"${1,,}\"", "  local STR=$1\n  local STR1=${STR//[[:upper:]]/}\n\
    \  local STR2=${STR//[[:lower:]]/}\n  local STR3=${STR1/}\n  local STR4=${STR2/}\n\
    \  echo \"$STR3\"\n  echo \"$STR4\"", "  echo \"${1,,,}\" | tr '[:lower:]' '[:upper:]'\
    \ | tr '[:upper:]' '[:lower:]'", "\techo \"${1^^}\"", "  echo \"$1\" | sed 's/\\\
    (.\\)/\\L\\1\\U&/'", "    tr '[:lower:]' '[:upper:]' <<< $1", "    local -r string=$1\n\
    \    tr '[:lower:]' '[:upper:]' < <(\n        sed -e 's/\\(.\\)/\\U\\1/' -e 's/\\\
    ([[:lower:]]\\)/\\L\\1/' <<< \"$string\"\n    )", "    local str=${1:-}\n    tr\
    \ '[:lower:]' '[:upper:]' <<< ${str//[$'[:upper:]']/[$'[:lower:]']} ", "    local\
    \ string=\"${1}\"\n\n    local output\n    for ((i = 0; i < ${#string}; i++));\
    \ do\n        [[ \"${string[i]}\" ]] && output=\"${output}${string[i]^^}\"\n \
    \   done\n\n    echo \"${output^^}\"", "  echo \"${1}\" | tr [a-z] [A-Z]\n  echo\
    \ \"${1}\" | tr [A-Z] [a-z]", "    local tmp=$1; shift\n    printf '%s' \"${tmp,,}\""]
stop_tokens:
- "\n}"
