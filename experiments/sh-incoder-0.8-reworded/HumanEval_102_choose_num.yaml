name: HumanEval_102_choose_num
language: sh
prompt: "#!/bin/bash\n# This function takes two positive numbers x and y and returns\
  \ the\n# biggest even integer number that is in the range [x, y] inclusive. If \n\
  # there's no such number, then the function should return -1.\n# For example:\n\
  # >>> $(choose_num \"12\" \"15\")\n# \"14\"\n# >>> $(choose_num \"13\" \"12\")\n\
  # \"-1\"\n#\n# $1 is an integer\n# $2 is an integer\nchoose_num() {\n"
tests: "}\n\ncandidate() {\n    choose_num \"$@\"\n}\n\nset -e\nrun_test() {\n   \
  \ [[ $(candidate \"12\" \"15\") = \"14\" ]]\n    [[ $(candidate \"13\" \"12\") =\
  \ \"-1\" ]]\n    [[ $(candidate \"33\" \"12354\") = \"12354\" ]]\n    [[ $(candidate\
  \ \"5234\" \"5233\") = \"-1\" ]]\n    [[ $(candidate \"6\" \"29\") = \"28\" ]]\n\
  \    [[ $(candidate \"27\" \"10\") = \"-1\" ]]\n    [[ $(candidate \"7\" \"7\")\
  \ = \"-1\" ]]\n    [[ $(candidate \"546\" \"546\") = \"546\" ]]\n}\n\nrun_test"
completions: ["  local number=\"$1\"\n  local num=\"$2\"\n  local maxnum=\"-1\"\n\n\
    \  if [[ $number -le $num ]]; then\n    maxnum=$number\n  elif [[ $num -ge $number\
    \ ]]; then\n    if [[ \"$number\" == \"$num\" ]]; then\n      maxnum=$number\n\
    \    else\n      maxnum=$num\n    fi\n  fi\n  \n  echo $maxnum", "  local x y\
    \ \n  x=$1\n  y=$2\n  \n  local max_num=0\n  local num_found=0\n  \n  until [[\
    \ \"$num_found\" -eq \"1\" ]]\n  do\n    if [[ $x -lt $y ]]\n    then\n      x=$(($x\
    \ + 1))\n    elif [[ $y -lt $x ]]\n    then\n      y=$(($y - 1))\n    else\n \
    \     num_found=\n      break\n    fi\n  done\n  \n  if [[ $num_found -eq \"1\"\
    \ ]]\n  then\n    echo $(($x + $y - 1))\n  else\n    echo -1\n  fi", "\t[[ $(expr\
    \ \\\"${1#*[0-9]}\\\" >= $(expr \\\"${2#*[0-9]}\\\")) ]] || return -1\n\tlocal\
    \ i c tmp=$1\n\t[[ -z $2 ]] && return -1\n\tfor i in $(seq 2 $((${#1}+1)); do\n\
    \t\tc=$(($i % 2))\n\t\ttmp=$(($c $tmp))\n\tdone\n\techo $tmp", "    local x\n\
    \    local y\n    local num\n    if [ \"$1\" -gt \"$2\" ]; then\n        x=\"\
    $1\"\n        y=\"$2\"\n    else\n        x=\"$2\"\n        y=\"$1\"\n    fi\n\
    \n    # Check if x is bigger than y\n    if [ $x -gt $y ]; then\n        num=\"\
    $y\"\n    else\n        num=\"$x\"\n    fi\n\n    while [ $num -gt 0 ]; do\n \
    \       if [ -e \"$((num/2))\" ]; then\n            if [ \"$(($num % 2)\" = \"\
    0\" )\" -a \"$((num%2))\" = \"0\" ]; then\n                echo \"$((num/2))\"\
    \n            fi\n        fi\n        num=$((num/2))\n    done", "    x=$1\n \
    \   y=$2\n    [ $x -gt $y ] && x=$y\n    while true; do\n        echo $((($x /\
    \ 2))) | grep -q -e 0 > /dev/null && echo $((($x / 2) + 1)) || echo $((($x / 2)-1))\n\
    \        x=$((x / 2))\n        [ \"$x\" -eq \"$y\" ] && break\n    done", "  \
    \  local x y xx yy tmp n\n    xx=\"$1\"\n    yy=\"$2\"\n    x=\"$(( ( $xx / $yy\
    \ ) ))\"\n    y=\"$(( ( $yy / $xx ) ))\"\n    if [ $x -lt $y ]\n    then\n   \
    \     x=\"$(( $x + 1 ))\"\n    fi\n    if [ $y -lt $x ]\n    then\n        y=\"\
    $(( $y + 1 ))\"\n    fi\n    if [ $x -le $y ]\n    then\n        x=\"$(( $x -\
    \ 1 ))\"\n    fi\n    if [ $y -le $x ]\n    then\n        y=\"$(( $y - 1 ))\"\n\
    \    fi\n    tmp=\"$(( x * y ))\"\n    if [ $tmp -gt 0 ]\n    then\n        while\
    \ [ $tmp -gt 0 ]\n        do\n            (( n++ ))\n            tmp=\"$(( $tmp\
    \ / 2 ))\"\n        done\n        echo \"$(( $tmp + 1 ))\"\n    else\n       \
    \ echo \"$(( x - 1 ))\"\n    fi", "    x=$1\n    y=$2\n    \n    echo $(( x \\\
    * 2 \\* y ))", "    local x=$1\n    local y=$2\n    local num=$((x<y)?x:y)\n \
    \   while ((num<x)) || ((num>y)) ; do\n        ((num+=2))\n    done\n    echo\
    \ \"$num\"", "    local x=\"${1:-0}\"\n    local y=\"${2:-0}\"\n\n    test \"\
    $x -gt $y\" && return -1\n    test \"$x -le $y\" && return \"$x\"\n\n    test\
    \ \"$x -gt 0\" && (( y-- ))\n    test \"$x -eq 0\" && (( x-- ))\n\n    (( x -\
    \ y )) 2>/dev/null", "    (( $1 >= $2 )) && return -1\n    (( $1 <= $2 )) && return\
    \ $1\n    (( $2 % 2 == 0 )) && return $(($2 * $2 + 1)) / 2\n    (( $2 % 2 != 0\
    \ )) && return $(($2 * $2 + 1)) + 1", "    local x y result\n    # Check if $2\
    \ > $1, then swap $1 and $2\n    if [ $1 -gt $2 ]; then\n        swapper $1 $2\n\
    \    fi\n    # Check if $2 == $1 or $2 == $2-1\n    if [ $1 == $2 -o $1 == $2-1\
    \ ]; then\n        result=$2\n    else\n        x=$1\n        y=$2\n        #\
    \ Start from the middle of the range\n        # First check if the number $2 divides\
    \ $1 evenly\n        if [ $((x/y)) -eq $((x/y)) ]; then\n            # Check if\
    \ the number $2 divides $1 by 2\n            if [ $((x/2)) -eq $((x/2)) ]; then\n\
    \                # Check if the number $2 divides $1 by 3\n                if\
    \ [ $((x/3)) -eq $((x/3)) ]; then\n                    result=$((x/3))\n     \
    \           elif [ $((x/4)) -eq $((x/4)) ]; then\n                    result=$((x/4))\n\
    \                elif [ $((x/5)) -eq $((x/5)) ]; then\n                    result=$((x/5))\n\
    \                elif [ $((x/6)) -eq $((x/6)) ]; then\n                    result=$((x/6))\n\
    \                elif [ $((x/7)) -eq $((x/7)) ]; then\n                    result=$((x/7))\n\
    \                elif [ $((x/8)) -eq $((x/8)) ]; then\n                    result=$((x/8))\n\
    \                elif [ $((x/9)) -eq $((x/9)) ]; then\n                    result=$((x/9))\n\
    \                elif [ $((x/10)) -eq $((x/10)) ]; then\n                    result=$((x/10))\n\
    \                elif [ $((x/11)) -eq $((x/11)) ]; then\n                    result=$((x/11))\n\
    \                elif [ $((x/12)) -eq $((x/12)) ]; then\n                    result=$((x/12))\n\
    \                elif [ $((x/13)) -eq $((x/13)) ]; then\n                    result=$((x/13))\n\
    \                elif [ $((x/14)) -eq $((x/14)) ]; then\n                    result=$((x/14))\n\
    \                elif [ $((x/15)) -eq $((x/15)) ]; then\n                    result=$((x/15))\n\
    \                else\n                    result=$((x/16))\n                fi\n\
    \            else\n                result=$((x/2))\n            fi\n        elif\
    \ [ $((x/y)) -eq $((x/y)) ]; then\n            # Check if the number $2 divides\
    \ $1 by 3\n            if [ $((x/3)) -eq $((x/3)) ]; then", "    local x=\"$1\"\
    \n    local y=\"$2\"\n    local num=$x\n    while (( num < y )); do\n        ((\
    \ num += 2 ))\n    done\n    if (( num == x )); then\n        echo \"-1\"\n  \
    \  else\n        echo \"$num\"\n    fi", "\tlocal x=\"$1\"\n\tlocal y=\"$2\"\n\
    \tlocal a\n\tlocal b\n\ta=$((($x-1)%2))\n\tb=$((($y-1)%2))\n\tif [[ \"$a\" -eq\
    \ \"0\" ]] && [[ \"$b\" -eq \"0\" ]]; then\n\t\techo $x\n\telse\n\t\techo $(($b+$a))\n\
    \tfi", "    local x y\n    if [ $1 -gt $2 ]; then\n\tx=$1; y=$2\n    else\n\t\
    x=$2; y=$1\n    fi\n    local i\n    local result\n    local count\n    local\
    \ count1\n\n    if [ -z \"$y\" ]; then\n\techo \"-1\"\n\treturn\n    fi\n\n  \
    \  while [ $x -le $y ]\n    do\n\tif [ $(( $x % 2 )) -eq 0 ]; then\n\t    result=$x\n\
    \t    break\n\tfi\n\tx=$(( $x + 1 ))\n    done\n\n    if [ $result -eq 0 ]; then\n\
    \techo \"-1\"\n\treturn\n    fi\n    \n    count=$(( ${result}+1 ))\n    while\
    \ [ $count -gt $count1 ]\n    do\n\tcount1=$count\n\tresult=$(( $result + 1 ))\n\
    \    done\n\n    echo \"$result\"", "    if [ $(($2 - $1)) -eq 0 ]; then\n   \
    \     echo $(($2 + $1))\n    else\n        choose_num $1 $(($2 - $1))\n    fi",
  "\tx=$1\n\ty=$2\n\t((x-1)>y && y-1 >=0)) || { echo -1; return -1; }\n\t((x-1)>y)\
    \ && { echo -1; return -1; }\n\t((y-1)>x) && { echo -1; return -1; }\n\t((x-1)>=y)\
    \ && ((y-1)>=x) && { echo $x; return $x; }\n\t((y-1)>=x) && { echo $y; return\
    \ $y; }\n\t((x-1)>=y) && ((y-1)>x) && { echo $y; return $y; }\n\t((x-1)>y) &&\
    \ ((y-1)>=x) && { echo $x; return $x; }\n\t((y-1)>=x) && ((y-1)>x) && { echo $y;\
    \ return $y; }\n\techo $((x+y))", "  if [[ $1 -le $2 ]]; then\n    \n    \n  \
    \  \n    if [[ $(( $1 % 2 )) -eq 0 ]] && [[ $(( $1 % 2 )) -le 0 ]]; then\n   \
    \   echo \"$1\"\n    else\n      echo \"-1\"\n    fi\n  fi", "  # Check if $2\
    \ is in $1, if not, return -1\n  local number=$1\n  local minimum=$2\n  if [ \"\
    $number\" -lt \"$minimum\" ]; then\n    return -1\n  fi\n  local maximum=$3\n\
    \  # If $2 is smaller than $1, then the function returns $2\n  if [ \"$number\"\
    \ -ge \"$minimum\" ]; then\n    return $2\n  fi\n  # If $2 is bigger than $3,\
    \ then we return -1\n  if [ \"$number\" -le \"$maximum\" ]; then\n    return -1\n\
    \  fi\n  # Otherwise, if we get here, then we get the $number between $1 and $3\n\
    \  # We need to subtract 1 to $2 to get the higher even number\n  if [ \"$number\"\
    \ -le \"$2\" ]; then\n    local new=$(( $number - 1 ))\n    echo $new\n    return\
    \ $new\n  else\n    return -1\n  fi", "    # Get the first number from the arguments\n\
    \    local x=$1\n    local y=$2\n\n    # The variable $z is set to \"x\" initially\n\
    \    local z=$x\n\n    # If the range [x, y] has no even elements, then return\
    \ -1\n    # In Python 3, this can be done with a single comparison\n    # if (x\
    \ % 2 == 0) or (y % 2 == 0):\n    #    return -1\n    # Otherwise, set \"z\" to\
    \ y initially and iterate from x\n    # by 2 until $z is equal to or greater than\
    \ $y\n    while [ $z -lt $y ]; do\n        ((z+=2))\n    done\n\n    # Return\
    \ the value of \"z\"\n    echo \"$z\"", "    local a=$1; local b=$2\n    if [\
    \ $a -gt $b ]; then\n        echo \"$a is greater than $b\"\n        return 1\n\
    \    elif [ $a -eq $b ]; then\n        echo \"$a equals $b\"\n        return 0\n\
    \    else\n        echo \"$a is smaller than $b\"\n        return -1\n    fi",
  "  x=\"$1\"\n  y=\"$2\"\n  ((x<y)) && return -1\n  ((x>y)) && return -1\n  ((x<0))\
    \ || ((x>0)) && return -1\n  ((y<0)) && ((y<x)) && return -1\n  ((y<0)) && ((y>x))\
    \ && return -1\n  ((y>0)) && ((y<x)) && return -1\n  ((y>0)) && ((y>x)) && return\
    \ -1\n  ((x==y)) && return 0\n  ((x != 0 && y != 0 && x%2==0 && y%2==0) || x !=\
    \ 0 && y != 0 && y%2==0 && x%2==0) && return 0\n  ((x != 0 && y != 0 && x%2==0\
    \ && y%2==1) || x != 0 && y != 0 && x%2==1 && y%2==1) && return 0\n  ((x != 0\
    \ && y != 0 && x%2==1 && y%2==0) || x != 0 && y != 0 && x%2==1 && y%2==0) && return\
    \ 0\n  ((x != 0 && y != 0 && x%2==0 && y%2==0) || x != 0 && y != 0 && y%2==0 &&\
    \ x%2==0) && return 0\n  ((x != 0 && y != 0 && x%2==0 && y%2==1) || x != 0 &&\
    \ y != 0 && x%2==1 && y%2==0) && return 0\n  ((x != 0 && y != 0 && x%2==1 && y%2==0)\
    \ || x != 0 && y != 0 && x%2==1 && y%2==1) && return 0\n  ((x != 0 && y != 0 &&\
    \ x%2==1 && y%2==1) || x != 0 && y != 0 && x%2==1 && y%2==0) && return 0\n  ((x\
    \ != 0 && y != 0 && x%2==0 && y%2==1) || x != 0 && y != 0 && y%2==1 && x%2==0)\
    \ && return 0\n  ((x != 0 && y != 0 && x%2==1 && y%2==0) || x != 0 && y != 0 &&\
    \ y%2==1 && x%2==1) && return 0\n  ((x != 0 && y != 0 && x%2==0 && y%2==0) ||\
    \ x != 0 && y != 0 && y%2==0 && x%2==1) && return 0\n  ((x != 0 && y != 0 && x%2==1\
    \ && ", "        local a b\n        a=${1}\n        b=${2}\n        if [ \"$b\"\
    \ -gt \"$a\" ]\n        then\n                echo \"$b\"\n                return\
    \ 0\n        fi\n        if [ \"$a\" -gt \"$b\" ]\n        then\n            \
    \    echo \"$a\"\n                return 0\n        fi\n        local temp\n \
    \       temp=$(($a + $b))\n        echo \"$temp\"\n        while [ \"$a\" -gt\
    \ \"$temp\" ]\n        do\n                a=$(($a - 1))\n                temp=$(($a\
    \ + $b))\n        done\n        echo \"$b\"", "\tlocal x=$1 y=$2\n\tif (( ( (\
    \ ${x} < ${y} ) || ${y} < 0 ) ) && ( ${x} -eq 0 )); then\n\t\treturn -1\n\tfi\n\
    \tlocal num=$( eval echo '($x-$y*(${x}/${y}))' | bc -l )\n\tif [[ ${num} -gt 0\
    \ ]]; then\n\t\treturn ${num}\n\telse\n\t\treturn -1\n\tfi", '    [[ $(expr $1
    < $2) ]] && [[ $(expr $1 > $2 ) ]] || [[ $1 -gt $2 ]]', "    local x y\n    x=$1\n\
    \    y=$2\n    if [[ $x -gt $y ]] ; then\n        echo $x\n    else\n        echo\
    \ $y\n    fi", "  test \"$1\" >/dev/null || exit 1\n  test \"$2\" >/dev/null ||\
    \ exit 1\n  if (($1 >= $2)); then\n    echo \"-1\"\n    return 0\n  fi\n  while\
    \ true; do\n    ((num=$1))\n    test \"$num\" >/dev/null || return -1\n    test\
    \ \"$((num % 2))\" -eq 0 && return $num\n    ((num++))\n  done", "  if [ $(( $1\
    \ > $2 )) ]; then\n      echo \"-1\"\n      return\n  fi\n\n  max_num=$(( $1 >\
    \ $2 )) || $(( $2 > $1 ))\n\n  while [ $max_num -lt 0 ]; do\n      if [ $max_num\
    \ -eq 0 ]; then\n          echo \"0\"\n          return\n      fi\n      ((max_num+=2))\n\
    \  done\n  echo \"$max_num\"", "    x=\"$1\"\n    y=\"$2\"\n    local even\n \
    \   if [ $x -le $y ] ; then\n        even=\"[[ $x -le $y ]]\"\n    else\n    \
    \    even=\"[[ $x -gt $y ]]\"\n    fi\n    local even=\"[[ $x -le $y ]]\"\n  \
    \  local even\n    local even=\"[[ $x -le $y ]]\"\n    local even=\"[[ $x -le\
    \ $y ]]\"\n    local even=\"[[ $x -le $y ]]\"\n    local even=\"[[ $x -le $y ]]\"\
    \n    local even=\"[[ $x -le $y ]]\"\n    local even=\"[[ $x -le $y ]]\"\n   \
    \ local even=\"[[ $x -le $y ]]\"\n    local even=\"[[ $x -le $y ]]\"\n    local\
    \ even=\"[[ $x -le $y ]]\"\n    local even=\"[[ $x -le $y ]]\"\n    local even=\"\
    [[ $x -le $y ]]\"\n    local even=\"[[ $x -le $y ]]\"\n    local even=\"[[ $x\
    \ -le $y ]]\"\n    local even=\"[[ $x -le $y ]]\"\n    local even=\"[[ $x -le\
    \ $y ]]\"\n    local even=\"[[ $x -le $y ]]\"\n    local even=\"[[ $x -le $y ]]\"\
    \n    local even=\"[[ $x -le $y ]]\"\n    local even=\"[[ $x -le $y ]]\"\n   \
    \ local even=\"[[ $x -le $y ]]\"\n    local even=\"[[ $x -le $y ]]\"\n    local\
    \ even=\"[[ $x -le $y ]]\"\n    local even=\"[[ $x -le $y ]]\"\n    local even=\"\
    [[ $x -le $y ]]\"\n    local even=\"[[ $x -le $y ]]\"\n    local even=\"[[ $x\
    \ -le $y ]]\"\n    local even=\"[[ $x -le $y ]]\"\n    local even=\"[[ $x -le\
    \ $y ]]\"\n    local even=\"[[ $x -le $y ]]\"\n    local even=\"[[ $x -le $y ]]\"\
    \n    local even=\"[[ $x -le $y ]]\"\n    local even=\"[[ $x ", "    local x=\"\
    $1\"\n    local y=\"$2\"\n    if (( x >= y )); then\n        echo -1\n    else\n\
    \        local z=$((y-1))\n        echo $(( ((x<z) & (y<z)) ? $x : $z) )\n   \
    \ fi", "    local x=\"$1\"\n    local y=\"$2\"\n    if [ \"$x\" -gt \"$y\" ]\n\
    \    then\n        local num=$((x-y))\n    else\n        local num=$((y-x))\n\
    \    fi\n    echo $num", "    # If the second argument was an integer, then \n\
    \    # we check whether the first argument is inside the range. \n    # If the\
    \ first argument is not within the range, then we return\n    # -1\n    \n   \
    \ # Let's assume that $1 is a number\n    # Let's assume that $2 is also a number\n\
    \    \n    if [[ \"$2\" -ge \"$1\" ]]\n    then\n        # Let's assume that the\
    \ second argument is a number \n        # greater than the first one\n       \
    \ # Let's assume that the first argument is a number \n        # greater than\
    \ or equal to the second one\n        # We return the maximum number that is within\
    \ the range\n        \n        # let's count the number of digits in the second\
    \ argument\n        # and subtract it from the first argument so that we know\
    \ \n        # how many digits are in the range\n        \n        range=$(( $2\
    \ < $1 ))\n        if [[ \"$range\" == true ]]\n        then\n            range_num=$(($2-$1))\n\
    \        fi\n    else\n        # If the second argument was not an integer or\
    \ \n        # the second argument is less than the first argument, then\n    \
    \    # we return -1\n        \n        range=0\n        range_num=0\n    fi\n\
    \    \n    if [[ \"$range_num\" -gt 0 ]]\n    then\n        # we check if the\
    \ second argument is greater than or equal \n        # to the first argument\n\
    \        # if the second argument is less than or equal to the first \n      \
    \  # argument then we return the second argument\n        \n        if [[ \"$range\"\
    \ == true ]]\n        then\n            range_num=$(($range_num+1))\n        fi\n\
    \        \n        num=$(echo $(($range_num*2))|bc)\n    fi\n    \n    if [[ \"\
    $num\" -gt \"$1\" ]]\n    then\n        num=$(echo $(($num+1))|bc)\n    fi\n \
    \   \n    if [[ \"$num\" -gt \"$2\" ]]\n    then\n        num=$(echo $(($num+1))|bc)\n\
    \    fi\n    \n    if [[ \"$num\" -gt -1 ]]\n    then\n        # if the number\
    \ is greater than or equal to 1, then we return 1\n        # else we return the\
    \ number\n        \n        if [[ \"$range\" == true ]]\n        then\n      \
    \      num=$(echo $(($num+1))|bc)\n        else\n            num=$(echo $(($num+1))|bc)\n\
    \        fi\n    fi\n    \n    if [[ \"$num\" -eq 1 ]]\n    then\n        # if\
    \ the number is 1, then we return 1\n        num=$(echo $(($num+1))|bc)\n    fi\n\
    \    \n    if [[ \"$range\" == true ]]\n    then\n        # if the number is greater\
    \ than or equal to the range, then \n        # we return the number\n        num=$(echo\
    \ $(($num+", "    x=$1\n    y=$2\n    if [ ${y} -gt ${x} ]; then\n        echo\
    \ \"-1\"\n    else\n        echo \"${y}\"\n    fi", "    local x y biggest i \n\
    \    x=\"$1\"\n    y=\"$2\"\n    biggest=-1\n    for (( i=1; i<=$(( x | $(expr\
    \ $x \\% 2 ) )) ; i++ )) ; do\n        if [ $(($x % 2)) -eq 0 ] ; then\n     \
    \       if [ $x -ge $y ] ; then\n                biggest=\"$x\"\n            \
    \    break\n            elif [ $x -lt $y ] ; then\n                biggest=\"\
    $y\"\n                break\n            fi\n        fi\n    done\n    return\
    \ $biggest", "  local x y\n  x=$1\n  y=$2\n  (( x >= y )) || return -1\n  (( y\
    \ >= x )) || return -1\n  local i num\n  (( x > y )) && return -1\n  (( y > x\
    \ )) && return -1\n  num=y\n  (( x <= y )) || return\n  (( y <= x )) || return\n\
    \  (( x == y )) || return\n  (( y == x )) || return\n  (( y == 0 )) && return\
    \ 0\n  (( y % 2 != 0 )) && return -1\n  (( num > 0 )) || return\n  (( num == 0\
    \ )) && return 0\n  (( num == y )) || return\n  (( num == y / 2 )) && return y\n\
    \  (( num == y / 2 )) && return y\n  (( num == (y / 2) + 1 )) || return\n  ((\
    \ num == (y / 2) + 1 )) || return\n  (( num == (y / 2) -1)) && return y\n  ((\
    \ num == (y / 2) - 1 )) || return\n  (( num == (y / 2) - 1 )) || return\n  ((\
    \ num == (y / 2) +1 )) || return\n  (( num == (y / 2) + 1 )) || return\n  (( num\
    \ == (y / 2) + 2 )) || return\n  (( num == (y / 2) +2 )) || return\n  (( num ==\
    \ (y / 2) - 1 )) || return\n  (( num == (y / 2) -1 )) || return\n  (( num == (y\
    \ / 2) +1 )) || return\n  (( num == (y / 2) + 1 )) || return\n  (( num == (y /\
    \ 2) + 2 )) || return\n  (( num == (y / 2) +2 )) || return\n  (( num == (y / 2)\
    \ + 3 )) || return\n  (( num == (y / 2) +3 )) || return\n  (( num == (y / 2) -\
    \ 1 )) || return\n  (( num == (y / 2) - 1 )) || return\n  (( num == (y / 2) +1\
    \ )) || return\n  (( num == (y / 2) + 1 )) || return\n  (( num == (y / 2) + 2\
    \ )) || return\n  (( num == (y / 2) +2 )) || return\n  ", "  local x y i\n  x=$1\n\
    \  y=$2\n  i=1\n  while [ $x -le $y ]; do\n    if [ $(($x) -le $i) -a $(($i) -le\
    \ $(($x - 1))) ]; then\n      i=$(($i + $y))\n    else\n      if [ $(($x) -le\
    \ $i) ]; then\n        i=$(($i - $y))\n      else\n        i=$(($i - $y))\n  \
    \      break\n      fi\n    fi\n  done\n  echo $i", "  local x y\n  read x y <<<\
    \ \"$1\"\n  if [ \"$x\" -ge \"$y\" ];then\n    # If the second number is less\
    \ than the first, swap them.\n    if [ \"$y\" -le \"$x\" ];then\n      (( x =\
    \ $y ))\n      (( y = $x ))\n    fi\n    # Get the even number in the range.\n\
    \    x=$(( $x / 2 ))\n    while [ $x -le $y ];do\n      # Check if the current\
    \ number is even.\n      [ $(( $x % 2 )) -eq 0 ] && echo $x\n      x=$(( $x +\
    \ 1 ))\n    done\n    # If the first number is smaller than the second one, return\
    \ -1.\n    if [ \"$x\" -le \"$y\" ];then\n      echo \"-1\"\n    else\n      echo\
    \ \"$x\"\n    fi\n  else\n    echo \"-1\"\n  fi", "   local x y\n   x=$1\n   y=$2\n\
    \   if (($x < $y)) then\n      echo \"-1\"\n      return -1\n   else\n      ((x%2\
    \ == 0) && ((y%2 != 0)) && (($x>$y)))\n      echo \"$x\"\n      return $x\n  \
    \ fi", "  local number=$1\n  local range_end=$2\n  \n  # If range end is smaller\
    \ than range start, then there's no\n  # such range.\n  if [ $range_end -lt $number\
    \ ]; then\n    return -1\n  fi\n  \n  local max_num=$number\n  local max_factor=2\n\
    \  \n  while [ $max_num % $max_factor -eq 0 ]; do\n    max_factor=$(($max_factor+2))\n\
    \  done\n  \n  while [ $max_num % $max_factor -gt 0 ]; do\n    max_num=$(($max_num/$max_factor))\n\
    \  done\n  \n  echo $max_num", "  x=\"$1\"\n  y=\"$2\"\n\n  (( (x-y)+1 )) | while\
    \ (( x % 2 == 0 )) ; do\n    x-=1\n  done\n  (( x )) | while (( y % 2 == 0 ))\
    \ ; do\n    y-=1\n  done\n  (( y )) | while (( x > y )) ; do\n    (( x -= 1 ))\n\
    \  done\n  (( x )) | while (( y < x )) ; do\n    (( y -= 1 ))\n  done\n  (( x\
    \ )) | while (( x != y )) ; do\n    (( x -= 1 ))\n    (( y -= 1 ))\n  done\n \
    \ (( x )) | while (( x > y )) ; do\n    (( x -= 1 ))\n  done\n  (( x )) | while\
    \ (( y > x )) ; do\n    (( y -= 1 ))\n  done\n  echo \"$x\"", "\tif [ $1 -le $2\
    \ ]\n\tthen\n\t\t# If the first number $1 is the smallest than $2, then the \n\
    \t\t# result is $2\n\t\t[ \"$1\" -eq $2 ] && return\n\t\t# If the first number\
    \ $1 is not the smallest than $2, then we \n\t\t# need to find the smallest number\
    \ and biggest number in the \n\t\t# specified range\n\t\tlet \"a=$2 - $1\"\n\t\
    \tlet \"b=$2\"\n\t\tif [ \"$a\" -lt \"0\" ]\n\t\tthen\n\t\t\tlet \"a=0\"\n\t\t\
    fi\n\t\tif [ \"$b\" -lt \"0\" ]\n\t\tthen\n\t\t\tlet \"b=0\"\n\t\tfi\n\t\tlet\
    \ \"x=$a\"\n\t\tlet \"y=$b\"\n\t\t[ \"$x\" -le \"$y\" ] && let \"x=$y\"\n\t\t\
    if [ \"$x\" -le \"$y\" ] && [ \"$x\" -ge \"0\" ] && [ \"$x\" -ge \"0\" ]\n\t\t\
    then\n\t\t\t# If the first number is greater or equal to the second \n\t\t\t#\
    \ number we only need to find the biggest number in the \n\t\t\t# specified range\n\
    \t\t\tlet \"c=$x\"\n\t\t\tlet \"b=$y\"\n\t\t\tlet \"d=$b - $c\"\n\t\t\tlet \"\
    e=$c\"\n\t\t\tif [ \"$d\" -lt \"0\" ]\n\t\t\tthen\n\t\t\t\tlet \"d=0\"\n\t\t\t\
    fi\n\t\t\tif [ \"$d\" -lt \"0\" ]\n\t\t\tthen\n\t\t\t\tlet \"d=0\"\n\t\t\tfi\n\
    \t\t\tif [ \"$e\" -lt \"0\" ]\n\t\t\tthen\n\t\t\t\tlet \"e=0\"\n\t\t\tfi\n\t\t\
    \tif [ \"$b\" -ge \"$d\" ]\n\t\t\tthen\n\t\t\t\t# If the first number is less\
    \ than the second number and \n\t\t\t\t# the difference of the second number is\
    \ greater than \n\t\t\t\t# the biggest even number in the range [x, y] inclusive,\
    \ \n\t\t\t\t# then we return the biggest even number in the range \n\t\t\t\t#\
    \ the second number is greater than the first number\n\t\t\t\tlet \"g=$c\"\n\t\
    \t\t\tlet \"f=$b\"\n\t\t\t\tif [ \"$g\" -le \"$f\" ] && [ \"$g\" -ge \"$e\" ]\n\
    \t\t\t\tthen\n\t\t\t\t\tlet \"g=$e\"\n\t\t\t\t\tlet \"f=$d\"\n\t\t\t\t\tif [ \"\
    $g\" -ge \"$f\" ] && [ \"$g\" -ge \"$e\" ]\n\t\t\t\t\tthen\n\t\t\t\t\t\tlet \"\
    g=$f\"\n\t\t\t\t\t\tlet \"f=$b\"\n\t\t\t\t\t\tlet \"e=$d\"\n\t\t\t\t\t\tlet \"\
    d=$g\"\n\t\t\t\t\t\tlet \"c=$f\"\n\t\t\t\t\t\tlet \"b=$e\"\n\t\t\t\t\t\tlet \"\
    a=$c\"\n\t\t\t\t\t\tlet \"b=$", "    local x=$1\n    local y=$2\n    local x_num\n\
    \    local y_num\n\n    while ((x >= y)) ; do\n        ((x_num = x))\n       \
    \ x=$((x % 2))\n    done\n\n    while ((y > 0)) ; do\n        ((y_num = y))\n\
    \        y=$((y % 2))\n    done\n\n    if ((y_num == 0)); then\n        return\
    \ $((x_num))\n    else\n        return -1\n    fi", "    if [ $(( $(echo $1 |\
    \ awk -F '.' {'print $1*$2'}) + $(echo $2 | awk -F '.' {'print $1*$2'}) )) -ge\
    \ 0 ] \\\n        && [ $(( $(echo $1 | awk -F '.' {'print $1*$2'}) + $(echo $2\
    \ | awk -F '.' {'print $1*$2'}) )) -le $(($(($1 + $2)) )) ] ;\n    then\n    \
    \    echo \"$(($(($1 + $2)) ))\"\n    else\n        echo \"-1\"\n    fi", "  local\
    \ num=$1\n  local num2=$2\n  local evens=0\n  local odds=0\n  local max_even_num\n\
    \  local max_odd_num\n  local biggest\n  \n  while [[ \"$num\" > \"$num2\" ]]\n\
    \  do\n    evens=$((evens + 1))\n    num=$(echo \"$num * 2\" | bc)\n  done\n \
    \ \n  while [[ \"$num2\" > \"$num\" ]]\n  do\n    odds=$((odds + 1))\n    num2=$(echo\
    \ \"$num2 * 2\" | bc)\n  done\n  \n  if [ \"$evens\" -gt \"$odds\" ]; then\n \
    \   max_even_num=\"$num\"\n  else\n    max_odd_num=\"$num2\"\n  fi\n  \n  if [\
    \ \"$max_even_num\" -gt \"$max_odd_num\" ]; then\n    biggest=\"$max_even_num\"\
    \n  else\n    biggest=\"$max_odd_num\"\n  fi\n  \n  echo $biggest", "\tx=\"$1\"\
    \n\ty=\"$2\"\n\tz=\"$3\"\n\tfor i in $(seq 1 $((y-x+1)))\n\tdo\n\t\ta=$(($x*$i))\n\
    \t\tb=$(($y*$i))\n\t\tif [ ${#z} -gt 0 ]; then\n\t\t\td=$(expr $a \\< $z )\n\t\
    \t\te=$(expr $b \\< $z )\n\t\t\tif [ $d -eq 0 ] && [ $e -eq 0 ]\n\t\t\tthen\n\t\
    \t\t\techo \"$z\"\n\t\t\t\tbreak\n\t\t\telif [ $d -eq 1 ] && [ $e -eq 1 ]\n\t\t\
    \tthen\n\t\t\t\techo \"$z\"\n\t\t\t\tbreak\n\t\t\telif [ $d -eq 0 ] && [ $e -eq\
    \ 1 ]\n\t\t\tthen\n\t\t\t\techo \"$z\"\n\t\t\t\tbreak\n\t\t\telif [ $d -eq 1 ]\
    \ && [ $e -eq 0 ]\n\t\t\tthen\n\t\t\t\techo \"$z\"\n\t\t\t\tbreak\n\t\t\telif\
    \ [ ${#z} -gt $((z-a+1)) ]\n\t\t\tthen\n\t\t\t\techo \"$z\"\n\t\t\t\tbreak\n\t\
    \t\telif [ ${#z} -lt $((b-a+1)) ]\n\t\t\tthen\n\t\t\t\techo \"$z\"\n\t\t\t\tbreak\n\
    \t\t\telif [ ${#z} -lt $((z-a+1)) ] && [ ${#z} -lt $((b-a+1)) ]\n\t\t\tthen\n\t\
    \t\t\techo \"$z\"\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\techo \"$z\"\n\t\t\t\tbreak\n\
    \t\t\tfi\n\t\telse\n\t\t\tif [ $a -le $b ]\n\t\t\tthen\n\t\t\t\techo \"$a\"\n\t\
    \t\t\tbreak\n\t\t\telif [ $a -gt $b ]\n\t\t\tthen\n\t\t\t\techo \"$b\"\n\t\t\t\
    \tbreak\n\t\t\telif [ $a -eq $b ]\n\t\t\tthen\n\t\t\t\techo \"$a\"\n\t\t\t\tbreak\n\
    \t\t\telse\n\t\t\t\techo \"$b\"\n\t\t\t\tbreak\n\t\t\tfi\n\t\tfi\n\tdone", " \
    \       \n\t# Check whether given arguments are integers\n\t[[ ! $1 =~ ^[0-9]+$\
    \ ]] && { echo \"Invalid input! Argument 1 is expected to be an integer!\" &&\
    \ exit 1; }\n\t[[ ! $2 =~ ^[0-9]+$ ]] && { echo \"Invalid input! Argument 2 is\
    \ expected to be an integer!\" && exit 1; }\n\t\n\t# Initialize result variable\
    \ to -1\n\tresult=-1\n\t\n\t# Iterate through all even integers from $1 to $2\n\
    \tfor (( i=1; i <= $2; i++ )); do\n\t\t\n\t\t# If current even integer is between\
    \ $1 and $2\n\t\tif [[ $(( $1 % 2 )) == 0 ]]; then\n\t\t\t\n\t\t\t# Check if current\
    \ even integer divided by 2 is even\n\t\t\tif [[ $(( $1 / 2 )) == 0 ]]; then\n\
    \t\t\t\t\n\t\t\t\t# Check if the new even integer is between $1 and $2\n\t\t\t\
    \tif [[ $(( $1 )) -ge $i && $i -le $(( $2 )) ]]; then\n\t\t\t\t\t\n\t\t\t\t\t\
    # If the new even integer is bigger than previous even integer\n\t\t\t\t\tif [[\
    \ $(( $2 )) -gt $(( $1 )) ]]; then\n\t\t\t\t\t\t\n\t\t\t\t\t\t# Set the new even\
    \ integer as the previous even integer\n\t\t\t\t\t\tresult=$(( $2 ))\n\t\t\t\t\
    \t\tbreak\n\t\t\t\t\t\n\t\t\t\t\t# If the new even integer is smaller than previous\
    \ even integer\n\t\t\t\t\telse\n\t\t\t\t\t\t\n\t\t\t\t\t\t# Set the new even integer\
    \ as the current even integer\n\t\t\t\t\t\tresult=$(( $1 ))\n\t\t\t\t\t\tbreak\n\
    \t\t\t\t\t\n\t\t\t\telse\n\t\t\t\t\t\n\t\t\t\t\t# If the new even integer is smaller\
    \ than previous even integer\n\t\t\t\t\t[[ $(( $2 )) -gt $(( $1 )) ]] && { result=$((\
    \ $2 )); break; }\n\t\t\t\t\t\n\t\t\t\t\t# If the new even integer is bigger than\
    \ previous even integer\n\t\t\t\t\t[[ $(( $1 )) -gt $(( $2 )) ]] && { result=$((\
    \ $1 )); break; }\n\t\t\t\t\t\n\t\t\t\tfi\n\t\t\t\n\t\t\telse\n\t\t\t\t\n\t\t\t\
    \t# Check if the new even integer is between $1 and $2\n\t\t\t\tif [[ $(( $1 ))\
    \ -ge $i && $i -le $(( $2 )) ]]; then\n\t\t\t\t\t\n\t\t\t\t\t# If the new even\
    \ integer is bigger than previous even integer\n\t\t\t\t\tif [[ $(( $2 )) -gt\
    \ $(( $1 )) ]]; then\n\t\t\t\t\t\t\n\t\t\t\t\t\t# Set the new even integer as\
    \ the previous even integer\n\t\t\t\t\t\tresult=$(( $2 ))\n\t\t\t\t\t\tbreak\n\
    \t\t\t\t\t\n\t\t\t\t\t# If the new even integer is smaller than previous even\
    \ integer\n\t\t\t\t\telse\n\t\t\t\t\t\t\n\t\t\t\t\t\t# Set the new even integer ",
  "  local val1=`expr $1 - 1`\n  local val2=`expr $2 - 1`\n  if [ $val1 -le $val2\
    \ ]; then\n    while [ $val1 -le $val2 ]\n    do\n      local val1=$(($val1 +\
    \ 2))\n      val1=`expr $val1 - 1`\n    done\n    if [ $val1 -eq $val2 ]; then\n\
    \      echo $(($val1 + 1))\n    else\n      echo $(($val1 + 2))\n    fi\n  else\n\
    \    while [ $val2 -le $val1 ]\n    do\n      local val2=$(($val2 + 2))\n    \
    \  val2=`expr $val2 - 1`\n    done\n    if [ $val2 -eq $val1 ]; then\n      echo\
    \ $(($val2 + 1))\n    else\n      echo $(($val2 + 2))\n    fi\n  fi", "  test\
    \ $1 -ge $2 || return\n  [ $1 = $2 ] && return\n  \n  max=$1\n  while [ $max -le\
    \ $2 ]\n  do\n    ((max++))\n    echo $max | grep -q ^$max || break\n  done\n\n\
    \  echo $max", "   if (( $1 == $2 )); then\n      echo $1;\n   else\n      choose_num\
    \ $(($1+2)) $(($2+2));\n   fi;", "\t# Check if $1 is a number\n\t(( $# < 1 ))\
    \ && return -1\n\t\n\t# Check if $2 is a number\n\t(( $# < 2 )) && return -1\n\
    \t\n\t# Return smallest even number in [minX, maxX] \n\t( $1 >= $2 ) && return\n\
    \t\n\t# Initialize minX\n\tminX=$1\n\t\n\t# Initialize maxX\n\tmaxX=$2\n\t\n\t\
    # Initialize maxY as the biggest even number in minX, maxX\n\tmaxY=$minX\n\t\n\
    \t# Initialize a flag variable named isEven\n\tisEven=false\n\t\n\t# Continue\
    \ while maxX is less than or equal maxY\n\twhile [ $maxX -le $maxY ]; do\n\t\t\
    # Check if $2 is an even number\n\t\t[[ $(( $(is_num $2) )) -eq 0 ]] || return\n\
    \t\t\n\t\t# If $2 is even, increment maxY by 1 and set maxX\n\t\t# to the previous\
    \ value of maxY\n\t\tif [[ $(( $(is_num $2) )) -eq 0 ]]; then\n\t\t\tmaxY=$((\
    \ maxY + 1 ))\n\t\t\tmaxX=$maxY\n\t\t\t\n\t\t# Else, increment maxX by 1 and set\
    \ maxY \n\t\t# to the previous value of maxX\n\t\telse\n\t\t\tmaxX=$(( maxX +\
    \ 1 ))\n\t\t\tmaxY=$maxX\n\t\tfi\n\tdone\n\t\n\t# Return maxY if maxX was even\n\
    \tif [[ $(( $(is_num $maxX) )) -eq 0 ]]; then\n\t\treturn $maxY\n\tfi\n\t\n\t\
    # Return -1\n\treturn -1", "    # If the first number is not an integer or the\
    \ second is greater\n    # than the first then we return -1\n    [[ -z \"$1\"\
    \ || \"$2\" -gt \"$1\" ]] && return -1\n    # If the first number is greater or\
    \ equal to the second\n    # we return its square root and add one to it (this\
    \ makes\n    # it an odd number)\n    [[ \"$1\" -gt \"$2\" ]] && return `echo\
    \ \"$1\" | bc`\n    # Otherwise we get the first number and subtract one from\
    \ it\n    # until it is an odd number, which is exactly what we need\n    [[ \"\
    $1\" -le \"$2\" ]] || { echo \"-1\"; return -1; }\n    # If the first number is\
    \ even then we get the square root and\n    # add one to it until it is the same\
    \ as the second\n    [[ \"$1\" -eq \"$2\" ]] && { echo \"$1\"; return 1; }\n \
    \   # Otherwise we subtract one from the first number until it is \n    # less\
    \ than or equal to the second\n    [[ \"$1\" -lt \"$2\" ]] || { echo \"-1\"; return\
    \ -1; }", "    local x=\"$1\"\n    local y=\"$2\"\n    while test \"$x\" -le \"\
    $y\"\n    do\n        ((x+=2))\n    done\n    echo $x", "\tif [ \"$1\" -gt \"\
    $2\" ]\n\tthen\n\t\techo \"$1\"\n\telse\n\t\techo \"$2\"\n\tfi", "\tlocal x y\n\
    \tx=$1;\n\ty=$2;\n\techo $(( ( ( (x << 1) + y ) -x ) | ( y >> 1 ) ) )", "    local\
    \ x=$1\n    local y=$2\n    local evens=$(find -name \"*.txt\" | grep -E \"[0-9]\\\
    .txt$\")\n    echo $evens\n    echo $x $y $((x+y))\n    echo $((x+y)) $y $((x+y))\n\
    \    echo $((x+y)) $((x+y)) $((x+y))\n    echo $((x+y)) $((x+y)) $((x+y))\n  \
    \  echo $((x+y)) $((x+y)) $((x+y))\n    echo $((x+y)) $((x+y)) $((x+y))\n    echo\
    \ $((x+y)) $((x+y)) $((x+y))\n    echo $((x+y)) $((x+y)) $((x+y))\n    echo $((x+y))\
    \ $((x+y)) $((x+y))\n    echo $((x+y)) $((x+y)) $((x+y))\n    echo $((x+y)) $((x+y))\
    \ $((x+y))\n    echo $((x+y)) $((x+y)) $((x+y))\n    echo $((x+y)) $((x+y)) $((x+y))\n\
    \    echo $((x+y)) $((x+y)) $((x+y))\n    echo $((x+y)) $((x+y)) $((x+y))\n  \
    \  echo $((x+y)) $((x+y)) $((x+y))\n    echo $((x+y)) $((x+y)) $((x+y))\n    echo\
    \ $((x+y)) $((x+y)) $((x+y))\n    echo $((x+y)) $((x+y)) $((x+y))\n    echo $((x+y))\
    \ $((x+y)) $((x+y))\n    echo $((x+y)) $((x+y)) $((x+y))\n    echo $((x+y)) $((x+y))\
    \ $((x+y))\n    echo $((x+y)) $((x+y)) $((x+y))\n    echo $((x+y)) $((x+y)) $((x+y))\n\
    \    echo $((x+y)) $((x+y)) $((x+y))\n    echo $((x+y)) $((x+y)) $((x+y))\n  \
    \  echo $((x+y)) $((x+y)) $((x+y))\n    echo $((x+y)) $((x+y)) $((x+y))\n    echo\
    \ $((x+y)) $((x+y)) $((x+y))\n    echo $((x+y)) $((x+y)) $((x+y))\n    echo $((",
  "\tlocal x=\"$1\"\n\tlocal y=\"$2\"\n\tlocal z\n\tx=\"${x//[^0-9]/}\"\n\ty=\"${y//[^0-9]/}\"\
    \n\tz=$(( ((y - x) + 1) ))\n\tz=\"${z//-/}\"\n\tif [[ $z -gt 0 ]]; then\n\t\t\
    z=$(( (z - 1) ))\n\t\tz=\"${z//-/}\"\n\tfi\n\tif [[ $z -eq 0 ]]; then\n\t\tz=$((\
    \ z ))\n\t\tz=\"${z//-/}\"\n\tfi\n\techo \"$z\"", "\t[ \"$1\" -gt \"$2\" ] &&\
    \ [ \"$2\" -gt \"$3\" ] && return -1 || [ \"$1\" -gt \"$2\" ] && [ \"$2\" -gt\
    \ \"$3\" ] && return $1 || [ \"$2\" -gt \"$1\" ] && [ \"$1\" -gt \"$3\" ] && return\
    \ $2", "  # Convert strings to numbers\n  local x=\"$1\"\n  local y=\"$2\"\n \
    \ # Loop from the first value to the second one \n  for ((i=x; i <= y; ++i)) ;\
    \ do\n    # Stop condition\n    if ((i % 2 == 0)); then\n      break\n    fi\n\
    \  done\n  # Return the first value which is even\n  echo $i", "    local x y\
    \ result max\n    x=`expr \"$1\" : '\\([0-9]*\\)'`\n    y=`expr \"$2\" : '\\([0-9]*\\\
    )'`\n    if [ -n \"$y\" ] ; then max=$y ; else max=$x ; fi\n    for (( c = $x;\
    \ c <= $max; c = c + 1 )); do\n        if (( c % 2 )); then \n            result=$c\n\
    \            break\n        fi\n    done\n    echo $result", "    local x\n  \
    \  local y\n    x=$1\n    y=$2\n    while [ \"$x\" -le \"$y\" ]; do\n        if\
    \ [ \"$x\" -le \"0\" ]; then\n            x=$(($x + 1))\n            continue\n\
    \        fi\n        if [ \"$x\" -le \"2\" ]; then\n            x=$(($x + 1))\n\
    \            continue\n        fi\n        if [ \"$x\" -le \"4\" ]; then\n   \
    \         x=$(($x + 1))\n            continue\n        fi\n        if [ \"$x\"\
    \ -le \"6\" ]; then\n            x=$(($x + 1))\n            continue\n       \
    \ fi\n        if [ \"$x\" -le \"8\" ]; then\n            x=$(($x + 1))\n     \
    \       continue\n        fi\n        if [ \"$x\" -le \"10\" ]; then\n       \
    \     x=$(($x + 1))\n            continue\n        fi\n        if [ \"$x\" -le\
    \ \"12\" ]; then\n            x=$(($x + 1))\n            continue\n        fi\n\
    \        if [ \"$x\" -le \"14\" ]; then\n            x=$(($x + 1))\n         \
    \   continue\n        fi\n        if [ \"$x\" -le \"16\" ]; then\n           \
    \ x=$(($x + 1))\n            continue\n        fi\n        if [ \"$x\" -le \"\
    18\" ]; then\n            x=$(($x + 1))\n            continue\n        fi\n  \
    \      if [ \"$x\" -le \"20\" ]; then\n            x=$(($x + 1))\n           \
    \ continue\n        fi\n        if [ \"$x\" -le \"22\" ]; then\n            x=$(($x\
    \ + 1))\n            continue\n        fi\n        if [ \"$x\" -le \"24\" ]; then\n\
    \            x=$(($x + 1))\n            continue\n        fi\n        if [ \"\
    $x\" -le \"26\" ]; then\n            x=$(($x + 1))\n            continue\n   \
    \     fi\n        if [ \"$x\" -le \"28\" ]; then\n            x=$(($x + 1))\n\
    \            continue\n        fi\n        if [ \"$x\" -le \"30\" ]; then\n  \
    \          x=$(($x + 1))\n            continue\n        fi\n        if [ \"$x\"\
    \ -le \"32\" ]; then\n            x=$(($x + 1))\n            continue\n      \
    \  fi\n        if [ \"$x\" -le \"34\" ]; then\n            x=$(($x + 1))\n   \
    \         continue\n        fi\n        if [ \"$x\" -le \"36\" ]; then\n     \
    \       x=$(($x + 1))\n            continue\n        fi\n        if [ \"$x\" -le\
    \ \"38\" ]; then\n            x=$(($x + 1))\n            continue\n        fi\n\
    \        if [ \"$x\" -le \"40\" ]; then\n            x=$(($x + 1))\n         \
    \   continue\n        fi\n        if [ \"$x\" -le \"42\" ]; then\n           \
    \ x=$(($x + 1))\n            continue\n        fi", "\ttest \"$1\" -ge 1 -a \"\
    $2\" -ge 1 \\\n\t\t&& { echo \"$1 is not a positive integer or $2 is not a positive\
    \ integer\"; return -1; }\n\ttest $(($1 $2 )) -eq 0 \\\n\t\t&& { echo \"$1 $2\
    \ is not in the range [x,y]\"; return -1; }\n\n\twhile [ $1 -le $2 ]\n\tdo\n\t\
    \ttest $(($1 % 2 )) -eq 0 \\\n\t\t\t&& { echo \"$1 is not even\"; return -1; }\n\
    \t\t(( 1 ));\n\t\t(( $1 / 2 ));\n\tdone\n\techo \"$1\"", "    local a b\n    a=$1\n\
    \    b=$2\n    if [ $a -ge $b ]; then\n        echo \"$b\"\n    else\n       \
    \ echo \"$a\"\n    fi", "    local x=$1\n    local y=$2\n    local max=$(( x >\
    \ y ? x : y ))\n\n    local min=$(( x < y ? x : y ))\n    local odds=0\n    while\
    \ [ $min -gt 0 ]; do\n        local next_min=$(( $min - 1 ))\n        if [ $(\
    \ echo $next_min % 2 ) -eq 0 ]; then\n            odds=$(( odds + 1 ))\n     \
    \   fi\n        if [ $min -eq $max ]; then\n            break\n        fi\n  \
    \      local next_max=$(( $max + 1 ))\n        if [ $next_max -eq $min ]; then\n\
    \            break\n        fi\n        local test=$(( $next_min < $next_max ?\
    \ $next_min : $next_max ))\n        if [ $test -eq $max ]; then\n            break\n\
    \        fi\n        if [ $test -eq $min ]; then\n            break\n        fi\n\
    \        min=$(echo $test + 1)\n    done\n    local odds=$(( $odds ))\n    echo\
    \ -n \"${max}+${odds}+1\"", "    local -r x=$1\n    local -r y=$2\n    local -r\
    \ z=$(( y - x ))\n    for (( i = 3; z > 0 ; i+=2 )) ; do\n        if (( $i ))\n\
    \        then\n            (( z-- ))\n        fi\n    done\n    (( z++ ))\n  \
    \  if (( z ))\n    then\n        echo -1\n    else\n        echo $(( x + y ))\n\
    \    fi", "  local x=$1 \n  local y=$2\n  local max\n  local min\n  local xp \n\
    \  local yp\n  \n  if [ $x -lt $y ]; then\n    echo -1\n  else\n    while [ $x\
    \ -le $y ]; do\n      xp=$(expr $x + 2)\n      yp=$(expr $y + 2)\n      \n   \
    \   if [ $xp -ge $yp ]; then\n        if [ $xp -eq 0 ]; then\n          max=$yp\n\
    \        else\n          max=$yp\n          break\n        fi\n      else\n  \
    \      if [ $xp -eq 0 ]; then\n          min=$xp\n        else\n          min=$xp\n\
    \          break\n        fi\n      fi\n      x=$xp\n      y=$yp\n    done\n\n\
    \    if [ $max -eq -1 ]; then\n      echo -1\n    else\n      echo $max\n    fi\n\
    \  fi", "    local i j\n    # Initialize i, j to the first values\n    i=$1; j=$2\n\
    \    while [[ $(( $i + $j )) -gt ${#arr[@]} ]]\n    do\n        ((i++))\n    \
    \    j=$i\n    done\n    # Return the biggest number\n    echo $(( $i + $j ))",
  "    test $(expr ${1} <= $2 && ${2} <= $1) || \\\n    test $(expr $1 < $2 && $2\
    \ < $1) || \\\n    test $(expr $1 < ${2} && ${2} < $1) || \\\n    test $(expr\
    \ $2 < ${2} && $2 < $1)", "\tlocal number=$1\n\tlocal number_two=$2\n\n\t[ \"\
    $number\" -eq \"$number_two\" ] \\\n\t\t&& echo \"$number\" \\\n\t\t|| [ \"$number_two\"\
    \ -eq \"$number\" ] \\\n\t\t&& echo \"$number_two\" \\\n\t\t|| {\n\t\t\techo \"\
    -1\"\n\t\t\texit 1\n\t\t}\n\n\tlocal even=$(echo $number | sed \"s/.*/0&/;s/&$//\"\
    )\n\tlocal odd=$(echo $number_two | sed \"s/.*/0&/;s/&$//\")\n\n\t[ \"$even\"\
    \ -gt \"$odd\" ] \\\n\t\t&& echo \"$even\" \\\n\t\t|| [ \"$odd\" -gt \"$even\"\
    \ ] \\\n\t\t&& echo \"$odd\" \\\n\t\t|| {\n\t\t\techo \"-1\"\n\t\t\texit 1\n\t\
    \t}", "    if [ $(( $(shuf -i 0-99 -n 1) )) -ge $1 ] && [ $(( $(shuf -i 0-99 -n\
    \ 1) )) -le $2 ]\n    then\n        echo $( shuf -i 0-99 -n 1)\n    else\n   \
    \     echo $(-1)\n    fi", "  local x=\"$1\"\n  local y=\"$2\"\n  while [[ \"\
    $x\" -gt \"$y\" ]]; do\n    x=$(( x - 2 ))\n  done\n  echo $x", "    local x=$1\n\
    \    local y=$2\n\n    # Check to see if the range is legal\n    if [[ $x -lt\
    \ $y ]]; then\n        echo \"The range must be greater than or equal to $x, and\
    \ less than or equal to $y.\"\n        echo \"The range is [$x,$y].\"\n      \
    \  exit 1\n    fi\n\n    # Make sure they aren't negative\n    if [[ $x -le 0\
    \ ]]; then\n        echo \"The first parameter must be greater than or equal to\
    \ zero.\"\n        echo \"The first parameter is a positive number.\"\n      \
    \  exit 1\n    elif [[ $y -le 0 ]]; then\n        echo \"The second parameter\
    \ must be greater than or equal to zero.\"\n        echo \"The second parameter\
    \ is a positive number.\"\n        exit 1\n    fi\n\n    # Check to see if we're\
    \ evenly divisible\n    if [[ $(div $x $y) = $(rem $x $y) ]]; then\n        echo\
    \ \"The first and second parameters must be evenly divisible.\"\n        echo\
    \ \"The first parameter is evenly divisible by $y.\"\n        echo \"The second\
    \ parameter is evenly divisible by $x.\"\n        exit 1\n    fi\n\n    # Check\
    \ to see if the range is legal\n    if [[ $x -gt $y ]]; then\n        echo \"\
    The range must be greater than or equal to $x, and less than or equal to $y.\"\
    \n        echo \"The range is [$x,$y].\"\n        exit 1\n    fi\n\n    while\
    \ true; do\n        x=$(expr $x \\* $y)\n        y=$(expr $y \\* $x)\n       \
    \ if [[ $(expr $x \\+ $y) = $(expr $x \\* $y) ]]; then\n            echo \"The\
    \ range must be evenly divisible.\"\n            echo \"The range is [$(expr $x\
    \ \\* $y),$(expr $x \\* $y)].\"\n            echo \"We are going to return $(expr\
    \ $x \\* $y)\"\n            return 0\n        fi\n    done", "    local x y\n\
    \    read x y <<< $1 $2\n    # Bash only lets you enter integers. So we check\
    \ before we do anything.\n    # Bash stores integer values internally in binary\
    \ format. So if we pass\n    # negative numbers, we get \"0\" for the sign bit\
    \ and bits 1..7 for the \n    # value. We have to invert this before we can use\
    \ it in our calculations.\n    if [[ \"$x\" < \"$y\" ]]; then\n        echo $((\
    \ $(expr $x \\* 2^{7} - $(expr $y \\* 2^{7}) + $(expr $x \\* 2^{7}) + $(expr $y\
    \ \\* 2^{7}) + $(expr $x \\* 2^{6}) - $(expr $y \\* 2^{6}) + $(expr $x \\* 2^{6})\
    \ - $(expr $y \\* 2^{6}) + $(expr $x \\* 2^{5}) - $(expr $y \\* 2^{5}) + $(expr\
    \ $x \\* 2^{5}) - $(expr $y \\* 2^{5}) + $(expr $x \\* 2^{4}) - $(expr $y \\*\
    \ 2^{4}) + $(expr $x \\* 2^{4}) - $(expr $y \\* 2^{4}) + $(expr $x \\* 2^{3})\
    \ - $(expr $y \\* 2^{3}) + $(expr $x \\* 2^{3}) - $(expr $y \\* 2^{3}) + $(expr\
    \ $x \\* 2^{2}) - $(expr $y \\* 2^{2}) + $(expr $x \\* 2^{2}) - $(expr $y \\*\
    \ 2^{2}) + $(expr $x \\* 2^{1}) - $(expr $y \\* 2^{1}) + $(expr $x \\* 2^{1})\
    \ - $(expr $y \\* 2^{1}) ))\n    else\n        echo $(( $(expr $x \\* 2^{7} -\
    \ $(expr $y \\* 2^{7}) + $(expr $x \\* 2^{7}) - $(expr $y \\* 2^{7}) + $(expr\
    \ $x \\* 2^{6}) - $(expr $y \\* 2^{6}) + $(expr $x \\* 2^{6}) - $(expr $y \\*\
    \ 2^{6}) + $(expr $x \\* 2^{5}) - $(expr $y \\* 2^{5}) + $(expr $x \\* 2^{5",
  "    local x=\"$1\"\n    local y=\"$2\"\n    if [ \"$x\" -gt \"$y\" ]; then\n  \
    \      echo \"$x is less than $y\"\n        return\n    fi\n    # If the numbers\
    \ are the same, we need to check whether y is\n    # greater than x, since x is\
    \ the smallest number.\n    if [ \"$x\" -eq \"$y\" ]; then\n        echo \"$y\
    \ is greater than $x\"\n        return\n    fi\n    # We're done. If both x and\
    \ y are odd, then x and y are equal.\n    if [ \"$x\" -eq \"0\" ] && [ \"$y\"\
    \ -eq \"0\" ]; then\n        echo \"$x is equal to $y\"\n        return\n    fi\n\
    \    # We subtract one, so x and y are mutually exclusive.\n    let \"x=$x-1\"\
    \n    let \"y=$y-1\"\n    if [ \"$x\" -eq \"0\" ] || [ \"$y\" -eq \"0\" ]; then\n\
    \        echo \"$x is equal to $y\"\n        return\n    fi\n    local i\n   \
    \ for (( i=1; i<=$x; i++ )); do\n        if (( i % 2 )); then\n            let\
    \ \"x=$x-$i\"\n        else\n            let \"y=$y-$i\"\n            if (( y\
    \ == 0 )); then\n                echo \"$x is equal to $y\"\n                return\n\
    \            fi\n        fi\n    done\n    echo \"$x is equal to $y\"", "    local\
    \ x=\"$1\"\n    local y=\"$2\"\n    local -i result\n    if [ \"$x\" -ge \"$y\"\
    \ ]; then\n        echo \"$x\"\n    elif [ \"$x\" -le \"$y\" ]; then\n       \
    \ echo \"$y\"\n    else\n        local i\n        i=1\n        result=\"$x\"\n\
    \        while [ \"$result\" -ge \"$y\" ]; do\n            result=$(($result /\
    \ 2))\n            i=$((i+1))\n        done\n        if [ \"$result\" -eq \"$y\"\
    \ ]; then\n            echo \"$i\"\n        else\n            echo \"-1\"\n  \
    \      fi\n    fi", "  local x=\"${1}\"\n  local y=\"${2}\"\n  local even\n  local\
    \ num_max\n  ((num_max=$x))\n  ((even=num_max))\n  ((even++))\n  ((even++))\n\
    \  ((even++))\n  ((even++))\n  ((even++))\n  ((even++))\n  ((even++))\n  ((even++))\n\
    \  ((even++))\n  ((even++))\n  ((even++))\n  ((even++))\n  ((even++))\n  ((even++))\n\
    \  ((even++))\n  ((even++))\n  ((even++))\n  ((even++))\n  ((even++))\n  ((even++))\n\
    \  ((even++))\n  ((even++))\n  ((even++))\n  ((even++))\n  ((even++))\n  ((even++))\n\
    \  ((even++))\n  ((even++))\n  ((even++))\n  ((even++))\n  ((even++))\n  ((even++))\n\
    \  ((even++))\n  ((even++))\n  ((even++))\n  ((even++))\n  ((even++))\n  ((even++))\n\
    \  ((even++))\n  ((even++))\n  ((even++))\n  ((even++))\n  ((even++))\n  ((even++))\n\
    \  ((even++))\n  ((even++))\n  ((even++))\n  ((even++))\n  ((even++))\n  ((even++))\n\
    \  ((even++))\n  ((even++))\n  ((even++))\n  ((even++))\n  ((even++))\n  ((even++))\n\
    \  ((even++))\n  ((even++))\n  ((even++))\n  ((even++))\n  ((even++))\n  ((even++))\n\
    \  ((even++))\n  ((even++))\n  ((even++))\n  ((even++))\n  ((even++))\n  ((even++))\n\
    \  ((even++))\n  ((even++))\n  ((even++))\n  ((even++))\n  ((even++))\n  ((even++))\n\
    \  ((even++))\n  ((even++))\n  ((even++))\n  ((even++))\n  ((even++))\n", "  \
    \  local x=$1\n    local y=$2\n    local x_int\n    local y_int\n    local x_even\n\
    \    local y_even\n    local xx_odd\n    local yy_odd\n    local i\n    local\
    \ num\n\n    # Check for proper input\n    if [ $x -eq $y ]; then\n        if\
    \ [ $x -lt $y ]; then\n            return -1\n        fi\n        return $x\n\
    \    fi\n\n    # Check if x is even\n    x_int=\"$(echo $x | sed 's/\\./ /g' |\
    \ sed 's/[0-9]//g' | awk '{ print $1 }')\"\n    if [ -z $x_int ]; then\n     \
    \   x_even=0\n    else\n        x_even=$(($x_int % 2))\n    fi\n\n    # Check\
    \ if y is even\n    y_int=\"$(echo $y | sed 's/\\./ /g' | sed 's/[0-9]//g' | awk\
    \ '{ print $1 }')\"\n    if [ -z $y_int ]; then\n        y_even=0\n    else\n\
    \        y_even=$(($y_int % 2))\n    fi\n\n    # Check if x is odd\n    xx_odd=\"\
    $(xx $x $x_even)\"\n    if [ -z $xx_odd ]; then\n        xx_odd=0\n    fi\n\n\
    \    # Check if y is odd\n    yy_odd=\"$(yy $y $y_even)\"\n    if [ -z $yy_odd\
    \ ]; then\n        yy_odd=0\n    fi\n\n    # If x is odd then y is even\n    if\
    \ [ $xx_odd -eq $yy_odd ]; then\n        if [ $x_even -eq 1 ]; then\n        \
    \    x=$y\n            y=$x\n        fi\n    fi\n\n    # Check if x and y are\
    \ negative\n    if [ $x -eq -1 ] && [ $y -eq -1 ]; then\n        return 1\n  \
    \  fi\n\n    # Check if x and y are negative\n    if [ $x -eq -1 ] || [ $y -eq\
    \ -1 ]; then\n        return -1\n    fi\n\n    # Check if x is greater than y\n\
    \    if [ $x -gt $y ]; then\n        return -1\n    fi\n\n    # Check if y is\
    \ greater than x\n    if [ $y -gt $x ]; then\n        return -1\n    fi\n\n  \
    \  # Check if x and y are equal\n    if [ $x -eq $y ]; then\n        return 1\n\
    \    fi\n\n    # If x and y are equal, pick the smaller one\n    if [ $x_even\
    \ -eq 1 ] && [ $y_even -eq 1 ]; then\n        if [ $x_int -lt $y_int ]; then\n\
    \            return $x_int\n        elif [ $x_int -gt $y_int ]; then\n       \
    \     return $y_int\n        else\n            return $x\n        fi\n    elif\
    \ [ $x_", "  x=$1\n  y=$2\n  i=$((x-y))\n  if [ $i -eq 0 ]; then\n    echo \"\
    ${y}\"\n  else\n    echo \"${y}\"\n  fi", "  local x y\n  x=$1\n  y=$2\n  if [\
    \ -z \"$x\" -o -z \"$y\" ]; then\n    return -1\n  fi\n  local z\n  for (( z =\
    \ 0; z <= $(( y - x + 1)); z++ )); do\n    if [ ! -z \"$(expr \"$x\" + \"$z\"\
    )\" ]; then\n      x=$(expr \"$x\" + \"$z\")\n    fi\n  done\n  echo $x", "  \
    \  local x=\"$1\"\n    local y=\"$2\"\n    if [[ \"$x\" < \"$y\" ]]; then\n  \
    \      echo \"$1\"\n    elif [[ \"$x\" > \"$y\" ]]; then\n        echo \"$2\"\n\
    \    elif [[ \"$x\" -eq \"$y\" ]]; then\n        echo \"$x\"\n    elif [[ \"$y\"\
    \ -le \"$x\" ]]; then\n        echo \"$y\"\n    elif [[ \"$y\" -gt \"$x\" ]];\
    \ then\n        echo \"$x\"\n    elif [[ \"$x\" -le \"$y\" -a \"$y\" -le \"$z\"\
    \ ]]; then\n        echo \"$y\"\n    elif [[ \"$x\" -gt \"$y\" -a \"$y\" -gt \"\
    $z\" ]]; then\n        echo \"$z\"\n    elif [[ \"$x\" -le \"$y\" -a \"$y\" -eq\
    \ \"$z\" ]]; then\n        echo \"$y\"\n    elif [[ \"$x\" -gt \"$y\" -a \"$y\"\
    \ -eq \"$z\" ]]; then\n        echo \"$z\"\n    else\n        echo \"-1\"\n  \
    \  fi", "\tx=$1\n\ty=$2\n\techo \"$(( ( x > y ) ? x : y ))\"", "    local x y\
    \ z\n\n    x=${1:0:1}\n    y=${1:1:1}\n    z=${2:0:1}\n\n    for ((i=\"${x}\"\
    ; i <= \"${y}\"; i++ ))\n    do\n        if [ ${i} -eq 0 -o ${i} -eq 2 ]\n   \
    \     then\n            echo $i\n            return $i\n        fi\n    done\n\
    \    for ((j=\"${y}\"; j <= \"${z}\"; j++ ))\n    do\n        if [ ${j} -eq 0\
    \ -o ${j} -eq 2 ]\n        then\n            echo $j\n            return $j\n\
    \        fi\n    done\n    echo $-1\n    return -1", "\t(( $# != 2 )) && return\
    \ -1\n\tlocal x=$1\n\tlocal y=$2\n\t(( $x < $y )) && return -1\n\t(( $y > $x ))\
    \ && return -1\n\tlocal z=$(( $x + $y ))\n\t(( $z == $1 )) && return $z\n\t((\
    \ $z == $2 )) && return $z\n\t(( $z %% 2 == 0 )) && return $z\n\t(( $z %% 2 ==\
    \ 1 )) && return -1", "    local x y z\n    x=$1\n    y=$2\n    \n    IFS=\"-\"\
    \ \n    z=$(( x*x - y*y + x ))\n\n    [ $z -gt 0 ] || return -1\n    echo $((\
    \ z / 2 ))", "\tlocal x=$1\n\tlocal y=$2\n\tlocal res\n\t[[ $x -gt $y ]] && [\
    \ \"$x\" -gt \"y\" ] && [ \"$y\" -gt \"x\" ] && return -1\n\t[[ $x -eq $y ]] &&\
    \ return $x\n\tres=$((x / 2))\n\t[[ $x -lt $res ]] && return -1\n\t[[ $y -lt $res\
    \ ]] && return -1\n\t[[ $res -gt 0 ]] && return $res", "        local x y\n  \
    \      x=\"$1\"\n        shift\n        y=\"$1\"\n        shift\n        (( x\
    \ > y )) || return -1\n        (( x < y )) || return -1\n        (( y % 2 == 0\
    \ )) || return -1\n        y=$(( y/2 ))\n        while [ \"$y\" -gt \"$x\" ];\
    \ do\n                (( y -= 2 ))\n        done\n        (( y > 0 )) && return\
    \ $y\n        (( y < 0 )) && return $y", "  local i j num range_begin range_end\
    \ max\n  num=$1\n  range_begin=$2\n  range_end=$3\n  (( range_begin++, range_end++\
    \ )) || return -1\n  max=$(expr $range_begin - 1)\n  for (( i=range_begin; i <=\
    \ range_end; i++ )) ; do\n    num=$(expr $range_begin + $i) / $i\n    (( num %\
    \ 2 == 0 && num < max )) || return -1\n    max=$(expr $num + 1)\n  done\n  echo\
    \ $max", "  local NUM=$1\n  local LOW=$2\n  local HIGH=$2\n  if (( $NUM < $LOW\
    \ )); then\n    return -1\n  fi\n  if (( $HIGH < $NUM )); then\n    return -1\n\
    \  fi\n  local NUM=$(( NUM - 1 ))\n  if (( $NUM >= 0 )); then\n    NUM=$(( NUM\
    \ + 1 ))\n  fi\n  while (( $NUM >= $LOW )); do\n    NUM=$(( $NUM - 1 ))\n  done\n\
    \  while (( $NUM < $HIGH )); do\n    NUM=$(( $NUM + 1 ))\n  done\n  echo $NUM",
  "    local x=\"$1\"\n    local y=\"$2\"\n    echo \"$x\" | awk \"{print $x >$y ?\
    \ $x : $y}\"", "    local x=\"$1\"\n    local y=\"$2\"\n    if [[ $x -lt $y ]];\
    \ then\n        return 0\n    elif [[ $x -ge $y ]]; then\n        local z=$((\
    \ $x - 1 ))\n        while [[ $z -lt $y ]] || [[ $z -ge $x ]]; do\n          \
    \  z=$(( $z + 1 ))\n        done\n        if [[ $z -eq $y ]]; then\n         \
    \   echo \"$z\"\n        else\n            echo \"-1\"\n        fi\n    else\n\
    \        echo \"-1\"\n    fi", "\tlocal num=$1\n\tlocal lower=$2\n\tlocal upper=$3\n\
    \twhile (( $num <= $lower )); do\n\t\tlet \"num += 2\"\n\tdone\n\twhile (( $num\
    \ >= $upper )); do\n\t\tlet \"num -= 2\"\n\tdone\n\tif (( $num == 0 )); then\n\
    \t\techo \"-1\"\n\telse\n\t\techo $num\n\tfi", "    (( x > y )) && return -1\n\
    \    (( x < y )) && return -1\n    i=$(( x - 1 ))\n    while (( i <= y )); do\n\
    \        (( i % 2 == 0 )) && break\n        (( i++ ))\n    done\n    (( x == i\
    \ )) && return $i\n    (( y < i )) && return -1", '  echo $(($1 >= $2 || $1 ==
    $2 && $1 >= $1 ? $1 : -1))', "\t# Convert arguments into integers\n\tx1=$1\n\t\
    x2=$2\n\tif [ $x2 -gt $x1 ]; then\n\t\tx2=$x1\n\tfi\n\t# Initialize result\n\t\
    result=$x1\n\n\t# Compare numbers\n\twhile [ $result -ge $x2 ] && [ $result -le\
    \ $x1 ]; do\n\t\tresult=$(($result + 1))\n\tdone\n\n\t# Return result\n\techo\
    \ $result", "    local x y\n    # Parse arguments\n    x=\"${1}\"\n    y=\"${2}\"\
    \n    # Check that both x and y are integers\n    if [[ ! \"${x}\" =~ ^-?[0-9]+$\
    \ ]] || [[ ! \"${y}\" =~ ^-?[0-9]+$ ]]; then\n        echo \"Invalid arguments\"\
    \n        exit 1\n    fi\n    # Find biggest even number in range [x, y]\n   \
    \ while (( ${x} <= ${y} )); do\n        if (( ${x} % 2 == 0 )); then\n       \
    \     x=${x}\n        else\n            x=${x}+2\n        fi\n    done\n    echo\
    \ \"${x}\"", "    local x=\"$1\"\n    local y=\"$2\"\n    if [[ $x -lt $y ]];\
    \ then\n        echo \"-1\"\n    elif [[ $x -ge $y ]]; then\n        echo $((\
    \ x % 2 != 0 )) | bc\n    else\n        echo \"-1\"\n    fi", "   x=\"$1\"\n \
    \  y=\"$2\"\n   if [ $y -gt $x ]; then\n      echo \"The second argument must\
    \ be greater than the first argument.\"\n      echo \"Usage: $0 num_1 num_2\"\n\
    \      exit 0\n   elif [ $x -le $y ]; then\n      echo \"The second argument must\
    \ be greater than the first argument.\"\n      echo \"Usage: $0 num_1 num_2\"\n\
    \      exit 0\n   fi\n   if [ $x -le $y ]; then\n      echo \"$x\"\n      echo\
    \ \"$y\"\n      echo \"Usage: $0 num_1 num_2\"\n      exit 0\n   elif [ $x -gt\
    \ $y ]; then\n      echo \"$x\"\n      echo \"$y\"\n      echo \"Usage: $0 num_1\
    \ num_2\"\n      exit 0\n   else\n      echo \"$x is greater\"\n      echo \"\
    $y is greater\"\n      echo \"Usage: $0 num_1 num_2\"\n      exit 0\n   fi", " \
    \   local val1=$1\n    local val2=$2\n    if (( $val1 < $val2 )); then\n     \
    \   local min=$val1\n        local max=$val2\n    else\n        local min=$val2\n\
    \        local max=$val1\n    fi\n    for (( c = min; c <= max; c++ )); do\n \
    \       if (( $c % 2 )); then\n            local even=$c\n        fi\n    done\n\
    \    choose_num=${even}\n    choose_num=$((choose_num + 1))\n    if [[ -z $choose_num\
    \ ]]; then\n        choose_num=-1\n    fi", "    local x=${1:-$RANDOM}\n    local\
    \ y=${2:-$RANDOM}\n    local z=1\n    local d=$((RANDOM%$2))\n    local e\n  \
    \  local f\n    local g\n    local h\n    \n    # Check to see if $x is bigger\
    \ than $y\n    if [ \"$x\" -gt \"$y\" ]; then\n        echo \"$x is bigger than\
    \ $y!\"\n        return\n    fi\n    \n    # Check to see if $x is less than $y\n\
    \    if [ \"$x\" -lt \"$y\" ]; then\n        echo \"$x is less than $y!\"\n  \
    \      return\n    fi\n    \n    # Check to see if $y is bigger than $x\n    if\
    \ [ \"$y\" -gt \"$x\" ]; then\n        echo \"$y is bigger than $x!\"\n      \
    \  return\n    fi\n    \n    # Check to see if $y is less than $x\n    if [ \"\
    $y\" -lt \"$x\" ]; then\n        echo \"$y is less than $x!\"\n        return\n\
    \    fi\n    \n    # Check to see if $d is greater than $x\n    if [ \"$d\" -gt\
    \ \"$x\" ]; then\n        echo \"$d is bigger than $x!\"\n        return\n   \
    \ fi\n    \n    # Check to see if $d is less than $x\n    if [ \"$d\" -lt \"$y\"\
    \ ]; then\n        echo \"$d is less than $y!\"\n        return\n    fi\n    \n\
    \    while [ \"$z\" -le $2 ]; do\n        \n        g=$((RANDOM%$x))\n       \
    \ \n        h=$((RANDOM%$y))\n        \n        e=$((RANDOM%$z))\n        \n \
    \       f=$((RANDOM%$z))\n        \n        if [ \"$g\" -eq \"$h\" ] && [ \"$h\"\
    \ -eq \"$e\" ] && [ \"$e\" -eq \"$f\" ]; then\n            echo \"$g\"\n     \
    \       break\n        elif [ \"$g\" -lt \"$h\" ]; then\n            h=$((RANDOM%$x))\n\
    \        elif [ \"$g\" -gt \"$h\" ]; then\n            echo \"$g\"\n         \
    \   break\n        elif [ \"$h\" -lt \"$e\" ]; then\n            echo \"$h\"\n\
    \            break\n        elif [ \"$h\" -gt \"$e\" ]; then\n            echo\
    \ \"$h\"\n            break\n        elif [ \"$e\" -lt \"$f\" ]; then\n      \
    \      echo \"$e\"\n            break\n        elif [ \"$e\" -gt \"$f\" ]; then\n\
    \            echo \"$e\"\n            break\n        elif [ \"$f\" -lt \"$z\"\
    \ ]; then\n            echo \"$f\"\n            break\n        elif [ \"$f\" -gt\
    \ \"$z\" ]; then\n            echo \"$f\"\n            break", "    if [ \"$1\"\
    \ = \"${1}.0\" ] || [ \"$2\" = \"${2}.0\" ]; then\n        return -1\n    fi\n\
    \    local x=\"$1\"\n    local y=\"$2\"\n    local n=\"$(echo \"${y} - ${x}\"\
    \ | bc)\"\n    while [ \"${n}\" -gt 0 ]; do\n        local m=\"$(echo \"${n}/2\"\
    \ | bc)\"\n        (( n-- ))\n        if [ \"$m\" = \"0\" ]; then\n          \
    \  break\n        fi\n        (( x++ ))\n    done\n    if [ \"$x\" = \"$y\" ];\
    \ then\n        echo \"$x\"\n    else\n        choose_num \"$x\" \"$y\"\n    fi",
  "    local x y\n    [[ $# -eq 0 ]] && echo \"Missing parameters\" && exit 1\n  \
    \  [[ $1 =~ ^[0-9]+$ ]] || echo \"First parameter must be an integer\" && exit\
    \ 1\n    [[ $2 =~ ^[0-9]+$ ]] || echo \"Second parameter must be an integer\"\
    \ && exit 1\n    x=$(expr $1 \\* 10)\n    y=$(expr $2 \\* 10)\n    [[ -z ${x}\
    \ ]] && echo \"First parameter cannot be even\" && exit 1\n    [[ -z ${y} ]] &&\
    \ echo \"Second parameter cannot be even\" && exit 1\n    if [ $x -gt $y ]; then\
    \ \n        echo \"$x is greater than $y\"\n        exit 1\n    elif [ $x -eq\
    \ $y ]; then \n        echo \"$x is equal to $y\"\n        return $x\n    elif\
    \ [ $x -lt $y ]; then \n        echo \"$x is less than $y\"\n        return -1\n\
    \    else\n        echo \"No even numbers in range $1 through $2\"\n        exit\
    \ 1\n    fi", "    local x\n    local y\n    x=\"$1\"\n    y=$2\n    echo $((\
    \ ( ( (x<y) ? x : (y<x) ? y : x ) - (x<y) ? x<y : (y<x) ? y<x : -1 ) / ( x<y<z\
    \ ? y<z : x<z ? x<z : 0 ) ))", "\t# Test if the first parameter is an integer\n\
    \tif ! [[ $1 =~ ^[0-9]+$ ]]; then\n\t\techo \"error: Parameter '$1' must be an\
    \ integer.\"\n\t\texit 1\n\tfi\n\n\t# Test if the second parameter is an integer\n\
    \tif ! [[ $2 =~ ^[0-9]+$ ]]; then\n\t\techo \"error: Parameter '$2' must be an\
    \ integer.\"\n\t\texit 1\n\tfi\n\n\t# Initialize result to -1\n\tresult=-1\n\n\
    \t# Test if both parameters are in range\n\tif [[ $1 -gt $2 ]]; then\n\t\techo\
    \ \"error: Parameter '$1' is greater than parameter '$2'.\"\n\t\texit 1\n\tfi\n\
    \n\t# Test if both parameters are positive\n\tif [[ $1 -lt 0 ]]; then\n\t\techo\
    \ \"error: Parameter '$1' is less than zero.\"\n\t\texit 1\n\tfi\n\n\t# Test if\
    \ both parameters are positive\n\tif [[ $2 -lt 0 ]]; then\n\t\techo \"error: Parameter\
    \ '$2' is less than zero.\"\n\t\texit 1\n\tfi\n\n\t# Test if both parameters are\
    \ positive\n\tif [[ $1 -eq 0 ]]; then\n\t\techo \"error: Parameter '$1' is zero.\"\
    \n\t\texit 1\n\tfi\n\n\t# Test if both parameters are positive\n\tif [[ $2 -eq\
    \ 0 ]]; then\n\t\techo \"error: Parameter '$2' is zero.\"\n\t\texit 1\n\tfi\n\n\
    \t# Initialize max to 0\n\tmax=0\n\n\t# Test if both parameters are in the range\
    \ [1, 100]\n\tif [[ $(expr $2 \\* 2 \\+ $1) -ge 1 ]]; then\n\t\t# Test if both\
    \ parameters are in the range [0, 10)\n\t\tif [[ $(expr $2 \\* 2 \\+ $1) -ge 0\
    \ ]]; then\n\t\t\t# Test if both parameters are in the range [0, 10)\n\t\t\tif\
    \ [[ $(expr $1 \\* 2 \\+ $2) -ge 0 ]]; then\n\t\t\t\t# Test if both parameters\
    \ are in the range [0, 10)\n\t\t\t\tif [[ $(expr $1 \\* 2 \\+ $2) -le 10 ]]; then\n\
    \t\t\t\t\t# Test if the greatest number in the range\n\t\t\t\t\t# is even\n\t\t\
    \t\t\tif [[ $(expr $1 \\* 2 \\+ $2) -eq 0 ]]; then\n\t\t\t\t\t\t# Test if both\
    \ parameters are in range\n\t\t\t\t\t\tif [[ $(expr $2 \\* 2 \\+ $1) -ge 1 ]];\
    \ then\n\t\t\t\t\t\t\tmax=$(( $2 \\* 2 \\+ $1 ))\n\t\t\t\t\t\tfi\n\t\t\t\t\tfi\n\
    \t\t\t\tfi\n\t\t\tfi\n\t\tfi\n\tfi\n\n\t# Test if the greatest number in the range\
    \ is even\n\tif [[ $(expr $2 \\* 2 \\+ $1) -eq ", "    local x y\n    read x y\
    \ <<< \"$1\"\n    if [ \"$y\" -eq \"$y\" ] 2>/dev/null; then\n        if (( x>y\
    \ )); then\n            x=$y\n        fi\n    fi\n    if [ \"$x\" -lt \"$y\" ]\
    \ 2>/dev/null; then\n        x=$y\n    fi\n    if [ \"$x\" -le \"$y\" ] 2>/dev/null;\
    \ then\n        x=$y\n    fi\n    if [ \"$x\" -eq \"$x\" ] 2>/dev/null; then\n\
    \        echo \"$x\"\n    else\n        echo \"-1\"\n    fi", "    local x=\"\
    $1\"\n    local y=\"$2\"\n    local a\n    a=`expr ${x} + ${y}`\n    # a=`expr\
    \ ${x} + ${y}`\n    if [ $a -gt 0 ]; then \n      a=`expr ${a} / 2`\n      a=`expr\
    \ ${a} % 2`\n      echo \"${x}\"\n    else\n      echo \"${y}\"\n    fi", "\t\
    if [ \"$1\" -lt \"$2\" ]; then\n\t\techo \"$1\"\n\telse\n\t\techo \"$2\"\n\tfi",
  "\tif [ $(($1 - 1)) % 2 == 0 ] && [ $(($1 - 1)) > $2 ] && [ $(($1 - 1)) <= $2 ]\n\
    \tthen\n\t\techo $(($1 - 1))\n\telse\n\t\techo \"-1\"\n\tfi", "  local x_=\"$1\"\
    \n  local y_=\"$2\"\n  local z_\n  z_=$(( (x_+y_)/2 ))\n  (( z_ > y_ ? y_=z_ :\
    \ z_ > x_ ? x_=z_ : x_=y_ ))\n  echo $z_", "  local x=\"$1\"\n  local y=\"$2\"\
    \n  local max=0\n  local min=\"$((y - 1))\"\n  (( x > y )) && return -1\n  ((\
    \ x < y )) && return -1\n  (( x == 0 )) && return -1\n  local max1=0\n  local\
    \ min1=\"$((x - 1))\"\n  (( x > 0 )) && return -1\n  (( x < 0 )) && return -1\n\
    \  (( x == 0 )) && return -1\n  local c=0\n  local a=\"$y\"\n  local b=\"$x\"\n\
    \  while (( c < a )) do\n    (( c += b )) && b=\"$((b + 1))\"\n    (( c == a))\
    \ && return $(( c - 1 ))\n  done\n  while (( c < b )) do\n    (( c += a )) &&\
    \ a=\"$((a + 1))\"\n    (( c == b)) && return $(( c - 1 ))\n  done\n  while ((\
    \ c < a )) do\n    (( c += b )) && b=\"$((b + 1))\"\n    (( c == a)) && return\
    \ $(( c - 1 ))\n  done\n  (( c == b )) && return $(( c - 1 ))", "    # Check the\
    \ arguments\n    [ $# -lt 2 ] && echo \"Usage: $(basename $0) X Y\" 1>&2 && exit\
    \ 1\n    [ $1 -gt $2 ] && echo \"X is bigger than Y!\" 1>&2 && exit 1\n    [ $1\
    \ -lt $2 ] && echo \"X is smaller than Y!\" 1>&2 && exit 1\n    \n    # Initialize\
    \ result to 0\n    result=0\n\n    # Set the initial range from $1 to $2\n   \
    \ range=$1 $2\n\n    while true\n    do\n        ((result+=range))\n        range=$((range+1))\n\
    \        [ $range -eq $2 ] && break\n        [ $range -eq $1 ] && result=-1\n\
    \    done\n\n    echo $result", "\t[ -z $1 ] && return -1\n\t[ -z $2 ] && return\
    \ -1\n\t[ \"$1\" -gt \"$2\" ] && return -1\n\t[ \"$1\" -le \"$2\" ] && return\n\
    \t(( x << 1 ))\n\t(( y << ( 1 << ( \"$1\" | cut -c-1 | wc -l ) ) ))\n\twhile :\n\
    \tdo\n\t\t(( x += 2 ))\n\t\t[ \"$x\" -le \"$2\" ] && break\n\tdone\n\t(( y -=\
    \ x ))\n\t[ \"$y\" -le \"$1\" ] && return \"$y\"", "    local x y\n    x=\"$1\"\
    \n    y=\"$2\"\n    case \"$x\" in\n        *)\n            if [ \"$x\" -ge \"\
    $y\" ] || [ \"$y\" -ge \"$x\" ]\n            then\n                return -1\n\
    \            fi\n            ;;\n    esac\n    \n    while [ \"$x\" -ge \"$y\"\
    \ ]\n    do\n        ((x+=2))\n    done\n    echo \"$x\"", "  x=$1\n  y=$2\n \
    \ # if the first number is greater than the second\n  if [ \"$x\" -gt \"$y\" ];\
    \ then\n     return -1\n  fi\n\n  # if the second number is greater than the first\n\
    \  if [ \"$y\" -gt \"$x\" ]; then\n     return -1\n  fi\n\n  # if we still haven't\
    \ returned -1\n  if [ \"$x\" -eq \"$y\" ]; then\n     # then return x if x is\
    \ an even number and y is odd, \n     # or return y if x is odd and y is an even\
    \ number\n     if [[ \"$x\" -eq 0 ]] && [[ \"$y\" -eq 0 ]]; then\n         return\
    \ \"$x\"\n     fi\n     if [[ \"$x\" -eq 0 ]]; then\n         return \"$y\"\n\
    \     fi\n     if [[ \"$y\" -eq 0 ]]; then\n         return \"$x\"\n     fi\n\
    \     return -1\n  fi\n\n  # if we still haven't returned -1\n  if [ \"$x\" -eq\
    \ \"$y\" ]; then\n     # then return x if x is an even number and y is odd, \n\
    \     # or return y if x is odd and y is an even number\n     if [[ \"$x\" -eq\
    \ 0 ]] && [[ \"$y\" -eq 0 ]]; then\n         return \"$x\"\n     fi\n     if [[\
    \ \"$x\" -eq 0 ]]; then\n         return \"$y\"\n     fi\n     if [[ \"$y\" -eq\
    \ 0 ]]; then\n         return \"$x\"\n     fi\n     return -1\n  fi\n  # if we\
    \ still haven't returned -1\n  if [ \"$x\" -gt \"$y\" ]; then\n     # then return\
    \ y if x is an even number and y is odd, \n     # or return x if x is odd and\
    \ y is an even number\n     if [[ \"$x\" -eq 0 ]] && [[ \"$y\" -eq 0 ]]; then\n\
    \         return \"$y\"\n     fi\n     if [[ \"$x\" -eq 0 ]]; then\n         return\
    \ \"$x\"\n     fi\n     if [[ \"$y\" -eq 0 ]]; then\n         return \"$y\"\n\
    \     fi\n     return -1\n  fi\n  # if we still haven't returned -1\n  return\
    \ -1", "  if [ -z $1 ] || [ -z $2 ]; then\n    echo -1\n  fi\n  # $1 is an integer\n\
    \  # $2 is an integer\n  local x=\"$1\"\n  local y=\"$2\"\n  local xn=$(echo $x\
    \ | wc -w)\n  local yn=$(echo $y | wc -w)\n  local max=0\n  local temp\n  local\
    \ j\n  \n  for (( i=0; i<$xn; i++ )); do\n    temp=$x\n    x=$(( $x | $(( $xn\
    \ - i )) ))\n    if [ $x -le 0 ]; then\n      echo -1\n      break\n    fi\n \
    \   \n    for (( j=0; j<$yn; j++ )); do\n      temp=$y\n      y=$(( $y | $(( $yn\
    \ - j )) ))\n      if [ $y -le 0 ]; then\n        break\n      fi\n      \n  \
    \    if  [ \"$temp\" -gt \"$max\" ]; then\n        max=\"$temp\"\n      fi\n \
    \   done\n  done\n  echo \"$max\"", "    [ $1 -ge $2 ] && [ \"$1\" -le $2 ] &&\
    \ [ \"$2\" -ge $1 ] \\\n        || return -1\n    \n    local -i x=$1; local -i\
    \ y=$2\n    \n    local -i max_even=-1\n    local i evens\n    \n    evens=$(seq\
    \ $x $y)\n    for (( i=1; i<${#evens}; i++ )); do\n        if (( evens[i] + evens[i-1]\
    \ == evens[i+1] )) ; then\n            if (( evens[i] + evens[i-1] > max_even\
    \ )); then \n                max_even=evens[i]\n            fi\n        fi\n \
    \   done\n    \n    return $max_even", "  local x=\"$1\" y=\"$2\"\n  [[ -z \"\
    $x\" && -z \"$y\" ]] && return -1\n  local xnum=${x#0}\n  local xdiv=\"${xnum%%$y}\"\
    \n  [[ -z \"$xdiv\" ]] && return -1\n  local ynum=${y#0}\n  local ydiv=\"${ynum%%$x}\"\
    \n  [[ -z \"$ydiv\" ]] && return -1\n  local mod=\"${xdiv%%$ydiv}\"\n  [[ -z \"\
    $mod\" ]] && return -1\n  local div=\"${xdiv/$mod}\"\n  [[ -z \"$div\" ]] && return\
    \ -1\n  local mult=\"${mod/$div}\"\n  [[ -z \"$mult\" ]] && return -1\n  echo\
    \ \"$xnum * $ynum / $mult\"", "    local x_num=$1\n    local y_num=$2\n    local\
    \ max_num=1\n    local flag=1\n    local check=\n    while [ $x_num -le $y_num\
    \ ]; do\n        if [ $flag -eq 1 ]; then\n            check=$((x_num + max_num))\n\
    \            if [ $check -lt $y_num ]; then\n                max_num=$check\n\
    \                flag=0\n            else\n                break\n           \
    \ fi\n        elif [ $flag -eq 0 ]; then\n            check=$((y_num - max_num))\n\
    \            if [ $check -lt $x_num ]; then\n                max_num=$check\n\
    \                flag=1\n            else\n                break\n           \
    \ fi\n        else\n            break\n        fi\n    done\n    if [ $flag -eq\
    \ 0 ]; then\n        max_num=-1\n    fi\n    echo $max_num", "  local x=$1\n \
    \ local y=$2\n  local ans=-1\n  if (( $x -le $y )); then\n    local num1=$x\n\
    \    local num2=$y\n  else\n    local num1=$y\n    local num2=$x\n  fi\n\n  local\
    \ i=0\n  local imax=0\n  while (( i <= $num1 )); do\n    if (( i % 2 )); then\n\
    \      (( i++ ))\n      if (( i > $num2 )); then\n        break\n      fi\n  \
    \  else\n      (( i-- ))\n      if (( i < $num2 )); then\n        break\n    \
    \  fi\n    fi\n  done\n\n  echo $i", "\t# The function will return -1 if the first\
    \ number is smaller than the second\n\t# and 1 otherwise.\n\t(( $1 < $2 )) ||\
    \ return -1\n\t(( $1 > $2 )) && return 1\n\t\n\t# The function will iterate over\
    \ the first number\n\t# and increment the counter for all even numbers after $1.\n\
    \tfor i in $(seq 1 $1)\n\tdo\n\t\tif [ $(($i %% 2)) -eq 0 ]\n\t\tthen\n\t\t\t\
    (( count[$(( i + 1 ))]++ ))\n\t\tfi\n\tdone\n\t\n\t# The function will iterate\
    \ over the second number\n\t# and decrement the counter for all even numbers before\
    \ $2.\n\tfor i in $(seq 1 $2)\n\tdo\n\t\tif [ $(($i %% 2)) -eq 0 ]\n\t\tthen\n\
    \t\t\t(( count[$(( i - 1 ))]-- ))\n\t\tfi\n\tdone\n\t\n\t# The function will iterate\
    \ over every element in \n\t# the counter array and return the first odd number\
    \ found.\n\tfor i in $(seq 1 $(( ${#count[@]}-1 )))\n\tdo\n\t\tif [ $(( count[$((\
    \ i + 1 ))]% 2 )) -eq 0 ]\n\t\tthen\n\t\t\techo \"${i}\"\n\t\t\tbreak\n\t\tfi\n\
    \tdone", "  [ $1 -gt $2 ] || { echo \"$1 must not be greater than $2\"; return\
    \ -1; }\n  [ $2 -gt $1 ] || { echo \"$2 must not be greater than $1\"; return\
    \ -1; }\n  for i in $(seq 1 $2); do\n    if [ $(expr $1 \\% $i) -eq 0 ]; then\n\
    \      echo $i\n      return 0\n    fi\n  done\n  echo \"$1\"\n  return -1", " \
    \       local x=$1\n        local y=$2\n        local num\n        \n        ((x>y))\
    \ || return -1\n        \n        ((x<=0)) && return -1\n        ((y<=0)) && return\
    \ -1\n        ((x>=0)) && ((y>=0)) && return 0\n        ((y>=0)) && ((x>=0)) &&\
    \ return 0\n        ((y>x)||(x>y)) && return -1\n        \n        ((y>=0)) &&\
    \ ((x>=0)) && return 0\n        ((x>=0)) && ((y>=0)) && return 0\n        ((y>x)||(x>y))\
    \ && return -1\n        \n        ((y<=0)) && ((x>=0)) && return 0\n        ((x<=0))\
    \ && ((y<=0)) && return 0\n        ((y>x)||(x>y)) && return -1\n        \n   \
    \     ((y<=0)) && ((x<=0)) && return 0\n        ((x<=0)) && ((y<=0)) && return\
    \ 0\n        ((y<x)||(x<y)) && return -1\n        \n        ((y<=0)) && ((x>=0))\
    \ && return 0\n        ((x<=0)) && ((y<=0)) && return 0\n        ((y<x)||(x<y))\
    \ && return -1\n        \n        ((y<=0)) && ((x<=0)) && return 0\n        ((x<=0))\
    \ && ((y<=0)) && return 0\n        ((y<x)||(x<y)) && return -1\n        \n   \
    \     ((y<x)&&(x<y)) && return -1\n        ((y<x)&&(x>y)) && return -1\n     \
    \   ((y>x)&&(x<y)) && return -1\n        ((y>x)&&(x>y)) && return -1\n       \
    \ \n        ((y<0)&&(x<y)) && return -1\n        ((y<0)&&(x>y)) && return -1\n\
    \        ((y>0)&&(x<y)) && return -1\n        ((y>0)&&(x>y)) && return -1\n  \
    \      \n        ((y<0)&&(x<y)) && return -1\n        ((y<0)&&(x<y)) && return\
    \ -1\n        ((y>0)&&(x<y)) && return -1\n        ((y>0)&&(x>y)) && return -1\n\
    \        \n        ((y<0)&&(x<y)) && return -1\n        ((y<0)&&(x<y)) && return\
    \ -1\n        ((y>0)&&(x<y)) && ", "\t(( $# == 2 )) || die \"usage: $(basename\
    \ $0) x y\"\n\t(( $1 )) || die \"usage: $(basename $0) x y\"\n\t(( $2 )) || die\
    \ \"usage: $(basename $0) x y\"\n\n\t# If x or y are negative, return -1\n\tif\
    \ [[ $1 -ge 0 ]] || [[ $1 -le 0 ]]; then\n\t\techo \"-1\"\n\t\treturn 0\n\tfi\n\
    \tif [[ $2 -ge 0 ]] || [[ $2 -le 0 ]]; then\n\t\techo \"-1\"\n\t\treturn 0\n\t\
    fi\n\n\t# If both x and y are non-negative\n\t(( $1 >= $2 )) || die \"Error: $(basename\
    \ $0) x y should be non-negative\"\n\n\t# If x is smaller than y, return -1\n\t\
    if [[ $1 -gt $2 ]]; then\n\t\techo \"-1\"\n\t\treturn 0\n\tfi\n\n\t# If x is bigger\
    \ than y, return -1\n\tif [[ $1 -lt $2 ]]; then\n\t\techo \"-1\"\n\t\treturn 0\n\
    \tfi\n\n\t# At this point, x and y are non-negative integers \n\t# (x could be\
    \ bigger than y, but in that case we will return -1)\n\n\t# If x > y, return x\
    \ since x is the biggest even number in this range\n\tif [[ $1 -gt $2 ]]; then\n\
    \t\techo $1 \n\t\treturn 0\n\tfi\n\n\t# If x < y, return y since y is the biggest\
    \ even number in this range\n\tif [[ $1 -lt $2 ]]; then\n\t\techo $2\n\t\treturn\
    \ 0\n\tfi\n\n\t# If x = y, then we return -1\n\tif [[ $1 == $2 ]]; then\n\t\t\
    echo \"-1\"\n\t\treturn 0\n\tfi\n\n\t# If x and y are both even numbers\n\t# This\
    \ part is identical to the first part of above if\n\tif (( $1 % 2 == 0 )) && ((\
    \ $2 % 2 == 0 )); then\n\t\t(( $1 == $2 )) || die \"Error: $(basename $0) x y\
    \ should be even numbers\"\n\t\techo \"$1\"\n\t\treturn 0\n\tfi\n\n\t# If x is\
    \ even, but y is odd\n\tif (( $1 % 2 == 0 )); then\n\t\t# x is even, y is odd\n\
    \t\t# In this case we will return x since x is the biggest even number\n\t\tif\
    \ (( $2 == $1 )); then\n\t\t\techo $2\n\t\t\treturn 0\n\t\tfi\n\t\t# y is odd,\
    \ x is even\n\t\t# In this case we will return y since y is the biggest even number\n\
    \t\tif (( $2 == $", "  local x=\"$1\"\n  local y=\"$2\"\n  local z\n  z=$((($x\
    \ + $y) / 2) % $(($(echo \"$x/$y\" | bc) + 1)));\n  if [ \"$z\" -ne 0 ]; then\n\
    \    return $z\n  else\n    return -1\n  fi", "\tlocal x y \n\t(( x = $1 ))\n\t\
    (( y = $2 ))\n\tlocal result\n\tlocal i\n\tlocal temp\n\tresult=$(( x > y )) ||\
    \ $(( y == x )) ? $x : $y\n\t(( x-- ))\n\t(( y-- ))\n\tfor i in `seq 1 $x`; do\n\
    \t\ttemp=$(( result * result ))\n\t\t(( result = temp / i ))\n\t\t[ $(( result\
    \ * x )) -gt $(( result * y )) ] || break\n\tdone\n\t[ $(( result * x )) -eq $((\
    \ result * y )) ] && (( result = -1 ))\n\treturn $result", "    local x=$1\n \
    \   local y=$2\n\n    if [ $x -ge $y ]\n        then\n            local max=$y\n\
    \        else\n            local max=$x\n    fi\n\n    for i in `seq 1 $max`\n\
    \        do\n            if [ $(($i + $max)) -ge $(($x + $y)) ]\n            \
    \    then\n                    local even=$i\n                    local odd=$(($i\
    \ + $max))\n                    break\n            else\n                local\
    \ even=$(($i + $max))\n            fi\n    done\n\n    echo $even", "        local\
    \ x=\"$1\"\n        local y=\"$2\"\n        local even=$((x%2))\n        local\
    \ odd=$((y%2))\n        local even1=$((x//2))\n        local odd1=$((y//2))\n\
    \        local even2=$((x//2))\n        local odd2=$((y//2))\n\n        # check\
    \ if the numbers are equal\n        if [[ \"$even\" == \"$even1\" ]]; then\n \
    \           if [[ \"$even\" == \"$even2\" ]]; then\n                # if they're\
    \ the same, check if it's in the range\n                if [[ \"$even\" -lt \"\
    $even2\" ]]; then\n                    echo \"$even\"\n                elif [[\
    \ \"$even\" -gt \"$even2\" ]]; then\n                    echo \"$even\"\n    \
    \            fi\n            else\n                echo \"$even\"\n          \
    \  fi\n        elif [[ \"$even\" == \"$even2\" ]]; then\n            echo \"$even\"\
    \n        else\n            # otherwise it must be the second number\n       \
    \     if [[ \"$even\" -lt \"$even1\" ]]; then\n                echo \"$even\"\n\
    \            elif [[ \"$even\" -gt \"$even1\" ]]; then\n                echo \"\
    $even\"\n            fi\n        fi\n\n        # check if the numbers are equal\n\
    \        if [[ \"$odd\" == \"$odd1\" ]]; then\n            if [[ \"$odd\" == \"\
    $odd2\" ]]; then\n                # if they're the same, check if it's in the\
    \ range\n                if [[ \"$odd\" -lt \"$odd2\" ]]; then\n             \
    \       echo \"$odd\"\n                elif [[ \"$odd\" -gt \"$odd2\" ]]; then\n\
    \                    echo \"$odd\"\n                fi\n            else\n   \
    \             echo \"$odd\"\n            fi\n        elif [[ \"$odd\" == \"$odd2\"\
    \ ]]; then\n            echo \"$odd\"\n        else\n            # otherwise it\
    \ must be the second number\n            if [[ \"$odd\" -lt \"$odd1\" ]]; then\n\
    \                echo \"$odd\"\n            elif [[ \"$odd\" -gt \"$odd1\" ]];\
    \ then\n                echo \"$odd\"\n            fi\n        fi", "    local\
    \ x y b\n    x=$1\n    y=$2\n    \n    while [[ \"$y\" > \"$x\" ]]; do\n     \
    \   ((b++))\n        x=$(( $x + (($x/$b) * $b)))\n    done\n\n    if [ \"$b\"\
    \ -gt 0 ]; then\n        x=$(($x + ($x/$b) * $b))\n    fi\n    \n    if (( \"\
    $x\" < \"$y\" )) ; then\n        (( x--))\n    fi\n    \n    echo \"$x\"", "\t\
    local x y result\n\tx=\"$1\"\n\ty=\"$2\"\n\tx=\"$((x-1))\"\n\ty=\"$((y-1))\"\n\
    \t(( x > y )) && return -1\n\tx=$((x+1))\n\ty=$((y+1))\n\twhile [ \"$x\" -le \"\
    $y\" ];\n\tdo\n\t\t(( result=$x*$x ))\n\t\t(( result=$result+$x ))\n\t\t(( x++\
    \ ))\n\tdone\n\techo \"$result\"", "    local num=$1\n    local num2=$2\n\n  \
    \  local even\n    local max\n    local i\n\n    max=$((num + num2 - 1))\n   \
    \ even=0\n    i=1\n\n    while [ $i -le $max ]; do\n        (( even++ ))\n   \
    \     if [ $even -eq $((num % 2)) ]; then\n            (( max-- ))\n        else\n\
    \            (( num-- ))\n        fi\n        (( i++ ))\n    done\n\n    if [\
    \ $num2 -gt $(( num % 2 )) ]; then\n        echo $num\n    else\n        echo\
    \ $max\n    fi", "\tif [[ $1 -gt $2 ]]; then\n\t\techo -1\n\telse\n\t\tx=$1\n\t\
    \ty=$2\n\t\twhile [[ $x -le $y ]]; do\n\t\t\t(( x = x + 1 ))\n\t\t\t(( y = y +\
    \ 1 ))\n\t\t\tif [[ $x -le $y ]]; then\n\t\t\t\t(( y = y + 1 ))\n\t\t\tfi\n\t\t\
    \tif [[ $x -gt $y ]]; then\n\t\t\t\techo \"$x\"\n\t\t\t\tbreak\n\t\t\tfi\n\t\t\
    done\n\tfi", "    local x y\n    x=${1%??}\n    y=${2%??}\n    if [ $x -le $y\
    \ ]; then\n        echo $x\n    else\n        echo $y\n    fi", "\t(( $2 <= $1\
    \ )) && return -1\n\t(( $(expr $1 % $2) < $(expr $2 % $1) )) && return $2\n\t\
    (( $(expr $1 % $2) == $(expr $2 % $1) )) && return $2\n\treturn $1", "    local\
    \ x=\"$1\"\n    local y=\"$2\"\n    if [ $x -le $y ]\n    then\n        local\
    \ i\n        for i in $(seq $x); do\n            echo $(( $i % 2 == 0 ? $i : $(i+4)))\n\
    \        done\n    else\n        echo -1\n    fi", "    (( $# == 2 )) && return\
    \ -1\n    local x=\"$1\"\n    local y=\"$2\"\n    local ans=0\n    while (( x\
    \ < y )); do\n        (( ans++ ))\n        (( x-- ))\n    done\n    echo $ans",
  "    if [ $1 -le $2 ] ; then\n        echo $1\n    else\n        echo $2\n    fi",
  "  x=\"$1\"\n  y=\"$2\"\n  while true; do\n    if [ \"$x\" -gt \"$y\" ]; then\n\
    \      x=\"$(($x + 1))\"\n    elif [ \"$x\" -lt \"$y\" ]; then\n      y=\"$(($y\
    \ - 1))\"\n    else\n      echo \"$x\"\n      break\n    fi\n  done", "    local\
    \ x y\n    read x y < <(printf \"%s %s\\n\" \"$1\" \"$2\")\n    local ret\n  \
    \  if [ -n \"$y\" ]; then\n        local tmp=$(echo \"$y/2\" | bc)\n        if\
    \ [ $tmp -eq 1 ]; then\n            echo \"$x\"\n        else\n            echo\
    \ \"-1\"\n        fi\n    else\n        echo \"-1\"\n    fi", "  local num_min=$1\n\
    \  local num_max=$2\n  local choose_num\n  local num_even\n  num_even=$(expr $num_max\
    \ - $num_min + 1)\n  for i in $(seq 1 $num_even); do\n    choose_num=$(( $num_min\
    \ + $i ))\n    if [ $(($num_min + $i)) -eq $num_max ]; then\n      break\n   \
    \ fi\n  done\n  if [ -z \"$choose_num\" ]; then\n    choose_num=-1\n  fi\n  echo\
    \ $choose_num", "    local x=\"$1\" y=\"$2\"\n    local even=0 odd=1\n    while\
    \ [ \"$x\" -le \"$y\" ]; do\n        if [ \"$x\" -le \"$y\" ]; then\n        \
    \    if [ $(( $x % 2 )) -eq 0 ]; then\n                if [ $x -eq $even ]; then\n\
    \                    even=$(( $even + 1 ))\n                elif [ $x -eq $odd\
    \ ]; then\n                    odd=$(( $odd + 1 ))\n                else\n   \
    \                 if [ $even -gt $odd ]; then\n                        even=$((\
    \ $even + 1 ))\n                    else\n                        odd=$(( $odd\
    \ + 1 ))\n                    fi\n                fi\n            fi\n       \
    \ fi\n        (( x=$x + 1 ))\n    done\n    if [ \"$x\" -le \"$y\" ]; then\n \
    \       if [ $(( $x % 2 )) -eq 0 ]; then\n            if [ $x -eq $even ]; then\n\
    \                even=$(( $even + 1 ))\n            elif [ $x -eq $odd ]; then\n\
    \                odd=$(( $odd + 1 ))\n            else\n                if [ $even\
    \ -gt $odd ]; then\n                    even=$(( $even + 1 ))\n              \
    \  else\n                    odd=$(( $odd + 1 ))\n                fi\n       \
    \     fi\n        fi\n    fi\n    if [ \"$even\" -gt 0 ]; then\n        return\
    \ $even\n    else\n        return $odd\n    fi", "    [[ \"$1\"=~^-?[0-9]+$ ]]\
    \ && \\\n    [[ \"$2\"=~^-?[0-9]+$ ]] && \\\n    echo \"$(( $(echo \"$2 > $1\"\
    \ | bc) ))\" || \\\n    echo \"-1\"", "    (( $# == 2 )) && { echo \"Usage: $0\
    \ x_end y_start\" >&2; exit -1; }\n    local x\n    (( $# > 1 )) && { echo \"\
    Usage: $0 x_end y_start\" >&2; exit -1; }\n    local x=\"$1\" y=\"$2\"\n    #\
    \ x<=y ? echo $(( x - y )) : echo $(( y - x ))\n    echo $(( ( ( ( $(expr \"$x\"\
    \ +- \"$y\" ) / 2 ) - 1 ) % ( $(expr \"$y\" +- \"$x\" ) / 2 ) )) || return -1",
  "\tX=$1\n\tY=$2\n\twhile ((X < Y)); do\n\t\tX=$(($X + $X))\n\tdone\n\tif ((X > Y))\
    \ ; then\n\t\tY=$(($Y - $X))\n\tfi\n\techo $X", "\tlocal x y num\n\tif [ \"$1\"\
    \ = \"--help\" ]; then\n\t\techo \"$(cat <<EOF\nChooses a number from the range\
    \ specified by the arguments\n\nUSAGE:\n  $0 xmin xmax\n\nxmin - minimum of the\
    \ range\nxmax - maximum of the range\nEOF\n)\"\n\t\treturn\n\tfi\n\tx=\"$1\"\n\
    \ty=\"$2\"\n\txmin=$(( x - 1 ))\n\txmax=$(( x + 1 ))\n\tnum=0\n\tfor i in $(seq\
    \ 1 $(( $x - 1 ))); do\n\t\t(( num += $(( $x * $i )) ))\n\tdone\n\tfor i in $(seq\
    \ 1 $(( $y - 1 ))); do\n\t\t(( num += $(( $y * $i )) ))\n\tdone\n\t(( num += $x\
    \ ))\n\tif (( num > $xmax )); then\n\t\tnum=-1\n\telse\n\t\t(( num -= $x ))\n\t\
    fi\n\t(( num -= $y ))\n\tif (( num == 0 )); then\n\t\tnum=-1\n\telse\n\t\t(( num\
    \ -= 1 ))\n\tfi\n\techo $(( num + 1 ))", "    x=${1};\n    y=${2};\n    for ((i=x;i<=y;i++));\n\
    \    do\n        if [ $((i/2)) -eq $i ];\n        then\n            echo $i;\n\
    \            break;\n        fi;\n    done;\n    if [ $((i/2)) -eq $i ];\n   \
    \ then\n        echo \"-1\";\n    else\n        echo \"-1\";\n    fi;", "\tlocal\
    \ a=$1\n\tlocal b=$2\n\tlocal x=0\n\tlocal y=0\n\tlocal even=0\n\tlocal odd=0\n\
    \n\tx=$(($a % $b))\n\ty=$(($a / $b))\n\n\tif [ $(( $x + 1 )) -eq $x ]; then\n\t\
    \teven=$(($x + 1))\n\telse\n\t\todd=$(($x + 1))\n\tfi\n\n\tif [ $(( $y + 1 ))\
    \ -eq $y ]; then\n\t\teven=$(($y + 1))\n\telse\n\t\todd=$(($y + 1))\n\tfi\n\n\t\
    if [ $(( $even )) -eq $even ]; then\n\t\techo \"-1\"\n\telse\n\t\techo $(($even))\n\
    \tfi", "\tx=$1\n\ty=$2\n\tz=$(($x+$y))\n\tif [ $(($z%2)) -eq 0 ] ; then \n\t\t\
    if [ $(($z%4)) -eq 0 ] ; then \n\t\t\techo $1\n\t\telse \n\t\t\techo $(($z+2))\n\
    \t\tfi\n\telse \n\t\techo $(($z-2))\n\tfi", "\tlet x=$1\n\tlet y=$2\n\tlet result=0\n\
    \tlet i\n\tfor i in $(seq 1 $y)\n\tdo\n\t\tlet result=$((x*$i))\n\t\tif test $((result%2))\
    \ -eq 0\n\t\tthen\n\t\t\tbreak\n\t\tfi\n\tdone\n\techo $result", "    if [ `expr\
    \ \"$1\" \"$2\" : '^[0-9]+$'` -eq 0 ] ; then\n        return -1\n    fi\n    for\
    \ (( i = 3; i <= $2; i++ )) ; do\n        if [ $(($i % 2)) -eq 0 ] ; then\n  \
    \          return $i\n        fi\n    done\n    return -1", "  x=$1\n  y=$2\n\
    \  while [ $x -lt $y ]; do\n    [ $x -eq $y ] && return -1\n    [ $x -le $y ]\
    \ && let \"x = x + 1\"\n  done\n  while [ $y -lt $x ]; do\n    [ $y -eq $x ] &&\
    \ return -1\n    [ $y -le $x ] && let \"y = y + 1\"\n  done\n  echo $x", "   \
    \ if (( $1 >= $2 )); then\n        echo \"-1\"\n    else\n        echo \"$(( $1\
    \ * 2 + $2 ))\"\n    fi", "   local x=\"$1\"\n   local y=\"$2\"\n   local num\n\
    \   local i\n   local j\n   \n   for i in $(seq 1 $y);\n   do\n      ((num=$x))\n\
    \      for j in $(seq 1 $i)\n      do\n         if (($num % 2)); then\n      \
    \      ((num+=1)) \n         else\n            break\n         fi\n      done\n\
    \      if (( $num == $x )); then\n         return $num\n      fi\n   done\n  \
    \ if (( $num != $x )); then\n      return -1\n   fi", "    if [ $1 -ge $2 ]\n\
    \    then\n        echo \"$2\"\n    else\n        echo \"-1\"\n    fi", "    local\
    \ a=\"$1\"\n    local b=\"$2\"\n    local c\n    if [ $a -gt $b ]; then\n    \
    \    c=$a\n        a=$b\n        b=$c\n    fi\n    if [ $a -eq 0 ] || [ $b -eq\
    \ 0 ]; then\n        echo \"$c\"\n        return 0\n    fi\n    local n\n    local\
    \ i\n    local max\n    for i in $(seq $a $b); do\n        n=$(echo $((2*$i -\
    \ 1)) | bc)\n        if [ $n -le $((i%2)) ]; then\n            max=$(echo $n |\
    \ bc)\n        else\n            max=-1\n            break\n        fi\n    done\n\
    \    echo \"$max\"", "\tlocal x=\"$1\"\n\tlocal y=\"$2\"\n\tlocal ans=0\n\tlocal\
    \ i\n\tfor i in $(seq 1 \"$x\"); do\n\t\tif [ $(( \"$i\" )) = \"$x\" ]; then\n\
    \t\t\tbreak\n\t\tfi\n\t\tif [ $(( \"$i\" )) = \"$y\" ]; then\n\t\t\tbreak\n\t\t\
    fi\n\t\t(( ans++ ))\n\t\tif [ $(( \"$ans\" )) = \"$2\" ]; then\n\t\t\tbreak\n\t\
    \tfi\n\tdone\n\tif [ $ans = \"0\" ]; then\n\t\techo -1\n\telse\n\t\techo \"$ans\"\
    \n\tfi", "    local x=$1\n    local y=$2\n    local z=$((x+y))\n    while [ $((z))\
    \ -le $((x)) ] ; do\n        ((z+=y))\n        if [[ $((z)) -eq $((x) ]] ; then\n\
    \            echo \"$z\"\n            return $z\n        fi\n    done\n    echo\
    \ \"-1\"\n    return -1", "    local x y\n    [[ $1 =~ ^[0-9]+$ ]] || return -1\n\
    \    [[ $2 =~ ^[0-9]+$ ]] || return -1\n    y=$1\n    x=$2\n    local evens\n\
    \    evens=$( find \"$x\" -maxdepth 1 -type f -name \"*.txt\" | sed -e \"s/\\\
    ///g\" | sort | uniq 2>/dev/null )\n    for x in $evens\n    do\n        if [\
    \ $(($x-$y)%2) == 0 ]\n        then\n            echo $x\n            break\n\
    \        fi\n    done", "  local x y num\n  x=$1\n  y=$2\n  num=$(echo $((x-y))|bc)\n\
    \  if [ $? -eq 0 ]; then\n    echo $num\n  else\n    echo -1\n  fi", "    local\
    \ -r x=\"${1}\"\n    local -r y=\"${2}\"\n    local -r even\n    local -r odd\n\
    \n    even=\"$(expr \"$x\" + \"$y\" |cut -c4- )\"\n    odd=\"$(expr \"$x\" - \"\
    $y\" |cut -c4- )\"\n\n    if [[ $even -gt 0 ]]; then\n        echo \"${even}\"\
    \n    elif [[ $odd -gt 0 ]]; then\n        echo \"${odd}\"\n    else\n       \
    \ echo -1\n    fi", "  if [[ $1 -gt $2 ]] ; then\n    echo $1\n  else\n    echo\
    \ $2\n  fi", "    local x=$1\n    local y=$2\n    local res\n\n    if (( $x -lt\
    \ $y )); then\n        res $(expr $x \\* 2)\n    fi\n    if (( $y -lt $x )); then\n\
    \        res $(expr $y \\* 2)\n    fi\n    if (( $x -gt $y )); then\n        if\
    \ (( $x -eq $y )); then\n            res $x\n        fi\n        res $(expr $x\
    \ \\* 3)\n    fi\n    if (( $y -gt $x )); then\n        if (( $y -eq $x )); then\n\
    \            res $y\n        fi\n        res $(expr $y \\* 3)\n    fi\n    return\
    \ $res", "    local a b\n    local RESULT\n    a=$1\n    b=$2\n    RESULT=$((a\
    \ <= b ? a : b))\n    if [ $RESULT == a ]; then\n        RESULT=$((a + 1))\n \
    \   fi\n    if [ $RESULT == b ]; then\n        RESULT=$((b - 1))\n    fi\n   \
    \ echo \"$RESULT\"", "    local x=\"$1\" y=\"$2\"\n    local result\n    local\
    \ max\n    local min\n    local num\n\n    # Check the range\n    if [ $x -le\
    \ $y ]\n    then\n        max=$x\n    else\n        max=$y\n    fi\n\n    while\
    \ [ $min -le $max ]\n    do\n        num=$(echo \"$min*$min\" | bc)\n        ((\
    \ min = $num % 2 ))\n    done\n    \n    # Check if result already computed\n\
    \    if [ -n \"$result\" ]\n    then\n        return $result\n    fi\n\n    #\
    \ Return the biggest even number in the range\n    num=$(echo \"$min*$min\" |\
    \ bc)\n    if [ \"$num\" -gt 1 ]\n    then\n        echo \"$num\"\n    else\n\
    \        echo \"$num\"\n    fi", "\tlocal -r x=\"${1}\"\n\tlocal -r y=\"${2}\"\
    \n\tlocal -r max_val=\"${x}\"\n\tlocal -r min_val=\"${y}\"\n\tlocal -r i\n\tlocal\
    \ -r j\n\tlocal -r ret\n\t\n\techo \"${max_val}\"\n\t\n\twhile [[ \"${min_val}\"\
    \ -lt \"${max_val}\" ]] ; do\n\t\t\n\t\t(( min_val+=2 ))\n\t\t\n\t\tif [[ \"${min_val}\"\
    \ -ge \"${max_val}\" ]] ; then\n\t\t\t(( max_val+=2 ))\n\t\tfi\n\t\t\n\tdone\n\
    \t\n\tif [[ ${min_val} -ge ${max_val} ]] ; then\n\t\t\n\t\t(( max_val+=2 ))\n\t\
    \n\tfi\n\t\n\techo \"${max_val}\"\n\t\n\tfor i in $(seq 1 ${max_val}); do\n\t\t\
    \n\t\t(( max_val+=2 ))\n\t\t\n\t\tif [[ \"${min_val}\" -ge \"${max_val}\" ]] ;\
    \ then\n\t\t\t(( max_val+=2 ))\n\t\tfi\n\t\t\n\tdone\n\t\n\techo \"${max_val}\"\
    \n\t\n\tfor i in $(seq 1 ${max_val}); do\n\t\t\n\t\t(( min_val+=2 ))\n\t\t\n\t\
    \tif [[ \"${min_val}\" -ge \"${max_val}\" ]] ; then\n\t\t\t(( max_val+=2 ))\n\t\
    \tfi\n\t\t\n\tdone\n\t\n\techo \"${max_val}\"\n\t\n\tfor i in $(seq 1 ${max_val});\
    \ do\n\t\t\n\t\tif [[ ${x} -le ${max_val} ]] ; then\n\t\t\t\n\t\t\t(( max_val+=2\
    \ ))\n\t\tfi\n\t\t\n\tdone\n\t\n\techo \"${max_val}\"\n\t\n\tfor i in $(seq 1\
    \ ${max_val}); do\n\t\t\n\t\tif [[ ${y} -le ${max_val} ]] ; then\n\t\t\t\n\t\t\
    \t(( max_val+=2 ))\n\t\tfi\n\t\t\n\tdone\n\t\n\techo \"${max_val}\"\n\t\n\tif\
    \ [[ ${min_val} -ge ${max_val} ]] ; then\n\t\t\n\t\t(( max_val+=2 ))\n\t\n\tfi\n\
    \t\n\techo \"${max_val}\"\n\t\n\tfor i in $(seq 1 ${max_val}); do\n\t\t\n\t\t\
    (( min_val+=2 ))\n\t\t\n\t\tif [[ \"${min_val}\" -ge \"${max_val}\" ]] ; then\n",
  "    x=$1\n    y=$2\n    local res=-1\n    if ((x<y)); then\n        x=$y\n    \
    \    y=$x\n    fi\n    if ((x<0)); then\n        x=$((0-x))\n    fi\n    local\
    \ evens=$((x-(y%2)))\n    if ((evens)); then\n        res=$((evens+(y/2)))\n \
    \       if ((res>y)); then\n            res=$((y-1))\n        fi\n    fi\n   \
    \ if ((res == -1)); then\n        res=0\n    fi\n    echo \"$res\"", "  local\
    \ -r x=\"$1\"\n  local -r y=\"$2\"\n  local -r num=\"${x}+${y}\"\n\n  if [ \"\
    ${x}\" -ge \"${y}\" ]; then\n    local -r num=\"${y}+${x}\"\n  fi\n\n  echo \"\
    ${num}\" | grep -Eq '^0+$' || echo \"-1\"", "\tif [ $1 -ge $2 ]; then\n\t\ti1=$1\n\
    \t\ti2=$2\n\telse\n\t\ti1=$2\n\t\ti2=$1\n\tfi\n\n\ti=$i1\n\tj=$i2\n\twhile [ $i\
    \ -le $j ]; do\n\t\t(( i % 2 != 0 )); \n\t\tlet i+=1\n\tdone\n\techo $i", "  \
    \  local x=\"$1\" y=\"$2\"\n    local max=$(( x > y ? x : y ))\n    local cur=$((\
    \ max == x ? y : max ))\n\n    while [[ $cur -le $x ]]; do\n        local cur=$((\
    \ cur + 1 ))\n        local res=$(( cur % 2 ))\n        if [[ $res -eq 0 ]]; then\n\
    \            max=$(expr $max)\n        fi\n    done\n\n    if [[ $max -eq $x ]];\
    \ then\n        echo \"-1\"\n    elif [[ $max -eq $y ]]; then\n        echo \"\
    $x\"\n    else\n        echo $max\n    fi", "    local x y\n    x=$1; y=$2\n \
    \   while (( x <= y )); do\n        ((x++))\n        if [ $x -eq $y ]; then break;\
    \ fi\n    done\n    if [ $x -eq $y ]; then \n        x=$(( $x - 1 ))\n    else\
    \ \n        x=$(( $y - 1 ))\n    fi\n    echo \"$x\"", "    x=`expr $1 \\* 2`\n\
    \    y=`expr $2 \\* 2`\n    while  [[ $x -le $y && $x -gt 0 ]]\n    do\n     \
    \   if [[ `expr $x \\* 2` -eq `expr $y \\* 2` ]]; then\n            echo $x\n\
    \            break\n        fi\n        x=`expr $x \\* 2`\n        y=`expr $y\
    \ \\* 2`\n    done\n    if [ $x -eq $y ]; then\n        echo $-1\n    else\n \
    \       echo $-1\n    fi", "\tlocal a b\n\ta=\"$1\"\n\tb=\"$2\"\n\tif [ $a -gt\
    \ $b ]; then\n\t\techo \"$b\"\n\telse\n\t\techo \"$a\"\n\tfi", "  local x=\"$1\"\
    \ y=\"$2\"\n  local -i even\n  \n  (( x > y )) && return -1\n  (( y > x )) &&\
    \ return -1\n  \n  (( x > 0 && y > 0 )) || return -1\n\n  for ((even = 1; even\
    \ <= $(( y - x + 1 )); even++)); do\n    local j=\"$(( x + even))\"\n    if ((\
    \ $( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $", "    local x y z\n    x=$1\n    y=$2\n\n    if [ $x -lt\
    \ $y ]\n    then\n        if [ $x -lt 0 ]\n        then\n            echo \"-1\"\
    \n            exit\n        fi\n        local x=$((x - 1))\n    else\n       \
    \ if [ $y -lt 0 ]\n        then\n            echo \"-1\"\n            exit\n \
    \       fi\n        local y=$((y - 1))\n    fi\n\n    local max_int=$((x + y))\n\
    \    local count=0\n\n    while [ $max_int -gt 0 ]\n    do\n        if [ $((max_int\
    \ % 2)) -gt 0 ]\n        then\n            max_int=$((max_int / 2))\n        \
    \    count=$(($count + 1))\n        else\n            max_int=$((max_int * 2))\n\
    \            count=$(($count + 1))\n        fi\n    done\n    echo $((max_int\
    \ - 1))", "  local x y\n  x=$1\n  y=$2\n  if [ $x -le $y ]; then\n    while true;\
    \ do\n      local num\n      num=`expr $x + 0` && break\n      x=$(( $x - 1 ))\n\
    \    done\n  else\n    while true; do\n      local num\n      num=`expr $y + 0`\
    \ && break\n      y=$(( $y - 1 ))\n    done\n  fi\n  echo $num", "    # Check\
    \ for valid input\n    if (( $1 < $2 )); then\n        echo \"Invalid input: first\
    \ number should be bigger than second number\"\n        return 1\n    fi\n\n \
    \   # Find the highest even integer that is in range [a, b]\n    # [a, b] includes\
    \ the second number in range\n    for (( a = $1; a < $2; a = $(( a * 2 ))+1 ));\
    \ do\n        (( c < a )) && break\n    done\n\n    # Return -1 if there's no\
    \ such number\n    if [ $c -eq 0 ]; then\n        echo \"No such number\"\n  \
    \      return -1\n    fi\n\n    echo \"$c\"", "    local x y\n    x=$1\n    y=$2\n\
    \    [ $x -ge $y ] && [ $x -le $y ] && [ $y -ge $x ] && [ $y -le $x ] && echo\
    \ $((x*y)) || return -1", "    if [[ \"$1\" -ge \"$2\" ]]; then\n        big_num=`expr\
    \ $1 + $2`\n        while [[ \"$big_num\" -ge \"$1\" ]] && [[ \"$big_num\" -le\
    \ \"$2\" ]];\n        do \n            big_num=`expr $big_num + 2`\n        done\n\
    \        \n        if [[ ${big_num} == ${1} ]] ; then\n            echo \"$big_num\"\
    \n        else \n            echo \"-1\"\n        fi\n    else\n        echo \"\
    -1\"\n    fi", "\tlocal x=\"$1\"\n\tlocal y=\"$2\"\n\tlocal n=$(( (y-x) / 2 ))\n\
    \tlocal result\n\t\n\twhile (( n < y )); do\n\t\tresult=$(( x + n ))\n\t\tif [[\
    \ $(( result % 2 )) -eq 0 ]]; then\n\t\t\techo $(( result ))\n\t\telse\n\t\t\t\
    break\n\t\tfi\n\t\tn=$(( n + 1 ))\n\tdone\n\t\n\tif (( $(( result < x )) )); then\n\
    \t\techo \"-1\"\n\telse\n\t\techo $(( result ))\n\tfi", "  local x y\n  x=$1\n\
    \  y=$2\n  while [ $x -le $y ]; do\n    if (( $x % 2 )); then\n      x=$(($x /\
    \ 2))\n    else\n      y=$(($y / 2))\n    fi\n  done\n  echo $(($x % 2 > $y))\
    \ -1", "  local x=\"${1}\"\n  local y=\"${2}\"\n\n  (( x > y )) && return -1 ||\
    \ (( x < y )) && return -1\n\n  (( x < y )) && return -1\n  (( x > y )) && return\
    \ -1\n\n  (( x == y )) && return 0\n  (( x == y )) && return 0\n  (( x == y ))\
    \ && return 0\n  (( x == y )) && return 0\n  (( x == y )) && return 0\n  (( x\
    \ == y )) && return 0\n  (( x == y )) && return 0\n\n  (( x == y )) && return\
    \ 0\n  (( x == y )) && return 0\n  (( x == y )) && return 0\n  (( x == y )) &&\
    \ return 0\n  (( x == y )) && return 0\n  (( x == y )) && return 0\n  (( x ==\
    \ y )) && return 0\n\n  (( x == y )) && return 0\n  (( x == y )) && return 0\n\
    \  (( x == y )) && return 0\n  (( x == y )) && return 0\n  (( x == y )) && return\
    \ 0\n  (( x == y )) && return 0\n  (( x == y )) && return 0\n\n  (( x == y ))\
    \ && return 0\n  (( x == y )) && return 0\n  (( x == y )) && return 0\n  (( x\
    \ == y )) && return 0\n  (( x == y )) && return 0\n  (( x == y )) && return 0\n\
    \  (( x == y )) && return 0\n\n  (( x == y )) && return 0\n  (( x == y )) && return\
    \ 0\n  (( x == y )) && return 0\n  (( x == y )) && return 0\n  (( x == y )) &&\
    \ return 0\n  (( x == y )) && return 0\n  (( x == y )) && return 0\n  (( x ==\
    \ y )) && return 0\n  (( x == y )) && return 0\n\n  (( x == y )) && return 0\n\
    \  (( x == y )) && return 0\n  (( x == y )) && return 0\n  (( x == y )) && return\
    \ 0\n  (( x == y )) && return 0\n  (( x == y )) && return 0\n  (( x == y )) &&\
    \ return 0\n  (( x == y )) && return 0\n  (( x == y )) && return 0\n", "    local\
    \ x y\n    read x y <<< \"${1:?Usage: $0 number1 number2}\"\n    if [[ ${x} -gt\
    \ ${y} ]]; then\n        echo \"${y}\"\n    elif [[ ${y} -gt ${x} ]]; then\n \
    \       echo \"${x}\"\n    else\n        echo \"-1\"\n    fi", "\tlocal x y\n\n\
    \tx=\"$1\"\n\ty=\"$2\"\n\tlet \"diff=$x-$y\"\n\tlet \"max=0\"\n\tlet \"num=0\"\
    \n\n\twhile [ $x -le $y ]; do\n\t\tif [ $x -eq $max ]; then\n\t\t\tlet \"max=$num\"\
    \n\t\t\tlet \"num=0\"\n\t\telse\n\t\t\tlet \"num=$num+1\"\n\t\tfi\n\n\t\tlet \"\
    diff=$x-$y\"\n\tdone\n\n\tif [ $num -eq 0 ]; then\n\t\tlet \"max=$num\"\n\tfi\n\
    \n\techo \"$max\"", "  local x_int=$1\n  local y_int=$2\n  if (( $x_int > $y_int\
    \ )); then\n    local x_str=$x_int\n    local y_str=$y_int\n    local x_mod=$(($x_int-$y_int))\n\
    \    local y_mod=$(($y_int-$x_int))\n    local x_even=0\n    local y_even=0\n\
    \    while [[ $((x_int-y_int)) == 0 ]]; do\n      ((x_int-=$y_int))\n      ((y_int-=$x_int))\n\
    \      ((x_even+=1))\n      ((y_even+=1))\n    done\n    local x_odd=$(($x_int%$y_int))\n\
    \    local y_odd=$(($y_int%$x_int))\n    if (( x_even == 0 )); then\n      echo\
    \ $(printf \"-%d\" $y_int)\n    elif (( y_even == 0 )); then\n      echo $(printf\
    \ \"-%d\" $x_int)\n    elif (( $(( x_int-y_int )) > 0 )); then\n      if (( $x_odd\
    \ > 0 )); then\n        echo $(printf \"-%d\" $x_int)\n      else\n        echo\
    \ $(printf \"-%d\" $y_int)\n      fi\n    elif (( $x_odd > 0 )); then\n      echo\
    \ $(printf \"-%d\" $y_int)\n    elif (( $y_odd > 0 )); then\n      echo $(printf\
    \ \"-%d\" $x_int)\n    else\n      echo $(printf \"%d\" $(($x_int+y_int)))\n \
    \   fi\n  else\n    local x_str=$y_int\n    local y_str=$x_int\n    local x_mod=$(($x_int-$y_int))\n\
    \    local y_mod=$(($y_int-$x_int))\n    local x_even=0\n    local y_even=0\n\
    \    while [[ $((y_int-x_int)) == 0 ]]; do\n      ((y_int-=$x_int))\n      ((x_int-=$y_int))\n\
    \      ((x_even+=1))\n      ((y_even+=1))\n    done\n    local x_odd=$(($x_int%$y_int))\n\
    \    local y_odd=$(($y_int%$x_int))\n    if (( x_even == 0 )); then\n      echo\
    \ $(printf \"-%d\" $x_int)\n    elif (( y_even == 0 )); then\n      echo $(printf\
    \ \"-%d\" $y_int)\n    elif (( $((", "    local x_str=\"$1\"\n    local y_str=\"\
    $2\"\n    local x\n    local y\n\n    # Convert arguments to numbers\n    x=$(expr\
    \ \"x$x_str\" : 'x'$x_str'=')\n    y=$(expr \"y$y_str\" : 'y'$y_str'=')\n\n  \
    \  # Find the biggest even number between x and y\n    while true; do\n      \
    \  (( x > y )) && break || return -1\n        if [ $(expr \"$x\" + \"$y\" : '^(0|1|2)$')\
    \ -eq \"0\" ]; then\n            break\n        fi\n        x=$(($x + 2))\n  \
    \      y=$(($y - 2))\n    done\n    echo \"$y\"", "    local x y\n    x=$1\n \
    \   y=$2\n    [ $x -gt $y ] || return -1\n    while [ $x -le $y ]\n    do\n  \
    \      (( x = x + 2 ))\n        [ $x -gt $y ] || return -1\n    done\n    return\
    \ $x", "    local x=\"$1\"\n    local y=\"$2\"\n    \n    test $x -gt 0 && test\
    \ $y -gt 0 && test $x -le $y || return -1\n    while true; do\n        local r=$(($x\
    \ / 2))\n        test $r -le $y && return $r\n        test $x -eq $y && return\
    \ -1\n        test $x -gt $y && local r=$(($x / 2)) && return $r\n        x=$(($x\
    \ / 2))\n    done", "    local x=\"$1\"\n    local y=\"$2\"\n    local max\n \
    \   local min\n\n    if [[ \"$x\" -le \"$y\" ]]; then\n        min=\"$x\"\n  \
    \      max=\"$y\"\n    else\n        min=\"$y\"\n        max=\"$x\"\n    fi\n\n\
    \    if [[ -e \"$min\" ]]; then\n        if [[ -e \"$max\" ]]; then\n        \
    \    local minnum=\"$(< \"$min\")\"\n            local maxnum=\"$(< \"$max\")\"\
    \n            if [[ $minnum -ne $maxnum ]]; then\n                max=\"$min\"\
    \n            fi\n        fi\n    fi\n\n    [[ \"$max\" != \"\" ]] || return -1\n\
    \n    local ret=\"${max#*:}\"\n    echo \"$ret\"", "  local x=\"$1\"\n  local\
    \ y=\"$2\"\n  local number\n  local max\n  local i\n  number=$(( (x-y)*(x-y)))\n\
    \  if [ x=\"$number\" -gt \"$number\" ]; then\n    max=$number\n  else\n    max=$((\
    \ (x+1)*(y)))\n  fi\n  i=3\n  while [ x=\"$number\" -gt \"$max\" ]; do\n    number=$((\
    \ x-y))\n    if [ x=\"$number\" -gt \"$max\" ]; then\n      max=$number\n    fi\n\
    \    i=$((i+1))\n  done\n  echo $max", "    local x=\"$1\"\n    local y=\"$2\"\
    \n    if [[ \"$x\" -gt \"$y\" || \"$y\" -gt \"$x\" ]]; then\n        echo \"-1\"\
    \n    else\n        if [[ \"$x\" -eq \"$y\" ]]; then\n            echo \"$x\"\n\
    \        else\n            local i=1\n            while [[ \"$i\" -le \"$y\" ]];\
    \ do\n                if [[ \"$((x%i%2))\" == \"0\" ]]; then\n               \
    \     echo \"$i\"\n                    break\n                fi\n           \
    \     let \"i+=1\"\n            done\n        fi\n    fi", "  local x y\n  x=$1\n\
    \  y=$2\n\n  if [[ $((x-y)) == 0 ]]; then\n    echo \"-1\"\n  else\n    if [[\
    \ $((x-y)) -eq 0 ]]; then\n      echo \"$y\"\n    else\n      echo \"$((x+y))\"\
    \n    fi\n  fi", "\tif [ \"$1\" -gt \"$2\" ]; then\n\t\techo \"$1\"\n\telif [\
    \ \"$2\" -gt \"$1\" ]; then\n\t\techo \"$2\"\n\telse\n\t\techo $(( $2 % $1 + $2\
    \ ))\n\tfi", "\tlocal x y\n\t[[ $# -lt 2 ]] && return -1 # return -1 if there's\
    \ no args\n\tx=\"$1\"\n\ty=\"$2\"\n\tif [[ $x -ge $y ]] && [[ $x -le $y ]]; then\n\
    \t\techo \"$((x-y))\"\n\telse\n\t\treturn -1\n\tfi", "    local x=$1\n    local\
    \ y=$2\n\n    if [ $x -lt $y ]; then\n        return -1\n    fi\n\n    local z=$((\
    \ y + 1 ))\n    while [ $z -le $x ]; do\n        if [ $z -eq $y ]; then\n    \
    \        echo $z\n            break\n        fi\n\n        if [ $(($z & 1)) ==\
    \ 0 ]; then\n            echo $z\n            break\n        fi\n\n        let\
    \ z=$(( $z + 1 ))\n    done", "    if [ \"$1\" = \"$2\" ]\n    then\n        echo\
    \ \"$1\"\n    else\n        (( x > y )) && echo \"-1\" || echo \"$(( $1 + 1 ))\"\
    \n    fi", "    if [ $1 -lt $2 ]; then \n        echo \"$1 must be greater than\
    \ $2\"\n        exit 1\n    fi\n    if [ $1 -gt $2 ]; then \n        echo \"$1\
    \ must be less than $2\"\n        exit 1\n    fi\n    \n    num=$(expr $1 + ($2\
    \ - $1))\n    while [ $num -gt $(($2 * $2 + $1)) ]; do\n        let \"num += 1\"\
    \n    done\n\n    if [ $(($2 * $2 + $1)) -ne $num ]; then\n        echo \"$num\
    \ must be even\"\n        exit 1\n    fi\n\n    echo \"$num\"", "\tlocal x=$1\n\
    \tlocal y=$2\n\tlocal answer=$(($x-$y+1))\n\n\t# Check if answer is a whole number\n\
    \t(( answer == $answer )) && return 0\n\n\techo \"$answer\"", "  local x=\"$1\"\
    \n  local y=\"$2\"\n  local max_even\n  \n  if [[ \"$x\" < \"$y\" ]]; then\n \
    \   echo \"Invalid input '$x' < '$y'\"\n    return -1\n  fi\n\n  # find the smallest\
    \ integer whose remainder when divided by two is \n  # also the smallest integer\
    \ greater than or equal to x and \n  # less than or equal to y\n  while true;\
    \ do\n    (( x = $x / 2 ))\n    (( y = $y / 2 ))\n    if [[ \"$x\" < \"$y\" ]];\
    \ then\n      max_even=\"$x\"\n      break\n    fi\n  done\n\n  # The remainder\
    \ is zero if the number is even\n  if (( max_even % 2 == 0 )); then\n    echo\
    \ \"Invalid input '$x' is not even\"\n    return -1\n  fi\n\n  echo \"$max_even\"",
  "  local x y\n  x=$1;\n  y=$2;\n  local max\n  max=$(expr $x + $y - 2);\n  if [\
    \ $((max % 2)) -eq 0 ] ; then\n    echo $max\n  else\n    echo $-1\n  fi", " \
    \   local x=\"$1\"\n    local y=\"$2\"\n    local result=0\n    while [ $x -lt\
    \ $y ]; do\n        result=$(( $result + 2 ))\n        x=$(( $x + 1 ))\n    done\n\
    \    if [ $x -eq $y ]; then\n        result=$x\n    fi\n    echo \"$result\"",
  "\tlocal x=$1; shift\n\tlocal y=$1; shift\n\tif ((x -gt y) || (x -lt 0))\n\tthen\n\
    \t\techo \"Error: x must be positive\"\n\t\treturn\n\tfi\n\tlocal tmp=$(( x |\
    \ y ))\n\t(( tmp %= y ))\n\tif (( tmp == 0 ))\n\tthen\n\t\treturn\n\tfi\n\techo\
    \ \"$y\"", "    local x=\"$1\"\n    local y=\"$2\"\n    if [ $(( $x - $y )) -ge\
    \ 0 ] && [ $(( $y - $x )) -ge 0 ]\n    then\n        (( x = $x ))\n        ((\
    \ y = $y ))\n    fi\n    while true; do\n        local num=\"$(($x*$x+$y*$y))\"\
    \n        (( x++ ))\n        (( y++ ))\n        if [ $(( $x - $y )) -eq 0 ] &&\
    \ [ $(( $y - $x )) -eq 0 ]; then\n            (( x = $x ))\n            (( y =\
    \ $y ))\n            break\n        elif [ $num -ge $y ] || [ $num -le $x ]; then\n\
    \            (( y = $y ))\n        else\n            (( x = $x ))\n        fi\n\
    \    done\n    if [ $x -eq 0 ]; then\n        echo -1\n    else\n        echo\
    \ $(( $x - $y ))\n    fi", "    local x=\"$1\"\n    local y=\"$2\"\n    echo \"\
    $(( 10#$x + 10#$y ))\"", "    if (($1 <= $2)); then\n        (( ${$1} >= $2 ))\
    \ || return -1\n        (( ${$1} > $2 )) && return -1\n        (( ${$1} < $2 ))\
    \ && return -1\n        (( ${$1} % 2 == 0 )) && return ${$1}\n    else\n     \
    \   (( ${$2} >= $1 )) || return -1\n        (( ${$2} < $1 )) && return -1\n  \
    \      (( ${$2} % 2 == 0 )) && return ${$2}\n    fi"]
stop_tokens:
- "\n}"
