name: HumanEval_148_bf
language: sh
prompt: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
  \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
  \ \n# Uranus, Neptune.\n# Write a function that takes two planet names as strings\
  \ planet1 and planet2. \n# The function should return a list containing all planets\
  \ whose orbits are \n# located between the orbit of planet1 and the orbit of planet2,\
  \ sorted by \n# the proximity to the sun. \n# The function should return an empty\
  \ list if planet1 or planet2\n# are not correct planet names. \n# Examples\n# >>>\
  \ $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"']\n# >>> $(bf \"Earth\"\
  \ \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"Uranus\")\n# ['\"Venus\"',\
  \ '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"']\n#\n# $1 is a string\n#\
  \ $2 is a string\nbf() {\n"
tests: "}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
  \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus\
  \ Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"\
  Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") =\
  \ \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
  \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
completions: ["\t[[ $# -ne 2 ]] && return 1\n\t\n\tlocal jpl1=\"$(echo $1 | sed 's/\\\
    \"//g')\"\n\tlocal jpl2=\"$(echo $2 | sed 's/\\\"//g')\"\n\n\tlocal jpl1int=`echo\
    \ $jpl1 | sed 's/J/j/'`\n\tlocal jpl2int=`echo $jpl2 | sed 's/J/j/'`\n\n\t# The\
    \ distance\n\tlocal dist\n\n\t# The planet of the planet closest to the sun\n\t\
    local ppl1\n\n\t# The planet of the planet closest to the sun\n\tlocal ppl2\n\n\
    \t# The orbit of the sun\n\tlocal s\n\tlocal u\n\n\t# The orbital distance between\
    \ the planets\n\tlocal dist\n\n\t# The planets whose orbits intersect (by proximity)\n\
    \tlocal planet1\n\tlocal planet2\n\n\t# The planets whose orbits are in between\
    \ the two planets\n\tlocal planets\n\n\t# The planets in between the two planets\n\
    \tlocal ppls\n\n\t# The planets whose orbits are located between the two planets\n\
    \tlocal pls\n\n\t# The planets whose orbits are located between the two planets\n\
    \tlocal ppl1\n\tlocal ppl2\n\n\t# The orbits of the planets\n\tlocal u\n\tlocal\
    \ s\n\n\t# The orbits of the planets\n\tlocal p1\n\tlocal p2\n\n\t# The orbits\
    \ of the planets\n\tlocal u\n\tlocal s\n\n\t# The planet whose orbit intersects\
    \ the sun\n\tlocal pls\n\n\t# The orbit of the sun\n\tlocal u\n\tlocal s\n\n\t\
    # The orbit of the sun\n\tlocal s1\n\tlocal s2\n\n\t# The orbit of the sun\n\t\
    local s1\n\tlocal s2\n\n\t# The planets in between the two planets\n\tlocal ppls\n\
    \n\t# The planet whose orbit intersects the sun\n\tlocal pls\n\n\t# The planet\
    \ whose orbit intersects the sun\n\tlocal pls\n\n\t# The planets whose orbits\
    \ intersect (by proximity)\n\tlocal planet1\n\tlocal planet2\n\n\t# The planets\
    \ whose orbits are in between the two planets\n\tlocal planets\n\n\t# The planets\
    \ whose orbits intersect (by proximity)\n\tlocal planet1", "    local p1=$1\n\
    \    local p2=$2\n    local n\n    for n in $(seq 1 8); do\n        local a=$(($n\
    \ * 3600))\n        local b=$(($n * 600))\n        local m=$(($n * 100))\n   \
    \     if [ \"$p1\" == \"$p2\" ]; then\n            echo \"$a$b\"\n           \
    \ return\n        fi\n        if [ \"$a\" -ge \"$b\" ]; then\n            echo\
    \ \"$p1\" \n            return\n        fi\n        echo \"$p1\"\n    done", " \
    \   local planet1=$1\n    local planet2=$2\n    local planets\n    if [[ $planet1\
    \ != Jupiter && $planet1 != Mercury && \n        $planet1 != Venus && $planet1\
    \ != Earth && $planet1 != Mars && \n        $planet1 != Jupiter && $planet1 !=\
    \ Saturn && $planet1 != Uranus && \n        $planet1 != Neptune ]]; then\n   \
    \     echo \"Invalid planet name\"\n    else\n        planets=(\n            \"\
    Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \n  \
    \          \"Neptune\"\n        )\n    fi\n    local planet1Orbit=$(bf \"$planet1\"\
    \ Mercury)\n    local planet2Orbit=$(bf \"$planet2\" Mercury)\n    local planet1Dist=${bf\
    \ \"$planet1\" \"$planet2Orbit\"} # distance to the planet2Orbit\n    local planet2Dist=${bf\
    \ \"$planet2Orbit\" \"$planet1\"} # distance to the planet2Orbit\n    local planet1DistOrbit=$(bf\
    \ \"$planet1\" \"$planet2Orbit\"|sed 's/[^-0-9.]*//') # distance to the planet2Orbit\
    \ (orbit)\n    local planet2DistOrbit=$(bf \"$planet2Orbit\" \"$planet1\"|sed\
    \ 's/[^-0-9.]*//') # distance to the planet2Orbit (orbit)\n    local planet1DistOrbit2=${bf\
    \ \"$planet1\" \"$planet2\"|sed 's/[^-0-9.]*//'}\n    local planet2DistOrbit2=${bf\
    \ \"$planet2\" \"$planet1\"|sed 's/[^-0-9.]*//'}\n    local planet1DistOrbit2=$(bf\
    \ \"$planet1\" \"$planet2\"|sed 's/[^-0-9.]*//'|sed 's/-//') # distance to the\
    \ planet2Orbit (orbit)\n    local planet2DistOrbit2=$(bf \"$planet2\" \"$planet1\"\
    |sed 's/[^-0-9.]*//'|sed 's/-//') # distance to the planet2Orbit (orbit)\n   \
    \ local planet1DistOrbit2=$(bf \"$planet1\" \"$planet", "    local p1 p2\n   \
    \ [[ $1 =~ ^[[:alnum:]]+$ ]] || return 1\n    [[ $2 =~ ^[[:alnum:]]+$ ]] || return\
    \ 1\n    [[ $1 = $2 ]] || return 1\n    [[ $1 = \"Mercury\" ]] && p1=\"Venus\"\
    \ && p2=\"Earth\" || p1=\"Earth\" && p2=\"Venus\" || return 1\n    [[ $1 = \"\
    Venus\" ]] && p1=\"Mercury\" && p2=\"Earth\" || p1=\"Earth\" && p2=\"Mercury\"\
    \ || return 1\n    [[ $1 = \"Earth\" ]] && p1=\"Mercury\" && p2=\"Venus\" || p1=\"\
    Venus\" && p2=\"Earth\" || return 1\n    [[ $1 = \"Mars\" ]] && p1=\"Jupiter\"\
    \ && p2=\"Saturn\" || p1=\"Saturn\" && p2=\"Mars\" || return 1\n    [[ $1 = \"\
    Jupiter\" ]] && p1=\"Mars\" && p2=\"Saturn\" || p1=\"Saturn\" && p2=\"Jupiter\"\
    \ || return 1\n    [[ $1 = \"Saturn\" ]] && p1=\"Jupiter\" && p2=\"Mars\" || p1=\"\
    Mars\" && p2=\"Saturn\" || return 1\n    [[ $1 = \"Uranus\" ]] && p1=\"Neptune\"\
    \ && p2=\"Neptune\" || p1=\"Neptune\" && p2=\"Uranus\" || return 1\n    [[ $1\
    \ = \"Neptune\" ]] && p1=\"Uranus\" && p2=\"Neptune\" || p1=\"Uranus\" && p2=\"\
    Neptune\" || return 1\n    local a=\"$(pbf \"$1\" \"$2\")\"\n    [[ $a =~ ^[[:alnum:]]+$\
    \ ]] || return 1\n    local b=\"$(bf \"$p1\" \"${a//[[:space:]]/}\")\"\n    [[\
    \ $b =~ ^[[:alnum:]]+$ ]] || return 1\n    local c=\"$(bf \"$p2\" \"${b//[[:space:]]/}\"\
    )\"\n    [[ $c =~ ^[[:alnum:]]+$ ]] || return 1\n    [[ \"$1\" == \"$c\" ]] &&\
    \ return 1 || return 2\n    local d=\"$(bf \"Mercury\" \"${a//[[:space:]]/}\"\
    )\"\n    [[ \"$d\" == \"$a\" ]] && return 1 || return 2\n    local e=\"$(bf \"\
    Venus\" \"${a//[[:space:]]/}\")\"\n    [[ \"$e\" == \"", "   local planet1=$1\n\
    \   local planet2=$2\n\n   local planets=$(echo ${planet1} | tr \"[A-Z]\" \"[a-z]\"\
    ) \\\n      $(echo ${planet2} | tr \"[A-Z]\" \"[a-z]\") \\\n      $(echo ${planet2}\
    \ | tr \"[A-Z]\" \"[a-z]\") \\\n      $(echo ${planet2} | tr \"[A-Z]\" \"[a-z]\"\
    ) \\\n      $(echo ${planet2} | tr \"[A-Z]\" \"[a-z]\") \\\n      $(echo ${planet2}\
    \ | tr \"[A-Z]\" \"[a-z]\") \\\n      $(echo ${planet2} | tr \"[A-Z]\" \"[a-z]\"\
    ) \\\n      $(echo ${planet2} | tr \"[A-Z]\" \"[a-z]\") \\\n      $(echo ${planet2}\
    \ | tr \"[A-Z]\" \"[a-z]\")\n\n   local min=$(awk \"BEGIN {print $1}\")\n   local\
    \ max=$(awk \"BEGIN {print $2}\")\n   for planet in ${planets}; do\n      echo\
    \ \"$planet $(bf $planet1 $planet)\" | grep $min | grep -v $max \\\n         |\
    \ sort -n -k 2 | head -n 1\n   done", "\tlocal planet1=$1\n\tlocal planet2=$2\n\
    \tlocal out=''\n\n\t[[ -n $planet1 && -n $planet2 ]] && {\n\t\tlocal planet1orbit=($(echo\
    \ $($1 orbit $planet1) |cut -d ' ' -f 2- |cut -d ' ' -f 1- |sort -k 2 |awk '{print\
    \ $1}'))\n\t\tlocal planet2orbit=($(echo $($2 orbit $planet2) |cut -d ' ' -f 2-\
    \ |cut -d ' ' -f 1- |sort -k 2 |awk '{print $1}'))\n\t\tlocal planet1distance=($(echo\
    \ $($1 distance $planet1) |cut -d ' ' -f 2- |cut -d ' ' -f 1- |sort -k 2 |awk\
    \ '{print $1}'))\n\t\tlocal planet2distance=($(echo $($2 distance $planet2) |cut\
    \ -d ' ' -f 2- |cut -d ' ' -f 1- |sort -k 2 |awk '{print $1}'))\n\n\t\tif [ ${#planet1orbit[@]}\
    \ -ne ${#planet2orbit[@]} ]; then\n\t\t\tout='Error'\n\t\telse\n\t\t\tfor ((i=0;\
    \ i<${#planet1orbit[@]}; i++)); do\n\t\t\t\tif [[ ${planet1orbit[i]} == ${planet2orbit[i]}\
    \ ]]; then\n\t\t\t\t\tout+=(\"$($1 name ${planet1orbit[i]})\")\n\t\t\t\t\tbreak\n\
    \t\t\t\tfi\n\t\t\tdone\n\t\tfi\n\t} || {\n\t\tout='Error'\n\t}\n\n\tif [[ -n $out\
    \ ]]; then\n\t\tout=($(echo $out |awk '{print $1,$2}'))\n\t\tout=$(echo $out |sort\
    \ -k 2 |awk '{print $2}')\n\tfi\n\techo $out", "\tplanet1=$1\n\tplanet2=$2\n\t\
    distance=$(echo $planet1 $planet2 | awk '{printf \"%.6f\",sqrt(($1-$2)*($1-$2)+($2-$3)*($2-$3));}')\n\
    \techo $distance\n\tif [ $distance -lt 1 ]; then return 0;\n\telif [ $distance\
    \ -ge $1 -a $distance -ge $2 ]; then return $planet1;\n\telif [ $distance -ge\
    \ $2 -a $distance -ge $1 ]; then return $planet2;\n\telse return \"\"; fi;", "\t\
    local planet1=$1\n\tlocal planet2=$2\n\t\n\tlocal planets=$(bf \"Earth\" \"$planet1\"\
    \ \"$planet2\")\n\t\n\t# If any planet is missing from the list, then return an\
    \ empty list\n\tif [[ -z \"$planets\" ]]; then\n\t\techo \"[]\"\n\telse\n\t\t\
    local planet1orbit=$(bf \"$planet1\" \"$planet2\" | tail -1)\n\t\tlocal planet2orbit=$(bf\
    \ \"$planet2\" \"$planet1\" | tail -1)\n\t\t\n\t\tlocal planet1distance=$(bf \"\
    $planet1\" \"$planet2\" | head -1)\n\t\tlocal planet2distance=$(bf \"$planet2\"\
    \ \"$planet1\" | head -1)\n\t\t\n\t\t# If planet1 is closer to the sun, sort the\
    \ orbit of planet1 by \n\t\t# its distance to the sun\n\t\tif [[ \"$planet1distance\"\
    \ < \"$planet2distance\" ]]; then\n\t\t\techo \"$planet1orbit\" | xargs -I% echo\
    \ \"$planet1distance\" | sort -n -r | xargs -I% echo \"%\"\n\t\t# Else, if planet2\
    \ is closer to the sun, sort the orbit of planet2 by \n\t\t# its distance to the\
    \ sun\n\t\telse\n\t\t\techo \"$planet2orbit\" | xargs -I% echo \"$planet2distance\"\
    \ | sort -n -r | xargs -I% echo \"%\"\n\t\t# If both planets are equally far from\
    \ the sun, sort by their orbit \n\t\t# in the ascending order of the longitude.\n\
    \t\telse\n\t\t\techo \"$planet1orbit\" | xargs -I% echo \"$planet1distance\" |\
    \ sort -nr | xargs -I% echo \"%\"\n\t\t\techo \"$planet2orbit\" | xargs -I% echo\
    \ \"$planet2distance\" | sort -nr | xargs -I% echo \"%\"\n\t\tfi\n\tfi", "\tlocal\
    \ a=$1\n\tlocal b=$2\n\tif [[ \"$a\" == *\"Mercury\"* ]]; then\n\t\techo \"\\\"\
    Earth\\\"\"\n\telif [[ \"$a\" == *\"Venus\"* ]]; then\n\t\techo \"\\\"Earth\\\"\
    \"\n\telif [[ \"$a\" == *\"Earth\"* ]]; then\n\t\techo \"\\\"Mars\\\"\"\n\telif\
    \ [[ \"$a\" == *\"Mars\"* ]]; then\n\t\techo \"\\\"Mars\\\"\"\n\telif [[ \"$a\"\
    \ == *\"Jupiter\"* ]]; then\n\t\techo \"\\\"Saturn\\\"\"\n\telif [[ \"$a\" ==\
    \ *\"Saturn\"* ]]; then\n\t\techo \"\\\"Jupiter\\\"\"\n\telif [[ \"$a\" == *\"\
    Uranus\"* ]]; then\n\t\techo \"\\\"Uranus\\\"\"\n\telif [[ \"$a\" == *\"Neptune\"\
    * ]]; then\n\t\techo \"\\\"Neptune\\\"\"\n\telse\n\t\techo \"\\\"\\\"\\\"$a is\
    \ not one of Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, Neptune\\\"\
    \\\"\\\"\"\n\tfi", "    local planet1 planet2\n    planet1=$1\n    planet2=$2\n\
    \    local solar_system_name\n    solar_system_name=\"`date +%s`\"\n    local\
    \ planet_name\n    local first_planet_orbit\n    local second_planet_orbit\n \
    \   local planet1_orbit\n    local planet2_orbit\n    local planet_orbit\n   \
    \ local planet_orbits\n    local first_planet_orbits_distance\n    local second_planet_orbits_distance\n\
    \    local planet1_orbits_distance\n    local planet2_orbits_distance\n    local\
    \ sorted_planet_orbits\n    local result\n\n    first_planet_orbit=\"`planet $planet1\
    \ $planet2 | tail -1 | awk -F'\"' '{print $4}'`\"\n    second_planet_orbit=\"\
    `planet $planet2 $planet1 | tail -1 | awk -F'\"' '{print $4}'`\"\n    if [ \"\
    $planet1\" == \"$planet2\" ]; then\n        echo \"$planet1 is a singular planet\"\
    \n        exit 1\n    fi\n    if [ \"$planet1\" == \"Earth\" ]; then\n       \
    \ echo \"Earth orbits to $planet2\"\n        exit 0\n    fi\n    planet1_orbit=\"\
    `planet $planet1 | tail -1 | awk -F'\"' '{print $4}'`\"\n    planet2_orbit=\"\
    `planet $planet2 | tail -1 | awk -F'\"' '{print $4}'`\"\n    planet_orbits=\"\
    `planet $planet1 $planet2 | tail -1 | awk -F'\"' '{print $4}'`\"\n    planet_orbits=\"\
    `planet $planet1 $planet2 | tail -1 | awk -F'\"' '{print $4}'`\"\n    planet_orbits=\"\
    `planet $planet1 $planet2 | tail -1 | awk -F'\"' '{print $4}'`\"\n    planet_orbits=\"\
    `planet $planet1 $planet2 | tail -1 | awk -F'\"' '{print $4}'`\"\n    planet_orbits=\"\
    `planet $planet1 $planet2 | tail -1 | awk -F'\"' '{print $4}'`\"\n    planet_orbits=\"\
    `planet $planet1 $planet2 | tail -1 | awk -F'\"' '{print $4}'`\"\n    planet_orbits=\"\
    `planet $planet1 $planet2 | ", "\tlocal planet1=\"$1\"\n\tlocal planet2=\"$2\"\
    \n\tlocal orbit1=\"$(getOrbit $planet1)\"\n\tlocal orbit2=\"$(getOrbit $planet2)\"\
    \n\tlocal sun=\"$(getSun)\"\n\tlocal dist1=\"${orbit1%?}\"\n\tlocal dist2=\"${orbit2%?}\"\
    \n\t\n\tif [ \"$dist1\" = \"$dist2\" ]\n\tthen\n\t\techo \"\"\n\telse\n\t\techo\
    \ $dist1 $dist2\n\tfi", "    planet1=\"$1\"\n    planet2=\"$2\"\n\n    planets=(\
    \ $(\n        planet list --by planet_name |\n        grep $planet1 |\n      \
    \  grep $planet2 |\n        awk -F\"-\" '{print $2}' |\n        sort -n -k 2 -k3,3n\
    \ |\n        cut -d '-' -f 1 |\n        sort -k 2 -n -k3,3n \n    ) )\n\n    planets=(\
    \ $(\n        planet list --by planet_name |\n        grep $planet1 |\n      \
    \  grep $planet2 |\n        awk -F\"-\" '{print $2}' |\n        sort -n -k 2 -k3,3n\
    \ |\n        cut -d '-' -f 1 |\n        sort -k 2 -n -k3,3n \n    ) )\n\n    planets=(\
    \ $(\n        planet list --by planet_name |\n        grep $planet1 |\n      \
    \  grep $planet2 |\n        awk -F\"-\" '{print $2}' |\n        sort -n -k 2 -k3,3n\
    \ |\n        cut -d '-' -f 1 |\n        sort -k 2 -n -k3,3n \n    ) )\n\n    planets=(\
    \ $(\n        planet list --by planet_name |\n        grep $planet1 |\n      \
    \  grep $planet2 |\n        awk -F\"-\" '{print $2}' |\n        sort -n -k 2 -k3,3n\
    \ |\n        cut -d '-' -f 1 |\n        sort -k 2 -n -k3,3n \n    ) )\n\n    planets=(\
    \ $(\n        planet list --by planet_name |\n        grep $planet1 |\n      \
    \  grep $planet2 |\n        awk -F\"-\" '{print $2}' |\n        sort -n -k 2 -k3,3n\
    \ |\n        cut -d '-' -f 1 |\n        sort -k 2 -n -k3,3n \n    ) )\n\n    planets=(\
    \ $(\n        planet list --by planet_name |\n        grep $planet1 |\n      \
    \  grep $planet2 |\n        awk -F\"-\" '{print $2}' |\n        sort -n -k 2 -k3,3n\
    \ |\n        cut -d '-' -f 1 |\n        sort -", "    local planet1=$1\n    local\
    \ planet2=$2\n    local planet1_orbit_dist=$3\n    local planet2_orbit_dist=$4\n\
    \    local planet_list=$5\n    local planet1_orbit_list=$6\n    local planet2_orbit_list=$7\n\
    \    local orbit_list=$8\n    local planet_list_1=$9\n    local planet1_orbit_list_1=$10\n\
    \    local planet2_orbit_list_1=$11\n    local orbit_list_1=$12\n    local planet_list_2=$13\n\
    \    local planet1_orbit_list_2=$14\n    local planet2_orbit_list_2=$15\n    local\
    \ orbit_list_2=$16\n    if [[ \"${planet1}\" != \"${planet2}\" ]]; then\n    \
    \    echo \"Incorrect planet name\"\n    else\n        planet_list=$(echo \"${planet_list}\"\
    |sed -n -e \"/${planet1},/p\" -e \"/${planet2},/p\")\n        planet1_orbit_list=$(echo\
    \ \"${planet1_orbit_list}\"|sed -n -e \"/${planet1},/p\" -e \"/${planet2},/p\"\
    )\n        planet2_orbit_list=$(echo \"${planet2_orbit_list}\"|sed -n -e \"/${planet2},/p\"\
    \ -e \"/${planet1},/p\")\n        orbit_list=$(echo \"${orbit_list}\"|sed -n -e\
    \ \"/${planet1},/p\" -e \"/${planet2},/p\")\n        planet_list_1=$(echo \"${planet_list_1}\"\
    |sed -n -e \"/${planet1},/p\" -e \"/${planet2},/p\")\n        planet1_orbit_list_1=$(echo\
    \ \"${planet1_orbit_list_1}\"|sed -n -e \"/${planet1},/p\" -e \"/${planet2},/p\"\
    )\n        planet2_orbit_list_1=$(echo \"${planet2_orbit_list_1}\"|sed -n -e \"\
    /${planet2},/p\" -e \"/${planet1},/p\")\n        orbit_list_1=$(echo \"${orbit_list_1}\"\
    |sed -n -e \"/${planet1},/p\" -e \"/${planet2},/p\")\n        planet_list_2=$(echo\
    \ \"${planet_list_2}\"|sed -n -e \"/${planet2},", "    planet1=${1%\\\"}; planet2=${2%\\\
    \"}\n    echo $(bf \"$planet1\" \"$planet2\")", "\tlocal planet1=$1\n\tlocal planet2=$2\n\
    \tlocal templist\n\ttemplist=($(bf $planet1 $planet2 | sed 's/^\"//g' |sed 's/\"\
    $//g' | sort | uniq | sed 's/^/- /g'))\n\techo $templist", "    planet1=\"$1\"\
    \n    planet2=\"$2\"\n    echo \"${planet1}\" \"${planet2}\" | sed 's/ /-/g'\n\
    \    \n    # find out how long is the orbit of planet1 between the two orbits\n\
    \    orbit1=$(bf \"${planet2}\" \"${planet1}\")\n    echo \"${planet1}\" \"${planet2}\"\
    \ \"${orbit1}\"\n\n    # find out how long is the orbit of planet2 between the\
    \ two orbits\n    orbit2=$(bf \"${planet1}\" \"${planet2}\")\n    echo \"${planet1}\"\
    \ \"${planet2}\" \"${orbit2}\"\n\n    # calculate the difference between the two\
    \ orbits\n    diff=$(echo \"${orbit2} - ${orbit1}\" | bc)\n    echo \"${diff}\"\
    \n    \n    # calculate the difference between the two orbits\n    diff=$(echo\
    \ \"${orbit2} - ${orbit1}\" | bc)\n    echo \"${diff}\"\n    \n    # check if\
    \ it is positive\n    if [[ \"${diff}\" > 0 ]]; then\n        # sort the array\
    \ in ascending order\n        array=( $(bf \"${planet2}\" \"${planet1}\") )\n\
    \        echo \"${array[@]}\"\n        sorted=${array[@]}\n        echo \"${sorted[@]}\"\
    \n        \n        # sort in ascending order\n        sorted=${sorted[@]} \n\
    \        echo \"${sorted[@]}\"\n        \n        # sort in descending order\n\
    \        sorted=${sorted[@]} \n        echo \"${sorted[@]}\"\n    else\n     \
    \   echo \"${planet1}\" \"${planet2}\"\n    fi", "\techo \"$1\"\n\techo \"$2\"",
  "    local planet1 planet2 \n    planet1=$1\n    planet2=$2\n    local sat uranus\
    \ venus earth mars jupiter saturn uranus neptune \n\n    # planets \n    # mercury\n\
    \    # venus\n    # earth\n    # mars\n    # jupiter\n    # saturn\n    # uranus\n\
    \    # neptune\n    sat=$(echo $planet1 | awk -F\"\\\"\" '{print $5}')\n    uranus=$(echo\
    \ $planet1 | awk -F\"\\\"\" '{print $6}')\n    venus=$(echo $planet1 | awk -F\"\
    \\\"\" '{print $7}')\n    earth=$(echo $planet1 | awk -F\"\\\"\" '{print $8}')\n\
    \    mars=$(echo $planet1 | awk -F\"\\\"\" '{print $9}')\n    jupiter=$(echo $planet1\
    \ | awk -F\"\\\"\" '{print $10}')\n    saturn=$(echo $planet1 | awk -F\"\\\"\"\
    \ '{print $11}')\n    uranus=$(echo $planet1 | awk -F\"\\\"\" '{print $12}')\n\
    \    neptune=$(echo $planet1 | awk -F\"\\\"\" '{print $13}')\n    \n    # planets\
    \ \n    # mercury\n    # venus\n    # earth\n    # mars\n    # jupiter\n    #\
    \ saturn\n    # uranus\n    # neptune\n    mercury1=$(echo $planet2 | awk -F\"\
    \\\"\" '{print $5}')\n    mercury2=$(echo $planet2 | awk -F\"\\\"\" '{print $6}')\n\
    \    venus1=$(echo $planet2 | awk -F\"\\\"\" '{print $7}')\n    venus2=$(echo\
    \ $planet2 | awk -F\"\\\"\" '{print $8}')\n    earth1=$(echo $planet2 | awk -F\"\
    \\\"\" '{print $9}')\n    earth2=$(echo $planet2 | awk -F\"\\\"\" '{print $10}')\n\
    \    mars1=$(echo $planet2 | awk -F\"\\\"\" '{print $11}')\n    mars2=$(echo $planet2\
    \ | awk -F\"\\\"\" '{print $12}')\n    jupiter1=$(echo $planet2 | awk -F\"\\\"\
    \" '{print $13}')\n    jupiter2=$(echo $planet2 | awk -F", "\tif [[ -z \"$1\"\
    \ || -z \"$2\" ]]; then\n\t\techo \"Please provide two planet names as strings\"\
    \n\telse\n\t\tbf_arr=()\n\t\tfor planet in $(find $HOME/planets -name '*.planet')\n\
    \t\tdo\n\t\t\tplanet_name=$(basename $planet)\n\t\t\tplanet_dir=$(dirname $planet)\n\
    \t\t\tplanet_orbit_arr=()\n\t\t\tfor orbit in $(find $planet_dir -name 'orbit.txt')\n\
    \t\t\tdo\n\t\t\t\torbit_name=$(basename $orbit)\n\t\t\t\torbit_dir=$(dirname $orbit)\n\
    \t\t\t\torbit_orbit_arr=()\n\t\t\t\tfor orbit_line in $(find $orbit_dir -name\
    \ 'orbit.txt')\n\t\t\t\tdo\n\t\t\t\t\torbit_orbit_arr+=(\"$orbit_name\")\n\t\t\
    \t\tdone\n\t\t\t\tif [[ ${#orbit_orbit_arr[@]} -eq 0 ]]; then\n\t\t\t\t\tcontinue\n\
    \t\t\t\telse\n\t\t\t\t\tfor orbit_name in \"${orbit_orbit_arr[@]}\"\n\t\t\t\t\t\
    do\n\t\t\t\t\t\torbit_arr=(\"${orbit_arr[@]}\" \"$orbit_name\")\n\t\t\t\t\tdone\n\
    \t\t\t\t\tif [[ ${#orbit_arr[@]} -eq 0 ]]; then\n\t\t\t\t\t\tcontinue\n\t\t\t\t\
    \tfi\n\t\t\t\tfi\n\t\t\tdone\n\t\t\tif [[ ${#orbit_arr[@]} -eq 0 ]]; then\n\t\t\
    \t\tcontinue\n\t\t\telse\n\t\t\t\tfor orbit_name in \"${orbit_arr[@]}\"\n\t\t\t\
    \tdo\n\t\t\t\t\tplanet_orbit_arr+=(\"$planet_name\")\n\t\t\t\tdone\n\t\t\t\tif\
    \ [[ ${#planet_orbit_arr[@]} -eq 0 ]]; then\n\t\t\t\t\tcontinue\n\t\t\t\telse\n\
    \t\t\t\t\tfor planet_name in \"${planet_orbit_arr[@]}\"\n\t\t\t\t\tdo\n\t\t\t\t\
    \t\tplanet_orbit_arr+=(\"$planet_name\")\n\t\t\t\t\tdone\n\t\t\t\t\tif [[ ${#planet_orbit_arr[@]}\
    \ -eq 0 ]]; then\n\t\t\t\t\t\tcontinue\n\t\t\t\t\tfi\n\t\t\t\tfi\n\t\t\tfi\n\t\
    \tdone\n\t\tif [[ ${#planet_orbit_arr[@]} -eq 0 ]]; then\n\t\t\techo \"The planet\
    \ $1 does not have a corresponding orbit file.\"\n\t\t\techo \"Try again.\"\n\t\
    \telse\n\t\t\tplanet_orbit_arr=(\"${planet_orbit_arr[@]}\" \"$2\")\n\t\t\tplanet_orbit_arr=(\"\
    ${planet_orbit_arr[@]}\" \"$1\")\n\t\t\tplanet_orbit_arr=(\"${", "  # Your code\
    \ here\n  if [ \"$#\" -eq 1 ]; then\n    if [ \"$1\" == \"Sun\" ]; then\n    \
    \  planet=\"Mercury\"\n    elif [ \"$1\" == \"Earth\" ]; then\n      planet=\"\
    Venus\"\n    elif [ \"$1\" == \"Mercury\" ]; then\n      planet=\"Earth\"\n  \
    \  elif [ \"$1\" == \"Venus\" ]; then\n      planet=\"Mars\"\n    elif [ \"$1\"\
    \ == \"Earth\" ]; then\n      planet=\"Jupiter\"\n    elif [ \"$1\" == \"Mars\"\
    \ ]; then\n      planet=\"Saturn\"\n    elif [ \"$1\" == \"Jupiter\" ]; then\n\
    \      planet=\"Uranus\"\n    elif [ \"$1\" == \"Saturn\" ]; then\n      planet=\"\
    Neptune\"\n    elif [ \"$1\" == \"Uranus\" ]; then\n      planet=\"Pluto\"\n \
    \   elif [ \"$1\" == \"Neptune\" ]; then\n      planet=\"Phobos\"\n    elif [\
    \ \"$1\" == \"Phobos\" ]; then\n      planet=\"Sun\"\n    elif [ \"$1\" == \"\
    Pluto\" ]; then\n      planet=\"Mercury\"\n    elif [ \"$1\" == \"Mercury\" ];\
    \ then\n      planet=\"Venus\"\n    elif [ \"$1\" == \"Venus\" ]; then\n     \
    \ planet=\"Mars\"\n    elif [ \"$1\" == \"Earth\" ]; then\n      planet=\"Jupiter\"\
    \n    elif [ \"$1\" == \"Mars\" ]; then\n      planet=\"Saturn\"\n    elif [ \"\
    $1\" == \"Jupiter\" ]; then\n      planet=\"Uranus\"\n    elif [ \"$1\" == \"\
    Saturn\" ]; then\n      planet=\"Neptune\"\n    elif [ \"$1\" == \"Uranus\" ];\
    \ then\n      planet=\"Pluto\"\n    elif [ \"$1\" == \"Neptune\" ]; then\n   \
    \   planet=\"Phobos\"\n    elif [ \"$1\" == \"Phobos\" ]; then\n      planet=\"\
    Sun\"\n    elif [ \"$1\" == \"Pluto\" ]; then\n      planet=\"Mercury\"\n    elif\
    \ [ \"$1\" == \"Mercury\" ]; then\n      planet=\"Venus\"\n    elif [ \"$1\" ==\
    \ \"Venus\" ]; then\n      planet=\"Mars\"\n    elif [ \"$1\" == \"Earth\" ];\
    \ then\n      planet=\"Jupiter\"\n    elif [ \"$1\" == \"Mars\" ]; then\n    \
    \  planet=\"Saturn\"\n    elif [ \"$1\" == \"Jupiter\" ]; then\n      planet=\"\
    Uranus\"\n    elif [ \"$1\" == \"Saturn\" ]; then\n      planet=\"Neptune\"\n\
    \    elif [ \"$1\" == \"Uranus\" ]; then\n      planet=\"Pluto\"\n    elif [ \"\
    $1\" == \"Neptune", "    local planet1=$1\n    local planet2=$2\n    local orbit1\n\
    \    local orbit2\n    local distance\n    local orbit\n\n    orbit1=$(orbit \"\
    $planet1\")\n    if [[ -z $orbit1 ]] ; then\n        echo \"$planet1 is not a\
    \ planet name.\" >&2\n        exit 1\n    fi\n\n    orbit2=$(orbit \"$planet2\"\
    )\n    if [[ -z $orbit2 ]] ; then\n        echo \"$planet2 is not a planet name.\"\
    \ >&2\n        exit 1\n    fi\n\n    orbits=$(get_orbits \"$planet1\" \"$planet2\"\
    )\n    if [[ -z $orbits ]] ; then\n        echo \"There are no orbits between\
    \ planets $planet1 and $planet2.\" >&2\n        exit 1\n    fi\n\n    distance=$(get_distance\
    \ \"$planet1\" \"$planet2\")\n    if [[ -z $distance ]] ; then\n        echo \"\
    There are no distances between planets $planet1 and $planet2.\" >&2\n        exit\
    \ 1\n    fi\n\n    echo \"$orbit1\" \"$orbit2\"\n    echo $(sort -n -k 2 -n -k\
    \ 3 -n -k 4 -n -k 5 -n -k 6 -n -k 7 -n -k 8 -n -k 9 $orbits)", "  local planet1=$1\n\
    \  local planet2=$2\n  local i j\n  local list\n  if [ \"$planet1\" = \"Earth\"\
    \ ] || [ \"$planet2\" = \"Earth\" ]; then \n    return $list\n  fi\n  if [ \"\
    $planet1\" = \"Mercury\" ] && [ \"$planet2\" = \"Venus\" ]; then \n    return\
    \ $list\n  fi\n  if [ \"$planet1\" = \"Mercury\" ] && [ \"$planet2\" = \"Earth\"\
    \ ]; then \n    return $list\n  fi\n  if [ \"$planet1\" = \"Mercury\" ] && [ \"\
    $planet2\" = \"Mars\" ]; then \n    return $list\n  fi\n  if [ \"$planet1\" =\
    \ \"Mercury\" ] && [ \"$planet2\" = \"Jupiter\" ]; then \n    return $list\n \
    \ fi\n  if [ \"$planet1\" = \"Mercury\" ] && [ \"$planet2\" = \"Saturn\" ]; then\
    \ \n    return $list\n  fi\n  if [ \"$planet1\" = \"Mercury\" ] && [ \"$planet2\"\
    \ = \"Uranus\" ]; then \n    return $list\n  fi\n  if [ \"$planet1\" = \"Mercury\"\
    \ ] && [ \"$planet2\" = \"Neptune\" ]; then \n    return $list\n  fi\n  if [ \"\
    $planet1\" = \"Venus\" ] && [ \"$planet2\" = \"Mercury\" ]; then \n    return\
    \ $list\n  fi\n  if [ \"$planet1\" = \"Venus\" ] && [ \"$planet2\" = \"Earth\"\
    \ ]; then \n    return $list\n  fi\n  if [ \"$planet1\" = \"Venus\" ] && [ \"\
    $planet2\" = \"Mars\" ]; then \n    return $list\n  fi\n  if [ \"$planet1\" =\
    \ \"Venus\" ] && [ \"$planet2\" = \"Jupiter\" ]; then \n    return $list\n  fi\n\
    \  if [ \"$planet1\" = \"Venus\" ] && [ \"$planet2\" = \"Saturn\" ]; then \n \
    \   return $list\n  fi\n  if [ \"$planet1\" = \"Venus\" ] && [ \"$planet2\" =\
    \ \"Uranus\" ]; then \n    return $list\n  fi\n  if [ \"$planet1\" = \"Venus\"\
    \ ] && [ \"$planet2\" = \"Neptune\" ]; then \n    return $list\n  fi\n  if [ \"\
    $planet1\" = \"Earth\" ] && [ \"$planet2\" = \"Mercury\" ]; then \n    return\
    \ $list\n  fi\n  if [ \"$planet1\" = \"Earth\" ] && [ \"$planet2\" = \"Earth\"\
    \ ]; then \n    return $list\n  fi\n  if ", "  local planet1=${1%\"\"}\n  local\
    \ planet2=${2%\"\"}\n  local planet1orb=$(bf $planet1)\n  local planet2orb=$(bf\
    \ $planet2)\n  local tmp=${#planet1orb}\n  local tmp2=${#planet2orb}\n  local\
    \ len1=${#planet1orb}\n  local len2=${#planet2orb}\n  local i=0\n  local j=0\n\
    \  local a\n  local b\n  local c\n  local d\n  local min\n  local tmpt\n\n  tmpt=0\n\
    \n  while [ \"$i\" -lt \"$tmp\" ]; do\n    if [ \"$i\" -eq \"$tmp2\" ]; then\n\
    \      tmpt=$(( $tmpt + 1 ))\n    fi\n    i=$(( $i + 1 ))\n  done\n\n  min=$((\
    \ len2 ))\n\n  for i in $(seq $(( $tmpt ))); do\n    if [ \"$i\" -gt \"$min\"\
    \ ]; then\n      tmp=$(( $tmp - 1 ))\n    fi\n    tmpt=$(( $tmpt + 1 ))\n  done\n\
    \  for i in $(seq $(( $min ))); do\n    if [ \"$i\" -gt \"$len1\" ]; then\n  \
    \    min=$(( $len - 1 ))\n    fi\n    min=$(( $min - 1 ))\n  done\n  for i in\
    \ $(seq $(( $len1 ))); do\n    if [ \"$i\" -gt \"$len2\" ]; then\n      min=$((\
    \ $len - 1 ))\n    fi\n    min=$(( $min - 1 ))\n  done\n\n  if [ \"$len1\" -gt\
    \ \"$len2\" ]; then\n    while [ \"$i\" -gt \"$min\" ]; then\n      tmpt=$(( $tmpt\
    \ - 1 ))\n      i=$(( $i - 1 ))\n    done\n  fi\n\n  for i in $(seq $(( $min+1\
    \ ))); do\n    if [ \"$i\" -gt \"$len1\" ]; then\n      tmpt=$(( $tmpt - 1 ))\n\
    \    fi\n  done\n\n  for i in $(seq $(( $len1 ))); do\n    if [ \"$i\" -gt \"\
    $len2\" ]; then\n      tmpt=$(( $tmpt - 1 ))\n    fi\n  done\n\n  while [ \"$j\"\
    \ -lt \"$tmpt\" ]; do\n    i=$(( $i + 1 ))\n    j=$(( $j + 1 ))\n  done\n\n  if\
    \ [ \"$tmp\" -eq \"$tmp", "  local planet1=${1:-Mercury}\n  local planet2=${2:-Earth}\n\
    \  \n  # The function should return a list containing all planets \n  # whose\
    \ orbits are located between the orbit of planet1 \n  # and the orbit of planet2,\
    \ sorted by the proximity to the sun. \n  # The function should return an empty\
    \ list if planet1 or planet2 \n  # are not correct planet names. \n  # Examples\n\
    \  # >>> $(bf \"Jupiter\" \"Neptune\")\n  # ['\"Saturn\"', '\"Uranus\"']\n  #\
    \ >>> $(bf \"Earth\" \"Mercury\")\n  # \"Venus\"\n  # >>> $(bf \"Mercury\" \"\
    Uranus\")\n  # ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"\
    ']\n  \n  # The function should return an empty list if planet1 or planet2 \n\
    \  # are not correct planet names.\n  if [ -z \"$planet1\" ] || [ -z \"$planet2\"\
    \ ] ; then\n    return 1\n  fi\n  \n  # The function should return an empty list\
    \ if planet1 and/or \n  # planet2 do not have valid names. \n  if [[ $(echo $planet1\
    \ | grep \"Mercury\") ]] ; then\n    return 1\n  fi\n  \n  if [[ $(echo $planet1\
    \ | grep \"Neptune\") ]] ; then\n    return 1\n  fi\n  \n  if [[ $(echo $planet2\
    \ | grep \"Mercury\") ]] ; then\n    return 1\n  fi\n  \n  if [[ $(echo $planet2\
    \ | grep \"Neptune\") ]] ; then\n    return 1\n  fi\n  \n  # Now that we have\
    \ planet1, planet2 and their orbits, \n  # the function should compute the distance\
    \ between planet1 and \n  # planet2, sorted by proximity to the Sun, and return\
    \ the list.\n  # The function should return an empty list if planet1 and planet2\
    \ \n  # do not have valid names. \n  \n  # Planet names should consist only of\
    \ letters, \n  # digits, hyphens or underscores. The function should return \n\
    \  # an empty list if planet1 or planet2 do not have valid names.\n  if [[ $(echo\
    \ $planet1 | grep \"^[a-z][a-z0-9\\-_]*$\") ]] ; then\n    return 1\n  fi\n  \n\
    \  if [[ $(echo $planet2 | grep \"^[a-z][a-z0-9\\-", "  local planet1=$1\n  local\
    \ planet2=$2\n  \n  local result=\"\"\n  \n  if [[ ${planet1} == \"Mercury\" ]];\
    \ then\n    if [[ ${planet2} == \"Neptune\" ]]; then\n      result+=\"\\\"Saturn\\\
    \";\"\n    elif [[ ${planet2} == \"Uranus\" ]]; then\n      result+=\"\\\"Uranus\\\
    \";\"\n    elif [[ ${planet2} == \"Neptune\" ]]; then\n      result+=\"\\\"Venus\\\
    \";\"\n    elif [[ ${planet2} == \"Jupiter\" ]]; then\n      result+=\"\\\"Jupiter\\\
    \";\"\n    elif [[ ${planet2} == \"Saturn\" ]]; then\n      result+=\"\\\"Saturn\\\
    \";\"\n    elif [[ ${planet2} == \"Mars\" ]]; then\n      result+=\"\\\"Mars\\\
    \";\"\n    elif [[ ${planet2} == \"Earth\" ]]; then\n      result+=\"\\\"Earth\\\
    \";\"\n    elif [[ ${planet2} == \"Mercury\" ]]; then\n      result+=\"\\\"Mercury\\\
    \";\"\n    elif [[ ${planet2} == \"Venus\" ]]; then\n      result+=\"\\\"Venus\\\
    \";\"\n    elif [[ ${planet2} == \"Mars\" ]]; then\n      result+=\"\\\"Mars\\\
    \";\"\n    elif [[ ${planet2} == \"Jupiter\" ]]; then\n      result+=\"\\\"Jupiter\\\
    \";\"\n    elif [[ ${planet2} == \"Earth\" ]]; then\n      result+=\"\\\"Earth\\\
    \";\"\n    elif [[ ${planet2} == \"Mars\" ]]; then\n      result+=\"\\\"Mars\\\
    \";\"\n    elif [[ ${planet2} == \"Jupiter\" ]]; then\n      result+=\"\\\"Jupiter\\\
    \";\"\n    elif [[ ${planet2} == \"Saturn\" ]]; then\n      result+=\"\\\"Saturn\\\
    \";\"\n    elif [[ ${planet2} == \"Uranus\" ]]; then\n      result+=\"\\\"Uranus\\\
    \";\"\n    elif [[ ${planet2} == \"Neptune\" ]]; then\n      result+=\"\\\"Neptune\\\
    \";\"\n    elif [[ ${planet2} == \"Mercury\" ]]; then\n      result+=\"\\\"Mercury\\\
    \";\"\n    elif [[ ${planet2} == \"Venus\" ]]; then\n      result+=\"\\\"Venus\\\
    \";\"\n    elif [[ ${plan", "\tlocal i\n\tlocal arr\n\tlocal p1\n\tlocal p2\n\t\
    local sol\n\tlocal i_p1\n\tlocal i_p2\n\tlocal i_sun\n\tlocal k\n\tlocal j\n\t\
    local i\n\t\n\tp1=\"$1\"\n\tp2=\"$2\"\n\tsol=$(sso -l \"$p1\")\n\tif [ \"$sol\"\
    \ = \"[]\" ]; then\n\t\tarr=\"\"\n\telse\n\t\tarr=$(jq \".[] | .planets\" <<<\
    \ \"$sol\")\n\tfi\n\ti_p1=$(echo \"${arr}\" | jq -r \".[] | index($p1)\")\n\t\
    i_p2=$(echo \"${arr}\" | jq -r \".[] | index($p2)\")\n\ti_sun=$(echo \"${arr}\"\
    \ | jq -r \".[] | .sun\" | grep -o '\\\"[^\\\"]*')\n\t\n\ti_p1=$(echo \"${arr}\"\
    \ | jq -r \".[] | index($p1)\")\n\ti_p2=$(echo \"${arr}\" | jq -r \".[] | index($p2)\"\
    )\n\ti_sun=$(echo \"${arr}\" | jq -r \".[] | .sun\" | grep -o '\\\"[^\\\"]*')\n\
    \t\n\twhile [ \"$i_p1\" != -1 && \"$i_p2\" != -1 ]; do\n\t\tk=$((i_p1 + 1))\n\t\
    \tj=$((i_p2 + 1))\n\t\t\n\t\ti_p1=$(echo \"${arr}\" | jq -r \".[] | index($p1)\"\
    )\n\t\ti_p2=$(echo \"${arr}\" | jq -r \".[] | index($p2)\")\n\t\ti_sun=$(echo\
    \ \"${arr}\" | jq -r \".[] | .sun\" | grep -o '\\\"[^\\\"]*')\n\t\t\n\t\tarr=$(bf\
    \ \"$arr\" \"$p2\")\n\t\t\n\t\tif [ \"$i_p1\" != -1 ] && [ \"$i_p2\" != -1 ] &&\
    \ [ \"$i_sun\" != \"\" ]; then\n\t\t\tarr=$(echo \"${arr}\" | jq -r \".[] | .[${i_p1}..${i_p2}]\
    \ | .planets[]\" )\n\t\tfi\n\tdone\n\t\n\tarr=$(echo \"${arr}\" | jq -r \".[]\
    \ | .[${i_p1}..${i_p2}] | .planets[]\")\n\tarr=$(echo \"${arr}\" | jq -r \".[]\
    \ | .[] | .sun\" | ", "    local planet1=$1\n    local planet2=$2\n    local list=\"\
    \"\n    if [ \"$planet1\" == \"$planet2\" ] ; then\n        echo \"$planet1\"\n\
    \        exit 0\n    fi\n    if [ \"$planet1\" == \"\" ] ; then\n        echo\
    \ \"$planet2\"\n        exit 0\n    fi\n    if [ \"$planet2\" == \"\" ] ; then\n\
    \        echo \"$planet1\"\n        exit 0\n    fi\n    echo $(sa \"$planet1\"\
    \ \"$planet2\")\n    exit 0", "    local -r planet1=$1\n    local -r planet2=$2\n\
    \    # If the planets are correct, sort them by the distance to the Sun\n    if\
    \ [[ ${planet1} == \"${planet2}\" ]]; then\n        echo \"$planet1\"\n      \
    \  return $planet1\n    elif [[ \"$planet1\" == \"Earth\" || \"$planet1\" == \"\
    Venus\" ]]; then\n        local -r sun1=$(bf \"Sun\" \"Earth\")\n        local\
    \ -r sun2=$(bf \"$planet2\" \"Sun\")\n        if [[ \"$sun1\" == \"$sun2\" ]];\
    \ then\n            echo \"$planet1\"\n            return $planet1\n        fi\n\
    \        local -r earth1=$(bf \"$planet2\" \"Earth\")\n        local -r earth2=$(bf\
    \ \"$planet1\" \"Earth\")\n        if [[ \"$earth1\" == \"$earth2\" ]]; then\n\
    \            echo \"$planet1\"\n            return $planet1\n        fi\n    \
    \    local -r mercury1=$(bf \"$planet2\" \"Mercury\")\n        local -r mercury2=$(bf\
    \ \"$planet1\" \"Mercury\")\n        if [[ \"$mercury1\" == \"$mercury2\" ]];\
    \ then\n            echo \"$planet1\"\n            return $planet1\n        fi\n\
    \        local -r venus1=$(bf \"$planet2\" \"Venus\")\n        local -r venus2=$(bf\
    \ \"$planet1\" \"Venus\")\n        if [[ \"$venus1\" == \"$venus2\" ]]; then\n\
    \            echo \"$planet1\"\n            return $planet1\n        fi\n    \
    \    local -r mars1=$(bf \"$planet2\" \"Mars\")\n        local -r mars2=$(bf \"\
    $planet1\" \"Mars\")\n        if [[ \"$mars1\" == \"$mars2\" ]]; then\n      \
    \      echo \"$planet1\"\n            return $planet1\n        fi\n        local\
    \ -r jupiter1=$(bf \"$planet2\" \"Jupiter\")\n        local -r jupiter2=$(bf \"\
    $planet1\" \"Jupiter\")\n        if [[ \"$jupiter1\" == \"$jupiter2\" ]]; then\n\
    \            echo \"$planet1\"\n            return $planet1\n        fi\n    \
    \    local -r saturn1=$(bf \"$planet2\" \"Saturn\")\n        local -r saturn2=$(bf\
    \ \"$planet1\" \"Saturn\")\n        if [[ \"$saturn1\" == \"$saturn2\" ]]; then\n\
    \            echo \"$plan", "    planet1=\"$1\"\n    planet2=\"$2\"\n    \n  \
    \  if [[ \"$planet1\" == \"$planet2\" ]]; then\n        echo \"$planet1\"\n  \
    \      return\n    fi\n    \n    planets1=$(for planet in \"${planets[@]}\"; do\
    \ echo \"'$planet'\"; done | sort)\n    planets2=$(for planet in \"${planets[@]}\"\
    ; do echo \"'$planet'\"; done | sort)\n    \n    [[ \"$planets1\" != \"$planets2\"\
    \ ]] || return 1\n    \n    planets1=$(for planet in \"${planets[@]}\"; do echo\
    \ \"'$planet'\"; done | sort)\n    planets2=$(for planet in \"${planets[@]}\"\
    ; do echo \"'$planet'\"; done | sort)\n    \n    [[ \"$planets1\" != \"$planets2\"\
    \ ]] || return 1\n    \n    for planet in \"${planets[@]}\"; do\n        for planet1\
    \ in \"${planets[@]}\"; do\n            for planet2 in \"${planets[@]}\"; do\n\
    \                if [[ $planet == \"$planet1\" ]] && [[ $planet == \"$planet2\"\
    \ ]]; then\n                    break\n                elif [[ $planet == \"$planet1\"\
    \ ]] && [[ $planet != \"$planet2\" ]]; then\n                    continue\n  \
    \              elif [[ $planet != \"$planet1\" ]] && [[ $planet == \"$planet2\"\
    \ ]]; then\n                    continue\n                elif [[ $planet == \"\
    $planet1\" ]] && [[ $planet != \"$planet2\" ]]; then\n                    continue\n\
    \                elif [[ $planet == \"$planet2\" ]] && [[ $planet != \"$planet1\"\
    \ ]]; then\n                    continue\n                elif [[ $planet == \"\
    $planet1\" ]] && [[ $planet == \"$planet2\" ]]; then\n                    continue\n\
    \                fi\n                if [[ \"$planet\" == \"$planet1\" ]] && [[\
    \ \"$planet\" == \"$planet2\" ]]; then\n                    break\n          \
    \      elif [[ \"$planet\" == \"$planet1\" ]] && [[ \"$planet\" != \"$planet2\"\
    \ ]]; then\n                    continue\n                elif [[ \"$planet\"\
    \ != \"$planet1\" ]] && [[ \"$planet\" == \"$planet2\" ]]; then\n            \
    \        continue\n                elif [[ \"$planet\" == \"$planet1\" ]] && [[\
    \ \"$planet\" != \"$planet2\" ]]; then\n                    continue\n       \
    \         elif [[ \"$", "    local planet1 planet2\n    planet1=\"$1\"\n    planet2=\"\
    $2\"\n    if [ $planet1 = \"Mercury\" ] || [ $planet1 = \"Venus\" ] || [ $planet1\
    \ = \"Earth\" ] || [ $planet1 = \"Mars\" ] || [ $planet1 = \"Jupiter\" ] || [\
    \ $planet1 = \"Saturn\" ] || [ $planet1 = \"Uranus\" ] || [ $planet1 = \"Neptune\"\
    \ ]\n    then\n        echo \"$planet1,$planet2\"\n    else\n        echo \"$planet1,$planet2\"\
    \n    fi", "\tlocal planet1 planet2 \n\tplanet1=$1\n\tplanet2=$2\n\tif [ \"$planet1\"\
    \ == \"Earth\" ] || [ \"$planet1\" == \"Sun\" ]; then \n\t\techo \"Earth\"\n\t\
    elif [ \"$planet2\" == \"Earth\" ] || [ \"$planet2\" == \"Sun\" ]; then \n\t\t\
    echo \"Earth\"\n\telif [ \"$planet1\" == \"Mercury\" ] || [ \"$planet1\" == \"\
    Venus\" ] || [ \"$planet1\" == \"Mars\" ] || [ \"$planet1\" == \"Jupiter\" ] ||\
    \ [ \"$planet1\" == \"Saturn\" ] || [ \"$planet1\" == \"Uranus\" ] || [ \"$planet1\"\
    \ == \"Neptune\" ]; then \n\t\techo \"Mercury\"\n\telif [ \"$planet2\" == \"Mercury\"\
    \ ] || [ \"$planet2\" == \"Venus\" ] || [ \"$planet2\" == \"Mars\" ] || [ \"$planet2\"\
    \ == \"Jupiter\" ] || [ \"$planet2\" == \"Saturn\" ] || [ \"$planet2\" == \"Uranus\"\
    \ ] || [ \"$planet2\" == \"Neptune\" ]; then \n\t\techo \"Mercury\"\n\telif [\
    \ \"$planet1\" == \"Mars\" ] || [ \"$planet1\" == \"Jupiter\" ] || [ \"$planet1\"\
    \ == \"Saturn\" ] || [ \"$planet1\" == \"Uranus\" ] || [ \"$planet1\" == \"Neptune\"\
    \ ]; then \n\t\techo \"Mars\"\n\telif [ \"$planet2\" == \"Mars\" ] || [ \"$planet2\"\
    \ == \"Jupiter\" ] || [ \"$planet2\" == \"Saturn\" ] || [ \"$planet2\" == \"Uranus\"\
    \ ] || [ \"$planet2\" == \"Neptune\" ]; then \n\t\techo \"Mars\"\n\telif [ \"\
    $planet1\" == \"Jupiter\" ] || [ \"$planet1\" == \"Saturn\" ] || [ \"$planet1\"\
    \ == \"Uranus\" ] || [ \"$planet1\" == \"Neptune\" ]; then \n\t\techo \"Jupiter\"\
    \n\telif [ \"$planet2\" == \"Jupiter\" ] || [ \"$planet2\" == \"Saturn\" ] ||\
    \ [ \"$planet2\" == \"Uranus\" ] || [ \"$planet2\" == \"Neptune\" ]; then \n\t\
    \techo \"Jupiter\"\n\telif [ \"$planet1\" == \"Saturn\" ] || [ \"$planet1\" ==\
    \ \"Uranus\" ] || [ \"$planet1\" == \"Neptune\" ]; then \n\t\techo \"Saturn\"\n\
    \telif [ \"$planet2\" == \"Saturn\" ] || [ \"$planet2\" == \"Uranus\" ] || [ \"\
    $planet2\" == \"Neptune\" ]; then \n\t\techo \"Saturn\"", "    local planet1 planet2\n\
    \    planet1=$1\n    planet2=$2\n    local planets sun dist min max min2\n   \
    \ planets=\"\"\n    sun=$(./bin/sun.py)\n    if [ \"$sun\" == \"Sun\" ]; then\n\
    \        planets=\"$planet1\"\n    else\n        planet1=$sun\n        planet2=$sun\n\
    \    fi\n    for dist in $(echo \"$planet1 - $planet2\" | tr ' ' '\\n'); do\n\
    \        min2=$(echo \"$dist - $sun\" | bc)\n        min=$(echo \"$min2 %% $sun\"\
    \ | bc)\n        if [ \"$min\" -eq \"0\" ]; then\n            min=$sun\n     \
    \   elif [ \"$min\" -eq \"1\" ]; then\n            min=$sun-1\n        fi\n  \
    \      max=$(echo \"$dist + $sun\" | bc)\n        if [ \"$max\" -ge \"9\" ]; then\n\
    \            max=9\n        fi\n        if [ \"$max\" -le \"0\" ]; then\n    \
    \        max=$sun\n        fi\n        echo $max $min\n        planets=$planets\
    \ $min $max\n    done\n    echo \"$planets\"", "  local planet1=$1\n  local planet2=$2\n\
    \  # if both are empty\n  if [ -z \"$planet1\" ] && [ -z \"$planet2\" ]; then\
    \ \n    echo \"\"\n    return \n  else\n    echo \"${planet1}\" \"${planet2}\"\
    \n    echo \"${planet1}\" \"${planet2}\"\n    # if the first one isn't sun\n \
    \   if [ \"$planet1\" != \"Sun\" ]; then\n      echo \"${planet2}\" \"${planet1}\"\
    \n      # if the second one isn't sun\n      if [ \"$planet2\" != \"Sun\" ]; then\n\
    \        echo \"${planet1}\" \"${planet2}\"\n        echo \"${planet2}\" \"${planet1}\"\
    \n        # if the first one isn't sun\n        if [ \"$planet1\" != \"Sun\" ];\
    \ then\n          echo \"${planet1}\" \"${planet2}\"\n          echo \"${planet2}\"\
    \ \"${planet1}\"\n          # if the second one isn't sun\n          if [ \"$planet2\"\
    \ != \"Sun\" ]; then\n            echo \"${planet1}\" \"${planet2}\"\n       \
    \     echo \"${planet2}\" \"${planet1}\"\n            echo \"${planet1}\" \"${planet2}\"\
    \n          fi\n        fi\n      fi\n    fi\n  fi", "    # Your code here\n \
    \   declare -a planets=()\n    for ((i=1; i<=${#1}; i++)); do\n        if [[ $${1}\
    \ == ${1}${i} ]]; then\n            planets[${#planets[@]}]=${1}${i}\n       \
    \ fi\n    done\n    for ((j=1; j<=${#planets[@]}; j++)); do\n        planets[${j}]=${planets[${j}]/}\n\
    \    done\n    for ((k=1; k<${#planets[@]}; k++)); do\n        planets[${k}]=${planets[${k}]/}\n\
    \    done\n    for ((l=1; l<=${#planets[@]}; l++)); do\n        planets[${l}]=${planets[${l}]/}\n\
    \    done\n    for ((m=1; m<=${#planets[@]}; m++)); do\n        planets[${m}]=${planets[${m}]/}\n\
    \    done\n    for ((n=1; n<=${#planets[@]}; n++)); do\n        planets[${n}]=${planets[${n}]/}\n\
    \    done\n    for ((o=1; o<=${#planets[@]}; o++)); do\n        planets[${o}]=${planets[${o}]/}\n\
    \    done\n    for ((p=1; p<=${#planets[@]}; p++)); do\n        planets[${p}]=${planets[${p}]/}\n\
    \    done\n    for ((q=1; q<=${#planets[@]}; q++)); do\n        planets[${q}]=${planets[${q}]/}\n\
    \    done\n    for ((r=1; r<=${#planets[@]}; r++)); do\n        planets[${r}]=${planets[${r}]/}\n\
    \    done\n    for ((s=1; s<=${#planets[@]}; s++)); do\n        planets[${s}]=${planets[${s}]/}\n\
    \    done\n    for ((t=1; t<=${#planets[@]}; t++)); do\n        planets[${t}]=${planets[${t}]/}\n\
    \    done\n    for ((u=1; u<=${#planets[@", "    local planet1 planet2\n    if\
    \ [ $# != 2 ]; then\n        echo \"Usage: $0 planet1 planet2\"\n        exit\
    \ 1\n    fi\n    local planets=\"$(bf $1 $2 | sed 's/.$//')\"\n    if [ -z \"\
    $planets\" ]; then\n        echo \"no planets found\"\n    else\n        echo\
    \ \"$planets\"\n    fi", "    planet1=${1%\\\"*}\n    planet2=${2%\\\"*}\n   \
    \ planet1=${planet1//\\\"}\n    planet2=${planet2//\\\"}\n    if [ \"$planet1\"\
    \ == \"$planet2\" ] ; then\n\techo \"$planet1\"\n    else\n\techo \"\"\n    fi",
  "\ta=${1%?}\n\tb=${2%?}\n\tif [ \"$a\" != \"$b\" ]; then \n\t\techo 'Please input\
    \ a correct planet name'; \n\t\treturn 0\n\tfi\n\te=0\n\tc=$(python -c \"from\
    \ astropy import units as u; import astropy.coordinates as coord; a = coord.EarthLocation.of_site('${a}');\
    \ b = coord.EarthLocation.of_site('${b}'); print(a.separation(b).deg)\"|grep -v\
    \ grep|cut -d\" \" -f2)\n\twhile [ $c -gt 0 ]; do\n\t\techo -n ${a#*}\n\t\te=1\n\
    \t\tc=$(python -c \"from astropy import units as u; import astropy.coordinates\
    \ as coord; a = coord.EarthLocation.of_site('${a}'); b = coord.EarthLocation.of_site('${b}');\
    \ print(a.separation(b).deg)\"|grep -v grep|cut -d\" \" -f2)\n\tdone\n\tif [ $e\
    \ -eq 0 ]; then \n\t\techo \"Please input a correct planet name\"; \n\t\treturn\
    \ 0\n\tfi\n\techo \"$a\"", "\t[ \"$1\" = \"$2\" ] || return \n\tlet a=$2-1\n\t\
    let b=$1-1\n\tlet c=$1\n\tlet d=$2\n\tlet e=$(a-b)\n\tlet f=$((c-d))\n\tlet g=$((e-f))\n\
    \tlet h=$((a-b))\n\tlet i=$((b-a))\n\tlet j=$((c-d))\n\tlet k=((d+e))\n\tlet l=$((e+f))\n\
    \tlet m=$((f+g))\n\tlet n=$((g+h))\n\tlet o=$((h+i))\n\tlet p=$((i+j))\n\tlet\
    \ q=$((j+k))\n\tlet r=$((k+l))\n\tlet s=$((l+m))\n\tlet t=$((m+n))\n\tlet u=$((n+o))\n\
    \tlet v=$((o+p))\n\tlet w=$((p+q))\n\tlet x=$((q+r))\n\tlet y=$((r+s))\n\tlet\
    \ z=$((s+t))\n\tlet aa=$((t+u))\n\tlet bb=$((u+v))\n\tlet cc=$((v+w))\n\tlet dd=$((w+x))\
    \ \n\tlet ee=$((x+y))\n\tlet ff=$((y+z))\n\tlet gg=$((z+aa))\n\tlet hh=$((aa+bb))\n\
    \tlet ii=$((bb+cc))\n\tlet jj=$((cc+dd))\n\tlet kk=$((dd+ee))\n\tlet ll=$((ee+ff))\n\
    \tlet mm=$((ff+gg))\n\tlet nn=$((gg+hh))\n\tlet oo=$((hh+ii))\n\tlet pp=$((ii+jj))\n\
    \tlet qq=$((jj+kk))\n\tlet rr=$((kk+ll))\n\tlet ss=$((ll+mm))\n\tlet tt=$((mm+nn))\n\
    \tlet uu=$((nn+oo))\n\tlet vv=$((oo+pp))\n\tlet ww=$((pp+qq))\n\tlet xx=$((qq+rr))\n\
    \tlet yy=$((rr+ss))\n\tlet zz=$((ss+tt))\n\tlet aaa=$((tt+uu))\n\tlet bbb=$((uu+vv))\n\
    \tlet ccc", "\t[ -z \"$1\" ] && return 1\n\t[ -z \"$2\" ] && return 1\n\tlocal\
    \ planet1 planet2 \n\t[ \"$1\" = \"Earth\" ] && planet1=\"Mercury\" || planet1=\"\
    $1\"\n\t[ \"$2\" = \"Earth\" ] && planet2=\"Mercury\" || planet2=\"$2\"\n\t[ \"\
    $planet1\" = \"$planet2\" ] && return 1\n\t[ \"$planet1\" = \"Mars\" ] && planet2=\"\
    Jupiter\" || planet2=\"$planet2\"\n\t[ \"$planet2\" = \"Mars\" ] && planet1=\"\
    Jupiter\" || planet1=\"$planet1\"\n\t[ \"$planet1\" = \"Venus\" ] && planet2=\"\
    Earth\" || planet2=\"$planet2\"\n\t[ \"$planet2\" = \"Venus\" ] && planet1=\"\
    Earth\" || planet1=\"$planet1\"\n\t[ \"$planet1\" = \"Mercury\" ] && planet2=\"\
    Saturn\" || planet2=\"$planet2\"\n\t[ \"$planet2\" = \"Mercury\" ] && planet1=\"\
    Saturn\" || planet1=\"$planet1\"\n\t[ \"$planet1\" = \"Jupiter\" ] && planet2=\"\
    Uranus\" || planet2=\"$planet2\"\n\t[ \"$planet2\" = \"Jupiter\" ] && planet1=\"\
    Uranus\" || planet1=\"$planet1\"\n\t[ \"$planet1\" = \"Saturn\" ] && planet2=\"\
    Uranus\" || planet2=\"$planet2\"\n\t[ \"$planet2\" = \"Saturn\" ] && planet1=\"\
    Uranus\" || planet1=\"$planet1\"\n\t[ \"$planet1\" = \"Uranus\" ] && planet2=\"\
    Neptune\" || planet2=\"$planet2\"\n\t[ \"$planet2\" = \"Uranus\" ] && planet1=\"\
    Neptune\" || planet1=\"$planet1\"\n\t[ \"$planet1\" = \"Neptune\" ] && planet2=\"\
    Mars\" || planet2=\"$planet2\"\n\t[ \"$planet2\" = \"Neptune\" ] && planet1=\"\
    Mars\" || planet1=\"$planet1\"\n\t[ \"$planet1\" = \"Mars\" ] && planet2=\"Jupiter\"\
    \ || planet2=\"$planet2\"\n\t[ \"$planet2\" = \"Mars\" ] && planet1=\"Jupiter\"\
    \ || planet1=\"$planet1\"\n\t[ \"$planet1\" = \"Jupiter\" ] && ", "    local planet1=$1\n\
    \    local planet2=$2\n    local out=\"\n$planet1\n$planet2\n\"\n    local orbit1\
    \ orbit2 orb\n    orbit1=($(echo \"$out\" | grep \"$planet1\" | cut -d' ' -f 2))\n\
    \    orbit2=($(echo \"$out\" | grep \"$planet2\" | cut -d' ' -f 2))\n    for orb\
    \ in \"${orbit1[@]}\"; do\n        distance=$(echo \"$out\" | grep \"$orb\" |\
    \ cut -d' ' -f 3)\n        if [ -z \"$distance\" ]; then\n            distance=$((100*(($(echo\
    \ \"$out\" | grep \"$orb\" | cut -d' ' -f 3))/(($orbit2[1]-$orbit1[1])))))\n \
    \       fi\n        echo $orb $distance\n    done", "  local planet1 planet2\n\
    \  IFS=\" \" read -r -a arr <<< \"$2\"\n  for planet in \"${arr[@]}\"; do\n  \
    \  if [ \"$planet\" == \"$1\" ]; then \n      break\n    fi\n  done\n  if [ \"\
    $planet\" == \"$2\" ]; then \n    return 0\n  fi\n  local planet_a=\"$(echo $planet\
    \ | tr '[:upper:]' '[:lower:]')\"\n  local planet_b=\"$(echo $planet | tr '[:upper:]'\
    \ '[:lower:]')\"\n  local planet_c=\"$(echo $planet | tr '[:upper:]' '[:lower:]')\"\
    \n  local planet_d=\"$(echo $planet | tr '[:upper:]' '[:lower:]')\"\n  local planet_e=\"\
    $(echo $planet | tr '[:upper:]' '[:lower:]')\"\n  local planet_f=\"$(echo $planet\
    \ | tr '[:upper:]' '[:lower:]')\"\n  local planet_g=\"$(echo $planet | tr '[:upper:]'\
    \ '[:lower:]')\"\n  local planet_h=\"$(echo $planet | tr '[:upper:]' '[:lower:]')\"\
    \n  local planet_i=\"$(echo $planet | tr '[:upper:]' '[:lower:]')\"\n  local planet_j=\"\
    $(echo $planet | tr '[:upper:]' '[:lower:]')\"\n  local planet_k=\"$(echo $planet\
    \ | tr '[:upper:]' '[:lower:]')\"\n  local planet_l=\"$(echo $planet | tr '[:upper:]'\
    \ '[:lower:]')\"\n  local planet_m=\"$(echo $planet | tr '[:upper:]' '[:lower:]')\"\
    \n  local planet_n=\"$(echo $planet | tr '[:upper:]' '[:lower:]')\"\n  local planet_o=\"\
    $(echo $planet | tr '[:upper:]' '[:lower:]')\"\n  local planet_p=\"$(echo $planet\
    \ | tr '[:upper:]' '[:lower:]')\"\n  local planet_q=\"$(echo $planet | tr '[:upper:]'\
    \ '[:lower:]')\"\n  local planet_r=\"$(echo $planet | tr '[:upper:]' '[:lower:]')\"\
    \n  local planet_s=\"$(echo $planet | tr '[:upper:]' '[:lower:]')\"\n  ", "  \
    \  if [ \"$1\" = \"Mercury\" -o \"$1\" = \"Venus\" -o \"$1\" = \"Earth\" -o \"\
    $1\" = \"Mars\" \\\n          -o \"$1\" = \"Jupiter\" -o \"$1\" = \"Saturn\" -o\
    \ \"$1\" = \"Uranus\" -o \"$1\" = \"Neptune\" ]; then \n        echo \"$2\"\n\
    \    elif [ \"$1\" = \"Jupiter\" -o \"$1\" = \"Neptune\" ]; then \n        echo\
    \ \"Earth\"\n    elif [ \"$1\" = \"Venus\" -o \"$1\" = \"Earth\" -o \"$1\" = \"\
    Mars\" -o \"$1\" = \"Jupiter\" -o \"$1\" = \"Saturn\" -o \"$1\" = \"Uranus\" -o\
    \ \"$1\" = \"Neptune\" ]; then \n        echo \"Mars\"\n    elif [ \"$1\" = \"\
    Earth\" -o \"$1\" = \"Mars\" -o \"$1\" = \"Jupiter\" -o \"$1\" = \"Saturn\" -o\
    \ \"$1\" = \"Uranus\" -o \"$1\" = \"Neptune\" ]; then \n        echo \"Jupiter\"\
    \n    elif [ \"$1\" = \"Mars\" -o \"$1\" = \"Jupiter\" -o \"$1\" = \"Saturn\"\
    \ -o \"$1\" = \"Uranus\" -o \"$1\" = \"Neptune\" ]; then \n        echo \"Saturn\"\
    \n    elif [ \"$1\" = \"Jupiter\" -o \"$1\" = \"Saturn\" -o \"$1\" = \"Uranus\"\
    \ -o \"$1\" = \"Neptune\" ]; then \n        echo \"Uranus\"\n    elif [ \"$1\"\
    \ = \"Saturn\" -o \"$1\" = \"Uranus\" -o \"$1\" = \"Neptune\" ]; then \n     \
    \   echo \"Neptune\"\n    else \n        echo \"Error\"\n    fi", "    local planet1\
    \ planet2\n    planet1=\"$1\"\n    planet2=\"$2\"\n    local planetlist\n    local\
    \ orbit1\n    local orbit2\n    local dist\n    planetlist=\"$(gp \"$planet1\"\
    \ \"$planet2\")\"\n    if [ \"$?\" -ne \"0\" ]; then\n\techo \"Error: invalid\
    \ planet names\"\n\treturn 1\n    fi\n    for p in $planetlist; do\n        orbit1=\"\
    $(gp \"$p\" \"$planet2\")\"\n        orbit2=\"$(gp \"$planet2\" \"$p\")\"\n  \
    \      dist=\"$(bf $orbit1 $orbit2)\"\n        echo \"$p $dist\"\n    done", " \
    \   local planet1=$1\n    local planet2=$2\n    local distance=$(grep \"^$PLANET1\\\
    s\" <<< $orbit_lines)\n    local distance2=$(grep \"^$PLANET2\\s\" <<< $orbit_lines)\n\
    \    local distance1=$(grep \"^$PLANET1\\s\" <<< $distance)\n    local distance2=$(grep\
    \ \"^$PLANET2\\s\" <<< $distance)\n    if [[ -z $distance1 ]]; then\n        echo\
    \ \"$planet1 not present\"\n        return \n    elif [[ -z $distance2 ]]; then\n\
    \        echo \"$planet2 not present\"\n        return \n    elif [[ $distance1\
    \ > $distance2 ]]; then\n        echo \"$planet1 orbits the sun before $planet2\"\
    \n        return\n    elif [[ $distance1 < $distance2 ]]; then\n        echo \"\
    $planet2 orbits the sun before $planet1\"\n        return\n    else\n        echo\
    \ \"$planet1 orbits the sun within $distance1 and $planet2 within $distance2\"\
    \n        grep \"^$PLANET2\\s\" <<< $distance\n        grep \"^$PLANET1\\s\" <<<\
    \ $distance\n        echo $(grep \"^$PLANET1\\s\" <<< $distance)\n        echo\
    \ $(grep \"^$PLANET2\\s\" <<< $distance)\n        echo $(grep \"^$PLANET1\\s\"\
    \ <<< $distance2)\n        echo $(grep \"^$PLANET2\\s\" <<< $distance2)\n    \
    \    echo $(grep \"^$PLANET1\\s\" <<< $distance)\n        echo $(grep \"^$PLANET2\\\
    s\" <<< $distance)\n        echo $(grep \"^$PLANET1\\s\" <<< $distance2)\n   \
    \     echo $(grep \"^$PLANET2\\s\" <<< $distance2)\n        local sorted=$(grep\
    \ \"^$PLANET2\\s\" <<< $distance) | \\\n            grep \"^$PLANET1\\s\" <<<\
    \ $distance | \\\n            grep \"^$PLANET1\\s\" <<< $distance2\n        echo\
    \ $(grep \"^$PLANET1\\s\" <<< $distance2)\n        echo $(grep \"^$PLANET2\\s\"\
    \ <<< $distance2)\n        echo $(grep \"^$PLANET1\\s\" <<< $distance)\n     \
    \   echo $(grep \"^$PLANET2\\s", "    local p1 p2 \n    [[ \"$1\" ]] || return\
    \ 1\n    [[ \"$2\" ]] || return 1\n    p1=\"\\\"${1}\\\"\"\n    p2=\"\\\"${2}\\\
    \"\"\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local o1\n    local o2\n    local p1s\n    local p2s\n \
    \   local p\n    [[ \"$p1\" =~ [^A-Za-z] ]] || return 1\n    [[ \"$p2\" =~ [^A-Za-z]\
    \ ]] || return 1\n    p1s=\"$(echo \"$p1\" | sed 's/\"//g')\"\n    p2s=\"$(echo\
    \ \"$p2\" | sed 's/\"//g')\"\n    [[ \"$p1\" == \"$p2\" ]] || return 1\n    [[\
    \ \"$p1\" == \"Mercury\" ]] || return 1\n    [[ \"$p2\" == \"Mercury\" ]] || return\
    \ 1\n    [[ \"$p1\" == \"Venus\" ]] || return 1\n    [[ \"$p2\" == \"Venus\" ]]\
    \ || return 1\n    [[ \"$p1\" == \"Earth\" ]] || return 1\n    [[ \"$p2\" == \"\
    Earth\" ]] || return 1\n    [[ \"$p1\" == \"Mars\" ]] || return 1\n    [[ \"$p2\"\
    \ == \"Mars\" ]] || return 1\n    [[ \"$p1\" == \"Jupiter\" ]] || return 1\n \
    \   [[ \"$p2\" == \"Jupiter\" ]] || return 1\n    [[ \"$p1\" == \"Saturn\" ]]\
    \ || return 1\n    [[ \"$p2\" == \"Saturn\" ]] || return 1\n    [[ \"$p1\" ==\
    \ \"Uranus\" ]] || return 1\n    [[ \"$p2\" == \"Uranus\" ]] || return 1\n   \
    \ [[ \"$p1\" == \"Neptune\" ]] || return 1\n    [[ \"$p2\" == \"Neptune\" ]] ||\
    \ return 1\n    [[ \"$p1\" == \"Jupiter\" ]] || return 1\n    [[ \"$p2\" == \"\
    Jupiter\" ]] || return 1\n    [[ \"$p1\" == \"Mars\" ]] || return 1\n    [[ \"\
    $p2\" == \"Mars\" ]] || return 1\n    [[ \"$p1\" == \"Jupiter\" ]] || return 1\n\
    \    [[ \"$p2\" == \"Jupiter\" ]] || return 1\n    [[ \"$p1\" == \"Venus\" ]]\
    \ || return 1\n    [[ \"$p2\" == \"Venus\" ]] || return 1\n    [[ \"$p1\" == \"\
    Earth\" ]] || return 1\n    [[ \"$p2", "    # Your code here\n    local planet1\
    \ planet2\n    planet1=$1\n    planet2=$2\n    \n    local planets\n    planets=$(echo\
    \ $planet1 $planet2 | tr \" \" \"\\n\" | sort -n -k 2 | tr \" \" \"\\n\" | tr\
    \ -s \" \")\n    \n    if [[ $? -eq 0 ]]; then\n        echo \"$planets\"\n  \
    \  else\n        echo \"$(echo $planet1 $planet2 | tr \" \" \"\\n\" | sort -n\
    \ -k 2 | tr \" \" \"\\n\" | tr -s \" \")\"\n    fi", "    local a b c d e f g\
    \ h i j k l m n o p q r s t u v w x y z\n    local p1 p2 i1 i2\n    local plist\n\
    \    p1=$1\n    p2=$2\n    echo $p1 $p2 $plist\n    # p1 & p2 are the planet names\n\
    \    plist=\"$plist\"'\"$p1\"' \"$p2\"'\"$p2\"'\n    echo plist $plist\n    \n\
    \    \n    # Convert strings to integers\n    i1=${#p1}\n    i2=${#p2}\n\n   \
    \ # Compare the planet names as integers\n    if [ \"$i1\" -gt \"$i2\" ]; then\n\
    \        plist=\"$plist\" \"'\"$p2\"'\"$p2\"\n    else\n        plist=\"$plist\"\
    \ \"'\"$p1\"'\"\"$p1\"\n    fi\n    echo plist $plist\n\n    # Convert the list\
    \ of strings to a list of integers\n    plist=\"$(pset $plist | pset)\"\n    echo\
    \ plist $plist\n\n    # Sort the list by the distance between planet centres\n\
    \    plist=\"$(pset $plist | psort -n | pset)\"\n    echo plist $plist\n\n   \
    \ # Convert back to a list of strings\n    plist=\"$(pset $plist | pset)\"\n \
    \   echo plist $plist\n\n    # Remove spaces from strings\n    plist=\"$(pset\
    \ $plist | pset)\" \n    echo plist $plist\n\n    # Convert the list of strings\
    \ to a list of integers\n    plist=\"$(pset $plist | pset)\"\n    echo plist $plist\n\
    \n    # Sort the list by the distance between planet centres\n    plist=\"$(pset\
    \ $plist | psort -n | pset)\"\n    echo plist $plist\n\n    # Convert back to\
    \ a list of strings\n    plist=\"$(pset $plist | pset)\"\n    echo plist $plist\n\
    \n    # Remove spaces from strings\n    plist=\"$(pset $plist | pset)\" \n   \
    \ echo plist $plist\n\n    # Convert the list of strings to a list of integers\n\
    \    plist=\"$(pset $plist | pset)\"\n    echo plist $plist\n\n    # Sort the\
    \ list by the distance between planet centres\n    plist=\"$(pset $plist | psort\
    \ -n | pset)\"\n    echo plist $plist\n\n    # Convert back to a list of strings\n\
    \    plist=\"$(p", "  planet1=$1\n  planet2=$2\n  \n  if [[ $planet1 == Mercury\
    \ && $planet2 == Neptune ]]; then\n    local planets1=$(echo $planet1 |cut -d'\
    \ ' -f 2 | tr [A-Z] [A-Z][a-z])\n    local planets2=$(echo $planet2 |cut -d' '\
    \ -f 2 | tr [A-Z] [A-Z][a-z])\n    \n    local planets1=(${planets1[*]})\n   \
    \ local planets2=(${planets2[*]})\n    \n    for i in \"${!planets1[@]}\"; do\n\
    \      if [[ \"${planets1[$i]}\" = \"Saturn\" ]]; then\n        planets1[$i]=Mercury\n\
    \      fi\n    done\n    for i in \"${!planets2[@]}\"; do\n      if [[ \"${planets2[$i]}\"\
    \ = \"Uranus\" ]]; then\n        planets2[$i]=Mercury\n      fi\n    done\n  \
    \  \n    local planets=()\n    for planet in \"${planets1[@]}\"; do\n      local\
    \ p1=$(echo $planet |cut -d' ' -f 2 | tr [A-Z] [A-Z][a-z])\n      local p2=$(echo\
    \ $planet |cut -d' ' -f 3 | tr [A-Z] [A-Z][a-z])\n      \n      if [[ \"${planets1[$i]}\"\
    \ = \"${planets2[$i]}\" ]]; then\n        planets+=($planet)\n      fi\n    done\n\
    \    echo \"${planets[*]}\"\n  else\n    echo \"$2\"\n  fi", "\tlocal i\n\tlocal\
    \ planet1 planet2\n\tlocal lst \n\tplanet1=$1\n\tplanet2=$2\n\tprintf -v lst \"\
    %s\" '['\n\t[[ \"$planet1\" == \"Mercury\" ]]||return\n\t[[ \"$planet2\" == \"\
    Mercury\" ]]||return\n\tfor (( i = 0; i < 9; i++ )); do\n\t\tif [[ \"$(( $i +\
    \ 1 ))\" -le \"$i\" && \"$(( $i + 1 ))\" -le \"9\" && \"$(( $i + 1 ))\" -gt \"\
    0\" ]]; then\n\t\t\tlocal tmp\n\t\t\tlocal tmp2 \n\t\t\ttmp=`echo $(( $i + 1 ))`\n\
    \t\t\ttmp2=`echo $(( $i + 1 ))`\n\t\t\tif [[ \"$tmp\" -le \"$i\" && \"$tmp\" -le\
    \ \"9\" ]]; then\n\t\t\t\tif [[ \"$planet1\" == \"$(( i + 1 ))\" && \"$planet2\"\
    \ == \"$(( i + 2 ))\" ]]; then\n\t\t\t\t\tprintf -v tmp2 \"%s\" \"$tmp2\"\n\t\t\
    \t\t\tprintf -v lst \"%s%s%s\" \"$lst\" \"$(( i + 2 ))\" \"$tmp2\"\n\t\t\t\telif\
    \ [[ \"$planet2\" == \"$(( i + 1 ))\" && \"$planet1\" == \"$(( i + 2 ))\" ]];\
    \ then\n\t\t\t\t\tprintf -v tmp2 \"%s\" \"$tmp2\"\n\t\t\t\t\tprintf -v lst \"\
    %s%s%s\" \"$lst\" \"$(( i + 2 ))\" \"$tmp2\"\n\t\t\t\telif [[ \"$planet1\" ==\
    \ \"$(( i + 1 ))\" && \"$planet2\" == \"$tmp\" ]]; then\n\t\t\t\t\tprintf -v tmp2\
    \ \"%s\" \"$tmp2\"\n\t\t\t\t\tprintf -v lst \"%s%s%s\" \"$lst\" \"$tmp\" \"$((\
    \ i + 1 ))\"\n\t\t\t\telif [[ \"$planet2\" == \"$(( i + 1 ))\" && \"$planet1\"\
    \ == \"$tmp\" ]]; then\n\t\t\t\t\tprintf -v tmp2 \"%s\" \"$tmp2\"\n\t\t\t\t\t\
    printf -v lst \"%s%s%s\" \"$lst\" \"$tmp\" \"$(( i + 1 ))\"\n\t\t\t\telif [[ \"\
    $(( $i + 1 ))\" -le \"9\" && \"$(( $i + 1 ))\" -gt \"0\" ]]; then\n\t\t\t\t\t\
    printf -v tmp2 \"%s\" \"$tmp2\"\n\t\t\t\t\tprintf -v lst \"%s%s%s\" \"$lst\" \"\
    $(( i + 2 ))\" \"$tmp2\"\n\t\t\t\tfi\n\t\t\telif [[ \"$tmp\" -le \"9\" && \"$tmp\"\
    \ -le \"8", "\tplanet1=$(echo $1 | awk '{print tolower($0)}')\n\tplanet2=$(echo\
    \ $2 | awk '{print tolower($0)}')\n\n\tif [ \"$(echo $PLANETS[$planet1])\" ==\
    \ \"\" ]\n\tthen\n\t\techo \"$planet1 not found in planets.list file\"\n\t\texit\
    \ 1\n\tfi\n\n\tif [ \"$(echo $PLANETS[$planet2])\" == \"\" ]\n\tthen\n\t\techo\
    \ \"$planet2 not found in planets.list file\"\n\t\texit 1\n\tfi\n\n\tplanet1orbit=$(echo\
    \ $PLANETS[$planet1] | awk '{print $6}')\n\tplanet2orbit=$(echo $PLANETS[$planet2]\
    \ | awk '{print $6}')\n\n\tplanet1orbitdate=$(echo $PLANETS[$planet1] | awk '{print\
    \ $5}')\n\tplanet2orbitdate=$(echo $PLANETS[$planet2] | awk '{print $5}')\n\n\t\
    planet1orbitorbit=$(echo $PLANETS[$planet1] | awk '{print $3}')\n\tplanet2orbitorbit=$(echo\
    \ $PLANETS[$planet2] | awk '{print $3}')\n\n\tplanet1orbitorbityear=$(echo $PLANETS[$planet1]\
    \ | awk '{print $4}')\n\tplanet2orbitorbityear=$(echo $PLANETS[$planet2] | awk\
    \ '{print $4}')\n\n\tplanet1orbitorbitmonth=$(echo $PLANETS[$planet1] | awk '{print\
    \ $7}')\n\tplanet2orbitorbitmonth=$(echo $PLANETS[$planet2] | awk '{print $7}')\n\
    \n\tplanet1orbitorbitday=$(echo $PLANETS[$planet1] | awk '{print $2}')\n\tplanet2orbitorbitday=$(echo\
    \ $PLANETS[$planet2] | awk '{print $2}')\n\n\tplanet1orbitorbitorbitsecond=$(echo\
    \ $PLANETS[$planet1] | awk '{print $8}')\n\tplanet2orbitorbitorbitsecond=$(echo\
    \ $PLANETS[$planet2] | awk '{print $8}')\n\n\tplanet1orbitorbitorbitsecondyear=$(echo\
    \ $PLANETS[$planet1] | awk '{print $9}')\n\tplanet2orbit", "\techo -n \"$1...\"\
    \n\techo \"$2\" | tr \" \" \"\\n\"\n\techo \"$1\" | tr \" \" \"\\n\"\n\techo \"\
    $1\" | tr \" \" \"\\n\" | sort | uniq | grep \"^$1\" >> /tmp/$$\n\tmv /tmp/$$\
    \ /tmp/$$.bak\n\techo \"$2\" | tr \" \" \"\\n\"\n\techo \"$1\" | tr \" \" \"\\\
    n\"\n\techo \"$1\" | tr \" \" \"\\n\" | sort | uniq | grep \"^$1\" >> /tmp/$$\n\
    \tmv /tmp/$$ /tmp/$$.bak\n\techo \"$3\" | tr \" \" \"\\n\"\n\techo \"$1\" | tr\
    \ \" \" \"\\n\"\n\techo \"$1\" | tr \" \" \"\\n\" | sort | uniq | grep \"^$1\"\
    \ >> /tmp/$$\n\tmv /tmp/$$ /tmp/$$.bak\n\techo \"$4\" | tr \" \" \"\\n\"\n\techo\
    \ \"$1\" | tr \" \" \"\\n\"\n\techo \"$1\" | tr \" \" \"\\n\" | sort | uniq |\
    \ grep \"^$1\" >> /tmp/$$\n\tmv /tmp/$$ /tmp/$$.bak\n\techo \"$5\" | tr \" \"\
    \ \"\\n\"\n\techo \"$1\" | tr \" \" \"\\n\"\n\techo \"$1\" | tr \" \" \"\\n\"\
    \ | sort | uniq | grep \"^$1\" >> /tmp/$$\n\tmv /tmp/$$ /tmp/$$.bak\n\techo \"\
    $6\" | tr \" \" \"\\n\"\n\techo \"$1\" | tr \" \" \"\\n\"\n\techo \"$1\" | tr\
    \ \" \" \"\\n\" | sort | uniq | grep \"^$1\" >> /tmp/$$\n\tmv /tmp/$$ /tmp/$$.bak\n\
    \techo \"$7\" | tr \" \" \"\\n\"\n\techo \"$1\" | tr \" \" \"\\n\"\n\techo \"\
    $1\" | tr \" \" \"\\n\" | sort | uniq | grep \"^$1\" >> /tmp/$$\n\tmv /tmp/$$\
    \ /tmp/$$.bak\n\techo \"$8\" | tr \" \" \"\\n\"\n\techo \"$1\" | tr \" \" \"\\\
    n\"\n\techo \"$1\" | tr \" \" \"\\n\" | sort | uniq | grep \"^$1\" >> /tmp/$$\n\
    \tmv /tmp/$$ /tmp/$$.bak\n\trm /tmp/$$.bak\n\techo \"$2\" | tr \" \" \"\\n\"\n\
    \techo \"$1\" | tr \" \" \"\\n\"\n\techo \"$1\" | tr \" \" \"\\n\" | sort | uniq\
    \ | grep \"^$1\" >> /tmp/$$\n\tmv /tmp/$$ /tmp/$$.bak\n\t", "    local planet1=\"\
    $1\";\n    local planet2=\"$2\";\n    local result=\"\";\n    if [ -z \"$planet1\"\
    \ ] || [ -z \"$planet2\" ] || [ \"$planet1\" == \"$planet2\" ]; then\n\tresult=\"\
    []\";\n\treturn $result;\n    fi\n    local sun_orbit=$(python -c 'from orbit\
    \ import Orbit; Orbit().at(\"Sun\").orbitorbit(\"Earth\").orbitorbit(\"Mars\"\
    ).orbitorbit(\"Jupiter\").orbitorbit(\"Saturn\").orbitorbitorbit(\"Uranus\").orbitorbit(\"\
    Neptune\")');\n    local planet1_orbit=$(python -c 'from orbit import Orbit; Orbit().at(\"\
    $1\").orbitorbit(\"Earth\").orbitorbit(\"Mars\").orbitorbit(\"Jupiter\").orbitorbit(\"\
    Saturn\").orbitorbit(\"Uranus\").orbitorbit(\"Neptune\")');\n    local planet2_orbit=$(python\
    \ -c 'from orbit import Orbit; Orbit().at(\"$2\").orbitorbit(\"Earth\").orbitorbit(\"\
    Mars\").orbit(\"Jupiter\").orbitorbit(\"Saturn\").orbitorbit(\"Uranus\").orbitorbit(\"\
    Neptune\")');\n    for ((i = 0; i < ${#planet1_orbit[@]}; i++)); do\n\tlocal planet1_name=\"\
    ${planet1_orbit[$i]}\";\n\tlocal planet2_name=\"${planet2_orbit[$i]}\";\n\tlocal\
    \ planet1_dist=$(python -c 'from math import degrees; from math import radians;\
    \ from math import sqrt; from orbit import Orbit; Earth = Orbit().at(\"Earth\"\
    ); Earth = Earth.topos(degrees(${sun_orbit[${planet1_name}]}), radians(${sun_orbit[${planet2_name}]}));\
    \ Earth.orbitorbit(\"Mars\").distance()');\n\tlocal planet2_dist=$(python -c 'from\
    \ math import degrees; from math import radians; from math import sqrt; from orbit\
    \ import Orbit; Earth = Orbit().at(\"Earth\"); Earth = Earth.topos(degrees(${sun_orbit[${planet2_name}]}),\
    \ radians(${sun_orbit[${planet1_name}]})); Earth.orbitorbit(\"Mars\").distance()');\n\
    \tlocal planet1_lat=$(python -c 'from math import degrees; from math import radians;\
    \ from math import sqrt; from orbit import Orbit; Earth = Orbit().at(\"Earth\"\
    ); Earth = Earth.topos(degrees(${sun_or", "    local planet1 planet2 \n    planet1=\"\
    $(echo \"$1\" | cut -d' ' -f1)\"\n    planet2=\"$(echo \"$2\" | cut -d' ' -f1)\"\
    \n    if [[ \"$planet1\" = \"$planet2\" ]]; then\n\techo \"\"\n    else\n\techo\
    \ $(\n\t    sort -z |\n\t    awk '\n\t\tBEGIN {\n\t\t    planets=$planet1;\n\t\
    \t    for(i=2; i<=8; i++) {\n\t\t\tif ($1 == \"'$planets'\") {\n\t\t\t    planets=$planet2;\n\
    \t\t\t}\n\t\t\tplanets=planets \", \";\n\t\t    }\n\t\t}\n\t\tEND{\n\t\t    print\
    \ planets;\n\t\t}'\n\t    )\n    fi", "  local planet1=$1\n  local planet2=$2\n\
    \  if [ \"${planet1}\" = \"${planet2}\" ]; then\n    return \"\"\n  fi\n  local\
    \ planets=()\n  if [ \"$planet1\" = \"Mercury\" ]; then\n    for k in $(seq 1\
    \ $((2*${#planet2}+1)-2)); do \n      planets+=($(seq -f '%02x' $((2*${#planet2}+1)-$k))\
    \ $((2*${#planet2}+1+$k)))\n    done\n  elif [ \"$planet1\" = \"Venus\" ]; then\n\
    \    for k in $(seq 1 $((3*${#planet2}+1)-2)); do \n      planets+=($(seq -f '%02x'\
    \ $((3*${#planet2}+1)-$k)) $((3*${#planet2}+1+$k)))\n    done\n  elif [ \"$planet1\"\
    \ = \"Earth\" ]; then\n    for k in $(seq 1 $((5*${#planet2}+1)-2)); do \n   \
    \   planets+=($(seq -f '%02x' $((5*${#planet2}+1)-$k)) $((5*${#planet2}+1+$k)))\n\
    \    done\n  elif [ \"$planet1\" = \"Mars\" ]; then\n    for k in $(seq 1 $((6*${#planet2}+1)-2));\
    \ do \n      planets+=($(seq -f '%02x' $((6*${#planet2}+1)-$k)) $((6*${#planet2}+1+$k)))\n\
    \    done\n  elif [ \"$planet1\" = \"Jupiter\" ]; then\n    for k in $(seq 1 $((7*${#planet2}+1)-2));\
    \ do \n      planets+=($(seq -f '%02x' $((7*${#planet2}+1)-$k)) $((7*${#planet2}+1+$k)))\n\
    \    done\n  elif [ \"$planet1\" = \"Saturn\" ]; then\n    for k in $(seq 1 $((8*${#planet2}+1)-2));\
    \ do \n      planets+=($(seq -f '%02x' $((8*${#planet2}+1)-$k)) $((8*${#planet2}+1+$k)))\n\
    \    done\n  elif [ \"$planet1\" = \"Uranus\" ]; then\n    for k in $(seq 1 $((9*${#planet2}+1)-2));\
    \ do ", "    local i planet1 planet2 results\n    i=-1\n    planet1=$1\n    planet2=$2\n\
    \    results=()\n    while [ $i -lt 8 ]; do\n        ((i++))\n        local planet\
    \ j\n        planet=\"$(echo $planet1,$planet2 | cut -d\\  -f$i)\"\n        if\
    \ [ \"$planet\" = \"$planet1\" ]\n        then\n            results=\"$planet2$results\"\
    \n        elif  [ \"$planet\" = \"$planet2\" ]\n        then\n            results=\"\
    $planet1$results\"\n        else\n            results=\"$results$planet\"\n  \
    \      fi\n    done\n    echo $results", "    local a=($*)\n    local b=($*)\n\
    \    local c=($*)\n    local d=($*)\n    local e=($*)\n    local f=($*)\n    local\
    \ g=($*)\n    local h=($*)\n    local i=($*)\n    local j=($*)\n    local k=($*)\n\
    \    local l=($*)\n    local m=($*)\n    local n=($*)\n    local o=($*)\n    local\
    \ p=($*)\n    local q=($*)\n    local r=($*)\n    local s=($*)\n    local t=($*)\n\
    \    local u=($*)\n    local v=($*)\n    local w=($*)\n    local x=($*)\n    local\
    \ y=($*)\n    local z=($*)\n    local $((${#a[@]} - ${#b[@]} - ${#c[@]} - ${#d[@]}\
    \ - ${#e[@]} - ${#f[@]} - ${#g[@]} - ${#h[@]} - ${#i[@]} - ${#j[@]} - ${#k[@]}\
    \ - ${#l[@]} - ${#m[@]} - ${#n[@]} - ${#o[@]} - ${#p[@]} - ${#q[@]} - ${#r[@]}\
    \ - ${#s[@]} - ${#t[@]} - ${#u[@]} - ${#v[@]} - ${#w[@]} - ${#x[@]} - ${#y[@]}\
    \ - ${#z[@]}))\n    local $((${#a[@]}))\n    local $((${#b[@]}))\n    local $((${#c[@]}))\n\
    \    local $((${#d[@]}))\n    local $((${#e[@]}))\n    local $((${#f[@]}))\n \
    \   local $((${#g[@]}))\n    local $((${#h[@]}))\n    local $((${#i[@]}))\n  \
    \  local $((${#j[@]}))\n    local $((${#k[@]}))\n    local $((${#l[@]}))\n   \
    \ local $((${#m[@]}))\n    local $((${#n[@]}))\n    local $((${#o[@]}))\n    local\
    \ $((${#p", "  if [ \"$#\" -ne 2 ]\n  then\n    echo \"\"\n    echo -ne \"Usage:\
    \ $(basename $0) planet1 planet2\"\n    echo \"\"\n    echo -ne \"Examples\"\n\
    \    echo \"\"\n    echo -ne \"\\t$(bf Jupiter Neptune)\"\n    echo -ne \"\\t$(bf\
    \ Earth Mercury)\"\n    echo \"\"\n    exit 1\n  fi\n  if [ \"$1\" == \"Earth\"\
    \ ] || [ \"$1\" == \"Mercury\" ] || [ \"$1\" == \"Venus\" ] || [ \"$1\" == \"\
    Mars\" ] || [ \"$1\" == \"Jupiter\" ] || [ \"$1\" == \"Saturn\" ] || [ \"$1\"\
    \ == \"Uranus\" ] || [ \"$1\" == \"Neptune\" ]\n  then\n    echo -ne \"$1\"\n\
    \  elif [ \"$1\" == \"Mercury\" ] || [ \"$1\" == \"Venus\" ] || [ \"$1\" == \"\
    Mars\" ] || [ \"$1\" == \"Jupiter\" ] || [ \"$1\" == \"Saturn\" ] || [ \"$1\"\
    \ == \"Uranus\" ] || [ \"$1\" == \"Neptune\" ]\n  then\n    echo -ne \"$1 $2\"\
    \n  else\n    echo \"\"\n    echo -ne \"Planet not known. Try again.\"\n    echo\
    \ \"\"\n    exit 1\n  fi\n  echo \"\"\n  echo -n \"Planets orbiting \"$1\" and\
    \ \"$2\": \" \n  echo -n \"\"\n  echo \"Mercury\"\n  echo \"Venus\"\n  echo \"\
    Mars\"\n  echo \"Jupiter\"\n  echo \"Saturn\"\n  echo \"Uranus\"\n  echo \"Neptune\"\
    \n  echo \"\"\n  echo -n \"Orbits: \" \n  echo -n \"\"\n  echo \"Mercury\"\n \
    \ echo \"Venus\"\n  echo \"Mars\"\n  echo \"Jupiter\"\n  echo \"Saturn\"\n  echo\
    \ \"Uranus\"\n  echo \"Neptune\"\n  echo \"\"\n  echo -n \"Orbits: \" \n  echo\
    \ -n \"\"\n  echo \"Mercury\"\n  echo \"Venus\"\n  echo \"Mars\"\n  echo \"Jupiter\"\
    \n  echo \"Saturn\"\n  echo \"Uranus\"\n  echo \"Neptune\"\n  echo \"\"\n  echo\
    \ -n \"Orbits: \" \n  echo -n \"\"\n  echo \"Mercury\"\n  echo \"Venus\"\n  echo\
    \ \"Mars\"\n  echo \"Jupiter\"\n  echo \"", "\tlocal planet1=$1\n\tlocal planet2=$2\n\
    \tlocal planet1 planet2\n\t\n\tlocal l1=$(python -m timeit -s \"from orbital import\
    \ planets; planets(planet1, planet2)\" 2>&1)\n\tlocal l2=$(python -m timeit -s\
    \ \"from orbital import planets; planets(planet2, planet1)\" 2>&1)\n\t\n\tif [[\
    \ \"$l1\" == \"$l2\" ]]; then\n\t\tprintf \"$planet1 \\\"$planet2\\\"\\n\"\n\t\
    \treturn \"\"\n\telif [[ \"$l1\" > \"$l2\" ]]; then\n\t\tprintf \"$planet2 \\\"\
    $planet1\\\"\\n\"\n\t\treturn \"\"\n\telse\n\t\tprintf \"$planet1 \\\"$planet2\\\
    \"\\n\"\n\t\treturn \"\"\n\tfi", "    planet1=$1\n    planet2=$2\n\n    planet1planet2=$(echo\
    \ $planet1$planet2 | tr '[:upper:]' '[:lower:]')\n    if [ $(echo $planet1planet2\
    \ | grep -c \"^[[:alpha:]][[:alpha:]]*$\") -gt 0 ]; then\n        echo \"$planet1planet2\"\
    \n    else\n        echo \"[]\"\n    fi", "    local planet1 planet2\n    planet1=$1\n\
    \    planet2=$2\n    declare -a planets\n    planets=($(bf $planet1 $planet2))\n\
    \    if [ ${#planets[@]} -eq 0 ]\n    then\n        echo \"empty list :(\"\n \
    \   else\n        sort -g ${planets[@]} | head -n -2 # -n to only display 2 planets\n\
    \    fi", "\tlocal planet1 planet2\n\t[[ \"$#\" -lt 2 ]] && return 0\n\t[[ \"\
    $1\" =~ [A-Za-z]+ ]] && planet1=$1\n\t[[ \"$2\" =~ [A-Za-z]+ ]] && planet2=$2\n\
    \tif [[ -z \"$planet1\" || -z \"$planet2\" ]]; then\n\t\techo \"Usage: bf planet1\
    \ planet2\"\n\t\treturn\n\tfi\n\tset -- $(bf $1 $2 | sort)\n\tprintf \"[%q]\"\
    \ \"${@}\"", "    local i\n    local p s\n    local n m\n    local planet1 planet2\n\
    \    \n    planet1=$1\n    planet2=$2\n    \n    # Check that $1 and $2 are valid\
    \ planet names\n    [[ \"$planet1\" = \"Mercury\" || \"$planet2\" = \"Mercury\"\
    \ ]] || return 1\n    [[ \"$planet1\" = \"Venus\" || \"$planet2\" = \"Venus\"\
    \ ]] || return 1\n    [[ \"$planet1\" = \"Earth\" || \"$planet2\" = \"Earth\"\
    \ ]] || return 1\n    [[ \"$planet1\" = \"Mars\" || \"$planet2\" = \"Mars\" ]]\
    \ || return 1\n    [[ \"$planet1\" = \"Jupiter\" || \"$planet2\" = \"Jupiter\"\
    \ ]] || return 1\n    [[ \"$planet1\" = \"Saturn\" || \"$planet2\" = \"Saturn\"\
    \ ]] || return 1\n    [[ \"$planet1\" = \"Uranus\" || \"$planet2\" = \"Uranus\"\
    \ ]] || return 1\n    [[ \"$planet1\" = \"Neptune\" || \"$planet2\" = \"Neptune\"\
    \ ]] || return 1\n    \n    # Get the orbit data\n    i=$(echo $planet1 | tr [A-Z]\
    \ [a-z])\n    p=$(echo $planet2 | tr [A-Z] [a-z])\n    \n    # Get the planets'\
    \ orbit data\n    s=\"$i$p\"\n    m=$(echo $planet2 | tr [A-Z] [a-z])\n    \n\
    \    # Combine planet names into one string and use it to look up planet data\n\
    \    s=\"${s},${m}\"\n    n=$(echo $s | tr [a-z] [A-Z])\n    \n    [[ \"$n\" =\
    \ \"Earth\" ]] || return 1\n    \n    # Get the planets' orbit data\n    s=\"\
    $i$p\"\n    m=$(echo $planet1 | tr [A-Z] [a-z])\n    \n    # Combine planet names\
    \ into one string and use it to look up planet data\n    s=\"${s},${m}\"\n   \
    \ n=$(echo $s | tr [a-z] [A-Z])\n    \n    [[ \"$n\" = \"Earth\" ]] || return\
    \ 1\n    \n    # Get the planets' orbit data\n    s=\"$i$p\"\n    m=$(echo $planet2\
    \ | tr [A-Z] [a-z])\n    \n    # Combine planet names into one string and use\
    \ it to look up planet data\n    s=\"${s},${m}\"\n    n=$(echo $s | tr [a-z] [A-Z])\n\
    \    ", "    local planet1 planet2 list\n    planet1=$1\n    planet2=$2\n    if\
    \ [[ \"$planet1\" == \"Mercury\" || \"$planet1\" == \"Venus\" || \"$planet1\"\
    \ == \"Earth\" ]]; then\n        if [[ \"$planet2\" == \"Mercury\" || \"$planet2\"\
    \ == \"Venus\" || \"$planet2\" == \"Earth\" ]]; then\n            list=$(echo\
    \ \"$planet1\" \"|\" \"$planet2\" | sort -nr)\n        else\n            list=$(echo\
    \ \"$planet2\" \"|\" \"$planet1\" | sort -nr)\n        fi\n    elif [[ \"$planet2\"\
    \ == \"Mercury\" || \"$planet2\" == \"Venus\" || \"$planet2\" == \"Earth\" ]];\
    \ then\n        list=$(echo \"$planet1\" \"|\" \"$planet2\" | sort -nr)\n    else\n\
    \        list=$(echo \"$planet2\" \"|\" \"$planet1\" | sort -nr)\n    fi\n   \
    \ echo \"${list}\"", "    local planet1=\"$(echo \"$1\" | sed 's/ /\\\\ /g')\"\
    \n    local planet2=\"$(echo \"$2\" | sed 's/ /\\\\ /g')\"\n    # Complete the\
    \ function below by filling in the body of the function\n    local orbit=\"$(date\
    \ +%Y-%m-%dT%H:%M:%SZ)\"\n    local planet=\"$(echo \"$orbit\" | sed 's/T/\\\\\
    T/g')\"\n    local planets=\"$(echo \"$planet\" | sed 's/\"/\\\\\"/g' | sed 's/-/\\\
    \\-/g')\"\n    local planets1=\"$(echo \"$planets\" | sed 's/-/\\\\-/g')\"\n \
    \   local planets2=\"$(echo \"$planets2\" | sed 's/-/\\\\-/g')\"\n    local planets3=\"\
    $(echo \"$planets3\" | sed 's/-/\\\\-/g')\"\n    local planets4=\"$(echo \"$planets4\"\
    \ | sed 's/-/\\\\-/g')\"\n    local planets5=\"$(echo \"$planets5\" | sed 's/-/\\\
    \\-/g')\"\n    local planets6=\"$(echo \"$planets6\" | sed 's/-/\\\\-/g')\"\n\
    \    local planets7=\"$(echo \"$planets7\" | sed 's/-/\\\\-/g')\"\n    local planets8=\"\
    $(echo \"$planets8\" | sed 's/-/\\\\-/g')\"\n    local planets9=\"$(echo \"$planets9\"\
    \ | sed 's/-/\\\\-/g')\"\n    local planets10=\"$(echo \"$planets10\" | sed 's/-/\\\
    \\-/g')\"\n    local planets11=\"$(echo \"$planets11\" | sed 's/-/\\\\-/g')\"\n\
    \    local planets12=\"$(echo \"$planets12\" | sed 's/-/\\\\-/g')\"\n    local\
    \ planets13=\"$(echo \"$planets13\" | sed 's/-/\\\\-/g')\"\n    local planets14=\"\
    $(echo \"$planets14\" | sed 's/-/\\\\-/g')\"\n    local planets15=\"$(echo \"\
    $planets15\" | sed 's/-/\\\\-/g')\"\n    local planets16", "  local planet1=$1\n\
    \  local planet2=$2\n  local planets\n\n  planets=$(echo \"$planet1 $planet2\"\
    \ | tr \" \" \"\\n\")\n  echo \"${planets[@]}\" | sort -s -k1 | uniq -d | xargs\
    \ -n1 -I{} bf $1 {}", "  local p1 p2\n  local i\n  p1=${1#Sun}\n  p2=${2#Sun}\n\
    \  [[ \"$p1\" == \"$p2\" ]] && return 1 || return 0\n  local p\n  p=$p1 \n  local\
    \ out\n  local s\n  local t\n  local w\n  local e\n  local d\n  while [[ \"$p\"\
    \ == \"$p2\" ]]\n  do\n    if [[ $p == Mercury ]]\n    then\n      out=$(pbf \"\
    $p1\" \"$p2\")\n      [[ -n \"$out\" ]] && out+=\",$p\"\n      p1=\"Venus\"\n\
    \      p2=\"Earth\"\n    elif [[ $p == Venus ]]\n    then\n      out=$(pbf \"\
    $p1\" \"$p2\")\n      [[ -n \"$out\" ]] && out+=\",$p\"\n      p1=\"Earth\"\n\
    \      p2=\"Mars\"\n    elif [[ $p == Earth ]]\n    then\n      out=$(pbf \"$p1\"\
    \ \"$p2\")\n      [[ -n \"$out\" ]] && out+=\",$p\"\n      p1=\"Mars\"\n     \
    \ p2=\"Jupiter\"\n    elif [[ $p == Mars ]]\n    then\n      out=$(pbf \"$p1\"\
    \ \"$p2\")\n      [[ -n \"$out\" ]] && out+=\",$p\"\n      p1=\"Jupiter\"\n  \
    \    p2=\"Saturn\"\n    elif [[ $p == Jupiter ]]\n    then\n      out=$(pbf \"\
    $p1\" \"$p2\")\n      [[ -n \"$out\" ]] && out+=\",$p\"\n      p1=\"Saturn\"\n\
    \      p2=\"Uranus\"\n    elif [[ $p == Saturn ]]\n    then\n      out=$(pbf \"\
    $p1\" \"$p2\")\n      [[ -n \"$out\" ]] && out+=\",$p\"\n      p1=\"Uranus\"\n\
    \      p2=\"Neptune\"\n    elif [[ $p == Uranus ]]\n    then\n      out=$(pbf\
    \ \"$p1\" \"$p2\")\n      [[ -n \"$out\" ]] && out+=\",$p\"\n      p1=\"Neptune\"\
    \n      p2=\"Pluto\"\n    elif [[ $p == Neptune ]]\n    then\n      out=$(pbf\
    \ \"$p1\" \"$p2\")\n      [[ -n \"$out\" ]] && ", " local planet1=$1\n local planet2=$2\n\
    \ local planetlist=''\n local planet1orbit=$(bf $planet1)\n local planet2orbit=$(bf\
    \ $planet2)\n if [ ${#planet1orbit[@]} -eq 0 ] ; then\n  return 0\n fi\n if [\
    \ ${#planet2orbit[@]} -eq 0 ] ; then\n  return 0\n fi\n local planet1index=0\n\
    \ local planet2index=0\n while [ $planet1index -lt ${#planet1orbit[@]} ] ; do\n\
    \  if [ ${planet1orbit[$planet1index]} -eq ${planet1orbit[$planet2index]} ] ;\
    \ then\n   planetlist=\"$planetlist $(bf ${planet1}_${planet2index})\"\n  fi\n\
    \  planet1index=$((planet1index + 1))\n done\n while [ $planet2index -lt ${#planet2orbit[@]}\
    \ ] ; do\n  if [ ${planet2orbit[$planet2index]} -eq ${planet1orbit[$planet1index]}\
    \ ] ; then\n   planetlist=\"$planetlist $(bf ${planet2}_${planet1index})\"\n \
    \ fi\n  planet2index=$((planet2index + 1))\n done\n planetlist=\"$planetlist $(bf\
    \ ${planet1}_${#planet1orbit[@]})\"\n planetlist=\"$planetlist $(bf ${planet2}_${#planet2orbit[@]})\"\
    \n return \"$planetlist\"", "    planet1=$1\n    planet2=$2\n\n    # Remove leading\
    \ and trailing quotes\n    planet1=${planet1:1}\n    planet2=${planet2:1}\n\n\
    \    # Check for correct input args\n    if [[ \"$planet1\" == \"$planet2\" ]];\
    \ then\n        echo \"Invalid input. Planets are the same\"\n        exit 1\n\
    \    fi\n\n    if [[ \"$planet1\" == *\"Saturn\"* ]]; then\n        planet1=Saturn\n\
    \        planet2=Saturn\n    fi\n\n    if [[ \"$planet1\" == *\"Jupiter\"* ]];\
    \ then\n        planet1=Jupiter\n        planet2=Jupiter\n    fi\n\n    if [[\
    \ \"$planet1\" == *\"Uranus\"* ]]; then\n        planet1=Uranus\n        planet2=Uranus\n\
    \    fi\n\n    if [[ \"$planet1\" == *\"Neptune\"* ]]; then\n        planet1=Neptune\n\
    \        planet2=Neptune\n    fi\n\n    if [[ \"$planet1\" == *\"Mercury\"* ]];\
    \ then\n        planet1=Mercury\n        planet2=Mercury\n    fi\n\n    if [[\
    \ \"$planet1\" == *\"Venus\"* ]]; then\n        planet1=Venus\n        planet2=Venus\n\
    \    fi\n\n    if [[ \"$planet1\" == *\"Earth\"* ]]; then\n        planet1=Earth\n\
    \        planet2=Earth\n    fi\n\n    if [[ \"$planet1\" == *\"Mars\"* ]]; then\n\
    \        planet1=Mars\n        planet2=Mars\n    fi\n\n    if [[ \"$planet1\"\
    \ == *\"Phobos\"* ]]; then\n        planet1=Phobos\n        planet2=Phobos\n \
    \   fi\n\n    if [[ \"$planet1\" == *\"Saturn\"* ]]; then\n        planet1=Saturn\n\
    \        planet2=Saturn\n    fi\n\n    if [[ \"$planet1\" == *\"Uranus\"* ]];\
    \ then\n        planet1=Uranus\n        planet2=Uranus\n    fi\n\n    if [[ \"\
    $planet1\" == *\"Neptune\"* ]]; then\n        planet1=Neptune\n        planet2=Neptune\n\
    \    fi\n\n    if [[ \"$planet1\" == *\"Eris\"* ]]; then\n        planet1=Eris\n\
    \        planet2=Eris\n    fi\n\n    if [[ \"$planet1\" == *\"Iapetus\"* ]]; then\n\
    \        plan", "    local planet1=$1\n    local planet2=$2\n    local planet1_name\n\
    \    local planet2_name\n    local planet1_orbit\n    local planet2_orbit\n  \
    \  local planet1_orbits\n    local planet2_orbits\n    local planet1_s\n    local\
    \ planet2_s\n    local planet1_d\n    local planet2_d\n    local planet_list\n\
    \    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n \
    \   local n=0\n    local x=0\n    local y=0\n    local z=0\n    local planet_orbit\n\
    \    local planet_orbits\n    local planet_orbits_array\n\n    planet1_orbits=$(planet\
    \ $planet1 | awk '{print $5}')\n    planet2_orbits=$(planet $planet2 | awk '{print\
    \ $5}')\n\n    for planet_orbit in $(seq 0 $((${#planet1_orbits}-${#planet2_orbits})))\n\
    \    do\n        planet_orbits=$(planet $planet1 $((${#planet1_orbits}+${#planet2_orbits}+$planet_orbit)))\n\
    \        for planet_orbit in $(seq 0 $((${#planet1_orbits}-${#planet2_orbits})))\n\
    \        do\n            if [[ ${planet1_orbits[$i]} == ${planet2_orbits[$i]}\
    \ ]]; then\n                ((i++))\n            elif [[ ${planet1_orbits[$j]}\
    \ == ${planet2_orbits[$j]} ]]; then\n                ((j++))\n            else\n\
    \                if (( i < j )); then\n                    ((m++))\n         \
    \       elif (( j < i )); then\n                    ((n++))\n                else\n\
    \                    if (( m < n )); then\n                        ((k++))\n \
    \                   else\n                        if (( n < m )); then\n     \
    \                       ((l++))\n                        else\n              \
    \              if (( k < l )); then\n                                ((x++))\n\
    \                            else\n                                if (( x < k\
    \ )); then\n                                    ((y++))\n                    \
    \            else\n                                    if (( y < l )); then\n\
    \                                        ((z++))\n                           \
    \         fi\n                                fi\n                           \
    \ fi\n                        fi\n                    fi\n                fi\n\
    \            fi\n        done\n    done\n\n    for (( i=0; i<${#plan", "    planet1=\"\
    $1\"\n    planet2=\"$2\"\n\n    [[ \"$planet1\" == Mercury || \"$planet1\" ==\
    \ Venus || \"$planet1\" == Earth || \"$planet1\" == Mars || \"$planet1\" == Jupiter\
    \ || \"$planet1\" == Saturn || \"$planet1\" == Uranus || \"$planet1\" == Neptune\
    \ ]] || return $?\n    [[ \"$planet2\" == Mercury || \"$planet2\" == Venus ||\
    \ \"$planet2\" == Earth || \"$planet2\" == Mars || \"$planet2\" == Jupiter ||\
    \ \"$planet2\" == Saturn || \"$planet2\" == Uranus || \"$planet2\" == Neptune\
    \ ]] || return $?\n\n    [[ \"$planet2\" == \"Sun\" ]] && return $?\n\n    planet1orbit=$(get_planet_orbit\
    \ \"$planet1\")\n    planet2orbit=$(get_planet_orbit \"$planet2\")\n    if [[\
    \ \"$planet1orbit\" == \"$planet2orbit\" ]]; then\n        echo \"$planet1\" \"\
    $planet2\" \"$planet1orbit\" \"$planet2orbit\"\n    else\n        echo \"$planet1\"\
    \ \"$planet2\" \"$planet1orbit\" \"$planet2orbit\"\n    fi", "    local planet1=$1\n\
    \    local planet2=$2\n    \n    echo \"$(bf $planet1 $planet2) $planet1\"", " \
    \ # We need to add quotes to the planet names, so that python doesn't \n  # think\
    \ of them as variables. \n  local planet1=\"${1}\"\n  local planet2=\"${2}\"\n\
    \n  if [[ $planet1 != Mercury && $planet1 != Venus && $planet1 != Earth && $planet1\
    \ != Mars && $planet1 != Jupiter && $planet1 != Saturn && $planet1 != Uranus &&\
    \ $planet1 != Neptune ]]; then\n    echo -e \"Wrong input planet names. Please\
    \ input Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, Neptune.\"\n   \
    \ exit 1\n  fi\n\n  if [[ $planet2 != Mercury && $planet2 != Venus && $planet2\
    \ != Earth && $planet2 != Mars && $planet2 != Jupiter && $planet2 != Saturn &&\
    \ $planet2 != Uranus && $planet2 != Neptune ]]; then\n    echo -e \"Wrong input\
    \ planet names. Please input Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus,\
    \ Neptune.\"\n    exit 1\n  fi\n\n  # Find the distance of planet1 from planet2\n\
    \  local planet1_distance=$(distanza $planet1)\n  local planet2_distance=$(distanza\
    \ $planet2)\n\n  # Find the list of planets whose orbits are within the distance\
    \ of planet1 from planet2\n  local planets_list=$(echo $planet1_distance $planet2_distance\
    \ | bc -l)\n  echo ${planets_list}\n\n  # Sort planets in ascending order based\
    \ on proximity to the sun\n  local sorted_planets=$(echo $planets_list | sort\
    \ -n | sed 's/^[ ]*//g' | sed 's/[ ]*$//g')\n  echo ${sorted_planets}\n\n  # Return\
    \ the list of planets whose orbits are located between planet1 and planet2\n \
    \ echo $sorted_planets", "    planet1=$1\n    planet2=$2\n    if [ ! -e $planet1\
    \ ] || [ ! -e $planet2 ]; then\n        echo \"Planet does not exist. Exiting.\"\
    \n        exit 1\n    fi\n    orbit1=$(../orbital $planet1)\n    orbit2=$(../orbital\
    \ $planet2)\n    declare -a orbit=()\n    orbit+=(\"$orbit1\")\n    orbit+=(\"\
    $orbit2\")\n    orbit1=$(echo \"${orbit[0]}\"+1 | awk '{print $1}')\n    orbit2=$(echo\
    \ \"${orbit[1]}\"+1 | awk '{print $1}')\n    if [[ $orbit1 -le $orbit2 ]]; then\n\
    \        echo \"Orbits are not located. Exiting.\"\n        exit 1\n    fi\n \
    \   declare -a temparray=()\n    declare -a temparray2=()\n    for element in\
    \ \"${orbit[@]}\"\n    do\n        temparray+=(\"$element\")\n    done\n    for\
    \ element in \"${temparray[@]}\"\n    do\n        temparray2+=(\"$element\")\n\
    \    done\n    declare -a array=()\n    for element in \"${temparray2[@]}\"\n\
    \    do\n        if [[ $element -ge $orbit1 ]]; then\n            array+=(\"$element\"\
    )\n        fi\n    done\n    for element in \"${temparray2[@]}\"\n    do\n   \
    \     if [[ $element -le $orbit2 ]]; then\n            array+=(\"$element\")\n\
    \        fi\n    done\n    declare -a array2=()\n    for element in \"${array[@]}\"\
    \n    do\n        echo \"$element\"\n    done\n    echo ${array[@]} | sort -nr\
    \ | uniq", "  local planet1=$1\n  local planet2=$2\n  local list\n  if [[ ${planet1}\
    \ =~ \"Mercury\" ]]; then\n    list=\"Venus Earth Mars Jupiter Saturn Uranus Neptune\"\
    \n  elif [[ ${planet1} =~ \"Venus\" ]]; then\n    list=\"Mercury Earth Mars Jupiter\
    \ Saturn Uranus Neptune\"\n  elif [[ ${planet1} =~ \"Earth\" ]]; then\n    list=\"\
    Mercury Venus Mars Jupiter Saturn Uranus Neptune\"\n  elif [[ ${planet1} =~ \"\
    Mars\" ]]; then\n    list=\"Mercury Venus Earth Jupiter Saturn Uranus Neptune\"\
    \n  elif [[ ${planet1} =~ \"Jupiter\" ]]; then\n    list=\"Mercury Venus Earth\
    \ Mars Saturn Uranus Neptune\"\n  elif [[ ${planet1} =~ \"Saturn\" ]]; then\n\
    \    list=\"Mercury Venus Earth Mars Jupiter Neptune\"\n  elif [[ ${planet1} =~\
    \ \"Uranus\" ]]; then\n    list=\"Mercury Venus Earth Mars Jupiter Saturn Neptune\"\
    \n  elif [[ ${planet1} =~ \"Neptune\" ]]; then\n    list=\"Mercury Venus Earth\
    \ Mars Jupiter Saturn Uranus\"\n  fi\n  if [[ ${planet2} =~ \"Mercury\" ]]; then\n\
    \    list+=\" \"\n  elif [[ ${planet2} =~ \"Venus\" ]]; then\n    list+=\" \"\n\
    \  elif [[ ${planet2} =~ \"Earth\" ]]; then\n    list+=\" \"\n  elif [[ ${planet2}\
    \ =~ \"Mars\" ]]; then\n    list+=\" \"\n  elif [[ ${planet2} =~ \"Jupiter\" ]];\
    \ then\n    list+=\" \"\n  elif [[ ${planet2} =~ \"Saturn\" ]]; then\n    list+=\"\
    \ \"\n  elif [[ ${planet2} =~ \"Uranus\" ]]; then\n    list+=\" \"\n  elif [[\
    \ ${planet2} =~ \"Neptune\" ]]; then\n    list+", "    python3 -c \"\nfrom skyfield.api\
    \ import load\nsun = load('de421.bsp')\nplanet1 = load('${1}.spp')\nplanet2 =\
    \ load('${2}.spp')\no1 = sun.at(t=0)\no2 = sun.at(t=2*np.pi)\ndsun = o1-o2\nsunsun\
    \ = sun-sun\nreturn [p.name for p in (sunsun-dsun).separation(planet1-planet2).argsort()[0:8]]\n\
    \"", "\tlocal planet1 planet2\n\tplanet1=\"$(echo $1 | cut -d '\"' -f 2)\"\n\t\
    planet2=\"$(echo $2 | cut -d '\"' -f 2)\"\n\t\n\t# if planet1 or planet2 are not\
    \ valid planet names, return empty list\n\tif [[ \"$planet1\" != \"Mercury\" ||\
    \ \"$planet1\" != \"Venus\" \n\t\t || \"$planet1\" != \"Earth\" || \"$planet1\"\
    \ != \"Mars\" || \n\t\t \"$planet1\" != \"Jupiter\" || \"$planet1\" != \"Saturn\"\
    \ \n\t\t || \"$planet1\" != \"Uranus\" || \"$planet1\" != \"Neptune\" \n\t\t ||\
    \ \"$planet2\" != \"Mercury\" || \"$planet2\" != \"Venus\" \n\t\t || \"$planet2\"\
    \ != \"Earth\" || \"$planet2\" != \"Mars\" || \n\t\t \"$planet2\" != \"Jupiter\"\
    \ || \"$planet2\" != \"Saturn\" \n\t\t || \"$planet2\" != \"Uranus\" || \"$planet2\"\
    \ != \"Neptune\" ]]; then\n\t\treturn \n\tfi\n\n\t# if planet1 comes first, then\
    \ put planet2 at the beginning of the list\n\tif [ \"$planet1\" == \"$planet2\"\
    \ ]; then\n\t\tplanet2=\"$planet2\"\n\t\tplanet1=\"$planet1\"\n\tfi\n\n\t# return\
    \ planets whose orbits are between the orbits of the two planets\n\tlocal result\n\
    \tresult=\"$(grep \"$planet1$planet2\" planets.txt)\"\n\n\t# sort planets by the\
    \ distance between the orbits of the two planets\n\tresult=$(echo \"$result\"\
    \ | sort -k 1 | sed 's/^[\"\\]*//g')\n\t\n\t# remove quotes from planet names\n\
    \tresult=$(echo \"$result\" | sed 's/\"//g')\n\t\n\t# remove duplicates\n\tresult=$(echo\
    \ \"$result\" | uniq | sed 's/^\"//g')\n\n\techo \"$result\"", "\tlocal a\n\t\
    a=\"$(date)\"\n\tif [ \"$a\" == \"Sun Mar 19 21:42:51 CST 2019\" ]; then\n\t\t\
    echo \"Sun Mar 19 21:42:51 CST 2019 is correct time\"\n\telse\n\t\techo \"Sun\
    \ Mar 19 21:42:51 CST 2019 is not correct time\"\n\tfi\n\techo \"$a\" | cut -d'\
    \ ' -f1-6\n\ta=\"$(date)\"\n\techo \"$a\" | cut -d' ' -f7-9\n\ta=\"$(date)\"\n\
    \techo \"$a\" | cut -d' ' -f10-13\n\ta=\"$(date)\"\n\techo \"$a\" | cut -d' '\
    \ -f14-15\n\ta=\"$(date)\"\n\techo \"$a\" | cut -d' ' -f16-17\n\ta=\"$(date)\"\
    \n\techo \"$a\" | cut -d' ' -f18-19\n\ta=\"$(date)\"\n\techo \"$a\" | cut -d'\
    \ ' -f20-21\n\ta=\"$(date)\"\n\techo \"$a\" | cut -d' ' -f22-23\n\ta=\"$(date)\"\
    \n\techo \"$a\" | cut -d' ' -f24-25\n\ta=\"$(date)\"\n\techo \"$a\" | cut -d'\
    \ ' -f26-27\n\ta=\"$(date)\"\n\techo \"$a\" | cut -d' ' -f28-29\n\ta=\"$(date)\"\
    \n\techo \"$a\" | cut -d' ' -f30-31\n\ta=\"$(date)\"\n\techo \"$a\" | cut -d'\
    \ ' -f32-33\n\ta=\"$(date)\"\n\techo \"$a\" | cut -d' ' -f34-35\n\ta=\"$(date)\"\
    \n\techo \"$a\" | cut -d' ' -f36-37\n\ta=\"$(date)\"\n\techo \"$a\" | cut -d'\
    \ ' -f38-39\n\ta=\"$(date)\"\n\techo \"$a\" | cut -d' ' -f40-41\n\ta=\"$(date)\"\
    \n\techo \"$a\" | cut -d' ' -f42-43\n\ta=\"$(date)\"\n\techo \"$a\" | cut -d'\
    \ ' -f44-45\n\ta=\"$(date)\"\n\techo \"$a\" | cut -d' ' -f46-47\n\ta=\"$(date)\"\
    \n\techo \"$a\" | cut -d' ' -f48-49\n\ta=\"$(date)\"\n\t", "    # Write your code\
    \ here\n    local planet1 planet2\n    local planet\n    local jupiter neptune\
    \ earth mars venus earth saturn uranus neptune mercury\n    planet1=${1#\\\"}\n\
    \    planet2=${2#\\\"}\n    if [ \"${planet1:0:3}\" != \"${planet1:3}\" ]; then\n\
    \        echo \"$planet1 is not a correct planet name.\" >&2\n        exit 2\n\
    \    fi\n    if [ \"${planet2:0:3}\" != \"${planet2:3}\" ]; then\n        echo\
    \ \"$planet2 is not a correct planet name.\" >&2\n        exit 2\n    fi\n   \
    \ for planet in ${!jupiter neptune earth mars venus earth saturn uranus neptune\
    \ mercury}; do\n        if [ \"${planet}\" != \"${planet1}\" ] && [ \"${planet}\"\
    \ != \"${planet2}\" ]; then\n            continue\n        fi\n        if [ -z\
    \ $(echo \"$planet1\" | bf | bf | grep -o \"${planet}\") ]; then\n           \
    \ continue\n        fi\n        if [ -z $(echo \"$planet1\" | bf | bf | grep -o\
    \ \"${planet2}\") ]; then\n            continue\n        fi\n        if [ \"${planet}\"\
    \ == \"${planet1}\" ]; then\n            if [ \"${planet2}\" == \"${planet}\"\
    \ ]; then\n                continue\n            else\n                echo \"\
    $planet is the closest planet to $planet1.\" >&2\n                exit 1\n   \
    \         fi\n        else\n            if [ \"${planet2}\" == \"${planet}\" ];\
    \ then\n                continue\n            else\n                echo \"$planet\
    \ is the closest planet to $planet2.\" >&2\n                exit 1\n         \
    \   fi\n        fi\n    done", "\tlocal planet1=$1 \n\tlocal planet2=$2\n\tlocal\
    \ planets\n\tplanets=\"$(get_planets $planet1 $planet2)\"\n\techo \"${planets}\"",
  "    local planet1 planet2 \n    planet1=\"${1%%\\\"*}\"\n    planet2=\"${2%%\\\"\
    *}\"\n    if [ -z \"$planet1\" -o -z \"$planet2\" ]; \n    then echo \"Please\
    \ input two planets\"; return 1; \n    fi\n    local distance=$(curl -s \"http://kozlenko.ru/distance.php?planet1=$planet1&planet2=$planet2\"\
    \ | grep -oP \"[0-9]+\\.[0-9]+\")\n    echo \"$planet1,$planet2,$distance\"\n\
    \    if [ \"$distance\" != \"0.0\" ]; \n    then \n        echo \"$planet1,$planet2,$distance\"\
    \n        echo \"$planet1,$planet2,$distance\" | sort\n    fi", "  python3 -c\
    \ \"\n# \n# def isPlanet(planet1, planet2):\n# planet1=${1%'\\\"'}\n# planet2=${2%'\\\
    \"'}\n# if planet1==planet2:\n# return 0\n# return 1\n# return -1\n# planet1=planet1.lower()\n\
    # planet2=planet2.lower()\n# if planet1 not in \"mercury venus earth mars jupiter\
    \ saturn uranus neptune\":\n# return -1\n# if planet2 not in \"mercury venus earth\
    \ mars jupiter saturn uranus neptune\":\n# return -1\n# return 0\n# planet1=planet1.split()\n\
    # planet2=planet2.split()\n# if planet1[0] in planet2 or planet2[0] in planet1:\n\
    # return 1\n# return -1\n# return 0\n# return 0\n# return 0\n# return 0\n# return\
    \ 0\n# return 0\n# planet1=planet1.split()\n# planet2=planet2.split()\n# if planet1[0]==planet2[0]:\n\
    # return 0\n# return 1\n# return -1\n# return 0\n# return 0\n# return 0\n# return\
    \ 0\n# return 0\n# return 0\n# return 0\n# return 0\n# planet1=planet1.lower()\n\
    # planet2=planet2.lower()\n# if planet1 not in \"mercury venus earth mars jupiter\
    \ saturn uranus neptune\":\n# return -1\n# if planet2 not in \"mercury venus earth\
    \ mars jupiter saturn uranus neptune\":\n# return -1\n# return 0\n# return 0\n\
    # planet1=planet1.split()\n# planet2=planet2.split()\n# if planet1[0] in planet2\
    \ or planet2[0] in planet1:\n# return 1\n# return -1\n# return 0\n# return 0\n\
    # return 0\n# return 0\n# return 0\n# return 0\n# return 0\n# planet1=planet1.lower()\n\
    # planet2=planet2.lower()\n# if planet1 not in \"mercury venus earth mars jupiter\
    \ saturn", "\tlocal planet1=${1%\\\"}\n\tlocal planet2=${2%\\\"}\n\tif [[ ! $planet1\
    \ =~ $planet2 ]]\n\tthen\n\t\techo \"$planet1 is not planet 1\"\n\t\treturn $planet1\n\
    \tfi\n\tlocal sun=\"$(./orbit.sh \"$planet1\" \"$planet2\" 2>/dev/null | \n\t\
    sed -n 's/^\\s*\\([0-9.]*\\)\\s*[pm|am]/\\1/p')\"\n\tif [[ -z \"$sun\" ]]\n\t\
    then\n\t\techo \"$planet1 does not have an orbit\"\n\t\treturn $planet1\n\tfi\n\
    \tlocal planets1=($(bf \"$planet1\" \"Earth\"))\n\tlocal planets2=($(bf \"$planet2\"\
    \ \"Earth\"))\n\tlocal i=1\n\tlocal j=1\n\tlocal distance=0\n\tlocal planets3=()\n\
    \tlocal done=false\n\tfor planet1 in $planets1\n\tdo\n\t\t((i++))\n\t\tif (( i\
    \ > 7 ))\n\t\tthen\n\t\t\tdone=true\n\t\t\tbreak\n\t\tfi\n\t\tfor planet2 in $planets2\n\
    \t\tdo\n\t\t\t((j++))\n\t\t\tif (( j > 7 ))\n\t\t\tthen\n\t\t\t\tdone=true\n\t\
    \t\t\tbreak\n\t\t\tfi\n\t\t\tlocal distance=$(\n\t\t\t\t./orbit.sh \"$planet1\"\
    \ \"$planet2\" 2>/dev/null | \n\t\t\t\tsed -n 's/^\\s*\\([0-9.]*\\)\\s*[pm|am]/\\\
    1/p' | \n\t\t\t\tawk '{printf'\"%0.2f\",($1-$sun)}')\n\t\t\t[[ ! -z \"$distance\"\
    \ ]] &&\n\t\t\t((distance-$sun)<0) &&\n\t\t\t((distance+$sun)>0) &&\n\t\t\t((distance<distance2))\
    \ &&\n\t\t\tplanets3+=(\"\\\"$planet2\\\"\") && planets2=()\n\t\tdone\n\tdone\n\
    \tlocal planets4=()\n\tfor planet2 in $planets2\n\tdo\n\t\t((j++))\n\t\tif ((\
    \ j > 7 ))\n\t\tthen\n\t\t\tdone=true\n\t\t\tbreak\n\t\tfi\n\t\tlocal distance=$(\n\
    \t\t\t./orbit.sh \"$planet1\" \"$planet2\" 2>/dev/null | \n\t\t\tsed -n 's/^\\\
    s*\\([0-9.]*\\)\\s*[pm|am]/\\1/p' | \n\t\t\tawk '", "  local -n planet1=$1\n \
    \ local -n planet2=$2\n  local -a planets\n  \n  if [[ -z $planet1 ]]; then\n\
    \    echo \"Planet 1 name can't be empty\"\n    return 1\n  fi\n  \n  if [[ -z\
    \ $planet2 ]]; then\n    echo \"Planet 2 name can't be empty\"\n    return 1\n\
    \  fi\n  \n  if [[ -z ${!planet1} ]]; then\n    echo \"Planet 1 name is not a\
    \ planet name in this solar system\"\n    return 1\n  fi\n  \n  if [[ -z ${!planet2}\
    \ ]]; then\n    echo \"Planet 2 name is not a planet name in this solar system\"\
    \n    return 1\n  fi\n  \n  planets=()\n  planets+=( \"${!planet1}\" )\n  planets+=(\
    \ \"${!planet2}\" )\n  \n  local sun\n  sun=$(./getplanet.py)\n  \n  if [[ -z\
    \ $sun ]]; then\n    echo \"Failed to find sun\"\n    return 1\n  fi\n  \n  local\
    \ distance\n  local i\n  for i in \"${!planets[@]}\"; do\n    distance=$(getplanet.py\
    \ ${planets[i]})\n    \n    if [[ -z $distance ]]; then\n      echo \"Failed to\
    \ find distance between $planet1 and $planet2\"\n      return 1\n    fi\n    \n\
    \    if (( $distance < sun )) ; then\n      planets+=( \"$planet${i}\" )\n   \
    \ fi\n  done\n  \n  # sort\n  local k\n  local temp\n  local temp1\n  local j\n\
    \  local out\n  \n  k=$((${#planets[@]} - 1))\n  temp=()\n  temp1=\"$(getplanet.py\
    \ ${planets[0]})\"\n  \n  if (( $k > 1 )); then\n    for i in $(seq 0 $((k - 1)));\
    \ do\n      temp+=($temp1)\n      temp1=\"$(getplanet.py ${planets[i]})\"\n  \
    \  done\n  fi\n  \n  for j in \"${!planets[@]}\"; do\n    if (( $j == 0 )) ; then\n\
    \      temp+=($planets[$(( $k - 1))])\n    else\n      temp+=($planets[$j])\n\
    \    fi\n  done\n  \n  temp+=($sun)\n  \n  out=()\n  for i in \"${temp", "   \
    \ planet1=${1:-Mercury}\n    planet2=${2:-Earth}\n    planets=$(planet1=$planet2\
    \ bf $planet1 $planet2 $(bf $planet1 $planet2 $(bf $planet1 $planet2 $(bf $planet1\
    \ $planet2 $(bf $planet1 $planet2 $(bf $planet1 $planet2 $(bf $planet1 $planet2\
    \ $(bf $planet1 $planet2 $(bf $planet1 $planet2 $(bf $planet1 $planet2 $(bf $planet1\
    \ $planet2 $(bf $planet1 $planet2 $(bf $planet1 $planet2 $(bf $planet1 $planet2\
    \ $(bf $planet1 $planet2 $(bf $planet1 $planet2 $(bf $planet1 $planet2 $(bf $planet1\
    \ $planet2 $(bf $planet1 $planet2 $(bf $planet1 $planet2 $(bf $planet1 $planet2\
    \ $(bf $planet1 $planet2 $(bf $planet1 $planet2 $(bf $planet1 $planet2 $(bf $planet1\
    \ $planet2 $(bf $planet1 $planet2 $(bf $planet1 $planet2 $(bf $planet1 $planet2\
    \ $(bf $planet1 $planet2 $(bf $planet1 $planet2 $(bf $planet1 $planet2 $(bf $planet1\
    \ $planet2 $(bf $planet1 $planet2 $(bf $planet1 $planet2 $(bf $planet1 $planet2\
    \ $(bf $planet1 $planet2 $(bf $planet1 $planet2 $(bf $planet1 $planet2 $(bf $planet1\
    \ $planet2 $(bf $planet1 $planet2 $(bf $planet1 $planet2 $(bf $planet1 $planet2\
    \ $(bf $planet1 $planet2 $(bf $planet", "    planet1=\"`echo $1 | cut -f1 -d'\
    \ '`\"\n    planet2=\"`echo $2 | cut -f1 -d' '`\"\n    \n    orbit_sun=\"`bf $planet1\
    \ \"SUN\"`\"\n    orbit_planet1=\"`bf $planet2 \"SUN\"`\"\n    orbit_planet2=\"\
    `bf $planet1 \"SUN\"`\"\n    \n    case \"$planet1\" in\n        \"SUN\")\n  \
    \          echo \"$orbit_sun\"\n            ;;\n        *) \n            echo\
    \ \"$orbit_planet1\"\n            ;;\n    esac\n    case \"$planet2\" in\n   \
    \     \"SUN\")\n            echo \"$orbit_sun\"\n            ;;\n        *) \n\
    \            echo \"$orbit_planet2\"\n            ;;\n    esac", "    local planet1=$1\
    \ \n    local planet2=$2\n\n    # Complete the code below\n    local output=\"\
    \"\n    if [ \"$planet1\" == \"Mercury\" ] || [ \"$planet1\" == \"Venus\" ] ||\
    \ [ \"$planet1\" == \"Earth\" ] || [ \"$planet1\" == \"Mars\" ] || [ \"$planet1\"\
    \ == \"Jupiter\" ] || [ \"$planet1\" == \"Saturn\" ] || [ \"$planet1\" == \"Uranus\"\
    \ ] || [ \"$planet1\" == \"Neptune\" ]; then\n        output=\"$planet2\"\n  \
    \  elif [ \"$planet2\" == \"Mercury\" ] || [ \"$planet2\" == \"Venus\" ] || [\
    \ \"$planet2\" == \"Earth\" ] || [ \"$planet2\" == \"Mars\" ] || [ \"$planet2\"\
    \ == \"Jupiter\" ] || [ \"$planet2\" == \"Saturn\" ] || [ \"$planet2\" == \"Uranus\"\
    \ ] || [ \"$planet2\" == \"Neptune\" ]; then\n        output=\"$planet1\"\n  \
    \  else\n        output=\"\"\n    fi\n    local i\n    for i in $(seq 1 $((${#output[@]}-1)))\n\
    \    do\n        local j\n        local k\n        local d\n        if [ \"$output[i]\"\
    \ == \"'Mercury'\" ] || [ \"$output[i]\" == \"'Venus'\" ] || [ \"$output[i]\"\
    \ == \"'Earth'\" ] || [ \"$output[i]\" == \"'Mars'\" ] || [ \"$output[i]\" ==\
    \ \"'Jupiter'\" ] || [ \"$output[i]\" == \"'Saturn'\" ] || [ \"$output[i]\" ==\
    \ \"'Uranus'\" ] || [ \"$output[i]\" == \"'Neptune'\" ]; then\n            if\
    \ [ \"$output[i+1]\" == \"'Mercury'\" ] || [ \"$output[i+1]\" == \"'Venus'\" ]\
    \ || [ \"$output[i+1]\" == \"'Earth'\" ] || [ \"$output[i+1]\" == \"'Mars'\" ]\
    \ || [ \"$output[i+1]\" == \"'Jupiter'\" ] || [ \"$output[i+1]\" == \"'Saturn'\"\
    \ ] || [ \"$output[i+1]\" == \"'Uranus'\" ] || [ \"$output[i+1]\" == \"'Neptune'\"\
    \ ]; then\n                d=$(echo $output | awk -F'\"' '{print $4}')\n     \
    \           k=$((${#d}+1))\n                d=${d:0:$k}\n                if [\
    \ \"$planet1\" == \"$d\" ]; then\n                    output[i]=$planet2\n   \
    \             else\n                    output[i]=$planet1\n                fi\n\
    \            fi\n        fi\n    done\n    for j in $(seq 1 $((${#output[@]}-1)))\n\
    \    do\n        local k\n        local ", "  echo \"$2 $1\"\n  a=$((`echo \"\
    $2 $1\" | tr ' ' '\\n' | grep -e \"^${1}.[0-9]*$\" -e \"^${1}$\" -e \"^${1}.[0-9]*\\\
    .[0-9]*$\" -e \"^${1}\\.[0-9]*$\" -e \"^${1}[0-9]*\\.[0-9]*\\.[0-9]*$\" -e \"\
    ^${1}\\.[0-9]*\\.[0-9]*$\" | wc -l`-1))\n  echo \"$a\"\n  if [[ \" $a \" -eq 0\
    \ ]]; then\n    echo \"None\"\n  else\n    echo \"$a $1 $2 $3 $4 $5 $6 $7 $8 $9\"\
    \n  fi", "    planet1=$1\n    planet2=$2\n    \n    echo $(bf $planet1 $planet2|grep\
    \ -v ${planet1}|grep -v ${planet2}|awk '{print $2}')", "\t[[ $1 ]] || return $(bf\
    \ \"Earth\" \"Mercury\");\n\t[[ $2 ]] || return $(bf \"Mercury\" \"Uranus\");\n\
    \t\n\tlocal mercury=\"$(bf \"$1\" \"$2\" | sort -n | tail -1)\"\n\tlocal venus=\"\
    $(bf \"$1\" \"$2\" | sort -n | head -1)\"\n\tlocal earth=\"$(bf \"$1\" \"$2\"\
    \ | sort -n | head -2)\"\n\tlocal mars=\"$(bf \"$1\" \"$2\" | sort -n | head -3)\"\
    \n\tlocal jupiter=\"$(bf \"$1\" \"$2\" | sort -n | head -4)\"\n\tlocal saturn=\"\
    $(bf \"$1\" \"$2\" | sort -n | head -5)\"\n\tlocal uranus=\"$(bf \"$1\" \"$2\"\
    \ | sort -n | head -6)\"\n\tlocal neptune=\"$(bf \"$1\" \"$2\" | sort -n | head\
    \ -7)\"\n\n\tlocal planets=(\"${!mercury}\" \"${!venus}\" \"${!earth}\" \"${!mars}\"\
    \ \"${!jupiter}\" \"${!saturn}\" \"${!uranus}\" \"${!neptune}\")\n\tlocal planets=(\"\
    ${planets[@]}\" \"\")\n\tlocal planets=(\"${planets[@]}\" \"\")\n\tlocal planets=(\"\
    ${planets[@]}\" \"\")\n\tlocal planets=(\"${planets[@]}\" \"\")\n\tlocal planets=(\"\
    ${planets[@]}\" \"\")\n\tlocal planets=(\"${planets[@]}\" \"\")\n\tlocal planets=(\"\
    ${planets[@]}\" \"\")\n\tlocal planets=(\"${planets[@]}\" \"\")\n\tlocal planets=(\"\
    ${planets[@]}\" \"\")\n\tlocal planets=(\"${planets[@]}\" \"\")\n\tlocal planets=(\"\
    ${planets[@]}\" \"\")\n\tlocal planets=(\"${planets[@]}\" \"\")\n\tlocal planets=(\"\
    ${planets[@]}\" \"\")\n\tlocal planets=(\"${planets[@]}\" \"\")\n\tlocal planets=(\"\
    ${planets[@]}\" \"\")\n\tlocal planets=(\"${planets[@]}\" \"\")\n\tlocal planet",
  "\tlocal planet1=$1\n\tlocal planet2=$2\n\t\n\t# If the two planets are correct,\
    \ return a list of the planets \n\t# whose orbits lie between the orbits of the\
    \ two planets.\n\tif [[ $(echo $planet1 $planet2 | cut -c 1-5) == *\"H\"* ]];\
    \ then\n\t\techo '\"Mercury\"'\n\telif [[ $(echo $planet1 $planet2 | cut -c 1-5)\
    \ == *\"V\"* ]]; then\n\t\techo '\"Venus\"'\n\telif [[ $(echo $planet1 $planet2\
    \ | cut -c 1-5) == *\"J\"* ]]; then\n\t\techo '\"Earth\"'\n\telif [[ $(echo $planet1\
    \ $planet2 | cut -c 1-5) == *\"S\"* ]]; then\n\t\techo '\"Mars\"'\n\telif [[ $(echo\
    \ $planet1 $planet2 | cut -c 1-5) == *\"U\"* ]]; then\n\t\techo '\"Jupiter\"'\n\
    \telif [[ $(echo $planet1 $planet2 | cut -c 1-5) == *\"N\"* ]]; then\n\t\techo\
    \ '\"Saturn\"'\n\telif [[ $(echo $planet1 $planet2 | cut -c 1-5) == *\"R\"* ]];\
    \ then\n\t\techo '\"Uranus\"'\n\telif [[ $(echo $planet1 $planet2 | cut -c 1-5)\
    \ == *\"D\"* ]]; then\n\t\techo '\"Neptune\"'\n\t# If not, return an empty list\n\
    \telse\n\t\techo \"\"\n\tfi", "\tlocal planet1=$1\n\tlocal planet2=$2\n\t# If\
    \ the input is not correct planet names, \n\t# return empty list\n\tif [[ \"$planet1\"\
    \ != \"Mercury\" ]]; \n\tthen \n\t\treturn \n\tfi\n\tif [[ \"$planet2\" != \"\
    Uranus\" ]]; \n\tthen \n\t\treturn \n\tfi\n\t# Create a list of all the planets\
    \ in between the two planets \n\t# in descending order of proximity to the sun\n\
    \tlocal all_planets=$(\n\t\tfor i in $(seq 0 9); \n\t\tdo \n\t\t\techo -n \"\\\
    \"$planet$i\\\" \"\n\t\t\techo -n \"\\\"$planet$((i+1))\\\" | \"\n\t\tdone | sed\
    \ 's/ | $//'\n\t)\n\t# Remove duplicates and sort the list in descending order\
    \ of \n\t# proximity to the sun\n\tlocal all_planets_sorted=$(echo \"$all_planets\"\
    \ | sort -n | uniq)\n\t# Create empty list of all the planets\n\tlocal all_planets_empty=$(echo\
    \ \"\"; echo \"\")\n\t# Iterate over the sorted list to check if planet 1 is the\
    \ sun \n\t# and planet 2 is the sun. \n\t# The loop will exit as soon as one planet\
    \ is outside the sun \n\t# circle. \n\t# If the sun lies on a planet inside the\
    \ sun circle, the \n\t# list containing all the planets inside the sun circle\
    \ is returned\n\t# and the loop will exit. \n\tfor i in $all_planets_sorted; \n\
    \tdo \n\t\tif [ \"$i\" == \"Mercury\" ];\n\t\tthen \n\t\t\tif [ \"$planet1\" ==\
    \ \"Earth\" ];\n\t\t\tthen \n\t\t\t\treturn $all_planets_empty\n\t\t\tfi\n\t\t\
    fi\n\t\tif [ \"$i\" == \"Jupiter\" ];\n\t\tthen \n\t\t\tif [ \"$planet1\" == \"\
    Mars\" ];\n\t\t\tthen \n\t\t\t\treturn $all_planets_empty\n\t\t\tfi\n\t\tfi\n\t\
    \tif [ \"$i\" == \"Venus\" ];\n\t\tthen \n\t\t\tif [ \"$planet1\" == \"Saturn\"\
    \ ];\n\t\t\tthen \n\t\t\t\treturn $all_planets_empty\n\t\t\tfi\n\t\tfi\n\t\tif\
    \ [ \"$i\" == \"Earth\" ];\n\t\tthen \n\t\t\tif [ \"$planet1\" == \"Uranus\" ];\n\
    \t\t\tthen \n\t\t\t\treturn $all_planets_empty\n\t\t\tfi\n\t\tfi\n\t\tif [ \"\
    $i\" == \"Mars\" ];\n\t\tthen \n\t\t\tif [ \"$planet1\" == \"Jupiter\" ];\n\t\t\
    \tthen \n\t\t\t\treturn $all_planets_empty", "  local planet1=$1\n  local planet2=$2\n\
    \  local list=\"$(bf \"$planet1\" \"$planet2\" | sort -n -t \":\" -k2 |\n    \
    \         sed -e 's/^\"//' -e 's/\"$//')\"\n  [[ \"$planet1\" == \"$planet2\"\
    \ ]] || return $list\n  [[ \"$planet1\" == \"Mercury\" ]] && list=\"$(bf \"Mercury\"\
    \ \"Earth\" \"$planet2\")\"\n  [[ \"$planet2\" == \"Mercury\" ]] && list=\"$(bf\
    \ \"Earth\" \"Mercury\" \"$planet1\")\"\n  [[ \"$planet1\" == \"Earth\" ]] &&\
    \ list=\"$(bf \"Mercury\" \"Mars\" \"$planet2\")\"\n  [[ \"$planet2\" == \"Earth\"\
    \ ]] && list=\"$(bf \"Mars\" \"Mercury\" \"$planet1\")\"\n  [[ \"$planet1\" ==\
    \ \"Mars\" ]] && list=\"$(bf \"Jupiter\" \"Saturn\" \"$planet2\")\"\n  [[ \"$planet2\"\
    \ == \"Mars\" ]] && list=\"$(bf \"Saturn\" \"Jupiter\" \"$planet1\")\"\n  [[ \"\
    $planet1\" == \"Jupiter\" ]] && list=\"$(bf \"Uranus\" \"Neptune\" \"$planet2\"\
    )\"\n  [[ \"$planet2\" == \"Jupiter\" ]] && list=\"$(bf \"Neptune\" \"Uranus\"\
    \ \"$planet1\")\"\n  [[ \"$planet1\" == \"Saturn\" ]] && list=\"$(bf \"Uranus\"\
    \ \"Jupiter\" \"$planet2\")\"\n  [[ \"$planet2\" == \"Saturn\" ]] && list=\"$(bf\
    \ \"Jupiter\" \"Uranus\" \"$planet1\")\"\n  [[ \"$planet1\" == \"Uranus\" ]] &&\
    \ list=\"$(bf \"Neptune\" \"Earth\" \"$planet2\")\"\n  [[ \"$planet2\" == \"Uranus\"\
    \ ]] && list=\"$(bf \"Earth\" \"Neptune\" \"$planet1\")\"\n  [[ \"$planet1\" ==\
    \ \"Neptune\" ]] && list=\"$(bf \"Earth\" \"Mars\" \"$planet2\")\"\n  [[ \"$planet2\"\
    \ == \"Neptune\" ]] && list=\"$(bf \"Mars\" \"Earth\" \"$planet1\")\"\n  [[ \"\
    $planet1\" == \"Venus\" ]] && list=\"$(bf \"Mars\" \"Jupiter\" \"$plan", "  planet1=$1\n\
    \  planet2=$2\n  \n  IFS=', '\n  arr1=( $(bf $planet1 $planet2) )\n  arr2=( $(bf\
    \ $planet2 $planet1) )\n  \n  if [ ${#arr1[@]} -eq ${#arr2[@]} ]\n  then\n   \
    \ arr1+=( $(bf $planet2 $planet1) )\n  fi\n  \n  # print arr1[*], sort by proximity\
    \ to sun, return empty array\n  printf '%s\\n' \"${arr1[@]}\" | sort -n --key=2\n\
    \  ", "    local planet1 planet2\n    planet1=$1\n    planet2=$2\n    if [ -z\
    \ $1 ] || [ -z $2 ]\n        then\n            echo \"Please provide the two planet\
    \ names as arguments\"\n        fi\n    local a\n    local planets planet\n  \
    \  local i\n    planets=$(grep \"$planet1\" \"${1}\")\n    for i in $planets\n\
    \        do\n            a=$(grep \"$i\" \"${1}\")\n            if [ -z $a ]\n\
    \                then\n                    echo \"Planet $i not found in ${1}\"\
    \n                else\n                    planet=\"$planet\"\n            fi\n\
    \        done\n    planets=$(grep \"$planet2\" \"${1}\")\n    for i in $planets\n\
    \        do\n            a=$(grep \"$i\" \"${1}\")\n            if [ -z $a ]\n\
    \                then\n                    echo \"Planet $i not found in ${1}\"\
    \n                else\n                    planet=\"$planet\"\n            fi\n\
    \        done\n    planet=\"$planet\"\n    planet=$(echo \"$planet\" | awk '{print\
    \ $1}')\n    planet=$(echo \"$planet\" | awk '{print $1}')\n    planet=$(echo\
    \ \"$planet\" | awk '{print $2}')\n    planet=$(echo \"$planet\" | awk '{print\
    \ $2}')\n    planet=$(echo \"$planet\" | awk '{print $1}')\n    planet=$(echo\
    \ \"$planet\" | awk '{print $1}')\n    planet=$(echo \"$planet\" | awk '{print\
    \ $2}')\n    planet=$(echo \"$planet\" | awk '{print $2}')\n    planet=$(echo\
    \ \"$planet\" | awk '{print $1}')\n    planet=$(echo \"$planet\" | awk '{print\
    \ $1}')\n    planet=$(echo \"$planet\" | awk '{print $2}')\n    planet=$(echo\
    \ \"$planet\" | awk '{print $2}')\n    planet=$(echo \"$planet\" | awk '{print\
    \ $1}')\n    planet=$(echo \"$planet\" | awk '{print $1}')\n    planet=$(echo\
    \ \"$planet\" | awk '{print $2}')\n    planet=$(echo \"$planet\" | awk '{print\
    \ $2}')\n    planet=$(echo \"$planet\" | awk '{print $1}')\n    planet=$(echo\
    \ \"$planet\" | awk '{print $1}", "  local planet1 planet2\n  planet1=$1\n  planet2=$2\n\
    \  local result\n  local planet\n  local planets\n  local orbit1\n  local orbit2\n\
    \  local distance\n  local nplanets\n  planets=$(bf \"$planet1\" \"$planet2\"\
    )\n  nplanets=\"$#\" \n  if [[ \"$nplanets\" -gt 1 ]]\n  then\n    echo ''\n \
    \ fi\n  if [[ \"$nplanets\" -eq 0 ]]\n  then\n    return 0\n  fi\n  result=\"\
    ($planet1 $planet2)\"\n  while [[ \"$nplanets\" -gt 0 ]]\n  do\n    planet=\"\
    $(bf \"$result\")\"\n    planets=\"$planets $planet\"\n    nplanets=\"$nplanets\
    \ - 1\"\n    result=\"($planet1 $planet2)\"\n  done\n  echo ${planets:1}", " \
    \   if [ \"$#\" -lt 2 ]; then echo \"invalid number of arguments\"; exit 1; fi\n\
    \n    # Get the planets\n    planet1=\"$1\" \n    planet2=\"$2\"\n    planet1=${planet1//\\\
    \"}\n    planet2=${planet2//\\\"}\n    \n    # Get orbit of sun\n    sun=\"$(gc\
    \ \"Sun\" \"Jupiter\")\"\n    sun=${sun//\\\"}\n    \n    # Get the orbits between\
    \ the planets\n    planet1orbit=\"$(gc \"$planet1\" \"Earth\" \"Venus\" \"Mars\"\
    \ \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\"\n    planet1orbit=${planet1orbit//\\\
    \"}\n    planet1orbit=${planet1orbit/:}\n    planet2orbit=\"$(gc \"$planet2\"\
    \ \"Earth\" \"Venus\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\"\
    \n    planet2orbit=${planet2orbit//\\\"}\n    planet2orbit=${planet2orbit/:}\n\
    \    \n    # Get the distance between the planets\n    planet1dist=\"$(gc \"$planet1\"\
    \ \"Earth\" \"Venus\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\" \"\
    Mercury\" \"Mercury\")\"\n    planet1dist=${planet1dist//\\\"}\n    planet1dist=${planet1dist/:}\n\
    \    planet2dist=\"$(gc \"$planet2\" \"Earth\" \"Venus\" \"Mars\" \"Jupiter\"\
    \ \"Saturn\" \"Uranus\" \"Neptune\" \"Mercury\" \"Mercury\")\"\n    planet2dist=${planet2dist//\\\
    \"}\n    planet2dist=${planet2dist/:}\n\n    # Sort by distance\n    sort -t \"\
    :\" -k1 -n -k $((${#planet1orbit}+${#planet2orbit})) $sun $planet1orbit $planet2orbit ",
  "    local planet1 planet2 \n    planet1=\"\\\"$1\\\"\"\n    planet2=\"\\\"$2\\\"\
    \"\n    if [[ $planet1 = \"Venus\" ]]\n    then\n        planet1=\"Earth\"\n \
    \   fi\n    if [[ $planet1 = \"Mercury\" ]]\n    then\n        planet1=\"Mars\"\
    \n    fi\n    if [[ $planet1 = \"Jupiter\" ]]\n    then\n        planet1=\"Saturn\"\
    \n    fi\n    if [[ $planet1 = \"Uranus\" ]]\n    then\n        planet1=\"Neptune\"\
    \n    fi\n    if [[ $planet2 = \"Mercury\" ]]\n    then\n        planet2=\"Venus\"\
    \n    fi\n    if [[ $planet2 = \"Jupiter\" ]]\n    then\n        planet2=\"Saturn\"\
    \n    fi\n    if [[ $planet2 = \"Uranus\" ]]\n    then\n        planet2=\"Neptune\"\
    \n    fi\n    if [[ $planet2 = \"Neptune\" ]]\n    then\n        planet2=\"Uranus\"\
    \n    fi\n    if [[ $planet1 = \"Earth\" ]]\n    then\n        planet1=\"Mars\"\
    \n    fi\n    if [[ $planet2 = \"Earth\" ]]\n    then\n        planet2=\"Mars\"\
    \n    fi\n    if [[ $planet1 = \"Mars\" ]]\n    then\n        planet1=\"Jupiter\"\
    \n    fi\n    if [[ $planet2 = \"Mars\" ]]\n    then\n        planet2=\"Jupiter\"\
    \n    fi\n    if [[ $planet1 = \"Jupiter\" ]]\n    then\n        planet1=\"Saturn\"\
    \n    fi\n    if [[ $planet2 = \"Jupiter\" ]]\n    then\n        planet2=\"Saturn\"\
    \n    fi\n    if [[ $planet1 = \"Saturn\" ]]\n    then\n        planet1=\"Uranus\"\
    \n    fi\n    if [[ $planet2 = \"Saturn\" ]]\n    then\n        planet2=\"Uranus\"\
    \n    fi\n    if [[ $planet1 = \"Uranus\" ]]\n    then\n        planet1=\"Neptune\"\
    \n    fi\n    if [[ $planet2 = \"Uranus\" ]]\n    then\n        planet2=\"Neptune\"\
    \n    fi", "    local planet1 planet2 planet3 planet4 planet5 planet6 planet7\
    \ planet8\n    local list i\n    planet1=$1\n    planet2=$2\n    list=\"$planet1\
    \ $planet2 $planet3 $planet4 $planet5 $planet6 $planet7 $planet8\"\n    for i\
    \ in $list; do\n        [[ -z $i ]] && return 0\n    done\n    local distance\n\
    \    local list2\n    local i=0\n    local list3\n    local planet\n    local\
    \ count1\n    local count2\n    local flag\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local angle\n   \
    \ local rad\n    distance=0\n    list2=$(echo \"$list\" | grep \"$planet1\")\n\
    \    list3=$(echo \"$list\" | grep \"$planet2\")\n    if [ -n \"$list2\" ]; then\n\
    \        count1=$(echo \"$list2\" | wc -l)\n        count2=$(echo \"$list3\" |\
    \ wc -l)\n        if [ \"$count1\" -eq \"$count2\" ]; then\n            local\
    \ count\n            local count2\n            local count3\n            count=0\n\
    \            count2=0\n            count3=0\n            while [ \"$count\" -le\
    \ \"$count1\" ] && [ \"$count2\" -le \"$count2\" ]; then\n                x=$(echo\
    \ \"$list2\" | sed -n $(($count*3))).\"$planet1\"\n                y=$(echo \"\
    $list3\" | sed -n $(($count*3))).\"$planet1\"\n                z=$(echo \"$list2\"\
    \ | sed -n $(($count*3))).\"$planet2\"\n                if [ \"$x\" == \"$y\"\
    \ ] && [ \"$y\" == \"$z\" ]; then\n                    a=$(echo \"$list2\" | sed\
    \ -n $(($count*3))).\"$planet1\"\n                    b=$(echo \"$list3\" | sed\
    \ -n $(($count*3))).\"$planet2\"\n                    c=$(echo \"$list2\" | sed\
    \ -n $(($count*3))).\"$planet3\"\n                    d=$(echo \"$list3\" | sed\
    \ -n $(($count*3))).\"$planet3\"\n                    if [ \"$a\" == \"$b\" ]\
    \ && [ \"$b\" == \"$c\" ]; then\n                        planet=$(echo \"$list2\"\
    \ | sed -n $(($count*3))).\"$planet1\"\n                        ", "\tlocal p1\
    \ p2 \n\tp1=\"$1\" \n\tp2=\"$2\"\n\tif [ -n \"$1\" ] || [ -n \"$2\" ]; then\n\t\
    \techo \"$(pbf \"$1\" \"$2\")\"\n\telse\n\t\techo \"(empty list)\"\n\tfi", " \
    \ local a=1\n  local b=2\n  local c=0\n  local d=3\n  local e=4\n  local f=5\n\
    \  local g=6\n  local h=7\n  local i=1\n  local j=2\n  local k=0\n  local l=1\n\
    \  local m=0\n  local n=1\n\n  local pl1=$(echo $1 | tr '[:upper:]' '[:lower:]')\n\
    \  local pl2=$(echo $2 | tr '[:upper:]' '[:lower:]')\n\n  local a=\"Mercury\"\
    \ \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \n  local b=\"\
    Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \n  local\
    \ c=\"Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\"\
    \ \n  local d=\"Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\"\
    \ \"Uranus\" \n  local e=\"Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\"\
    \ \"Saturn\" \"Uranus\" \n  local f=\"Mercury\" \"Venus\" \"Earth\" \"Mars\" \"\
    Jupiter\" \"Saturn\" \"Uranus\" \n  local g=\"Mercury\" \"Venus\" \"Earth\" \"\
    Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \n  local h=\"Mercury\" \"Venus\" \"\
    Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \n  local i=\"Mercury\" \"\
    Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \n  local j=\"Mercury\"\
    \ \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \n  local k=\"\
    Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \n  local\
    \ l=\"Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\"\
    \ \n  local m=\"Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\"\
    \ \"Uranus\" \n  local n=\"Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\"\
    \ \"Saturn\" \"Uranus\" \n\n  while [ $a -le $n ]\n", "\tfor i in \"$@\"\n\tdo\n\
    \t\tbf $i $i\n\tdone", "    local planet1=$1\n    local planet2=$2\n    local\
    \ list \n    if [[ \"$planet1\" == \"Mercury\" || \"$planet1\" == \"Venus\" ||\
    \ \"$planet1\" == \"Earth\" || \"$planet1\" == \"Mars\" || \"$planet1\" == \"\
    Jupiter\" || \"$planet1\" == \"Saturn\" || \"$planet1\" == \"Uranus\" || \"$planet1\"\
    \ == \"Neptune\" ]]; then\n        list=$(zenith orbit $planet1)\n    elif [[\
    \ \"$planet2\" == \"Mercury\" || \"$planet2\" == \"Venus\" || \"$planet2\" ==\
    \ \"Earth\" || \"$planet2\" == \"Mars\" || \"$planet2\" == \"Jupiter\" || \"$planet2\"\
    \ == \"Saturn\" || \"$planet2\" == \"Uranus\" || \"$planet2\" == \"Neptune\" ]];\
    \ then\n        list=$(zenith orbit $planet2)\n    else\n        list=''\n   \
    \ fi\n    list=$(echo \"$list\" | tr '\\n' ' ')\n    list=$(echo \"$list\" | sort\
    \ -n | tail -n1)\n    echo $list", "    planet1=$1\n    planet2=$2\n    planet1=\"\
    ${planet1,,}\"\n    planet2=\"${planet2,,}\"\n    if [[ -z $planet1 ]] || [[ -z\
    \ $planet2 ]]\n        then \n            echo \"ERROR: You did not enter two\
    \ planet names!\"\n        else\n            distance=$(perl -e 'print $_ ^ 6\
    \ - 1 for (split /\\./, $ARGV[0]) ^ (split /\\./, $ARGV[1]); print ' $planet1\
    \ $planet2 )\n            echo \"$planet1,$planet2 $distance\"\n        fi", " \
    \ local planet1=$1\n  local planet2=$2\n\n  # Planet names are case-sensitive.\n\
    \  # Check that planet names are strings.\n  [ \"$1\" != \"$1\" ] ||  echo \"\
    $1 is not a string\" >&2\n  [ \"$2\" != \"$2\" ] ||  echo \"$2 is not a string\"\
    \ >&2\n\n  # The sun is the only planet with exactly zero orbits in the solar\
    \ \n  # system (it is the only planet with an orbit in the solar system)\n  local\
    \ sun=\"Sun\"\n\n  # The planets are the only planets with orbits that pass through\
    \ the Sun\n  # and are separated by at least 5 degrees of separation.\n  local\
    \ planets=\"$PLANETS\"\n  \n  # The planets have an orbit that are located in\
    \ less than five degrees of \n  # separation from the Sun.\n  local planets5=\"\
    $PLANETS5\"\n\n  # The planets have an orbit that are located in less than ten\
    \ degrees \n  # of separation from the Sun.\n  local planets10=\"$PLANETS10\"\n\
    \n  # The planets have an orbit that are located on their orbit of the Sun.\n\
    \  local planetsAll=\"$PLANETSAll\"\n\n  # The planets have an orbit that pass\
    \ through the Sun.\n  local planetsSun=\"$PLANETSSun\"\n\n  # The planets have\
    \ an orbit that are located on their orbit of the Sun.\n  local planetsSunAll=\"\
    $PLANETSSunAll\"\n\n  # The planets have an orbit that is located on the perihelion\n\
    \  local planetsSunPeri=\"$PLANETSSunPeri\"\n\n  # The planets have an orbit that\
    \ is located on their orbit of the Sun.\n  local planetsSunPeriAll=\"$PLANETSSunPeriAll\"\
    \n\n  # The planets have an orbit that are located between their orbit of the\
    \ \n  # Sun and the perihelion of their orbit\n  local planetsSunPeriPeri=\"$PLANETSSunPeriPeri\"\
    \n\n  # The planets have an orbit that are located on their orbit of the Sun.\n\
    \  local planetsSunPeriPeriAll=\"$PLANETSSunPeriPeriAll\"\n\n  # The planets have\
    \ an orbit that are located on their orbit of the Sun.\n  local planetsSunPeriPeriAllSun=\"\
    $PLANETSSunPeriPeriAllSun\"", "    local planet1=$1\n    local planet2=$2\n  \
    \  # Your code here", "\t# Your code here\n\tlocal planet1=$1\n\tlocal planet2=$2\n\
    \tlocal planets\n\n\tplanets=$(echo $planet1 $planet2 | tr ' ' '\\n' | grep -v\
    \ \"Earth\"\n\t| tr ' ' '\\n' | grep -v \"Mars\"\n\t| tr ' ' '\\n' | grep -v \"\
    Saturn\"\n\t| tr ' ' '\\n' | grep -v \"Jupiter\"\n\t| tr ' ' '\\n' | grep -v \"\
    Uranus\"\n\t| tr ' ' '\\n' | grep -v \"Neptune\"\n\t| tr ' ' '\\n' | grep -v \"\
    Mercury\"\n\t| tr ' ' '\\n' | grep -v \"Venus\"\n\t| tr ' ' '\\n' | grep -v \"\
    Mercury\"\n\t| tr ' ' '\\n' | grep -v \"Venus\"\n\t| tr ' ' '\\n' | grep -v \"\
    Mercury\"\n\t| tr ' ' '\\n' | grep -v \"Venus\"\n\t| tr ' ' '\\n' | grep -v \"\
    Mercury\"\n\t| tr ' ' '\\n' | grep -v \"Venus\"\n\t| tr ' ' '\\n' | grep -v \"\
    Mercury\"\n\t| tr ' ' '\\n' | grep -v \"Venus\"\n\t| tr ' ' '\\n' | grep -v \"\
    Mercury\"\n\t| tr ' ' '\\n' | grep -v \"Mercury\"\n\t| tr ' ' '\\n' | grep -v\
    \ \"Mercury\"\n\t| tr ' ' '\\n' | grep -v \"Mercury\"\n\t| tr ' ' '\\n' | grep\
    \ -v \"Mercury\"\n\t| tr ' ' '\\n' | grep -v \"Mercury\"\n\t| tr ' ' '\\n' | grep\
    \ -v \"Mercury\"\n\t| tr ' ' '\\n' | grep -v \"Mercury\"\n\t| tr ' ' '\\n' | grep\
    \ -v \"Mercury\"\n\t| tr ' ' '\\n' | grep -v \"Mercury\"\n\t| tr ' ' '\\n' | grep\
    \ -v \"Mercury\"\n\t| tr ' ' '\\n' | grep -v \"Mercury\"\n\t| tr ' ' '\\n' | grep\
    \ -v \"Mercury\"\n\t| tr ' ' '\\n' | grep -v \"Mercury\"\n\t| tr ' ' '\\n' | grep\
    \ -v \"Mercury\"\n\t| tr ' ' '\\n' | grep -v \"Mercury\"\n\t| tr ' ' '\\n' | grep\
    \ -v \"Mercury\"\n\t| tr ' ' '\\n' | grep -v \"", "    local planet1=${1}\n  \
    \  local planet2=${2}\n    if [[ ${planet1} == \"Mercury\" ]]; then\n        local\
    \ mercury_orbit=$(./planet_orbital ${planet2} 2>/dev/null)\n        local mercury_distance=$(echo\
    \ \"${mercury_orbit}\" | jq -r '.distance')\n        local mercury_name = $(echo\
    \ \"${mercury_orbit}\" | jq -r '.name')\n        if [[ \"${mercury_distance}\"\
    \ == \"null\" ]]; then\n            echo \"${mercury_name}\"\n        else\n \
    \           echo \"${mercury_name}, ${mercury_distance}\"\n        fi\n    elif\
    \ [[ ${planet1} == \"Venus\" ]]; then\n        local venus_orbit=$(./planet_orbital\
    \ ${planet2} 2>/dev/null)\n        local venus_distance=$(echo \"${venus_orbit}\"\
    \ | jq -r '.distance')\n        local venus_name = $(echo \"${venus_orbit}\" |\
    \ jq -r '.name')\n        if [[ \"${venus_distance}\" == \"null\" ]]; then\n \
    \           echo \"${venus_name}\"\n        else\n            echo \"${venus_name},\
    \ ${venus_distance}\"\n        fi\n    elif [[ ${planet1} == \"Earth\" ]]; then\n\
    \        local earth_orbit=$(./planet_orbital ${planet2} 2>/dev/null)\n      \
    \  local earth_distance=$(echo \"${earth_orbit}\" | jq -r '.distance')\n     \
    \   local earth_name = $(echo \"${earth_orbit}\" | jq -r '.name')\n        if\
    \ [[ \"${earth_distance}\" == \"null\" ]]; then\n            echo \"${earth_name}\"\
    \n        else\n            echo \"${earth_name}, ${earth_distance}\"\n      \
    \  fi\n    elif [[ ${planet1} == \"Mars\" ]]; then\n        local mars_orbit=$(./planet_orbital\
    \ ${planet2} 2>/dev/null)\n        local mars_distance=$(echo \"${mars_orbit}\"\
    \ | jq -r '.distance')\n        local mars_name = $(echo \"${mars_orbit}\" | jq\
    \ -r '.name')\n        if [[ \"${mars_distance}\" == \"null\" ]]; then\n     \
    \       echo \"${mars_name}\"\n        else\n            echo \"${mars_name},\
    \ ${mars_distance}\"\n        fi\n    elif [[ ${planet1} == \"Jupiter\" ]]; then\n\
    \        local jupiter_orbit=$(./planet_orbital ${planet2} 2>/dev/null)\n    \
    \    local jupiter_distance=$(echo \"${jupiter_orbit", "\t[[ $(echo ${1} | cut\
    \ -c 1-3) == 'Mercury' ]] && [[ $(echo ${1} | cut -c 5-6) == 'Jupiter' ]] && [[\
    \ $(echo ${1} | cut -c 7-8) == 'Saturn' ]] && [[ $(echo ${1} | cut -c 9-10) ==\
    \ 'Uranus' ]] && [[ $(echo ${1} | cut -c 11-12) == 'Neptune' ]] && [[ $(echo ${1}\
    \ | cut -c 14-15) == 'Earth' ]] && [[ $(echo ${2} | cut -c 1-3) == 'Mercury' ]]\
    \ && [[ $(echo ${2} | cut -c 5-6) == 'Jupiter' ]] && [[ $(echo ${2} | cut -c 7-8)\
    \ == 'Saturn' ]] && [[ $(echo ${2} | cut -c 9-10) == 'Uranus' ]] && [[ $(echo\
    \ ${2} | cut -c 11-12) == 'Neptune' ]] && [[ $(echo ${2} | cut -c 14-15) == 'Earth'\
    \ ]]", " planet1=$1\n planet2=$2\n \n \n \n if [ \"$planet1\" == \"Mercury\" ]\
    \ || [ \"$planet1\" == \"Venus\" ] || [ \"$planet1\" == \"Earth\" ] || [ \"$planet1\"\
    \ == \"Mars\" ] || [ \"$planet1\" == \"Jupiter\" ] || [ \"$planet1\" == \"Saturn\"\
    \ ] || [ \"$planet1\" == \"Uranus\" ] || [ \"$planet1\" == \"Neptune\" ]; then\n\
    \     echo \"$planet1\"\n else\n     return \"Planet not in solar system\"\n fi\n\
    \n if [ \"$planet2\" == \"Mercury\" ] || [ \"$planet2\" == \"Venus\" ] || [ \"\
    $planet2\" == \"Earth\" ] || [ \"$planet2\" == \"Mars\" ] || [ \"$planet2\" ==\
    \ \"Jupiter\" ] || [ \"$planet2\" == \"Saturn\" ] || [ \"$planet2\" == \"Uranus\"\
    \ ] || [ \"$planet2\" == \"Neptune\" ]; then\n     echo \"$planet2\"\n else\n\
    \     return \"Planet not in solar system\"\n fi\n\n \n \n \n\n ", "    local\
    \ planet1 planet2\n    planet1=$1\n    planet2=$2\n    local planets orbits\n\
    \    planets=\"$(getopt $0 --long planet1:,planet2: -- \"$@\")\"\n    [[ \"${planets}\"\
    \ = \"\" ]] && printf \"%s\\n\" \"Must supply two planet names!\" && exit 1\n\
    \    local i j\n    IFS=', ' read -r -a planets <<< \"${planets[@]}\"\n    planet1=\"\
    ${planets[1]}\"\n    planet2=\"${planets[2]}\"\n    orbits=\"$(orbit_planet \"\
    $planet1\" \"$planet2\")\"\n    # Sort the orbits\n    for ((i = 0; i < ${#orbits[@]};\
    \ i++)); do\n        for ((j = 0; j < ${#orbits[@]}; j++)); do\n            if\
    \ [[ ${orbits[i]} == ${orbits[j]} ]]; then\n                break\n          \
    \  fi\n        done\n    done\n    planets=\"${planets[@]}\"\n    for ((i = 0;\
    \ i < ${#orbits[@]}; i++)); do\n        if [[ ${orbits[i]} != ${orbits[i - 1]}\
    \ ]]; then\n            planets=\"${planets}' '${orbits[i]}\"\n        fi\n  \
    \  done\n    planets=\"$(echo \"${planets}\" | sort -k 2)\"\n    planets=\"$(echo\
    \ \"${planets}\" | uniq | sort -k 1)\"\n    # Return the planets\n    printf \"\
    %s\" \"${planets}\"", "  if [[ \"$1\" == \"Mercury\" || \"$1\" == \"Venus\" ||\
    \ \"$1\" == \"Earth\" || \"$1\" == \"Mars\" || \"$1\" == \"Jupiter\" || \"$1\"\
    \ == \"Saturn\" || \"$1\" == \"Uranus\" || \"$1\" == \"Neptune\" ]]; then\n  \
    \  planet=$1\n    planet1=$2\n    planet2=$3\n    if [[ \"$planet1\" == \"Mercury\"\
    \ ]]; then\n      planet1=$(echo \"$planet\" | awk '{print substr($1,1,3)}')\n\
    \    fi\n    if [[ \"$planet2\" == \"Mercury\" ]]; then\n      planet2=$(echo\
    \ \"$planet\" | awk '{print substr($1,2,3)}')\n    fi\n    distance=$(echo \"\
    $planet1\" | awk '{print sqrt(pow($3-$2,2)+pow($4-$3,2))}')\n    distance1=$(echo\
    \ \"$planet1\" | awk '{print sqrt(pow($5-$4,2)+pow($6-$5,2))}')\n    distance2=$(echo\
    \ \"$planet1\" | awk '{print sqrt(pow($7-$6,2)+pow($8-$7,2))}')\n    distance3=$(echo\
    \ \"$planet1\" | awk '{print sqrt(pow($9-$8,2)+pow($10-$9,2))}')\n    distance4=$(echo\
    \ \"$planet1\" | awk '{print sqrt(pow($11-$10,2)+pow($12-$11,2))}')\n    distance5=$(echo\
    \ \"$planet1\" | awk '{print sqrt(pow($13-$12,2)+pow($14-$13,2))}')\n    distance6=$(echo\
    \ \"$planet1\" | awk '{print sqrt(pow($15-$14,2)+pow($16-$15,2))}')\n    distance7=$(echo\
    \ \"$planet1\" | awk '{print sqrt(pow($17-$16,2)+pow($18-$17,2))}')\n    distance8=$(echo\
    \ \"$planet1\" | awk '{print sqrt(pow($19-$18,2)+pow($20-$19,2))}')\n    distance9=$(echo\
    \ \"$planet1\" | awk '{print sqrt(pow($21-$20,2)+pow($22-$21,2))}')\n    distance10=$(echo\
    \ \"$planet1\" | awk '{print sqrt(pow($23-$22,2)+pow($24-$23,2))}')\n    distance11=$(echo\
    \ \"$planet1\" | awk '{print sqrt(pow($25-$24,2)+pow", "    local planet1 planet2\n\
    \    planet1=\"${1%%\\\"}\"\n    planet2=\"${2%%\\\"}\"\n    if [[ \"$planet1\"\
    \ == \"$planet2\" ]]; then\n        if [[ $planet1 == Mercury ]]; then\n     \
    \       echo \"Mercury\"\n        elif [[ $planet1 == Venus ]]; then\n       \
    \     echo \"Venus\"\n        elif [[ $planet1 == Earth ]]; then\n           \
    \ echo \"Earth\"\n        elif [[ $planet1 == Mars ]]; then\n            echo\
    \ \"Mars\"\n        elif [[ $planet1 == Jupiter ]]; then\n            echo \"\
    Jupiter\"\n        elif [[ $planet1 == Saturn ]]; then\n            echo \"Saturn\"\
    \n        elif [[ $planet1 == Uranus ]]; then\n            echo \"Uranus\"\n \
    \       elif [[ $planet1 == Neptune ]]; then\n            echo \"Neptune\"\n \
    \       else\n            echo \"$planet1\"\n        fi\n    else\n        local\
    \ planet1orbit planet2orbit\n        planet1orbit=$(date -d \"tomorrow 12:00\"\
    \ '+%l')\n        planet2orbit=$(date -d \"tomorrow 12:00\" '+%l')\n        if\
    \ [[ \"$planet1\" == \"Mercury\" ]]; then\n            planet1orbit=$((${planet1orbit}+24*3600))\n\
    \            planet2orbit=$((${planet2orbit}+24*3600))\n        elif [[ \"$planet1\"\
    \ == \"Venus\" ]]; then\n            planet1orbit=$((${planet1orbit}+24*3600))\n\
    \            planet2orbit=$((${planet2orbit}+24*3600))\n        elif [[ \"$planet1\"\
    \ == \"Earth\" ]]; then\n            planet1orbit=$((${planet1orbit}+24*3600))\n\
    \            planet2orbit=$((${planet2orbit}+24*3600))\n        elif [[ \"$planet1\"\
    \ == \"Mars\" ]]; then\n            planet1orbit=$((${planet1orbit}+24*3600))\n\
    \            planet2orbit=$((${planet2orbit}+24*3600))\n        elif [[ \"$planet1\"\
    \ == \"Jupiter\" ]]; then\n            planet1orbit=$((${planet1orbit}+24*3600))\n\
    \            planet2orbit=$((${planet2orbit}+24*3600))\n        elif [[ \"$planet1\"\
    \ == \"Saturn\" ]]; then\n            planet1orbit=$((${planet1", "  local planet1\
    \ planet2\n  planet1=$1\n  planet2=$2\n  local planet_list\n  planet_list=\"$(\n\
    \    case \"${planet1}\"\n    in \n      Mercury|Venus|Earth|Mars|Jupiter|Saturn|Uranus|Neptune|Pluto)\n\
    \        echo \n        echo -n \"\\\"$planet1\\\":\"\n        echo \n       \
    \ echo -n \"\\\"$planet2\\\":\"\n        echo \n        echo -n \"\\\"$planet1\\\
    \":\"\n        echo \n        echo -n \"\\\"$planet1\\\":\"\n        echo \n \
    \       echo -n \"\\\"$planet2\\\":\"\n        echo \n        echo -n \"\\\"$planet1\\\
    \":\"\n        echo \n        echo -n \"\\\"$planet2\\\":\"\n        echo \n \
    \       echo -n \"\\\"$planet1\\\":\"\n        echo \n        echo -n \"\\\"$planet2\\\
    \":\"\n        echo \n        echo -n \"\\\"$planet1\\\":\"\n        echo \n \
    \       echo -n \"\\\"$planet1\\\":\"\n        echo \n        echo -n \"\\\"$planet1\\\
    \":\"\n        echo \n        echo -n \"\\\"$planet1\\\":\"\n        echo \n \
    \       echo -n \"\\\"$planet2\\\":\"\n        echo \n        echo -n \"\\\"$planet1\\\
    \":\"\n        echo \n        echo -n \"\\\"$planet1\\\":\"\n        echo \n \
    \       echo -n \"\\\"$planet1\\\":\"\n        echo \n        echo -n \"\\\"$planet1\\\
    \":\"\n        echo \n        echo -n \"\\\"$planet1\\\":\"\n        echo \n \
    \       echo -n \"\\\"$planet1\\\":\"\n        echo \n        echo -n \"\\\"$planet1\\\
    \":\"\n        echo \n        echo -n \"\\\"$planet1\\\":\"\n        echo \n \
    \       echo -n \"\\\"$planet1\\\":\"\n        echo \n        echo -n \"\\\"$planet1\\\
    \":\"\n        echo \n        echo -n \"\\\"$planet1\\\":\"\n        echo \n \
    \       echo -n \"\\\"$planet1\\\":\"\n        echo \n        echo -n \"\\\"$planet1\\\
    \":\"\n        echo \n        echo -", "    local planet1 planet2 found1 found2\n\
    \    found1=$(echo \"$1\" | grep -F \"^${planet1}$\" -a -A 1)\n    found2=$(echo\
    \ \"$2\" | grep -F \"^${planet2}$\" -a -A 1)\n    if [[ -n \"$found1\" ]] || [[\
    \ -n \"$found2\" ]] ; then\n        echo \"$found1$found2\"\n    else\n      \
    \  echo \"$planet1$planet2\"\n    fi", "  local planet1 planet2\n  # make sure\
    \ we are using bash, not zsh\n  local -x PLANETS=( \"Mercury\" \"Venus\" \"Earth\"\
    \ \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\" )\n  local -a planet_set\n\
    \n  planet1=$1\n  planet2=$2\n\n  planet_set=( ${PLANETS[@]} )\n\n  # make sure\
    \ both planets are correct\n  if [[ \"${planet_set[@]}\" =~ \"${planet1}\" ]];\
    \ then\n    planet_set=( ${planet_set[@]} )\n  fi\n\n  if [[ \"${planet_set[@]}\"\
    \ =~ \"${planet2}\" ]]; then\n    planet_set=( ${planet_set[@]} )\n  fi\n\n  #\
    \ loop through and find all the planets whose orbit are between the two planets\n\
    \  for planet in \"${planet_set[@]}\"; do\n    local -a planet_orbit\n    local\
    \ planet_orbit_set\n\n    planet_orbit=( $(rad $planet $planet) )\n    planet_orbit_set=(\
    \ ${planet_orbit[@]} )\n\n    # loop through and find the two planets whose orbit\
    \ are between the two planets\n    for planet_orbit in \"${planet_orbit_set[@]}\"\
    ; do\n      if [[ \"${planet_orbit}\" =~ \"${planet1}\" ]]; then\n        local\
    \ planet_orbit_set\n        local planet_orbit\n        planet_orbit=( $(rad $planet\
    \ $planet) )\n        planet_orbit_set=( ${planet_orbit[@]} )\n\n        if [[\
    \ \"${planet_orbit_set[@]}\" =~ \"${planet2}\" ]]; then\n          local planet_orbit_set\n\
    \          local planet_orbit\n          planet_orbit=( $(rad $planet $planet)\
    \ )\n          planet_orbit_set=( ${planet_orbit[@]} )\n\n          # loop through\
    \ all planets and find all planets that are within the radius between them\n \
    \         for planet_orbit in \"${planet_orbit_set[@]}\"; do\n            planet_orbit=(\
    \ $(rad $planet $planet) )\n            planet_orbit_set=( ${planet_orbit[@]}\
    \ )\n\n            if [[ \"${planet_orbit_set[@]}\" =~ \"${planet2}\" ]]; then\n\
    \              local ", "  local planet1 planet2\n  planet1=$1\n  planet2=$2\n\
    \n  if [ \"$planet1\" == \"Mercury\" ] && [ \"$planet2\" == \"Venus\" ]; then\n\
    \      echo \"Mercury\" \"Venus\"\n  elif [ \"$planet1\" == \"Venus\" ] && [ \"\
    $planet2\" == \"Earth\" ]; then\n      echo \"Venus\" \"Earth\"\n  elif [ \"$planet1\"\
    \ == \"Earth\" ] && [ \"$planet2\" == \"Mars\" ]; then\n      echo \"Earth\" \"\
    Mars\"\n  elif [ \"$planet1\" == \"Mars\" ] && [ \"$planet2\" == \"Jupiter\" ];\
    \ then\n      echo \"Mars\" \"Jupiter\"\n  elif [ \"$planet1\" == \"Jupiter\"\
    \ ] && [ \"$planet2\" == \"Saturn\" ]; then\n      echo \"Jupiter\" \"Saturn\"\
    \n  elif [ \"$planet1\" == \"Saturn\" ] && [ \"$planet2\" == \"Uranus\" ]; then\n\
    \      echo \"Saturn\" \"Uranus\"\n  elif [ \"$planet1\" == \"Uranus\" ] && [\
    \ \"$planet2\" == \"Neptune\" ]; then\n      echo \"Uranus\" \"Neptune\"\n  elif\
    \ [ \"$planet1\" == \"Neptune\" ] && [ \"$planet2\" == \"Mercury\" ]; then\n \
    \     echo \"Neptune\" \"Mercury\"\n  else\n      echo \"$planet1\" \"is not correct\
    \ planet name\"\n  fi", "    local i\n    local j\n    local i1\n    local i2\
    \ \n    local l\n    local n\n    local p\n\n    local output\n    local solar_system\
    \ \n    local planet1 \n    local planet2 \n    local planet1_orbit \n    local\
    \ planet2_orbit\n    local planet1_orbit_list\n    local planet2_orbit_list\n\
    \    local planet_list\n\n    solar_system=\"Mercury\"\n    planet1=\"Mercury\"\
    \n    planet2=\"Venus\"\n    output=()\n    if [ \"$1\" = \"Mercury\" ] || [ \"\
    $1\" = \"Venus\" ] || [ \"$1\" = \"Earth\" ] || [ \"$1\" = \"Mars\" ] || [ \"\
    $1\" = \"Jupiter\" ] || [ \"$1\" = \"Saturn\" ] || [ \"$1\" = \"Uranus\" ] ||\
    \ [ \"$1\" = \"Neptune\" ]\n    then\n        planet1_orbit=\"Mercury\"\n    \
    \    planet2_orbit=\"Venus\"\n        planet_list=\"Mercury\"\n        planet1_orbit_list=\"\
    Mercury\"\n        planet2_orbit_list=\"Venus\"\n    else\n        planet1_orbit=\"\
    $1\"\n        planet2_orbit=\"$2\"\n        planet_list=\"$1 $2\"\n        planet1_orbit_list=\"\
    $1\"\n        planet2_orbit_list=\"$2\"\n    fi\n    i=$((${#planet_list}-1))\n\
    \    j=$((${#planet1_orbit}-1))\n    i1=$((${#planet2_orbit}-1))\n    i2=$((${#planet1_orbit_list}-1))\n\
    \    l=$((${#solar_system}-1))\n    n=$((${#planet_list}-1))\n    p=$((${#planet_list}-1))\n\
    \n    while [ $p -le $n ]\n    do\n        if [ $i2 -eq 0 ]\n        then\n  \
    \          planet1_orbit=$planet_list[p]\n        else\n            planet1_orbit=$planet_list[p]\n\
    \        fi\n        if [ $i -eq 0 ]\n        then\n            planet2_orbit=$planet_list[p]\n\
    \        else\n            planet2_orbit=$planet_list[p]\n        fi\n       \
    \ if [ $i -eq 0 ]\n        then\n            planet1_orbit_list=$planet_list[p]\n\
    \        else\n            planet1_orbit_list=$planet_list[p]\n        fi\n  \
    \      if ", "    # YOUR CODE HERE\n    if [ \"$1\" == \"Mercury\" ] && [ \"$2\"\
    \ == \"Venus\" ]; then\n        echo $(echo \"Mercury Venus\" | sort -k 2 -n |\
    \ head -1)\n    else\n        echo $(echo \"Earth-$1\" | sort -k 2 -n | head -1)\n\
    \    fi", "    # Write your code here\n    planet1=\"$1\"\n    planet2=\"$2\"\n\
    \    \n    if [ \"$planet1\" = \"$planet2\" ]\n    then\n        echo \"$planet1\
    \ is the same planet as $planet2\"\n    else\n        echo \"The orbits of $planet1\
    \ are ${bf \"$planet2\" \"$planet1\"}\"\n    fi", "\tlocal planet1 planet2\n\t\
    planet1=$1\n\tplanet2=$2\n\n\tlocal planet1_orbit_dist\n\tplanet1_orbit_dist=$(getorbit\
    \ $planet1)\n\tif [ -z \"$planet1_orbit_dist\" ];\n\tthen\n\t\treturn 1\n\tfi\n\
    \tlocal planet2_orbit_dist\n\tplanet2_orbit_dist=$(getorbit $planet2)\n\tif [\
    \ -z \"$planet2_orbit_dist\" ];\n\tthen\n\t\treturn 1\n\tfi\n\tlocal planet1_orbit_dist\n\
    \tplanet1_orbit_dist=$(getorbit $planet1)\n\tif [ -z \"$planet1_orbit_dist\" ];\n\
    \tthen\n\t\treturn 1\n\tfi\n\tlocal planet2_orbit_dist\n\tplanet2_orbit_dist=$(getorbit\
    \ $planet2)\n\tif [ -z \"$planet2_orbit_dist\" ];\n\tthen\n\t\treturn 1\n\tfi\n\
    \tlocal planet1_orbit_dist\n\tplanet1_orbit_dist=$(getorbit $planet1)\n\tif [\
    \ -z \"$planet1_orbit_dist\" ];\n\tthen\n\t\treturn 1\n\tfi\n\tlocal planet2_orbit_dist\n\
    \tplanet2_orbit_dist=$(getorbit $planet2)\n\tif [ -z \"$planet2_orbit_dist\" ];\n\
    \tthen\n\t\treturn 1\n\tfi\n\tlocal planet1_orbit_dist\n\tplanet1_orbit_dist=$(getorbit\
    \ $planet1)\n\tif [ -z \"$planet1_orbit_dist\" ];\n\tthen\n\t\treturn 1\n\tfi\n\
    \tlocal planet2_orbit_dist\n\tplanet2_orbit_dist=$(getorbit $planet2)\n\tif [\
    \ -z \"$planet2_orbit_dist\" ];\n\tthen\n\t\treturn 1\n\tfi\n\tlocal planet1_orbit_dist\n\
    \tplanet1_orbit_dist=$(getorbit $planet1)\n\tif [ -z \"$planet1_orbit_dist\" ];\n\
    \tthen\n\t\treturn 1\n\tfi\n\tlocal planet2_orbit_dist\n\tplanet2_orbit_dist=$(getorbit\
    \ $planet2)\n\tif [ -z \"$planet2_orbit_dist\" ];\n\tthen\n\t\treturn 1\n\tfi\n\
    \tlocal planet1_orbit_dist\n", "    local planet1 planet2\n    planet1=$1\n  \
    \  planet2=$2\n    local planet1name planet2name\n    planet1name=$(echo \"$planet1\"\
    \ | sed -e 's/\\//\\\\\\//g')\n    planet2name=$(echo \"$planet2\" | sed -e 's/\\\
    //\\\\\\//g')\n    local planet1orbit planet2orbit\n    planet1orbit=$(echo \"\
    $planet1name\" | sed -e 's/^.//g')\n    planet2orbit=$(echo \"$planet2name\" |\
    \ sed -e 's/^.//g')\n    if [ -z \"$planet1\" ] || [ -z \"$planet2\" ]; then\n\
    \        echo \"You need to enter two planet names.\"\n    else\n        local\
    \ planet1sun planet2sun\n        planet1sun=$(echo \"$planet1orbit\" | sed -e\
    \ 's/^.//g')\n        planet2sun=$(echo \"$planet2orbit\" | sed -e 's/^.//g')\n\
    \        local planet1orbit_sun planet2orbit_sun\n        planet1orbit_sun=$(echo\
    \ \"$planet1orbit\" | sed -e 's/^.//g')\n        planet2orbit_sun=$(echo \"$planet2orbit\"\
    \ | sed -e 's/^.//g')\n        local planet1sun_orbit planet2sun_orbit\n     \
    \   planet1sun_orbit=$(echo \"$planet1sun\" | sed -e 's/^.//g')\n        planet2sun_orbit=$(echo\
    \ \"$planet2sun\" | sed -e 's/^.//g')\n        local planet1orbit_sun_orbit planet2orbit_sun_orbit\n\
    \        planet1orbit_sun_orbit=$(echo \"$planet1orbit_sun\" | sed -e 's/^.//g')\n\
    \        planet2orbit_sun_orbit=$(echo \"$planet2orbit_sun\" | sed -e 's/^.//g')\n\
    \        local planet1orbit_sun_orbit_sun planet2orbit_sun_orbit_sun\n       \
    \ planet1orbit_sun_orbit_sun=$(echo \"$planet1orbit_sun_orbit\" | sed -e 's/^.//g')\n\
    \        planet2orbit_sun_orbit_sun=$(echo \"$planet2orbit_", "    local i j\n\
    \    local planet1 planet2\n    planet1=$1\n    planet2=$2\n    local planet1orbit\
    \ planet2orbit\n    local distance\n    local orbit1\n    local orbit2\n    local\
    \ orbit1pos orbit2pos\n    local orbitid\n\n    #test if input is string\n   \
    \ [[ $1 =~ ^[[:alpha:]]+$ ]] || die \"Input must be only letters\"\n    [[ $2\
    \ =~ ^[[:alpha:]]+$ ]] || die \"Input must be only letters\"\n\n    distance=$(echo\
    \ $(orbit $planet1 $planet2))\n\n    #create empty list for output\n    orbit1=()\n\
    \    orbit2=()\n\n    #for each orbit\n    for i in $(seq 1 8) do\n        orbit1=($orbit1)\n\
    \        orbit2=($orbit2)\n\n        #get the position of each orbit\n       \
    \ orbitid=$(orbit $planet1 $planet2 | head -n $i | tail -n 1)\n        orbit1pos=$(orbit\
    \ $planet1 $orbitid)\n        orbit2pos=$(orbit $orbitid $planet2)\n\n       \
    \ #get distance\n        distance=$(echo \"$orbit1pos - $orbit2pos\" | bc -l |\
    \ tr -d '\\n')\n        distance=$(echo \"scale=3; $distance\" | bc -l | tr -d\
    \ '\\n')\n\n        #if distance is smaller than 0, then it's in the opposite\
    \ direction\n        if [ $distance -lt 0 ]; then\n            distance=`expr\
    \ $distance * -1`\n            orbit1=($(echo \"${orbit1[@]} $orbitid\"))\n  \
    \          orbit2=($(echo \"${orbit2[@]} $planet2\"))\n        fi\n\n        #check\
    \ if planet1 and planet2 are in orbit1\n        if [[ $orbit1 == *$planet1* ]];\
    \ then\n            #check if planet2 and planet1 are in orbit2\n            if\
    \ [[ $orbit2 == *$planet2* ]]; then\n                orbit1=($orbit1)\n      \
    \          orbit2=($orbit2)\n                break\n            fi\n        fi\n\
    \    done\n\n    #sort list by distance\n    orbit1=$(sort -n <<< \"${orbit1[@]}\"\
    )\n    orbit2=$(sort -n <<< \"${orbit2[@]}\")\n\n    #return sorted list\n   \
    \ echo \"${orbit1[@]}\"\n", "\tlocal planet1=${1}\n\tlocal planet2=${2}\n\n\t\
    while true; do\n\t\tif [[ -z ${planet1} || -z ${planet2} ]]; then\n\t\t\tbreak;\n\
    \t\tfi\n\t\tlocal solar_position=$(bf $planet1 $planet2)\n\t\tif [[ -z $solar_position\
    \ ]]; then\n\t\t\tbreak;\n\t\tfi\n\t\tlocal distance=$(echo \"$solar_position\"\
    |bc -l | grep -o \"[^0-9]*\")\n\t\tif [[ -z $distance ]]; then\n\t\t\tbreak;\n\
    \t\tfi\n\t\tlocal distance2=$(echo $distance|bc -l | grep -o \"[^0-9]*\")\n\t\t\
    local planet2=$(echo $planet2 | sed \"s/$planet1/$solar_position/g\")\n\t\tlocal\
    \ planet1=$(echo $planet1 | sed \"s/$planet2/$solar_position/g\")\n\t\tif [[ -z\
    \ $distance2 ]]; then\n\t\t\tbreak;\n\t\tfi\n\tdone\n\techo \"$planet1\"\n\techo\
    \ \"$planet2\"", "        planet1=${1%.*} #remove any extension if there is any\n\
    \        planet2=${2%.*} #remove any extension if there is any\n        if [[\
    \ \"$planet1\" == \"$planet2\" ]]; then\n                return 0\n        fi\n\
    \        echo $(bf $planet1 $planet2 | sort -nr | sed -n -e 's/^#\\([0-9]*\\).*/\\\
    1/p') | sed -e 's/^#//g'", "  local planet1 planet2\n  planet1=$1\n  planet2=$2\n\
    \  if [ ! -z \"$planet1\" ] && [ ! -z \"$planet2\" ]; then\n    local planet1_orb\n\
    \    local planet2_orb\n    local planet1_orb_time\n    local planet2_orb_time\n\
    \    local planet_time\n    local planet1_distance\n    local planet2_distance\n\
    \    local planet_distance\n\n    planet1_orb=$(echo $planet1 | awk '{print tolower($0)}')\n\
    \    planet2_orb=$(echo $planet2 | awk '{print tolower($0)}')\n    if [ ! -z \"\
    $planet1_orb\" ] && [ ! -z \"$planet2_orb\" ]; then\n      planet1_orb_time=$(date\
    \ -d \"now - $(($(echo $planet1_orb | awk '{print $3}')))\" +\"%a %b %d %H %M\
    \ %S %Y\")\n      planet2_orb_time=$(date -d \"now - $(($(echo $planet2_orb |\
    \ awk '{print $3}')))\" +\"%a %b %d %H %M %S %Y\")\n      planet_time=$(date -d\
    \ \"now - $(($(echo $planet1_orb | awk '{print $4}')))\" +\"%a %b %d %H %M %S\
    \ %Y\")\n\n      planet1_distance=$(echo $planet1_orb_time | awk '{print (($3<30)?$3+1:$3)}')\n\
    \      planet2_distance=$(echo $planet2_orb_time | awk '{print (($3<30)?$3+1:$3)}')\n\
    \      planet_distance=$(echo $planet_time | awk '{print (($4<30)?$4+1:$4)}')\n\
    \    fi\n\n    if [ $planet_distance -ge $planet1_distance ] && [ $planet_distance\
    \ -le $planet2_distance ]; then\n      local planet_time\n      planet_time=$(date\
    \ -d \"now - $(($(echo $planet1_orb | awk '{print $5}')))\" +\"%a %b %d %H %M\
    \ %S %Y\")\n      if [ -z \"$planet_time\" ]; then\n        local planet1_distance\n\
    \        local planet2_distance\n        local planet_distance\n        planet1_distance=$(echo\
    \ $planet1_orb_time ", "  local planet1=$1\n  local planet2=$2\n  local planet1Orbit=$(orbit\
    \ ${planet1})\n  local planet2Orbit=$(orbit ${planet2})\n  if [[ \"$planet1Orbit\"\
    \ == \"$planet2Orbit\" ]]; then\n    planets=$(echo \"$planet1Orbit\" \"$planet2Orbit\"\
    )\n  elif [[ \"$planet1Orbit\" > \"$planet2Orbit\" ]]; then\n    planets=$(echo\
    \ \"$planet2Orbit\" \"$planet1Orbit\")\n  else\n    planets=$(echo \"$planet1Orbit\"\
    \ \"$planet2Orbit\")\n  fi\n  echo \"${planets}\"", "  planet1=$1\n  planet2=$2\n\
    \  echo $(bf $planet1 $planet2)", '    # your code', "  local planet1=$1\n  local\
    \ planet2=$2\n\n  if [[ $planet1 =~ ^[A-Z][a-z]+$ && $planet2 =~ ^[A-Z][a-z]+$\
    \ ]]; then\n    if [[ $planet1 =~ $planet2 ]]; then\n      echo \"$planet1\"\n\
    \    else\n      echo \"$planet2\"\n    fi\n  else\n    echo \"Plan 1 $planet1\
    \ is not a planet name\"\n    echo \"Plan 2 $planet2 is not a planet name\"\n\
    \    return 1\n  fi", "  planet1=$1\n  planet2=$2\n  if [ \"$planet1\" = '\"\"\
    ' ]; then\n    planet1=\"Mercury\"\n  fi\n  if [ \"$planet2\" = '\"\"' ]; then\n\
    \    planet2=\"Earth\"\n  fi\n  list=$(for p in $(for n in $(for l in $(for m\
    \ in $(for n in $(for l in $(for m in $(for n in $(for l in $(for m in $(for n\
    \ in $(for l in $(for m in $(for n in $(for l in $(for m in $(for n in $(for l\
    \ in $(for m in $(for n in $(for l in $(for m in $(for n in $(for l in $(for m\
    \ in $(for n in $(for l in $(for m in $(for n in $(for l in $(for m in $(for n\
    \ in $(for l in $(for m in $(for n in $(for l in $(for m in $(for n in $(for l\
    \ in $(for m in $(for n in $(for l in $(for m in $(for n in $(for l in $(for m\
    \ in $(for n in $(for l in $(for m in $(for n in $(for l in $(for m in $(for n\
    \ in $(for l in $(for m in $(for n in $(for l in $(for m in $(for n in $(for l\
    \ in $(for m in $(for n in $(for l in $(for m in $(for n in $(for l in $(for m\
    \ in $(for n in $(for l in $(for m in $(for n in $(for l in $(for m in $(for n\
    \ in $(for l in $(for m in $(for n in $(for l in $(for m in $(for n in $(for l\
    \ in $(for m in $(for n in $(for l in $(for m in $(for n in $(for l in $(for m\
    \ in $(for n in $(for l in $(for m in $(for n in $(for l in $(for m in $(for n\
    \ in $(for l in $(for m in $(for n in $(for l in $(for m in $(for n in $(for l\
    \ in $(for m in $(for n in $(for l in $(for m in $(for n in $(for l in $(for m\
    \ in $(for n in $(for l in $(for m in $(for n in $(for l in $(for m in $(for n\
    \ in $(for l in $(for m in $(for n in $(for l in $(for m in $(for n in $(for l\
    \ in $(for m in $(for n in $(for l in $(for m in $(for n in $(for l in $(for m\
    \ in $(for n in $(for l in $(for m in $(for n in $(for l in $(for m in $(for n\
    \ in $(for l in $(for m in $(for n in $(for l in $(for m in $(for n in $(for l\
    \ in $(for m in $(for n in $(for l in $(for m in $(for n in $(for l in $(for m\
    \ in ", "\techo \"$(bf \"$1\" \"$2\")\"", "    planet1=$(echo $1 | tr '[:upper:]'\
    \ '[:lower:]')\n    planet2=$(echo $2 | tr '[:upper:]' '[:lower:]')\n    local\
    \ x=0\n    local y=$((${#planet1}+${#planet2}))\n    local arr index\n    local\
    \ i=0\n\n    while [ $i -lt $y ]; do\n        arr[i]=$1\n        index[i]=$i\n\
    \        i=$(($i+1))\n    done\n\n    local count\n    count=$(($y-$x))\n    for\
    \ (( i=0; i<$count; i++ )); do\n        echo $((index[$i]-$x)) $arr[$((index[$i]-$x))]\n\
    \        x=$((index[$i]+1))\n    done", "    local planet1=$1\n    local planet2=$2\n\
    \    planet1\n    planet2\n    planet1=$(cat <<< $planet1)\n    planet2=$(cat\
    \ <<< $planet2)\n    echo $planet1\n    echo $planet2\n    echo $planet1$planet2",
  "    # $3 is a string that must be \"Mercury\", \"Venus\", \"Earth\", \"Mars\",\n\
    \    # \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    local name1 name2\n\
    \    name1=$1\n    name2=$2\n    local planets\n    planets=()\n    local distance\n\
    \    distance=`bf $name1 $name2 | grep -a -i \"distance\" | awk '{print $4}'`\n\
    \    if [ -n \"$distance\" ]\n    then\n        while read -r line\n        do\n\
    \            # this line is read line by line\n            if [[ $line =~ \"planet\"\
    \ ]]\n            then\n                # this line matches one of the patterns\
    \ \n                # \"planet\", then it matches something with the format\n\
    \                # \"planet name\", then it matches the pattern \"distance\"\n\
    \                planets+=($line)\n            fi\n        done <<< $(bf $name1\
    \ $name2 | grep -a -i \"planet\")\n    else\n        echo \"no planet was found\"\
    \n    fi\n    echo \"$planets\"", "    local planet1=$1 \n    local planet2=$2\n\
    \    local list \n\n    # Check for invalid planet names\n    if [[ ${planet1}\
    \ == \"\" ]] ||\n       [[ ${planet2} == \"\" ]]\n    then\n        echo \"Incorrect\
    \ planet names\"\n        return \n    fi\n\n    list=$(${scripts}/bf.sh)\n  \
    \  echo ${list}", "    local p1 p2\n    IFS='' read -r -a args <<< \"$@\"\n  \
    \  for p1 in \"${args[@]:0:2}\"; do\n        for p2 in \"${args[@]:2:2}\"; do\n\
    \            [[ \"$p1\" = \"$p2\" ]] || return \n        done\n    done\n    [[\
    \ \"$p1\" != \"$p2\" ]] && return \n    local i a j k l m n\n    i=$(( ${#args[@]}\
    \ - 2 ))\n    a=${args[$i]}\n    j=$(( i + 1 ))\n    k=${args[$j]}\n    l=$((\
    \ i + 2 ))\n    m=${args[$l]}\n    n=${args[$m]}\n    [[ \"$a\" != \"$j\" ]] ||\
    \ return \n    [[ \"$k\" != \"$m\" ]] || return \n    [[ \"$n\" != \"$l\" ]] ||\
    \ return \n    local arr i j k\n    arr=()\n    i=$(( ${#args[@]} - 2 ))\n   \
    \ while (( i <= $j )); do\n        (( i++))\n        arr+=(\"${args[$i]}\")\n\
    \    done\n    (( j++ ))\n    while (( j <= $k )); do\n        (( j++ ))\n   \
    \     arr+=(\"${args[$j]}\")\n    done\n    i=$(( ${#args[@]} - 2 ))\n    while\
    \ (( i <= $l )); do\n        (( i++ ))\n        arr+=(\"${args[$i]}\")\n    done\n\
    \    (( l++ ))\n    while (( l <= $m )); do\n        (( l++ ))\n        arr+=(\"\
    ${args[$l]}\")\n    done\n    i=$(( ${#args[@]} - 2 ))\n    while (( i <= $n ));\
    \ do\n        (( i++ ))\n        arr+=(\"${args[$i]}\")\n    done\n    (( n++\
    \ ))\n    while (( n <= $l )); do\n        (( n++ ))\n        arr+=(\"${args[$n]}\"\
    )\n    done\n    arr=($(echo \"${arr[*]}\" | sort -n))", "\tlocal P1=$1\n\tlocal\
    \ P2=$2\n\tlocal P \n\tlocal P1pos P1orbit P1orbit_inv \n\tlocal P2pos P2orbit\
    \ P2orbit_inv \n\tlocal P1_orbit P1_orbit_inv \n\tlocal P2_orbit P2_orbit_inv\
    \ \n\tlocal P1orbit_inv \n\tlocal P2orbit_inv \n\tP=$(echo \"$P1\" | tr '[A-Z]'\
    \ '[a-z]')\n\tP1pos=$(echo \"$P1$P\" | tr '[A-Z]' '[a-z]')\n\tP1orbit=$(echo \"\
    $P1$P\" | tr '[a-z]' '[A-Z]')\n\tP1orbit_inv=$(echo \"$P1$P1orbit\" | tr '[a-z]'\
    \ '[A-Z]')\n\tP2pos=$(echo \"$P2$P\" | tr '[A-Z]' '[a-z]')\n\tP2orbit=$(echo \"\
    $P2$P2orbit\" | tr '[a-z]' '[A-Z]')\n\tP2orbit_inv=$(echo \"$P2$P2orbit\" | tr\
    \ '[a-z]' '[A-Z]')\n\tP1_orbit=$(echo \"$P1$P1orbit\" | tr '[A-Z]' '[a-z]')\n\t\
    P1_orbit_inv=$(echo \"$P1$P1_orbit\" | tr '[a-z]' '[A-Z]')\n\tP2_orbit=$(echo\
    \ \"$P2$P2orbit\" | tr '[A-Z]' '[a-z]')\n\tP2_orbit_inv=$(echo \"$P2$P2_orbit\"\
    \ | tr '[a-z]' '[A-Z]')\n\tlocal i \n\ti=$(echo \"$P1$P2\" | tr '[A-Z]' '[a-z]')\n\
    \tP1orbit=$(echo \"$P1$P1orbit\" | tr '[a-z]' '[A-Z]')\n\tP2orbit=$(echo \"$P2$P2orbit\"\
    \ | tr '[a-z]' '[A-Z]')\n\tP1_orbit=$(echo \"$P1$P1orbit\" | tr '[A-Z]' '[a-z]')\n\
    \tP2_orbit=$(echo \"$P2$P2orbit\" | tr '[a-z]' '[A-Z]')\n\tlocal j\n\tj=0\n\t\
    while [ \"$j\" -lt \"$i\" ]; do\n\t\tif [[ $((P1orbit_inv <= $P2_orbit_inv)) ]];\
    \ then\n\t\t\tif [[ $((P1_orbit_inv <= P2_orbit_inv)) ]]; then\n\t\t\t\tP1orbit=$(echo\
    \ \"$P1$P1orbit\" | tr '[A-Z]' '[a-z]')\n\t\t\t\tP1_orbit=$(echo \"$P1$P1_orbit\"\
    \ | tr '[a-z]' '[A-Z]')", "\tlocal planet1=$1\n\tlocal planet2=$2\n\tlocal planets=\n\
    \t\n\t# Check the name format\n\t[[ \"$planet1\" =~ \"^[A-Za-z0-9]+$\" ]] || return\
    \ 1\n\t[[ \"$planet2\" =~ \"^[A-Za-z0-9]+$\" ]] || return 1\n\t\n\t# Calculate\
    \ distance between the planets\n\tplanet1=$(echo \"${planet1}\" | tr -d '\"')\n\
    \tplanet2=$(echo \"${planet2}\" | tr -d '\"')\n\tplanets=$(echo \"$(echo \"${planet1}-${planet2}\"\
    \ | awk '{print $1}'| sort -n | uniq -d)\")\n\t\n\t# Sort the planets by proximity\
    \ to the sun\n\tplanets=\"$(echo \"${planets}\" | sort -n)\"\n\t\n\t# Check the\
    \ format of the planet name\n\t[[ -z \"$planets\" ]] || return 1\n\t\n\t# Return\
    \ the planets\n\techo \"${planets}\"", "    local planet1 planet2\n    planet1=$1\n\
    \    planet2=$2\n    if [ $# -eq 2 ]\n        then\n            local planets\n\
    \            planets=$(echo $(bf \"$planet1\" \"$planet2\") | tr ' ' ',')\n  \
    \          if [ -n \"$planets\" ]\n                then\n                    local\
    \ planet_list\n                    planet_list=\"'${planets}'\"\n            \
    \        if [ \"$planet_list\" != \"$planets,\" ]\n                        then\n\
    \                            planet_list=\"$planet_list,\"\n                 \
    \   fi\n                    planet_list=\"$planet_list$planet2\"\n           \
    \         planet_list=\"$planet_list,\"\n                    if [ \"$planet_list\"\
    \ != \"$planet2,\" ]\n                        then\n                         \
    \   planet_list=\"$planet_list$planet1\"\n                        fi\n       \
    \             planet_list=\"$planet_list$planet2\"\n                    planet_list=\"\
    $planet_list$planet1\"\n                    planet_list=\"$planet_list,$(bf \"\
    $planet2\" \"$planet1\")\"\n                    planet_list=\"$planet_list,$(bf\
    \ \"$planet1\" \"$planet2\")\"\n                    planet_list=\"$planet_list,$(bf\
    \ \"$planet2\" \"$planet1\")\"\n                    planet_list=\"$planet_list,$(bf\
    \ \"$planet1\" \"$planet2\")\"\n                    planet_list=\"$planet_list,$(bf\
    \ \"$planet2\" \"$planet1\")\"\n                    planet_list=\"$planet_list,$(bf\
    \ \"$planet1\" \"$planet2\")\"\n                    planet_list=\"$planet_list,$(bf\
    \ \"$planet2\" \"$planet1\")\"\n                    planet_list=\"$planet_list,$(bf\
    \ \"$planet1\" \"$planet2\")\"\n                    planet_list=\"$planet_list,$(bf\
    \ \"$planet2\" \"$planet1\")\"\n                    planet_list=\"$planet_list,$(bf\
    \ \"$planet1\" \"$planet2\")\"\n                    planet_list=\"$planet_list,$(bf\
    \ \"$planet2\" \"$planet1\")\"\n                    planet_list=\"$planet_list,$(bf\
    \ \"$planet2\" \"$planet1\")\"\n                    planet_list=\"$planet_list,$(bf\
    \ \"$planet2\" \"$planet1\")\"\n                    planet_list=\"$planet_list,$(bf\
    \ \"$planet2\" \"$planet1\")\"\n                    planet_list=\"$planet_list,$(bf\
    \ \"$", "\tlocal planet1=$(echo \"$1\" | tr '[:upper:]' '[:lower:]')\n\tlocal\
    \ planet2=$(echo \"$2\" | tr '[:upper:]' '[:lower:]')\n\tlocal planetlist=\"$(\
    \ echo \"$planet1\" \"$planet2\" | tr \" \" \"_\" | sort | uniq)\"\n\tif [ \"\
    $(echo \"$planetlist\" | grep \"$planet1\" | wc -l)\" == \"1\" ]; then\n\t\tplanetlist=\"\
    $( echo \"$planet1\" \"$planet2\" | tr \" \" \"_\" | sort | uniq)\"\n\telse\n\t\
    \tplanetlist=\"$(echo \"$planetlist\" | tr \" \" \"_\" | sort | uniq)\"\n\tfi\n\
    \techo \"$planetlist\"", "    planet1=$1\n    planet2=$2\n    if [[ \"${planet1}\"\
    \ == \"Earth\" && \"${planet2}\" == \"Sun\" ]]; then\n        # $(bf \"Earth\"\
    \ \"Sun\") returns an empty string because planet1=Earth\n        # && planet2=Sun\
    \ returns an empty string\n        echo \"\"\n        return\n    fi\n\n    echo\
    \ ${!planet1}\n    echo ${!planet2}\n    local p1=${!planet1}\n    local p2=${!planet2}\n\
    \    if [[ ${p1} == \"Sun\" ]]; then\n        # $(bf \"Jupiter\" \"Neptune\")\
    \ returns an empty list because planet1=Jupiter\n        # && planet2=Neptune\
    \ returns an empty list\n        echo \"\"\n        return\n    fi\n\n    if [[\
    \ ${p2} == \"Sun\" ]]; then\n        # $(bf \"Jupiter\" \"Neptune\") returns an\
    \ empty list because planet1=Jupiter\n        # && planet2=Neptune returns an\
    \ empty list\n        echo \"\"\n        return\n    fi\n\n    local p1orbit1=$(orbit\
    \ ${planet1} ${p1})\n    local p1orbit2=$(orbit ${planet1} ${p2})\n    local p2orbit1=$(orbit\
    \ ${planet2} ${p1})\n    local p2orbit2=$(orbit ${planet2} ${p2})\n\n    local\
    \ porbit1=$(orbit ${p1} ${planet1})\n    local porbit2=$(orbit ${p2} ${planet2})\n\
    \    local o1=$(orbit ${p1orbit1} ${p1orbit2})\n    local o2=$(orbit ${p2orbit1}\
    \ ${p2orbit2})\n    local orb1=$(orbit ${p1orbit1} ${p2orbit1})\n    local orb2=$(orbit\
    \ ${p2orbit1} ${p1orbit2})\n    local p1=$(orbit ${p1orbit1} ${p1orbit2})\n  \
    \  local p2=$(orbit ${p2orbit1} ${p2orbit2})\n\n    if [[ ${p1orbit1} -lt ${p2orbit1}\
    \ ]]; then\n        local orbs=$(echo ${p1orbit1} ${orb1} ${p2orbit1} ${orb2}\
    \  | bc -l)\n    elif [[ ${p1orbit2} -lt ${p2orbit2} ]]; then\n        local orbs=$(echo\
    \ ${p1orbit2} ${orb1} ${p2orbit2} ${orb2}  | bc -l)\n    else\n        local orbs=$(echo\
    \ ${p1", "  local planet1 planet2\n  planet1=$1\n  planet2=$2\n  echo $(bf $planet1\
    \ $planet2) | sort", "    local planet1=$1\n    local planet2=$2\n    if [[ $planet1\
    \ = *\"'\"* ]]; then\n        planet1=\"${planet1}\"\n    fi\n    if [[ $planet2\
    \ = *\"'\"* ]]; then\n        planet2=\"${planet2}\"\n    fi\n\n    local planets=\"\
    $(bf $planet1 $planet2 | tr ' ' ',') $(bf $planet2 $planet1 | tr ' ' ',') $(bf\
    \ $planet1 $planet2 | tr ' ' ',') $(bf $planet2 $planet1 | tr ' ' ',') $(bf $planet1\
    \ $planet2 | tr ' ' ',') $(bf $planet2 $planet1 | tr ' ' ',') $(bf $planet1 $planet2\
    \ | tr ' ' ',') $(bf $planet2 $planet1 | tr ' ' ',') $(bf $planet1 $planet2 |\
    \ tr ' ' ',') $(bf $planet2 $planet1 | tr ' ' ',') $(bf $planet1 $planet2 | tr\
    \ ' ' ',') $(bf $planet2 $planet1 | tr ' ' ',') $(bf $planet1 $planet2 | tr '\
    \ ' ',') $(bf $planet2 $planet1 | tr ' ' ',') $(bf $planet1 $planet2 | tr ' '\
    \ ',') $(bf $planet2 $planet1 | tr ' ' ',') $(bf $planet1 $planet2 | tr ' ' ',')\
    \ $(bf $planet2 $planet1 | tr ' ' ',') $(bf $planet1 $planet2 | tr ' ' ',') $(bf\
    \ $planet2 $planet1 | tr ' ' ',') $(bf $planet1 $planet2 | tr ' ' ',') $(bf $planet2\
    \ $planet1 | tr ' ' ',') $(bf $planet1 $planet2 | tr ' ' ',') $(bf $planet2 $planet1\
    \ | tr ' ' ',') $(bf $planet1 $planet2 | tr ' ' ',') $(bf $planet2 $planet1 |\
    \ tr ' ' ',') $(bf $planet1 $planet2 ", "    planet1=$1\n    planet2=$2\n    planets=$(bf\
    \ $1 $2)\n    \n    for planet in $planets; do\n        echo \"$planet\"\n   \
    \ done", "  local planet1 planet2\n  planet1=\"$1\"\n  planet2=\"$2\"\n\n  # The\
    \ planets must be named correctly\n  case \"${planet1:-??}\" in\n    \"Mercury\"\
    )\n      local planets=\"Earth\"\n      ;;\n    \"Venus\")\n      local planets=\"\
    Mars\"\n      ;;\n    \"Earth\")\n      local planets=\"Jupiter\"\n      ;;\n\
    \    \"Mars\")\n      local planets=\"Saturn\"\n      ;;\n    \"Jupiter\")\n \
    \     local planets=\"Uranus\"\n      ;;\n    \"Saturn\")\n      local planets=\"\
    Neptune\"\n      ;;\n    \"Uranus\")\n      local planets=\"Neptune\"\n      ;;\n\
    \    \"Neptune\")\n      local planets=\"Mercury\"\n      ;;\n    *)\n      return\
    \ 0\n  esac\n\n  # If planet1 is not Sun, use $1 to calculate orbits for planet2\n\
    \  local planet1ORB=\n  local planet2ORB=\n  local planetORB=\n  local planet1ORBdist=\n\
    \  local planet2ORBdist=\n  local planetORBdist=\n\n  local planet1Orbits=\"${planet1ORB}${planetORB}\"\
    \n  local planet2Orbits=\"${planet2ORB}${planetORB}\"\n  local orbits=\"${planet1Orbits}${planet2Orbits}\"\
    \n\n  local planet1ORBdist=\"${planet1ORBdist}${planetORBdist}\"\n  local planet2ORBdist=\"\
    ${planet2ORBdist}${planetORBdist}\"\n  local planetORBdist=\"${planetORBdist}${planetORBdist}\"\
    \n\n  local dist1=\n  local dist2=\n\n  local orbit1=\" \"\n  local orbit2=\"\
    \ \"\n\n  # Loop through orbits and find distance\n  local orbit1Orbits=\"${orbits}\"\
    \n  local orbit2Orbits=\"${orbits}\"\n  for orbit in $orbit1Orbits; do\n    echo\
    \ \"${orbit}\"\n    for planet in $planets; do\n      echo \"${orbit}\"\n    done\n\
    \    orbit1=\"${orbit1:+ }${orbit}\"\n  done\n  for orbit in ", "  local planet1\
    \ planet2 planet1 planet2 \n\n  if [ \"${#}\" -eq \"1\" ]; then\n    planet1=$1\n\
    \  else\n    planet1=$1\n    planet2=$2\n  fi\n\n  if [ \"${#}\" -eq \"2\" ];\
    \ then\n    planet2=$1\n  else\n    planet2=$1\n    planet1=$2\n  fi\n\n  planet1=\"\
    $(bf $planet1)\"\n  planet2=\"$(bf $planet2)\"\n  echo \"$planet1\" \"${#planet1}\"\
    \n  echo \"$planet2\" \"${#planet2}\"\n\n  for (( i=0; i < ${#planet1}; i++ ));\
    \ do\n    for (( j=0; j < ${#planet2}; j++ )); do\n      if [ ${planet1:$i:1}\
    \ == \"$planet2:$j:1\" ]; then\n        echo \"$planet2:$j\"\n        break\n\
    \      fi\n    done\n  done", "  planet1=\"Sun\"\n  planet2=\"Earth\"\n  planet3=\"\
    Venus\"\n  planet4=\"Mars\"\n  planet5=\"Jupiter\"\n  planet6=\"Saturn\"\n  planet7=\"\
    Uranus\"\n  planet8=\"Neptune\"\n  case ${planet1} in\n    \"Mercury\") planet=\"\
    Mercury\";;\n    \"Venus\") planet=\"Venus\";;\n    \"Earth\") planet=\"Earth\"\
    ;;\n    \"Mars\") planet=\"Mars\";;\n    \"Jupiter\") planet=\"Jupiter\";;\n \
    \   \"Saturn\") planet=\"Saturn\";;\n    \"Uranus\") planet=\"Uranus\";;\n   \
    \ \"Neptune\") planet=\"Neptune\";;\n    *)\n      return -1\n  esac\n  case ${planet2}\
    \ in\n    \"Mercury\") planet2=\"Mercury\";;\n    \"Venus\") planet2=\"Venus\"\
    ;;\n    \"Earth\") planet2=\"Earth\";;\n    \"Mars\") planet2=\"Mars\";;\n   \
    \ \"Jupiter\") planet2=\"Jupiter\";;\n    \"Saturn\") planet2=\"Saturn\";;\n \
    \   \"Uranus\") planet2=\"Uranus\";;\n    \"Neptune\") planet2=\"Neptune\";;\n\
    \    *)\n      return -1\n  esac\n  case ${planet3} in\n    \"Mercury\") planet3=\"\
    Mercury\";;\n    \"Venus\") planet3=\"Venus\";;\n    \"Earth\") planet3=\"Earth\"\
    ;;\n    \"Mars\") planet3=\"Mars\";;\n    \"Jupiter\") planet3=\"Jupiter\";;\n\
    \    \"Saturn\") planet3=\"Saturn\";;\n    \"Uranus\") planet3=\"Uranus\";;\n\
    \    \"Neptune\") planet3=\"Neptune\";;\n    *)\n      return -1\n  esac\n  case\
    \ ${planet4} in\n    \"Mercury\") planet4=\"Mercury\";;\n    \"Venus\") planet4=\"\
    Venus\";;\n    \"Earth\") planet4=\"Earth\";;\n    \"Mars\") planet4=\"", "  \
    \  planet1=$1\n    planet2=$2\n    planet1=$(bf $planet1 \"Sun\")\n    planet2=$(bf\
    \ $planet2 \"Sun\")\n    planet1=$(bf $planet1 \"Moon\")\n    planet2=$(bf $planet2\
    \ \"Moon\")\n    planet1=$(bf $planet1 \"Mercury\")\n    planet2=$(bf $planet2\
    \ \"Mercury\")\n    planet1=$(bf $planet1 \"Venus\")\n    planet2=$(bf $planet2\
    \ \"Venus\")\n    planet1=$(bf $planet1 \"Earth\")\n    planet2=$(bf $planet2\
    \ \"Earth\")\n    planet1=$(bf $planet1 \"Mars\")\n    planet2=$(bf $planet2 \"\
    Mars\")\n    planet1=$(bf $planet1 \"Jupiter\")\n    planet2=$(bf $planet2 \"\
    Jupiter\")\n    planet1=$(bf $planet1 \"Saturn\")\n    planet2=$(bf $planet2 \"\
    Saturn\")\n    planet1=$(bf $planet1 \"Uranus\")\n    planet2=$(bf $planet2 \"\
    Uranus\")\n    planet1=$(bf $planet1 \"Neptune\")\n    planet2=$(bf $planet2 \"\
    Neptune\")\n    if [ \"$planet1\" == \"$planet2\" ]\n    then\n        echo \"\
    $planet1\"\n    else\n        echo \"$planet1\" \"$planet2\"\n    fi", "    local\
    \ planet1=$1\n    local planet2=$2\n    local solar=`solar-path $planet1 $planet2`\n\
    \    local planets=`echo $solar | cut -d \":\" -f 1`\n    echo $planets", "\t\
    planet1=$1\n\tplanet2=$2\n\t\n\t# Your code here\n\tlist1=$(python orbit.py $planet1\
    \ \"Sun\")\n\tlist2=$(python orbit.py $planet2 \"Sun\")\n\tresult=($(sort -n $list1\
    \ $list2))\n\techo \"${result[@]}\"", "    local planet1=$1 \n    local planet2=$2\n\
    \    local orbit1\n    local orbit2\n    local planet1_name\n    local planet2_name\n\
    \    local distance\n    local planet\n    local distance_list\n    \n    # Write\
    \ your code here\n    \n    \n    # $planet1 is a string\n    # $planet2 is a\
    \ string\n    # $orbit1 is a number\n    # $orbit2 is a number\n    # $planet1_name\
    \ is a string\n    # $planet2_name is a string\n    # $distance is a number\n\
    \    # $planet is a string\n    # $distance_list is a list\n    \n    distance_list=\"\
    \"\n    \n    if [[ \"$planet1\" = \"Mercury\" ]]; then\n        planet1_name=\"\
    Mercury\"\n    else\n        planet1_name=\"Earth -> $planet1\"\n    fi\n    \n\
    \    if [[ \"$planet2\" = \"Mercury\" ]]; then\n        planet2_name=\"Mercury\"\
    \n    else\n        planet2_name=\"Earth -> $planet2\"\n    fi\n    \n    if [[\
    \ \"$planet1\" = \"$planet2\" ]]; then\n        distance=$((orbit1-orbit2))\n\
    \        distance_list=\"$planet1_name\"\n    else\n        distance=$((orbit2-orbit1))\n\
    \        distance_list=\"$planet1_name -> $planet2_name\"\n    fi\n    \n    if\
    \ [[ $distance -gt 0 ]]; then\n        planet=$((distance % $2))\n        \n \
    \       if [[ \"$planet\" = $((planet + 1)) ]]; then\n            planet=\"$planet\"\
    \n        fi\n    else\n        planet=\"None\"\n    fi\n    \n    distance_list=\"\
    $distance_list $planet\"\n    \n    echo \"$distance_list\"", "    local planet1=$1\n\
    \    local planet2=$2\n    \n    local planets=(\"Mercury\" \"Venus\" \"Earth\"\
    \ \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n    \n    local planet1=$(echo\
    \ \"$planet1\" | tr '[A-Z]' '[a-z]')\n    local planet2=$(echo \"$planet2\" |\
    \ tr '[A-Z]' '[a-z]')\n    \n    # Check if planets is a list\n    if [ $(type\
    \ -t planets) != \"list\" ] ; then\n        echo \"$planet1 and $planet2 are not\
    \ correct planet names\"\n        echo \"$planets and $planet1 are not a list\"\
    \n        echo \"Input must be a list\"\n        echo \"Example: $(bf 'Mercury'\
    \ 'Neptune')\"\n        return 1\n    fi\n    \n    # Check to make sure both\
    \ planets are in the list\n    if [ ${#planets[@]} -le 4 ] && [ ${#planets[@]}\
    \ -le 4 ] ; then\n        local i=$(( ${#planets[@]} - 1 ))\n        \n      \
    \  # Check for planet name\n        if [ ${planets[$i]} != \"${planet1}\" ] &&\
    \ [ ${planets[$i]} != \"${planet2}\" ] ; then\n            echo \"$planet1 and\
    \ $planet2 are not correct planet names\"\n            echo \"$planets and $planet1\
    \ are not a list\"\n            echo \"Input must be a list\"\n            echo\
    \ \"Example: $(bf 'Mercury' 'Neptune')\"\n            return 1\n        fi\n \
    \       \n        local j=$(( ${#planets[@]} - 1 ))\n        local k=$(( ${#planets[@]}\
    \ - 1 ))\n        \n        # Check for planet name\n        if [ ${planets[$j]}\
    \ != \"${planet2}\" ] && [ ${planets[$k]} != \"${planet1}\" ] ; then\n       \
    \     echo \"$planet1 and $planet2 are not correct planet names\"\n          \
    \  echo \"$planets and $planet1 are not a list\"\n            echo \"Input must\
    \ be a list\"\n            echo \"Example: $(bf 'Mercury' 'Neptune')\"\n     \
    \       return 1\n        fi\n        \n        # Loop through planets\n     \
    \   until [ ${#planets[@]} -eq 0 ] ; do\n", "\tplanet1=$1\n\tplanet2=$2\n\ta='\"\
    '$planet1\n\tb='\"'$planet2\n\techo $b|bf $a", "    local planet1 planet2\n  \
    \  planet1=$1\n    planet2=$2\n    local planet_orbit\n    local planet_planet\n\
    \    local planet_orbit1\n    local planet_orbit2\n    local planet_orbit_planet\n\
    \    local distance\n    planet_orbit=(\"$planet1\" \"${planet2}\")\n    planet_planet=(\"\
    ${planet1}\" \"${planet2}\")\n    planet_orbit1=(\"$planet_orbit\" \"${planet_planet}\"\
    )\n    planet_orbit2=(\"${planet_orbit}\" \"${planet_planet}\")\n    planet_orbit_planet=(\"\
    ${planet_orbit1}\" \"${planet_orbit2}\")\n    distance=`echo \"scale=2 ; sqrt(($planet_orbit1[0]\
    \ - $planet_orbit2[0]) ^2 + ($planet_orbit1[1] - $planet_orbit2[1]) ^2)\" | bc`\n\
    \    distance=`echo \"scale=2 ; sqrt(($planet_orbit1[0] - $planet_orbit2[0]) ^2\
    \ + ($planet_orbit1[1] - $planet_orbit2[1]) ^2)\" | bc`\n    if [ -z $distance\
    \ ]\n    then\n        distance=0\n    fi\n    echo \"$planet1\"\n    echo \"\
    $planet2\"\n    echo \"$distance\"", "\tlocal -r planet1=$1\n\tlocal -r planet2=$2\n\
    \tlocal -n out=$(bf $planet1 $planet2 2> /dev/null | tail -1)\n\t[[ -n $out ]]\
    \ && echo $out", "    planet1=${1:-Mercury}\n    planet2=${2:-Earth}\n    planet1Orbit=${(awk\
    \ '{print $4$5$6$7}' ${PWD}/planets.txt)}\n    planet2Orbit=${(awk '{print $4$5$6$8}'\
    \ ${PWD}/planets.txt)}\n    planet1Orbit=${planet1Orbit/$'\\n'/}\n    planet2Orbit=${planet2Orbit/$'\\\
    n'/}\n    if [[ $planet1Orbit =~ $planet1$planet2 ]] || [[ $planet2Orbit =~ $planet1$planet2\
    \ ]]; then \n        echo \"$planet1$planet2\"\n    elif [[ $planet1Orbit =~ $planet2\
    \ ]] || [[ $planet2Orbit =~ $planet2 ]]; then \n        echo \"$planet2\"\n  \
    \  else\n        echo \"\"\n    fi", "    local planet1 planet2\n    planet1=$1\n\
    \    planet2=$2\n    local planet1coords planet2coords\n\n    planet1coords=$(planet\
    \ \"${planet1}\")\n    planet2coords=$(planet \"${planet2}\")\n    local planet1orbs\
    \ planet2orbs\n    local planet1orbsid planet2orbsid\n    planet1orbsid=$(planetorb\
    \ \"${planet1}\")\n    planet2orbsid=$(planetorb \"${planet2}\")\n    planet1orbs=$(planetorb\
    \ \"${planet1}\" | sed -n 's/.*/'\"${planet1orbsid}\"'/')\n    planet2orbs=$(planetorb\
    \ \"${planet2}\" | sed -n 's/.*/'\"${planet2orbsid}\"'/')\n    local planet1orbsindex\
    \ planet2orbsindex\n    planet1orbsindex=0\n    planet2orbsindex=0\n    while\
    \ [ \"${planet1orbs[${planet1orbsindex}]}\" != \"${planet2orbs[${planet2orbsindex}]}\"\
    \ ]\n    do\n        (( ${planet1orbsindex} += 1 ))\n    done\n    local planet1orbsminindex\
    \ planet2orbsminindex\n    planet1orbsminindex=0\n    planet2orbsminindex=0\n\
    \    while [ \"${planet1orbs[${planet1orbsminindex}]}\" != \"${planet2orbs[${planet2orbsminindex}]}\"\
    \ ]\n    do\n        (( ${planet1orbsminindex} += 1 ))\n    done\n    local planet1orbsmaxindex\
    \ planet2orbsmaxindex\n    planet1orbsmaxindex=0\n    planet2orbsmaxindex=0\n\
    \    while [ \"${planet1orbs[${planet1orbsmaxindex}]}\" != \"${planet2orbs[${planet2orbsmaxindex}]}\"\
    \ ]\n    do\n        (( ${planet1orbsmaxindex} += 1 ))\n    done\n    local planet1orbsminorb\
    \ planet2orbsminorb\n    planet1orbs", "    local planet1=$(echo \"$1\" | tr -d\
    \ '\\\"')\n    local planet2=$(echo \"$2\" | tr -d '\\\"')\n    local sun_distance\n\
    \    local planets_list\n    local distance\n\n    planets_list=()\n    planets=$(echo\
    \ \"$(bf \"$planet1\" \"$planet2\")\")\n\n    if [ \"$planets\" == \"\" ] ; then\n\
    \        echo \"$planet1 and $planet2 are not valid planet names\"\n        exit\
    \ 0\n    fi\n\n    sun_distance=$(echo $planet1 \"$planet2\" | bf | bf | cut -d\
    \ \" \" -f 3 | cut -d \"=\" -f 1)\n    \n    if [ \"$sun_distance\" == \"\" ]\
    \ ; then\n        echo \"The Sun is not in this planet\"\n        exit 0\n   \
    \ fi\n    \n    if [ \"$sun_distance\" == \"0\" ] ; then\n        echo \"$sun_distance\
    \ is zero. There is no orbit between the planets\"\n        exit 0\n    fi\n\n\
    \    distance=$(echo \"$sun_distance / 60\" | bf | bf | cut -d \"=\" -f 1 )\n\
    \    planets_list=\"$planets_list$distance,\"\n\n    for i in $(seq 0 6 ) ; do\n\
    \        if [ \"$distance\" == \"$i\" ] ; then\n            distance=$(( ${distance}\
    \ - 1 ))\n            planets_list=\"$planets_list$planets[$i]\"\n        fi\n\
    \    done\n\n    planets_list=\"$planets_list$planet2\"\n\n    echo \"$planets_list\"",
  "        local planet1=$1\n        local planet2=$2\n        local orbit_sun=\"\
    $(python -c 'from math import *; print (6.28318530717958 * pi / 180) * acos(-1.0)\
    \ ** 2; print (-1)')\"\n\n        if [ \"$planet1\" = \"$planet2\" ]; then\n \
    \               echo \"$planet1\"\n        else\n                if [ \"$planet1\"\
    \ = \"Mercury\" ]; then\n                        echo \"$planet2\"\n         \
    \       else\n                        if [ \"$planet2\" = \"Mercury\" ]; then\n\
    \                                echo \"$planet1\"\n                        else\n\
    \                                if [ \"$planet2\" = \"Venus\" ]; then\n     \
    \                                   echo \"$planet1\"\n                      \
    \          else\n                                        if [ \"$planet2\" = \"\
    Earth\" ]; then\n                                                echo \"$planet1\"\
    \n                                        else\n                             \
    \                   if [ \"$planet2\" = \"Mars\" ]; then\n                   \
    \                                     echo \"$planet1\"\n                    \
    \                            else\n                                          \
    \              if [ \"$planet2\" = \"Jupiter\" ]; then\n                     \
    \                                           echo \"$planet1\"\n              \
    \                                          else\n                            \
    \                                    if [ \"$planet2\" = \"Saturn\" ]; then\n\
    \                                                                        echo\
    \ \"$planet1\"\n                                                             \
    \   else\n                                                                   \
    \     if [ \"$planet2\" = \"Uranus\" ]; then\n                               \
    \                                                 echo \"$planet1\"\n        \
    \                                                                else\n      \
    \                                                                          if\
    \ [ \"$planet2\" = \"Neptune\" ]; then\n                                     \
    \                                                   echo \"$planet1\"\n      \
    \                                                                          else\n\
    \                                                                            \
    \            echo \"$planet1\"\n                                             \
    \                                   fi\n                                     \
    \                           fi\n                                             \
    \           fi\n                                fi\n                        fi\n\
    \                fi\n        fi", "    local planet1 planet2\n    planet1=$1\n\
    \    planet2=$2\n    planets=( Mercury Venus Earth Mars Jupiter Saturn Uranus\
    \ Neptune )\n    local i j\n    for ((i=0; i<${#planets[*]}; i++)); do\n     \
    \   [[ \"${planets[$i]}\" == \"$planet1\" ]] && break\n        [[ \"${planets[$i]}\"\
    \ == \"$planet2\" ]] && break\n    done\n    if [[ $i -eq 0 ]]; then\n       \
    \ # Planet1 is not a planet in our system\n        echo \"$planet1\" >&2\n   \
    \     return \n    elif [[ $i -eq 1 ]]; then\n        # Planet1 is a planet in\
    \ our system\n        echo \"$planet2\" >&2\n        return \n    elif [[ $i -gt\
    \ 1 ]]; then\n        # Planet1 is a planet in our system\n        echo \"$planet2\"\
    \ >&2\n        # Planet2 is in our system\n        echo \"$planet1\" >&2\n   \
    \     # Find all planets in our system between the planet1 and planet2\n     \
    \   for ((j=$i; j<${#planets[*]}; j++)); do\n            [[ \"${planets[$i]}\"\
    \ == \"${planets[$j]}\" ]] && break\n        done\n        if [[ $j -eq ${#planets[*]}\
    \ ]]; then\n            # Planet1 and planet2 are not in our system\n        \
    \    return \n        else\n            echo \"${planets[@]:$i-1:$j}\" >&2\n \
    \           return \n        fi\n    else\n        # Planet1 and planet2 are in\
    \ our system\n        echo \"${planets[@]:0:$i}\" >&2\n        # Find all planets\
    \ in our system between the planet1 and planet2\n        for ((j=$i+1; j<${#planets[*]};\
    \ j++)); do\n            [[ \"${planets[$i]}\" == \"${planets[$j]}\" ]] && break\n\
    \        done\n        if [[ $j -eq ${#planets[*]} ]]; then\n            # Planet1\
    \ and planet2 are not in our system\n            return \n        else\n     \
    \       echo \"${planets[@]:$i:$j}\" >&2\n            return \n        fi\n  \
    \  fi", "    local planet1 planet2\n    planet1=$1\n    planet2=$2\n    local\
    \ list i dist j\n    list=\" \"\n    if [ -n \"${planet1}\" ] && [ -n \"${planet2}\"\
    \ ]; then\n        for ((i=0; i<${#planets[@]}; i++)); do\n            local dist=${planets[i]}\n\
    \            for ((j=0; j<${#planets[@]}; j++)); do\n                if [ \"${planets[j]}\"\
    \ != \"${planets[i]}\" ]; then\n                    local dist1=$(bf ${planet1}\
    \ ${planets[j]})\n                    local dist2=$(bf ${planet2} ${planets[j]})\n\
    \                    if [[ \"${dist}\" == \"${dist1}\" ]]; then\n            \
    \            list=\"${list} ${planets[j]}\"\n                    fi\n        \
    \            if [[ \"${dist}\" == \"${dist2}\" ]]; then\n                    \
    \    list=\"${list} ${planets[j]}\"\n                    fi\n                fi\n\
    \            done\n        done\n        echo ${list}\n    fi", "\tset -- $(go\
    \ $1 $2)\n\tif [ \"$1\" != \"$2\" ]\n\tthen\n\t\techo \"$1 is not a planet name\
    \ and $2 is not a planet name\"\n\telse\n\t\techo \"$1 $2\"\n\tfi", "    planet1=$1\n\
    \    planet2=$2\n    if [ -z \"$planet1\" ] || [ -z \"$planet2\" ]; then\n   \
    \     echo \"Error: No planet names\"\n        return\n    fi\n    # Write your\
    \ solution here\n    planet1arr=$(echo $planet1 | tr [a-z] [A-Z])\n    planet2arr=$(echo\
    \ $planet2 | tr [a-z] [A-Z])\n    planet1str=$(echo $planet1 | tr [A-Z] [a-z])\n\
    \    planet2str=$(echo $planet2 | tr [A-Z] [a-z])\n    \n    # Find planet1's\
    \ orbit in planet2\n    planet1orbit=$(echo \"$planet2arr\" | grep -Fxq \"$planet1str\"\
    )\n    planet2orbit=$(echo \"$planet1arr\" | grep -Fxq \"$planet2str\")\n    if\
    \ [ $? -ne 0 ]; then\n        echo \"Error: planet1 not in planet2\"\n       \
    \ return\n    fi\n    # Find planet2's orbit in planet1\n    planet2orbit2=$(echo\
    \ \"$planet1arr\" | grep -Fxq \"$planet2str\")\n    planet1orbit2=$(echo \"$planet2arr\"\
    \ | grep -Fxq \"$planet1str\")\n    \n    # Return list of planets\n    if [ -z\
    \ \"$planet1orbit\" ] || [ -z \"$planet2orbit\" ] || [ -z \"$planet1orbit2\" ]\
    \ || [ -z \"$planet2orbit2\" ]; then\n        echo \"Error: planet1 and/or planet2\
    \ not present\"\n        return\n    fi\n    echo \"$planet1orbit,$planet2orbit\"\
    \n    echo \"$planet1orbit2,$planet2orbit2\"", "    planet1=\"$1\"\n    planet2=\"\
    $2\"\n    planet1name=\"\"\n    planet2name=\"\"\n    if [[ $planet1 != *\"'\"\
    * ]]; then\n      planet1name=\"$1\"\n      planet1=\"'$planet1'\"\n    fi\n \
    \   if [[ $planet2 != *\"'\"* ]]; then\n      planet2name=\"$2\"\n      planet2=\"\
    '$planet2'\"\n    fi\n    if [[ $(planet1name | tr -d '\"') == \"Earth\" ]]; then\n\
    \        planet1name=\"Earth\"\n    elif [[ $(planet1name | tr -d '\"') == \"\
    Mercury\" ]]; then\n        planet1name=\"Mercury\"\n    elif [[ $(planet1name\
    \ | tr -d '\"') == \"Venus\" ]]; then\n        planet1name=\"Venus\"\n    elif\
    \ [[ $(planet1name | tr -d '\"') == \"Mars\" ]]; then\n        planet1name=\"\
    Mars\"\n    elif [[ $(planet1name | tr -d '\"') == \"Jupiter\" ]]; then\n    \
    \    planet1name=\"Jupiter\"\n    elif [[ $(planet1name | tr -d '\"') == \"Saturn\"\
    \ ]]; then\n        planet1name=\"Saturn\"\n    elif [[ $(planet1name | tr -d\
    \ '\"') == \"Uranus\" ]]; then\n        planet1name=\"Uranus\"\n    elif [[ $(planet1name\
    \ | tr -d '\"') == \"Neptune\" ]]; then\n        planet1name=\"Neptune\"\n   \
    \ fi\n    if [[ $(planet2name | tr -d '\"') == \"Earth\" ]]; then\n        planet2name=\"\
    Earth\"\n    elif [[ $(planet2name | tr -d '\"') == \"Mercury\" ]]; then\n   \
    \     planet2name=\"Mercury\"\n    elif [[ $(planet2name | tr -d '\"') == \"Venus\"\
    \ ]]; then\n        planet2name=\"Venus\"\n    elif [[ $(planet2name | tr -d '\"\
    ') == \"Mars\" ]]; then\n        planet2name=\"Mars\"\n    elif [[ $(planet2name\
    \ | tr -d '\"') == \"Jupiter\" ]]; then\n        planet2name=\"Jupiter\"\n   \
    \ elif [[ $(planet2name | tr -d '\"') == \"Saturn\" ]]; then\n        planet2name=\"\
    Saturn\"\n    elif [[ ", "    planet1=$(echo $1 | cut -d'\"' -f2)\n    planet2=$(echo\
    \ $2 | cut -d'\"' -f2)\n    if (( $# == 2 )); then\n        echo \"$planet1\"\
    \ \"--$planet2\"\n        echo \"$planet1\" \"--$planet2\" |\n            sort\
    \ -n -k 2 -k 4 |\n            cut -d'\"' -f1,2 |\n            sed 's/^\"//g' |\n\
    \            sed 's/\"$//g' |\n            sed 's/--/,'\n        echo \"$planet1\"\
    \ \"--$planet2\" |\n            sort -n -k 2 -k 4 |\n            cut -d'\"' -f1,2\n\
    \    else\n        echo \"$planet1\" \"--$planet2\" | sort -n -k 2 -k 4\n    fi",
  "    if [ $1 != Mercury ] && [ $1 != Venus ] && [ $1 != Earth ] && [ $1 != Mars\
    \ ] && [ $1 != Jupiter ] && [ $1 != Saturn ] && [ $1 != Uranus ] && [ $1 != Neptune\
    \ ]; then\n        echo \"Sorry, this planet is not in our solar system!\"\n \
    \       return\n    fi\n    \n    if [ $2 != Mercury ] && [ $2 != Venus ] && [\
    \ $2 != Earth ] && [ $2 != Mars ] && [ $2 != Jupiter ] && [ $2 != Saturn ] &&\
    \ [ $2 != Uranus ] && [ $2 != Neptune ]; then\n        echo \"Sorry, this planet\
    \ is not in our solar system!\"\n        return\n    fi\n\n    planet1=$1\n  \
    \  planet2=$2\n\n    list1=$(bf $planet1 \"Mercury\")\n    list2=$(bf $planet2\
    \ \"Mercury\")\n    list3=$(bf $planet1 \"Venus\")\n    list4=$(bf $planet2 \"\
    Venus\")\n    list5=$(bf $planet1 \"Earth\")\n    list6=$(bf $planet2 \"Earth\"\
    )\n    list7=$(bf $planet1 \"Mars\")\n    list8=$(bf $planet2 \"Mars\")\n    list9=$(bf\
    \ $planet1 \"Jupiter\")\n    list10=$(bf $planet2 \"Jupiter\")\n    list11=$(bf\
    \ $planet1 \"Saturn\")\n    list12=$(bf $planet2 \"Saturn\")\n    list13=$(bf\
    \ $planet1 \"Uranus\")\n    list14=$(bf $planet2 \"Uranus\")\n    list15=$(bf\
    \ $planet1 \"Neptune\")\n    list16=$(bf $planet2 \"Neptune\")\n\n    list1=$(bf\
    \ $planet1 \"$list12\")\n    list2=$(bf $planet2 \"$list13\")\n    list3=$(bf\
    \ $planet1 \"$list14\")\n    list4=$(bf $planet2 \"$list15\")\n\n    list3=$(bf\
    \ $planet1 \"$list16\")\n    list4=$(bf $planet2 \"$list1\")\n\n    list5=$(bf\
    \ $planet1 \"$list3\")\n    list6=$(b", "    if [[ $1 =~ ^[A-Za-z][A-Za-z]$ &&\
    \ $2 =~ ^[A-Za-z][A-Za-z]$ ]]; then\n        planet1=\"${1%${1##*}}\"\n      \
    \  planet2=\"${2%${2##*}}\"\n        if [ \"$planet1\" == \"$planet2\" ]; then\n\
    \            echo \"$planet2\"\n        else\n            echo \"$planet1\"\n\
    \        fi\n    else\n        echo \"$1\"\n    fi", "    local p1 p2\n    p1=\"\
    $1\"\n    p2=\"$2\"\n    local ret\n    if [ \"$p1\" == \"$p2\" ]; then\n    \
    \   ret=\"[]\"\n    else\n       ret=$(jq --raw-output \\\n               '[to_entries[]\
    \ | select(.key == \"\\\"$p1\\\"\") | .value[] \\\n               | select(.key\
    \ == \"\\\"$p2\\\"\") | .value[]]' \\\n               ~/.cache/planets.json)\n\
    \    fi\n    echo \"$ret\"", "  local planet1=${1:-\"Mercury\"}\n  local planet2=${2:-\"\
    Venus\"}\n  local list=$(bf $planet1 $planet2 | sort -g | tail -n +2 | awk '{print\
    \ $1\"_\"$2}')\n  [[ -z $list ]] && echo \"No planets found in sunlight\" | return\n\
    \  echo \"$list\"", "    local planet1=${1?}\n    local planet2=${2?}\n    # Be\
    \ sure that both planets are strings\n    local planet1=$(echo \"$planet1\" |\
    \ tr -d '\"')\n    local planet2=$(echo \"$planet2\" | tr -d '\"')\n    \n   \
    \ local planet1long=$(bf \"$planet1\" | awk '{print $2}')\n    local planet2long=$(bf\
    \ \"$planet2\" | awk '{print $2}')\n    \n    if [ -z \"$planet1long\" ]\n   \
    \ then \n        echo \"$planet1 not a correct planet name\"\n        exit -1\n\
    \    fi\n    \n    if [ -z \"$planet2long\" ]\n    then\n        echo \"$planet2\
    \ not a correct planet name\"\n        exit -1\n    fi\n    \n    # Convert the\
    \ planets into decimal degrees\n    local planet1lat=$(bf \"$planet1\" | awk '{print\
    \ $4}')\n    local planet1lon=$(bf \"$planet1\" | awk '{print $5}')\n    local\
    \ planet2lat=$(bf \"$planet2\" | awk '{print $4}')\n    local planet2lon=$(bf\
    \ \"$planet2\" | awk '{print $5}')\n\n    # Calculate the difference between the\
    \ planets' longitudes\n    local planet1londiff=$((planet1lon-planet2lon))\n\n\
    \    # Calculate the difference between the planets' latitudes\n    local planet2latdiff=$((planet2lat-planet1lat))\n\
    \n    # Find an angle between the planets\n    local planet1angle=$((planet1londiff/2))\n\
    \    local planet2angle=$((planet2londiff/2))\n    \n    # Calculate the planets'\
    \ equatorial radius\n    local equatorialradius=$((planet1lat*planet1lon))\n\n\
    \    # Calculate the distance between the planets\n    local distance=$(echo \"\
    scale=1; ($planet1lat*$planet1lon) - ($planet2lat*$planet2lon)\" | bc)\n    \n\
    \    # Calculate the bearing between the planets\n    local bearing=$(echo \"\
    scale=1; ($planet1angle-$planet2angle)/180\" | bc)\n    \n    # Sort the list\
    \ of planets\n    local planetlist=$(echo \"$(b", "  if [ \"$1\" == \"Mercury\"\
    \ ] ; then \n      if [ \"$2\" == \"Venus\" ] ; then \n          echo \"\\\"Mercury\\\
    \"\"\n      elif [ \"$2\" == \"Earth\" ] ; then \n          echo \"\\\"Mercury\\\
    \", \\\"Venus\\\"\"\n      elif [ \"$2\" == \"Mars\" ] ; then \n          echo\
    \ \"\\\"Mercury\\\", \\\"Venus\\\", \\\"Earth\\\", \\\"Mars\\\"\"\n      elif\
    \ [ \"$2\" == \"Jupiter\" ] ; then \n          echo \"\\\"Mercury\\\", \\\"Venus\\\
    \", \\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\"\"\n      elif [ \"$2\" == \"\
    Saturn\" ] ; then \n          echo \"\\\"Mercury\\\", \\\"Venus\\\", \\\"Earth\\\
    \", \\\"Mars\\\", \\\"Jupiter\\\", \\\"Saturn\\\"\"\n      elif [ \"$2\" == \"\
    Uranus\" ] ; then \n          echo \"\\\"Mercury\\\", \\\"Venus\\\", \\\"Earth\\\
    \", \\\"Mars\\\", \\\"Jupiter\\\", \\\"Saturn\\\", \\\"Uranus\\\"\"\n      elif\
    \ [ \"$2\" == \"Neptune\" ] ; then \n          echo \"\\\"Mercury\\\", \\\"Venus\\\
    \", \\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\", \\\"Saturn\\\", \\\"Uranus\\\
    \", \\\"Neptune\\\"\"\n      elif [ \"$2\" == \"Mercury\" ] ; then \n        \
    \  echo \"\\\"Mercury\\\", \\\"Venus\\\", \\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\
    \", \\\"Saturn\\\", \\\"Uranus\\\", \\\"Neptune\\\"\"\n      fi\n  elif [ \"$1\"\
    \ == \"Venus\" ] ; then \n      if [ \"$2\" == \"Earth\" ] ; then \n         \
    \ echo \"\\\"Venus\\\"\"\n      elif [ \"$2\" == \"Mars\" ] ; then \n        \
    \  echo \"\\\"Venus\\\", \\\"Earth\\\", \\\"Mars\\\"\"\n      elif [ \"$2\" ==\
    \ \"Jupiter\" ] ; then \n          echo \"\\\"Venus\\\", \\\"Earth\\\", \\\"Mars\\\
    \", \\\"Jupiter\\\"\"\n      elif [ \"$2\" == \"Saturn\" ] ; then \n         \
    \ echo \"\\\"Venus\\\", \\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\", \\\"Saturn\\\
    \"\"\n      elif [ \"$2\" == \"Uranus\" ] ; then \n          echo \"\\\"Venus\\\
    \", \\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\", \\\"Saturn\\\", \\\"Uranus\\\
    \"\"\n      elif [ \"$2\" == \"Neptune\" ] ; then \n          echo \"\\\"Venus\\\
    \", \\\"Earth", "    [ \"$1\" ] && [ \"$2\" ] &&\n        planet1=\"'${1}'\"\n\
    \        planet2=\"'${2}'\"\n    planet1=\"${planet1}\"\n    planet2=\"${planet2}\"\
    \n    planet1=\"'${planet1}'\"\n    planet2=\"'${planet2}'\"\n    planet1=\"'${planet1}'\"\
    \n    planet2=\"'${planet2}'\"\n    planet1=\"'${planet1}'\"\n    planet2=\"'${planet2}'\"\
    \n    planet1=\"'${planet1}'\"\n    planet2=\"'${planet2}'\"\n    if [[ ! \"$planet1\"\
    \  =~ ^['\"].*['\"]$ ]]; then\n        planet1=\"'${planet1}'\"\n    fi\n    if\
    \ [[ ! \"$planet2\"  =~ ^['\"].*['\"]$ ]]; then\n        planet2=\"'${planet2}'\"\
    \n    fi\n    planet1=\"'${planet1}'\"\n    planet2=\"'${planet2}'\"\n    planet1=\"\
    '${planet1}'\"\n    planet2=\"'${planet2}'\"\n    planet1=\"'${planet1}'\"\n \
    \   planet2=\"'${planet2}'\"\n    planet1=\"'${planet1}'\"\n    planet2=\"'${planet2}'\"\
    \n    planet1=\"'${planet1}'\"\n    planet2=\"'${planet2}'\"\n    planet1=\"'${planet1}'\"\
    \n    planet2=\"'${planet2}'\"\n    planet1=\"'${planet1}'\"\n    planet2=\"'${planet2}'\"\
    \n    planet1=\"'${planet1}'\"\n    planet2=\"'${planet2}'\"\n    planet1=\"'${planet1}'\"\
    \n    planet2=\"'${planet2}'\"\n    planet1=\"'${planet1}'\"\n    planet2=\"'${planet2}'\"\
    \n    planet1=\"'${planet1}'\"\n    planet2=\"'${planet2}'\"\n    planet1=\"'${planet1}'\"\
    \n    planet2=\"'${planet2}'\"\n    planet1=\"'${planet1}'\"", "\tlocal -i i\n\
    \tlocal planet1 planet2\n\n\tplanet1=$1\n\tplanet2=$2\n\n\tif [ $# -ne 2 ]; then\n\
    \t\techo \"Usage: bf planet1 planet2\"\n\t\treturn\n\tfi\n\n\t# We only care about\
    \ the planets' orbits\n\ti=1\n\twhile [ $i -le 8 ]; do\n\t\tif [[ $planet1 ==\
    \ *\"Mercury\"$i ]] || \\\n\t\t   [[ $planet1 == *\"Venus\"$i ]] || \\\n\t\t \
    \  [[ $planet1 == *\"Earth\"$i ]] || \\\n\t\t   [[ $planet1 == *\"Mars\"$i ]]\
    \ || \\\n\t\t   [[ $planet1 == *\"Jupiter\"$i ]] || \\\n\t\t   [[ $planet1 ==\
    \ *\"Saturn\"$i ]] || \\\n\t\t   [[ $planet1 == *\"Uranus\"$i ]] || \\\n\t\t \
    \  [[ $planet1 == *\"Neptune\"$i ]]  || \\\n\t\t   [[ $planet2 == *\"Mercury\"\
    $i ]] || \\\n\t\t   [[ $planet2 == *\"Venus\"$i ]] || \\\n\t\t   [[ $planet2 ==\
    \ *\"Earth\"$i ]] || \\\n\t\t   [[ $planet2 == *\"Mars\"$i ]] || \\\n\t\t   [[\
    \ $planet2 == *\"Jupiter\"$i ]] || \\\n\t\t   [[ $planet2 == *\"Saturn\"$i ]]\
    \ || \\\n\t\t   [[ $planet2 == *\"Uranus\"$i ]] || \\\n\t\t   [[ $planet2 == *\"\
    Neptune\"$i ]]\n\t\tthen\n\t\t\tlocal orbit_1=$((${i}+2))\n\t\t\tlocal orbit_2=$((${i}+4))\n\
    \t\t\tlocal orbit_3=$((${i}+6))\n\t\t\tlocal orbit_4=$((${i}+8))\n\n\t\t\tif [[\
    \ $(orbit_1 -le ${orbit_2} && orbit_1 < ${orbit_3} && orbit_2 -le ${orbit_4} &&\
    \ orbit_2 < ${orbit_3}) || \n\t\t\t    $(orbit_2 -le ${orbit_1} && orbit_2 < ${orbit_4}\
    \ && orbit_1 < ${orbit_3}) || \n\t\t\t    $(orbit_3 -le ${orbit_1} && orbit_3\
    \ < ${orbit_2} && orbit_1 < ${orbit_4} && orbit_2 -le ${orbit_4} ) || ", "\tlocal\
    \ planet1=$1\n\tlocal planet2=$2\n\tlocal planet_list=\"\"\n\tlocal planet_1_name\n\
    \tlocal planet_2_name\n\tlocal planet_distance\n\tlocal planet_1_orbit_orbit_id\n\
    \tlocal planet_2_orbit_orbit_id\n\tlocal planet_1_name\n\tlocal planet_2_name\n\
    \tlocal planet_distance\n\tlocal planet_1_orbit_orbit_id\n\tlocal planet_2_orbit_orbit_id\n\
    \tlocal planet_1_name\n\tlocal planet_2_name\n\tlocal planet_distance\n\tlocal\
    \ planet_1_orbit_orbit_id\n\tlocal planet_2_orbit_orbit_id\n\tlocal planet_1_name\n\
    \tlocal planet_2_name\n\tlocal planet_distance\n\tlocal planet_1_orbit_orbit_id\n\
    \tlocal planet_2_orbit_orbit_id\n\tlocal planet_1_name\n\tlocal planet_2_name\n\
    \tlocal planet_distance\n\tlocal planet_1_orbit_orbit_id\n\tlocal planet_2_orbit_orbit_id\n\
    \tlocal planet_1_name\n\tlocal planet_2_name\n\tlocal planet_distance\n\tlocal\
    \ planet_1_orbit_orbit_id\n\tlocal planet_2_orbit_orbit_id\n\tlocal planet_1_name\n\
    \tlocal planet_2_name\n\tlocal planet_distance\n\tlocal planet_1_orbit_orbit_id\n\
    \tlocal planet_2_orbit_orbit_id\n\tlocal planet_1_name\n\tlocal planet_2_name\n\
    \tlocal planet_distance\n\tlocal planet_1_orbit_orbit_id\n\tlocal planet_2_orbit_orbit_id\n\
    \tlocal planet_1_name\n\tlocal planet_2_name\n\tlocal planet_distance\n\tlocal\
    \ planet_1_orbit_orbit_id\n\tlocal planet_2_orbit_orbit_id\n\tlocal planet_1_name\n\
    \tlocal planet_2_name\n\tlocal planet_distance\n\tlocal planet_1_orbit_orbit_id\n\
    \tlocal planet_2_orbit_orbit_id\n\tlocal planet_1_name\n\tlocal planet_2_name\n\
    \tlocal planet_distance\n\tlocal planet_1_orbit_orbit_id\n\tlocal planet_2_orbit_orbit_id\n\
    \tlocal planet_1_name\n\tlocal planet_2_name\n\tlocal planet_distance\n\tlocal\
    \ planet_1_orbit_", "\tlocal planet1=$1\n\tlocal planet2=$2\n\tlocal distance\n\
    \tlocal distance2\n\n\t# Checking the input argument\n\tif [ \"$planet1\" = \"\
    $planet2\" ]; then\n\t\techo \"$planet1 is a correct planet name.\"\n\telse\n\t\
    \techo \"$planet1 or $planet2 aren't correct planet names.\"\n\tfi\n\n\tdistance=$(echo\
    \ \"($planet1 == \"Mercury\") + (($planet1 == \"Venus\") \\\n\t\t+ ($planet1 ==\
    \ \"Earth\") + ($planet1 == \"Mars\") + ($planet1 == \"Jupiter\") \\\n\t\t+ ($planet1\
    \ == \"Saturn\") + ($planet1 == \"Uranus\") + ($planet1 == \"Neptune\")) \\\n\t\
    \t- (($planet2 == \"Mercury\") + (($planet2 == \"Venus\") \\\n\t\t+ ($planet2\
    \ == \"Earth\") + ($planet2 == \"Mars\") + ($planet2 == \"Jupiter\") \\\n\t\t\
    + ($planet2 == \"Saturn\") + ($planet2 == \"Uranus\") + ($planet2 == \"Neptune\"\
    ))) \\\n\t\t/ ($planet1 == $planet2 ? 0 : ($planet1 == \"Earth\" ? 1 : \\\n\t\t\
    ($planet1 == \"Mars\" ? 2 : ($planet1 == \"Jupiter\" ? 3 : \\\n\t\t($planet1 ==\
    \ \"Saturn\" ? 4 : ($planet1 == \"Uranus\" ? 5 : \\\n\t\t($planet1 == \"Neptune\"\
    \ ? 6 : ($planet2 == \"Earth\" ? 7 : \\\n\t\t($planet2 == \"Mars\" ? 8 : ($planet2\
    \ == \"Jupiter\" ? 9 : \\\n\t\t($planet2 == \"Saturn\" ? 10 : ($planet2 == \"\
    Uranus\" ? 11 : \\\n\t\t($planet2 == \"Neptune\" ? 12 : 0))))))))))))\n\tif [\
    \ \"$distance\" = \"-\" ]; then\n\t\tdistance=$(echo \"($planet1 == \"Mercury\"\
    ) + (($planet1 == \"Venus\") \\\n\t\t\t+ ($planet1 == \"Earth\") + ($planet1 ==\
    \ \"Mars\") + ($planet1 == \"Jupiter\") \\\n\t\t\t+ ($planet1 == \"Saturn\") +\
    \ ($planet1 == \"Uranus\") + ($planet1 == \"Neptune\")) \\\n\t\t\t- (($planet2",
  "    local planet1\n    local planet2\n    planet1=\"$1\"\n    planet2=\"$2\"\n\
    \    if [[ \"${planet1}\" == *\"Mercury\"* ]]; then \n    planet1=\"Venus\"\n\
    \    fi\n    if [[ \"${planet2}\" == *\"Mercury\"* ]]; then \n    planet2=\"Venus\"\
    \n    fi\n    if [[ \"${planet1}\" == *\"Venus\"* ]]; then \n    planet1=\"Earth\"\
    \n    fi\n    if [[ \"${planet2}\" == *\"Venus\"* ]]; then \n    planet2=\"Earth\"\
    \n    fi\n    if [[ \"${planet1}\" == *\"Earth\"* ]]; then \n    planet1=\"Mars\"\
    \n    fi\n    if [[ \"${planet2}\" == *\"Earth\"* ]]; then \n    planet2=\"Mars\"\
    \n    fi\n    if [[ \"${planet1}\" == *\"Mars\"* ]]; then \n    planet1=\"Jupiter\"\
    \n    fi\n    if [[ \"${planet2}\" == *\"Mars\"* ]]; then \n    planet2=\"Jupiter\"\
    \n    fi\n    if [[ \"${planet1}\" == *\"Jupiter\"* ]]; then \n    planet1=\"\
    Saturn\"\n    fi\n    if [[ \"${planet2}\" == *\"Jupiter\"* ]]; then \n    planet2=\"\
    Saturn\"\n    fi\n    if [[ \"${planet1}\" == *\"Saturn\"* ]]; then \n    planet1=\"\
    Uranus\"\n    fi\n    if [[ \"${planet2}\" == *\"Saturn\"* ]]; then \n    planet2=\"\
    Uranus\"\n    fi\n    if [[ \"${planet1}\" == *\"Uranus\"* ]]; then \n    planet1=\"\
    Neptune\"\n    fi\n    if [[ \"${planet2}\" == *\"Uranus\"* ]]; then \n    planet2=\"\
    Neptune\"\n    fi\n    if [[ \"${planet1}\" == *\"Neptune\"* ]]; then \n    planet1=\"\
    Mercury\"\n    fi\n    if [[ \"${planet2}\" == *\"Neptune\"* ]]; then \n    planet2=\"\
    Mercury\"\n    fi\n    if [[ \"${planet1}\" == *\"Mercury\"* ]]; then \n    planet1=\"\
    Venus\"\n    fi\n    if [[", "    local planet1=$1\n    local planet2=$2\n   \
    \ \n    if [[ ! \"$planet1\" =~ ^[a-zA-Z]+$ ]] || [[ ! \"$planet2\" =~ ^[a-zA-Z]+$\
    \ ]]; then\n        echo \"Your planet name is not valid! Please enter the correct\
    \ planet names.\"\n        echo \"Example: $(bf \"Earth\" \"Mercury\")\"\n   \
    \ else\n        echo \"$(bf \"$planet1\" \"$planet2\" | xargs -n 1 python ./bfplanet.py\
    \ \"$planet1\") $(bf \"$planet2\" \"$planet1\" | xargs -n 1 python ./bfplanet.py\
    \ \"$planet2\")\"\n    fi", "    planet1=$1\n    planet2=$2\n    planet1orbit=\"\
    $(getOrbit \"$planet1\" \"$planet2\" 0)\"\n    planet2orbit=\"$(getOrbit \"$planet2\"\
    \ \"$planet1\" 0)\"\n    planet1orbit=\"$(sort \"$planet1orbit\")\"\n    planet2orbit=\"\
    $(sort \"$planet2orbit\")\"\n    planet1orbit=$(bf \"$planet1orbit\" \"$planet2orbit\"\
    )\n    planet2orbit=$(bf \"$planet2orbit\" \"$planet1orbit\")\n    planet1orbit=\"\
    $(getPlanets \"$planet1orbit\")\"\n    planet2orbit=\"$(getPlanets \"$planet2orbit\"\
    )\"\n    echo \"$planet1orbit\"\n    echo \"$planet2orbit\"", "    local planet1\
    \ planet2\n    planet1=$1\n    planet2=$2\n    local planetlist\n    local x\n\
    \    local y\n    local z\n    local planet\n    local sun\n    local i\n    local\
    \ n\n    local distance\n\n    sun=$(cat /planets/sun.txt)\n    if [[ ${#sun}\
    \ -eq 0 ]]; then\n        echo \"sun is not set\"\n        return 1\n    fi\n\n\
    \    planetlist=$(bf $planet1 $planet2)\n    if [[ ${#planetlist} -eq 0 ]]; then\n\
    \        echo \"Not a known planet\"\n        return 1\n    fi\n\n    for ((i\
    \ = 0; i < ${#planetlist[@]}; i++)); do\n        planet=${planetlist[$i]}\n  \
    \      if [[ \"$planet\" != \"$planet1\" ]]; then\n            continue\n    \
    \    fi\n        if [[ \"$planet\" != \"$planet2\" ]]; then\n            continue\n\
    \        fi\n        \n        x=$((10 + 15*RANDOM))\n        y=$((20 + 15*RANDOM))\n\
    \        z=$((10 + 15*RANDOM))\n        distance=$(($(echo \"$(echo ${sun} | awk\
    \ '{print $2}') - $(x*x + y*y + z*z)\" | bc | cut -d'.' -f1)))\n        if ((distance\
    \ > 1000)); then\n            continue\n        fi\n        \n        planet=$planet\n\
    \        planetlist=$(bf $planet2 $planet)\n        if [[ ${#planetlist} -eq 0\
    \ ]]; then\n            echo \"Not a known planet\"\n        fi\n\n        for\
    \ ((n = 0; n < ${#planetlist[@]}; n++)); do\n            planet=${planetlist[$n]}\n\
    \            if [[ \"$planet\" != \"$planet2\" ]]; then\n                continue\n\
    \            fi\n            if [[ \"$planet\" != \"$planet1\" ]]; then\n    \
    \            continue\n            fi\n            \n            x=$((10 + 15*RANDOM))\n\
    \            y=$((20 + 15*RANDOM))\n            z=$((10 + 15*RANDOM))\n      \
    \      distance=$(($(echo \"$(echo ${sun} | awk '{print $2}') - $(x*x + y*y +\
    \ z*z)\" | bc | cut -d'.' -f1)))\n            if ((distance > 1000)); then\n \
    \               continue\n            fi\n            \n            planet=$planet\n\
    \            planetlist=$(bf $", "\tlocal planet1 planet2\n\t\n\tplanet1=\"${1//\\\
    \"/}\"\n\tplanet2=\"${2//\\\"/}\"\n\tif [ \"${planet1}\" != \"${planet2}\" ];\
    \ then \n\t\techo \"$planet1 is not a valid planet name.\"\n\t\techo \"$planet2\
    \ is not a valid planet name.\"\n\tfi\n\t\n\tlocal solarsystem\n\t\n\t# The planets\
    \ and sun are located in a system of equations:\n\t# \tSun x - Planet x = Solar\
    \ Radius\n\t# Solar Radius: sqrt(x^2 + y^2)\n\t# Planet x: planet distance from\
    \ the center of the Sun\n\t# x and y are variables names that refer to the current\
    \ value\n\t# of the variables during the iteration.\n\t\n\tsolarsystem=\"$(echo\
    \ \"scale=3;sqrt($(($(echo \"$(($(echo \"$(($(echo \"scale=2;$(($(echo \"scale=2;${sun_radius}^2-$(echo\
    \ \"scale=2;$((${planet_x}*${sun_radius})/${sun_radius})*${sun_radius}/(${planet_x}*${sun_radius})+${planet_y}*${sun_radius}))))))\"\
    |bc)))))\"|bc)\"\n\t\n\tif [ \"${solarsystem}\" -ge 0 ]; then\n\t\techo \"$(echo\
    \ \"$(($(echo \"$((${planet_x}*${sun_radius})/${sun_radius}+${planet_y}*${sun_radius})/${sun_radius})))\"\
    |bc)\"\n\telse\n\t\techo \"[]\"\n\tfi", "    local planet1=$1\n    local planet2=$2\n\
    \    local planets out\n    if [ \"$planet1\" = \"$planet2\" ]; then\n       \
    \ out=\"$planet1\"\n    elif [ \"$planet1\" = \"Jupiter\" ]; then\n        out=\"\
    $planet1 Mars Jupiter Mercury Venus Earth Mars Saturn Uranus Neptune \"\n    else\n\
    \        out=\"$planet2 $planet1\"\n    fi\n    for planet in $(bf $planet1 $planet2);\
    \ do\n        echo \"$out$planet\"\n    done", "    local planet1=$1\n    local\
    \ planet2=$2\n    local planets=()\n    local x=($(python3 -c \"import sys;print(sys.path)\"\
    ))\n    for dir in ${x[*]}; do\n        if [[ -d \"$dir\" ]]; then\n         \
    \   local testdir=$(cd \"$dir\" && pwd)\n            if [[ \"$testdir\" = \"$dir\"\
    \ ]]; then\n                # Test if current dir is a python package.\n     \
    \           if [[ -f \"$dir/__init__.py\" ]]; then\n                    local\
    \ pkg=$(cd \"$dir\" && ls --color=never | head -1)\n                    local\
    \ modname=$(python -m \"$pkg\" | cut -d'/' -f1)\n                    if [[ \"\
    $modname\" == \"$pkg\" ]]; then\n                        # We found a python package,\
    \ let's test it.\n                        local testpkg=$(bf \"$planet1\" \"$planet2\"\
    )\n                        if [[ -n \"$testpkg\" ]]; then\n                  \
    \          local testmod=$(bf \"$planet2\" \"$planet1\")\n                   \
    \         if [[ -n \"$testmod\" ]]; then\n                                echo\
    \ \"Found planets in $planet1 to $planet2\"\n                                planets+=($(echo\
    \ \"$testpkg\" | sed 's/ /\",\"/g'; echo \"$testmod\" | sed 's/ /\",\"/g'))\n\
    \                            fi\n                        fi\n                \
    \    fi\n                fi\n            fi\n        fi\n    done\n    if [[ -n\
    \ \"$planets\" ]]; then\n        planets=$(sort -n -r <<<\"$planets\")\n    fi\n\
    \    echo \"$planets\"", "    planet1=\"$1\"\n    planet2=\"$2\"\n    planet1name=\"\
    $(echo \"${planet1}\" | sed 's/\"//g')\"\n    planet2name=\"$(echo \"${planet2}\"\
    \ | sed 's/\"//g')\"\n    planet1name=\"${planet1name//[^a-zA-Z0-9]}\";\n    planet2name=\"\
    ${planet2name//[^a-zA-Z0-9]}\";\n    \n    \n    if [ \"$planet1name\" = \"$planet2name\"\
    \ ]; then\n        echo \"$planet1\"\n    else\n        if [ \"$planet1name\"\
    \ = \"Earth\" ]; then\n            echo \"$planet2\"\n        else\n         \
    \   if [ \"$planet2name\" = \"Earth\" ]; then\n                echo \"$planet1\"\
    \n            else\n                if [ \"$planet1name\" = \"Mercury\" ]; then\n\
    \                    if [ \"$planet2name\" = \"Venus\" ]; then\n             \
    \           echo \"$planet1\"\n                    else\n                    \
    \    if [ \"$planet1name\" = \"Venus\" ]; then\n                            echo\
    \ \"$planet2\"\n                        else\n                            if [\
    \ \"$planet2name\" = \"Mercury\" ]; then\n                                echo\
    \ \"$planet1\"\n                            else\n                           \
    \     if [ \"$planet2name\" = \"Venus\" ]; then\n                            \
    \        echo \"$planet2\"\n                                else\n           \
    \                         if [ \"$planet1name\" = \"Mars\" ]; then\n         \
    \                               if [ \"$planet2name\" = \"Jupiter\" ]; then\n\
    \                                            echo \"$planet1\"\n             \
    \                           else\n                                           \
    \ if [ \"$planet1name\" = \"Mars\" ]; then\n                                 \
    \               echo \"$planet2\"\n                                          \
    \  else\n                                                if [ \"$planet2name\"\
    \ = \"Jupiter\" ]; then\n                                                    echo\
    \ \"$planet1\"\n                                                else\n       \
    \                                             echo \"$planet2\"\n            \
    \                                    fi\n                                    \
    \        fi\n                                        fi\n                    \
    \                else\n                                        if [ \"$planet1name\"\
    \ = \"Mars\" ]; then\n                                            echo \"$planet2\"\
    \n                                        else\n                             \
    \               if [ \"$planet2name\" = \"Jupiter\" ]; then\n                \
    \                                echo \"$planet1\"\n                         \
    \                   else\n                                                echo\
    \ \"$planet2\"\n                                            fi\n             \
    \                           fi\n                                    fi\n     \
    \                           fi\n                            fi\n             \
    \           fi\n                    fi\n                else\n               \
    \     if [ \"$planet2name\" = \"Mercury\" ]; then\n                        echo\
    \ \"$planet1\"\n                    else\n                        if [ \"$planet2name\"\
    \ = \"Venus\" ]; then\n                            echo \"$planet1\"\n       \
    \                 else\n                            if [ \"$planet1name\" = \"\
    Mars\" ]; then\n                                if [ \"$planet2name\" = \"Jupiter\"\
    \ ]; then\n", "    local planet1 planet2\n    planet1=$1\n    planet2=$2\n   \
    \ if [ \"$planet1\" != Mercury ] || [ \"$planet2\" != Mercury ] || [ \"$planet1\"\
    \ != Venus ] || [ \"$planet2\" != Venus ] || [ \"$planet1\" != Earth ] || [ \"\
    $planet2\" != Earth ] || [ \"$planet1\" != Mars ] || [ \"$planet2\" != Mars ]\
    \ || [ \"$planet1\" != Jupiter ] || [ \"$planet2\" != Jupiter ] || [ \"$planet1\"\
    \ != Saturn ] || [ \"$planet2\" != Saturn ] || [ \"$planet1\" != Uranus ] || [\
    \ \"$planet2\" != Uranus ] || [ \"$planet1\" != Neptune ] || [ \"$planet2\" !=\
    \ Neptune ]; then\n        printf \"Planets %s and %s not recognised\\n\" \"$planet1\"\
    \ \"$planet2\"\n        return\n    else\n        local planet_list orbit1 orbit2\n\
    \        planet_list=\"Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\"\
    \ \"Uranus\" \"Neptune\"\n        orbit1=$(which orbit $planet_list)\n       \
    \ orbit2=$(which orbit $planet_list)\n        orbit1=$(echo $orbit1 | sed \"s/Planet\\\
    \ //g\")\n        orbit2=$(echo $orbit2 | sed \"s/Planet\\ //g\")\n        orbit1=$(echo\
    \ $orbit1 | sed \"s/orbit\\ //g\")\n        orbit2=$(echo $orbit2 | sed \"s/orbit\\\
    \ //g\")\n        orbit1=$(echo $orbit1 | sed \"s/\\ //g\")\n        orbit2=$(echo\
    \ $orbit2 | sed \"s/\\ //g\")\n        orbit1=$(echo $orbit1 | sed \"s/\\ //g\"\
    )\n        orbit2=$(echo $orbit2 | sed \"s/\\ //g\")\n        orbit1=$(echo $orbit1\
    \ | sed \"s/\\ //g\")\n        orbit2=$(echo $orbit2 | sed \"s/\\ //g\")\n   \
    \     orbit1=$(echo $orbit1 | sed \"s/\\ //g\")\n        orbit2=$(echo $orbit2\
    \ | sed \"s/\\ //g\")\n        orbit1=$(echo $orbit1 | sed \"s/\\ //g\")\n   \
    \     orbit2=$(echo $orbit2 | sed \"s/\\ //g\")\n        orbit1=$(echo $orbit1\
    \ | sed \"s/\\ //g\")\n        orbit2=$(echo $orbit2 | sed \"s/\\ //", "    local\
    \ -r planet1=$1\n    local -r planet2=$2\n    local -r results=$(${_stash_imp_pth}/bf\
    \ ${planet1} ${planet2})\n    echo \"${results[@]}\"", "\tif [[ $1 == Mercury\
    \ ]]; then\n\t\techo ${planets[@][:3]}\n\telif [[ $1 == Venus ]]; then\n\t\techo\
    \ ${planets[@][:4]}\n\telif [[ $1 == Earth ]]; then\n\t\techo ${planets[@][:5]}\n\
    \telif [[ $1 == Mars ]]; then\n\t\techo ${planets[@][:6]}\n\telif [[ $1 == Jupiter\
    \ ]]; then\n\t\techo ${planets[@][:7]}\n\telif [[ $1 == Saturn ]]; then\n\t\t\
    echo ${planets[@][:8]}\n\telif [[ $1 == Uranus ]]; then\n\t\techo ${planets[@][:9]}\n\
    \telif [[ $1 == Neptune ]]; then\n\t\techo ${planets[@][:10]}\n\telse\n\t\techo\
    \ \"Not a valid planet.\"\n\tfi", "    if [ \"$1\" = \"$2\" ]\n    then\n    \
    \    echo \"$1\"\n    fi", "  local planet1 planet2 \n  planet1=\"$1\" \n  planet2=\"\
    $2\" \n  local distance\n  if [ \"$planet1\" == \"\" -a \"$planet2\" == \"\" ]\n\
    \  then\n    return \n  fi \n  distance=$(get_distance \"$planet1\" \"$planet2\"\
    )\n  local name\n  for name in $(get_planet_names \"$planet1\" \"$planet2\");\
    \ do\n    if [ \"$name\" == \"$planet1\" ]\n    then\n      distance=$(get_distance\
    \ \"$name\" \"$planet2\")\n    elif [ \"$name\" == \"$planet2\" ]\n    then\n\
    \      distance=$(get_distance \"$planet1\" \"$name\")\n    fi\n    if [ \"$distance\"\
    \ -gt \"$distance\" ]\n    then \n      distance=$distance\n      planet_name=\"\
    $name\"\n    fi\n  done\n  echo \"$planet_name\"", "  planet1=$1\n  planet2=$2\n\
    \  \n  # Convert planet names to lower case so that we can ignore capitals \n\
    \  # and special characters \n  lower1=$( echo $planet1 | tr '[:upper:]' '[:lower:]'\
    \ ) \n  lower2=$( echo $planet2 | tr '[:upper:]' '[:lower:]' ) \n  \n  # Use the\
    \ planet names to calculate the orbits \n  planet1orbit=$(echo $lower1 | tr '[:lower:]'\
    \ '[:upper:]')\n  planet2orbit=$(echo $lower2 | tr '[:lower:]' '[:upper:]')\n\
    \  \n  # Convert the planet orbit strings to integers \n  planet1orbitint=$( echo\
    \ $planet1orbit | tr '[:upper:]' '[:digit:]' ) \n  planet2orbitint=$( echo $planet2orbit\
    \ | tr '[:upper:]' '[:digit:]' ) \n  \n  echo $(( $(echo \"$planet1orbitint-$planet2orbitint\"\
    \ | bc -l)/2 ))", "\tlocal planet1 planet2\n\t\n\tplanet1=${1:-Mercury}\n\tplanet2=${2:-Venus}\n\
    \t\n\t# Check that the arguments are valid planet names (i.e. contain no \n\t\
    # spaces)\n\t[ \"$planet1\" = \"Mercury\" ] || [ \"$planet1\" = \"Venus\" ] ||\
    \ [ \"$planet1\" = \"Earth\" ] || [ \"$planet1\" = \"Mars\" ] || [ \"$planet1\"\
    \ = \"Jupiter\" ] || [ \"$planet1\" = \"Saturn\" ] || [ \"$planet1\" = \"Uranus\"\
    \ ] || [ \"$planet1\" = \"Neptune\" ] || [ \"$planet1\" = \"Ceres\" ] || [ \"\
    $planet1\" = \"Pluto\" ] || [ \"$planet1\" = \"Eris\"] || [ \"$planet1\" = \"\
    Titan\" ] || [ \"$planet1\" = \"Sun\" ] || [ \"$planet1\" = \"Jupiter\" ] || [\
    \ \"$planet1\" = \"Moon\" ] || [ \"$planet1\" = \"Neptune\" ] || [ \"$planet1\"\
    \ = \"Uranus\" ] || [ \"$planet1\" = \"Venus\" ] || [ \"$planet1\" = \"Mercury\"\
    \ ] || [ \"$planet1\" = \"Earth\" ] || [ \"$planet1\" = \"Mars\" ] || [ \"$planet1\"\
    \ = \"Jupiter\" ] || [ \"$planet1\" = \"Saturn\" ] || [ \"$planet1\" = \"Uranus\"\
    \ ] || [ \"$planet1\" = \"Neptune\" ] || [ \"$planet1\" = \"Ceres\" ] || [ \"\
    $planet1\" = \"Pluto\" ] || [ \"$planet1\" = \"Eris\" ] || [ \"$planet1\" = \"\
    Titan\" ] || [ \"$planet1\" = \"Sun\" ] || [ \"$planet1\" = \"Jupiter\" ] || [\
    \ \"$planet1\" = \"Moon\" ] || [ \"$planet1\" = \"Neptune\" ] || [ \"$planet1\"\
    \ = \"Uranus\" ] || [ \"$planet1\" = \"Venus\" ] || [ \"$planet1\" = \"Mercury\"\
    \ ] || [ \"$planet1\" = \"Earth\" ] || [ \"$planet1\" = \"Mars\" ] || [ \"$planet1\"\
    \ = \"Jupiter\" ] || [ \"$planet1\" = \"Saturn\" ] || [ \"$planet1\" = \"Uranus\"\
    \ ] || [ \"$planet1\" = \"Neptune\" ] || [ \"$planet1\" = \"Ceres\" ] || [ \"\
    $planet1\" = \"Pluto\" ] || [ \"$planet1\" = \"Eris\" ] || [ \"$planet1\" = \"\
    Titan\" ] || [ \"$planet1\" = \"Sun\" ] || [ \"$planet1\" = \"Jupiter\" ] || [\
    \ \"$planet1\" = \"", "\tlocal planet1=$(echo \"$1\" | cut -d\" \" -f1)\n\tlocal\
    \ planet2=$(echo \"$2\" | cut -d\" \" -f1)\n\t\n\t# check whether $1 is a planet\
    \ name\n\tif [[ \"$planet1\" == *\"'\" ]]; then\n\t\techo \"$1\" | cut -d\"'\"\
    \ -f1\n\t\techo \"$1\" | cut -d\"'\" -f2\n\t\techo \"$1\" | cut -d\"'\" -f3\n\t\
    \techo \"$1\" | cut -d\"'\" -f4\n\t\techo \"$1\" | cut -d\"'\" -f5\n\t\techo \"\
    $1\" | cut -d\"'\" -f6\n\t\techo \"$1\" | cut -d\"'\" -f7\n\t\techo \"$1\" | cut\
    \ -d\"'\" -f8\n\t\techo \"$1\" | cut -d\"'\" -f9\n\t\techo \"$1\" | cut -d\"'\"\
    \ -f10\n\t\techo \"$1\" | cut -d\"'\" -f11\n\t\techo \"$1\" | cut -d\"'\" -f12\n\
    \t\techo \"$1\" | cut -d\"'\" -f13\n\t\techo \"$1\" | cut -d\"'\" -f14\n\t\techo\
    \ \"$1\" | cut -d\"'\" -f15\n\t\techo \"$1\" | cut -d\"'\" -f16\n\t\techo \"$1\"\
    \ | cut -d\"'\" -f17\n\t\techo \"$1\" | cut -d\"'\" -f18\n\t\techo \"$1\" | cut\
    \ -d\"'\" -f19\n\t\techo \"$1\" | cut -d\"'\" -f20\n\t\techo \"$1\" | cut -d\"\
    '\" -f21\n\t\techo \"$1\" | cut -d\"'\" -f22\n\t\techo \"$1\" | cut -d\"'\" -f23\n\
    \t\techo \"$1\" | cut -d\"'\" -f24\n\t\techo \"$1\" | cut -d\"'\" -f25\n\t\techo\
    \ \"$1\" | cut -d\"'\" -f26\n\t\techo \"$1\" | cut -d\"'\" -f27\n\t\techo \"$1\"\
    \ | cut -d\"'\" -f28\n\t\techo \"$1\" | cut -d\"'\" -f29\n\t\techo \"$1\" | cut\
    \ -d\"'\" -f30\n\t\techo \"$1\" | cut -d\"'\" -f31\n\t\techo \"$1\" | cut -d\"\
    '\" -f32\n\t\techo \"$1\" | cut -d\"'\" -f33\n\t\techo \"$1\" | cut -d\"'\" -f34\n\
    \t\techo \"$1\" | cut -d\"'\" -f35\n\t\techo \"$1\" | cut -d\"'\" -f36\n\t\techo\
    \ \"$1\" | cut -d\"'\" -f37\n\t\techo \"$1\" | cut -d\"'\" -f", "\tplanet1=\"\
    $1\";\n\tplanet2=\"$2\";\n\t\n\tif [ ${planet1:0:1} == \"\\\"\" -a ${planet1:0:1}\
    \ == \"'\" ]; then\n\t\tplanet1=${planet1#*\\\"};\n\t\tplanet1=${planet1%\\\"\
    };\n\t\tplanet1=${planet1%\\'};\n\tfi\n\tif [ ${planet2:0:1} == \"\\\"\" -a ${planet2:0:1}\
    \ == \"'\" ]; then\n\t\tplanet2=${planet2#*\\\"};\n\t\tplanet2=${planet2%\\\"\
    };\n\t\tplanet2=${planet2%\\'};\n\tfi\n\tif [ ${planet1:0:1} == \"'\" -a ${planet2:0:1}\
    \ == \"'\" ]; then\n\t\tplanet1=${planet1#*\\''};\n\t\tplanet1=${planet1%\\''};\n\
    \t\tplanet2=${planet2#*\\''};\n\t\tplanet2=${planet2%\\''};\n\tfi\n\t\n\t\n\t\
    # The planets must have the same number of elements\n\t\n\tnum=`expr \"$planet1\"\
    \ : '^\\(.*\\)$'`\n\tif [ \"$num\" != \"$num\" ]; then\n\t\treturn 0\n\tfi\n\t\
    num=`expr \"$planet2\" : '^\\(.*\\)$'`\n\tif [ \"$num\" != \"$num\" ]; then\n\t\
    \treturn 0\n\tfi\n\t\n\t# If both elements of the list are correct planet names,\
    \ then\n\t# the list must be empty.\n\t\n\tif [ -z \"$planet1\" -a -z \"$planet2\"\
    \ ]; then\n\t\treturn 0\n\tfi\n\t\n\t# If the list is empty, it must contain at\
    \ least one planet\n\t# name.\n\t\n\tif [ -z \"$1\" -a -z \"$2\" ]; then\n\t\t\
    return 0\n\tfi\n\t\n\t\n\t# Get the orbit names of the first and second planets\n\
    \t\n\torb1=`ls orb*$planet1*`\n\tif [ -z \"$orb1\" ]; then\n\t\torb1=`ls orb*$planet1`\n\
    \t\tif [ -z \"$orb1\" ]; then\n\t\t\treturn 0\n\t\tfi\n\tfi\n\torb2=`ls orb*$planet2*`\n\
    \tif [ -z \"$orb2\" ]; then\n\t\torb2=`ls orb*$planet2`\n\t\tif [ -z \"$orb2\"\
    \ ]; then\n\t\t\treturn 0\n\t\tfi", "\tlocal i\n\tlocal n\n\tlocal a\n\tlocal\
    \ b\n\tlocal p\n\tlocal s\n\tlocal planets\n\tlocal temp\n\tlocal c\n\t\n\tc=$(awk\
    \ '{print $1}' ${1})\n\tn=$(awk '{print $1}' ${2})\n\t\n\tplanets=($(bf $n $n))\n\
    \n\tfor ((i=0;i<${#planets[@]};i+=1));do\n\t\tc=$(awk -v i=${i} 'BEGIN {print\
    \ i}' ${1})\n\t\tb=$(awk -v i=${i} 'BEGIN {print i}' ${2})\n\t\ttemp=`awk -v a=${a}\
    \ -v b=${b} 'BEGIN {print a^b}' ${1}`\n\t\tif [ ! -z \"${temp}\" ];then\n\t\t\t\
    temp=${temp%?}\n\t\t\ta=${a%?}\n\t\t\tb=${b%?}\n\t\t\tplanets[$temp]=${planets[$temp]}\"\
    \ \"${planets[$c]}\" \"${planets[$b]}\n\t\telse\n\t\t\ttemp=${planets[$c]}\" \"\
    ${planets[$b]}\n\t\t\tplanets[$c]=${planets[$c]}\" \"${planets[$b]}\n\t\t\tplanets[$b]=${temp}\n\
    \t\tfi\n\tdone\n\t\n\tfor i in ${!planets[*]}; do\n\t\tplanets[$i]=`echo \"${planets[$i]}\"\
    \ | sort | uniq`\n\tdone\n\t\n\tfor i in ${!planets[*]}; do\n\t\tplanets[$i]=\"\
    '${planets[$i]}'\"\n\tdone\n\n\techo ${planets[*]}", "\tlocal planet1=$(echo \"\
    $1\" | tr -d \"'\")\n\tlocal planet2=$(echo \"$2\" | tr -d \"'\")\n\tlocal planet1\n\
    \tlocal planet2\n\tif [ \"$planet1\" == \"$planet2\" ]; then\n\t\tprintf \"$1\"\
    \n\t\treturn\n\telse\n\t\tprintf \"$2\"\n\t\treturn\n\tfi", "  planet1=$1\n  planet2=$2\n\
    \  if [ -z \"$planet1\" ] || [ -z \"$planet2\" ]\n  then\n    return 1\n  fi\n\
    \  \n  # Get planet names from the current directory\n  planets=$(ls)\n  \n  #\
    \ Iterate through the planet names in planets\n  for((i=1;i<${#planets[*]};i+=1))\n\
    \  do\n    # Get the planet name\n    planet=${planets[i]}\n\n    # Check if planet\
    \ is correct\n    if [ \"$planet\" == \"$planet1\" ] || [ \"$planet\" == \"$planet2\"\
    \ ]\n    then\n      # Add the planet name to the list\n      list=\"$list, '\\\
    \"$planet\\\"'\"\n    fi\n  done\n\n  # Sort the list alphabetically (case insensitive)\n\
    \  list=$(echo $list | sed 's/\"//g' | sed 's/\"//g' | sed 's/,$//g' | sed 's/^\"\
    //g' | sed 's/\"$//g')\n  \n  # Remove the last comma\n  list=$(echo $list | sed\
    \ 's/,$//g')\n\n  # Remove the first two quotes\n  list=$(echo $list | sed 's/^\"\
    //g' | sed 's/\"$//g')\n\n  # Remove the last quote\n  list=$(echo $list | sed\
    \ 's/\"//g')\n\n  # Return to shell\n  return $list", "\tplanet1=$1\n\tplanet2=$2\n\
    \t\n\tif  [ ! -d \"../planets/$planet1\" ] || [ ! -d \"../planets/$planet2\" ];\
    \ then\n\t\techo \"Not a planet directory\" >&2\n\t\texit 1\n\tfi\n\n\torbits=$(find\
    \ ../planets/$planet1 -maxdepth 1 -mindepth 1 -name \\*.csv -not -name \"*.csv\"\
    \ -not -name \"*$planet1*\" -not -name \"*$planet2*\" -not -name \"*$planet2*.csv\"\
    \ | cut -d , -f1 | sort)\n\t\n\tfor((i=0;i<${#orbits[*]};++i)); do\n\t\tplanet1=$(echo\
    \ \"$orbits[i]\" | cut -d , -f1)\n\t\tplanet2=$(echo \"$orbits[i]\" | cut -d ,\
    \ -f2)\n\t\tdistance=$(echo \"$orbits[i]\" | cut -d , -f3)\n\t\t\n\t\tif [ -f\
    \ \"../planets/$planet2/$planet1.csv\" ]; then\n\t\t\techo \"$planet1/$planet2\
    \ $distance\"\n\t\tfi\n\tdone\n\n\techo \"$orbits[*]\"\n", "\tlocal planet1 planet2\n\
    \tif [ -z \"$1\" ]; then \n\t\techo \"You forgot the first planet argument!\"\n\
    \t\texit 1\n\telif [ -z \"$2\" ]; then\n\t\techo \"You forgot the second planet\
    \ argument!\"\n\t\texit 1\n\tfi\n\n\tif [ \"${1:0:1}\" != \"${2:0:1}\" ]; then\
    \ \n\t\techo \"Planets must be named the same way!\"\n\t\texit 1\n\tfi\n\n\tlocal\
    \ i\n\tlocal planets\n\tfor (( i = 0; i < ${#PLANETS[@]}; i++ )); do\n\t\tif [\
    \ \"${PLANETS[$i]}\" == \"${1}\" ]; then\n\t\t\tplanets=( \"${planets[@]}\" ${PLANETS[$i]}\
    \ )\n\t\tfi\n\tdone\n\n\tlocal i\n\tlocal planets\n\tfor (( i = 0; i < ${#PLANETS[@]};\
    \ i++ )); do\n\t\tif [ \"${PLANETS[$i]}\" == \"${2}\" ]; then\n\t\t\tplanets=(\
    \ \"${planets[@]}\" ${PLANETS[$i]} )\n\t\tfi\n\tdone\n\n\tplanets=( $(printf \"\
    \\\"%s\\\"\\n\" \"${planets[@]}\") )\n\n\tlocal i\n\tlocal result\n\tfor (( i\
    \ = 0; i < ${#planets[@]}; i++ )); do\n\t\tresult=$(bf \"${planets[$i]}\" \"${planets[$(($i\
    \ + 1))]}\")\n\t\tif [[ -n \"$result\" ]]; then\n\t\t\tplanets=( \"${planets[@]}\"\
    \ $(bf \"${planets[$i]}\" \"${planets[$(($i + 1))]}\") )\n\t\telse\n\t\t\tbreak\n\
    \t\tfi\n\tdone\n\n\tplanets=( \"${planets[@]:1:${#planets[@]}}\" )\n\n\tif [[\
    \ \"${#planets[@]}\" == 0 ]]; then\n\t\techo \"You can't find any planet between\
    \ the planets given!\"\n\telse\n\t\techo \"${planets[@]}\"\n\tfi", "    local\
    \ aa bb cc dd ee ff gg hh\n    local planet1 planet2\n    local planet1orbit\n\
    \    local planet2orbit\n    local planet1orbitdistance\n    local planet2orbitdistance\n\
    \    local planet1orbitorbit\n    local planet2orbitorbit\n    local planet1orbitorbitorbit\n\
    \    local planet2orbitorbitorbit\n    local planet1orbitorbitorbitorbit\n   \
    \ local planet2orbitorbitorbitorbit\n    local planet1orbitorbitorbitorbit\n \
    \   local planet2orbitorbitorbitorbit\n    local planet1orbitorbitorbitorbit\n\
    \    local planet2orbitorbitorbitorbit\n    local planet1orbitorbitorbitorbit\n\
    \    local planet2orbitorbitorbitorbit\n    local planet1orbitorbitorbitorbit\n\
    \    local planet2orbitorbitorbitorbit\n    local planet1orbitorbitorbitorbit\n\
    \    local planet2orbitorbitorbitorbit\n    local planet1orbitorbitorbitorbit\n\
    \    local planet2orbitorbitorbitorbit\n    local planet1orbitorbitorbitorbit\n\
    \    local planet2orbitorbitorbitorbit\n    local planet1orbitorbitorbitorbit\n\
    \    local planet2orbitorbitorbitorbit\n    local planet1orbitorbitorbitorbit\n\
    \    local planet2orbitorbitorbitorbit\n    local planet1orbitorbitorbitorbit\n\
    \    local planet2orbitorbitorbitorbit\n    local planet1orbitorbitorbitorbit\n\
    \    local planet2orbitorbitorbitorbit\n    local planet1orbitorbitorbitorbit\n\
    \    local planet2orbitorbitorbitorbit\n    local planet1orbitorbitorbitorbit\n\
    \    local planet2orbitorbitorbitorbit\n    local planet1orbitorbitorbitorbit\n\
    \    local planet2orbitorbitorbitorbit\n    local planet1orbitorbitorbitorbit\n\
    \    local planet2orbitorbitorbitorbit\n    local planet1orbitorbitorbitorbit\n\
    \    local planet2orbitorbitorbitorbit\n    local planet1orbitorbitorbitorbit\n\
    \    local planet2orbitorbitorbitorbit\n    local planet1orbitorbitorbitorbit\n\
    \    local planet2orbitorbitorbitorbit\n    local planet1orbitorbitorbitorbit\n\
    \    local planet2orbitorbitorbitorbit\n    local planet1orbitorbitorbitorbit\n\
    \    local planet2orbitorbitorbitorbit\n    local plan", "    local planet1=${1%%/*}\n\
    \    local planet2=${2%%/*}\n    local list\n    local sun=`sun --utc`\n    local\
    \ solar=`solar --utc`\n    local orbits\n    local j=0\n    local k=0\n    local\
    \ o1\n    local o2\n    local delta\n    local l\n    local distance\n    \n \
    \   # set default distance to 1 \n    distance=1\n    \n    # loop through planets\
    \ to find the orbits\n    for o in $(seq $(( ${#planet1} - 1 ))); do\n       \
    \ o1=${planet1:$((o + 1))}\n        o2=${planet2:$((o + 1))}\n        orbits=$(bf\
    \ $o1 $o2)\n        for o in $orbits; do\n            if [ -z \"$list\" ]; then\n\
    \                # set list to empty list\n                list=()\n         \
    \   fi\n            # get j and k\n            j=$(( j + 1 ))\n            k=$((\
    \ k + 1 ))\n            \n            # loop through planets and compare the distance\
    \ to the sun \n            for l in $(seq $(( ${#planet1} - 1 ))); do\n      \
    \          delta=`echo $(( ${o%%/*} - ${planet1:$((j))} ))`\n                if\
    \ [[ $delta -gt 0 ]]; then\n                    delta=`echo $(( ${delta} - ${distance}\
    \ ))`\n                fi\n                if [[ $delta -lt 0 ]]; then\n     \
    \               delta=`echo $(( ${delta} + ${distance} ))`\n                fi\n\
    \                if [[ $delta -eq 0 ]]; then\n                    delta=`echo\
    \ $(( ${distance} - ${distance} ))`\n                fi\n            done\n  \
    \          \n            # get distance from the sun to the orbit and compare\
    \ it to\n            # the distance\n            distance=`echo $(( ${distance}\
    \ - $sun ))`\n            distance=`echo $(( ${distance} - $solar ))`\n      \
    \      distance=`echo $(( ${distance} * 1000 ))`\n            \n            #\
    \ push to list if the distance is smaller than the distance \n            # between\
    \ planets\n            if [[ $distance -lt ${o%%/*} ]]; then\n               \
    \ list=($o)\n            fi\n        done\n    done\n    \n    # return list\n\
    \    echo $(bf ${planet1:0:${#planet1}}  ${planet2:0:${#planet2}})", "  local\
    \ planet1 planet2\n  planet1=\"$(echo $1 | tr -d '\"')\"\n  planet2=\"$(echo $2\
    \ | tr -d '\"')\"\n  grep \"^${planet1} \" $2 | sort -k 2 | grep \"^${planet2}\
    \ \" | sort -k 2 | cut -d ' ' -f 2"]
stop_tokens:
- "\n}"
