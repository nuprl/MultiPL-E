language: sh
name: HumanEval_141_file_name_check
results:
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ file=$1\n    if [[ \"$file\" == \"\" ]]; then\n        echo \"No\"\n    else\n\
    \        local dot=${file#*.}\n        local letter=${dot:0:1}\n        if [[\
    \ $dot == \"\" ]] || [[ $letter != \"a\" && $letter != \"b\" && $letter != \"\
    c\" && $letter != \"d\" && $letter != \"e\" && $letter != \"f\" && $letter !=\
    \ \"g\" && $letter != \"h\" && $letter != \"i\" && $letter != \"j\" && $letter\
    \ != \"k\" && $letter != \"l\" && $letter != \"m\" && $letter != \"n\" && $letter\
    \ != \"o\" && $letter != \"p\" && $letter != \"q\" && $letter != \"r\" && $letter\
    \ != \"s\" && $letter != \"t\" && $letter != \"u\" && $letter != \"v\" && $letter\
    \ != \"w\" && $letter != \"x\" && $letter != \"y\" && $letter != \"z\" ]]; then\n\
    \            echo \"No\"\n        else\n            local extension=\"${dot#*}\"\
    \n            local extension_length=${#extension}\n            local extension_length=${extension_length}-1\n\
    \            if [[ ${extension:$extension_length} == '.' ]] || [[ ${extension:$extension_length}\
    \ == 'txt' ]] || [[ ${extension:$extension_length} == 'exe' ]] || [[ ${extension:$extension_length}\
    \ == 'dll' ]]; then\n                echo \"Yes\"\n            else\n        \
    \        echo \"No\"\n            fi\n        fi\n    fi\n}\n\ncandidate() {\n\
    \    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n\
    \    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057345
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ file_name=\"${1}\"\n    if [[ \"$file_name\" =~ ^[0-9][0-9]*\\.[^.]*$ ]]; then\n\
    \        file_name=\"${BASH_REMATCH[0]}\"\n    fi\n    [[ \"$file_name\" =~ ^[a-z][a-z]$\
    \ ]] && \\\n    [[ \"$file_name\" =~ ^[a-z][a-z].*$ ]] && \\\n    [[ -n ${BASH_REMATCH[0]}\
    \ ]] && \\\n    [[ \"${BASH_REMATCH[0]}\" =~ ^[a-z][a-z]$ ]] && \\\n    [[ \"\
    ${BASH_REMATCH[0]}\" =~ ^[a-z][a-z].*$ ]]\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057345
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ file=\"${1}\"\n    local valid_file_name=\"Yes\"\n\n    if [[ \"${file}\" =~\
    \ ^[0-9]{3}$ ]]; then\n        if [[ ${file} == *.* ]]; then\n            if [[\
    \ ${file} =~ ^[a-zA-Z][a-zA-Z0-9]*$ ]]; then\n                if [[ ${file} =~\
    \ ^.* ]]; then\n                    if [[ ${file} =~ ^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$\
    \ ]]; then\n                        valid_file_name=\"Yes\"\n                \
    \    else\n                        valid_file_name=\"No\"\n                  \
    \  fi\n                else\n                    valid_file_name=\"No\"\n    \
    \            fi\n            else\n                valid_file_name=\"No\"\n  \
    \          fi\n        else\n            valid_file_name=\"No\"\n        fi\n\
    \    else\n        valid_file_name=\"No\"\n    fi\n\n    echo \"${valid_file_name}\"\
    \n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057345
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ file_name=\"$1\"\n    local dot_count\n    local dot_count2\n    local first_char\n\
    \    local second_char\n    local third_char\n    local fourth_char\n    local\
    \ fifth_char\n    local sixth_char\n    local seventh_char\n    local eighth_char\n\
    \    local ninth_char\n    local tenth_char\n    local count\n\n    # Count number\
    \ of dots in file_name\n    dot_count=0\n    while [[ $file_name != '.*' ]]; do\n\
    \        ((dot_count++))\n        file_name=${file_name%%.*}\n    done\n    dot_count=$((dot_count-1))\n\
    \    # Count first letter\n    first_char=`echo $file_name | sed \"s/.*\\./\\\
    //\"`\n    third_char=`echo $file_name | sed \"s/\\./\\//\"`\n    fifth_char=`echo\
    \ $third_char | sed \"s/.*\\//\\//\"`\n    second_char=`echo $third_char | sed\
    \ \"s/\\//\\//\"`\n    sixth_char=`echo $fifth_char | sed \"s/.*\\./\\//\"`\n\
    \    seventh_char=`echo $fifth_char | sed \"s/\\./\\//\"`\n    eighth_char=`echo\
    \ $second_char | sed \"s/.*\\//\\//\"`\n    ninth_char=`echo $second_char | sed\
    \ \"s/\\//\\//\"`\n    tenth_char=`echo $sixth_char | sed \"s/.*\\./\\//\"`\n\n\
    \    # Check the substring before dot\n    if [[ $first_char != '' && $first_char\
    \ != 0 && $first_char != 1 ]]; then\n        echo \"Invalid file name.\"\n   \
    \     echo \"$file_name\"\n        exit 1\n    fi\n\n    # Check the substring\
    \ after dot\n    if [[ $third_char != '' ]]; then\n        if [[ ! $third_char\
    \ == $third_char && $third_char != $third_char ]]; then\n            echo \"Invalid\
    \ file name.\"\n            echo \"$file_name\"\n            exit 1\n        fi\n\
    \    fi\n\n    if [[ $fourth_char != '' ]]; then\n        if [[ $fourth_char !=\
    \ $fourth_char ]]; then\n            echo \"Invalid file name.\"\n           \
    \ echo \"$file_name\"\n            exit 1\n        fi\n    fi\n\n    if [[ $fifth_char\
    \ != '' ]]; then\n        if [[ $fifth_char != $fifth_char ]]; then\n        \
    \    echo \"Invalid file name.\"\n            echo \"$file_name\"\n          \
    \  exit 1\n        fi\n\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfpnlavpj.sh: line 83: syntax error near unexpected token `}''

    /tmp/tmpfpnlavpj.sh: line 83: `}''

    '
  stdout: ''
  timestamp: 1660057345
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local filename\n\
    \  filename=$1\n  local valid_files\n  valid_files='txt exe dll'\n  local i\n\
    \  for i in \"${valid_files[@]}\"\n  do\n    if [[ $filename =~ (^[^0-9]*[0-9][^0-9]*\\\
    .[^0-9]*$)$ ]]; then\n      if [[ $filename =~ (^[^0-9]*$)$ ]]; then\n       \
    \ if [[ $filename =~ (^[^0-9]*\\.)$ ]]; then\n          if [[ \"$filename\" =~\
    \ ^[[:alpha:]]$ ]]; then\n            if [[ $filename =~ ^${i}$ ]]; then\n   \
    \           return 1\n            else\n              return 0\n            fi\n\
    \          else\n            return 0\n          fi\n        else\n          return\
    \ 0\n        fi\n      else\n        return 0\n      fi\n    else\n      return\
    \ 0\n    fi\n  done\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057345
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  file_name=$1\n\
    \  if [[ $file_name == *.* ]] && [[ $file_name != \"\" ]] \\\n      && [[ $file_name\
    \ =~ ^[0-9]\\+ ]] && [[ $file_name =~ \\.[^.]*$ ]] \\\n      && [[ $file_name\
    \ =~ ^[a-z]\\+ ]] && [[ $file_name =~ ^[A-Z]\\+ ]] && \\\n      [[ $file_name\
    \ =~ \\.[a-zA-Z]*$ ]]; then\n    echo \"Yes\"\n  else\n    echo \"No\"\n  fi\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057345
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  if [ \"\
    $#\" -lt 1 ]; then\n    echo \"Invalid number of parameters\" >&2\n    exit 1\n\
    \  fi\n\n  local name=$1\n  if [[ ! $name =~ ^[0-9]+$ ]]; then\n    echo \"Invalid\
    \ file name\" >&2\n    exit 1\n  fi\n\n  name=${name##*/}\n  local subname=$(echo\
    \ $name | cut -d \".\" -f 1)\n  local ext=${name##*.}\n\n  if [[ \"$name\" ==\
    \ \"\" ]]; then\n    echo \"File name should not be empty\" >&2\n    exit 1\n\
    \  fi\n\n  if [ \"$ext\" != \"txt\" -a \"$ext\" != \"exe\" -a \"$ext\" != \"dll\"\
    \ -a \"$ext\" != \"gz\" -a \"$ext\" != \"bz2\" ]; then\n    echo \"Invalid file\
    \ extension\" >&2\n    exit 1\n  fi\n\n  if ! [[ \"$subname\" =~ ^[a-z]$ ]]; then\n\
    \    echo \"Substring before dot should be letter\" >&2\n    exit 1\n  fi\n\n\
    \  local firstpart=${subname%%[^a-z]*}\n  if [[ \"$firstpart\" != \"\" ]]; then\n\
    \    echo \"First part of substring before dot should be empty\" >&2\n    exit\
    \ 1\n  fi\n  \n  if ! [[ \"$subname\" =~ ^[^a-z].*$ ]]; then\n    echo \"Substring\
    \ after dot should start with letter\" >&2\n    exit 1\n  fi\n  \n  if ! [[ \"\
    $subname\" =~ ^[a-z0-9][a-z0-9\\.]*$ ]]; then\n    echo \"Substring after dot\
    \ should contain only letters and numbers and dot\" >&2\n    exit 1\n  fi\n\n\
    \  echo $1\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'Invalid file name

    '
  stdout: ''
  timestamp: 1660057345
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local file_name=$1\n\
    \  local valid=false\n  if [[ ${file_name: -2} != $1 ]]; then\n    valid=true\n\
    \  else\n    valid=false\n    file_name=${file_name:0:-2}\n  fi\n  if [[ -z ${file_name}\
    \ ]]; then\n    valid=false\n  else\n    valid=true\n    if [[ -z ${file_name%.*}\
    \ ]]; then\n      valid=false\n    fi\n    if [[ ${file_name:0:1} != \"a\" &&\n\
    \          ${file_name:0:1} != \"A\" &&\n          ${file_name:0:1} != \"b\" &&\n\
    \          ${file_name:0:1} != \"B\" &&\n          ${file_name:0:1} != \"c\" &&\n\
    \          ${file_name:0:1} != \"C\" &&\n          ${file_name:0:1} != \"d\" &&\n\
    \          ${file_name:0:1} != \"D\" &&\n          ${file_name:0:1} != \"e\" &&\n\
    \          ${file_name:0:1} != \"E\" &&\n          ${file_name:0:1} != \"f\" &&\n\
    \          ${file_name:0:1} != \"F\" &&\n          ${file_name:0:1} != \"g\" &&\n\
    \          ${file_name:0:1} != \"G\" &&\n          ${file_name:0:1} != \"h\" &&\n\
    \          ${file_name:0:1} != \"H\" &&\n          ${file_name:0:1} != \"i\" &&\n\
    \          ${file_name:0:1} != \"I\" &&\n          ${file_name:0:1} != \"j\" &&\n\
    \          ${file_name:0:1} != \"J\" &&\n          ${file_name:0:1} != \"k\" &&\n\
    \          ${file_name:0:1} != \"K\" &&\n          ${file_name:0:1} != \"l\" &&\n\
    \          ${file_name:0:1} != \"L\" &&\n          ${file_name:0:1} != \"m\" &&\n\
    \          ${file_name:0:1} != \"M\" &&\n          ${file_name:0:1} != \"n\" &&\n\
    \          ${file_name:0:1} != \"N\" &&\n          ${file_name:0:1} != \"o\" &&\n\
    \          ${file_name:0:1} != \"O\" &&\n          ${file_name:0:1} != \"p\" &&\n\
    \          ${file_name:0:1} != \"P\" &&\n          ${file_name:0:1} != \"q\" &&\n\
    \          ${file_name:0:1} != \"Q\" &&\n          ${file_name:0:1} != \"r\" &&\n\
    \          ${file_name:0:1} != \"R\" &&\n          ${file_name:0:1} != \"s\" &&\n\
    \          ${file_name:0:1} != \"S\" &&\n          ${file_name:\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3cbtuhuz.sh: line 73: unexpected token `newline'', conditional
    binary operator expected

    /tmp/tmp3cbtuhuz.sh: line 73: syntax error near `}''

    /tmp/tmp3cbtuhuz.sh: line 73: `}''

    '
  stdout: ''
  timestamp: 1660057345
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n\tlocal file_to_check=\"\
    $1\"\n\t\n\tif [[ \"${file_to_check}\" =~ \\[([^\\]]*)\\] ]]; then\n\t\tlocal\
    \ file_to_check_tmp=\"${BASH_REMATCH[1]}\"\n\telse\n\t\tlocal file_to_check_tmp=\"\
    ${file_to_check}\"\n\tfi\n\n\tif [[ \"${file_to_check_tmp}\" =~ ^([0-9][0-9])+\\\
    .[a-z][a-z][a-z] ]]; then\n\t\tif [[ \"${file_to_check_tmp}\" =~ ^.* ]]; then\n\
    \t\t\tif [[ \"${file_to_check_tmp}\" =~ ^[a-z] ]]; then\n\t\t\t\treturn 'Yes'\n\
    \t\t\telse\n\t\t\t\treturn 'No'\n\t\t\tfi\n\t\telse\n\t\t\treturn 'No'\n\t\tfi\n\
    \telse\n\t\treturn 'No'\n\tfi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpikj3r7dr.sh: line 38: return: No: numeric argument required

    '
  stdout: ''
  timestamp: 1660057345
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    if [[\
    \ \"$1\" =~ ^[0-9]+\\.[a-z]+$ ]] || \\\n\t[[ \"$1\" =~ ^[a-z]+$ ]] || \\\n\t[[\
    \ \"$1\" =~ ^[^\\.]+$ ]] || \\\n\t[[ \"$1\" =~ ^[a-z][a-z].*$ ]]; then\n\techo\
    \ \"Yes\"\n    else\n\techo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057345
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  [[ $1 =~\
    \ ^[0-9][0-9][0-9]\\.[^.]$|^[0-9][0-9][0-9]\\.[^.]$|^[0-9][0-9][0-9]\\.[^.]$|^[0-9][0-9][0-9]\\\
    .[^.]$ ]] || return 1\n  [[ \"$1\" =~ ^[a-zA-z].*$ ]] || return 1\n  [[ \"$1\"\
    \ =~ ^[a-zA-Z]$ ]] || return 1\n  [[ \"$1\" =~ ^[0-9]$ ]] || return 1\n  return\
    \ 0\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057345
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ filename=$1\n    [[ -z \"$filename\" ]] && return 1\n    [[ \"$filename\" =~\
    \ ^[0-9][0-9]*\\.[^\\.]*$ ]] && return 1\n    [[ \"$filename\" =~ ^[a-z][a-z0-9]*$\
    \ ]] && return 1\n    [[ \"$filename\" =~ ^[a-z][a-z0-9]*\\.txt$ ]] || return\
    \ 1\n    [[ \"$filename\" =~ ^[a-z][a-z0-9]*\\.exe$ ]] || return 1\n    [[ \"\
    $filename\" =~ ^[a-z][a-z0-9]*\\.dll$ ]] || return 1\n    return 0\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057345
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  if [[ \"\
    $1\" = *.* ]]; then\n    local file_to_test_name=$1\n    local test_name=${file_to_test_name%.*}\n\
    \    local ext=${file_to_test_name##*.}\n    if [[ -z \"${test_name}\" || -z \"\
    ${ext}\" ]]; then\n      echo \"No\"\n      return 0\n    fi\n    local is_valid=true\n\
    \    if [[ ${#test_name} -lt 3 ]]; then\n      echo \"No\"\n      return 0\n \
    \   fi\n    if [[ ${test_name} =~ [^0-9].* ]]; then\n      echo \"No\"\n     \
    \ return 0\n    fi\n    if [[ ${#test_name} != ${#file_to_test_name} ]]; then\n\
    \      echo \"No\"\n      return 0\n    fi\n    if [[ ${#test_name} -eq 2 ]];\
    \ then\n      if [[ \"${test_name}\" = \"${file_to_test_name}\" ]]; then\n   \
    \     echo \"No\"\n        return 0\n      else\n        local test_string=${file_to_test_name#*\\\
    .}\n        if [[ ${test_string} != ${test_name} ]]; then\n          echo \"No\"\
    \n          return 0\n        fi\n      fi\n    fi\n    if [[ ${#test_name} !=\
    \ ${#ext} ]]; then\n      echo \"No\"\n      return 0\n    fi\n    local test_ext=${file_to_test_name##*.}\n\
    \    if [[ \"${test_ext}\" = \"${ext}\" ]]; then\n      echo \"Yes\"\n      return\
    \ 0\n    else\n      echo \"No\"\n      return 0\n    fi\n  fi\n  echo \"No\"\n\
    \  return 0\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057345
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local file_name=$1\n\
    \n  # Checks if the file's name is valid\n  # - There should not be more than\
    \ three digits ('0'-'9') in the file's name.\n  [[ -z \"${file_name}\" ]] && return\
    \ 1\n  [[ \"${file_name}\" =~ ^[0-9;]+$ ]] && return 1\n  # - The file's name\
    \ contains exactly one dot '.'\n  [[ -z \"${file_name##*.}\" ]] && return 1\n\
    \  # - The substring before the dot should not be empty, and it starts with a\
    \ letter from \n  # the latin alphapet ('a'-'z' and 'A'-'Z').\n  [[ \"${file_name%%%.*}\"\
    \ =~ \\A ]] && return 1\n  # - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n  # - The following two statements are equivalent and\
    \ are used to ensure the \n  # substring is one of the specified values:\n  #\
    \   - [[ \"${file_name}\" =~ (txt|exe|dll) ]]\n  #   - [[ \"${file_name}\" =~\
    \ (txt|exe|dll) ]]\n  [[ \"${file_name}\" =~ \\.(txt|exe|dll) ]] || return 1\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp13xto8fi.sh: line 24: syntax error in conditional expression: unexpected
    token `;''

    /tmp/tmp13xto8fi.sh: line 24: syntax error near `;]''

    /tmp/tmp13xto8fi.sh: line 24: `  [[ "${file_name}" =~ ^[0-9;]+$ ]] && return 1''

    '
  stdout: ''
  timestamp: 1660057345
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ file_name=\"${1}\"\n    local file_name_length=${#file_name}\n    local dotless_file_name=${file_name:0:1}\n\
    \    local dot_file_name=${file_name:1:${file_name_length-1}}\n    local dot_file_name_length=${#dot_file_name}\n\
    \    local dot_first_character=${dot_file_name:0:1}\n    local dot_first_character_length=${#dot_first_character}\n\
    \    local dot_second_character=${dot_file_name:${dot_file_name_length}:1}\n \
    \   local dot_second_character_length=${#dot_second_character}\n    local dot_third_character=${dot_file_name:${dot_file_name_length}:2}\n\
    \    local dot_third_character_length=${#dot_third_character}\n    local dot_fourth_character=${dot_file_name:${dot_file_name_length}:3}\n\
    \    local dot_fourth_character_length=${#dot_fourth_character}\n    local dot_fifth_character=${dot_file_name:${dot_file_name_length}:4}\n\
    \    local dot_fifth_character_length=${#dot_fifth_character}\n    local dot_sixth_character=${dot_file_name:${dot_file_name_length}:5}\n\
    \    local dot_sixth_character_length=${#dot_sixth_character}\n    local dot_seventh_character=${dot_file_name:${dot_file_name_length}:6}\n\
    \    local dot_seventh_character_length=${#dot_seventh_character}\n    local dot_eighth_character=${dot_file_name:${dot_file_name_length}:7}\n\
    \    local dot_eighth_character_length=${#dot_eighth_character}\n    local dot_ninth_character=${dot_file_name:${dot_file_name_length}:8}\n\
    \    local dot_ninth_character_length=${#dot_ninth_character}\n    local dot_tenth_character=${dot_file_name:${dot_file_name_length}:9}\n\
    \    local dot_tenth_character_length=${#dot_tenth_character}\n    local dot_tenth_dot=${dot_file_name:${dot_file_name_length}-${dot_file_name_length}}\n\
    \    local dot_tenth_dot_length=${#dot_tenth_dot}\n    local dot_tenth_dot_second_character=${dot_tenth_dot:${dot_tenth_dot_length}:1}\n\
    \    local dot_tenth_dot_second_character_length=${#dot_tenth_dot_second_character}\n\
    \    local dot_tenth_dot_third_character=${dot_tenth_dot:${dot_tenth_dot_length}:2}\n\
    \    local dot_tenth_dot_third_character_length=${#dot_tenth_dot_third_character}\n\
    \    local \n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057345
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ FILE_NAME=$1\n    local TEMP_STRING='Y'\n    local VALID_STRING='N'\n    local\
    \ SUFFIX='exe'\n    local SUFFIXS=('exe' 'dll')\n\n    local FILE_NAME_LENGTH=${#FILE_NAME}\n\
    \    local FILE_NAME_ELEMENTS=(${FILE_NAME//./ })\n\n    if [ $FILE_NAME_LENGTH\
    \ -gt 3 ]; then\n        TEMP_STRING='N'\n    else\n        TEMP_STRING='Y'\n\
    \    fi\n    \n    if [[ ${FILE_NAME_LENGTH} -eq 0 ]]; then\n        TEMP_STRING='N'\n\
    \    fi\n    \n    if [[ ${FILE_NAME_LENGTH} -eq 1 ]]; then\n        TEMP_STRING='Y'\n\
    \    fi\n\n    if [[ ${FILE_NAME_LENGTH} -eq 2 ]]; then\n        TEMP_STRING='Y'\n\
    \    fi\n\n    if [[ \"${FILE_NAME_ELEMENTS[0]}\" != \"\" ]] && [[ ${FILE_NAME_ELEMENTS[0]}\
    \ !~ ^[a-z][a-z0-9]$ ]]; then\n        TEMP_STRING='N'\n    fi\n\n    if [[ \"\
    ${FILE_NAME_ELEMENTS[1]}\" != \"\" ]] && [[ ${FILE_NAME_ELEMENTS[1]} !~ ^[a-z][a-z0-9]$\
    \ ]]; then\n        TEMP_STRING='N'\n    fi\n\n    if [[ \"${FILE_NAME_ELEMENTS[2]}\"\
    \ != \"\" ]] && [[ ${FILE_NAME_ELEMENTS[2]} != \"${SUFFIXS[0]}\" ]]; then\n  \
    \      TEMP_STRING='N'\n    fi\n\n    if [[ \"${FILE_NAME_ELEMENTS[2]}\" != \"\
    \" ]] && [[ ${FILE_NAME_ELEMENTS[2]} != \"${SUFFIXS[1]}\" ]]; then\n        TEMP_STRING='N'\n\
    \    fi\n\n    echo \"$TEMP_STRING\"\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpa9zy2p4q.sh: line 46: conditional binary operator expected

    /tmp/tmpa9zy2p4q.sh: line 46: syntax error near `!~''

    /tmp/tmpa9zy2p4q.sh: line 46: `    if [[ "${FILE_NAME_ELEMENTS[0]}" != "" ]] &&
    [[ ${FILE_NAME_ELEMENTS[0]} !~ ^[a-z][a-z0-9]$ ]]; then''

    '
  stdout: ''
  timestamp: 1660057345
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local filename=$1\n\
    \  local dot=$2\n  local name=$3\n  if [[ $dot != \"\" ]]; then\n    if ! [[ \"\
    ${dot}\" =~ ^[0-9]*$ ]]; then\n      echo \"No\" >&2\n      return 1\n    fi\n\
    \    name=${name#*.}\n    name=${name%%\\.*}\n    if ! [[ \"${name}\" =~ ^[a-z][a-z0-9]*$\
    \ ]]; then\n      echo \"No\" >&2\n      return 1\n    fi\n  fi\n  name=${name%${filename}.}\n\
    \  [[ -f \"$filename\" ]] || echo \"No\" >&2\n  return 0\n}\n\ncandidate() {\n\
    \    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n\
    \    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'No

    '
  stdout: ''
  timestamp: 1660057345
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ file\n    local dot_pos\n    local file_len\n\n    file=\"$1\"\n\n    dot_pos=${file#*.}\n\
    \    if [ \"${dot_pos}\" != \"$file\" ]; then\n      echo \"No\"\n      return\
    \ 0\n    fi\n\n    file=${file%.*}\n\n    file_len=${#file}\n    if [ $(( $file_len\
    \ >= 3 )) -ne 0 ]; then\n      echo \"No\"\n      return 0\n    fi\n\n    case\
    \ \"${file}\" in\n      [a-ZA-Z])\n        if [[ ${file} == *.* ]]; then\n   \
    \       echo \"Yes\"\n          return 0\n        fi\n        ;;\n      [a-Z0-9])\n\
    \        if [[ ${file} =~ ^[0-9]+ ]]; then\n          echo \"Yes\"\n         \
    \ return 0\n        fi\n        ;;\n      *)\n        echo \"No\"\n        return\
    \ 0\n        ;;\n    esac\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n   \
    \ [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057345
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    file_name=$1\n\
    \    \n    if [[ \"$file_name\" =~ ^[0-9]{1,3}\\.[^.]$ ]]; then\n        echo\
    \ \"No\"\n    elif [[ \"$file_name\" =~ ^[^\\.]$ ]]; then\n        echo \"No\"\
    \n    elif [[ \"$file_name\" =~ ^[a-zA-Z]$ ]]; then\n        echo \"Yes\"\n  \
    \  else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057345
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    [[ \"\
    $1\" =~ ^[0-9]+$ ]] || return 1\n    [[ \"$1\" =~ ^[0-9]+\\.[0-9]+$ ]] || return\
    \ 1\n    [[ \"$1\" =~ ^[a-z][a-zA-Z]$ ]] || return 1\n    [[ \"$1\" =~ ^[a-z][a-zA-Z][0-9]$\
    \ ]] || return 1\n    [[ \"$1\" =~ ^[a-z][a-zA-Z][0-9][0-9]$ ]] || return 1\n\
    \    [[ \"$1\" =~ ^[a-z][a-zA-Z][0-9][0-9][0-9]$ ]] || return 1\n    [[ \"$1\"\
    \ =~ ^[a-z][a-zA-Z][0-9][0-9][0-9][0-9]$ ]] || return 1\n    [[ \"$1\" =~ ^[a-z][a-zA-Z][0-9][0-9][0-9][0-9][0-9]$\
    \ ]] || return 1\n    [[ \"$1\" =~ ^[a-z][a-zA-Z][0-9][0-9][0-9][0-9][0-9][0-9]$\
    \ ]] || return 1\n    [[ \"$1\" =~ ^[a-z][a-zA-Z][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$\
    \ ]] || return 1\n    [[ \"$1\" =~ ^[a-z][a-zA-Z][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$\
    \ ]] || return 1\n    [[ \"$1\" =~ ^[a-z][a-zA-Z][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$\
    \ ]] || return 1\n    [[ \"$1\" =~ ^[a-z][a-zA-Z][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$\
    \ ]] || return 1\n    [[ \"$1\" =~ ^[a-z][a-zA-Z][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$\
    \ ]] || return 1\n    [[ \"$1\" =~ ^[a-z][a-zA-Z][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$\
    \ ]] || return 1\n    [[ \"$1\" =~ ^[a-z][a-zA-Z][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$\
    \ ]] || return 1\n    [[ \"$1\" =~ ^[a-z][a-zA-Z][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$\
    \ ]] || return 1\n    [[ \"$1\" =~ ^[a-z][a-zA-Z][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$\
    \ ]] || return 1\n    [[ \"$1\" =~ ^[a-z][a-zA-Z][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$\
    \ ]] || return 1\n    [[ \"$1\" =~ ^[a-z][a-zA-Z][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$\
    \ ]] || return 1\n    [[ \"$1\" =~ ^[a-z][a-zA-Z][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$\
    \ ]] || return \n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057345
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  if [[ $1\
    \ =~ ^[1-9][0-9]{0,3}\\.[a-z].* ]]; then\n    case \"${BASH_REMATCH[1]}\" in\n\
    \      dll|exe)\n        return $(cat $1 | grep -q '^[a-z]$')\n      ;;\n    \
    \  *)\n        return 0\n      ;;\n    esac\n  else\n    return 0\n  fi\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057345
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    file_name=$1\n\
    \    if [[ $((${file_name:0:1}) -le 9 && ${file_name:0:1} -eq ${file_name:0:1})\
    \ ]]\n    then\n        if [[ ${file_name:0:2} != \".\" ]]\n        then\n   \
    \         echo \"No\"\n        else\n            echo \"Yes\"\n        fi\n  \
    \  else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_sjg7x_7.sh: command substitution: line 20: syntax error near unexpected
    token `-le''

    /tmp/tmp_sjg7x_7.sh: command substitution: line 20: `(${file_name:0:1}) -le 9
    && ${file_name:0:1} -eq ${file_name:0:1}''

    '
  stdout: ''
  timestamp: 1660057345
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  file_name=$1\n\
    \  if [[ ${file_name:0:1} == \"0\" ]]; then\n    echo \"No\"\n  else\n    if [[\
    \ ${file_name:0:1} == \"1\" ]]; then\n      if [[ ${file_name:1:1} == \"0\" ]];\
    \ then\n        echo \"No\"\n      else\n        if [[ ${file_name:1:1} == \"\
    1\" ]]; then\n          if [[ ${file_name:2:1} == \"0\" ]]; then\n           \
    \ echo \"No\"\n          else\n            if [[ ${file_name:2:1} == \"1\" ]];\
    \ then\n              if [[ ${file_name:3:1} == \"0\" ]]; then\n             \
    \   echo \"No\"\n              else\n                if [[ ${file_name:3:1} ==\
    \ \"1\" ]]; then\n                  if [[ ${file_name:4:1} == \"0\" ]]; then\n\
    \                    echo \"No\"\n                  else\n                   \
    \ if [[ ${file_name:4:1} == \"1\" ]]; then\n                      if [[ ${file_name:5:1}\
    \ == \"0\" ]]; then\n                        echo \"No\"\n                   \
    \   else\n                        if [[ ${file_name:5:1} == \"1\" ]]; then\n \
    \                         if [[ ${file_name:6:1} == \"0\" ]]; then\n         \
    \                   echo \"No\"\n                          else\n            \
    \                if [[ ${file_name:6:1} == \"1\" ]]; then\n                  \
    \            if [[ ${file_name:7:1} == \"0\" ]]; then\n                      \
    \          echo \"No\"\n                              else\n                 \
    \               if [[ ${file_name:7:1} == \"1\" ]]; then\n                   \
    \               if [[ ${file_name:8:1} == \"0\" ]]; then\n                   \
    \                 echo \"No\"\n                                  else\n      \
    \                              if [[ ${file_name:8:1} == \"1\" ]]; then\n    \
    \                                  if [[ ${file_name:9:1} == \"0\" ]]; then\n\
    \                                        echo \"No\"\n                       \
    \               else\n                                        if [[ ${file_name:9:1}\
    \ == \"1\" ]]; then\n                                          if [[ ${file_name:10:1}\
    \ == \"0\" ]]; then\n                                            echo \"No\"\n\
    \                                          else\n                            \
    \                if [[ ${file_name:10:1} == \"1\" ]]; then\n                 \
    \                             if [[ ${file_name:11:1} == \"0\" ]]; then\n    \
    \                                            echo \"No\"\n                   \
    \                           else\n                                           \
    \     if [[ ${file_name:11:1} == \"1\" ]]; then\n                            \
    \                      if [[ ${file_name:12:1} == \"0\" ]]; then\n           \
    \                                         echo \"No\"\n                      \
    \                            else\n                                          \
    \          if [[ ${file_name:12:1} == \"1\" ]]; then\n                       \
    \                               if [[ ${file_name:13:1} == \"0\" ]]; then\n  \
    \                                                      echo \"No\"\n         \
    \                                             else\n                         \
    \                               if [[ ${file_name:13:1} == \"1\" ]]; then\n  \
    \                                                        if [[ ${file_name:14:1}\
    \ == \"0\" ]]; then\n                                                        \
    \    echo \"No\"\n                                                          else\n\
    \                                                            if [[ ${file_name:14:1}\
    \ == \"1\" ]]; then\n                                                        \
    \      if [[ ${file_name:15:1} == \"0\" ]]; then\n                           \
    \                                     echo \"No\"\n                          \
    \                                    else\n                                  \
    \                              if [[ ${\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7u096de1.sh: line 84: unexpected token `newline'', conditional
    binary operator expected

    /tmp/tmp7u096de1.sh: line 84: syntax error near `}''

    /tmp/tmp7u096de1.sh: line 84: `}''

    '
  stdout: ''
  timestamp: 1660057345
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n   local\
    \ filename=$1\n   local extension=\"${filename##*.}\"\n   local filenameWithoutExt=\"\
    ${filename%.*}\"\n   local firstChar=\"${filenameWithoutExt:0:1}\"\n   local firstCharIsLetter=$(echo\
    \ $firstChar | grep -c ^[[:alpha:]]); \n\n   # We don't check extension here,\
    \ so we know it is valid.\n   if [[ \"$firstCharIsLetter\" -eq 1 ]]; then\n  \
    \    local firstCharIsDigit=$(echo $firstChar | grep -c ^[[:digit:]]); \n    \
    \  if [[ \"$firstCharIsDigit\" -eq 0 ]]; then\n         return \"No\"\n      else\n\
    \         return \"Yes\"\n      fi\n   else\n      return \"No\"\n   fi\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_aj0po_4.sh: line 29: return: No: numeric argument required

    '
  stdout: ''
  timestamp: 1660057345
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ fname=$1\n    [[ $fname == *\\.* ]] || [[ $fname =~ ^[0-9]+$ ]] ||\n    [[ $fname\
    \ =~ ^[a-zA-Z]\\.* ]] || [[ $fname =~ ^[a-zA-Z]+$ ]] ||\n    [[ $fname =~ ^[a-zA-Z]+\\\
    .txt$ ]] || [[ $fname =~ ^[a-zA-Z]+\\.exe$ ]] ||\n    [[ $fname =~ ^[a-zA-Z]+\\\
    .dll$ ]] || [[ $fname =~ ^[a-zA-Z]+\\.zip$ ]] ||\n    echo \"$fname is not a valid\
    \ file name\"\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057345
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n   if ! [[\
    \ \"$1\" =~ ^[0-9]{3}\\.[A-Za-z][A-Za-z0-9]*$ ]] ; then\n      return 1\n   fi\n\
    \   case $(echo \"$1\" | cut -d. -f1) in \n   [0-9][0-9][0-9])\n      return 1\n\
    \      ;;\n   .* )\n      return 1\n      ;;\n   esac\n   return 0\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057345
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local file_name=\"\
    $1\"\n  local substring substring\n  \n  substring =\"$(( $(expr length file_name)\
    \ - 3 ))\"\n  if [[ $substring -gt 3 ]]\n  then\n    echo \"Error: File name contains\
    \ more than 3 digits.\"\n    exit 1\n  fi\n  if [[ $substring -lt 1 ]]\n  then\n\
    \    echo \"Error: File name must contain at least one dot '.'.\"\n    exit 1\n\
    \  fi\n  substring=$(expr substr \"$file_name\" 1 $substring)\n  if [[ $substring\
    \ != [A-Za-z0-9] ]]\n  then\n    echo \"Error: File name must contain only latin\
    \ alphabet characters (A-Z, a-z, 0-9).\"\n    exit 1\n  fi\n  if [[ $(expr index\
    \ \"$file_name\" \".\") -eq 0 ]]\n  then\n    echo \"Error: File name must contain\
    \ only latin alphabet characters (A-Z, a-z, 0-9).\"\n    exit 1\n  fi\n  if [[\
    \ $(expr substr -- \"$file_name\" 1 1) = \".\" ]]\n  then\n    echo \"Error: File\
    \ name must not contain any dot before the first character.\"\n    exit 1\n  fi\n\
    \  substring=$(expr substr \"$file_name\" 2 $substring)\n  \n  if [[ \"$substring\"\
    \ != txt &&\n       \"$substring\" != exe &&\n       \"$substring\" != dll ]]\n\
    \  then\n    echo \"Error: File name should contain only 'txt', 'exe' or 'dll'\
    \ extension.\"\n    exit 1\n  fi\n  return 0\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpspazy0s7.sh: line 22: substring: command not found

    '
  stdout: ''
  timestamp: 1660057345
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    # Check\
    \ the length of the file's name\n    length=$1\n    if [[ ${#length} -gt 3 ]];\
    \ then\n        echo \"Too long!\"\n        exit 1\n    fi\n\n    # Check the\
    \ file's name\n    name=$1\n    if [[ ! ${name// /.} =~ ^[^\\.]+\\.[^\\.]+$ ]];\
    \ then\n        echo \"Not a file!\"\n        exit 1\n    fi\n\n    # Check the\
    \ file's extension\n    ext=${name##*.}\n    if [[ ! ${ext} == txt \\\n      \
    \   || ! ${ext} == exe \\\n         || ! ${ext} == dll ]]; then\n        echo\
    \ \"Not a text file!\"\n        exit 1\n    fi\n\n    echo \"Yes\"\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057345
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  file=\"\
    $1\"\n  while read -r line; do\n    file_name=${line%%:*}\n    if [[ -z \"$file_name\"\
    \ ]]; then\n      echo \"$line does not contain any colon ':'\" >&2\n      exit\
    \ 1\n    elif (( ${#file} < 5 )); then\n      echo \"$line is too short.\" >&2\n\
    \      exit 1\n    elif [[ \"$file_name\" =~ ^[0-9]$ ]]; then\n      echo \"$line\
    \ does not contain zero or more digits.\" >&2\n      exit 1\n    elif (( ${#file_name}\
    \ > 5 )); then\n      echo \"$line is too long.\" >&2\n      exit 1\n    elif\
    \ [[ \"${file_name:0:1}\" != [[:alpha:]] ]]; then\n      echo \"$line does not\
    \ start with a letter from the latin alphabet\" >&2\n      exit 1\n    elif [[\
    \ \"${file_name:0:1}\" != [[:alpha:]]\\. ]]; then\n      echo \"$line does not\
    \ have a '.' after a letter.\" >&2\n      exit 1\n    elif [[ \"$file_name\" =~\
    \ \\.[[:alnum:]]* ]]; then\n      echo \"$line has a '.' after a letter.\" >&2\n\
    \      exit 1\n    elif [[ \"${file_name:1}\" =~ \\. ]]; then\n      echo \"$line\
    \ has more than one '.'\" >&2\n      exit 1\n    elif [[ \"${file_name}\" =~ \\\
    ..+$ ]]; then\n      echo \"$line has a substring after the dot '.'\" >&2\n  \
    \    exit 1\n    elif [[ ! \"${file_name}\" =~ \\.(txt|exe|dll)$ ]]; then\n  \
    \    echo \"$line does not have a '.txt', 'exe' or 'dll' extension\" >&2\n   \
    \   exit 1\n    elif [[ -e \"$file\" ]]; then\n      echo \"$line is a symbolic\
    \ link\" >&2\n      exit 1\n    elif [[ -e \"$file\" ]]; then\n      echo \"$line\
    \ is a directory\" >&2\n      exit 1\n    fi\n    break\n  done < \"$file\"\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp5hh9daz3.sh: line 18: example.txt: No such file or directory

    '
  stdout: ''
  timestamp: 1660057345
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local file=\"\
    $1\"\n  if [ \"$#\" -lt 1 ]; then\n    echo $usage_error_message\n    exit 0\n\
    \  fi\n\n  local filename=\"${file##*/}\"\n  local filename=\"${filename%.*}\"\
    \n  local dot_position=\"${filename#*.}\"\n\n  local dot_count\n  dot_count=$((\
    \ ${#filename} - 1 ))\n  while (( $dot_position > 0 )); do\n    local dot_index=$((\
    \ ${filename:($dot_position-1)} - 1 ))\n    local char=\"${filename:$dot_index}\"\
    \n    \n    if [[ $char =~ ^[0-9]$ ]]; then\n      local dot_count=$(( ${dot_count}\
    \ + 1 ))\n      if [[ $dot_count -gt 3 ]]; then\n        echo $failure_error_message\n\
    \        exit 0\n      fi\n    elif [[ $char =~ ^[a-zA-Z]$ ]]; then\n      local\
    \ dot_count=$(( ${dot_count} + 1 ))\n      if [[ $dot_count -gt 3 ]]; then\n \
    \       echo $failure_error_message\n        exit 0\n      fi\n    elif [[ $char\
    \ =~ ^\\.$ ]]; then\n      local dot_count=$(( ${dot_count} + 1 ))\n      if [[\
    \ $dot_count -gt 3 ]]; then\n        echo $failure_error_message\n        exit\
    \ 0\n      fi\n    else\n      echo $failure_error_message\n      exit 0\n   \
    \ fi\n    \n    dot_position=$(( ${dot_position} - 1 ))\n  done\n\n  local dot_count\n\
    \  dot_count=$(( ${#filename} - 1 ))\n  while (( $dot_count > 1 )); do\n    local\
    \ dot_index=$(( ${filename:($dot_count-1)} - 1 ))\n    local char=\"${filename:$dot_index}\"\
    \n    \n    if [[ $char =~ ^[0-9]$ ]]; then\n      local dot_count=$(( ${dot_count}\
    \ - 1 ))\n      if [[ $dot_count -gt 3 ]]; then\n        echo $failure_error_message\n\
    \        exit 0\n      fi\n    elif [[ $char =~ ^[a-zA-Z]$ ]]; then\n      local\
    \ dot_count=$(( ${dot_count} - 1 ))\n      if [[ $dot_count -gt 3 ]]; then\n \
    \       echo $failure_error_message\n        exit 0\n      fi\n    elif [[ $char\
    \ =~ ^\\.$ ]]; then\n      local dot_count=$(( ${dot_count} - 1 ))\n      if [[\
    \ $dot_count -gt 3 ]]; then\n        echo $failure_error_message\n        exit\
    \ 0\n      fi\n    else\n      echo $failure_error_message\n\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdc6tzcca.sh: line 88: syntax error near unexpected token `}''

    /tmp/tmpdc6tzcca.sh: line 88: `}''

    '
  stdout: ''
  timestamp: 1660057345
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ file_name=\"$1\"\n    local file_name_check_result=\"No\"\n    local file_extension=\"\
    ${file_name##*.}\"\n    if [[ $file_extension == \"txt\" ]] || [[ $file_extension\
    \ == \"exe\" ]] || [[ $file_extension == \"dll\" ]];\n    then\n        file_name_check_result=\"\
    Yes\"\n    fi\n    echo \"$file_name_check_result\"\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057345
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    [[ \"\
    $1\" =~ ([0-9][0-9][0-9]*\\.) ]] || return 1;\n    [[ \"$1\" =~ ^[^\\.]] ]] ||\
    \ return 1;\n    [[ \"$1\" =~ ^([a-zA-Z])$ ]] || return 1;\n    [[ \"$1\" =~ ^[a-z]\
    \ ]] || return 1;\n    [[ \"$1\" =~ ^[A-Z] ]] || return 1;\n    [[ \"$1\" =~ ^[0-9]\
    \ ]] || return 1;\n    echo \"Yes\"\n}\n\ncandidate() {\n    file_name_check \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\"\
    \ ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"\
    s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057345
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local filename=$1\n\
    \  local filetype=${filename##*.}\n  local filetype=${filetype%.*}\n  local letter1=${filename%%\\\
    .*}\n  local letter2=${letter1##*.}\n  local letter3=${letter2%%\\.*}\n  local\
    \ char_to_check=\"aA\"\n  if [[ ${letter3} != [[:digit:]] ]]; then\n    echo No\n\
    \  else\n    if [[ ${letter1} == [[:alpha:]]  && ${letter2} == [[:alpha:]] ]];\
    \ then\n      char_to_check=\"zZ\"\n    fi\n    if [[ \"${char_to_check}\" =~\
    \ [[:alpha:]].${letter3}$ ]]; then\n      if [[ \"${filetype}\" =~ ^((txt|exe|dll)\\\
    .)$ ]]; then\n        echo Yes\n      else\n        echo No\n      fi\n    else\n\
    \      echo No\n    fi\n  fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057345
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    # Convert\
    \ file name to lowercase, trim leading and trailing white space\n    file_name=$(echo\
    \ $1 | tr [:upper:] [:lower:] | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')\n\
    \n    # Verify whether $1 contains '.', else return \"No\"\n    file_name_no_dot=$(echo\
    \ $file_name | sed -e 's/\\.//')\n    if [ -z \"$file_name_no_dot\" ]; then\n\
    \        echo \"No\"\n        return\n    fi\n\n    # Verify whether $1 starts\
    \ with a letter, else return \"No\"\n    file_name_no_empty_sub_string=$(echo\
    \ $file_name_no_dot | sed -e 's/^[[:alpha:]]*//')\n    if [ -z \"$file_name_no_empty_sub_string\"\
    \ ]; then\n        echo \"No\"\n        return\n    fi\n\n    # Verify whether\
    \ $1 contains one of these strings: ['txt', 'exe', 'dll'], else return \"No\"\n\
    \    file_name_no_dot_after_dot=$(echo $file_name_no_empty_sub_string | sed -e\
    \ 's/\\.[^.]*$//')\n    if [ -z \"$file_name_no_dot_after_dot\" ]; then\n    \
    \    echo \"No\"\n        return\n    fi\n\n    case \"$file_name_no_dot_after_dot\"\
    \ in\n        'txt') echo \"Yes\" ;;\n        'exe') echo \"Yes\" ;;\n       \
    \ 'dll') echo \"Yes\" ;;\n        *)    echo \"No\" ;;\n    esac\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057345
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local FILE_NAME=\"\
    $1\"\n  \n  if [ -z \"$FILE_NAME\" ]; then\n    echo \"ERROR: Parameter 1 ($FILE_NAME)\
    \ is empty.\"\n    return 1\n  fi\n\n  # Check number of digits in the file name.\n\
    \  if [ \"${#FILE_NAME}\" -gt 3 ]; then\n    echo \"ERROR: Parameter 1 ($FILE_NAME)\
    \ has more than three digits.\"\n    return 1\n  fi\n  \n  if [ ! -f \"$FILE_NAME\"\
    \ ]; then\n    echo \"ERROR: Parameter 1 ($FILE_NAME) is not a file.\"\n    return\
    \ 1\n  fi\n  \n  # Check that the first character is a letter.\n  local FILE_NAME_PREFIX_LENGTH=${#FILE_NAME}\n\
    \  local FILE_NAME_PREFIX=${FILE_NAME:0:$FILE_NAME_PREFIX_LENGTH}\n  if [ \"${FILE_NAME_PREFIX:0:1}\"\
    \ != \"_\" -a \"${FILE_NAME_PREFIX:0:1}\" != \"a\" -a \"${FILE_NAME_PREFIX:0:1}\"\
    \ != \"A\" ]; then\n    echo \"ERROR: Parameter 1 ($FILE_NAME) does not start\
    \ with a letter.\"\n    return 1\n  fi\n  \n  # Check that the string after the\
    \ dot starts with one of these strings:\n  local FILE_NAME_SUFFIX_ARRAY=( txt\
    \ exe dll )\n  local FILE_NAME_SUFFIX_LENGTH=${#FILE_NAME_SUFFIX_ARRAY[@]}\n \
    \ local FILE_NAME_SUFFIX=${FILE_NAME:$FILE_NAME_PREFIX_LENGTH:$FILE_NAME_SUFFIX_LENGTH}\n\
    \  local FILE_NAME_SUFFIX_MATCH=0\n  for (( i = 0; i < $FILE_NAME_SUFFIX_LENGTH;\
    \ i++ )); do\n    if [ \"$FILE_NAME_SUFFIX\" == \"${FILE_NAME_SUFFIX_ARRAY[i]}\"\
    \ ]; then\n      FILE_NAME_SUFFIX_MATCH=1\n      break\n    fi\n  done\n  if [\
    \ \"$FILE_NAME_SUFFIX_MATCH\" -eq 0 ]; then\n    echo \"ERROR: Parameter 1 ($FILE_NAME)\
    \ does not end with one of these strings: $FILE_NAME_SUFFIX_ARRAY.\"\n    return\
    \ 1\n  fi\n  \n  # Success!\n  return 0\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057345
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  if [[ ${#1}\
    \ == 1 ]]; then\n    echo \"No\"\n    return\n  fi\n\n  local file_name=$1\n \
    \ local first_dot=${file_name%%\\.*}\n  local file_types=(\"txt\" \"exe\" \"dll\"\
    )\n  local last_dot=${file_name#*.}\n  local second_dot=${last_dot#*.}\n  local\
    \ valid_extensions=($( echo \"${file_types[*]}\" | sed 's/ /|/g' ))\n\n  local\
    \ file_is_valid=$( echo \"${valid_extensions[*]}\" | grep -q \"${first_dot}.${second_dot}\"\
    \ )\n\n  if [[ ${#file_name} == 1 ]]; then\n    echo \"No\"\n    return\n  fi\n\
    \  \n  if [[ ${file_is_valid} == 0 ]]; then\n    echo \"No\"\n    return\n  fi\n\
    \n  echo \"Yes\"\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057345
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local filename=$1\n\
    \  local valid_exts=(\"exe\" \"dll\" \"txt\")\n  local dot_pos=$(expr index $filename\
    \ '.')\n  local dot_size=$(expr len $filename '.')\n  local dot_start=$(expr substr\
    \ $filename 0 dot_pos)\n  local dot_end=$(expr substr $filename dot_size 1)\n\
    \  local first_char=$(expr index $filename 'a')\n  local last_char=$(expr index\
    \ $filename 'z')\n  local first_char_valid=false\n  local last_char_valid=false\n\
    \  local dot_start_valid=false\n  local dot_end_valid=false\n  local dot_valid=false\n\
    \  if [[ ${#filename} -ge 3 ]] ; then\n    if [[ ${filename} =~ [0-9] ]] ; then\n\
    \      echo \"Yes $filename\"\n      first_char_valid=true\n      last_char_valid=true\n\
    \      dot_start_valid=true\n      dot_end_valid=true\n    else\n      echo \"\
    No: $filename\"\n      echo \"Invalid filename characters\"\n      return 1\n\
    \    fi\n  else\n    echo \"No: $filename\"\n    echo \"Invalid filename length\"\
    \n    return 1\n  fi\n  if [[ ${first_char} -ge 0 ]] ; then\n    if [[ ${first_char}\
    \ -lt ${last_char} ]] ; then\n      echo \"No: $filename\"\n      echo \"Invalid\
    \ first character in filename\"\n      return 1\n    else\n      echo \"Yes $filename\"\
    \n    fi\n  else\n    echo \"No: $filename\"\n    echo \"Invalid first character\
    \ in filename\"\n    return 1\n  fi\n  if [[ ${#filename} -ge 3 ]] ; then\n  \
    \  if [[ ${filename} =~ (^[a-zA-Z][a-zA-Z0-9]*\\.)* ]] ; then\n      echo \"Yes\
    \ $filename\"\n      dot_valid=true\n    else\n      echo \"No: $filename\"\n\
    \      echo \"Invalid dot in filename\"\n      return 1\n    fi\n  else\n    echo\
    \ \"No: $filename\"\n    echo \"Invalid filename length\"\n    return 1\n  fi\n\
    \  if [[ ${#dot_start} -ge 1 ]] ; then\n    if [[ \"${dot_start}\" != \"-\" ]]\
    \ ; then\n      if [[ ${#dot_start} -lt 1 ]] ; then\n        echo \"No: $filename\"\
    \n        echo \"Invalid dot start in filename\"\n        return 1\n      else\n\
    \        echo \"Yes $filename\"\n      fi\n    else\n      echo \"No: $filename\"\
    \n      echo \"Invalid dot start in filename\"\n      return \n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpok8yd4et.sh: line 89: syntax error near unexpected token `}''

    /tmp/tmpok8yd4et.sh: line 89: `}''

    '
  stdout: ''
  timestamp: 1660057345
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    fileName=$(basename\
    \ $1)\n    [[ $fileName == *.* ]] && return 0\n    [[ ${fileName:0:1} == \"0\"\
    \ ]] && return 0\n    [[ -z ${fileName%%\\.*} ]] && return 0\n    [[ -z $(echo\
    \ ${fileName} | cut -d. -f1) ]] && return 0\n    [[ -z $(echo ${fileName} | cut\
    \ -d. -f2) ]] && return 0\n    [[ -z $(echo ${fileName} | cut -d. -f3) ]] && return\
    \ 0\n    [[ -z $(echo ${fileName} | cut -d. -f4) ]] && return 0\n    [[ -z $(echo\
    \ ${fileName} | cut -d. -f5) ]] && return 0\n    [[ -z $(echo ${fileName} | cut\
    \ -d. -f6) ]] && return 0\n    [[ -z $(echo ${fileName} | cut -d. -f7) ]] && return\
    \ 0\n    [[ -z $(echo ${fileName} | cut -d. -f8) ]] && return 0\n    [[ -z $(echo\
    \ ${fileName} | cut -d. -f9) ]] && return 0\n    [[ -z $(echo ${fileName} | cut\
    \ -d. -f10) ]] && return 0\n    [[ -z $(echo ${fileName} | cut -d. -f11) ]] &&\
    \ return 0\n    [[ -z $(echo ${fileName} | cut -d. -f12) ]] && return 0\n    [[\
    \ -z $(echo ${fileName} | cut -d. -f13) ]] && return 0\n    [[ -z $(echo ${fileName}\
    \ | cut -d. -f14) ]] && return 0\n    [[ -z $(echo ${fileName} | cut -d. -f15)\
    \ ]] && return 0\n    [[ -z $(echo ${fileName} | cut -d. -f16) ]] && return 0\n\
    \    [[ -z $(echo ${fileName} | cut -d. -f17) ]] && return 0\n    [[ -z $(echo\
    \ ${fileName} | cut -d. -f18) ]] && return 0\n    [[ -z $(echo ${fileName} | cut\
    \ -d. -f19) ]] && return 0\n    [[ -z $(echo ${fileName} | cut -d. -f20) ]] &&\
    \ return 0\n    [[ -z $(echo ${fileName} | cut -d. -f21) ]] && return 0\n    [[\
    \ -z $(echo ${fileName} | cut -d. -f22) ]] && return 0\n    [[ -z $(echo ${fileName}\
    \ | cut -d. -f23) ]] && return 0\n    [[ -z $(echo ${fileName} | cut -d. \n}\n\
    \ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpk9gcwxmc.sh: line 46: unexpected EOF while looking for matching
    `)''

    /tmp/tmpk9gcwxmc.sh: line 84: unexpected argument to conditional unary operator

    /tmp/tmpk9gcwxmc.sh: line 84: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057345
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ file_full_path=$1\n    echo \"$file_full_path\"\n    local file_extension=\"\
    ${file_full_path##*.}\"\n    local file_base_name=\"${file_full_path##*/}\"\n\
    \    local file_base_name_ext=\"${file_base_name%.*}\"\n    local file_base_name_no_ext=\"\
    ${file_base_name#*.}\"\n    local file_base_name_no_ext=\"${file_base_name_no_ext%.*}\"\
    \n    local file_base_name_no_ext_length=\"${#file_base_name_no_ext}\"\n    local\
    \ file_base_name_no_ext_first=\"${file_base_name_no_ext:0:$file_base_name_no_ext_length}\"\
    \n    local file_base_name_no_ext_rest=\"${file_base_name_no_ext:$file_base_name_no_ext_length}\"\
    \n    local file_base_name_no_ext_first_has_alpha=\"${file_base_name_no_ext_first:0:1}\"\
    \n    local file_base_name_no_ext_first_has_letter=\"${file_base_name_no_ext_first:1:1}\"\
    \n    local file_base_name_no_ext_rest_has_alpha=\"${file_base_name_no_ext_rest:0:1}\"\
    \n    local file_base_name_no_ext_rest_has_letter=\"${file_base_name_no_ext_rest:1:1}\"\
    \n    local file_base_name_contains_alpha_and_letter=\"${file_base_name_no_ext_first:1:1}\"\
    \n    local file_base_name_contains_alpha_and_letter=\"${file_base_name_no_ext_rest:1:1}\"\
    \n    local file_base_name_contains_alpha_and_letter=\"${file_base_name_no_ext_first:1:1}\"\
    \n    local file_base_name_contains_alpha_and_letter=\"${file_base_name_no_ext_rest:1:1}\"\
    \n    local file_base_name_contains_alpha_and_letter=\"${file_base_name_no_ext_first:1:1}\"\
    \n    local file_base_name_contains_alpha_and_letter=\"${file_base_name_no_ext_rest:1:1}\"\
    \n    local file_base_name_contains_alpha_and_letter=\"${file_base_name_no_ext_first:1:1}\"\
    \n    local file_base_name_contains_alpha_and_letter=\"${file_base_name_no_ext_rest:1:1}\"\
    \n    local file_base_name_contains_alpha_and_letter=\"${file_base_name_no_ext_first:1:1}\"\
    \n    local file_base_name_contains_alpha_and_letter=\"${file_base_name_no_ext_rest:1:1}\"\
    \n    local file_base_name_contains_alpha_and_letter=\"${file_base_name_no_ext_first:1:1}\"\
    \n    local file_base_name_contains_alpha_and_letter=\"${file_base_name_no_ext_rest:1:1}\"\
    \n    local file_base_name_contains_alpha_and_letter=\"${file_base_name_no_ext_first:1:1}\"\
    \n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057345
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n\tlocal file=\"\
    $1\"\n\t# Replace any invalid characters with '_' and count the number of non-\n\
    \t# alphanumeric characters in the string.\n\tlocal replacement_string='_'\n\t\
    local replacement_counter=`expr ${file//[^A-Za-z0-9]} - 1`\n\twhile [[ ${replacement_counter}\
    \ -gt 0 ]]; do\n\t\treplacement_string=${file//[^A-Za-z0-9]/${replacement_string}${replacement_string}}\n\
    \t\treplacement_counter=`expr ${replacement_counter} - 1}`\n\tdone\n\t# Check\
    \ if the substring before the first dot is empty, and it starts with a \n\t# letter\
    \ from the latin alphabet.\n\tlocal substring=\"`head -1 ${file}`\"\n\tif [[ ${substring:0:1}\
    \ != \"_\" ]]; then\n\t\techo \"No\"\n\telse\n\t\t# Check if the substring after\
    \ the dot is one of these: ['txt', 'exe', 'dll'].\n\t\tif [[ \"${substring##*.}\"\
    \ = \"exe\" ]]; then\n\t\t\tif [[ \"${substring##*.}\" = \"dll\" ]]; then\n\t\t\
    \t\techo \"Yes\"\n\t\t\telse\n\t\t\t\techo \"No\"\n\t\t\tfi\n\t\telse\n\t\t\t\
    echo \"No\"\n\t\tfi\n\tfi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n   \
    \ [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'expr: non-integer argument

    head: cannot open ''example.txt'' for reading: No such file or directory

    '
  stdout: ''
  timestamp: 1660057345
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  file=\"\
    $1\"\n  local dot_count=$(echo \"$file\" | egrep -o \"\\.[0-9]{1,3}$\" | wc -l)\n\
    \  if (( $dot_count < 1 ))\n  then\n    echo \"$file has incorrect format: it\
    \ should contain exactly one dot '.' and should not start with a digit ('0' -\
    \ '9')\"\n    return 1\n  fi\n  local before_dot_count=$(echo \"$file\" | egrep\
    \ -o \"\\..*$\" | wc -l)\n  if (( $before_dot_count > 1 ))\n  then\n    echo \"\
    $file has incorrect format: it should contain at most three digits ('0'-'9') before\
    \ a dot\"\n    return 1\n  fi\n  local dot_position=$(echo \"$file\" | egrep -o\
    \ \"\\.[0-9]{1,3}$\" | sed 's/./ /g' | wc -l)\n  if (( $dot_position > 0 ))\n\
    \  then\n    echo \"$file has incorrect format: it should not contain a dot ('.')\
    \ at the end\"\n    return 1\n  fi\n  local dot_position=$(echo \"$file\" | egrep\
    \ -o \"\\.[0-9]{1,3}$\" | sed 's/.* //g' | wc -l)\n  if (( $dot_position > 0 ))\n\
    \  then\n    echo \"$file has incorrect format: it should not contain a dot ('.')\
    \ at the beginning\"\n    return 1\n  fi\n  local dot_position=$(echo \"$file\"\
    \ | egrep -o \"\\.[0-9]{1,3}$\" | sed 's/.\\* //g' | wc -l)\n  if (( $dot_position\
    \ > 0 ))\n  then\n    echo \"$file has incorrect format: it should not contain\
    \ a dot ('.') at the beginning\"\n    return 1\n  fi\n  local dot_position=$(echo\
    \ \"$file\" | egrep -o \"\\.[0-9]{1,3}$\" | sed 's/.\\/ //g' | wc -l)\n  if ((\
    \ $dot_position > 0 ))\n  then\n    echo \"$file has incorrect format: it should\
    \ not contain a dot ('.') at the beginning\"\n    return 1\n  fi\n  local dot_position=$(echo\
    \ \"$file\" | egrep -o \"\\.[0-9]{1,3}$\" | sed 's/.//g' | wc -l)\n  if (( $dot_position\
    \ > 0 ))\n  then\n    echo \"$file has incorrect format: it should contain exactly\
    \ one of these extensions: ['txt', 'exe', 'dll']\"\n    return 1\n  fi\n  echo\
    \ \"$file is valid\"\n  return 0\n}\n\ncandidate() {\n    file_name_check \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057345
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    file_name=\"\
    $1\"\n    if [[ $# -eq 1 ]]; then\n        echo \"Usage: `basename $0` file_name\"\
    \n        return 2\n    fi\n    [[ \"$file_name\" =~ ^[0-9]+$ ]] || { echo \"\
    Invalid file name\"; return 3; }\n    [[ \"$file_name\" =~ ^[^\\.][^\\.]$ ]] ||\
    \ { echo \"Invalid file name\"; return 4; }\n    [[ \"$file_name\" =~ ^[a-zA-Z][a-zA-Z][a-zA-Z][0-9]$\
    \ ]] || { echo \"Invalid file name\"; return 5; }\n    echo \"Yes\"\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057345
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ file=\"$1\"\n    if [[ $file =~ ^[0-9]{3}$ ]] || [[ $file =~ .* ]] || [[ ! \"\
    $file\" =~ ^[a-z][a-z][a-z]$ ]]; then\n        echo \"No\"\n    else\n       \
    \ if [[ $file =~ .* ]]; then\n            local before=${file%%?}\n          \
    \  if [[ $before =~ ^[a-z] ]]; then\n                echo \"Yes\"\n          \
    \  else\n                echo \"No\"\n            fi\n        else\n         \
    \   echo \"No\"\n        fi\n    fi\n}\n\ncandidate() {\n    file_name_check \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\"\
    \ ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"\
    s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057345
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local file_name\
    \ \n  file_name=$1 \n  [ ${#file_name} -le 3 ] && return 0\n  [ ${file_name:0:1}\
    \ == '.' ] && return 0 \n  [ ${file_name:0:1} != [a-zA-Z] ] && return 0\n  [ ${file_name:1:2}\
    \ == '.' ] && return 0\n  [ ${file_name:2:3} == '.' ] && return 0\n  [ ${file_name:2:3}\
    \ == 'txt' ] || [ ${file_name:2:3} == 'exe' ] || [ ${file_name:2:3} == 'dll' ]\
    \ || return 0\n  return 1\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n   \
    \ [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpl71ewlx_.sh: line 23: [: too many arguments

    '
  stdout: ''
  timestamp: 1660057345
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ string=$1\n    if [[ -z $string ]]; then\n        echo \"No\"\n        return\
    \ 0;\n    fi\n    \n    if [[ \"$string\" =~ ^[0-9]$ ]]; then\n        echo \"\
    No\"\n        return 0;\n    fi\n    \n    if [[ $string =~ .* ]]; then\n    \
    \    echo \"No\"\n        return 0;\n    fi\n    \n    if [[ ${string:0:1} =~\
    \ ^[a-Z] ]] || [[ ${string:0:1} =~ ^[0-z] ]]; then\n        echo \"No\"\n    \
    \    return 0;\n    fi\n\n    for file in \"${files[@]}\"; do\n        if [[ $file\
    \ == *\"$string\"* ]]; then\n            echo \"Yes\"\n            return 0\n\
    \        fi\n    done\n\n    echo \"No\"\n    return 0\n}\n\ncandidate() {\n \
    \   file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057345
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  IFS=\"\
    .\" read -a array <<< $1\n  \n  count=0\n  \n  # Check if file name is valid\n\
    \  for element in \"${array[@]}\"; do\n    if (( count > 2 )); then\n      return\
    \ 1\n    fi\n    \n    if [[ $element == *\"[0-9]\"* ]]; then\n      count=$((\
    \ count + 1 ))\n    fi\n    \n    if [[ $element == *\"[a-zA-Z]\"* ]]; then\n\
    \      count=$(( count + 1 ))\n    fi\n    \n    if (( count > 1 )); then\n  \
    \    return 1\n    fi\n  done\n  \n  # If all conditions are met, return 'Yes'\n\
    \  return 0\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057345
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local fname=$1\n\
    \  if [[ $(fname==\"*\"|fname==\"?\"|fname==\"#\"|fname==\"-\"|fname==\"|fname==\"\
    :\"|fname==\"~\"|fname==\"+\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\"\
    :\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\"\
    :\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\"\
    :\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\"\
    :\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\"\
    :\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\"\
    :\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\"\
    :\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\"\
    :\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\"\
    :\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\"\
    :\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\"\
    :\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\"\
    :\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\"\
    :\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\"\
    :\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\"\
    :\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\":\"|fname==\"\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpe6hnd7jc.sh: line 20: unexpected EOF while looking for matching
    `)''\n/tmp/tmpe6hnd7jc.sh: line 58: unexpected token `\xff'' in conditional command\n/tmp/tmpe6hnd7jc.sh:
    line 58: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  if [[ ${#1}\
    \ -le 3 ]]; then\n    local file_name=${1}\n    if [[ ${file_name:0:1} != '\\\\\
    ' ]]; then\n      if [[ ${file_name:0:1} = '.' ]]; then\n        local dot_length=${#file_name}\n\
    \        if [[ ${dot_length} -eq 1 ]]; then\n          local first_char=${file_name:0:1}\n\
    \          local valid_chars=${first_char}[0-9a-zA-Z.]\n          if [[ ${file_name:0:1}\
    \ = '.' ]] || [[ ${#valid_chars} -eq 1 ]]; then\n            echo Yes\n      \
    \    else\n            echo No\n          fi\n        else\n          echo No\n\
    \        fi\n      else\n        echo No\n      fi\n    else\n      echo No\n\
    \    fi\n  else\n    echo No\n  fi\n}\n\ncandidate() {\n    file_name_check \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\"\
    \ ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"\
    s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  [ \"$#\"\
    \ -lt 1 ] && return 1\n  local file_name=\"$1\"\n  [[ \"$file_name\" =~ ^[0-9][0-9]*\\\
    .[a-zA-Z]*$ ]] \\\n    && local file_name_parts=${file_name%%\\.*} && local file_name_extension=${file_name##*.}\n\
    \  [ \"$file_name_parts\" == \"\" ] && return 1\n  local file_name_part_count=0\n\
    \  while [ \"$file_name_part_count\" -lt 3 ]; do\n    local file_name_part=\"\
    $(expr \"$file_name_parts\" : '.*\\(.*\\)')\"\n    if [[ \"$file_name_part\" !=\
    \ \"\" && $file_name_part =~ ^[a-zA-Z][a-zA-Z0-9]*$ ]]; then\n      file_name_part_count=\"\
    $(( ${file_name_part_count} + 1 ))\"\n    fi\n    file_name_parts=\"${file_name_part%.*}\"\
    \n  done\n  [ \"$file_name_part_count\" -eq 3 ]\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local filename=$1\n\
    \  # Strip leading and trailing spaces\n  filename=${filename##[[:space:]]}\n\
    \  filename=${filename%%[[:space:]]}\n  filename=${filename:-'.'}\n  # Remove\
    \ leading dot and check if filename contains any digit\n  if [[ $filename == .*\
    \ ]]; then\n    echo \"No\"\n  else\n    # Remove leading numbers and check if\
    \ filename contains only allowed chars\n    if [[ \"$filename\" =~ ^[0-9]+$ ]];\
    \ then\n      echo \"No\"\n    else\n      # Remove leading letters and check\
    \ if filename contains only allowed chars\n      if [[ \"$filename\" =~ ^[a-z]+$\
    \ ]]; then\n        echo \"No\"\n      else\n        echo \"Yes\"\n      fi\n\
    \    fi\n  fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  if [[ \"\
    $1\" =~ ^[0-9]{3}\\.\\.[0-9a-zA-Z]$ && \\\n      $1 =~ ^[^\\.]+\\. && \\\n   \
    \   ${BASH_REMATCH[0]} == ${BASH_REMATCH[0]#*.}\n  ]]; then\n    echo \"Yes\"\n\
    \  else\n    echo \"No\"\n  fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    test\
    \ -z \"$1\" || \n    expr \"$1\" : '[0-9]*$' >/dev/null 2>&1 || \n    expr \"\
    $1\" : '^[^\\.]' >/dev/null 2>&1 || \n    expr \"$1\" : '^\\.\\..*' >/dev/null\
    \ 2>&1 || \n    test -z \"$1\" || \n    test -z \"$1\" || \n    expr \"$1\" :\
    \ '^[a-z][a-z][a-z]$' >/dev/null 2>&1 ||\n    expr \"$1\" : '^[a-z][a-z][a-z][a-z][a-z][a-z]$'\
    \ >/dev/null 2>&1 || \n    expr \"$1\" : '^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z]$'\
    \ >/dev/null 2>&1 ||\n    expr \"$1\" : '^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z]$'\
    \ >/dev/null 2>&1 ||\n    expr \"$1\" : '^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z]$'\
    \ >/dev/null 2>&1 ||\n    expr \"$1\" : '^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z]$'\
    \ >/dev/null 2>&1\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    file1=\"\
    $1\"\n    if [[ \"$file1\" =~ ^[0-9]{0,3}\\.\\.[a-zA-Z0-9]{0,6}$ ]]\n    then\n\
    \        echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ FILENAME=$1\n    if [[ \"$FILENAME\" =~ ^[0-9]\\.[a-z].* ]]; then\n        echo\
    \ \"Yes\"\n    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n   local\
    \ FILENAME=$1\n   if [[ -z $(echo $FILENAME | grep -o '[0-9][0-9]*\\.[0-9]') ]]\n\
    \   then\n      return 0\n   elif [[ -z $(echo $FILENAME | grep -o '[^\\.]') ]]\n\
    \   then\n      return 0\n   elif [[ -z $(echo $FILENAME | grep -o '[a-zA-Z][^\\\
    .]') ]]\n   then\n      return 0\n   elif [[ $(echo $FILENAME | grep -o '[^\\\
    .][a-zA-Z]') ]]\n   then\n      return 0\n   else\n      return 1\n   fi\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local file_name\
    \ file_name_checked_flag=No\n  file_name=${1:-\"\"}\n  file_name=${file_name%\"\
    .\"}\n  file_name=${file_name##*[!0-9]}\n  if [[ -z \"${file_name}\" ]]; then\n\
    \    echo \"The file name is empty or invalid.\"\n    file_name_checked_flag=No\n\
    \  elif [[ ! \"${file_name}\" = *\".\" ]]; then\n    echo \"The file name is invalid.\"\
    \n    file_name_checked_flag=No\n  elif [[ ${file_name%%\\.} != *[!0-9]* ]]; then\n\
    \    echo \"The file name is invalid.\"\n    file_name_checked_flag=No\n  elif\
    \ [[ ${file_name%%\\.} == * ]]; then\n    echo \"The file name should not contain\
    \ '.' at the beginning.\"\n    file_name_checked_flag=No\n  elif [[ \"${file_name%%\\\
    .}\" = *.* ]]; then\n    echo \"The file name should not contain '.' anywhere\
    \ in the middle.\"\n    file_name_checked_flag=No\n  elif [[ \"${file_name%%\\\
    .}\" = *[^a-zA-Z]* ]]; then\n    echo \"The file name contains invalid characters.\"\
    \n    file_name_checked_flag=No\n  else\n    file_name_checked_flag=Yes\n  fi\n\
    \  echo \"${file_name_checked_flag}\"\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  # Checks\
    \ if the length of the string is not more than three digits\n  if [[ \"$1\" =~\
    \ ^([0-9]{1,3}\\.){0,3}[0-9]{1,3}$ ]]; then\n    echo \"Yes\";\n  else\n    echo\
    \ \"No\";\n  fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    [[ \"\
    $1\" =~ ^[0-9]{3}\\.[a-z]$ ]] || return 1\n    [[ \"$1\" =~ ^[a-z]$ ]] || return\
    \ 1\n    [[ \"$1\" =~ ^[a-z].*$ ]] || return 1\n    [[ \"$1\" =~ \\.(exe|dll|txt)$\
    \ ]] || return 1\n    return 0\n}\n\ncandidate() {\n    file_name_check \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    file_name=$1\n\
    \    \n    if [[ ${file_name:0:1} == \"0\" ]] || [[ ${file_name:0:1} == \"1\"\
    \ ]] || [[ ${file_name:0:1} == \"2\" ]] || [[ ${file_name:0:1} == \"3\" ]]; then\n\
    \        echo \"No\";\n    else\n        if [[ ${file_name:0:1} == \"-\" ]]; then\n\
    \            echo \"No\";\n        else\n            if [[ \"$file_name\" =~ ^[a-zA-Z][0-9]{3}[a-zA-Z]\\\
    .[a-zA-Z]+$ ]]; then\n                if [[ \"${file_name%%%.*}\" == \"\" ]];\
    \ then\n                    echo \"Yes\";\n                else\n            \
    \        if [[ \"${file_name%%%.*}\" == txt ]]; then\n                       \
    \ echo \"Yes\";\n                    else\n                        if [[ \"${file_name%%%.*}\"\
    \ == exe ]]; then\n                            echo \"Yes\";\n               \
    \         else\n                            if [[ \"${file_name%%%.*}\" == dll\
    \ ]]; then\n                                echo \"Yes\";\n                  \
    \          else\n                                echo \"No\";\n              \
    \              fi\n                        fi\n                    fi\n      \
    \          fi\n            else\n                echo \"No\";\n            fi\n\
    \        fi\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n\tlocal file_name=$1\n\
    \n\t# Check if there is more than 3 digits in the filename\n\t[[ ${file_name,,}\
    \ =~ ^[0-9][0-9][0-9][0-9]$ ]] && return 0\n\n\t# Check if there are more than\
    \ one dots in the filename\n\t[[ ${file_name,,} =~ ^.*\\.$$ ]] && return 0\n\n\
    \t# Check if there is a first character which is not a letter (Latin alphabet)\n\
    \t[[ ${file_name:0:1} == [[:alpha:]]* ]] && return 0\n\n\t# Check if there is\
    \ a dot in the filename before the substring 'exe'\n\t[[ ${file_name:0:2} == [.exe\
    \ ]] && return 0\n\n\t# Check if there is a dot in the filename after the substring\
    \ 'dll'\n\t[[ ${file_name:2:2} == [.dll ]] && return 0\n\n\t# Check if 'exe',\
    \ 'dll' or 'txt' exists in the filename before the substring 'exe'\n\t[[ ${file_name:0:2}\
    \ == [.exe ] ]] || [[ ${file_name:2:2} == [.dll ] ]] || [[ ${file_name:0:1} ==\
    \ [[:alpha:]]* ]] && return 0\n\n\treturn 1\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpestn7lje.sh: line 37: syntax error in conditional expression\n/tmp/tmpestn7lje.sh:
    line 37: syntax error near `]''\n/tmp/tmpestn7lje.sh: line 37: `\t[[ ${file_name:0:2}
    == [.exe ] ]] || [[ ${file_name:2:2} == [.dll ] ]] || [[ ${file_name:0:1} == [[:alpha:]]*
    ]] && return 0''\n"'
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local file_name=$1\n\
    \  local dot_index=$(expr index \"$file_name\" \".\")\n  local dot_length=$((dot_index\
    \ - 1))\n  local dot_name=$(expr substr -- \"$file_name\" 0 dot_length)\n  local\
    \ valid_substrings=(\"txt\" \"exe\" \"dll\")\n  local valid_substring_index=$(expr\
    \ index \"$dot_name\" \"$valid_substrings\")\n  local is_valid=$(expr compare\
    \ \"$dot_index\" \"$valid_substring_index\" '>')\n  if \"$is_valid\"; then\n \
    \   return 0\n  else\n    return 1\n  fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''expr: syntax error: unexpected argument \xe2\x80\x98dot_length\xe2\x80\x99\nexpr:
    syntax error: unexpected argument \xe2\x80\x988\xe2\x80\x99\n/tmp/tmp8a4x478h.sh:
    line 26: : command not found\n'''
  stdout: b''
  timestamp: 1660078302
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local filename=$1\n\
    \  local valid=No\n  local dot_num=$(echo $filename | cut -d '.' -f 1)\n  local\
    \ file_num=$(echo $filename | cut -d '.' -f 2)\n  \n  if (( $(echo \"$dot_num\"\
    \ | wc -c) -gt 3 )); then\n    valid=Yes\n  fi\n\n  if (( $(echo \"$dot_num\"\
    \ | wc -c) -eq 1 )); then\n    valid=Yes\n  fi\n\n  for i in {a..z}; do\n    if\
    \ [[ $i =~ ^[Aa][[:blank:]].*[[:digit:]]*$ ]]; then\n      valid=Yes\n      break\n\
    \    fi\n  done\n  \n  for i in {Aa..Zz}; do\n    if [[ $i =~ ^[^[:blank:]]*[[:digit:]]*$\
    \ ]]; then\n      valid=Yes\n      break\n    fi\n  done\n\n  if [[ $valid ==\
    \ Yes ]]; then\n    if [[ $(echo \"$dot_num\" | awk '{print $1}') == \"0\" ]];\
    \ then\n      valid=No\n    fi\n    \n    if [[ $(echo \"$dot_num\" | awk '{print\
    \ $1}') =~ ^[[:alpha:]]+$ ]]; then\n      if [[ \"$dot_num\" =~ ^[^[:blank:]]+[[:digit:]]+$\
    \ ]]; then\n        valid=No\n      fi\n    fi\n    \n    if [[ $(echo \"$dot_num\"\
    \ | awk '{print $1}') =~ ^[[:alpha:]]+ ]]; then\n      if [[ \"$dot_num\" =~ ^[^[:blank:]]+$\
    \ ]]; then\n        valid=No\n      fi\n    fi\n    \n    if [[ $(echo \"$dot_num\"\
    \ | awk '{print $1}') =~ ^[[:alpha:]]+ ]]; then\n      if [[ \"$dot_num\" =~ ^[^[:blank:]]+$\
    \ ]]; then\n        valid=No\n      fi\n    fi\n\n    if [[ \"$dot_num\" =~ ^[[:alpha:]]+\
    \ ]]; then\n      if [[ \"$dot_num\" =~ ^[[:digit:]]+$ ]]; then\n        valid=No\n\
    \      fi\n    fi\n    \n    if [[ \"$dot_num\" =~ ^[[:alpha:]]+$ ]]; then\n \
    \     if [[ \"$dot_num\" =~ ^[[:digit:]]+$ ]]; then\n        valid=No\n      fi\n\
    \    fi\n    \n    if [[ \"$dot_num\" =~ ^\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpnn88xfmq.sh: line 81: syntax error in conditional expression\n/tmp/tmpnn88xfmq.sh:
    line 82: syntax error near `}''\n/tmp/tmpnn88xfmq.sh: line 82: `}''\n"'
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  FILENAME=$1\n\
    \  FILENAME_NUM=$(echo $FILENAME | sed 's/\\..*$//g')\n  FILENAME_NUM=$(echo $FILENAME_NUM\
    \ | sed 's/^0*//g')\n  FILENAME_NUM=$(echo $FILENAME_NUM | sed 's/^[1-9]//g')\n\
    \  FILENAME_NUM=$(echo $FILENAME_NUM | sed 's/^0*//g')\n  if [ -z \"$FILENAME_NUM\"\
    \ ]\n  then\n    echo \"No\"\n  else\n    FILETYPE=`file -b $FILENAME`\n    FILETYPE=`echo\
    \ $FILETYPE | cut -d ' ' -f4`\n    FILETYPE=`echo $FILETYPE | tr '[:upper:]' '[:lower:]'`\n\
    \    if [ \"$FILETYPE\" = \"text\" ]\n    then\n      echo \"Yes\"\n    else\n\
    \      echo \"No\"\n    fi\n  fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local fn=$1\n\
    \  \n  local num_digits=$(echo \"$fn\" | sed 's/\\([0-9][0-9]*\\)\\.\\([^0-9]*\\\
    )/\\1/g' | wc -w)\n  if (( $num_digits > 3 )); then\n    echo \"$fn\" \n  else\n\
    \    if [[ \"$fn\" =~ ^[0-9]+\\.[^0-9]+ ]]; then\n      if [[ \"$fn\" =~ ^[^0-9]*\
    \ ]]; then\n        if [[ \"$fn\" =~ ^[a-z] [A-Z] ]]; then\n          echo \"\
    Yes\"\n        else\n          echo \"No\"\n        fi\n      else\n        if\
    \ [[ \"$fn\" =~ ^[a-z] [A-Z] ]]; then\n          echo \"Yes\"\n        else\n\
    \          echo \"No\"\n        fi\n      fi\n    else\n      echo \"No\"\n  \
    \  fi\n  fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3dpdxhpy.sh: line 27: syntax error in conditional expression\n/tmp/tmp3dpdxhpy.sh:
    line 27: syntax error near `[A-Z]\''\n/tmp/tmp3dpdxhpy.sh: line 27: `        if
    [[ "$fn" =~ ^[a-z] [A-Z] ]]; then\''\n'''
  stdout: b''
  timestamp: 1660078302
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local file=\"\
    $1\"\n  local result=\"No\"\n  if [[ ${#file} -le 3 ]]; then\n    while [[ $(expr\
    \ \"${file}\" : '\\..*') ]] && [[ $(expr \"${file}\" : '^[A-Za-z]') ]]; then\n\
    \      file=\"${file%%.*}\"\n    done\n    if [[ $(expr \"${file}\" : '^[A-Za-z]')\
    \ ]]; then\n      result=\"Yes\"\n    fi\n  fi\n  if [[ \"${result}\" == \"Yes\"\
    \ ]]; then\n    while [[ $(expr \"${file}\" : '\\..*') ]] && [[ $(expr \"${file}\"\
    \ : '^[A-Za-z]') ]]; then\n      file=\"${file%%.*}\"\n    done\n    if [[ \"\
    ${file}\" =~ (^[0-9]+\\.txt$) ]]; then\n      result=\"Yes\"\n    elif [[ \"${file}\"\
    \ =~ (^[0-9]+\\.exe$) ]]; then\n      result=\"Yes\"\n    elif [[ \"${file}\"\
    \ =~ (^[0-9]+\\.dll$) ]]; then\n      result=\"Yes\"\n    fi\n  fi\n  echo \"\
    $result\"\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuhjvu2qw.sh: line 22: syntax error near unexpected token `then\''\n/tmp/tmpuhjvu2qw.sh:
    line 22: `    while [[ $(expr "${file}" : \''\\..*\'') ]] && [[ $(expr "${file}"
    : \''^[A-Za-z]\'') ]]; then\''\n'''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local name=\"\
    ${1}\"\n  local index=\"3\" # Starting from the 3rd character\n  local length=\"\
    ${#name}\"\n\n  # Check that there are no more than 3 digits in length\n  if [\
    \ \"${length}\" -gt \"${index}\" ]; then\n    echo \"No more than 3 digits in\
    \ length (${length} > ${index}).\"\n    return 1\n  fi\n\n  # Check that there\
    \ is only one dot\n  if [ \"${name}\" != \"${name/\\.}\" ]; then\n    echo \"\
    There are more than 1 dots in the file's name (${name}). Please make sure that\
    \ the file name contains only one dot.\"\n    return 1\n  fi\n\n  # Check that\
    \ substring before dot starts with a letter from latin alphabet (A-Z and a-z)\n\
    \  if [ \"${name:0:index}\" != \"${name:0:index}\" ]; then\n    echo \"The substring\
    \ before the dot starts with a letter from latin alphabet (A-Z and a-z) (${name:0:index}).\"\
    \n    return 1\n  fi\n\n  # Check that substring after dot is one of these: ['txt',\
    \ 'exe', 'dll']\n  for extension in txt exe dll; do\n    if [ \"${name:length}\"\
    \ -eq \"${index}${extension}\" ]; then\n      echo \"The substring after the dot\
    \ is one of these: ['txt', 'exe', 'dll'] (${name}). Please make sure that the\
    \ file name ends with one of the extensions.\"\n      return 1\n    fi\n  done\n\
    \n  echo \"The file's name is valid (${name}).\"\n  return 0\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    if [[\
    \ $1 =~ ^[0-9]+$ ]] || [[ $1 =~ ^\\.[[:alnum:]]*$ ]] || [[ ! -z $(echo \"$1\"\
    \ | grep -E \"^[[:alpha:]]*\\.[[:alnum:]]*$\") ]]; then\n\techo \"Yes\"\n    else\n\
    \techo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    # Check\
    \ if file name is valid\n    if [[ $1 =~ ^[0-9]{3}\\.[a-zA-Z0-9]+\\.txt$ ]] ||\
    \ [[ $1 =~ ^[0-9]{3}\\.[a-zA-Z0-9]+\\.exe$ ]] || [[ $1 =~ ^[0-9]{3}\\.[a-zA-Z0-9]+\\\
    .dll$ ]]; then\n        return \"Yes\";\n    else\n        return \"No\";\n  \
    \  fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp9ec820jc.sh: line 23: return: No: numeric argument required\n'''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  if ! [[\
    \ $1 =~ ^[0-9]{3}\\.[a-z]$ && ${BASH_REMATCH[1]}${BASH_REMATCH[2]} == [a-z] ]];\
    \ then\n    echo \"No\"\n  else\n    echo \"Yes\"\n  fi\n}\n\ncandidate() {\n\
    \    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n\
    \    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  # Define\
    \ regular expressions\n  regex1=\"^([0-9][0-9][0-9]|[0-9][0-9][0-9][0-9])\\.\"\
    \n  regex2=\"\\.(exe|dll|txt)\"\n  # If file's name is valid return \"Yes\", otherwise\
    \ return \"No\"\n  [[ \"$1\" =~ $regex1 ]] && [[ $1 =~ $regex2 ]] && echo \"Yes\"\
    \n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ FILE_NAME=\"$1\"\n    local VALID_NAME_PATTERN=\"^[0-9][0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?$\"\
    \n    local VALID_NAME_SUBSTRING_PREFIX=\"[a-z][a-z][a-z]\"\n    local VALID_NAME_SUBSTRING_SUFFIX=\"\
    |\\.(exe|dll|txt)\"\n    if ! [[ $FILE_NAME =~ $VALID_NAME_PATTERN ]]; then\n\
    \        echo \"Invalid file name format: $FILE_NAME\" >&2\n        return 1\n\
    \    fi\n    if [[ \"$FILE_NAME\" =~ $VALID_NAME_SUBSTRING_PREFIX ]]; then\n \
    \       echo \"Invalid file name prefix: $FILE_NAME\" >&2\n        return 1\n\
    \    fi\n    if [[ \"$FILE_NAME\" =~ $VALID_NAME_SUBSTRING_SUFFIX ]]; then\n \
    \       echo \"Invalid file name suffix: $FILE_NAME\" >&2\n        return 1\n\
    \    fi\n    local FIRST_DOT_PREFIX=\"\\.[0-9][0-9]\"\n    if ! [[ $FILE_NAME\
    \ =~ $FIRST_DOT_PREFIX ]]; then\n        echo \"Invalid file name format: $FILE_NAME\"\
    \ >&2\n        return 1\n    fi\n    local SUBSTRING=$BASH_REMATCH\n    if ! [[\
    \ $SUBSTRING =~ ^$VALID_NAME_SUBSTRING_PREFIX$VALID_NAME_SUBSTRING_SUFFIX ]];\
    \ then\n        echo \"Invalid file name format: $FILE_NAME\" >&2\n        return\
    \ 1\n    fi\n    local VALID_SUBSTRINGS=(exe dll txt)\n    if ! [[ ${VALID_SUBSTRINGS[*]}\
    \ =~ $SUBSTRING ]]; then\n        echo \"Invalid file name format: $FILE_NAME\"\
    \ >&2\n        return 1\n    fi\n    return 0\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''Invalid file name format: example.txt\n'''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    [ \"\
    $1\" != \"\" ] && [ \"$1\" != \".\" ] && [ ${#1} -gt 3 ] || \n        [ ${#1}\
    \ -eq 0 ] || [ $(echo \"${1}\" | sed -e \"s/^[^.]//g\" -e \"s/\\.$//g\" -e \"\
    s/^[a-z]\\{1,\\}//g\" -e \"s/\\.[a-z]\\{1,\\}//g\") != \"txt\" \\\n          \
    \  || $(echo \"${1}\" | sed -e \"s/^[^.]//g\" -e \"s/\\.$//g\" -e \"s/^[a-z]\\\
    {1,\\}//g\" -e \"s/\\.[a-z]\\{1,\\}//g\") != \"exe\" \\\n            || $(echo\
    \ \"${1}\" | sed -e \"s/^[^.]//g\" -e \"s/\\.$//g\" -e \"s/^[a-z]\\{1,\\}//g\"\
    \ -e \"s/\\.[a-z]\\{1,\\}//g\") != \"dll\" ]\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    file_name=\"\
    $1\"\n\n    echo \"${file_name}\" | egrep \"^[0-9][0-9][0-9].*\\.[exe|dll|txt]$\"\
    \ || return 1\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ NAME=$1\n    NAME=${NAME// /\\ } # Replace all spaces with nothing (removes\
    \ everything before\n                    # the first space)\n    NAME=${NAME%.*}\
    \ # Remove everything after the last space\n    NAME=${NAME//[^0-9\\.]/}  # Remove\
    \ everything that's not a number\n    NAME=${NAME//\\.txt/}\n    NAME=${NAME//\\\
    .exe/}\n    NAME=${NAME//\\.dll/}\n    NAME=${NAME//\\.md/}\n    NAME=${NAME//\\\
    .ini/}\n    NAME=${NAME//\\.nk/}\n    NAME=${NAME//\\.png/}\n    NAME=${NAME//\\\
    .bmp/}\n    NAME=${NAME//\\.gif/}\n    NAME=${NAME//\\.jpg/}\n    NAME=${NAME//\\\
    .jpeg/}\n    NAME=${NAME//\\.exe/}\n    NAME=${NAME//\\.dll/}\n    NAME=${NAME//\\\
    .swp/}\n    NAME=${NAME//\\.exe/}\n    NAME=${NAME//\\.dll/}\n    NAME=${NAME//\\\
    .swp/}\n    NAME=${NAME//\\.exe/}\n    NAME=${NAME//\\.dll/}\n    NAME=${NAME//\\\
    .swp/}\n    NAME=${NAME//\\.exe/}\n    NAME=${NAME//\\.dll/}\n    NAME=${NAME//\\\
    .swp/}\n    NAME=${NAME//\\.exe/}\n    NAME=${NAME//\\.dll/}\n    NAME=${NAME//\\\
    .swp/}\n    NAME=${NAME//\\.exe/}\n    NAME=${NAME//\\.dll/}\n    NAME=${NAME//\\\
    .swp/}\n    NAME=${NAME//\\.exe/}\n    NAME=${NAME//\\.dll/}\n    NAME=${NAME//\\\
    .swp/}\n    NAME=${NAME//\\.exe/}\n    NAME=${NAME//\\.dll/}\n    NAME=${NAME//\\\
    .swp/}\n    NAME=${NAME//\\.exe/}\n    NAME=${NAME//\\.dll/}\n    NAME=${NAME//\\\
    .swp/}\n    NAME=${NAME//\\.exe/}\n    NAME=${NAME//\\.dll/}\n    NAME=${NAME//\\\
    .swp/}\n    NAME=${NAME//\\.exe/}\n    NAME=${NAME//\\.dll/}\n    NAME=${NAME//\\\
    .swp/}\n    NAME=${NAME//\\.exe/}\n\n}\n\ncandidate() {\n    file_name_check \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\"\
    \ ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"\
    s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local STRING=\"\
    $1\"\n  [[ \"${STRING}\" =~ ^[0-9]\\+\\.[0-9]+$ ]] || return \"No\"\n  [[ \"${STRING}\"\
    \ =~ ^[^.]+\\.[^.]+$ ]] || return \"No\"\n  [[ \"${STRING}\" =~ ^[a-z]\\.* ]]\
    \ || return \"No\"\n  [[ -f \"${STRING}\" ]] || return \"No\"\n  [[ -x \"${STRING}\"\
    \ ]] || return \"No\"\n  return \"Yes\"\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpnm64pnv1.sh: line 20: return: No: numeric argument required\n'''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ file_name=\"$1\"\n    local file_name_check_result\n    if [ -z \"$file_name\"\
    \ ]; then\n        file_name_check_result=\"No\"\n        echo \"$file_name_check_result\"\
    \n        return\n    fi\n    if ! echo \"$file_name\" | grep -q -E \"[0-9]+\\\
    .[0-9]+\\.[0-9]+$\" > /dev/null; then\n        file_name_check_result=\"No\"\n\
    \        echo \"$file_name_check_result\"\n        return\n    fi\n    if ! echo\
    \ \"$file_name\" | grep -q '^[a-zA-Z][a-zA-Z0-9_]*$' > /dev/null; then\n     \
    \   file_name_check_result=\"No\"\n        echo \"$file_name_check_result\"\n\
    \        return\n    fi\n    if ! echo \"$file_name\" | grep -q '\\.[^.]*\\.[^.]*$'\
    \ > /dev/null; then\n        file_name_check_result=\"No\"\n        echo \"$file_name_check_result\"\
    \n        return\n    fi\n    if ! echo \"$file_name\" | grep -q -E \"^[a-z][a-z]\\\
    ?$\" > /dev/null; then\n        file_name_check_result=\"No\"\n        echo \"\
    $file_name_check_result\"\n        return\n    fi\n    if ! echo \"$file_name\"\
    \ | grep -q -E \"^[a-z][a-z][a-z][a-z][a-z]$\" > /dev/null; then\n        file_name_check_result=\"\
    No\"\n        echo \"$file_name_check_result\"\n        return\n    fi\n    echo\
    \ \"$file_name_check_result\"\n}\n\ncandidate() {\n    file_name_check \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  if [[ !\
    \ \"$1\" =~ ^[0-9]+$ ]]; then\n    echo \"No\"\n    return 1\n  fi\n  if [[ !\
    \ \"$1\" =~ ^[a-zA-z]+\\.[txt|exe|dll]+$ ]]; then\n    echo \"No\"\n    return\
    \ 1\n  fi\n  file_name_check=\"${1%.*}\"\n  if [[ ! \"$file_name_check\" =~ ^[a-zA-z]+$\
    \ ]]; then\n    echo \"No\"\n    return 1\n  fi\n  file_info=\"$(basename \"$1\"\
    )\"\n  if [[ \"$file_info\" =~ (^.) ]]; then\n    echo \"No\"\n    return 1\n\
    \  fi\n  \n  echo \"Yes\"\n  return 0\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local file=\"\
    $1\"\n  local ok=\"No\"\n\n  [[ \"$file\" =~ ^[0-9]*$ ]] || { echo \"ERROR: File\
    \ name must contain exactly one digit in '0'-'9' format\"; ok=\"No\"; return $ok;\
    \ }\n  [[ \"$file\" =~ ^[0-9]+\\.$ ]] || { echo \"ERROR: File name must contain\
    \ exactly one digit in '0'-'9' format\"; ok=\"No\"; return $ok; }\n  [[ \"$file\"\
    \ =~ ^[a-z]$ ]] || { echo \"ERROR: File name must not contain letters other than\
    \ 'a' and 'A' in 'a'-'z' format\"; ok=\"No\"; return $ok; }\n  [[ \"$file\" =~\
    \ ^[A-Z]$ ]] || { echo \"ERROR: File name must not contain letters other than\
    \ 'a' and 'A' in 'A'-'Z' format\"; ok=\"No\"; return $ok; }\n  [[ \"$file\" =~\
    \ ^[a-z][a-z].$ ]] || { echo \"ERROR: File name must contain exactly one dot '.'\
    \ in file name\"; ok=\"No\"; return $ok; }\n  [[ \"$file\" =~ ^[a-z][a-z].*$ ]]\
    \ || { echo \"ERROR: File name must contain exactly one dot '.' in file name\"\
    ; ok=\"No\"; return $ok; }\n  [[ \"$file\" =~ ^[a-z][a-z][a-z].*$ ]] || { echo\
    \ \"ERROR: File name must contain exactly one dot '.' in file name\"; ok=\"No\"\
    ; return $ok; }\n  [[ \"$file\" =~ ^[a-z][a-z][a-z].*\\.txt$ ]] || { echo \"ERROR:\
    \ File name must contain exactly one dot '.' in file name and must contain 'txt'\
    \ in file name\"; ok=\"No\"; return $ok; }\n  [[ \"$file\" =~ ^[a-z][a-z][a-z].*\\\
    .exe$ ]] || { echo \"ERROR: File name must contain exactly one dot '.' in file\
    \ name and must contain 'exe' in file name\"; ok=\"No\"; return $ok; }\n  [[ \"\
    $file\" =~ ^[a-z][a-z][a-z].*\\.dll$ ]] || { echo \"ERROR: File name must contain\
    \ exactly one dot '.' in file name and must contain 'dll' in file name\"; ok=\"\
    No\"; return $ok; }\n  [[ \"$file\" =~ ^[a-z][a-z][a-z].*\\..*$ ]] || { echo \"\
    ERROR: File name must contain exactly one dot '.' in file name and must contain\
    \ '..' in file name\"; ok=\"No\"; return $ok; }\n  [[ \"$\n}\n\ncandidate() {\n\
    \    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n\
    \    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmplz3xplze.sh: line 67: unexpected EOF while looking for matching
    `"\''\n/tmp/tmplz3xplze.sh: line 71: unexpected token `\xff\'' in conditional
    command\n/tmp/tmplz3xplze.sh: line 71: syntax error: unexpected end of file\n'''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  if [[ \"\
    $1\" =~ ^[0-9]{3}\\.[^.]+$ && -n \"$1\" ]]; then\n    if [[ $(echo \"$1\" | grep\
    \ '.' > /dev/null; echo $?) -ne 0 ]]; then\n      return 1\n    fi\n    if [[\
    \ $(echo \"$1\" | grep '^[a-zA-Z]' > /dev/null; echo $?) -ne 0 ]]; then\n    \
    \  return 1\n    fi\n    if [[ $(echo \"$1\" | grep '^[0-9a-zA-Z_]' > /dev/null;\
    \ echo $?) -ne 0 ]]; then\n      return 1\n    fi\n    if [[ $(echo \"$1\" | grep\
    \ '^[0-9a-zA-Z_][a-zA-Z0-9_]*\\.txt' > /dev/null; echo $?) -ne 0 ]]; then\n  \
    \    return 1\n    fi\n    if [[ $(echo \"$1\" | grep '^[0-9a-zA-Z_][a-zA-Z0-9_]*\\\
    .exe' > /dev/null; echo $?) -ne 0 ]]; then\n      return 1\n    fi\n    if [[\
    \ $(echo \"$1\" | grep '^[0-9a-zA-Z_][a-zA-Z0-9_]*\\.dll' > /dev/null; echo $?)\
    \ -ne 0 ]]; then\n      return 1\n    fi\n    return 0\n  fi\n  return 1\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    file_name=\"\
    $1\"\n    # remove all non-digits and leading dot\n    file_name=${file_name//[^0-9\\\
    .]/}\n    if [ -z \"$file_name\" ]; then \n        echo \"No\"\n        exit 0\n\
    \    fi\n    # remove leading dot and validate its contents\n    file_name=${file_name%.*}\n\
    \    if [ \"$file_name\" = \".\" ]; then\n        echo \"No\"\n        exit 0\n\
    \    fi\n    file_name=${file_name#*.}\n    if [ ${file_name} != $file_name ];\
    \ then \n        echo \"No\"\n        exit 0\n    fi\n    file_name=${file_name:0:1}\n\
    \    if [ ! \"$file_name\" =~ ^[a-z_] ]; then\n        echo \"No\"\n        exit\
    \ 0\n    fi\n    if [ ! \"$file_name\" =~ ^[A-Z_] ]; then\n        echo \"No\"\
    \n        exit 0\n    fi\n    echo \"Yes\"\n    exit 0\n}\n\ncandidate() {\n \
    \   file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    fileName=${1}\n\
    \    validName=\"Yes\"\n    # Check for the following rules:\n    # - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    # - There should\
    \ not be more than one dot '.' in the file's name.\n    # - There should not be\
    \ an empty string after the dot.\n    # - There should be a letter in the latin\
    \ alphabet ('a'-'z') before the dot.\n    # - There should be one of these extensions:\
    \ ['txt', 'exe', 'dll']\n    if [[ ${#fileName} -gt 3 && ${#fileName} -le 9 ]]\
    \ && \\\n       [[ ${fileName} != *.* ]] && \\\n       [[ \"${fileName%%\\.*}\"\
    \ != \"\" ]] && \\\n       [[ \"${fileName%%\\.*}\" = '${fileName%%\\.*}' ]] &&\
    \ \\\n       [[ \"${fileName%%\\.*}\" =~ ^[a-z] ]] && \\\n       [[ \"${fileName##*.}\"\
    \ = \"${fileName}\" ]]; then\n        validName=\"No\"\n    fi\n    echo \"${validName}\"\
    \n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ FILE_NAME_PATTERN=\"$1\"\n    local VALID_FILE_NAME_PATTERN=\"^[0-9][0-9][0-9][0-9][a-z][a-z].*\"\
    \n    if [[ $FILE_NAME_PATTERN =~ $VALID_FILE_NAME_PATTERN ]] ; then\n       \
    \ echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n  \
    \  file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local file_name=$1\n\
    \  # Check that file name has exactly 3 digits\n  if ! [[ $file_name =~ ^[0-9]{3}$\
    \ ]]\n  then\n    echo \"No\"\n    return 0\n  fi\n  # Check that file name contains\
    \ only one dot\n  if ! [[ $file_name =~ \\.$ ]]\n  then\n    echo \"No\"\n   \
    \ return 0\n  fi\n  # Check that substring before the dot is not empty\n  if !\
    \ [[ $file_name =~ ^[^.]+ ]]\n  then\n    echo \"No\"\n    return 0\n  fi\n  #\
    \ Check that substring after the dot contains one of these strings:\n  local valid_extensions=('txt'\
    \ 'exe' 'dll')\n  if ! [[ $valid_extensions =~ (^|)$file_name($|)$ ]]\n  then\n\
    \    echo \"No\"\n    return 0\n  fi\n  echo \"Yes\"\n}\n\ncandidate() {\n   \
    \ file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ file_name=\"$1\"\n\n    # Check if string only contains digits, and one dot,\
    \ and one letter\n    if ! [[ \"$file_name\" =~ ^[0-9]{1,3}\\.[a-z][a-z0-9]$ ]];\
    \ then\n        echo \"Invalid file name!\"\n        return 1\n    fi\n\n    #\
    \ Check if substring before dot is empty\n    if [[ \"$file_name\" =~ ^\\.\\.\
    \ ]]; then\n        echo \"Invalid file name!\"\n        return 1\n    fi\n\n\
    \    # Check if substring after dot is either 'txt', 'exe', 'dll'\n    if ! [[\
    \ \"$file_name\" =~ \\.(txt|exe|dll)$ ]]; then\n        echo \"Invalid file name!\"\
    \n        return 1\n    fi\n\n    # Check if file name contains only lowercase\
    \ letters, and only one dot, and \n    # no numbers. \n    if ! [[ \"$file_name\"\
    \ =~ ^[a-z][a-z0-9]*\\.$ ]]; then\n        echo \"Invalid file name!\"\n     \
    \   return 1\n    fi\n\n    return 0\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local string=\"\
    $1\"\n  local file=\"$(basename \"$string\")\"\n  [[ \"$string\" =~ ^[0-9][0-9]*\\\
    .* ]] || return 1\n  [[ \"$file\" =~ ^[^.]*$ ]] || return 1\n  [[ \"$file\" =~\
    \ ^[a-z].* ]] || return 1\n  [[ \"$file\" =~ ^[a-z][a-z].* ]] || return 1\n  [[\
    \ \"$file\" =~ ^[a-z][a-z].*$ ]] || return 1\n  [[ \"$file\" =~ ^[a-z][a-z][a-z].*$\
    \ ]] || return 1\n  return 0\n}\n\ncandidate() {\n    file_name_check \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    file_name=\"\
    $1\"\n    # Check if there is a dot in the file name\n    if [[ \"$file_name\"\
    \ =~ \\.* ]]; then\n        echo \"No\"\n        return\n    fi\n    # Check if\
    \ there is exactly one dot, and check if there is a letter \n    # before the\
    \ dot in the file name\n    if [[ \"$file_name\" =~ \\.[^\\.].* ]]; then\n   \
    \     echo \"No\"\n        return\n    fi\n    # Check if there is a letter before\
    \ the dot in the file name\n    if [[ \"$file_name\" =~ ^[a-z].* ]]; then\n  \
    \      echo \"No\"\n        return\n    fi\n    echo \"Yes\"\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ file\n    local valid\n    local file_extension\n    local extension\n\n   \
    \ valid=\"Yes\"\n\n    file=$1\n    file_extension=$(echo \"${file##*.}\" | sed\
    \ -e 's/^[[:alpha:]]*//g' -e 's/[[:alpha:]]\\{1,\\}//g' -e 's/\\.$//g' -e 's/\\\
    .//g')\n    extension=$(echo \"${file_extension}\" | sed -e 's/^[[:alpha:]]*//g'\
    \ -e 's/[[:alpha:]]\\{1,\\}//g' -e 's/\\.//g')\n\n    valid=\"${valid} && [[ ${#file}\
    \ -eq ${#file_extension} ]]\"\n    valid=\"${valid} && [[ ${file%%\\.*} != ''\
    \ ]]\"\n    valid=\"${valid} && [[ ${file%%\\.*} != \"${extension} ]]\"\n\n  \
    \  echo \"$valid\"\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr5zspqgj.sh: line 68: unexpected EOF while looking for matching
    `"\''\n/tmp/tmpr5zspqgj.sh: line 72: syntax error: unexpected end of file\n'''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n\tlocal file_name=\"\
    $1\"\n\n\tif [ \"$#\" -ne 1 ]; then\n\t\techo \"Error: the file_name_check() function\
    \ takes 1 argument.\"\n\t\treturn 1\n\tfi\n\n\tlocal file_name_length=`expr length\
    \ \"$file_name\"`\n\tif [[ $file_name_length -ne 3 ]]; then\n\t\techo \"Error:\
    \ the file's name length should be 3 characters long.\"\n\t\treturn 1\n\tfi\n\n\
    \tif [[ $file_name != *.* ]]; then\n\t\techo \"Error: the file's name should contain\
    \ exactly one dot '.'\"\n\t\treturn 1\n\tfi\n\n\tif [[ ! -z \"${file_name%%.}\"\
    \ ]]; then\n\t\techo \"Error: the file's name should not contain any dot '.'\"\
    \n\t\treturn 1\n\tfi\n\n\tif [[ \"$file_name\" != ^[a-zA-Z][a-zA-Z0-9]*$ ]]; then\n\
    \t\techo \"Error: the file's name should start with a letter from the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\"\n\t\treturn 1\n\tfi\n\n\tlocal file_name_extension=\"\
    ${file_name##*.}\"\n\tlocal extension_length=`expr length \"$file_name_extension\"\
    `\n\tif [[ $extension_length -ne 1 ]]; then\n\t\techo \"Error: the file's name\
    \ should contain exactly one dot '.'\"\n\t\treturn 1\n\tfi\n\n\tlocal file_name_extension_elements=\"\
    ${file_name_extension}\"\n\tlocal extension_elements=()\n\n\tfor element in \"\
    ${!file_name_extension_elements}\";\n\tdo\n\t\tif [[ \"$file_name_extension_elements\"\
    \ != *.$element ]]; then\n\t\t\textension_elements+=(\"$file_name_extension_elements\"\
    )\n\t\tfi\n\tdone\n\n\tif [[ -z \"${extension_elements[*]}\" ]]; then\n\t\techo\
    \ \"Error: the file's name should end with one of these: ['txt', 'exe', 'dll']\"\
    \n\t\treturn 1\n\tfi\n\n\techo \"Yes\"\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  if [[ \"\
    $1\" == *\".\"* ]]; then\n    if [[ \"$1\" =~ ^[0-9]$ ]]; then\n      if [[ \"\
    $1\" =~ ^[0-9][0-9]*$ ]]; then\n        if [[ \"$1\" =~ ^[0-9][0-9]*\\.[0-9][0-9]*$\
    \ ]]; then\n          if [[ $(expr \"$1\" : '.\\+$') != \"\" ]]; then\n      \
    \      if [[ \"$1\" =~ ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$ ]]; then\n\
    \              echo \"Yes\";\n            else\n              echo \"No\";\n \
    \           fi\n          else\n            echo \"No\";\n          fi\n     \
    \   else\n          echo \"No\";\n        fi\n      else\n        echo \"No\"\
    ;\n      fi\n    else\n      echo \"No\";\n    fi\n  else\n    echo \"No\";\n\
    \  fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local file=\"\
    $1\"\n  if [[ $file =~ ^[0-9][0-9]*\\.?$ ]]; then\n    local ext=\"${file##*.}\"\
    \n    ext=\"${ext##0}\"\n    if [[ $ext =~ ^[A-z][A-z]$ ]]; then\n      echo \"\
    Yes\"\n    else\n      echo \"No\"\n    fi\n  else\n    echo \"No\"\n  fi\n}\n\
    \ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n\t# Make\
    \ sure the argument is a string.\n\tlocal FILENAME=$1\n\t# Make sure the file's\
    \ name is less than or equal to three digits long.\n\tif [[ ${#FILENAME} -le 3\
    \ ]]; then\n\t\t# Make sure the file's name contains exactly one dot '.'\n\t\t\
    if [[ \"$FILENAME\" == *\".\" ]]; then\n\t\t\t# Make sure the substring before\
    \ the dot should not be empty, and it\n\t\t\t# starts with a letter from the latin\
    \ alphabet ('a'-'z' and 'A'-'Z')\n\t\t\tlocal STRING_BEFORE_DOT=${FILENAME%%.*}\n\
    \t\t\t[[ \"$STRING_BEFORE_DOT\" == [A-Za-z] ]] || return 1\n\t\t\t# Make sure\
    \ the substring after the dot should be one of these:\n\t\t\t# - ['txt', 'exe',\
    \ 'dll']\n\t\t\tlocal STRING_AFTER_DOT=${FILENAME##*.}\n\t\t\t[[ \"$STRING_AFTER_DOT\"\
    \ == [txt, exe, dll] ]] || return 1\n\t\tfi\n\tfi\n\treturn 0\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpripi58qd.sh: line 32: syntax error in conditional expression\n/tmp/tmpripi58qd.sh:
    line 32: syntax error near `exe,\''\n/tmp/tmpripi58qd.sh: line 32: `\t\t\t[[ "$STRING_AFTER_DOT"
    == [txt, exe, dll] ]] || return 1\''\n'''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local file_name=$1\n\
    \  local file_name_array=( \"${file_name}\" )\n  local valid=\"\"\n\n  [[ -z $1\
    \ ]] && { echo \"No file name.\"; return 1; }\n\n  if [[ \"${#file_name_array[@]}\"\
    \ -eq 3 ]] ; then\n    # Check if the file's name has only 3 digits.\n    local\
    \ file_name_length=${#file_name_array[0]}\n    [[ $file_name_length -lt 3 ]] &&\
    \ { echo \"Invalid file name.\"; return 1; }\n  else\n    echo \"Invalid file\
    \ name.\"\n    return 1\n  fi\n\n  [[ -z \"${file_name_array[1]}\" ]] && { echo\
    \ \"File name not valid.\" && return 1; }\n\n  local file_name_chars=${file_name_array[1]}\n\
    \  local file_name_chars_array=( $file_name_chars )\n  [[ ${#file_name_chars_array[@]}\
    \ -eq 1 ]] && { echo \"Invalid file name.\" && return 1; }\n  local file_name_first_char=${file_name_chars_array[0]}\n\
    \  local file_name_first_char_array=( $file_name_first_char )\n\n  [[ \"${#file_name_first_char_array[@]}\"\
    \ -ne 1 ]] && { echo \"Invalid file name.\" && return 1; }\n  [[ \"${file_name_first_char_array[0]}\"\
    \ -eq '?' ]] && { echo \"Invalid file name.\" && return 1; }\n\n  if [[ \"${file_name_array[2]}\"\
    \ == *\".\" ]] ; then\n    # Check if the file's name contains a dot\n    local\
    \ file_name_second_char=${file_name_array[2]}\n    local file_name_second_char_array=(\
    \ $file_name_second_char )\n    [[ ${#file_name_second_char_array[@]} -ne 1 ]]\
    \ && { echo \"Invalid file name.\" && return 1; }\n    [[ \"${file_name_second_char_array[0]}\"\
    \ == *[A-z] ]] || { echo \"Invalid file name.\" && return 1; }\n    [[ \"${file_name_second_char_array[0]}\"\
    \ == *[A-z] ]] || { echo \"Invalid file name.\" && return 1; }\n  else\n    #\
    \ Check if the file's name doesn't contain a dot\n    local file_name_second_char=\n\
    \    local file_name_second_char_array=( )\n  fi\n\n  local file_name_third_char=\n\
    \  local file_name_third_char_array=( )\n\n  echo \"${file_name_array[0]}\"\n\
    \  echo \"${file_name_array[1]}\"\n  echo \"${file_name_array[2]}\"\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n\tif [[ $1\
    \ != [0-9][0-9][0-9]*\\.[txt|exe|dll] ]]; then\n\t\treturn 'No'\n\tfi\n\t\n\t\
    while true; do\n\t\t[[ \"$1\" =~ ^(.)[^\\.].*\\1$ ]] || break\n\tdone\n\t\n\t\
    [[ \"$1\" =~ ^[^\\.]$ ]] || return 'No'\n\t\n\tif [[ \"$1\" =~ ^[a-z][a-zA-Z]*$\
    \ ]]; then\n\t\treturn 'Yes'\n\telse\n\t\treturn 'No'\n\tfi\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpbx606xv7.sh: line 19: syntax error in conditional expression:
    unexpected token `|''\n/tmp/tmpbx606xv7.sh: line 19: syntax error near `|e''\n/tmp/tmpbx606xv7.sh:
    line 19: `\tif [[ $1 != [0-9][0-9][0-9]*\\.[txt|exe|dll] ]]; then''\n"'
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local file=\"\
    ${1}\"\n  [[ -z \"$file\" ]] && return 1\n  [[ ${file%%\\.*} != \"\" ]] && return\
    \ 1\n  [[ \"$file\" =~ ^[[:alpha:]]+$ ]] && return 1\n  [[ \"$file\" =~ ^[0-9]*$\
    \ && ${file%%%.*} =~ ^[[:alpha:]]+$ ]] && return 1\n  [[ \"$file\" =~ ^[0-9]*$\
    \ && ${file%%%.*} =~ ^[[:alnum:]]+$ ]] && return 1\n  [[ \"$file\" =~ ^[0-9]*$\
    \ && ${file%%%.*} =~ ^[[:print:]]+$ ]] && return 1\n  return 0\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local file_name\
    \ \n  file_name=$1 \n  if (( ${#file_name} < 3 )); then\n    echo \"ERROR: File\
    \ name should contain 3 or more characters\"\n    exit 1\n  fi\n  \n  [[ \"$file_name\"\
    \ =~ [^0-9].* ]] && echo \"ERROR: File name should not contain digits\"\n  [[\
    \ \"$file_name\" =~ \\.[^ ].* ]] && echo \"ERROR: File name should not contain\
    \ spaces\"\n  \n  case \"$file_name\" in\n    \"${file_name:0:1}\")\n      if\
    \ (( ${#file_name} > 2 )); then\n        echo \"ERROR: File name must start with\
    \ a letter\"\n        exit 1\n      fi\n      ;;\n    \"${file_name:2:1}\")\n\
    \      \n      if [[ \"$file_name\" =~ [A-z].* ]] ; then\n        if [[ \"$file_name\"\
    \ =~ [^A-Z].* ]] ; then\n          echo \"ERROR: File name must not contain numbers\"\
    \n          exit 1\n        fi\n      else\n        echo \"ERROR: File name must\
    \ start with a letter\"\n        exit 1\n      fi\n      ;;\n    \"${file_name:1:1}\"\
    )\n      \n      if [[ \"$file_name\" =~ [A-z].* ]] ; then\n        echo \"ERROR:\
    \ File name must not contain numbers\"\n        exit 1\n      fi\n      ;;\n \
    \   *)\n      echo \"ERROR: File name should contain only 3 characters\"\n   \
    \   exit 1\n  esac\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5bqns2kf.sh: line 27: syntax error in conditional expression\n/tmp/tmp5bqns2kf.sh:
    line 27: syntax error near `].*\''\n/tmp/tmp5bqns2kf.sh: line 27: `  [[ "$file_name"
    =~ \\.[^ ].* ]] && echo "ERROR: File name should not contain spaces"\''\n'''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local file=$1\n\
    \  local name=$file\n  local name_prefix=$2\n  local name_suffix=$3\n\n  if [[\
    \ $name =~ (^[0-9]+$)|(^[0-9]+.[0-9]+$) ]]; then\n    if [[ ${name::-3} == \"\
    .exe\" ]]; then\n      if [[ ${name::-1} != \"\" ]]; then\n        echo \"No\"\
    \n      else\n        echo \"Yes\"\n      fi\n    elif [[ ${name::-1} != \"\"\
    \ ]]; then\n      if [[ ${name::-($#name_suffix+1)} != \"${name_suffix}\" ]];\
    \ then\n        echo \"No\"\n      else\n        echo \"Yes\"\n      fi\n    else\n\
    \      echo \"No\"\n    fi\n  else\n    echo \"No\"\n  fi\n}\n\ncandidate() {\n\
    \    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n\
    \    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  # Get the\
    \ file's name, and store it in $file_name\n  file_name=$1\n  # Check if $file_name\
    \ only contains one dot\n  if [[ $file_name =~ ^[0-9]\\.* ]]; then\n    # Check\
    \ if $file_name starts with a letter from latin alphapet\n    if [[ ${file_name:0:1}\
    \ =~ ^[a-z]$ ]]; then\n      # Check if $file_name contains three digits\n   \
    \   if [[ $file_name =~ ^[0-9][0-9][0-9]$ ]]; then\n        # Return Yes, if the\
    \ file's name contains three digits and only one\n        # dot and starts with\
    \ a letter from latin alphapet\n        echo \"Yes\"\n      else\n        # Return\
    \ No, if the file's name contains more than three digits and \n        # doesn't\
    \ start with a letter from latin alphapet\n        echo \"No\"\n      fi\n   \
    \ else\n      # Return No, if the file's name doesn't start with a letter from\
    \ latin alphapet\n      echo \"No\"\n    fi\n  else\n    # Return No, if the file's\
    \ name contains more than one dot\n    echo \"No\"\n  fi\n}\n\ncandidate() {\n\
    \    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n\
    \    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ file_name=$1\n    [[ \"$file_name\" =~ ^[0-9]{1,3}\\.[a-z]{2,3}$ ]] || return\
    \ 1\n    [[ \"$file_name\" =~ ^.* ]] || return 1\n    [[ \"$file_name\" =~ ^[a-zA-Z]+$\
    \ ]] || return 1\n    [[ \"$file_name\" =~ ^[a-z]+ ]] || return 1\n    [[ \"$file_name\"\
    \ =~ ^[a-z0-9]{0,10}$ ]] || return 1\n    [[ \"$file_name\" =~ ^[a-z0-9]{0,10}\\\
    .[a-z0-9]{0,10}$ ]] || return 1\n    [[ \"$file_name\" =~ ^[a-z0-9]{0,10}\\.[a-z0-9]{0,10}\\\
    .[a-z0-9]{0,10}$ ]] || return 1\n    [[ \"$file_name\" =~ ^[a-z0-9]{0,10}\\.[a-z0-9]{0,10}\\\
    .[a-z0-9]{0,10}\\.[a-z0-9]{0,10}$ ]] || return 1\n    [[ \"$file_name\" =~ ^[a-z0-9]{0,10}\\\
    .[a-z0-9]{0,10}\\.[a-z0-9]{0,10}\\.[a-z0-9]{0,10}\\.[a-z0-9]{0,10}$ ]] || return\
    \ 1\n    [[ \"$file_name\" =~ ^[a-z0-9]{0,10}\\.[a-z0-9]{0,10}\\.[a-z0-9]{0,10}\\\
    .[a-z0-9]{0,10}\\.[a-z0-9]{0,10}\\.[a-z0-9]{0,10}$ ]] || return 1\n    [[ \"$file_name\"\
    \ =~ ^[a-z0-9]{0,10}\\.[a-z0-9]{0,10}\\.[a-z0-9]{0,10}\\.[a-z0-9]{0,10}\\.[a-z0-9]{0,10}\\\
    .[a-z0-9]{0,10}\\.[a-z0-9]{0,10}$ ]] || return 1\n    [[ \"$file_name\" =~ ^[a-z0-9]{0,10}\\\
    .[a-z0-9]{0,10}\\.[a-z0-9]{0,10}\\.[a-z0-9]{0,10}\\.[a-z0-9]{0,10}\\.[a-z0-9]{0,10}\\\
    .[a-z0-9]{0,10}\\.[a-z0-9]{0,10}$ ]] || return 1\n    [[ \"$file_name\" =~ ^[a-z0-9]{0,10}\\\
    .[a-z0-9]{0,10}\\.[a-z0-9]{0,10}\\.[a-z0-9]{0,10}\\.[a-z0-9]{0,10}\\.[a-z0-9]{0,10}\\\
    .[a-z0-9]{0,10}\\.[a-z0-9]{0,10}\\.[a-z0-9]{0,10}$ ]] || return 1\n    [[ \"$file_name\"\
    \ \n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu4uc6owr.sh: line 33: unexpected token `newline\'', conditional
    binary operator expected\n/tmp/tmpu4uc6owr.sh: line 33: syntax error near `"$file_name"\''\n/tmp/tmpu4uc6owr.sh:
    line 33: `    [[ "$file_name" \''\n'''
  stdout: b''
  timestamp: 1660078302
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  if [[ $1\
    \ =~ ^[0-9;].*\\.[^.]+\\.txt$|^[0-9;].*\\.[^.]+\\.exe$|^[0-9;].*\\.[^.]+\\.dll$\
    \ ]]; then\n    echo \"Yes\"\n  else\n    echo \"No\"\n  fi\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmp_uuhhkl_.sh: line 19: syntax error in conditional expression:
    unexpected token `;''\n/tmp/tmp_uuhhkl_.sh: line 19: syntax error near `;]''\n/tmp/tmp_uuhhkl_.sh:
    line 19: `  if [[ $1 =~ ^[0-9;].*\\.[^.]+\\.txt$|^[0-9;].*\\.[^.]+\\.exe$|^[0-9;].*\\.[^.]+\\.dll$
    ]]; then''\n"'
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    # Write\
    \ your logic here\n    file=\"${1}\"\n    if [[ ${#file} -le 3 ]] || [[ ${#file}\
    \ -gt 3 ]] || [[ ${file} =~ \"\\.\" ]]; then\n        return No\n    fi\n    if\
    \ [[ ${file%%.*} == \"\" ]]; then\n        return No\n    fi\n    if [[ ${file%%.*}\
    \ == \"${file##*.}\" ]]; then\n        return No\n    fi\n    [[ \"$1\" =~ ^[[:alpha:]]([[:alnum:]]){3}\\\
    ..* ]] || return No\n    [[ \"$1\" =~ ^[[:alpha:]]([[:alnum:]]){3}\\.(txt|exe|dll)$\
    \ ]] || return No\n    return Yes\n}\n\ncandidate() {\n    file_name_check \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\"\
    \ ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"\
    s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpvx9xlvhn.sh: line 22: return: No: numeric argument required\n'''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n\tlocal file=\"\
    $1\"\n\tlocal name_length=0\n\tlocal dot_count=0\n\tlocal first_letter=0\n\tlocal\
    \ extension=\"\"\n\tlocal ext1=\"txt\"\n\tlocal ext2=\"exe\"\n\tlocal ext3=\"\
    dll\"\n\t\n\tif [[ \"$file\" =~ ^[0-9]{3}$ && \"$file\" =~ ^.{1}$ && \"$file\"\
    \ =~ ^[a-z]{1}$ ]]; then\n\t\tname_length=${#file}\n\t\tdot_count=$(expr \"$file\"\
    \ : '.\\..*$')\n\t\tfirst_letter=$(expr \"$file\" : \".\\..*[^0-9]$\")\n\t\textension=$(expr\
    \ \"$file\" : \".\\..*$\")\n\t\t\n\t\tif [[ $dot_count -eq 0 ]]; then\n\t\t\t\
    return 0\n\t\telse\n\t\t\techo \"The file's name contains more than three dots\
    \ '..'\"\n\t\t\treturn 1\n\t\tfi\n\tfi\n\t\n\tif [[ $name_length -eq 0 ]]; then\n\
    \t\techo \"The file's name is empty or contains no letters\"\n\t\treturn 1\n\t\
    else\n\t\techo \"The file's name contains more than one digit\"\n\t\treturn 1\n\
    \tfi\n\t\n\tif [[ $first_letter -lt $((26-32)) || $first_letter -gt $((90-65))\
    \ || $first_letter -eq 0 ]]; then\n\t\techo \"The file's name starts with an illegal\
    \ character '$first_letter'\"\n\t\treturn 1\n\tfi\n\t\n\t\n\tif  [[ \"$extension\"\
    \ == \"$ext1\" || \"$extension\" == \"$ext2\" || \"$extension\" == \"$ext3\" ]];\
    \ then\n\t\techo \"The file's extension is $extension\"\n\t\treturn 0\n\telse\n\
    \t\techo \"The file's extension is not $ext1, $ext2 or $ext3\"\n\t\treturn 1\n\
    \tfi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local file_name\
    \ errMsg\n\n  if [[ \"$1\" =~ ^[0-9]$ ]]; then\n    echo \"No\"\n    return 0\n\
    \  fi\n\n  file_name=\"${1%.*}\"\n  if [[ ! -f $1 ]]; then\n    echo \"No\"\n\
    \    return 0\n  fi\n\n  if [[ \"$file_name\" =~ \"^[a-z]\" ]]; then\n    echo\
    \ \"No\"\n    return 0\n  fi\n\n  if [[ \"$file_name\" =~ \"^[a-z][a-zA-Z]\" ]];\
    \ then\n    echo \"No\"\n    return 0\n  fi\n\n  errMsg=\"$(basename \"$1\") contains\
    \ invalid characters\"\n  if [[ \"$file_name\" =~ \"^[^.][a-z][a-zA-Z][^.]\" ]];\
    \ then\n    echo \"No\"\n    return 0\n  fi\n\n  echo \"Yes\"\n  return 1\n}\n\
    \ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ file=\"${1}\"\n    [[ -z \"${file}\" ]] && echo \"No file\" && return 0\n  \
    \  [[ \"${file}\" =~ ^[0-9]+$  ]] || echo \"File name does not contain digits\"\
    \ && return 0\n    [[ \"${file}\" =~ ^[0-9][0-9][0-9]\\.$ ]] || echo \"File name\
    \ does not contain only one dot\" && return 0\n    [[ \"${file}\" =~ ^[a-zA-Z][a-zA-Z0-9]*\\\
    .?$ ]] || echo \"File name does not start with letter\" && return 0\n    [[ -n\
    \ \"${BASH_REMATCH[1]}\" ]] || echo \"Substring before the dot is empty\" && return\
    \ 0\n    [[ \"${BASH_REMATCH[1]}\" =~ ^[a-zA-Z] ]] || echo \"Substring before\
    \ the dot starts with letter\" && return 0\n    [[ -z ${BASH_REMATCH[1]}. ]] ||\
    \ echo \"Substring after the dot is empty\" && return 0\n    [[ \"${BASH_REMATCH[1]}\"\
    \ =~ ^(txt|exe|dll)$ ]] || echo \"Substring after the dot is not one of txt, exe,\
    \ dll && return 0\"\n    echo \"Yes\"\n    return 0\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ FILENAME=$1\n    [[ \"$FILENAME\" =~ ^[0-9]{3}\\.[a-z][a-z]?$ ]] || return 1\n\
    \    [[ \"$FILENAME\" =~ ^[0-9]{3}\\.[a-z][a-z]?\\.[a-z]{0,3}$ ]] || return 1\n\
    \    [[ \"$FILENAME\" =~ ^[a-z][a-z]?\\.[a-z]{0,3}$ ]] || return 1\n    [[ -e\
    \ \"$FILENAME\" ]] || return 1\n    [[ -f \"$FILENAME\" ]] || return 1\n    [[\
    \ -r \"$FILENAME\" ]] || return 1\n    [[ -w \"$FILENAME\" ]] || return 1\n  \
    \  [[ -x \"$FILENAME\" ]] || return 1\n    [[ -s \"$FILENAME\" ]] || return 1\n\
    \    echo \"Yes\"\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    if [[\
    \ $# != 1 ]]; then \n        echo \"usage: $0 file_name\"\n        echo \"$0 takes\
    \ the name of a file, and returns 'Yes' if the  file's name is valid\"\n     \
    \   echo \"and returns 'No' otherwise\"\n        return\n    fi\n    if [[ $1\
    \ =~ ^[0-9]+$ ]]; then \n        echo \"$1 contains more than three digits, please\
    \ use only '0'-'9'\"\n        return\n    fi\n    if [[ $1 =~ ^\\.$ ]]; then \n\
    \        echo \"$1 starts with a dot, please remove dot\"\n        return\n  \
    \  fi\n    if [[ ! $1 =~ ^[a-zA-Z]+$ ]]; then \n        echo \"$1 does not start\
    \ with a letter, please use only 'a'-'z' and 'A'-'Z'\"\n        return\n    fi\n\
    \    if [[ ! $1 =~ ^(txt|exe|dll)$ ]]; then \n        echo \"$1 contains unsupported\
    \ extension, please use only 'txt', 'exe' or 'dll'\"\n        return\n    fi\n\
    \    if [[ ! $1 =~ \\.[a-zA-Z]+$ ]]; then \n        echo \"$1 contains unsupported\
    \ extension, please use only 'txt', 'exe' or 'dll'\"\n        return\n    fi\n\
    \    echo \"Yes\"\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n\tlocal string=\"\
    $1\"\n\n\t[[ \"$string\" =~ ^[[:digit:]]{3}\\.[[:alpha:]]$ ]] || \\\n\techo \"\
    No\"\n\n\t[[ \"$string\" =~ ^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$ ]] || \\\n\t\
    echo \"No\"\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local file_name=\"\
    $1\"\n  [[ \"$file_name\" =~ ^[0-9]+$ ]] || return 1\n  [[ \"$file_name\" =~ ^[0-9]+\\\
    .[a-z]$ ]] || return 1\n  [[ \"$file_name\" =~ ^[^.]*$ ]] || return 1\n  [[ \"\
    $file_name\" =~ ^[^.]$ ]] || return 1\n  [[ \"$file_name\" =~ ^[a-z].* ]] || return\
    \ 1\n  [[ \"$file_name\" =~ ^[a-z][a-z].* ]] || return 1\n  [[ \"$file_name\"\
    \ =~ ^[a-z][a-z][a-z].* ]] || return 1\n  [[ \"$file_name\" =~ ^[a-z][a-z][a-z][a-z].*\
    \ ]] || return 1\n  [[ \"$file_name\" =~ ^[a-z][a-z][a-z][a-z][a-z].* ]] || return\
    \ 1\n  [[ \"$file_name\" =~ ^[a-z][a-z][a-z][a-z][a-z][a-z].* ]] || return 1\n\
    \  [[ \"$file_name\" =~ ^[a-z][a-z][a-z][a-z][a-z][a-z][a-z].* ]] || return 1\n\
    \  [[ \"$file_name\" =~ ^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z].* ]] || return\
    \ 1\n  [[ \"$file_name\" =~ ^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z].* ]]\
    \ || return 1\n  [[ \"$file_name\" =~ ^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z].*\
    \ ]] || return 1\n  [[ \"$file_name\" =~ ^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z].*\
    \ ]] || return 1\n  [[ \"$file_name\" =~ ^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z].*\
    \ ]] || return 1\n  [[ \"$file_name\" =~ ^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z].*\
    \ ]] || return 1\n  [[ \"$file_name\" =~ ^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z].*\
    \ ]] || return 1\n  [[ \"$file_name\" =~ ^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z].*\
    \ \n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmphu1olwu8.sh: line 38: syntax error in conditional expression\n/tmp/tmphu1olwu8.sh:
    line 39: syntax error near `}''\n/tmp/tmphu1olwu8.sh: line 39: `}''\n"'
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ name=$1\n    local length=${#name}\n    if [ $length -lt 3 ]; then\n       \
    \ echo No\n    else\n        # Check if the first character is alphabet ('a'-'z'\
    \ or 'A'-'Z')\n        if [ ${name[0]:0:1} != 'a' -a ${name[0]:0:1} != 'A' ];\
    \ then\n            echo No\n        else\n            # Check if the last character\
    \ is alphabet ('a'-'z' or 'A'-'Z')\n            if [ ${name[$((length-1))]:0:1}\
    \ != 'a' -a ${name[$((length-1))]:0:1} != 'A' ]; then\n                echo No\n\
    \            else\n                # Check if the substring before dot starts\
    \ with a letter\n                local first_char=`echo $name | cut -d '.' -f\
    \ 1`\n                if [[ ${#first_char} -lt 1 ]]; then\n                  \
    \  echo No\n                else\n                    # Check if the substring\
    \ after dot contains one of these:\n                    local allowed_subs=(\"\
    txt\" \"exe\" \"dll\")\n                    for allowed_sub in \"${allowed_subs[@]}\"\
    \n                    do\n                        if [[ $name =~ $allowed_sub\
    \ ]]; then\n                            echo Yes\n                        fi\n\
    \                    done\n                fi\n            fi\n        fi\n  \
    \  fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  [[ \"$1\"\
    \ =~ ^[0-9]{3}\\.[a-zA-z0-9]+$ ]] && \\\n    [[ \"$1\" =~ (^|.[^.]) +(txt|exe|dll)$\
    \ ]] && \\\n    echo \"Yes\" || \\\n    echo \"No\"\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpks5j_mdz.sh: line 20: syntax error in conditional expression\n/tmp/tmpks5j_mdz.sh:
    line 20: syntax error near `+(\''\n/tmp/tmpks5j_mdz.sh: line 20: `    [[ "$1"
    =~ (^|.[^.]) +(txt|exe|dll)$ ]] && \\\''\n'''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local filename=$1\n\
    \  local valid_file_names=()\n  valid_file_names=(\".txt\" \".exe\" \".dll\")\n\
    \n  # Check that the file name contains three digits\n  local number_of_digits=`echo\
    \ \"$filename\" | grep -c '^[0-9][0-9][0-9]$'`\n  [[ \"$number_of_digits\" -gt\
    \ 3 ]]\n  \n  # Check that the file name does not contain two dots.\n  local dot_count=`echo\
    \ \"$filename\" | grep -c '.'`\n  [[ \"$dot_count\" -eq 1 ]]\n  \n  # Checks that\
    \ the substring before the dot starts with a letter from the latin alphabet.\n\
    \  local first_letter=`echo \"$filename\" | grep -o '^[^.].*' | head -n 1`\n \
    \ [[ \"$first_letter\" =~ ^[[:alpha:]]$ ]]\n  \n  # Checks that the substring\
    \ after the dot is one of the files we want.\n  local last_letter=`echo \"$filename\"\
    \ | grep -o '[^.].*$' | tail -n 1`\n  [[ \"$last_letter\" =~ $valid_file_names\
    \ ]]\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local FILE=$1\n\
    \  local NUM=0\n  local OK=1\n\n  NUM=$(echo $FILE | sed -e 's/^\\.//g' -e 's/^0*//g'\
    \ -e 's/^[^0-9]*//g')\n  if [[ $NUM -lt 3 ]]; then\n    echo \"ERROR: Invalid\
    \ file name\"\n    OK=0\n  fi\n  if [[ $FILE =~ ^[0-9]*\\.[^0-9]*$ ]]; then\n\
    \    if [[ $(echo $FILE | sed -e 's/^[0-9]*\\.//g') =~ ^[a-zA-Z][a-zA-Z0-9]*$\
    \ ]]; then\n      echo \"ERROR: Invalid file name\"\n      OK=0\n    else\n  \
    \    echo \"ERROR: Invalid file name, contains more than one dot, starts with\
    \ letter\"\n      OK=0\n    fi\n  fi\n  if [[ $OK -ne 1 ]]; then\n    echo \"\
    ERROR: Invalid file name\"\n  fi\n\n  exit $OK\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ file=\"$1\"\n    local base_name=\"${file%.*}\"\n    local dot_name=\"${base_name%.*}\"\
    \n    local sub_name=\"${dot_name##*.}\"\n    local pattern=\"^[^0-9][a-zA-z][^0-9.]*$\"\
    \ \n    local pattern_ext=\"^[^0-9][a-zA-z][^0-9.]*[.][txt|exe|dll]$\"\n    [[\
    \ -z $sub_name     ]] || [[  $sub_name     =~ $pattern ]] || [[  $sub_name   \
    \  =~ $pattern_ext ]] || { echo \"No\"; return 1; }\n    echo \"Yes\"\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  if [[ ${#1}\
    \ -gt 3 ]]; then\n    echo \"No\"\n  else\n    if [[ \"$1\" =~ ^[a-zA-Z0-9]*\\\
    .[a-zA-Z0-9]*$ ]]; then\n      if [[ \"$1\" =~ ^[^\\.]*$ ]]; then\n        if\
    \ [[ ! \"$1\" =~ ^[a-zA-Z][a-zA-Z0-9]*$ ]]; then\n          echo \"No\"\n    \
    \    else\n          if [[ \"$1\" =~ ^[a-zA-Z][a-zA-Z0-9]*$ ]]; then\n       \
    \     if [[ ! \"$1\" =~ ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$ ]]; then\n     \
    \         echo \"No\"\n            else\n              echo \"Yes\"\n        \
    \    fi\n          fi\n        fi\n      fi\n    fi\n  fi\n}\n\ncandidate() {\n\
    \    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n\
    \    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  if ! [[\
    \ \"$1\" =~ ^[0-9]*$ ]]; then\n    echo \"Not a number: ${1}\" >&2\n    return\
    \ 1\n  fi\n  if [[ ${#1} -ge 4 ]]; then\n    echo \"Too many digits: ${1}\" >&2\n\
    \    return 1\n  fi\n  if [[ ! \"$1\" =~ ^.*\\.$ ]] || ! [[ \"$1\" =~ ^[a-zA-Z][a-zA-Z0-9]*$\
    \ ]]; then\n    echo \"Invalid name: ${1}\" >&2\n    return 1\n  fi\n  if ! [[\
    \ \"$1\" =~ ^.*\\.[^.]$ ]]; then\n    echo \"Invalid name: ${1}\" >&2\n    return\
    \ 1\n  fi\n  local fname=${1##*/}\n  local valid=No\n  local ext=${fname:${#fname}-}\n\
    \  local ext2\n  ext2=${ext//./_}\n  local allowed=exe\n  if [[ \"$ext2\" == *.exe\
    \ ]]; then\n    allowed=exe\n  fi\n  if [[ \"$ext2\" == *.dll ]]; then\n    allowed=dll\n\
    \  fi\n  local valid=Yes\n  local count=0\n  local ext\n  for ext in $allowed;\
    \ do\n    local fname2\n    fname2=${fname:0:(${#fname}-$count)}\n    if [[ \"\
    $fname2\" =~ ^[${count}a-zA-Z] ]]; then\n      valid=No\n    fi\n    count=$((\
    \ ${count} + 1 ))\n  done\n  echo $valid\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''Not a number: example.txt\n'''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  file_name=$1\n\
    \  [[ \"$file_name\" =~ ^[0-9][0-9][0-9]\\. ]] && [[ \"$file_name\" =~ ^[a-z][a-z]\
    \ ]] && \\\n  [[ \"$file_name\" =~ ^[a-z].* ]] && [[ $(wc -c < $file_name) -eq\
    \ 2 ]]\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    [[ $1\
    \ =~ ^[0-9]{3}\\..* ]] && \\\n        [[ $1 =~ ^[a-z][a-zA-Z]* ]] && \\\n    \
    \    [[ ${1#}.[[:digit:]]* =~ ^(exe|dll|txt) ]]\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ name=$1\n    local sub=${name:0:1}\n    local dot_position=${name:1}\n\n   \
    \ local length=$((${#name} -2))\n    local valid=\n    while [[ $length -lt 3\
    \ ]]; do\n        echo \"The string contains less than three digits: ${name}\"\
    \ >&2\n        valid=false\n        break\n    done\n\n    if [[ $dot_position\
    \ == . ]]; then\n        echo \"The file's name does not have a dot: ${name}\"\
    \ >&2\n        valid=false\n    fi\n    if [[ ${#sub} -le 1 ]]; then\n       \
    \ echo \"The substring before the dot is empty: ${name}\" >&2\n        valid=false\n\
    \    fi\n    valid=$((valid+${#sub}+1))\n    valid=$((valid+${#dot_position}+1))\n\
    \    if [[ ${sub:0:1} == [A-Za-z] ]]; then\n        echo \"The substring before\
    \ the dot starts with a latin alphabet: ${name}\" >&2\n        valid=false\n \
    \   fi\n    for element in txt exe dll; do\n        if [[ \"${sub:${#element}}\"\
    \ = \"${element}\" ]]; then\n            echo \"The substring after the dot is\
    \ one of the following: ${name}\" >&2\n            valid=false\n        fi\n \
    \   done\n\n    if [[ ${valid} == true ]]; then\n        echo \"${name}\"\n  \
    \  else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''The substring before the dot is empty: example.txt\nThe substring before
    the dot starts with a latin alphabet: example.txt\n'''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local NAME=$1\n\
    \  local BAD_NAME=\n  local BAD_NAME_LINE=\n  local VALID_LINE=\n  \n  IFS=\"\"\
    \n  BAD_NAME=$(expr match \"${NAME}\" '^[^0-9\\.]*')\n  BAD_NAME_LINE=$(expr match\
    \ \"${NAME}\" '^[^0-9\\.]*\\.')\n  VALID_LINE=$(expr match \"${NAME}\" '^[^0-9\\\
    .]*(\\.txt|\\.exe|\\.dll)$')\n  \n  if [ \"${BAD_NAME}\" != \"\" ]; then\n   \
    \ echo \"No\"\n    return 1\n  elif [ \"${BAD_NAME_LINE}\" != \"\" ]; then\n \
    \   echo \"No\"\n    return 1\n  elif [ \"${VALID_LINE}\" != \"\" ]; then\n  \
    \  echo \"Yes\"\n    return 0\n  else\n    echo \"No\"\n    return 1\n  fi\n}\n\
    \ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    if [[\
    \ ${#1} -gt 3 ]]; then\n        echo \"$1 too long\"\n        exit 1;\n    fi\n\
    \    if [[ ${#1} -eq 1 ]]; then\n        echo \"$1 too short\"\n        exit 1;\n\
    \    fi\n    if ! [[ \"$1\" =~ ^[a-zA-Z].*$ ]]; then\n        echo \"$1 contains\
    \ invalid name\"\n        exit 1;\n    fi\n    if ! [[ \"$1\" =~ ^[^\\.].*\\.[^\\\
    .]$ ]]; then\n        echo \"$1 contains invalid name\"\n        exit 1;\n   \
    \ fi\n    if ! [[ \"$1\" =~ ^[^\\.].*\\.[^\\.]$ ]]; then\n        echo \"$1 contains\
    \ invalid name\"\n        exit 1;\n    fi\n    if ! [[ \"$1\" =~ ^[^\\.].*\\.[^\\\
    .]$ ]]; then\n        echo \"$1 contains invalid name\"\n        exit 1;\n   \
    \ fi\n    echo \"Yes\"\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ filename=$(echo \"$1\" | sed 's/\\.\\//./g')\n    local valid_result=Yes\n \
    \   local filename_regex='^[0-9][0-9]\\.\\([a-zA-Z][a-zA-Z][a-zA-Z]\\|[a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z]\\\
    |[a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z]\\|[a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z]\\\
    )$'\n    if [[ $(echo \"$filename\" | grep -c \"$filename_regex\") -gt 0 ]]; then\n\
    \        valid_result=No\n    fi\n    echo \"$valid_result\"\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    # return\
    \ if less than 3 characters or more than 10\n    (( ${#1} < 3 )) && echo \"Not\
    \ enough chars: ${#1}\" && return 1\n    (( ${#1} > 10 )) && echo \"Too many chars:\
    \ ${#1}\" && return 1\n    # remove all dots, check if first char is in range\
    \ a-z or A-Z\n    (( ${#1} != ${#1}-${#1} )) && echo \"No dots: ${#1}\" && return\
    \ 1\n    [[ \"${1:0:1}\" == \"-\" ]]  && echo \"No leading chars: ${#1}\" && return\
    \ 1\n    [[ \"${1:${#1}1}\" == \"-\" ]]  && echo \"No trailing chars: ${#1}\"\
    \ && return 1\n    [[ \"${1:0:1}\" == \"a\" ]] &&  [[ \"${1:1:1}\" == \"z\" ]]\
    \  && echo \"No leading latin char: ${#1}\" && return 1\n    [[ \"${1:${#1}1}\"\
    \ == \"a\" ]] &&  [[ \"${1:1:1}\" == \"z\" ]]  && echo \"No trailing latin char:\
    \ ${#1}\" && return 1\n    # remove all spaces, check if first char is in range\
    \ a-z or A-Z\n    (( ${#1} != ${#1}-${#1} )) && echo \"No spaces: ${#1}\" && return\
    \ 1\n    [[ \"${1:0:1}\" == \"-\" ]]  && echo \"No leading chars: ${#1}\" && return\
    \ 1\n    [[ \"${1:${#1}1}\" == \"-\" ]]  && echo \"No trailing chars: ${#1}\"\
    \ && return 1\n    [[ \"${1:0:1}\" == \"a\" ]] &&  [[ \"${1:1:1}\" == \"z\" ]]\
    \  && echo \"No leading latin char: ${#1}\" && return 1\n    [[ \"${1:${#1}1}\"\
    \ == \"a\" ]] &&  [[ \"${1:1:1}\" == \"z\" ]]  && echo \"No trailing latin char:\
    \ ${#1}\" && return 1\n    # check that the file exists\n    [[ -f $1 ]]  && echo\
    \ \"File exists: $1\" || echo \"File does not exist: $1\"\n}\n\ncandidate() {\n\
    \    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n\
    \    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    [[ $1\
    \ =~ ^[0-9]*$ ]] && [[ ${#1} -gt 3 ]] && ( echo 1 || echo 0 ) > /tmp/file_name_check\n\
    \    [[ ${#1} -eq 1 ]] && [[ \"${1}:0:1}\" =~ ^[a-zA-Z] ]] && [[ \"${1}:1:1}\"\
    \ =~ ^[.] ]] && [[ \"${1}:2:1}\" =~ ^[txt,exe,dll] ]] && echo 1 || echo 0\n}\n\
    \ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local fname=$1\n\
    \  local fname_ok='Yes'\n  local fname_too_many_digits='No'\n  local fname_no_dot='No'\n\
    \  local fname_no_letter='No'\n\n  local fname_digits='0123456789'\n\n  fname=${fname//\\\
    .//}\n  fname=${fname//\\//}\n  fname=${fname//[^a-zA-Z0-9\\.]//}\n  fname=${fname//^[^a-zA-Z]/}\n\
    \  fname=${fname//[^a-zA-Z0-9]/}\n\n  if [[ $fname =~ $fname_digits ]]; then\n\
    \    fname_ok='Yes'\n  fi\n  if [[ $fname =~ (^[^a-zA-Z]*\\.[a-zA-Z][^a-zA-Z]*)\
    \ ]]; then\n    fname_no_dot='Yes'\n  fi\n  if [[ $fname =~ (^[^a-zA-Z]*\\.[a-zA-Z])\
    \ ]]; then\n    fname_no_letter='Yes'\n  fi\n  if [[ $fname_too_many_digits =~\
    \ $fname_digits ]]; then\n    fname_too_many_digits='Yes'\n  fi\n  if [[ $fname_no_dot\
    \ =~ (^[^a-zA-Z]*\\.[^a-zA-Z]*) ]]; then\n    fname_no_dot='Yes'\n  fi\n  if [[\
    \ $fname_no_letter =~ (^[^a-zA-Z]*\\.[a-zA-Z]) ]]; then\n    fname_no_letter='Yes'\n\
    \  fi\n\n  echo \"$fname_ok, $fname_too_many_digits, $fname_no_dot, $fname_no_letter\"\
    \n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ file_name=\"${1}\"\n\n    [[ \"${file_name}\" =~ ^[0-9]{3}$ ]] && echo \"Yes\"\
    \ || echo \"No\"\n\n    if [[ \"${file_name}\" =~ ^[0-9]{3}\\. ]] && [[ \"${file_name}\"\
    \ != \"${file_name:0:1}\" ]]\n    then\n        echo \"Yes\"\n    else\n     \
    \   echo \"No\"\n    fi\n\n    if [[ \"${file_name}\" =~ ^[a-z][a-z_]*$ ]] &&\
    \ [[ \"${file_name}\" != \"${file_name:0:1}\" ]]\n    then\n        echo \"Yes\"\
    \n    else\n        echo \"No\"\n    fi\n\n    [[ \"${file_name}\" =~ ^[a-z][a-z_]*\\\
    .txt$ ]] && echo \"Yes\" || echo \"No\"\n    [[ \"${file_name}\" =~ ^[a-z][a-z_]*\\\
    .exe$ ]] && echo \"Yes\" || echo \"No\"\n    [[ \"${file_name}\" =~ ^[a-z][a-z_]*\\\
    .dll$ ]] && echo \"Yes\" || echo \"No\"\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local name=$1\n\
    \  local dotPosition=${name:${#name}}\n\n  if [[ \"$dotPosition\" -ne 0 ]]; then\n\
    \    echo \"The file $name must not contain any dot.\"\n  fi\n\n  if [[ ! \"${name:0:1}\"\
    \ =~ ^([a-z]|[A-Z]|[0-9])$ ]]; then\n    echo \"The file $name must not start\
    \ with a digit.\"\n  fi\n\n  if [[ ! \"${name:${#name} - 1}\" =~ ^[a-z]$ ]]; then\n\
    \    echo \"The file $name must not end with a digit.\"\n  fi\n\n  dotPosition=${name:${#name}}\n\
    \  dotPosition=$((dotPosition - 1))\n\n  if [[ \"$dotPosition\" -lt 3 ]]; then\n\
    \    echo \"The file $name must contain exactly three digits.\"\n  fi\n\n  if\
    \ [[ ! \"${name:$dotPosition:1}\" =~ ^([a-z]|[A-Z]|[0-9])$ ]]; then\n    echo\
    \ \"The file $name must contain exactly one dot '.'.\"\n  fi\n\n  echo \"${name:0:1}\"\
    \n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  if [[ $1\
    \ =~ ^[0-9]+$ ]] || [[ $1 =~ ^[0-9][0-9]*$ ]] || [[ $1 =~ ^[0-9][0-9][0-9]\\.txt$\
    \ ]] || [[ $1 =~ ^[0-9][0-9][0-9]\\.exe$ ]] || [[ $1 =~ ^[0-9][0-9][0-9]\\.dll$\
    \ ]]; then\n    echo \"Yes\"\n  else\n    echo \"No\"\n  fi\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    file_name=$(echo\
    \ $1 | sed 's/\\./\\\\./g' | sed 's/^[^0-9]*//g')\n    if [ $(echo $file_name\
    \ | grep -c '.') -eq 1 ]; then\n        if [ $(echo $file_name | grep -c '[0-9]')\
    \ -eq 0 ]; then\n            if [ $(echo $file_name | grep -c '[0-9]') -eq 1 ];\
    \ then\n                file_name=$(echo $file_name | awk -F. '{print $(NF-1)}')\n\
    \                echo \"$file_name\"\n            else\n                echo \"\
    $file_name\"\n            fi\n        else\n            echo \"$file_name\"\n\
    \        fi\n    else\n        echo \"$file_name\"\n    fi\n}\n\ncandidate() {\n\
    \    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n\
    \    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    test\
    \ -n \"$1\" || return 1\n    test \"$1\" != \"$1\" || return 1\n    test ${1:0:3}\
    \ == 0{5} || return 1\n    case \"${1:0:3}\" in\n        0[0-4])\n           \
    \ echo \"Yes\";;\n        *)\n            echo \"No\";;\n    esac\n    case \"\
    ${1:0:3}\" in\n        0[0-4])\n            [[ \".${1}\" =~ ^([a-zA-Z]|[0-9]|_|\\\
    .)*$ ]] || return 1;;\n        *)\n            [[ \".${1}\" =~ ^((?!\\.).)*$ ]]\
    \ || return 1;;\n    esac\n    case \"${1:0:3}\" in\n        a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z)\n\
    \            echo \"Yes\";;\n        *)\n            echo \"No\";;\n    esac\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ FILE_NAME=$1\n    if [[ $# -ne 1 ]]; then\n        echo \"Invalid number of\
    \ arguments passed to $0\"\n        return 1;\n    fi\n    # Check that no more\
    \ than three digits exist in the file name\n    local FILE_NAME_REGEX='^[0-9]*\\\
    .[a-z]+$'\n    if [[ $FILE_NAME =~ $FILE_NAME_REGEX ]]; then\n        # Check\
    \ that there is exactly one dot '.'\n        local DOT_REGEX='\\..*$'\n      \
    \  if [[ $FILE_NAME =~ $DOT_REGEX ]]; then\n            # Check that substring\
    \ before dot is not empty, and it starts with a letter \n            # from the\
    \ latin alphapet ('a'-'z' and 'A'-'Z')\n            local DOT_REGEX='^[a-z]+$'\n\
    \            if [[ $FILE_NAME =~ $DOT_REGEX ]]; then\n                # Check\
    \ that substring after dot contains one of these:\n                # - 'txt',\
    \ 'exe', 'dll'\n                local DOT_REGEX='\\.(txt|exe|dll)$'\n        \
    \        if [[ $FILE_NAME =~ $DOT_REGEX ]]; then\n                    echo \"\
    Yes\"\n                else\n                    echo \"No\"\n               \
    \ fi\n            else\n                echo \"No\"\n            fi\n        else\n\
    \            echo \"No\"\n        fi\n    else\n        echo \"No\"\n    fi\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local FILE_NAME=$1\n\
    \  local FLAG=No\n  local VALID_FILES=('txt' 'exe' 'dll')\n  local FILE_NAME_LENGTH=$(echo\
    \ $FILE_NAME | grep -o . | wc -c)\n  if [ \"${FILE_NAME_LENGTH}\" -gt 3 ]; then\n\
    \    FLAG=Yes\n  else\n    local INVALID_FILES=$(echo $FILE_NAME | grep -o [^.]\
    \ | wc -l)\n    if [ \"$INVALID_FILES\" -gt 1 ]; then\n      FLAG=No\n    else\n\
    \      FLAG=Yes\n      local FIRST_CHARACTER=$(echo $FILE_NAME | grep -o . | cut\
    \ -d '.' -f1)\n      if [ ! $(echo $FIRST_CHARACTER |  grep -c '^[[:alpha:]]')\
    \ -eq 0 ]; then\n        FLAG=No\n      fi\n    fi\n  fi\n  echo $FLAG\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ file_name file_name_valid\n    file_name=$(basename $1)\n    file_name_valid=$(echo\
    \ \"$file_name\" | awk -F. '{print $1}')\n    if [ -z \"$file_name_valid\" ];\
    \ then\n        file_name_valid=\"No\"\n    fi\n    if [ \"$file_name_valid\"\
    \ != \"No\" ] && [[ $file_name_valid =~ ^[0-9]*$ ]] &&\n        [[ $file_name_valid\
    \ =~ ^[a-zA-Z]$ ]] && [[ $file_name_valid =~ ^[a-z]$ ]]; then\n        if [[ $file_name_valid\
    \ =~ ^[0-9]*\\.[a-zA-Z]*$ ]]; then\n            if [[ $file_name_valid =~ ^$\\\
    .[a-z]*$ ]]; then\n                file_name_valid=\"Yes\"\n            fi\n \
    \       fi\n    fi\n    echo \"$file_name_valid\"\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local file_name=$1\n\
    \  local extension=$2\n  local result=$3\n  if [[ ${#file_name} -gt 3 ]] ; then\n\
    \    echo \"The file's name contains more than three digits (0-9).\"\n    result=\"\
    No\"\n  elif [[ ${file_name:0:1} != [0-9] ]] ; then\n    echo \"The file's name\
    \ contains only a dot '.'. The substring before the first dot should be empty.\"\
    \n    result=\"No\"\n  elif [[ ! \"${file_name##*.}\" ]] ; then\n    echo \"The\
    \ file's name does not contain any dot '.'. The substring before the dot should\
    \ start with a letter from the latin alphapet (a-z and A-Z).\"\n    result=\"\
    No\"\n  elif [[ ! \"${file_name%.*}\" ]] ; then\n    echo \"The file's name does\
    \ not contain any dot '.'. The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll'].\"\n    result=\"No\"\n  elif [[ ! \"${file_name%.*}\"\
    \ =~ (^[a-z]|[0-9]$) ]] ; then\n    echo \"The file's name does not contain any\
    \ dot '.'. The substring after the dot should be one of these: ['txt', 'exe',\
    \ 'dll'].\"\n    result=\"No\"\n  elif [[ ! \"${extension}\" =~ (^exe$|^dll$|^txt$|$)\
    \ ]] ; then\n    echo \"The file's name does not end with exe, dll, or txt. The\
    \ extension should be one of these: ['exe', 'dll', 'txt'].\"\n    result=\"No\"\
    \n  else\n    echo \"The file's name is valid.\"\n    result=\"Yes\"\n  fi\n \
    \ echo \"$result\"\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    if [[\
    \ ! \"$1\" =~ ^[0-9]{1,3}\\.[a-z]{1,3}$ ]]; then\n        echo \"No\"\n    else\n\
    \        echo \"Yes\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    [[ $1\
    \ =~ ^[0-9]{3,3}\\.[txe]{1}$ ]] && \\\n    [[ ${1:0:1} =~ [a-z]$ ]] && \\\n  \
    \  [[ ${1##*.} != \"\" ]] && \\\n    [[ ${1%.*} != \"exe\" ]]\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    file_name=\"\
    $1\"\n\n    if [[ $# -eq 0 ]]; then\n        return 1\n    fi\n\n    # There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    if [[ ${#file}\
    \ -gt 3 ]]; then\n        echo \"No\"\n        return 1\n    fi\n\n    # There\
    \ should be exactly one dot '.' in the file's name.\n    if [[ ${#file} -eq 1\
    \ ]]; then\n        if [[ ${file:0:1} = \".\" ]]; then\n            echo \"No\"\
    \n            return 1\n        fi\n    fi\n\n    # Substring before the dot should\
    \ not be empty, and it starts with a letter from the latin alphapet ('a'-'z' and\
    \ 'A'-'Z').\n    if [[ ${file} != \"\" ]]; then\n        if [[ \"${file:0:1}\"\
    \ != \"a\" ]] && [[ \"${file:0:1}\" != \"A\" ]]; then\n            if [[ \"${file:0:1}\"\
    \ != \"0\" ]] && [[ \"${file:0:1}\" != \"1\" ]]; then\n                echo \"\
    No\"\n                return 1\n            fi\n        fi\n    fi\n\n    # Substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    if [[ \"${file:${#file}-2}\"\
    \ != \"txt\" ]] && [[ \"${file:${#file}-2}\" != \"exe\" ]] && [[ \"${file:${#file}-2}\"\
    \ != \"dll\" ]]; then\n        echo \"No\"\n        return 1\n    fi\n\n    echo\
    \ \"Yes\"\n    return 0\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  file_name\
    \ =$1\n  file_name_parts=$(echo $file_name | sed 's/\\.//g')\n  if [ $(echo $file_name_parts\
    \ | wc -l) -gt 3 ] || [ $(echo $file_name_parts | wc -l) -lt 1 ]  \n    then return\
    \ \"No\"\n  else\n    file_name_parts=$(echo $file_name_parts | sed 's/^[^a-z]*//g')\n\
    \    if [ $(echo $file_name_parts | grep \"^[a-z]\") ]\n      then return \"No\"\
    \n    else\n      if [ $(echo $file_name_parts | grep -c \".\") -gt 1 ]\n    \
    \    then return \"No\"\n      else\n        if [ $(echo $file_name_parts | grep\
    \ -c \"[0-9]\") -gt 1 ]\n          then return \"No\"\n        else\n        \
    \  if [ $(echo $file_name_parts | grep -c \"[a-z]\") -gt 1 ]\n            then\
    \ return \"No\"\n          else\n            if [ $(echo $file_name_parts | grep\
    \ -c \"[A-Z]\") -gt 1 ]\n              then return \"No\"\n            else\n\
    \              return \"Yes\"\n            fi\n          fi\n        fi\n    \
    \  fi\n    fi\n  fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp_nhwbmyr.sh: line 19: file_name: command not found\n/tmp/tmp_nhwbmyr.sh:
    line 40: return: Yes: numeric argument required\n'''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  file_name_check_result=$(echo\
    \ $1 | grep -E '^[0-9]{3}\\.\\..*$' && echo $1 | grep -E '^[a-z].*$' && echo $1\
    \ | grep -E '^[a-z].*\\.(txt|exe|dll)$' || echo No)\n  return $file_name_check_result\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpbuc4wqbe.sh: line 20: return: No: numeric argument required\n'''
  stdout: b''
  timestamp: 1660078303
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n\tlocal file_name=\"\
    $1\"\n\tlocal file_name_length=$#\n\t\n\tif [[ $file_name_length -gt 3 ]]; then\n\
    \t\treturn \"No\"\n\tfi\n\n\tif [[ ${file_name} == *.* ]]; then\n\t\tif [[ ${file_name}\
    \ == *[^0-9] ]]; then\n\t\t\treturn \"No\"\n\t\tfi\n\tfi\n\n\tif [[ -z $(echo\
    \ \"${file_name}\" | grep '^[a-z][^0-9]' &> /dev/null) ]]; then\n\t\tif [[ -z\
    \ $(echo \"${file_name}\" | grep '^[A-Z][a-z]' &> /dev/null) ]]; then\n\t\t\t\
    return \"No\"\n\t\tfi\n\tfi\n\n\tif [[ -z $(echo \"${file_name}\" | grep \"^[a-z]\"\
    \ &> /dev/null) ]]; then\n\t\treturn \"No\"\n\tfi\n\n\tif [[ -z $(echo \"${file_name}\"\
    \ | grep \"^[A-Z]\" &> /dev/null) ]]; then\n\t\treturn \"No\"\n\tfi\n\n\tif [[\
    \ -z $(echo \"${file_name}\" | grep \"\\.$\" &> /dev/null) ]]; then\n\t\treturn\
    \ \"No\"\n\tfi\n\n\tif [[ -z $(echo \"${file_name}\" | grep \"^[A-Za-z]\" &> /dev/null)\
    \ ]]; then\n\t\treturn \"No\"\n\tfi\n\n\tif [[ -z $(echo \"${file_name}\" | grep\
    \ \"^[a-z][^0-9]\\.\" &> /dev/null) ]]; then\n\t\treturn \"No\"\n\tfi\n\n\tif\
    \ [[ -z $(echo \"${file_name}\" | grep \"^[a-z][^0-9]\\.\" &> /dev/null) ]]; then\n\
    \t\treturn \"No\"\n\tfi\n\n\tif [[ -z $(echo \"${file_name}\" | grep \"^[a-z][^0-9]\\\
    .\" &> /dev/null) ]]; then\n\t\treturn \"No\"\n\tfi\n\n\tif [[ -z $(echo \"${file_name}\"\
    \ | grep \"^[a-z][^0-9]\\.\" &> /dev/null) ]]; then\n\t\treturn \"No\"\n\tfi\n\
    \n\tif [[ -z $(echo \"${file_name}\" | grep \"^[a-z][^0-9]\\.\" &> /dev/null)\
    \ ]]; then\n\t\treturn \"No\"\n\tfi\n\n\tif [[ -z $(echo \"${file_name}\" | grep\
    \ \"^[a-z][^0-9]\\.\" &> /dev/null) ]]; then\n\t\treturn \"No\"\n\tfi\n\n\tif\
    \ [[ -z $(echo \"${file_name}\" | grep \"^[a-z][^0-9]\\.\" &> /dev/null) ]]; then\n\
    \t\treturn \"No\"\n\tfi\n\n\tif [[ -z $(echo \"${file_name}\" | grep \"^[a-z][^0-9]\\\
    .\" &> /dev/null) ]]; then\n\t\treturn \"No\"\n\tfi\n\n\tif [[ -z $(echo \"${file_name}\"\
    \ | grep \"^[a-z][^0-9]\\.\" &\n}\n\ncandidate() {\n    file_name_check \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmp529in415.sh: line 86: unexpected EOF while looking for matching
    `)''\n/tmp/tmp529in415.sh: line 124: unexpected argument to conditional unary
    operator\n/tmp/tmp529in415.sh: line 124: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  if [[ \"\
    $1\" =~ ^[0-9]{3}$ ]]; then\n    file_name=$1\n    if [[ \"$file_name\" =~ ^([0-9]{3})[^.]$\
    \ ]]; then\n      echo \"Yes\"\n    else\n      echo \"No\"\n    fi\n  else\n\
    \    echo \"No\"\n  fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  if [[ ${#1}\
    \ -gt 3 ]]; then\n    echo \"Invalid\"\n    return 1\n  fi\n  if [[ ${#1} -lt\
    \ 1 || ${#1} == \"$1\" ]]; then\n    echo \"Invalid\"\n    return 1\n  fi\n  if\
    \ [[ ${#1} -gt ${#1} ]]; then\n    echo \"Invalid\"\n    return 1\n  fi\n  if\
    \ [[ ${#1} =~ ^[a-zA-Z0-9]\\. ]]; then\n    if ! [[ ${#1} =~ ^[a-zA-Z0-9].* ]];\
    \ then\n      echo \"Invalid\"\n      return 1\n    fi\n  fi\n  if [[ ${#1} =\
    \ \"$1\" ]]; then\n    if ! [[ ${#1} =~ ^.* ]]; then\n      echo \"Invalid\"\n\
    \      return 1\n    fi\n  fi\n  echo \"Yes\"\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    if [[\
    \ $1 =~ ^[0-9]([0-9]\\.)*[0-9]([A-Za-z])+$ ]]; then\n        if [[ $1 =~ \\.{3,}$\
    \ ]]; then\n            if [[ $1 =~ ^[^ ]+$ ]]; then\n                if [[ $1\
    \ =~ ^([a-zA-Z])+$ ]]; then\n                    echo \"Yes\"\n              \
    \  else\n                    echo \"No\"\n                fi\n            else\n\
    \                echo \"No\"\n            fi\n        else\n            echo \"\
    No\"\n        fi\n    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n\
    \    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n\
    \    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpveyx3lmf.sh: line 21: syntax error in conditional expression\n/tmp/tmpveyx3lmf.sh:
    line 21: syntax error near `]+$''\n/tmp/tmpveyx3lmf.sh: line 21: `            if
    [[ $1 =~ ^[^ ]+$ ]]; then''\n"'
  stdout: b''
  timestamp: 1660078302
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local FILENAME=$1\n\
    \  local VALID_NAME=Yes\n  local SUBSTRING_LENGTH=$((${#FILENAME} - 3))\n  local\
    \ SUBSTRING_BEFORE_DOT=${FILENAME:0:SUBSTRING_LENGTH}\n  local SUBSTRING_AFTER_DOT=${FILENAME:SUBSTRING_LENGTH}\n\
    \  local VALID_SUBSTRING=$(cat <<-EOF\n    a\n    aA\n    aAb\n    aAbc\n    aAba\n\
    \    aB\n    aBC\n    aBca\n    aBcA\n    aC\n    Ab\n    Abc\n    Aba\n    AbA\n\
    \    AbB\n    AbaC\n    AbC\n    AbaCd\n    AbCd\n    AbCde\n    AbCdeF\n    AbCdeFG\n\
    \    AbCdeFGH\n    AbCdeFGHI\n    AbCdeFGHIA\n    AbCdeFGHIAc\n    AbCdeFGHIAd\n\
    \    AbCdeFGHIAe\n    AbCdeFGHIAef\n    AbCdeFGHIAefg\n    AbCdeFGHIAefgh\n  \
    \  AbCdeFGHIAefghi\n    AbCdeFGHIAefghia\n    AbCdeFGHIAefghiac\n    AbCdeFGHIAefghiacd\n\
    \    AbCdeFGHIAefghiacde\n    AbCdeFGHIAefghiacdef\n    AbCdeFGHIAefghiacdefg\n\
    \    AbCdeFGHIAefghiacdefgh\n    AbCdeFGHIAefghiacdefghi\n    AbCdeFGHIAefghiacdefghia\n\
    \    AbCdeFGHIAefghiacdefghiac\n    AbCdeFGHIAefghiacdefghiacd\n    AbCdeFGHIAefghiacdefghiacde\n\
    \    AbCdeFGHIAefghiacdefghiacdef\n    AbCdeFGHIAefghiacdefghiacdefg\n    AbCdeFGHIAefghiacdefghiacdefgh\n\
    \    AbCdeFGHIAefghiacdefghiacdefghi\n    AbCdeFGHIAefghiacdefghiacdefgh\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpn_4g1ijq.sh: line 24: unexpected EOF while looking for matching
    `)''\n/tmp/tmpn_4g1ijq.sh: line 111: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  if [[ \"\
    $1\" =~ ^[0-9]+\\.[0-9]+\\.[0-9]+$ ]]; then\n    if [[ \"$1\" =~ \"^[^\\.]*\\\
    .[^\\.]*$\" ]]; then\n      if [[ \"$1\" =~ \"^[a-zA-Z]\" ]]; then\n        if\
    \ [[ \"$1\" =~ ^[a-zA-Z0-9]+$ ]]; then\n          echo \"Yes\"\n        else\n\
    \          echo \"No\"\n        fi\n      else\n        echo \"No\"\n      fi\n\
    \    else\n      echo \"No\"\n    fi\n  else\n    echo \"No\"\n  fi\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ file_name=$1\n    if [ -n \"${file_name}\" ]; then\n\tif [ \"$(expr match \"\
    ${file_name}\" '.*[0-9][0-9]*')\" -eq 0 ]; then\n\t    if [ \"$(expr match \"\
    ${file_name}\" '.*[^a-z]')\" -eq 1 ]; then\n\t\tif [ \"$(expr match \"${file_name}\"\
    \ '.*[^a-zA-Z]')\" -eq 1 ]; then\n\t\t    if [ ! \"$(expr match \"${file_name}\"\
    \ '.*[\\.]')\" -eq 0 ]; then\n\t\t\tif [ \"$(expr match \"${file_name}\" '.*[^\\\
    .txt\\|exe\\|dll]')\" -eq 2 ]; then\n\t\t\t    echo \"Yes\"\n\t\t\telse\n\t\t\t\
    \    echo \"No\"\n\t\t\tfi\n\t\t    else\n\t\t\t    echo \"No\"\n\t\t    fi\n\t\
    \telse\n\t\t    echo \"No\"\n\t\tfi\n\t    else\n\t\techo \"No\"\n\t    fi\n\t\
    else\n\t    echo \"No\"\n\tfi\n    else\n\techo \"No\"\n    fi\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ f=$1\n    local check=$(echo \"${f}\" | grep -E '^[0-9]\\{1,3\\}\\.\\^?\\^[a-z]|^[^\\\
    .]*$' | grep -E '\\.(exe|dll|txt)$')\n    \n    if [[ -z \"${check}\" ]]; then\n\
    \        echo \"No\"\n    else\n        echo \"Yes\"\n    fi\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078302
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ file=\"$1\"\n    local check=false\n    local dot=false\n    local name=\"\"\
    \n    local firstchar=\"\"\n    local subname=\"\"\n    local ext=\"\"\n    local\
    \ valid=false\n    local extensions=\"txt exe dll\"\n    # Check if file exists\n\
    \    if [ ! -f \"$file\" ] ; then\n        echo \"$file doesn't exist\"\n    \
    \    exit 1\n    fi\n    # Check for more than three digits in the file's name\n\
    \    name=`echo \"$file\" | sed 's/\\([0-9]\\)/\\1/' | sed 's/\\([0-9]\\)\\([0-9]\\\
    )/\\1\\2/g'`\n    if [ \"$name\" == \"\" ] ; then\n        echo \"Invalid file's\
    \ name\"\n        exit 1\n    fi\n    # Check for dot in the file's name\n   \
    \ dot=`echo \"$file\" | sed 's/\\.\\//\\./g'`\n    if [ \"$dot\" != \"\" ] ; then\n\
    \        echo \"Dot is not allowed in the file's name\"\n        exit 1\n    fi\n\
    \    # Check the first character of the substring before dot\n    firstchar=`echo\
    \ \"$file\" | sed 's/\\./\\./'`\n    if [ \"$firstchar\" != \"\" ] ; then\n  \
    \      echo \"First character is not allowed\"\n        exit 1\n    fi\n    #\
    \ Check the substring after the dot\n    subname=`echo \"$file\" | sed 's/\\./\\\
    //'`\n    if [ \"$subname\" != \"\" ] ; then\n        if [ ! \"$subname\" == \"\
    txt\" -o ! \"$subname\" == \"exe\" -o ! \"$subname\" == \"dll\" ] ; then\n   \
    \         echo \"Invalid substring after the dot\"\n            exit 1\n     \
    \   fi\n    fi\n    # Check the extension of the file\n    ext=`echo $file | sed\
    \ 's/\\.[^.]*$//'`\n    if [ \"$ext\" != \"\" ] ; then\n        if [ ! \"$ext\"\
    \ == \"txt\" -o ! \"$ext\" == \"exe\" -o ! \"$ext\" == \"dll\" ] ; then\n    \
    \        echo \"Invalid extension of the file\"\n            exit 1\n        fi\n\
    \    fi\n    # Check if the file's name is valid\n    if [ \"$subname\" == \"\"\
    \ ] ; then\n        valid=true\n    fi\n    if [ \"$ext\" == \"\" ] ; then\n \
    \       valid=true\n    fi\n    # Return result depending on the result\n    if\
    \ [ \"$valid\" == true ] ; then\n        echo \"Yes\"\n    else\n        echo\
    \ \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n\techo \"\
    $1\" | grep -q '^[0-9]\\{3\\}\\.[0-9a-zA-Z].*\\..*$' && echo 'Yes' || echo 'No'\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ -r file_test=$1\n\n    if [[ \"${#file_test}\" == \"1\" ]] ; then\n        if\
    \ [[ ! \"$file_test\" = [0-9][0-9]*.* ]] ; then\n            echo \"No\"\n   \
    \     else\n            echo \"Yes\"\n        fi\n    elif [[ \"${#file_test}\"\
    \ == \"0\" ]]; then\n        echo \"No\"\n    else\n        echo \"No\"\n    fi\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local file_name=\"\
    $1\"\n\n  # Remove all the dots first\n  file_name=\"${file_name//.}\"\n\n  #\
    \ Remove any extra spaces\n  file_name=\"${file_name//[[:space:]]+}\"\n\n  # Check\
    \ if there is any non-alphanumeric characters\n  [[ \"$file_name\" =~ [^[:alnum:]]\
    \ ]] && return 1\n\n  # Check if file name is less than 3 chars long\n  [[ \"\
    $file_name\" =~ ^.{0,3}$ ]] && return 1\n\n  # Check if file name starts with\
    \ letter and has a valid extension\n  [[ \"$file_name\" =~ ^[a-zA-Z][a-zA-Z0-9]*\\\
    .[txt|exe|dll]$ ]] && return 0\n\n  echo \"No\"\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    if [[\
    \ $1 =~ \"[^0-9]\" ]]; then\n        echo \"Invalid file name\"\n        return\
    \ 1\n    fi\n    if [[ $1 =~ \"\\.$\" ]]; then\n        echo \"Invalid file name\"\
    \n        return 1\n    fi\n    if [[ $1 =~ \"^[A-Za-z]\" ]]; then\n        if\
    \ [[ $1 =~ \"\\.$\" ]]; then\n            echo \"Invalid file name\"\n       \
    \     return 1\n        fi\n        if [[ $1 =~ \"^[A-Za-z].$\" ]]; then\n   \
    \         echo \"Invalid file name\"\n            return 1\n        fi\n    fi\n\
    \    if [[ $1 =~ \"^[A-Za-z]\\.\" ]]; then\n        if [[ $1 =~ \"\\.$\" ]]; then\n\
    \            echo \"Invalid file name\"\n            return 1\n        fi\n  \
    \  fi\n    echo \"Yes\"\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  if [[ \"\
    $1\" =~ ^[0-9]*$ ]]; then\n    echo \"No\";\n    return 1;\n  else\n    [[ \"\
    $1\" =~ ^[0-9]*\\.$ ]] && [[ ! -z \"$1\" ]] && [[ \"$1\" =~ ^[a-z][a-z][a-z]$\
    \ ]] || echo \"No\";\n    return 1;\n  fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local file_to_check=$1\n\
    \  if [[ ${#file_to_check} != 3 ]]; then\n    return 1\n  fi\n  [[ \"$file_to_check\"\
    \ =~ ^[0-9]+$ ]] || return 1\n  [[ \"$file_to_check\" =~ ^[^\\.]+$ ]] || return\
    \ 1\n  [[ \"$file_to_check\" =~ ^[a-z]$ ]] || return 1\n  [[ \"$file_to_check\"\
    \ =~ ^[[:alpha:]]$ ]] || return 1\n  [[ \"$file_to_check\" =~ ^[[:alnum:]].+$\
    \ ]] || return 1\n  [[ \"$file_to_check\" =~ ^[a-z].+$ ]] || return 1\n  return\
    \ 0\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local file_name\n\
    \  file_name=$1\n  [[ -z $file_name ]] && return 1\n  [[ \"$file_name\" =~ ^[0-9][0-9]+$\
    \ ]] && return 1\n  [[ \"$file_name\" =~ ^[^.]* ]] && return 1\n  [[ \"$file_name\"\
    \ =~ ^[a-z][a-z][a-z] ]] && return 1\n  [[ \"$file_name\" =~ ^[a-z][a-z][a-z].*$\
    \ ]] && return 1\n  [[ \"$file_name\" =~ ^[a-z][a-z][a-z].*\\.(exe|dll)$ ]] &&\
    \ return 0\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local file_name=\"\
    $1\"\n  local num_digits=$( echo \"$file_name\" | wc -l )\n  local dot_pos=$(\
    \ echo \"$file_name\" | grep '.' | wc -l )\n  local first_letter_pos=$( echo \"\
    $file_name\" | grep ^[A-Za-z] | wc -l )\n  local sub_before_dot=$( echo \"${file_name:0:dot_pos}\"\
    \ | grep ^[a-z] )\n  local sub_after_dot=$( echo \"${file_name:dot_pos}\" | grep\
    \ ^[a-z] )\n  echo \"${sub_before_dot}\" | grep -q \"^[A-Za-z].*\" && echo \"\
    Yes\" || echo \"No\"\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ file=\"${1}\"\n    local dot=\"${file%.*}\"\n    local no_dot=\"${dot%.*}\"\n\
    \    local valid_length=${#no_dot}\n    local valid_file_name\n\n    valid_file_name=\"\
    ${no_dot}\" | egrep '^[a-z][a-z][a-z]\\.[a-z][a-z][a-z]$' | egrep -i '^[a-zA-Z][0-9]?[a-zA-Z]\\\
    .[a-zA-Z][a-z][a-z]$'\n    if [ \"${valid_file_name}\" != \"\" ]; then\n     \
    \   echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n\
    \    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n\
    \    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ filename\n    local file_extension\n    local dot\n    local dot_position\n\n\
    \    dot_position=${1#*.}\n    dot=${1:${dot_position}}\n    \n    local file_name\
    \ \n    local valid\n\n    file_name=\"${1%.*}\"\n\n    file_extension=\"${fileName##*.}\"\
    \n\n    valid=true\n\n    if [[ $dot_position -eq 0 ]]; then\n        echo \"\
    File name should start with a letter.\" 1>&2\n        valid=false\n    fi\n  \
    \  \n    if [[ $dot_position -gt 3 ]]; then\n        echo \"File name should not\
    \ have more than 3 digits.\" 1>&2\n        valid=false\n    fi\n\n    if [[ !\
    \ $dot =~ ^[[:alpha:]] ]]; then\n        echo \"The file extension should not\
    \ start with a letter.\" 1>&2\n        valid=false\n    fi\n\n    if [[ $file_extension\
    \ != txt ]]; then\n        echo \"The file extension should be 'txt'.\" 1>&2\n\
    \        valid=false\n    fi\n\n    if [[ $file_extension != exe ]]; then\n  \
    \      echo \"The file extension should be 'exe'.\" 1>&2\n        valid=false\n\
    \    fi\n\n    if [[ $file_extension != dll ]]; then\n        echo \"The file\
    \ extension should be 'dll'.\" 1>&2\n        valid=false\n    fi\n\n    echo \"\
    ${valid}\"\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b"File name should start with a letter.\nThe file extension should be 'txt'.\nThe
    file extension should be 'exe'.\nThe file extension should be 'dll'.\n"
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  FILE_NAME=\"\
    $1\"\n  VALID_NAME=$(expr \"$FILE_NAME\" : '[0-9][0-9]*\\.[a-zA-Z][a-zA-Z][a-z]*')\n\
    \  if (( $(expr \"$VALID_NAME\" : '[0-9][0-9]') > 3 )); then\n    echo -n \"No\"\
    \n  else\n    echo -n \"Yes\"\n  fi\n}\n\ncandidate() {\n    file_name_check \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\"\
    \ ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"\
    s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local file\n\
    \  file=$1\n  \n  local dot\n  dot=${file:0:1}\n  \n  if [[ $dot != '' ]]; then\n\
    \    local char\n    for char in {a..z} {A..Z}; do\n      local check\n      check=$(expr\
    \ match \"${file}\" \".${char}.*\")\n      if [[ \"${check}\" == '0' ]]; then\n\
    \        echo No\n        return 0\n      fi\n    done\n  fi\n  \n  if [[ $file\
    \ == *\".\"* ]]; then\n    if [[ \"${file:0:1}\" != [a-zA-Z] ]]; then\n      echo\
    \ No\n      return 0\n    fi\n  fi\n  \n  if [[ $file == *\".exe\"* ]]; then\n\
    \    local ext\n    for ext in exe dll txt exe; do\n      if [[ $file == *\"${ext}*\"\
    \ ]]; then\n        echo Yes\n        return 0\n      fi\n    done\n  fi\n  \n\
    \  if [[ $file == *\".dll\"* ]]; then\n    local ext\n    for ext in exe dll txt\
    \ exe; do\n      if [[ $file == *\"${ext}*\" ]]; then\n        echo Yes\n    \
    \    return 0\n      fi\n    done\n  fi\n  \n  if [[ $file == *\".txt\"* ]]; then\n\
    \    local ext\n    for ext in exe dll txt exe; do\n      if [[ $file == *\"${ext}*\"\
    \ ]]; then\n        echo Yes\n        return 0\n      fi\n    done\n  fi\n  \n\
    \  if [[ $file == *\".dll\"* ]]; then\n    local ext\n    for ext in exe dll txt\
    \ exe; do\n      if [[ $file == *\"${ext}*\" ]]; then\n        echo Yes\n    \
    \    return 0\n      fi\n    done\n  fi\n  \n  if [[ $file == *\".exe\"* ]]; then\n\
    \    local ext\n    for ext in exe dll txt exe; do\n      if [[ $file == *\"${ext}*\"\
    \ ]]; then\n        echo Yes\n        return 0\n      fi\n    done\n  fi\n  \n\
    \  echo No\n  return 0\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ FILE=$1\n    local REGEX='^[^0-9]*[0-9]\\.[^0-9]*$' \n\n    [[ $FILE =~ $REGEX\
    \ ]] || { echo \"$FILE is not valid\"; return 1; }\n    [[ \"$(echo $FILE | cut\
    \ -d. -f1)\" =~ ^[A-Za-z] ]] || { echo \"$FILE does not start with a latin letter\"\
    ; return 1; }\n    [[ \"$(echo $FILE | cut -d. -f2)\" == \"txt\" ]] || { echo\
    \ \"$FILE contains no extension\"; return 1; }\n    [[ \"$(echo $FILE | cut -d.\
    \ -f3)\" == \"exe\" ]] || { echo \"$FILE contains no extension\"; return 1; }\n\
    \    [[ \"$(echo $FILE | cut -d. -f4)\" == \"dll\" ]] || { echo \"$FILE contains\
    \ no extension\"; return 1; }\n\n    echo \"Yes\"\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    name=$1\n\
    \    if [[ -z \"$name\" ]]; then\n        echo \"No\"\n    else\n        [[ \"\
    $name\" =~ ^[0-9][0-9]$ && \"$name\" =~ .* ] && \\\n            [[ \"$name\" =~\
    \ ^[^.]*$ ]] && \\\n            [[ \"$name\" =~ ^[a-zA-Z][a-zA-Z]$ ]] && \\\n\
    \            [[ \"$name\" =~ ^[a-z][a-z]$ ]]\n        echo \"Yes\"\n    fi\n}\n\
    \ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhinpy0t.sh: line 23: syntax error in conditional expression\n/tmp/tmpnhinpy0t.sh:
    line 23: syntax error near `]\''\n/tmp/tmpnhinpy0t.sh: line 23: `        [[ "$name"
    =~ ^[0-9][0-9]$ && "$name" =~ .* ] && \\\''\n'''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    if [[\
    \ $# -ne 1 ]]; then\n        echo \"file_name_check - Invalid number of arguments\
    \ passed to function.\" >&2\n        exit 1\n    fi\n    \n    # Validate that\
    \ the file name contains three digits.\n    local file_pattern='^[0-9]{3}$'\n\
    \    if [[ \"$1\" =~ $file_pattern ]]; then\n        local file_name_length=${#1}\n\
    \        if [[ $file_name_length -ne 3 ]]; then\n            echo \"file_name_check\
    \ - Invalid number of digits found in file name.\" >&2\n            exit 1\n \
    \       fi\n    fi\n    \n    # Validate that the file name contains no more than\
    \ three consecutive dots.\n    local dot_pattern='\\.'\n    if [[ \"$1\" =~ $dot_pattern\
    \ ]]; then\n        local dot_count=${#1}\n        if [[ $dot_count -gt 3 ]];\
    \ then\n            echo \"file_name_check - Invalid number of consecutive dots\
    \ found in file name.\" >&2\n            exit 1\n        fi\n    fi\n    \n  \
    \  # Validate that the file name does not contain an empty string before the first\
    \ \n    # dot.\n    local dot_first_pattern='^[^.]'\n    if [[ \"$1\" =~ $dot_first_pattern\
    \ ]]; then\n        echo \"file_name_check - Empty string found before first dot\
    \ in file name.\" >&2\n        exit 1\n    fi\n    \n    # Validate that the file\
    \ name does not contain an empty string after the last \n    # dot.\n    local\
    \ dot_last_pattern='[^.]$'\n    if [[ \"$1\" =~ $dot_last_pattern ]]; then\n \
    \       echo \"file_name_check - Empty string found after last dot in file name.\"\
    \ >&2\n        exit 1\n    fi\n    \n    # Validate that the file name does not\
    \ contain one of the file extension \n    # strings in an array.\n    local file_extension_strings=(\"\
    txt\" \"exe\" \"dll\")\n    for file_extension_string in ${file_extension_strings[@]};\
    \ do\n        local file_extension_pattern=\"\\.$file_extension_string$\"\n  \
    \      if [[ \"$1\" =~ $file_extension_pattern ]]; then\n            echo \"file_name_check\
    \ - Invalid file extension string found in file name.\" >&2\n            exit\
    \ 1\n        fi\n    done\n    \n    # Validate that the substring before the\
    \ dot starts with a letter from the \n    # latin alphabet ('a' - 'z').\n    local\
    \ dot_first_letter_pattern='^[A-Z]'\n    if [[ \"$1\" =~ $dot_first_letter_pattern\
    \ ]]; then\n        echo \"file_name_check - Substring found before first letter\
    \ from latin alphabet in file name.\" >&2\n        exit 1\n    fi\n    \n    #\
    \ Validate that the substring after the dot starts with the following \n    #\
    \ strings in the array\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b'file_name_check - Invalid number of consecutive dots found in file name.\n'
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    file_name_check_result=\"\
    $(echo $1 | cut -d. -f1 | grep -v -e '[0-9]' | grep -v -e '.' | grep -v -e '[[:alpha:]]'\
    \ | grep -v '^$' | wc -l)\"\n    if [[ $file_name_check_result -gt 3 ]]; then\n\
    \      file_name_check_result=\"No\"\n    elif [[ $file_name_check_result -eq\
    \ 3 ]]; then\n      file_name_check_result=\"Yes\"\n    elif [[ $file_name_check_result\
    \ -eq 1 ]]; then\n      file_name_check_result=\"Yes\"\n    fi\n    return $file_name_check_result\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n\techo $(expr\
    \ \"$1\" : \"^[0-9]*\\.[0-9]$\" '&& echo \"Yes\"')\n\techo $(expr \"$1\" : \"\
    ^[a-z][a-z][0-9]\" '&& echo \"Yes\"')\n\techo $(expr \"$1\" : \"^[a-zA-Z][a-z][a-zA-Z0-9]\"\
    \ '&& echo \"Yes\"')\n\techo $(expr \"$1\" : \"^[a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9]\"\
    \ '&& echo \"Yes\")\n\techo $(expr \"$1\" : \"^[a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9]\"\
    \ '&& echo \"Yes\")\n\techo $(expr \"$1\" : \"^[a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9]\"\
    \ '&& echo \"Yes\")\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpk1wmlflf.sh: line 24: unexpected EOF while looking for matching
    `''''\n/tmp/tmpk1wmlflf.sh: line 62: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n\tlocal file=\"\
    $1\"\n\t[[ ${#file} -le 3 ]] || return 1\n\t[[ ${file:0:1} != \"0\" ]] || return\
    \ 1\n\t[[ ${file:0:1} != \"9\" ]] || return 1\n\t[[ ${file:0:1} == \"1\" ]] ||\
    \ return 1\n\t[[ \"${file%.*}\" != \"${file}\" ]] || return 1\n\t[[ \"${file%.*}\"\
    \ != \"${file}\" ]] || return 1\n\t[[ \"${file:0:1}\" != \"${file:0:1}\" ]] ||\
    \ return 1\n\t[[ $(echo \"${file}\" | sed 's/.*\\.//' | sed 's/^[a-z]*\\././')\
    \ != \"${file}\" ]] || return 1\n}\n\ncandidate() {\n    file_name_check \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  # Check\
    \ if file name is valid\n  file=\"${1}\"\n  if [[ ${file} =~ ^[0-9]\\{3,\\}$ &&\
    \ ${file} =~ \\.$ && \\( ${file##*.} != \"txt\" && ${file##*.} != \"exe\" && ${file##*.}\
    \ != \"dll\" \\) ]]; then\n    echo \"Yes\"\n  else\n    echo \"No\"\n  fi\n}\n\
    \ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp86z7ulia.sh: line 21: conditional binary operator expected\n/tmp/tmp86z7ulia.sh:
    line 21: syntax error near `${file##*.}\''\n/tmp/tmp86z7ulia.sh: line 21: `  if
    [[ ${file} =~ ^[0-9]\\{3,\\}$ && ${file} =~ \\.$ && \\( ${file##*.} != "txt" &&
    ${file##*.} != "exe" && ${file##*.} != "dll" \\) ]]; then\''\n'''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    if [[\
    \ -z $1 ]]\n    then\n        echo \"$1 is not provided\" >&2\n        return\
    \ 1\n    fi\n    \n    if ! [[ $1 =~ ^[0-9]*\\.[a-z]*$ ]]\n    then\n        echo\
    \ \"$1 does not contain one dot ('.') and it starts with letters from the latin\
    \ alphapet ('a'-'z' and 'A'-'Z')\" >&2\n        return 1\n    fi\n    \n    if\
    \ ! [[ \"$1\" =~ (^[a-zA-Z].*) ]]\n    then\n        echo \"$1 does not contain\
    \ exactly one dot ('.') and it is not empty\" >&2\n        return 1\n    fi\n\
    \    \n    if ! [[ $1 =~ (^[a-zA-Z]*\\.) ]]\n    then\n        echo \"$1 does\
    \ not contain exactly one dot ('.') at the beginning of the substring (before\
    \ the first letter of the substring)\" >&2\n        return 1\n    fi\n    \n \
    \   if ! [[ $1 =~ (^[a-zA-Z]*\\.[a-zA-Z]*) ]]\n    then\n        echo \"$1 does\
    \ not contain exactly one dot ('.') at the end of the substring (at the end of\
    \ the substring)\" >&2\n        return 1\n    fi\n    \n    echo \"$1 is valid\"\
    \ >&2\n    return 0\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b"example.txt does not contain one dot ('.') and it starts with letters
    from the latin alphapet ('a'-'z' and 'A'-'Z')\n"
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n\tFILE_NAME_CHECK=\"\
    $(echo $1 | egrep \"[0-9]{3}\\.[a-zA-Z]{1,3}$|$1\" | wc -l )\"\n\tif [ \"${FILE_NAME_CHECK}\"\
    \ = \"1\" ]; then\n\t\techo \"No\"\n\telse\n\t\techo \"Yes\"\n\tfi\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    file_name=$1\n\
    \    count=1\n    valid_check='yes'\n    while [[ $count -le 3 ]]; do\n      \
    \  file_name=$(cut -d '.' -f 1 <<<$file_name);\n        valid_check=$(echo $file_name|grep\
    \ -E '^[0-9][0-9]*$')\n        count=$(expr ${count} + 1)\n    done\n    if [[\
    \ $valid_check == 'yes' ]]; then\n        valid_check=$(echo $file_name|grep -E\
    \ '^[a-z][a-z][a-z].*')\n    fi\n    if [[ $valid_check == 'yes' ]]; then\n  \
    \      valid_check=$(echo $file_name|grep -E '^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z].*')\n\
    \    fi\n    if [[ $valid_check == 'yes' ]]; then\n        valid_check=$(echo\
    \ $file_name|grep -E '^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z].*')\n\
    \    fi\n    if [[ $valid_check == 'yes' ]]; then\n        valid_check=$(echo\
    \ $file_name|grep -E '^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmp04n6vafc.sh: line 37: unexpected EOF while looking for matching
    `''''\n/tmp/tmp04n6vafc.sh: line 75: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    [ \"\
    $#\" -gt 1 ] && return 1;\n    [ \"${#1}\" -gt 3 ] && return 1;\n    [ -z \"${1}.\"\
    \ ] && return 1;\n    [ \"${1:0:1}\" -eq \"a\" -o \"${1:0:1}\" -eq \"b\" -o \"\
    ${1:0:1}\" -eq \"c\" -o \"${1:0:1}\" -eq \"d\" -o \"${1:0:1}\" -eq \"e\" -o \"\
    ${1:0:1}\" -eq \"f\" -o \"${1:0:1}\" -eq \"g\" -o \"${1:0:1}\" -eq \"h\" -o \"\
    ${1:0:1}\" -eq \"i\" -o \"${1:0:1}\" -eq \"j\" -o \"${1:0:1}\" -eq \"k\" -o \"\
    ${1:0:1}\" -eq \"l\" -o \"${1:0:1}\" -eq \"m\" -o \"${1:0:1}\" -eq \"n\" -o \"\
    ${1:0:1}\" -eq \"o\" -o \"${1:0:1}\" -eq \"p\" -o \"${1:0:1}\" -eq \"q\" -o \"\
    ${1:0:1}\" -eq \"r\" -o \"${1:0:1}\" -eq \"s\" -o \"${1:0:1}\" -eq \"t\" -o \"\
    ${1:0:1}\" -eq \"u\" -o \"${1:0:1}\" -eq \"v\" -o \"${1:0:1}\" -eq \"w\" -o \"\
    ${1:0:1}\" -eq \"x\" -o \"${1:0:1}\" -eq \"y\" -o \"${1:0:1}\" -eq \"z\" ] &&\
    \ return 1;\n    [ \"${1:0:1}\" != \"0\" ] && return 1;\n    [ \"${1:0:1}\" !=\
    \ \"1\" ] && return 1;\n    [ \"${1:0:1}\" != \"2\" ] && return 1;\n    [ \"${1:0:1}\"\
    \ != \"3\" ] && return 1;\n    [ \"${1:0:1}\" != \"4\" ] && return 1;\n    [ \"\
    ${1:0:1}\" != \"5\" ] && return 1;\n    [ \"${1:0:1}\" != \"6\" ] && return 1;\n\
    \    [ \"${1:0:1}\" != \"7\" ] && return 1;\n    [ \"${1:0:1}\" != \"8\" ] &&\
    \ return 1;\n    [ \"${1:0:1}\" != \"9\" ] && return 1;\n    [ \"${1}\" != \"\
    ${1}\" ] && return 1;\n    echo \"Yes\";\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n\tlocal FILE_NAME=$1\n\
    \tlocal EXPECTED_LENGTH=3\n\tlocal VALID_CHARACTERS='0-9 a-z A-Z'\n\tlocal TRAILING_CHARACTERS=\"\
    \\.exe$\"\n\tlocal VALID_EXTENSIONS='txt exe dll'\n\n\t# Trim trailing characters\
    \ and check file length\n\tFILE_NAME=${FILE_NAME%\"${TRAILING_CHARACTERS}\"}\n\
    \tFILE_NAME=${FILE_NAME##*\"${TRAILING_CHARACTERS}\"}\n\tFILE_NAME=${FILE_NAME:${EXPECTED_LENGTH}}\n\
    \tif [[ \"$FILE_NAME\" =~ $VALID_CHARACTERS ]]; then\n\t\tif [[ \"$FILE_NAME\"\
    \ =~ $VALID_EXTENSIONS ]]; then\n\t\t\techo \"Yes\"\n\t\telse\n\t\t\techo \"No\"\
    \n\t\tfi\n\telse\n\t\techo \"No\"\n\tfi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local string=\"\
    $1\"\n  \n  local regex=\"^[0-9][0-9].*[^.]$\" # contains one dot '.'\n  local\
    \ regex_start=\"^[a-zA-z].*[^.]\" # contains at least one letter from the latin\
    \ alphapet ('a'-'z' and 'A'-'Z')\n  \n  if [[ $string =~ $regex ]] || [[ $string\
    \ =~ $regex_start ]]; then\n    echo \"Yes\"\n  else\n    echo \"No\"\n  fi\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ file_name=\"$1\"\n    local valid_string=\"$2\"\n    local dot_string=\"${file_name%.*}\"\
    \n    if [[ \"${file_name}\" == ${dot_string} ]]; then\n        local valid_sub_string=\"\
    ${file_name#*.}\"\n        valid_substrings=\"${valid_substrings} ${valid_sub_string}\"\
    \n    fi\n    if [[ ${#valid_substrings} != 0 ]]; then\n        echo \"${valid_substrings}\"\
    \ | while read line; do\n            local valid_substring=${line}\n         \
    \   echo \"${valid_substring}\" | grep -q '^[a-z]'\n            if [[ $? -eq 0\
    \ ]]; then\n                echo \"Yes\"\n                break\n            else\n\
    \                echo \"No\"\n                break\n            fi\n        done\n\
    \    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ file_name=$1\n    if [ -z \"$file_name\" ]; then\n        return 0;\n    else\n\
    \        # Count the number of digits in the filename\n        local count=0\n\
    \        # Loop through the file name and count the digits\n        while [[ \"\
    $file_name\" =~ ^([0-9]{3})$ ]]; do\n            file_name=${BASH_REMATCH[1]}\n\
    \            (( count++ ))\n        done\n        # Check for the right number\
    \ of digits in the filename\n        if [ $count -gt 3 ]; then\n            echo\
    \ \"$file_name contains more than 3 digits\"\n            return 0\n        fi\n\
    \        # Check for the presence of one dot '.'\n        if [ ! \"$file_name\"\
    \ == *\".*\" -a ! \"$file_name\" == *\".*\\.*\" -a ! \"$file_name\" == *\".*\\\
    .*.*\" ]; then\n            echo \"$file_name contains no dot (.)\"\n        \
    \    return 0\n        fi\n        # Extract the name of the file before the dot\n\
    \        local file_name_before_dot=${BASH_REMATCH[1]}\n        # Check for the\
    \ wrong number of characters before the dot\n        if [ -z \"$file_name_before_dot\"\
    \ ] || [ \"${#file_name_before_dot}\" -gt 1 ]; then\n            echo \"$file_name\
    \ contains a character before the dot ($file_name_before_dot).\"\n           \
    \ return 0\n        fi\n        # Extract the name of the file after the dot\n\
    \        local file_name_after_dot=${BASH_REMATCH[2]}\n        # Check the file\
    \ name after dot\n        if [ \"${#file_name_after_dot}\" -eq 0 ]; then\n   \
    \         echo \"$file_name contains a character after the dot ($file_name_after_dot).\"\
    \n            return 0\n        elif [ \"${#file_name_after_dot}\" -gt 3 ]; then\n\
    \            echo \"$file_name contains more than 3 characters ($file_name_after_dot).\"\
    \n            return 0\n        elif [ \"${file_name_after_dot}\" != \"${file_name_before_dot}${file_name_after_dot}\"\
    \ ]; then\n            echo \"$file_name does not end with the dot ($file_name_after_dot).\"\
    \n            return 0\n        fi\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  [[ ! \"\
    ${1:0:3}\" =~ ^[0-9]*$ ]] && echo \"Invalid file name: ${1}\" && exit 1\n  [[\
    \ \"${1}\" =~ \\.* ]] && echo \"Invalid file name: ${1}\" && exit 1\n  [[ \"${1}\"\
    \ =~ [^.].* ]] && echo \"Invalid file name: ${1}\" && exit 1\n  [[ \"${1}\" =~\
    \ ^[a-z].* ]] && echo \"Invalid file name: ${1}\" && exit 1\n  [[ \"${1}\" =~\
    \ ^[A-Z].* ]] && echo \"Invalid file name: ${1}\" && exit 1\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local file_name=\"\
    $1\"\n  local file_name_length=${#file_name}\n  local valid_string=\"No\"\n  \n\
    \  if [[ ${file_name_length} -gt 3 ]]; then\n    valid_string=\"Yes\"\n  fi\n\n\
    \  local dot_count=${#file_name_%.*}\n  if [[ ${dot_count} -eq 1 ]]; then\n  \
    \  local first_char=${file_name:0:1}\n    if [[ \"${first_char}\" != \"a\" -a\
    \ \"${first_char}\" != \"A\" ]]; then\n      valid_string=\"No\"\n    fi\n  fi\n\
    \n  local suffixes=(\"txt\" \"exe\" \"dll\")\n  local suffixes_count=${#suffixes[@]}\n\
    \  if [[ ${suffixes_count} -gt 0 ]]; then\n    local suffix=${file_name_%.*}\n\
    \    if [[ ${suffix} != \"${suffixes[@]}\" ]]; then\n      valid_string=\"No\"\
    \n    fi\n  fi\n\n  echo \"${valid_string}\"\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp23cczdxh.sh: line 30: syntax error in conditional expression\n/tmp/tmp23cczdxh.sh:
    line 30: syntax error near `-a\''\n/tmp/tmp23cczdxh.sh: line 30: `    if [[ "${first_char}"
    != "a" -a "${first_char}" != "A" ]]; then\''\n'''
  stdout: b''
  timestamp: 1660078303
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local file_name=$1\n\
    \  local file_extension=\"${file_name##*.}\"\n  if [[ $file_extension != \"\"\
    \ ]]; then\n    local file_extension_parts=$(echo \"${file_extension}\" | sed\
    \ 's/\\..*$//g')\n    if [[ ! \"${file_extension_parts}\" =~ ^[0-9]$ ]]; then\n\
    \      echo \"No\"\n    else\n      local file_extension_parts_count=${#file_extension_parts}\n\
    \      if (( file_extension_parts_count > 1 )); then\n        local file_extension_parts_length=${#file_extension_parts[@]}\n\
    \        if (( $file_extension_parts_length == 1 )); then\n          if [[ ${file_extension_parts[0]}\
    \ != \"a\" && \\\n               ${file_extension_parts[0]} != \"A\" && \\\n \
    \              ${file_extension_parts[0]} != \"b\" && \\\n               ${file_extension_parts[0]}\
    \ != \"B\" && \\\n               ${file_extension_parts[0]} != \"c\" && \\\n \
    \              ${file_extension_parts[0]} != \"C\" && \\\n               ${file_extension_parts[0]}\
    \ != \"d\" && \\\n               ${file_extension_parts[0]} != \"D\" && \\\n \
    \              ${file_extension_parts[0]} != \"e\" && \\\n               ${file_extension_parts[0]}\
    \ != \"E\" && \\\n               ${file_extension_parts[0]} != \"f\" && \\\n \
    \              ${file_extension_parts[0]} != \"F\" && \\\n               ${file_extension_parts[0]}\
    \ != \"g\" && \\\n               ${file_extension_parts[0]} != \"G\" && \\\n \
    \              ${file_extension_parts[0]} != \"h\" && \\\n               ${file_extension_parts[0]}\
    \ != \"H\" && \\\n               ${file_extension_parts[0]} != \"i\" && \\\n \
    \              ${file_extension_parts[0]} != \"I\" && \\\n               ${file_extension_parts[0]}\
    \ != \"j\" && \\\n               ${file_extension_parts[0]} != \"J\" && \\\n \
    \              ${file_extension_parts[0]} != \"k\" && \\\n               ${file_extension_parts[0]}\
    \ != \"K\" && \\\n               ${file_extension_parts[0]} != \"l\" && \\\n \
    \              ${file_extension_parts[0]} != \"L\" && \\\n               ${file_extension_parts[0]}\
    \ != \"m\" && \\\n               ${file_extension_parts[0]} != \"M\" && \\\n \
    \              ${file_extension_parts[0]} != \"n\" && \\\n               ${file_extension_parts[0]}\
    \ != \"N\" && \\\n               ${file_extension_parts[0]} \n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmp3_serd_v.sh: line 58: unexpected token `newline'', conditional
    binary operator expected\n/tmp/tmp3_serd_v.sh: line 58: syntax error near `${file_extension_parts[0]}''\n/tmp/tmp3_serd_v.sh:
    line 58: `               ${file_extension_parts[0]} ''\n"'
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local NAME=$1\n\
    \  # Check that there are 3 digits in the name\n  echo $NAME | grep '^[0-9]*$'\
    \ > /dev/null\n  if [ $? = 0 ]; then\n    echo \"No\"\n    return\n  fi\n  # Check\
    \ that there is only one dot '.'\n  echo $NAME | grep '\\.' > /dev/null\n  if\
    \ [ $? = 0 ]; then\n    echo \"No\"\n    return\n  fi\n  # Check that substring\
    \ before the dot is not empty\n  echo $NAME | awk -F. '{ print $1 }' > /dev/null\n\
    \  if [ $? = 0 ]; then\n    echo \"No\"\n    return\n  fi\n  # Check that substring\
    \ after the dot is one of these\n  echo $NAME | awk -F. '{ print $2 }' | tr '[:lower:]'\
    \ '[:upper:]' |\n  grep -w 'txt|exe|dll' > /dev/null\n  if [ $? = 0 ]; then\n\
    \    echo \"Yes\"\n  else\n    echo \"No\"\n  fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ name=\"$1\"\n    if [[ ${#name} -lt 3 ]]; then\n        echo \"No\"\n      \
    \  return 0\n    fi\n\n    local dot=\"${name%%.*}\"\n    local base=\"$(echo\
    \ \"${dot}\" | tr -dc '0-9')\"\n    local ext=\"${name##*.}\"\n    local valid_exts=(\
    \ txt exe dll )\n\n    if [[ -z ${base} ]]; then\n        echo \"No\"\n      \
    \  return 0\n    fi\n\n    for ext in \"${valid_exts[@]}\"; do\n        if [[\
    \ \"${ext}\" == \"${dot}\" ]]; then\n            echo \"No\"\n            return\
    \ 0\n        fi\n    done\n\n    echo \"Yes\"\n    return 0\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  # Check\
    \ parameters\n  if [ $# -ne 1 ]\n  then\n    echo \"Incorrect number of parameters\"\
    \n    exit 1\n  fi\n  # Remove spaces and check if file exists\n  base_name=$(echo\
    \ $1 | tr ' ' '_' | sed -e 's/^[^0-9A-Za-z]*//g' -e 's/^[0-9A-Za-z]*$//g')\n \
    \ file_exists=$(find . -name \"$base_name\" -type f -print -quit | grep -q \"\"\
    )\n  if [ ! \"$file_exists\" = \"true\" ]\n  then\n    echo \"File $1 is not valid\"\
    \n    exit 1\n  fi\n  # Check if file is valid\n  case \"$1\" in\n    *[0-9]*\\\
    .txt)\n      if [ \"$(echo $1 | tr ' ' '_' | sed -e 's/^[^0-9A-Za-z]*//g' -e 's/^[0-9A-Za-z]*$//g'\
    \ | wc -c)\" -eq 1 -a \"${1:0:1}\" != \"0\" ]\n      then\n        echo \"File\
    \ $1 is valid\"\n        echo \"\"\n      else\n        echo \"File $1 is not\
    \ valid\"\n        echo \"\"\n      fi\n    ;;\n    *exe|*dll)\n      if [ \"\
    $(echo $1 | tr ' ' '_' | sed -e 's/^[^0-9A-Za-z]*//g' -e 's/^[0-9A-Za-z]*$//g'\
    \ | wc -c)\" -eq 1 ]\n      then\n        echo \"File $1 is valid\"\n        echo\
    \ \"\"\n      else\n        echo \"File $1 is not valid\"\n        echo \"\"\n\
    \      fi\n    ;;\n    *)\n      echo \"File $1 is not valid\"\n      echo \"\"\
    \n    ;;\n  esac\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    file_name=$(basename\
    \ $1)\n    [[ \"${file_name}\" =~ ^[0-9]*$ ]] && [[ \"${file_name}\" =~ \\. ]]\
    \ \\\n        && [[ \"${file_name}\" != '' ]] && [[ \"${file_name:0:1}\" =~ ^[[:alpha:]]$\
    \ ]] \\\n        && [[ \"${file_name:(-1)}\" =~ ^[[:digit:]]$ ]] && echo \"Yes\"\
    \ || echo \"No\"\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ file_name=$1\n    local digits=$2\n\n    if [[ $digits == [1-9] ]]; then\n \
    \       echo \"Yes\"\n        return 0\n    else\n        echo \"No\"\n      \
    \  return 1\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ file_name\n    file_name=$1\n    [[ -z ${file_name} ]] && return 1\n    [[ \"\
    $file_name\" =~ ^[0-9]*$ ]] && return 1\n    [[ \"$file_name\" =~ ^\\.$ ]] &&\
    \ return 1\n    [[ \"$file_name\" =~ ^[a-z]*$ ]] && return 1\n    [[ \"$file_name\"\
    \ =~ ^[a-z].* ]] && return 1\n    [[ \"$file_name\" =~ ^[a-z].*\\.(txt|exe|dll)$\
    \ ]] && return 0\n    return 1\n}\n\ncandidate() {\n    file_name_check \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  if [[ $1\
    \ =~ ^[0-9]{3}\\.[^.]+$ ]]\n  then\n    true\n  else\n    echo \"${RED}No${NOCOLOR}\"\
    \n  fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local FILE_NAME=$1\n\
    \  local VALID=\"No\"\n  # Check file name and make sure it contains one dot '.'\n\
    \  if [[ \"$FILE_NAME\" =~ '\\.' ]]; then\n    local DOT_POSITION=${FILE_NAME#.}\n\
    \    local FILE_NAME_PART=\"${DOT_POSITION%%.}\"\n    local FILE_EXTENSION=\"\
    ${DOT_POSITION#*.}\"\n    local FILE_NAME_PART_CHAR=${FILE_NAME_PART#?}\n    local\
    \ FILE_NAME_PART_CHAR_UPPER=${FILE_NAME_PART_CHAR^^}\n    local FILE_NAME_VALID=\"\
    ${FILE_NAME_PART_CHAR_UPPER:0:1}\"\n    # Make sure substring is not empty, and\
    \ it starts with letter from latin alphabet \n    if [[ -z \"$FILE_NAME_PART\"\
    \ ]]; then\n      local FILE_NAME_VALID=\"No\"\n    else\n      # Check that substring\
    \ is one of these ['txt', 'exe', 'dll']\n      if [[ $(echo $FILE_EXTENSION |\
    \ grep -Fwf <(echo txt|echo exe|echo dll)) == $FILE_EXTENSION ]]; then\n     \
    \   local FILE_NAME_VALID=\"Yes\"\n      fi\n    fi\n  fi\n  echo $FILE_NAME_VALID\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n\tfilename=$1\n\
    \t# check if filenames has more than 3 digits.\n\tif [[ ${#filename} -gt 3 ]];\
    \ then\n\t\techo \"No\"\n\telse\n\t\t# check if filename contains only one dot\n\
    \t\tif [[ \"${filename:(-1)}\" != \".\" ]]; then\n\t\t\techo \"No\"\n\t\telse\n\
    \t\t\t# check if filename starts with letter\n\t\t\tif [[ \"${filename:0:1}\"\
    \ != [[:alpha:]] ]]; then\n\t\t\t\techo \"No\"\n\t\t\telse\n\t\t\t\t# check if\
    \ filename ends with one of these: txt, exe, dll\n\t\t\t\tif [[ \"${filename:(-1)}\"\
    \ != 'txt' &&\n\t\t\t\t\t${filename:(-1)} != 'exe' &&\n\t\t\t\t\t${filename:(-1)}\
    \ != 'dll' ]]; then\n\t\t\t\t\techo \"No\"\n\t\t\t\telse\n\t\t\t\t\techo \"Yes\"\
    \n\t\t\t\tfi\n\t\t\tfi\n\t\tfi\n\tfi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local file\n\
    \  file=\"$1\"\n  if [[ \"$file\" =~ ^[0-9]{3}\\.* ]]; then\n    [[ \"$file\"\
    \ =~ ^[0-9]{3}\\. ]] && [[ \"$file\" =~ \\. ]] && [[ \"$file\" =~ ^[a-z][a-z]\
    \ ]] && [[ \"$file\" =~ ^[a-z][a-z][a-z] ]]\n  else\n    [[ -e \"$file\" ]]\n\
    \  fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    file_name=$(basename\
    \ $1)\n    valid_string=\"$([[ \"$file_name\" =~ ([^.]([0-9])+)\\.([^.]+) ]] &&\
    \ echo 'Yes' || echo 'No')\"\n}\n\ncandidate() {\n    file_name_check \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  if ! [[\
    \ \"$1\" =~ ^[0-9][0-9][0-9]\\.[a-z][a-z] ]] ; then\n    echo \"No\"\n  else\n\
    \    echo \"Yes\"\n  fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  file_name=\"\
    $1\"\n  if [ -z \"$file_name\" ]; then\n    echo \"No file specified. Exiting...\"\
    \n    return 1\n  fi\n  if [[ $file_name =~ ^[0-9]+$ ]]; then\n    echo \"Invalid\
    \ file name. Exiting...\"\n    return 1\n  fi\n  if [[ ! $file_name =~ '^[[:alpha:]]*\\\
    .[[:alpha:]]*' ]]; then\n    echo \"Invalid file name. Exiting...\"\n    return\
    \ 1\n  fi\n  if [[ ! $file_name =~ '^[[:alpha:]]*\\.[[:alpha:]]*\\.[[:alpha:]]*$'\
    \ ]]; then\n    echo \"Invalid file name. Exiting...\"\n    return 1\n  fi\n \
    \ if [[ \"$file_name\" =~ \\.* ]]; then\n    echo \"Invalid file name. Exiting...\"\
    \n    return 1\n  fi\n  if [[ -e $file_name ]]; then\n    echo \"File $file_name\
    \ exists. Exiting...\"\n    return 0\n  fi\n  echo \"File $file_name does not\
    \ exist. Exiting...\"\n  return 1\n}\n\ncandidate() {\n    file_name_check \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\"\
    \ ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"\
    s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local string=$1\n\
    \  local count=0\n  local dot\n  local length\n  local start\n  length=${#string}\n\
    \  while [ $count -lt 3 ]; do\n    if [[ $string =~ ^[0-9]$ ]]; then\n      count=$((\
    \ count+1 ))\n    else\n      echo \"$string is not a valid file name.\"\n   \
    \   return 1\n    fi\n    string=${string:0:$(( length -1 ))}\n  done\n  string=${string:0:1}\n\
    \  dot=${string:1}\n  start=0\n  while [[ $string =~ (^[a-zA-Z]$|^[a-zA-Z][a-zA-Z]$|^[a-zA-Z][a-zA-Z][a-zA-Z]$)\
    \ ]]; do\n    start=$(( start + 1 ))\n    string=${string:$start:1}\n  done\n\
    \  if [[ $string =~ ^[a-zA-Z][a-zA-Z]$]]; then \n    if [[ $string =~ $dot ]];\
    \ then\n      echo \"$string is a valid file name.\"\n      return 0\n    else\n\
    \      echo \"$string is not a valid file name.\"\n      return 1\n    fi\n  else\n\
    \    echo \"$string is not a valid file name.\"\n    return 1\n  fi\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpj4rfbztw.sh: line 41: syntax error in conditional expression:
    unexpected token `;''\n/tmp/tmpj4rfbztw.sh: line 41: syntax error near `;''\n/tmp/tmpj4rfbztw.sh:
    line 41: `  if [[ $string =~ ^[a-zA-Z][a-zA-Z]$]]; then ''\n"'
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    test\
    \ $(expr length \"$1\" > 3 || expr \"$1\" \".\" != \"\" || grep -P '^[a-z][a-z0-9]+'\
    \ <<< \"$(echo $1 | cut -d. -f1)\" ; echo $?) == \"1\"\n}\n\ncandidate() {\n \
    \   file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    file_name=\"\
    $1\"\n    echo $file_name\n    IFS=. read -r file_part < <(echo $file_name)\n\
    \    echo $file_part\n    if [[ \"$file_part\" =~ ^[0-9]{3}$ ]]\n    then\n  \
    \      echo $file_name_check \"No\"\n    else\n        if [[ ! \"$file_part\"\
    \ =~ ^[a-zA-z]{2}\\.$ ]]\n        then\n            echo $file_name_check \"No\"\
    \n        else\n            if [[ ! \"$file_part\" =~ ^[a-zA-z]{2}\\..* ]]\n \
    \           then\n                echo $file_name_check \"Yes\"\n            else\n\
    \                if [[ \"$file_part\" =~ ^[a-zA-z]{2}\\..*$ ]]\n             \
    \   then\n                    echo $file_name_check \"Yes\"\n                else\n\
    \                    echo $file_name_check \"No\"\n                fi\n      \
    \      fi\n        fi\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ filename=\"$1\"\n    if [[ ${filename: -4} != '.txt' ]] || [[ ${filename: -4}\
    \ != '.exe' ]] || [[ ${filename: -4} != '.dll' ]]; then\n        echo \"No\"\n\
    \    else\n        filename=${filename: -4}\n        if [[ -z $filename ]] ||\
    \ [[ $filename == 0 ]]; then\n            echo \"No\"\n        elif [[ ${filename:\
    \ 0:1} != 'a' ]] || [[ ${filename: 0:1} != 'b' ]] || [[ ${filename: 0:1} != 'c'\
    \ ]] || [[ ${filename: 0:1} != 'd' ]] || [[ ${filename: 0:1} != 'e' ]] || [[ ${filename:\
    \ 0:1} != 'f' ]] || [[ ${filename: 0:1} != 'g' ]] || [[ ${filename: 0:1} != 'h'\
    \ ]] || [[ ${filename: 0:1} != 'i' ]] || [[ ${filename: 0:1} != 'j' ]] || [[ ${filename:\
    \ 0:1} != 'k' ]] || [[ ${filename: 0:1} != 'l' ]] || [[ ${filename: 0:1} != 'm'\
    \ ]] || [[ ${filename: 0:1} != 'n' ]] || [[ ${filename: 0:1} != 'o' ]] || [[ ${filename:\
    \ 0:1} != 'p' ]] || [[ ${filename: 0:1} != 'q' ]] || [[ ${filename: 0:1} != 'r'\
    \ ]] || [[ ${filename: 0:1} != 's' ]] || [[ ${filename: 0:1} != 't' ]] || [[ ${filename:\
    \ 0:1} != 'u' ]] || [[ ${filename: 0:1} != 'v' ]] || [[ ${filename: 0:1} != 'w'\
    \ ]] || [[ ${filename: 0:1} != 'x' ]] || [[ ${filename: 0:1} != 'y' ]] || [[ ${filename:\
    \ 0:1} != 'z' ]]; then\n            echo \"No\"\n        else\n            echo\
    \ \"Yes\"\n        fi\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n   echo \"\
    $1\" | awk -F. '{\n      if($NF>3) return \"No\"\n      if($NF==3&&!($1~/^[0-9]$/))\
    \ return \"No\"\n      if($NF==3&&($1~/^[0-9]$/)) return \"No\"\n      if($NF==3&&!($1~/^[0-9]$/))\
    \ return \"No\"\n      if($NF==3&&($1~/^[0-9]$/)) return \"No\"\n      if($NF==3&&!($1~/^[0-9]$/))\
    \ return \"No\"\n      if($NF==3&&($1~/^[0-9]$/)) return \"No\"\n      if($NF==3&&!($1~/^[0-9]$/))\
    \ return \"No\"\n      if($NF==3&&($1~/^[0-9]$/)) return \"No\"\n      if($NF==3&&!($1~/^[0-9]$/))\
    \ return \"No\"\n      if($NF==3&&($1~/^[0-9]$/)) return \"No\"\n      if($NF==3&&!($1~/^[0-9]$/))\
    \ return \"No\"\n      if($NF==3&&($1~/^[0-9]$/)) return \"No\"\n      if($NF==3&&!($1~/^[0-9]$/))\
    \ return \"No\"\n      if($NF==3&&($1~/^[0-9]$/)) return \"No\"\n      if($NF==3&&!($1~/^[0-9]$/))\
    \ return \"No\"\n      if($NF==3&&($1~/^[0-9]$/)) return \"No\"\n      if($NF==3&&!($1~/^[0-9]$/))\
    \ return \"No\"\n      if($NF==3&&($1~/^[0-9]$/)) return \"No\"\n      if($NF==3&&!($1~/^[0-9]$/))\
    \ return \"No\"\n      if($NF==3&&($1~/^[0-9]$/)) return \"No\"\n      if($NF==3&&!($1~/^[0-9]$/))\
    \ return \"No\"\n      if($NF==3&&($1~/^[0-9]$/)) return \"No\"\n      if($NF==3&&!($1~/^[0-9]$/))\
    \ return \"No\"\n      if($NF==3&&($1~/^[0-9]$/)) return \"No\"\n      if($NF==3&&!($1~/^[0-9]$/))\
    \ return \"No\"\n      if(\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n   \
    \ [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpihvtsmzm.sh: line 19: unexpected EOF while looking for matching
    `''''\n/tmp/tmpihvtsmzm.sh: line 84: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local file_name\
    \ num_digits dot dot1 dot2 dot dot3\n  file_name=$1\n  num_digits=$(echo \"${file_name}\"\
    \ | sed 's/^.\\([0-9][0-9]*\\)\\(\\.\\)/\\1/')\n  dot=$(echo \"${file_name}\"\
    \ | sed 's/^.\\([0-9][0-9]*\\)\\(\\.\\)/\\1/')\n  if [[ ${num_digits} = 0 ]];\
    \ then\n    echo \"No\"\n    return 0\n  fi\n  if [[ \"${file_name}\" =~ ^[0-9]+$\
    \ ]]; then\n    echo \"No\"\n    return 0\n  fi\n  if [[ ${file_name} =~ ^[0-9]\\\
    .$ ]]; then\n    dot1=$(echo \"${file_name}\" | sed 's/^[0-9]\\.\\([0-9][0-9]*\\\
    )\\(\\.\\)/\\1/')\n    if [[ \"${dot1}\" =~ ^[a-z]$ ]]; then\n      echo \"Yes\"\
    \n      return 0\n    else\n      echo \"No\"\n      return 0\n    fi\n  fi\n\
    \  if [[ \"${dot}\" =~ ^[a-z]$ ]]; then\n    dot2=$(echo \"${file_name}\" | sed\
    \ 's/^[0-9]\\.\\([0-9][0-9]*\\)\\(\\.\\)/\\1/')\n    if [[ \"${dot2}\" =~ ^[a-z]$\
    \ ]]; then\n      echo \"Yes\"\n      return 0\n    else\n      echo \"No\"\n\
    \      return 0\n    fi\n  fi\n  if [[ \"${dot}\" =~ ^[a-z]$ ]]; then\n    dot3=$(echo\
    \ \"${file_name}\" | sed 's/^[0-9]\\.\\([0-9][0-9]*\\)\\(\\.\\)/\\1/')\n    if\
    \ [[ \"${dot3}\" =~ ^[a-z]$ ]]; then\n      echo \"Yes\"\n      return 0\n   \
    \ else\n      echo \"No\"\n      return 0\n    fi\n  fi\n  echo \"No\"\n  return\
    \ 0\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  FILENAME=${1:-}\n\
    \  (( ${#FILENAME} > 3 )) || echo \"No\" && return 1\n  [[ ${FILENAME:0:1} ==\
    \ [0-9] ]] || echo \"No\" && return 1\n  [[ -z ${FILENAME%.*} ]] || echo \"No\"\
    \ && return 1\n  [[ \"${FILENAME%%\\.*}\" =~ [a-z] ]] || echo \"No\" && return\
    \ 1\n  [[ \"${FILENAME%%\\.*}\" =~ [A-Z] ]] || echo \"No\" && return 1\n  [[ \"\
    ${FILENAME%%\\.*}\" =~ ([[:digit:]]{1,3}) ]] || echo \"No\" && return 1\n  return\
    \ 0\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  [[ \"$1\"\
    \ =~ ^[0-9]*[1-9][0-9]*\\.[txt|exe|dll]$ ]] && [[ $1 =~ ^[a-zA-Z]$ ]] || return\
    \ 1\n  [[ \"$1\" =~ ^[0-9]*[1-9][0-9]*$ ]] && [[ $1 =~ ^[a-zA-Z0-9]$ ]] || return\
    \ 1\n  [[ \"$1\" =~ ^[a-zA-Z0-9]*$ ]] || return 1\n  [[ -f \"$1\" ]] || return\
    \ 1\n  return 0\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ file_name=\"$1\"\n    local file_name_length=${#file_name}\n    local file_name_valid=No\n\
    \    local file_name_valid_string=\n\n    local file_name_dot=No\n    local file_name_dot_length=${#file_name_dot}\n\
    \    local file_name_dot_valid=No\n\n    local file_name_substring_length=${#file_name_substring_prefix}\n\
    \    local file_name_substring_valid=No\n\n    if [ ${file_name_length} -gt 3\
    \ ] ; then\n        file_name_valid=No\n    fi\n\n    if [ \"${file_name:0:1}\"\
    \ != \"$\" -o \"${file_name:0:1}\" != \"~\" -o \"${file_name:0:1}\" != \"/\" -o\
    \ \"${file_name:0:1}\" != \"\\\\\" ] ; then\n        file_name_valid=No\n    fi\n\
    \n    if [ $(( ${#file_name} % 3 )) -gt 0 ] ; then\n        file_name_valid=No\n\
    \    fi\n\n    if [ \"${file_name:$(( ${#file_name} - 1 ))}\" == \".\" -o \"${file_name:$((\
    \ ${#file_name} - 1 ))}\" == \"\" ] ; then\n        file_name_dot=No\n    fi\n\
    \n    if [ \"${file_name_dot}\" == \"Yes\" ] ; then\n        file_name_dot_valid=No\n\
    \    fi\n\n    if [ \"${file_name_substring_prefix:$(( ${#file_name_substring_prefix}\
    \ - 1 ))}\" == \".\" -o \"${file_name_substring_prefix:$(( ${#file_name_substring_prefix}\
    \ - 1 ))}\" == \"\" ] ; then\n        file_name_substring_valid=No\n    fi\n\n\
    \    if [ \"${file_name_substring_valid}\" == \"Yes\" ] ; then\n        if [ \"\
    ${file_name_substring_prefix}\" == \"exe\" ] || [ \"${file_name_substring_prefix}\"\
    \ == \"dll\" ] ; then\n            file_name_substring_length=${#file_name_substring_prefix}\n\
    \        fi\n\n        if [ \"${file_name_dot_valid}\" == \"Yes\" ] ; then\n \
    \           if [ \"${file_name_dot_length}\" == \"${#file_name_dot}\" ] ; then\n\
    \                file_name_dot_valid=No\n            fi\n\n            if [ \"\
    ${file_name_dot_length}\" -gt 2 ] ; then\n                file_name_valid=No\n\
    \            fi\n        fi\n    fi\n\n    if [ \"${file_name_valid}\" == \"Yes\"\
    \ ] ; then\n        if [ \"${file_name_length}\" -eq 1 ] ; then\n            file_name_valid=No\n\
    \        fi\n    fi\n\n    if [ \"${file_name_valid}\" == \"Yes\" ] ; then\n}\n\
    \ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmp4opb3x8e.sh: line 78: syntax error near unexpected token `}''\n/tmp/tmp4opb3x8e.sh:
    line 78: `}''\n"'
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local\
    \ file_name=\"${1}\"\n    if [[ ${file_name: -1} != . ]]; then\n        echo \"\
    No\"\n    elif [[ ${file_name: -2} != .* ]]; then\n        echo \"No\"\n    elif\
    \ [[ ${file_name: -3} != [^0-9]* ]]; then\n        echo \"No\"\n    elif [[ ${file_name:\
    \ -2} != [a-z]* ]]; then\n        echo \"No\"\n    elif [[ ${file_name: -2} !=\
    \ [A-Z]* ]]; then\n        echo \"No\"\n    else\n        echo \"Yes\"\n    fi\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"\
    1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local FILE_NAME=$1\n\
    \  local NO=1\n  local dot=0\n  local name=${FILE_NAME:0:9}\n  local name_len=${#name}\n\
    \  while [ $name_len -gt 3 ]; do\n    name=${name:0:name_len-1}\n    name_len=${#name}\n\
    \  done\n  local name_substr=${name:0:1}\n  local name_substr_len=${#name_substr}\n\
    \  while [ ${name_substr_len} -gt 1 ]; do\n    name_substr=${name_substr:0:name_substr_len-1}\n\
    \    name_substr_len=${#name_substr}\n  done\n  local name_substr_valid=$(echo\
    \ $name_substr | grep -E \"^[[:alpha:]]*\\.[[:alpha:]]*$\")\n  if [[ $name_substr_valid\
    \ == 0 ]]; then\n    echo \"No\"\n    NO=0\n  elif [[ $name_substr_valid == 1\
    \ ]]; then\n    echo \"Yes\"\n  else\n    echo \"No\"\n    NO=0\n  fi\n  local\
    \ ext=${FILE_NAME:${name_len}:4}\n  ext=${ext:1}\n  local exts=(\"exe\" \"dll\"\
    \ \"txt\")\n  if [ ${#exts[@]} -ne ${#ext} ]; then\n    echo \"No\"\n    NO=0\n\
    \  else\n    echo \"Yes\"\n  fi\n  echo \"$NO\"\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078303
