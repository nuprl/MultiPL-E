language: sh
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n=\"${1}\"\n    local arr=()\n    local i=0\n    # Base case\n    if\
    \ [[ \"${n}\" -eq 1 ]]; then\n        arr+=(\"\\\"1\\\"\")\n        return ${arr[*]}\n\
    \    fi\n    # Iterate through every other number\n    for (( i=2; i<=${n}; i++\
    \ )); do\n        # Calculate current tribonacci number\n        local temp=$(expr\
    \ \"${i}\" - \"${i}\" + \"${i}\" + \"${i}\")\n        # Append current tribonacci\
    \ number to array for return\n        arr+=(\"\\\"${i}\\\"\" \"${temp}\")\n  \
    \  done\n    # Return array with tribonacci sequence as values\n    return ${arr[*]}\n\
    }\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpb282qudw.sh: line 37: return: "2": numeric argument required

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  echo \"$1\" | awk '{\n    a[$1*2]=a[$1*2-1]\n    a[$1*2+1]=a[$1*2-2]\n    b[$1]=$1\n\
    \  }\n  END {\n    for (i in a) {\n      printf \"%s,%s\", b[i], a[i]\n    }\n\
    \  }'\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058646
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  local a b\n  if [ \"$1\" -lt 1 ] || [ \"$1\" -gt \"1\" ]; then\n    echo 'Invalid\
    \ input!'\n    exit 1\n  fi\n  a=$1\n  b=$((a / 2))\n  if [ \"$a\" -eq \"$b\"\
    \ ]; then\n    echo '\"'$a'\"' \n  else\n    echo '\"'$a'\" + \"'$b'\"' \n  fi\
    \ \n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  tri-number=$(expr $1 + 1 \\* 2 \\* 3 + 1)\n  tri-numbers=()\n  while [[ $(expr\
    \ $n \\% 2) -eq 0 ]]; do\n    tri-numbers=$(expr ${tri-numbers} $(( $tri-number\
    \ + 1 )) \\* $(( $tri-number + 2 )) \\* $(( $tri-number + 3 )))\n    tri-number=$(expr\
    \ $tri-number + 1 \\* 2 \\* 3 + 1)\n  done\n  echo ${tri-numbers}\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp5ccgps6k.sh: line 21: tri-number=10: command not found

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \tif [ $# -eq 0 ]\n\tthen\n\t\techo \"please input a positive integer\"\n\t\t\
    return 1\n\tfi\n\tlocal n=$1\n\tlocal a='1'\n\tlocal b='3'\n\tlocal c='5'\n\t\
    local sum=$(echo $a $b$c | cut -d' ' -f1)\n\tlocal a_b=$(echo $a | cut -d' ' -f2)\n\
    \tlocal a_c=$(echo $a | cut -d' ' -f3)\n\tlocal b_c=$(echo $b | cut -d' ' -f2)\n\
    \tlocal sum=$(echo $sum $a_b$a_c $b_c | cut -d' ' -f1)\n\tlocal sum=$(echo $sum\
    \ $a_c $b_c $b_c | cut -d' ' -f1)\n\tlocal sum=$(echo $sum $a_c $b_c $b_c | cut\
    \ -d' ' -f1)\n\tlocal sum=$(echo $sum $a_c $b_c $b_c | cut -d' ' -f1)\n\tlocal\
    \ sum=$(echo $sum $a_c $b_c $b_c | cut -d' ' -f1)\n\tlocal sum=$(echo $sum $a_c\
    \ $b_c $b_c | cut -d' ' -f1)\n\tlocal sum=$(echo $sum $a_c $b_c $b_c | cut -d'\
    \ ' -f1)\n\tlocal sum=$(echo $sum $a_c $b_c $b_c | cut -d' ' -f1)\n\tlocal sum=$(echo\
    \ $sum $a_c $b_c $b_c | cut -d' ' -f1)\n\tlocal sum=$(echo $sum $a_c $b_c $b_c\
    \ | cut -d' ' -f1)\n\tlocal sum=$(echo $sum $a_c $b_c $b_c | cut -d' ' -f1)\n\t\
    local sum=$(echo $sum $a_c $b_c $b_c | cut -d' ' -f1)\n\tlocal sum=$(echo $sum\
    \ $a_c $b_c $b_c | cut -d' ' -f1)\n\tlocal sum=$(echo $sum $a_c $b_c $b_c | cut\
    \ -d' ' -f1)\n\tlocal sum=$(echo $sum $a_c $b_c $b_c | cut -d' ' -f1)\n\tlocal\
    \ sum=$(echo $sum $a_c $b_c $b_c | cut -d' ' -f1)\n\tlocal sum=$(echo $sum $a_c\
    \ $b_c $b_c | cut -d' ' -f1)\n\tlocal sum=$(echo $sum $\n}\n\ncandidate() {\n\
    \    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3\
    \ 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"\
    5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n\
    \    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\"\
    ) = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24\
    \ 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8\
    \ 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3k9ku2ui.sh: line 51: unexpected EOF while looking for matching
    `)''

    /tmp/tmp3k9ku2ui.sh: line 73: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058646
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local i\n    local a\n    local b\n    local c\n    local n\n    local str\n\
    \n    echo \"${1:-${#1}} is not an integer\"\n}\n\ncandidate() {\n    tri \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[\
    \ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8\
    \ 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    [[ -z \"$1\" ]] && return 1\n    local n=$1\n    local a=($(eval echo \"\
    {$(seq 1 1 $((2*n-1))),\\\"\\\"}\"))\n    local sum=${a[*]}\n    local i\n   \
    \ local j\n    for i in $(eval echo \"{$(seq 0 $((n-2))),\\\"\\\"}\"); do\n  \
    \      j=$((i+1))\n        sum=$(eval echo \"${sum},$(eval echo \"${a[i+1]},${a[j]},${a[i]}\"\
    )\")\n    done\n    eval \"echo \\\"${sum}\\\"\"\n}\n\ncandidate() {\n    tri\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n\
    \    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"\
    1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1ksauzj8.sh: line 24: 2: command not found

    /tmp/tmp1ksauzj8.sh: line 25: 3: command not found

    /tmp/tmp1ksauzj8.sh: line 26: 4: command not found

    /tmp/tmp1ksauzj8.sh: line 27: 5,}: command not found

    /tmp/tmp1ksauzj8.sh: line 28: 1,}: command not found

    /tmp/tmp1ksauzj8.sh: line 28: {0: syntax error: operand expected (error token
    is "{0")

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n s1 s2 i tmp result\n    n=$1\n    echo -ne \"[$(echo $((n+1)) | tr\
    \ ' ' ',')\"\n    s1=$((n+1))\n    s2=$((n+1))\n    for((i=1; i<=$((n-1)); ++i));\n\
    \    do\n        tmp=$((s2+s1))\n        s2=$s1\n        s1=$tmp\n        echo\
    \ -ne \"$s2,$s1\"\n    done\n    echo -ne \"$s2,$s1\"\n}\n\ncandidate() {\n  \
    \  tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2\
    \ 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"\
    5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n\
    \    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\"\
    ) = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24\
    \ 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8\
    \ 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n=$1\n    local -i result=()\n\n    local i=1 j=0 k=0\n\n    result[k]=${IFS}'1'\n\
    \    k=$((k + 1))\n    result[$((j+i))]=${IFS}'1'\n    i=$((i + 1))\n    j=$((j\
    \ + 1))\n    k=$((k + 1))\n\n    while [ $i -lt $(( 1 + n )) ]\n    do\n     \
    \   result[k]=${IFS}'${result[k]}${result[k]}'\n        k=$((k + 1))\n       \
    \ result[$((j+i))]=${IFS}'${result[$((j+i))]}'\n        i=$((i + 1))\n       \
    \ j=$((j + 1))\n        k=$((k + 1))\n    done\n    result[k]=${IFS}'${result[k]}${result[k]}'\n\
    \    k=$((k + 1))\n    result[$((j+i))]=${IFS}'${result[$((j+i))]}'\n\n    echo\
    \ \"${result[@]}\"\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "/tmp/tmpdvoc_sme.sh: line 35: \n${result[k]}${result[k]}: syntax error:\
    \ operand expected (error token is \"${result[k]}${result[k]}\")\n"
  stdout: ''
  timestamp: 1660058647
- exit_code: -1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    declare -i i j k n r\n    read n && [[ $n =~ ^[0-9]+$ ]] || return 1\n  \
    \  r=n\n    i=1\n    j=0\n    k=0\n    while [[ $i -le $((n+1)) ]]; do\n     \
    \   j=$((i + j))\n        k=$((i + k + j))\n        i=$((i + 1))\n        printf\
    \ \"%s,\" $k\n    done\n    echo\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate\
    \ \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n\
    \    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\")\
    \ = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24\
    \ 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=15 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=5 encoding='utf-8'>
  timestamp: 1660058652
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  echo \"$(seq 0 $(($1 + 2))) \\\n       $(seq 0 $(($1 + 2 + 1))) \\\n      \
    \ $(seq $(($1 - 2)) $(($1 + 2)))\" |\n    python -c 'import sys;print [ float(s)\
    \ for s in sys.stdin.read().split() \\\n                      if not s.isspace()\
    \ ]' \n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  local number=$1\n  local seq\n  local i\n  seq=$(for ((i=1;i<=$number;i++))\
    \ ; do echo $((i*2)) ; done)\n  echo \"$seq\"\n}\n\ncandidate() {\n    tri \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n\
    \    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"\
    1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  if [[ ! \"$1\" =~ ^[0-9]+$ ]]; then\n    echo \"Invalid input argument.\"\n\
    \    return 0\n  fi\n  if [[ $(( ${1:0:1} % 2 )) -ne 0 ]]; then\n    echo \"Only\
    \ positive odd numbers are allowed.\"\n    return 0\n  fi\n  if [[ $1 -le 5 ]];\
    \ then\n    echo \"Invalid input argument.\"\n    return 0\n  fi\n  local n=$1\n\
    \  local a=$(($n-1))\n  local b=$(($n-$a-1))\n  local c=$((1+$n/2))\n  local d=$((1+$n/$(b-1)))\n\
    \  echo \"\\\"$a\\\" \\\"$b\\\" \\\"$c\\\" \\\"$d\\\"\"\n}\n\ncandidate() {\n\
    \    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3\
    \ 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"\
    5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n\
    \    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\"\
    ) = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24\
    \ 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8\
    \ 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: -1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n cur\n    read -r n\n    for ((i = 0; i < n; i++)); do\n        cur=$(tri\
    \ 2 $((n-i+1)))\n        printf '\"%s\"' \"${cur}\"\n    done\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=21 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=6 encoding='utf-8'>
  timestamp: 1660058652
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  n=$1\n  if [ $n -eq 0 ]; then\n    echo $1\n  else\n    arr=()\n    arr+=($(tri\
    \ $((n-2))+$(tri $((n-1))+$(tri $((n+1)))))\n    arr+=($(tri $((n-2))+$(tri $((n-1))+$(tri\
    \ $((n+1)))))\n    arr+=($(tri $((n-2))+$(tri $((n-1))+$(tri $((n+1)))))\n   \
    \ arr+=($(tri $((n-2))+$(tri $((n-1))+$(tri $((n+1)))))\n    arr+=($(tri $((n-2))+$(tri\
    \ $((n-1))+$(tri $((n+1)))))\n    arr+=($(tri $((n-2))+$(tri $((n-1))+$(tri $((n+1)))))\n\
    \    arr+=($(tri $((n-2))+$(tri $((n-1))+$(tri $((n+1)))))\n    echo ${arr[*]}\n\
    \  fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpei68ip3k.sh: line 27: syntax error near unexpected token `(''

    /tmp/tmpei68ip3k.sh: line 27: `    arr+=($(tri $((n-2))+$(tri $((n-1))+$(tri $((n+1)))))''

    /tmp/tmpei68ip3k.sh: line 29: syntax error near unexpected token `(''

    /tmp/tmpei68ip3k.sh: line 29: `    arr+=($(tri $((n-2))+$(tri $((n-1))+$(tri $((n+1)))))''

    /tmp/tmpei68ip3k.sh: line 31: syntax error near unexpected token `(''

    /tmp/tmpei68ip3k.sh: line 31: `    arr+=($(tri $((n-2))+$(tri $((n-1))+$(tri $((n+1)))))''

    /tmp/tmpei68ip3k.sh: line 37: syntax error near unexpected token `(''

    /tmp/tmpei68ip3k.sh: line 37: `candidate() {''

    /tmp/tmpei68ip3k.sh: line 38: tri: command not found

    /tmp/tmpei68ip3k.sh: line 39: syntax error near unexpected token `}''

    /tmp/tmpei68ip3k.sh: line 39: `}''

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: -1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \tlet \"sum=$1 + $2 / 2\";\n\tif [ $1 -le 1 ] ; then echo $1; fi;\n\tif [ $1 -eq\
    \ 2 ] ; then echo $1; fi;\n\tif [ $1 -ge 2 ] ; then echo $1; fi;\n\tlet \"sum=$1\
    \ + $sum\";\n\techo $(tri $sum);\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate\
    \ \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n\
    \    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\")\
    \ = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24\
    \ 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=28 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=23 encoding='utf-8'>
  timestamp: 1660058652
- exit_code: -1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local -i n=$1 sum=0 i=1\n    while (( $# > 0 )); do\n        (( i++ ))\n\
    \        sum=$(( sum + n ))\n        (( n-- ))\n    done\n    echo $(( sum / 2\
    \ ))\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=37 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=35 encoding='utf-8'>
  timestamp: 1660058652
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \techo \"$1\"\n\tpython3 -c \"\n\tfrom math import sqrt, ceil\n\ta = int(sqrt($1))\n\
    \tb = $1\n\tl = []\n\tfor i in range(0, ceil(sqrt(b))): \n\t\tl.append(b)\n\t\t\
    b = a + b\n\t\tif b % 2 == 1: b = b + 1\n\t\tif b % 2 == 0: b = b + 1\n\t\ta +=\
    \ 1\n\tl.append(b)\n\tprint(l)\n\t\" \n}\n\ncandidate() {\n    tri \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate\
    \ \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n\
    \    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\")\
    \ = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24\
    \ 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: "  File \"<string>\", line 2\n    from math import sqrt, ceil\n    ^\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  echo \"$1\" | awk '{print $1\"1\"; for(i=2; i<$1; i++)\n                print\
    \ $1\"2\"; for(i=2; i<$1; i+=2)\n                print $1\"3\"; for(i=2; i<$1;\
    \ i+=3) {print $1$i}}'\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  local n=\"${1:?missing $1 is not a number}\"\n  local result\n  result=()\n\
    \  if [ -n \"$n\" ]; then\n    if [[ $n -eq 0 ]]; then\n      result=('\"0\"')\n\
    \    elif [[ $n -eq 1 ]]; then\n      result=('\"1\"')\n    elif [[ $n -ge 2 ]];\
    \ then\n      if (( n | bc ) == 0)\n      then\n        result=(\"$n\")\n    \
    \  else\n        result=()\n        while [[ ${#result[@]} -lt $n + 1 ]]; do\n\
    \          local next=$(( ${#result[@]} - 1))\n          result[$next]=\"${result[$next]}\"\
    '\"'\"'\"'\"$(tri \"${n-1:-1}\")\"'\"'\"'\n        done\n        result[$n]=\"\
    ${result[$n]}\"'\"'\"'\"'\"$(tri \"$((n - 2))\")\"'\"'\"'\n      fi\n    fi\n\
    \  fi\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"\
    4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n   \
    \ [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"\
    1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n\
    \    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpu1fr_7tj.sh: line 30: syntax error near unexpected token `==''

    /tmp/tmpu1fr_7tj.sh: line 30: `      if (( n | bc ) == 0)''

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    [[ -z $1 ]] && echo 'usage: $(tri \"n\") where n is an int' && exit 1\n \
    \   [[ $1 =~ ^[0-9]+$ ]] || echo 'error: integer expected' && exit 1\n    local\
    \ -i n=$1\n    local -i a=0\n    local -i b=1\n    local -i c=3\n    local -i\
    \ -i d\n    while [[ $n -gt 0 ]]; do\n        d=$(( $a + $b + $c ))\n        if\
    \ [ $n -gt 1 ]; then \n            echo \"$d\"\n        fi\n        (( n = $n\
    \ / 2 ))\n        (( a += $b ))\n        (( b += $c ))\n        (( c += d ))\n\
    \    done\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2\
    \ 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  local n=$1\n  local first\n  local rest\n  local res\n  local tmp\n  first=\"\
    3\"\n  rest=\"$(n)\"\n  while (( ${#rest} > 1 )); do\n    tmp=$(rest)\n    rest=$(echo\
    \ $rest | rev | cut -d -c 2- | rev | paste -s -d, -)\n    first=$(echo $first\
    \ | rev | cut -d -c 2- | rev | paste -s -d, -)\n    res=\"$first$tmp$rest\"\n\
    \  done\n  echo $res\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpyenvjb84.sh: line 27: n: command not found

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  (( $# <= 0 )) && echo \"Usage: $(basename $0) integer\" >&2 && return 1\n \
    \ local n=$1\n  if (( $(( n | 0xFFFF )) == 0 )) ; then\n    echo \"\"\n    return\
    \ $n\n  fi\n  local a=$(( n | 0xFFFF ))\n  local b=$(( n | 0xFFFF ))\n  local\
    \ c=$(( n | 0xFFFF ))\n  if (( $(( $# % 2 )) == 0 )); then\n    local c=$(( c\
    \ + 1 ))\n  fi\n  echo $a\n  echo $(echo $a | bc) \n  while (( c > 0 )) ; do\n\
    \    local d=$(( c + 1 ))\n    local e=$(( d + 1 ))\n    local f=$(( c + d ))\n\
    \    echo $f\n    echo $(echo $f | bc) \n    (( c = f ))\n    echo $e\n    echo\
    \ $(echo $e | bc) \n    (( c = f ))\n    echo $d\n    echo $(echo $d | bc) \n\
    \    (( c = f ))\n  done\n  echo $(echo $a | bc)\n  echo $(echo $a | bc)\n  echo\
    \ $c\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    [ $1 -eq 0 ] && return \"0\";\n    [ $1 -eq 1 ] && return \"1\";\n    [ $1\
    \ -eq 2 ] && return \"2\";\n\n    # This is where we have some problems. Our problem\
    \ is that the next line\n    # is \"return tri(n - 1) + tri(n - 2) + tri(n + 1)\"\
    \ which does not make much sense. \n    [ $1 -eq 3 ] && return \"3\";\n    [ $1\
    \ -eq 4 ] && return \"4\";\n    [ $1 -eq 5 ] && return \"5\";\n\n    # Our problem\
    \ is that we need to loop through our list until we find what we need. \n    #\
    \ This is because we do not know how big the list will be. \n    for n in $(seq\
    \ 2 $1 )\n    do\n        [ $n -eq 0 ] && return \"0\";\n        [ $n -eq 1 ]\
    \ && return \"1\";\n        [ $n -eq 2 ] && return \"2\";\n        [ $n -eq 3\
    \ ] && return \"3\";\n        [ $n -eq 4 ] && return \"4\";\n        [ $n -eq\
    \ 5 ] && return \"5\";\n        [ $n -eq 6 ] && return \"6\";\n    done\n}\n\n\
    candidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    if [ $# -eq 0 ]; then\n        echo \"error: invalid number of arguments\"\
    \n        exit 1\n    fi\n    # Validate input\n    if ! [ $1 -ge 1 ] || ! [ $1\
    \ -le 2147483648 ]; then\n        echo \"error: invalid input, must be in range\
    \ [1..2147483647]\"\n        exit 1\n    fi\n    # Initialize variables\n    declare\
    \ -a res=()\n    declare -i n=$1\n    # Do calculation\n    if [ \"$(expr n %\
    \ 2)\" -eq 0 ]; then\n        tri_even\n    else\n        tri_odd\n    fi\n  \
    \  # Print output\n    for ((i=0; i<${#res[*]}; ++i)); do\n        echo \"${res[i]}\"\
    \n    done\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2\
    \ 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'expr: non-integer argument

    /tmp/tmpn022xjho.sh: line 34: [: : integer expression expected

    /tmp/tmpn022xjho.sh: line 37: tri_odd: command not found

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n=$1\n    if [ ${n} -eq 0 ]\n    then\n        echo $1\n    else\n\
    \        local fib0=$(( (${n}**3 + ${n}**2 - ${n}**1 + ${n}**0) ))\n        local\
    \ fib1=$(( (${n}**3 - ${n}**1 - ${n}**2 + ${n}**0) ))\n        local fib2=$((\
    \ (${n}**3 + ${n}**2 - ${n}**1) ))\n        echo $fib0 $fib1 $fib2\n    fi\n}\n\
    \ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: -1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \ local n=$1\n echo \"\\\"$((n + 1))\\\"\"\n local n1 n2 n3 n4 \n if [[ $n -lt\
    \ 0 ]]; then\n  echo \"0\"\n elif [[ $n == 2 ]]; then\n  echo \"\\\"1\\\"\"\n\
    \ elif [[ $n == 0 ]]; then\n  echo \"\\\"0\\\"\"\n else\n  n1=$(tri $((n - 1)))\n\
    \  n2=$(tri $((n - 2)))\n  n3=$(tri $((n - 3)))\n  n4=$(tri $((n + 3)))\n  echo\
    \ \"$n1 $n2 $n3 $n4\"\n fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"\
    4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n   \
    \ [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"\
    1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n\
    \    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=50 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=46 encoding='utf-8'>
  timestamp: 1660058652
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  if [ $# -lt 1 ]\n    then echo \"Usage: $(basename $0) [integer]\"\n    exit\n\
    \  fi\n  \n  local n=$1\n  \n  local fib0=\"${fib0#*[}\"\n  local fib1=\"${fib1#*]}\"\
    \n  \n  if [ $n -le 0 ]\n    then return 1\n  fi\n  \n  local fibs=$fib1\n  \n\
    \  local fib3\n  if [ $(( $n % 2 )) -eq 0 ]\n    then fib3=$(( fib0 + fib1 ))\n\
    \  else \n    fib3=$(( fib1 + fib0))\n  fi\n  \n  local fib4\n  if [ $(( $n %\
    \ 2 )) -eq 1 ]\n    then fib4=$(( fib1 - fib0 ))\n  else \n    fib4=$(( fib0 -\
    \ fib1 ))\n  fi\n  \n  local fib5\n  if [ $(( $n % 2 )) -eq 0 ]\n    then fib5=$((\
    \ fib3 - fib4 ))\n  else \n    fib5=$(( fib4 - fib3 ))\n  fi\n  \n  local fib6\n\
    \  if [ $(( $n % 2 )) -eq 1 ]\n    then fib6=$(( fib5 - fib5 ))\n  else \n   \
    \ fib6=$(( fib5 - fib4 ))\n  fi\n  \n  local fibs=$fib6\n  \n  local fib7\n  if\
    \ [ $(( $n % 2 )) -eq 0 ]\n    then fib7=$(( fibs + fib1 ))\n  else \n    fib7=$((\
    \ fib1 + fibs))\n  fi\n  \n  local fib8\n  if [ $(( $n % 2 )) -eq 1 ]\n    then\
    \ fib8=$(( fib7 - fib7 ))\n  else \n    fib8=$(( fib7 - fib6 ))\n  fi\n  \n  local\
    \ fib9\n  if [ $(( $n % 2 )) -eq 0 ]\n    then fib9=$(( fib8 + fib5 ))\n  else\
    \ \n    fib9=$(( fib5 + fib8 ))\n  fi\n  \n  local fib10\n  if [ $(( $n % 2 ))\
    \ -eq 1 ]\n    then fib10=$(( fib9 - fib9 ))\n  else \n    fib10=$(( fib9 - fib8\
    \ ))\n  \n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnxc7njzp.sh: line 94: syntax error near unexpected token `}''

    /tmp/tmpnxc7njzp.sh: line 94: `}''

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  echo \"$1\" | awk -F'\" \" ' '{\n    for(i=1;i<=NF;i++)\n    {\n      a[$i]=a[$i]+$i;\n\
    \      b[$i]=b[$i]+$i;\n      c[$i]=c[$i]+$i;\n    }\n  }\n  for(i=1;i<=NF;i++)\n\
    \  {\n    if ($i%2==0) {\n      printf(\"\\\"%s\\\" \",a[$i]);\n    } else {\n\
    \      printf(\"\\\"%s\\\" \",b[$i]);\n    }\n  }\n  print \"\\\"\"c[1]\"\\\"\"\
    \n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmps4em07xu.sh: line 21: unexpected EOF while looking for matching
    `''''

    /tmp/tmps4em07xu.sh: line 59: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n=$1\n    if [ $n -lt 2 ]; then\n        echo \"$n is not a valid number\"\
    \ \n        return 1\n    fi\n    if [ $(( n % 2 )) -eq 0 ]; then\n        echo\
    \ \"$n is not even!\"\n        return 1\n    fi\n    local n1=$(tri $(( n - 1\
    \ )))\n    local n2=$(tri $(( n - 2 )))\n    local n3=$(tri $(( n + 1 )))\n  \
    \  echo \"$n1 $n2 $n3\"\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: -1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  local number=$1\n  if [[ $number -eq 0 ]]; then\n    return [\"\\\"0\\\"\"\
    ]\n  elif [[ $number -eq 1 ]]; then\n    return [\"\\\"1\\\"\"]\n  fi\n  local\
    \ num1=$(tri $((number - 2)))\n  local num2=$(tri $((number - 1)))\n  local num3=$(tri\
    \ $((number + 2)))\n  printf '%s\\n' \"$num1\" \"${num3[@]}\" \"${num2[@]}\"\n\
    }\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=49 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=47 encoding='utf-8'>
  timestamp: 1660058652
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  [ $# -ne 1 ] && echo \"Invalid number of arguments\" && exit 1\n  local n=$1\n\
    \  local sum=0 \n  local i=0 \n  for i in $(seq 1 $n); do\n    (( sum += i / 2\
    \ ))\n  done\n  echo '\"${sum}\"'\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate\
    \ \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n\
    \    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\")\
    \ = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24\
    \ 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  echo \"$1\"\n  echo \"$2\"\n  echo \"$3\"\n  echo \"$4\"\n  echo \"$5\"\n \
    \ echo \"$6\"\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3\
    \ 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    let i=$1\n    echo $(( (i % 2)==0 ? $(( 1 + $i / 2 )) : ($(( 1 + $i - 1 ))\
    \ + ($(( 1 + $i - 2 )) + ($(( 1 + $i + 1 ))) ) ))\n}\n\ncandidate() {\n    tri\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n\
    \    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"\
    1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpi3gyzywo.sh: line 22: unexpected EOF while looking for matching
    `)''

    /tmp/tmpi3gyzywo.sh: line 44: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n=$1\n    local n2 n3\n    # Tribonacci sequence\n    # Tribonacci\
    \ sequence is a recursion relation in mathematics.\n    # Tribonacci sequence\
    \ is defined by the recurrence:\n    # tri(1) = 3\n    # tri(n) = 1 + n / 2, if\
    \ n is even.\n    # tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    # For example:\n    # tri(2) = 1 + (2 / 2) = 2\n    # tri(4) = 3\n    # tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    #  = 2 + 3 + 3 = 8 \n    # You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    # first n + 1 numbers\
    \ of the Tribonacci sequence.\n    # Examples:\n    # >>> $(tri \"3\")\n    #\
    \ ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n    n2=$(expr $n / 2)\n    n3=$(( ${n}\
    \ + ${n2} ))\n    echo $(expr 1 + $n3 )\n}\n\ncandidate() {\n    tri \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[\
    \ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8\
    \ 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \   local i a b\n   for (( i=${#1}; i > 1; i-- )); do\n      a=$(b=$(echo $a $b\
    \ | bc))\n      echo \"$a\"\n   done\n   echo \"$a\"\n}\n\ncandidate() {\n   \
    \ tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\"\
    \ ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\")\
    \ = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n \
    \   [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\"\
    ) = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24\
    \ 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8\
    \ 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n=$1\n    if [ $n -eq 1 ]\n    then\n        echo \"$n\"\n        return\n\
    \    fi\n    local s=$n\n    for (( i=1; i <= $((n/2)) ; i++ ))\n    do\n    \
    \    s=\"$((s+$((n/2))))\"\n    done\n    echo \"$s\"\n    \n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \t# Tribonacci sequences are defined by the recurrence:\n\t# tri(1) = 3\n\t# tri(n)\
    \ = 1 + n / 2, if n is even.\n\t# tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n\t# For example:\n\t# tri(2) = 1 + (2 / 2) = 2\n\t# tri(4)\
    \ = 3\n\t# tri(3) = tri(2) + tri(1) + tri(4)\n\t# = 2 + 3 + 3 = 8\n\t# You are\
    \ given a non-negative integer number n, you have to a return a list \n\t# of\
    \ the first n + 1 numbers of the Tribonacci sequence.\n\t# Examples:\n\t# >>>\
    \ $(tri \"3\")\n\t# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n\t\n\t# Base case: when\
    \ the number of items is 0, return an empty list\n\tif [ \"$1\" -eq 0 ]; then\n\
    \t\techo \"[]\"\n\t\treturn 0\n\tfi\n\t\n\t# Recursive case: when the number of\
    \ items is 1, just return this item\n\tif [ \"$1\" -eq 1 ]; then\n\t\techo \"\
    '$1'\"\n\t\treturn\n\tfi\n\t\n\t# Recursive case: when the number of items is\
    \ 2, return this item\n\tif [ \"$1\" -eq 2 ]; then\n\t\techo \"'$1'\"\n\t\treturn\n\
    \tfi\n\t\n\t# Recursive case: when the number of items is 3, return this item\n\
    \tif [ \"$1\" -eq 3 ]; then\n\t\techo \"'$1'\"\n\t\treturn\n\tfi\n\t\n\t# Recursive\
    \ case: when the number of items is 4, return this item\n\tif [ \"$1\" -eq 4 ];\
    \ then\n\t\techo \"'$1'\"\n\t\treturn\n\tfi\n\t\n\t# Recursive case: when the\
    \ number of items is 5, return this item\n\tif [ \"$1\" -eq 5 ]; then\n\t\techo\
    \ \"'$1'\"\n\t\treturn\n\tfi\n\t\n\t# Recursive case: when the number of items\
    \ is 6, return this item\n\tif [ \"$1\" -eq 6 ]; then\n\t\techo \"'$1'\"\n\t\t\
    return\n\tfi\n\t\n\t# Recursive case: when the number of items is 7, return this\
    \ item\n\tif [ \"$1\" -eq 7 ]; then\n\t\techo \"'$1'\"\n\t\treturn\n\tfi\n\t\n\
    \t# Recursive case: when the number of items is 8, return this item\n\tif [ \"\
    $1\" -eq 8 ]; then\n\t\techo \"'$1'\"\n\t\treturn\n\tfi\n\t\n\t# Recursive case:\
    \ when the number of items is 9, return this item\n\tif [ \"$1\" -eq 9 ]; then\n\
    \t\t\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgmjlx2u9.sh: line 93: syntax error near unexpected token `}''

    /tmp/tmpgmjlx2u9.sh: line 93: `}''

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  local n=$1\n  if [ $n -le 1 ]; then \n    echo -n \"\"\n  else\n    # First\
    \ odd number is 1.\n    echo -n \"${n}\"\n    echo -n \"${((n+1)/2)}\"\n    #\
    \ Next odd number is 3.\n    echo -n \"${((n+3)/2)}\"\n    # Next odd number is\
    \ 5.\n    echo -n \"${((n+5)/2)}\"\n    # Last odd number is 8.\n    echo -n \"\
    ${((n+8)/2)}\"\n  fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpuomygml3.sh: line 27: ${((n+1)/2)}: bad substitution

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  local number=$1\n  local list\n  list='\n  \"1\"\n  \"3\"\n  \"2\"\n  \"8\"\
    \n  '\n  for i in {0..$(($number-1))}; do\n    list=\"${list}\\n${number}+${number}-${number+1}\"\
    \n    number=$(( ${number} + ${number}-${number+1} ))\n  done\n  echo $list\n\
    }\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \tlocal n=$1\n\tlocal fib1=1\n\tlocal fib2=1\n\tlocal fib3=1\n\tlocal fib4=1\n\
    \tlocal fib5=1\n\tlocal fib6=1\n\tlocal fib7=1\n\tlocal fib8=1\n\tlocal fib9=1\n\
    \tlocal fib10=1\n\tlocal fib11=1\n\tlocal fib12=1\n\tlocal fib13=1\n\tlocal fib14=1\n\
    \tlocal fib15=1\n\tlocal fib16=1\n\tlocal fib17=1\n\tlocal fib18=1\n\tlocal fib19=1\n\
    \tlocal fib20=1\n\tlocal fib21=1\n\tlocal fib22=1\n\tlocal fib23=1\n\tlocal fib24=1\n\
    \tlocal fib25=1\n\tlocal fib26=1\n\tlocal fib27=1\n\tlocal fib28=1\n\tlocal fib29=1\n\
    \tlocal fib30=1\n\tlocal fib31=1\n\tlocal fib32=1\n\tlocal fib33=1\n\tlocal fib34=1\n\
    \tlocal fib35=1\n\tlocal fib36=1\n\tlocal fib37=1\n\tlocal fib38=1\n\tlocal fib39=1\n\
    \tlocal fib40=1\n\tlocal fib41=1\n\tlocal fib42=1\n\tlocal fib43=1\n\tlocal fib44=1\n\
    \tlocal fib45=1\n\tlocal fib46=1\n\tlocal fib47=1\n\tlocal fib48=1\n\tlocal fib49=1\n\
    \tlocal fib50=1\n\tlocal fib51=1\n\tlocal fib52=1\n\tlocal fib53=1\n\tlocal fib54=1\n\
    \tlocal fib55=1\n\tlocal fib56=1\n\tlocal fib57=1\n\tlocal fib58=1\n\tlocal fib59=1\n\
    \tlocal fib60=1\n\tlocal fib61=1\n\tlocal fib62=1\n\tlocal fib63=1\n\tlocal fib64=1\n\
    \tlocal fib65=1\n\tlocal fib66=1\n\tlocal fib67=1\n\tlocal fib68=1\n\tlocal fib69=1\n\
    \tlocal fib70=1\n\tlocal fib71=1\n\tlocal fib72=1\n\tlocal fib73=1\n\tlocal fib74=1\n\
    \tlocal fib75=1\n\tlocal fib76=1\n\tlocal fib77=1\n\tlocal fib78=1\n\tlocal fib79=1\n\
    \tlocal fib80=1\n\tlocal fib81=1\n\tlocal fib82=1\n\tlocal fib83=1\n\tlocal fib84=1\n\
    \tlocal \n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n=$1\n    if [ \"$n\" -lt 0 ];then\n        echo \"$n is not a non-negative\
    \ integer\"\n        return \n    fi\n    local fibs=(1 3 5)\n    local sum\n\
    \    if [ \"$n\" -eq 1 ];then\n        sum=\"\\\"$fibs[0]\\\"\"\n    else\n  \
    \      sum=\"\\\"$(let \"n = n - 1; echo $fibs[$n] + $fibs[$n - 1] + $fibs[$n\
    \ + 1]\")\\\"\"\n    fi\n    echo $sum\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate\
    \ \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n\
    \    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\")\
    \ = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24\
    \ 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpy1b4k46j.sh: line 31: let: n = n - 1; echo 1[3] + 1[3 - 1] + 1[3
    + 1]: syntax error: invalid arithmetic operator (error token is "; echo 1[3] +
    1[3 - 1] + 1[3 + 1]")

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: -1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \tlocal n=$1\n\techo \"$n\" 1>&2\n\tif [ $n -le 0 ]; then\n\t\techo \"invalid\
    \ input: $n\"\n\t\treturn 1\n\tfi\n\tif [ $n -eq 1 ]; then\n\t\techo \"$1\" \"\
    1\"\n\tfi\n\tlocal p1=$(tri $(( n - 1 )))\n\tlocal p2=$(tri $(( n - 2 )))\n\t\
    local p3=$(tri $(( n + 1 )))\n\techo \"$p1$p2$p3\"\n}\n\ncandidate() {\n    tri\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n\
    \    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"\
    1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=64 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=31 encoding='utf-8'>
  timestamp: 1660058652
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n=\"${1}\"\n    local i=0\n    local sum=0\n    for ((i=1;i<=n;i+=1));\
    \ do\n        sum=$((sum + i)) \n    done\n    if test \"${n%2}\" -eq 0; then\
    \ \n        echo \"$((sum))\"\n    else\n        echo \"$((sum + 2))\"\n    fi\n\
    }\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \tlocal n=$1\n\t(( n > 0 )); # make sure n is positive integer\n\tlocal m=$((\
    \ n / 2 )) # get an integer m, such that 0 <= m <= n/2\n\tlocal result=()\n\t\
    local i=1\n\tresult+=($(echo $(( $(( 3 )) )))) # tri(3) starts with 3\n\twhile\
    \ [ $i -le $(( n + 1 )) ]; do\n\t\t(( i <= m )) && result+=($(echo $(( $(( $((\
    \ 2 )) )) ))) # tri(2) starts with 2\n\t\t(( i >= m )) && result+=($(echo $((\
    \ $(( $(( 1 )) )) ))) # tri(4) starts with 1\n\t\t(( i == n )) && result+=($(echo\
    \ $(( $(( $(( 1 )) )) ))) # tri(3) starts with 1\n\t\t(( i == m )) && result+=($(echo\
    \ $(( $(( $(( 0 )) )) ))) # tri(2) starts with 0\n\t\t(( i == n )) && result+=($(echo\
    \ $(( $(( $(( 0 )) )) )))) # tri(4) starts with 0\n\t\t(( i > n )) && result+=($(echo\
    \ $(( $(( $(( 1 )) )) ))) # tri(4) starts with 1\n\t\t(( i >= n )) && result+=($(echo\
    \ $(( $(( $(( 1 )) )) ))) # tri(2) starts with 1\n\t\t(( i > m )) && result+=($(echo\
    \ $(( $(( $(( 0 )) )) ))) # tri(2) starts with 0\n\t\t(( i > n )) && result+=($(echo\
    \ $(( $(( $(( 0 )) )) ))) # tri(4) starts with 0\n\t\t(( i > m )) && result+=($(echo\
    \ $(( $(( $(( 0 )) )) ))) # tri(2) starts with 0\n\t\t(( i == n )) && result+=($(echo\
    \ $(( $(( $(( 0 )) )) ))) # tri(4) starts with 0\n\t\t(( i == m )) && result+=($(echo\
    \ $(( $(( $(( 1 )) )) ))) # tri(2) starts with 1\n\t\t(( i == n )) && result+=($(echo\
    \ $(( $(( $(( 1 )) )) ))) # tri(4) starts with 1\n\t\t(( i >= n )) && result+=($(echo\
    \ $(( $(( $(( 0 )) )) ))) # tri(2) starts with 0\n\t\t(( i >= m \n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "/tmp/tmp8ikxi_kg.sh: line 29: syntax error near unexpected token `('\n\
    /tmp/tmp8ikxi_kg.sh: line 29: `\t\t(( i >= m )) && result+=($(echo $(( $(( $((\
    \ 1 )) )) ))) # tri(4) starts with 1'\n/tmp/tmp8ikxi_kg.sh: line 31: syntax error\
    \ near unexpected token `('\n/tmp/tmp8ikxi_kg.sh: line 31: `\t\t(( i == m )) &&\
    \ result+=($(echo $(( $(( $(( 0 )) )) ))) # tri(2) starts with 0'\n/tmp/tmp8ikxi_kg.sh:\
    \ line 34: syntax error near unexpected token `('\n/tmp/tmp8ikxi_kg.sh: line 34:\
    \ `\t\t(( i >= n )) && result+=($(echo $(( $(( $(( 1 )) )) ))) # tri(2) starts\
    \ with 1'\n/tmp/tmp8ikxi_kg.sh: line 36: syntax error near unexpected token `('\n\
    /tmp/tmp8ikxi_kg.sh: line 36: `\t\t(( i > n )) && result+=($(echo $(( $(( $((\
    \ 0 )) )) ))) # tri(4) starts with 0'\n/tmp/tmp8ikxi_kg.sh: line 38: syntax error\
    \ near unexpected token `('\n/tmp/tmp8ikxi_kg.sh: line 38: `\t\t(( i == n )) &&\
    \ result+=($(echo $(( $(( $(( 0 )) )) ))) # tri(4) starts with 0'\n/tmp/tmp8ikxi_kg.sh:\
    \ line 40: syntax error near unexpected token `('\n/tmp/tmp8ikxi_kg.sh: line 40:\
    \ `\t\t(( i == n )) && result+=($(echo $(( $(( $(( 1 )) )) ))) # tri(4) starts\
    \ with 1'\n/tmp/tmp8ikxi_kg.sh: line 42: syntax error near unexpected token `('\n\
    /tmp/tmp8ikxi_kg.sh: line 42: `\t\t(( i >= m '\n/tmp/tmp8ikxi_kg.sh: line 43:\
    \ syntax error near unexpected token `}'\n/tmp/tmp8ikxi_kg.sh: line 43: `}'\n"
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \tif [ $1 -eq 0 ]\n\tthen\n\t\techo \"0\";\n\telse\n\t\t[ $(( 1 / $1 )) -eq 1\
    \ ] && tri \"${1}-1\" && tri \"${1}-2\" && tri \"${1}+1\"\n\tfi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    echo \"$1\" | tr '\\n' '\\0' | xargs -0 -n1 -I{} bash -c '\n        echo\
    \ \"{}\"\n        if [ $1 -le 2 ] ; then \n            echo \"1\"\n        elif\
    \ [ $1 -le 4 ] ; then\n            echo \"3\"\n        elif [ $1 -le 6 ] ; then\n\
    \            echo \"5\"\n        elif [ $1 -le 8 ] ; then\n            echo \"\
    7\"\n        elif [ $1 -le 10 ] ; then\n            echo \"9\"\n        else\n\
    \            echo \"1\"\n        fi\n    ' | tr '\\0' '\\n'\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'bash: line 2: [: -le: unary operator expected

    bash: line 4: [: -le: unary operator expected

    bash: line 6: [: -le: unary operator expected

    bash: line 8: [: -le: unary operator expected

    bash: line 10: [: -le: unary operator expected

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \tlocal i ret\n\tret=()\n\tlocal __N=$1\n\t[[ $# -gt 0 ]] || return 0\n\t[[ $__N\
    \ -eq 1 ]] || return 0\n\ti=1\n\t(( i <= $__N ))\n\twhile (( i < $__N )); do\n\
    \t\tret+=($(tri $(( i + 1 ))))\n\t\t(( i++ ))\n\tdone\n\techo \"${ret[@]}\"\n\
    }\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n=$1\n    local -i a\n    local -i j\n    local -i k\n    local -i\
    \ sum\n    local -i result\n    local -i temp\n    local -i count\n    local -i\
    \ last\n    local -i f\n\n    last=$((${n}-1))\n    a=$((${n}+1))\n    sum=$((${a}+${a}+${a}))\n\
    \n    for (( i = last; $i -lt $n; i++ )); do\n        result=$((${sum}+$i))\n\
    \        count=$(expr $i \\* 2)\n        temp=$((${result}+${count}))\n      \
    \  sum=$((${temp}))\n    done\n\n    result=$((${sum}+${n}))\n    count=$(expr\
    \ $n \\* 2)\n    temp=$((${result}+${count}))\n    sum=$((${temp}))\n    echo\
    \ '\"$(expr $n \\* 2)\"' >> $2\n    echo '\"$(expr $n \\* 2)\"' >> $2\n    echo\
    \ '\"$(expr $n \\* 2)\"' >> $2\n    echo '\"$(expr $n \\* 2)\"' >> $2\n    echo\
    \ '\"$(expr $n \\* 2)\"' >> $2\n    echo '\"$(expr $n \\* 2)\"' >> $2\n    echo\
    \ '\"$(expr $n \\* 2)\"' >> $2\n    echo '\"$(expr $n \\* 2)\"' >> $2\n    echo\
    \ '\"$(expr $n \\* 2)\"' >> $2\n    echo '\"$(expr $n \\* 2)\"' >> $2\n    echo\
    \ '\"$(expr $n \\* 2)\"' >> $2\n    echo '\"$(expr $n \\* 2)\"' >> $2\n    echo\
    \ '\"$(expr $n \\* 2)\"' >> $2\n    echo '\"$(expr $n \\* 2)\"' >> $2\n    echo\
    \ '\"$(expr $n \\* 2)\"' >> $2\n    echo '\"$(expr $n \\* 2)\"' >> $2\n    echo\
    \ '\"$(expr $n \\* 2)\"' >> $2\n    echo '\"$(expr $n \\* 2)\"' >> $2\n    echo\
    \ '\"$(expr $n \\* 2)\"' >> $2\n    echo '\"$(expr $n \\* 2)\"' >> $2\n    echo\
    \ '\"$(expr $\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3\
    \ 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmputx765tc.sh: line 67: unexpected EOF while looking for matching
    `''''

    /tmp/tmputx765tc.sh: line 89: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  if [ $# -lt 1 ]; then\n    echo \"No parameter\"\n  else\n    let n=\"$1\"\n\
    \    echo \"$(seq 1 $((n+2))) | sed 's/$/\\/\"\\$(($(seq -f \"%d\\t\" 1 1 $((n+1))))\"\
    /g'\"\n  fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3\
    \ 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb3g1rfz5.sh: line 25: syntax error near unexpected token `(''

    /tmp/tmpb3g1rfz5.sh: line 25: `    echo "$(seq 1 $((n+2))) | sed ''s/$/\/"\$(($(seq
    -f "%d\t" 1 1 $((n+1))))"/g''"''

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  local n=$1\n  local -n result=\n  (( n<=2 )) && return \"${result[@]}\"\n \
    \ (( n % 2 == 0 )) == 0 && result+=(tri 2 )\n  (( n % 2 == 1 )) == 0 && result+=(tri\
    \ 3 )\n  (( n % 2 == 0 )) == 1 && result+=(tri 1 )\n  (( n % 2 == 1 )) == 1 &&\
    \ result+=(tri 2 )\n  (( n % 2 == 0 )) == 1 && result+=(tri 4 )\n  (( n % 2 ==\
    \ 1 )) == 1 && result+=(tri 3 )\n  (( n % 2 == 0 )) == 1 && result+=(tri 5 )\n\
    \  (( n % 2 == 1 )) == 1 && result+=(tri 4 )\n  (( n % 2 == 0 )) == 1 && result+=(tri\
    \ 6 )\n  (( n % 2 == 1 )) == 1 && result+=(tri 5 )\n  (( n % 2 == 0 )) == 1 &&\
    \ result+=(tri 7 )\n  (( n % 2 == 1 )) == 1 && result+=(tri 6 )\n  (( n % 2 ==\
    \ 0 )) == 1 && result+=(tri 8 )\n  (( n % 2 == 1 )) == 1 && result+=(tri 7 )\n\
    \  (( n % 2 == 0 )) == 1 && result+=(tri 9 )\n  (( n % 2 == 1 )) == 1 && result+=(tri\
    \ 8 )\n  (( n % 2 == 0 )) == 1 && result+=(tri 10)\n  (( n % 2 == 1 )) == 1 &&\
    \ result+=(tri 9 )\n  (( n % 2 == 0 )) == 1 && result+=(tri 11)\n  (( n % 2 ==\
    \ 1 )) == 1 && result+=(tri 10)\n  (( n % 2 == 0 )) == 1 && result+=(tri 12)\n\
    \  (( n % 2 == 1 )) == 1 && result+=(tri 11)\n  (( n % 2 == 0 )) == 1 && result+=(tri\
    \ 13)\n  (( n % 2 == 1 )) == 1 && result+=(tri 12)\n  (( n % 2 == 0 )) == 1 &&\
    \ result+=(tri 14)\n  (( n % 2 == 1 )) == 1 && result+=(tri 13)\n  (( n % 2 ==\
    \ 0 )) == 1 && result+=(tri 15)\n  (( n % 2 == 1 )) == 1 && result+=(tri 14)\n\
    \  (( n % 2 == 0 )) == 1 && result+=(tri 16)\n  (( n % 2 == 1 )) == 1 && result+=(tri\
    \ 15)\n  ((\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3\
    \ 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp34u6x0jj.sh: line 24: syntax error near unexpected token `==''

    /tmp/tmp34u6x0jj.sh: line 24: `  (( n % 2 == 0 )) == 0 && result+=(tri 2 )''

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: -1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  local n=$1 i=1\n  local arr=()\n  \n  while [ $n -gt 0 ]; do\n    local next=$((\
    \ n+2 ))\n    local t=$n\n    n=$next\n    \n    # tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    if [ $n -gt 0 ]; then\n      arr[$(( i\
    \ +1 ))]=$(tri \"$t\")\n      i=$(( i + 1 ))\n      arr[$(( i +1 ))]=$(tri \"\
    $next\")\n      i=$(( i + 1 ))\n    fi\n  done\n  \n  echo ${arr[@]}\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=52 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=19 encoding='utf-8'>
  timestamp: 1660058652
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \tlocal n=\"$1\"\n\tshift\n\t[[ \"$n\" =~ ^[0-9]+$ ]] || return 1\n\tlocal sum=0\
    \ i\n\tfor i in $(seq $((n + 1))); do\n\t\t(( sum += i ))\n\tdone\n\tprintf '\"\
    %s\"' $(seq $((n + 2)) | sed -n \"1,${sum}p\"\n}\n\ncandidate() {\n    tri \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n\
    \    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"\
    1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2uxrkw27.sh: line 28: unexpected EOF while looking for matching
    `)''

    /tmp/tmp2uxrkw27.sh: line 50: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local -a arr\n    local n\n    local cur prev next\n    local -a subst\n\n\
    \    arr=($(eval echo \"\\${${1}:1}\"))\n    \n    for ((i=1; i<\"${#arr[@]}\"\
    ; i+=2)); do\n        cur=\"${arr[i]}\"\n        prev=\"${arr[i-1]}\"\n      \
    \  next=\"${arr[i+1]}\"\n        subst+=(\"'${cur}'\")\n        if [ \"${prev}\"\
    \ = \"${cur}\" ]; then\n            subst+=(\"'${prev}'\")\n        else\n   \
    \         subst+=(\"'${prev}' + '${next}'\")\n        fi\n    done\n    echo -n\
    \ \"${subst[*]}\"\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  local n=$1\n  echo \"${n}${n/2}\"\n  if [[ $(( n % 2 )) -eq 0 ]]; then\n  \
    \  echo \"${n}${n//2/1 + n//2/2}\"\n  else\n    echo \"${n}${n//2/1 - n//2/2}\"\
    \n  fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  local i\n  local n=$1\n  local tmp\n  tmp=$n\n  for i in $(seq 1 $(($n - 1)));\
    \ do\n    echo -n \"'$i'\" \n    tmp=$((tmp + $(( $(( $n - 1) * ( $(( $n - 1)\
    \ * ( $n + 1) ) ) )))) \n  done\n  echo $tmp\n}\n\ncandidate() {\n    tri \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[\
    \ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8\
    \ 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplfnqh574.sh: line 27: unexpected EOF while looking for matching
    `)''

    /tmp/tmplfnqh574.sh: line 51: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    echo \"$1\" | awk '{\n        for(i=1; i<=NF; i++) \n            printf(\"\
    \\\"%s\\\"\\n\", $i)\n    }'\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"\
    4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n   \
    \ [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"\
    1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n\
    \    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n ret=$(echo $1 | cut -c 1)\n    if [[ $n =~ ^[0-9]+$ ]]; then\n  \
    \      if [[ $n =~ ^[0-9]+$ ]]; then\n            if [[ $n =~ ^[0-9]+$ ]]; then\n\
    \                ret=\"$(echo $n | cut -c 1)\"\n            else\n           \
    \     ret=\"$(echo $n | cut -c 1)\"\n            fi\n        else\n          \
    \  ret=\"$(echo $n | cut -c 1)\"\n        fi\n    else\n        ret=\"$(echo $n\
    \ | cut -c 1)\"\n    fi\n    local tmp\n    local tmp1\n    local tmp2\n    local\
    \ tmp3\n    local tmp4\n    local tmp5\n    local tmp6\n    if [[ $n =~ ^[0-9]+$\
    \ ]]; then\n        while [[ $n -gt 0 ]]; do\n            tmp=\"$(echo $n | cut\
    \ -c 1)\"\n            tmp2=\"$((tmp + tmp))\"\n            tmp1=\"$((tmp + tmp2))\"\
    \n            tmp3=\"$((tmp + tmp1))\"\n            tmp4=\"$(echo $tmp3 | cut\
    \ -c 1)\"\n            tmp5=\"$((tmp3 + tmp4))\"\n            tmp6=\"$(echo $tmp5\
    \ | cut -c 1)\"\n            ret=\"$((ret+tmp6))\"\n            n=\"$((n-1))\"\
    \n        done\n    else\n        while [[ $n -gt 0 ]]; do\n            tmp=\"\
    $(echo $n | cut -c 1)\"\n            tmp2=\"$((tmp + tmp))\"\n            tmp1=\"\
    $((tmp + tmp2))\"\n            tmp3=\"$((tmp + tmp1))\"\n            tmp4=\"$(echo\
    \ $tmp3 | cut -c 1)\"\n            tmp5=\"$((tmp3 + tmp4))\"\n            tmp6=\"\
    $(echo $tmp5 | cut -c 1)\"\n            ret=\"$((ret+tmp6))\"\n            n=\"\
    $((n-1))\"\n        done\n    fi\n    echo ${ret[@]}\n}\n\ncandidate() {\n   \
    \ tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\"\
    \ ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\")\
    \ = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n \
    \   [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\"\
    ) = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24\
    \ 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8\
    \ 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  declare n=$1\n  echo $(( (n+1)/2 ))\n  [ $(( (n+1)%2 )) -eq 1 ] && echo $((\
    \ (n+3)/2 ))\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3\
    \ 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  local n=\"$1\"\n  (( $# == 1 )) && return \"1\"\n  (( $# == 2 )) && return\
    \ \"\\\"1\\\"\"\n  (( $# == 3 )) && return \"\\\"1\\\", \\\"3\\\", \\\"2\\\"\"\
    \n  (( $# == 4 )) && return \"\\\"1\\\", \\\"3\\\", \\\"2\\\", \\\"8\\\"\"\n \
    \ (( $# == 5 )) && return \"\\\"1\\\", \\\"3\\\", \\\"2\\\", \\\"8\\\", \\\"13\\\
    \"\"\n  local a=\"$(( n - 3 ))\"\n  local b=\"$(( n - 1 ))\"\n  local c=\"$((\
    \ n + 1 ))\"\n  local d=\"$(( n + 2 ))\"\n  echo \"$(( 3 * a + b ))\"\n  echo\
    \ \"$(( 3 * a + b + c ))\"\n  echo \"$(( 3 * a + b + c + d ))\"\n  echo \"$((\
    \ 3 * a + b + c + d + 1 ))\"\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"\
    4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n   \
    \ [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"\
    1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n\
    \    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  ((n=$1))\n  local tst\n  if (( n % 2 )); then\n    tst=(n-3)/2\n    tst=$(tst+1)\n\
    \    tst=$(tst+1)\n    echo \"$tst\"\n  else\n    tst=((n-3)/2)\n    tst=$(tst+1)\n\
    \    tst=$(tst+1)\n    tst=$(tst+1)\n    echo \"$tst\"\n  fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpg3mvt61g.sh: line 29: syntax error near unexpected token `(''

    /tmp/tmpg3mvt61g.sh: line 29: `    tst=((n-3)/2)''

    /tmp/tmpg3mvt61g.sh: line 30: tst+1: command not found

    /tmp/tmpg3mvt61g.sh: line 31: tst+1: command not found

    /tmp/tmpg3mvt61g.sh: line 32: tst+1: command not found

    /tmp/tmpg3mvt61g.sh: line 34: syntax error near unexpected token `fi''

    /tmp/tmpg3mvt61g.sh: line 34: `  fi''

    '
  stdout: '

    '
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  if [ $# -eq 1 ]\n  then\n    # Tribonacci number. \n    local a='\"'\n    local\
    \ b='\"'\n    local c='\"'\n  else\n    if [ $1 -ge 1 ]\n    then\n      a=$1\n\
    \      b=$(( $a + ( ( $a / 2) ) ))\n      c=$(( $b + ( ( $b / 2) ) ))\n      for\
    \ i in `seq 1 $2`; do \n        if [ $i -eq $2 ]\n        then\n          printf\
    \ '\"%s\"' \"$c\"\n        else\n          printf '\"%s\"' \"$a$c$b\"\n      \
    \  fi\n        a=$b\n        b=$c\n        c=$(( $c + ( ( $c / 2) ) ))\n     \
    \ done\n      printf '\"%s\"' \"$a$c$b\"\n    else\n      printf \"%d\" $(( $1\
    \ ))\n    fi\n  fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n=\"$1\"\n    local a b c d e\n    local result\n    a=b=$(( 2 * n\
    \ ))\n    c=$(( 3 * n ))\n    d=$(( a+ c + b ))\n    e=$(( c + d + b ))\n    if\
    \ [ $n -eq 1 ]\n    then\n        result=\"\\\"$d\\\"\"\n    elif [ $n -eq 2 ]\n\
    \    then\n        result=\"\\\"$a\\\",\"\\$b\\\",\"\\$c\"\n    else\n       \
    \ result=\"\\\"$a\\\",\"\\$b\\\",\"\\$c\\\",\"\\$d\",\"\\$e\"\n    fi\n    echo\
    \ \"$result\"\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3\
    \ 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpia_1cnk2.sh: line 55: unexpected EOF while looking for matching
    `"''

    /tmp/tmpia_1cnk2.sh: line 59: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  (( $# )) && {\n    local n x\n    n=${1}\n    if (( n >= 0 )); then\n     \
    \ x=\"1 $(n)\"\n      while (( n >= 2 )); do\n        n=$(( n-1 ))\n        x=\"\
    $(n) $x\"\n      done\n      x=\"$(n) $x\"\n      printf '%s\\n' \"$x\"\n    else\n\
    \      printf '%s\\n' \"$1\"\n    fi\n  }\n}\n\ncandidate() {\n    tri \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[\
    \ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8\
    \ 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpub1oj7ew.sh: line 25: n: command not found

    /tmp/tmpub1oj7ew.sh: line 28: n: command not found

    /tmp/tmpub1oj7ew.sh: line 28: n: command not found

    /tmp/tmpub1oj7ew.sh: line 30: n: command not found

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \tif [ $1 -gt $(( 20 + 5 )) ]; then\n\t\techo \"Too big!\"\n\telse\n\t\tfor i\
    \ in $(seq 1 1 $(( $1 / 2 ))); do\n\t\t\tif [ $i -le $(( 2 )) ]; then\n\t\t\t\t\
    echo $(( 3 * i + 1 ))\n\t\t\telif [ $i -le $(( 3 )) ]; then\n\t\t\t\techo $((\
    \ 1 + 2 * i - 1 ))\n\t\t\telif [ $i -le $(( 5 )) ]; then\n\t\t\t\techo $(( 1 +\
    \ 3 * i - 2 ))\n\t\t\telif [ $i -le $(( 8 )) ]; then\n\t\t\t\techo $(( 2 * i -\
    \ 3 ))\n\t\t\telse\n\t\t\t\techo $(( i + 6 ))\n\t\t\tfi\n\t\tdone\n\tfi\n}\n\n\
    candidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    echo $(($1 * ($1 + 1) / 2))\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate\
    \ \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n\
    \    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\")\
    \ = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24\
    \ 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \tlocal n=$1\n\tlocal i\n\tlocal t[]\n\tlocal a=1\n\tlocal b=1\n\tlocal c=1\n\t\
    local d\n\tlocal f\n\tlocal g\n\tlocal h\n\n\ti=1\n\twhile [ $i -lt $n ]; do\n\
    \t\tt[i]=a\n\t\ta=b\n\t\tb=c\n\t\tc=d\n\t\td=$(expr $a + $b + $c)\n\t\tif [ $i\
    \ -lt $n ]; then\n\t\t\td=$(expr $d + $f + $g)\n\t\t\tif [ $i -lt $n ]; then\n\
    \t\t\t\td=$(expr $d + $h + $h)\n\t\t\tfi\n\t\tfi\n\t\tf=$g\n\t\tg=$h\n\t\th=$a\n\
    \t\ta=$b\n\t\tb=$c\n\t\tc=$d\n\t\ti=$(expr $i + 1)\n\tdone\n\techo ${t[@]}\n}\n\
    \ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "/tmp/tmp6tjxlsr3.sh: line 23: local: `t[]': not a valid identifier\nexpr:\
    \ non-integer argument\nexpr: syntax error: missing argument after \u2018+\u2019\
    \nexpr: non-integer argument\nexpr: syntax error: unexpected argument \u2018b\u2019\
    \n"
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \tif [ $1 -gt 1 ]; then\n\t\techo \"Usage: $(basename $0) [integer]\"\n\t\treturn\
    \ 1\n\tfi\n\t\n\tlocal n=$1\n\tlocal a[1]=$((3 + n/2))\n\tlocal b[2]=$((1 + n/2))\n\
    \tlocal c[3]=$((a + b + a))\n\t\n\tlocal i=0\n\tlocal arr[]\n\tarr[0]=\"$1\"\n\
    \tarr[1]=\"$n\"\n\tarr[2]=\"$c[$((n%2))]\"\n\tarr[3]=\"$c[$((n%2==1))]\"\n\t\n\
    \tfor ((i=4; i<$((n+1)); i++)); do\n\t\tlocal j=$((i-1))\n\t\tarr[$i]=\"$c[$((i%2))]\"\
    \n\t\tarr[$j+1]=\"$c[$((i%2==1))]\"\n\tdone\n\tarr[$((n+1))]=\"$c[$((n%2==1))]\"\
    \n\techo \"${arr[@]}\"\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \tlocal i=1\n\tlocal sum=\"1\"\n\tlocal sum2=\"1\"\n\tlocal sum3=\"1\"\n\twhile\
    \ [ $i -le $1 ]; do\n\t\tsum=$((sum + $sum2 + $sum3))\n\t\t(( $i % 2 )) && sum2=$((sum2\
    \ - $sum3)); \n\t\t(( $i % 2 )) && sum3=$((sum3 - $sum2))\n\t\t(( i++ ))\n\tdone\n\
    \techo $sum\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3\
    \ 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    # Write your code here.\n\techo \"$1\"\n}\n\ncandidate() {\n    tri \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[\
    \ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8\
    \ 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  n=$1\n  i=1\n  j=2\n  res=()\n  while [ $i -lt $n ]; do\n    res+=( \"${j}\"\
    \ )\n    j=( $( expr $j + $i ) $( expr $j - $i ) $( expr $j + $i ) )\n    i=$(\
    \ expr $i + 1 )\n  done\n  echo ${res[@]}\n}\n\ncandidate() {\n    tri \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[\
    \ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8\
    \ 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  local n=$1; shift;\n  local arr=()\n  local -i i j\n  local -a arr_n\n  arr_n=(\
    \ $( seq 1 $n ))\n  for ((i=0;i<$n;++i)); do\n    for ((j=$((arr_n[i]+arr_n[i+1]));j<=$n;j+=$(arr_n[i]+arr_n[i+1])));\
    \ do\n      arr[i]=\"$j\"\n    done\n  done\n  echo \"${arr[@]}\"\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpv03bekm6.sh: line 27: arr_n[i]+arr_n[i+1]: command not found

    /tmp/tmpv03bekm6.sh: line 27: ((: j+=: syntax error: operand expected (error token
    is "+=")

    /tmp/tmpv03bekm6.sh: line 27: arr_n[i]+arr_n[i+1]: command not found

    /tmp/tmpv03bekm6.sh: line 27: ((: j+=: syntax error: operand expected (error token
    is "+=")

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  echo $1 | awk '{printf \"\\\"%d\\\"\", $1 + $2/2; for (i = 3; i <= $1; i+=2){\
    \ printf (\",\\\"%d\", $i + $(i-1)/2);}}'\n}\n\ncandidate() {\n    tri \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[\
    \ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8\
    \ 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    # https://www.geeksforgeeks.org/tribonacci-sequence/\n    local i\n    local\
    \ a\n    local b\n    local c\n    local n\n    local tmp\n    local tmp2\n  \
    \  local tmp3\n    local result\n    n=$1\n    a=$(( 2 * n + 1 ))\n    b=$(( 2\
    \ * n - 1 ))\n    c=$(( n + 1 ))\n    IFS=$' \\t\\n'\n    for (( i = 1; i <= n;\
    \ i++ )); do\n        eval \"tmp=${a}+${b}+${c}\"\n        eval \"tmp2=$(printf\
    \ \"%.0f\" $tmp)\"\n        eval \"tmp3=${tmp2}+1\"\n        result=$(printf \"\
    %d\\\\n\" $tmp3)\n    done\n    IFS=$OLD_IFS\n    echo \"${result%$'\\n'}\"\n\
    }\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmptswiusqq.sh: line 38: printf: 7+5+4: invalid number

    /tmp/tmptswiusqq.sh: line 40: printf: 7+1: invalid number

    /tmp/tmptswiusqq.sh: line 38: printf: 7+5+4: invalid number

    /tmp/tmptswiusqq.sh: line 40: printf: 7+1: invalid number

    /tmp/tmptswiusqq.sh: line 38: printf: 7+5+4: invalid number

    /tmp/tmptswiusqq.sh: line 40: printf: 7+1: invalid number

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  local n=$1\n  local sum=0\n  local i=0\n  echo \"$(($n + 2))\" | while read\
    \ x; do\n    sum=$(($sum + $x))\n    i=$((i+1))\n    if [ $i -eq $n ]; then\n\
    \      echo \"$sum\"\n    fi\n  done\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate\
    \ \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n\
    \    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\")\
    \ = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24\
    \ 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \tlocal n=$1\n\tlocal sum\n\tlocal i\n\tlocal array\n\tlocal result\n\tfor i in\
    \ $(seq 1 $n); do\n\t\tsum=$(( $i + $(($i/2))))\n\t\tarray[$i]=\"\\\"$sum\\\"\"\
    \n\tdone\n\tresult=$(printf \"${array[*]}\" | tr \" \" \"\\n\")\n\tprintf '[%s]'\
    \ \"${result}\"\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3\
    \ 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: -1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n=$1 res=()\n    [[ $n -eq 0 ]] && return \"${res[@]}\"\n    [[ $n\
    \ -eq 1 ]] && return '((\"${res[@]:1}\"))'\n    for ((i=1; i <= n; i++)) ; do\
    \ res+=( \"$(tri $i) (${res[@]:1})\" ); done\n}\n\ncandidate() {\n    tri \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[\
    \ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8\
    \ 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=61 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=56 encoding='utf-8'>
  timestamp: 1660058652
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  local num=$1\n  if [ $num -gt 1 ] || [ $num -le 1 ]; then\n    echo invalid\
    \ number of arguments\n    exit 1\n  fi\n  local n\n  local sum=0\n  local i=1\n\
    \  for i in $(seq 1 $num); do\n    sum=$(($sum + $i))\n  done\n  ((n=$num))\n\
    \  echo \"$((sum%$n==0 ? (n+1) : sum%$n))\"\n}\n\ncandidate() {\n    tri \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[\
    \ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8\
    \ 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n n1 n2\n    local -a arr ret\n    n=$(($1))\n    if (( n <= 0 ));\
    \ then\n        return ret\n    fi\n    n1=1\n    n2=2\n    arr=(\"${!n1}\")\n\
    \    for ((n3=$((n+1)); n3; n3=$((n3-1))))\n    do\n        n1=\"${!n1}\"\n  \
    \      n2=\"${!n2}\"\n        arr=(\"${arr[@]}\" \"$n1\" \"${n2}\")\n        n1=$n2\n\
    \        n2=$((n2+n1))\n    done\n    arr=(\"${arr[@]}\" \"$n1\" \"${n2}\")\n\
    \    arr=( \"${arr[@]}\" \"${arr[@]:(-1)}\" )\n    ret=( \"${arr[@]:0:${#arr[@]}-1}\"\
    \ )\n    printf \"%s\\n\" \"${ret[@]}\"\n}\n\ncandidate() {\n    tri \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[\
    \ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8\
    \ 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpa7who3lm.sh: line 32: : invalid variable name

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \tlocal n=$1\n\tif [[ $n -eq 0 ]]; then\n\t\techo \"$((tri 1))\"\n\telse\n\t\t\
    local i=1\n\t\tlocal s=0\n\t\tlocal ret=()\n\t\twhile [ $i -lt $n ]; do\n\t\t\t\
    let i=$i+1\n\t\t\tlet s=$s+$i\n\t\t\tif [ $s -gt $n ]; then\n\t\t\t\tlet s=$s-$n\n\
    \t\t\tfi\n\t\t\tlet ret+=(\"\\\"$i\\\"\")\n\t\tdone\n\t\techo \"${ret[@]}\"\n\t\
    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpseo4agm8.sh: line 34: let: ret+=("2"): syntax error: operand expected
    (error token is ""2")")

    /tmp/tmpseo4agm8.sh: line 34: let: ret+=("3"): syntax error: operand expected
    (error token is ""3")")

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \   local n=$1\n   if [ $n -ge 0 ]; then\n      local prev=\"${n}\"\n      local\
    \ next=$((${prev} - 2))\n      local sum=$((${next} - ${prev} + ${next}))\n  \
    \    local newsum=$((${sum} + ${sum} + ${sum}))\n      local newnum=$((${newsum}\
    \ - ${sum}))\n      local final=$((${next} - 1))\n      local result=$(eval echo\
    \ ${newnum})\n      local newresult=$(eval echo ${result})\n      echo ${newresult}\n\
    \   else\n      echo \"Invalid input\"\n   fi\n}\n\ncandidate() {\n    tri \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n\
    \    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"\
    1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: -1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  local n=$1\n  ((n++))\n  if [[ $n -gt 3 ]]; then\n    echo -n $(($(tri $((n-1)))\
    \ + $(tri $((n-2)) + $(tri $((n+1))))))\n  elif [[ $n -eq 3 ]]; then\n    echo\
    \ -n $(($(tri $((n-1))) + $(tri $((n-2)) + $(tri $((n+1))))))\n  else\n    echo\
    \ -n $(($(tri $((n-1))) + $(tri $((n-2)) + $(tri $((n+1))))))\n  fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=57 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=43 encoding='utf-8'>
  timestamp: 1660058652
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n=$1\n    local fib\n    local result\n\n    if [[ \"$n\" -lt 1 ]];\
    \ then\n        echo \"The number should be greater then or equal to 1.\"\n  \
    \  else\n        result=$(seq 1 \"$n\" | tr '[:upper:]' '[:lower:]' | tr ' ' '\\\
    n' | sed -r 's/^/\\\"/' | sed -r 's/$/\\\"/' | sed 's/^/\\\"/' | sed 's/$/\\\"\
    /')\n    fi\n\n    echo \"$result\"\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate\
    \ \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n\
    \    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\")\
    \ = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24\
    \ 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \techo $(( ($(eval echo \"(${@:1:1})\") + $(eval echo \"(${@:2:1})\") + $(eval\
    \ echo \"(${@:3:1})\") ) / 2 ))\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate\
    \ \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n\
    \    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\")\
    \ = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24\
    \ 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmp7mou9gqo.sh: eval: line 21: syntax error near unexpected token
    `3''

    /tmp/tmp7mou9gqo.sh: eval: line 21: `echo (3)''

    /tmp/tmp7mou9gqo.sh: eval: line 22: syntax error: unexpected end of file

    /tmp/tmp7mou9gqo.sh: eval: line 22: syntax error: unexpected end of file

    /tmp/tmp7mou9gqo.sh: line 21: ( +  +  ) / 2 : syntax error: operand expected (error
    token is ") / 2 ")

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  case $1 in\n    [0-9]*) \n      local count=$1\n      (( count++ ))\n     \
    \ local sum=3\n      while [ $count -gt 0 ]; do\n        sum=$(( sum + count /\
    \ 2 ))\n        (( count-- ))\n      done\n      echo $sum\n      ;;\n    *)\n\
    \      echo \"Unrecognized input\"\n      ;;\n  esac\n}\n\ncandidate() {\n   \
    \ tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\"\
    \ ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\")\
    \ = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n \
    \   [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\"\
    ) = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24\
    \ 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8\
    \ 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    [[ $1 =~ ^[0-9]+$ ]] || echo \"Wrong argument format\"\n    local i n\n \
    \   n=$1\n    local arr=($(seq 0 $((n+1))));\n    for ((i=1; i<${#arr[@]}; i+=2));\
    \ do\n        arr[$i]=\"${arr[$i-1]}+${arr[$i+1]}\"\n    done\n    echo \"${arr[@]}\"\
    \n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \tlocal n=$1\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal x\n\tlocal y\n\tlocal z\n\
    \tlocal i\n\tlocal j\n\tlocal k\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal i\n\t\
    local j\n\tlocal k\n\tlocal m\n\tlocal n\n\tlocal output\n\n\tx=3\n\ty=x\n\tz=$(x+y+1)\n\
    \tx=$y\n\ty=$z\n\tz=$(x+y+1)\n\ti=$z\n\tj=$i\n\tk=$j\n\tx=$k\n\ty=$j\n\tz=$(x+y+1)\n\
    \ti=$z\n\tj=$i\n\tk=$j\n\tx=$k\n\ty=$j\n\tz=$(x+y+1)\n\ti=$z\n\tj=$i\n\tk=$j\n\
    \tx=$k\n\ty=$j\n\tz=$(x+y+1)\n\ti=$z\n\tj=$i\n\tk=$j\n\tx=$k\n\ty=$j\n\tz=$(x+y+1)\n\
    \ti=$z\n\tj=$i\n\tk=$j\n\tx=$k\n\ty=$j\n\tz=$(x+y+1)\n\ti=$z\n\tj=$i\n\tk=$j\n\
    \tx=$k\n\ty=$j\n\tz=$(x+y+1)\n\ti=$z\n\tj=$i\n\tk=$j\n\tx=$k\n\ty=$j\n\tz=$(x+y+1)\n\
    \ti=$z\n\tj=$i\n\tk=$j\n\tx=$k\n\ty=$j\n\tz=$(x+y+1)\n\ti=$z\n\tj=$i\n\tk=$j\n\
    \tx=$k\n\ty=$j\n\tz=$(x+y+1)\n\ti=$z\n\tj=$i\n\tk=$j\n\tx=$k\n\ty=$j\n\tz=$(x+y+1)\n\
    \ti=$z\n\tj=$i\n\tk=$j\n\tx=$k\n\ty=$j\n\tz=$(x+y+1)\n\ti=$z\n\tj=$i\n\tk=$j\n\
    \tx=$k\n\ty=$j\n\tz=$(x+y+1)\n\ti=$z\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate\
    \ \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n\
    \    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\")\
    \ = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24\
    \ 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmpakay49ss.sh: line 43: x+y+1: command not found

    /tmp/tmpakay49ss.sh: line 46: x+y+1: command not found

    /tmp/tmpakay49ss.sh: line 52: x+y+1: command not found

    /tmp/tmpakay49ss.sh: line 58: x+y+1: command not found

    /tmp/tmpakay49ss.sh: line 64: x+y+1: command not found

    /tmp/tmpakay49ss.sh: line 70: x+y+1: command not found

    /tmp/tmpakay49ss.sh: line 76: x+y+1: command not found

    /tmp/tmpakay49ss.sh: line 82: x+y+1: command not found

    /tmp/tmpakay49ss.sh: line 88: x+y+1: command not found

    /tmp/tmpakay49ss.sh: line 94: x+y+1: command not found

    /tmp/tmpakay49ss.sh: line 100: x+y+1: command not found

    /tmp/tmpakay49ss.sh: line 106: x+y+1: command not found

    /tmp/tmpakay49ss.sh: line 112: x+y+1: command not found

    /tmp/tmpakay49ss.sh: line 118: x+y+1: command not found

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    let \"n=$1\"\n    local nstr\n    if test $n -eq 0; then\n        nstr=\"\
    \\\"0\\\"\"\n    elif test $n -eq 1; then\n        nstr=\"\\\"1\\\"\"\n    elif\
    \ test $n -eq 2; then\n        nstr=\"\\\"2\\\"\"\n    elif test $n -eq 3; then\n\
    \        nstr=\"\\\"3\\\"\"\n    else\n        echo \"Invalid input: $n\"\n  \
    \      return 1\n    fi\n    local sum\n    sum=\"$(expr \"$nstr\" +)\"\n    local\
    \ i\n    for i in $(seq 0 \"$nstr\"; do\n        local cur\n        if test $((i\
    \ % 2)) -eq 1; then\n            cur=\"$(expr \"$i\" +)\"\n        else\n    \
    \        cur=\"$(expr \"$i\" +)\"\n        fi\n        sum=\"$(( $sum + $cur ))\"\
    \n    done\n    echo $sum\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp569tb3dq.sh: line 38: unexpected EOF while looking for matching
    `)''

    /tmp/tmp569tb3dq.sh: line 69: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \tif [[ ${1:-0} -ge 1 ]]; then\n\t\techo \"not correct input\" >&2\n\t\texit 1\n\
    \tfi\n\n\t# base case\n\tlocal n\n\tlocal i\n\t[[ \"$1\" == \"0\" ]] && echo \"\
    []\"\n\t[[ \"$1\" == \"\" ]] && echo \"[]\"\n\t[[ \"$1\" -eq \"1\" ]] && echo\
    \ \"[0]\"\n\t[[ \"$1\" -eq \"2\" ]] && echo \"[1,2]\"\n\t[[ \"$1\" -eq \"3\" ]]\
    \ && echo \"[1,3,5]\"\n\n\tn=${1:-0}\n\ti=0\n\tlocal c\n\t[[ -n ${array[0]} ]]\
    \ && c=${array[0]}\n\tlocal j\n\twhile (( i < n ))\n\tdo\n\t\tj=$(( (j+i) / 2))\n\
    \t\ti=$(( (i+j) / 2 ))\n\t\tc=$(( $c + $j))\n\t\tarray[$i]=$(( \"${array[$i]}\"\
    $c))\n\tdone\n\tarray[$(( n+1))]=$c\n\techo \"${array[@]}\"\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'not correct input

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n=$1\n    local fib \n    local output\n    if [[ $n -lt 3 ]]; then\n\
    \        # Not a number or less than or equal to 0\n        output=\"$(echo \"\
    $n\" |sed 's/^\"//' |sed 's/\"$//')\"\n    elif [[ $n -eq 3 ]]; then\n       \
    \ output=\"'1'\"\n    else\n        fib=$((n%2)?(1+(n/2)*3):((n%2)?(2+(n-1)/2):(n+(n-2)))\n\
    \        output=\"'$((n+1))'\"\n        while [[ $n -ge 2 ]]; do\n           \
    \ fib=$((fib+fib)); \n            n=$((n-1)); \n            output=\"$(($output))'$((fib))'\"\
    \n        done\n    fi\n    echo \"$output\"\n}\n\ncandidate() {\n    tri \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[\
    \ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8\
    \ 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpf6yza379.sh: line 30: unexpected EOF while looking for matching
    `)''

    /tmp/tmpf6yza379.sh: line 60: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n=$1 \n    local result\n    result=(\"${tri_1}\" \"${tri_2}\")\n \
    \   if [ ! -z ${tri_3} ]; then\n        result=(\"${result[@]}\" \"$((${tri_3}\
    \ + ${tri_2} + ${tri_1}))\")\n    elif [ ! -z ${tri_1} ]; then\n        result=(\"\
    ${result[@]}\" \"$((${tri_1} + ${tri_2}))\")\n    elif [ ! -z ${tri_2} ]; then\n\
    \        result=(\"${result[@]}\" \"$((${tri_2}))\")\n    fi\n    echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n=$1\n    local i=1;\n    local -a arr\n    local s=0\n    \n    arr=(\"\
    $2\");\n    \n    for ((i=0; i<(n+1); i++)) do\n        ((s+=arr[i])) \n    done\n\
    \    \n    echo \"${arr[@]:0:$((n+1))}\"\n}\n\ncandidate() {\n    tri \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[\
    \ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8\
    \ 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  [ $# -eq 1 ] && echo 1 || echo 0\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate\
    \ \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n\
    \    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\")\
    \ = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24\
    \ 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \tlocal n=\"$1\"\n\tlocal d1=$(mktemp)\n\tlocal d2=$(mktemp)\n\tlocal d3=$(mktemp)\n\
    \tlocal sum=$(mktemp)\n\tlocal line=$(mktemp)\n\t\n\techo \"$n\" > \"$d1\"\n\t\
    echo \"$((n/2))\" > \"$d2\"\n\techo \"$((n/2 + n/2))\" > \"$d3\"\n\t\n\twhile\
    \ read line; do\n\t\t[ \"$line\" -ne \"$(tail -1 \"$sum\")\" ] && echo \"$(tail\
    \ -1 \"$sum\")\" > \"$sum\"\n\t\t[ \"$line\" = \"$(tail -1 \"$sum\")\" ] && echo\
    \ \"$(tail -1 \"$sum\")\" > \"$sum\"\n\tdone < \"$d1\"\n\t\n\tcat \"$d1\" \"$d2\"\
    \ \"$d3\" >> \"$line\"\n\t\n\twhile read line; do\n\t\t[ \"$line\" -ne \"$(tail\
    \ -1 \"$sum\")\" ] && echo \"$(tail -1 \"$sum\")\" > \"$sum\"\n\t\t[ \"$line\"\
    \ = \"$(tail -1 \"$sum\")\" ] && echo \"$(tail -1 \"$sum\")\" > \"$sum\"\n\tdone\
    \ < \"$d1\"\n\t\n\tcat \"$d1\" \"$line\" >> \"$line\"\n\t\n\twhile read line;\
    \ do\n\t\t[ \"$line\" -ne \"$(tail -1 \"$sum\")\" ] && echo \"$(tail -1 \"$sum\"\
    )\" > \"$sum\"\n\t\t[ \"$line\" = \"$(tail -1 \"$sum\")\" ] && echo \"$(tail -1\
    \ \"$sum\")\" > \"$sum\"\n\tdone < \"$d1\"\n\t\n\tcat \"$d1\" \"$line\" \"$d3\"\
    \ > \"$line\"\n\t\n\twhile read line; do\n\t\t[ \"$line\" -ne \"$(tail -1 \"$sum\"\
    )\" ] && echo \"$(tail -1 \"$sum\")\" > \"$sum\"\n\t\t[ \"$line\" = \"$(tail -1\
    \ \"$sum\")\" ] && echo \"$(tail -1 \"$sum\")\" > \"$sum\"\n\tdone < \"$d1\"\n\
    \t\n\tcat \"$line\" \"$sum\"\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"\
    4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n   \
    \ [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"\
    1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n\
    \    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmpi_o_c9zk.sh: line 33: [: : integer expression expected

    /tmp/tmpi_o_c9zk.sh: line 37: : No such file or directory

    /tmp/tmpi_o_c9zk.sh: line 40: [: : integer expression expected

    /tmp/tmpi_o_c9zk.sh: line 44: : No such file or directory

    /tmp/tmpi_o_c9zk.sh: line 47: [: : integer expression expected

    /tmp/tmpi_o_c9zk.sh: line 51: : No such file or directory

    /tmp/tmpi_o_c9zk.sh: line 54: [: : integer expression expected

    cat: '''': No such file or directory

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local number=$1\n    local num1=3\n    local num2=4\n    local num3=5\n \
    \   local numbers=()\n    local number\n    number=\"$(expr $number \\* $num3\
    \ \\* $num2 \\* $num1)\"\n    numbers=\"$(printf '%s\\n' \"$numbers\" $number)\"\
    \n    echo \"$numbers\"\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n=$1\n    if [ $n -lt 1 ] || [ $n -gt 40 ] ; then \n        echo \"\
    Please enter a number in the range [1,40]\"\n        return 1\n    fi\n    local\
    \ prev1=3\n    local prev2=prev1\n    local prev3=prev2+prev1\n    echo $prev3\n\
    \    local i=1\n    while [ $i -le $n ] ; do\n        local next1=prev2+prev1\n\
    \        local next2=prev2-prev1\n        local next3=next2+next1\n        prev3=$next3\n\
    \        prev1=$next1\n        prev2=$next2\n        echo $prev3\n        i=$((i+1))\n\
    \    done\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2\
    \ 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    if [ $# -ne 1 ]\n    then\n        echo \"You have to enter a non-negative\
    \ integer number n.\"\n        exit 1\n    fi\n\n    local n=$1\n    \n    local\
    \ res=($(( 3*n+1 ))) # The first n + 1 numbers of the Tribonacci sequence.\n \
    \   local i\n    \n    # Tribonacci sequence can be generated by sums of three\
    \ consecutive terms.\n    # Example: 1, 2, 3, 6, 10, 15, 21\n    # 1 + 3, 2 +\
    \ 6, 3 + 10, 6 + 15, 10 + 21, 15 + 21\n    # This is why we use the following\
    \ code to calculate each consecutive sum.\n    for ((i=1; i<n; i++)); do\n   \
    \     local s=$(( $(res[$((i-2)+1))]+$(res[$((i-1)+1))]+$(res[$i]) ))\n      \
    \  res[$((i-1))]=$s\n        echo \"\\\"$s\\\"${res[$i]}${res[$((i+1))]}${res[$((i+2))]}\"\
    \n    done\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2\
    \ 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp3o08iuqr.sh: line 37: bad substitution: no closing `)'' in s=$((
    $(res[$((i-2)+1))]+$(res[$((i-1)+1))]+$(res[$i]) ))

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n=$1\n    if [ \"$n\" -eq 1 ]; then\n        echo \"1\"\n    elif [\
    \ \"$n\" -eq 2 ]; then\n        echo \"2\"\n    elif [ \"$n\" -eq 3 ]; then\n\
    \        echo \"3\"\n    elif [ \"$n\" -eq 4 ]; then\n        echo \"4\"\n   \
    \ elif [ \"$n\" -eq 5 ]; then\n        echo \"5\"\n    elif [ \"$n\" -eq 6 ];\
    \ then\n        echo \"6\"\n    elif [ \"$n\" -eq 7 ]; then\n        echo \"7\"\
    \n    elif [ \"$n\" -eq 8 ]; then\n        echo \"8\"\n    elif [ \"$n\" -eq 9\
    \ ]; then\n        echo \"9\"\n    elif [ \"$n\" -eq 10 ]; then\n        echo\
    \ \"10\"\n    elif [ \"$n\" -eq 11 ]; then\n        echo \"11\"\n    elif [ \"\
    $n\" -eq 12 ]; then\n        echo \"12\"\n    elif [ \"$n\" -eq 13 ]; then\n \
    \       echo \"13\"\n    elif [ \"$n\" -eq 14 ]; then\n        echo \"14\"\n \
    \   elif [ \"$n\" -eq 15 ]; then\n        echo \"15\"\n    elif [ \"$n\" -eq 16\
    \ ]; then\n        echo \"16\"\n    elif [ \"$n\" -eq 17 ]; then\n        echo\
    \ \"17\"\n    elif [ \"$n\" -eq 18 ]; then\n        echo \"18\"\n    elif [ \"\
    $n\" -eq 19 ]; then\n        echo \"19\"\n    elif [ \"$n\" -eq 20 ]; then\n \
    \       echo \"20\"\n    elif [ \"$n\" -eq 21 ]; then\n        echo \"21\"\n \
    \   elif [ \"$n\" -eq 22 ]; then\n        echo \"22\"\n    elif [ \"$n\" -eq 23\
    \ ]; then\n        echo \"23\"\n    elif [ \"$n\" -eq 24 ]; then\n        echo\
    \ \"24\"\n    elif [ \"$n\" -eq 25 ]; then\n        echo \"25\"\n    elif [ \"\
    $n\" -eq 26 ]; then\n        echo \"26\"\n    elif [ \"$n\" -eq 27 ]; then\n \
    \       echo \"27\"\n    elif [ \"$n\" -eq 28 ]; then\n        echo \"28\"\n \
    \   elif [ \"$n\" -eq 29 ]; then\n        echo \"29\"\n    elif [ \"$n\" -eq 30\
    \ ]; then\n        echo \"30\"\n    elif [ \"$n\" -eq 31 ]; then\n        echo\
    \ \"31\"\n    elif [ \"$n\" -eq 32 ]; then\n        echo \"32\"\n    elif [ \"\
    $n\" -eq 33 ]; then\n        echo \"33\"\n    elif [ \"$n\" -eq 34 ]; then\n \
    \       echo \"34\"\n    elif [ \"$\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate\
    \ \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n\
    \    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\")\
    \ = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24\
    \ 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmp2vgproca.sh: line 108: unexpected EOF while looking for matching
    `"''

    /tmp/tmp2vgproca.sh: line 112: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: -1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \tif [ $1 -lt 2 ] ; then\n\t\techo \"ERROR: tri called with $1 less than 2\"\n\
    \t\texit 1\n\tfi\n\t\n\tif [ $1 -eq 2 ] ; then\n\t\techo \"\\\"$1\\\"\"\n\t\t\
    return\n\tfi\n\n\t# The tricky part starts here:\n\ta=1\n\tb=1\n\tc=1\n\twhile\
    \ [ $1 -gt 0 ] ; do\n\t\tlet a=$a+b\n\t\tlet b=$a+c\n\t\tlet c=$b-a\n\t\tlet n=$c+a\n\
    \t\techo \"\\\"$n\\\"\"\n\t\tlet \"n=$n-1\"\n\t\tlet \"n=$n+1\"\n\t\tlet \"n=$n-1\"\
    \n\t\tlet \"n=$n+1\"\n\tdone\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"\
    4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n   \
    \ [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"\
    1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n\
    \    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=59 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=25 encoding='utf-8'>
  timestamp: 1660058652
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \tlocal n=$1\n\tlocal a[1]=3 \n\tlocal b[2]=1 \n\tlocal i=1\n\tlocal res=\"\"\n\
    \tfor i in `seq 2 $((n+1))`; do\n\t\tif [ $i -eq 1 ]; then\n\t\t\tres=\"$res\"\
    \"$a\"\n\t\telse\n\t\t\tres=\"$res\"\"$b[(($i-1)%$((${#b[@]}-1)))]+$a[(($i-1)%$((${#a[@]}-1)))]\"\
    \n\t\tfi\n\tdone\n\techo $res\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"\
    4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n   \
    \ [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"\
    1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n\
    \    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  local i j\n  local n list\n  \n  n=$1\n  list=$(nproc --all --show=$((n+2))\
    \ --sort --numeric-sort --blocksize=1 --lf --group=$((n+2)) --unbuffered --output=$'\\\
    n' -- $1 <<< \"$1\")\n\n  i=1\n  j=0\n  list=\"$list ${list[1]}\"\n  list=\"$list\
    \ ${list[2]}\"\n  list=\"$list $((n-i))\"\n\n  while [ \"$j\" -le \"$n\" ]\n \
    \ do\n    list=\"$list $((i+j))\"\n    i=$((i+2))\n    j=$((j+2))\n  done\n\n\
    \  echo \"$list\" | sed 's/^\"\\(.*\\)\"$/\\\"\\\"\\1/' | sed 's/^\"\\(.*\\)\"\
    $/\\\"\\\"\\1/' | sed 's/^\"\\(.*\\)\"$/\\\"\\\"\\1/' | sed 's/^\"\\(.*\\)\"$/\\\
    \"\\\"\\1/' | sed 's/^\"\\(.*\\)\"$/\\\"\\\"\\1/' | sed 's/^\"\\(.*\\)\"$/\\\"\
    \\\"\\1/' | sed 's/^\"\\(.*\\)\"$/\\\"\\\"\\1/'\n}\n\ncandidate() {\n    tri \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n\
    \    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"\
    1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'nproc: unrecognized option ''--show=5''

    Try ''nproc --help'' for more information.

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n=$1\n    local sum=1\n    local i=2\n    local j=3\n    while [ $i\
    \ -le $n ] ; do\n        (( sum=$sum + $j))\n        (( i=$i+1 ))\n        ((\
    \ j=$j+1 ))\n    done\n    echo \"$sum\"\n}\n\ncandidate() {\n    tri \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[\
    \ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8\
    \ 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    echo \"$1\" | tr ' ' '\\n' | sort -nr | tr '\\n' ' '\n}\n\ncandidate() {\n\
    \    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3\
    \ 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"\
    5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n\
    \    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\"\
    ) = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24\
    \ 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8\
    \ 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  local i=1\n  for i in $(seq 1 $1); do\n      echo $(($(eval echo 1 + $i)))\n\
    \  done\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  if [ $# -gt 0 ]\n  then\n    if [ $1 -gt 3 ]\n    then\n      echo \"Tribonacci\
    \ sequence is defined by\"\n      echo \"the recurrence:\"\n      echo \"tri(1)\
    \ = 3\"\n      echo \"tri(n) = 1 + n / 2, if n is even\"\n      echo \"tri(n)\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd\"\n      echo \"For example:\"\
    \ \n      echo \"tri(2) = 1 + (2 / 2) = 2\"\n      echo \"tri(4) = 3\"\n     \
    \ echo \"tri(3) = tri(2) + tri(1) + tri(4)\"\n      echo \" = 2 + 3 + 3 = 8 \"\
    \n      echo \"You are given a non-negative integer number n, you have\"\n   \
    \   echo \"to a return a list of the first n + 1 numbers of the Tribonacci sequence.\"\
    \n      echo \"Examples:\"\n      echo \"$(tri \"3\")\"\n    else\n      a=$(echo\
    \ \"$1\"|cut -c1-5)\n      if [ \"$a\" -eq 1 ]\n      then\n        b=3\n    \
    \  else\n        b=$(echo \"$(($a + 1))\"|cut -c1-5)\n      fi\n      echo \"\
    $b\"\n    fi\n  else\n    echo \"Error: No arguments given\"\n  fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  echo \"$1\" | awk -v OFS=\",\" -v n=$(echo \"$1\" | awk '{print int($1/2)+int($1/2)+int($1%2)}')\
    \ 'BEGIN{for (i=1;i<=n;i++){print int($i/(sqrt(5)))+int($i/(sqrt(5)))+int($i/(sqrt(5))),\
    \ $i}}'\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  local -n n=$1\n  shift\n  local -a arr=($@)\n  local -i k=0\n  [[ -n $n ]]\
    \ || return\n  while (( $k <= ${#arr[@]} )) ; do\n    (( arr[$k]++ ))\n    ((\
    \ k++ ))\n  done\n  return\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"\
    4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n   \
    \ [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"\
    1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n\
    \    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmplyq6t_dp.sh: line 21: local: `3'': invalid variable name for name
    reference

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \t# Your code here\n\tlet a=3;b=1;c=0;\n\tlet n=$1\n\tlet arr=($(eval echo {1..$n}))\n\
    \tlet i=${#arr[@]}\n\techo \"${arr[@]:0:i+1}\"\n}\n\ncandidate() {\n    tri \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n\
    \    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"\
    1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpgvo2e_tw.sh: line 24: let: arr=(1: missing `)'' (error token is
    "1")

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  local n=\"$1\"\n  echo \"${tri:-n}\"\n}\n\ncandidate() {\n    tri \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[\
    \ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8\
    \ 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \tlocal n=$1\n\tshift\n\tlocal first=\"${1}/${2}/${3}\"\n\tlocal second=`echo\
    \ ${first} | sed 's/\\(\\([0-9]*\\)\\{1\\}\\)/\\2/' | bc -l`\n\tlocal third=`echo\
    \ ${second} | sed 's/\\(\\([0-9]*\\)\\{2\\}\\)/\\3/' | bc -l`\n\tprintf \"$first\\\
    n$second\\n$third\\n\"\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    sed: -e expression #1, char 25: invalid reference \3 on `s'' command''s RHS

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  local number=$1\n  local arr1=($(eval echo {1..$number}))\n  local arr2=($(eval\
    \ echo {0..$(( $(expr $number - 1)  )) }) )\n  local arr3=($(eval echo {0..$((\
    \ $number - 2)  )) }) )\n  local arr4=($(eval echo {1..$(( $number + 1))}) )\n\
    \  local output\n  local i\n  output=\"['\"\n  for (( i = 0; i < $number; i++\
    \ )); do\n    output += $arr1[$i] + $arr2[$i] + $arr3[$i] + $arr4[$i]\n    output\
    \ += \", \"\n  done\n  output += \"]\"\n  echo \"$output\"\n}\n\ncandidate() {\n\
    \    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3\
    \ 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"\
    5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n\
    \    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\"\
    ) = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24\
    \ 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8\
    \ 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnpnynv_9.sh: line 24: syntax error near unexpected token `)''

    /tmp/tmpnpnynv_9.sh: line 24: `  local arr3=($(eval echo {0..$(( $number - 2)  ))
    }) )''

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    if [[ $1 =~ ^[0-9]+$ ]]; then\n    local n=$1\n    local i sum=$(tri $((n\
    \ - 1))) sum2=$(( $(tri $((n - 2))) + $(tri $((n + 1)))))\n    for ((i = 3; i\
    \ <= n; i++)); do\n        sum=$((sum + i))\n        sum2=$(( sum2 + $(tri $((n\
    \ - i))))\n    done\n    echo -n \"${sum},${sum2}\"\n    else\n    echo \"Incorrect\
    \ input\"\n    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvd3w1sju.sh: line 26: unexpected EOF while looking for matching
    `)''

    /tmp/tmpvd3w1sju.sh: line 53: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  local n=$1\n  printf '%s\\n' \"${tri_prefix[$((${#tri_prefix[@]}-1))]:1}\"\
    \ \n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp68torti1.sh: line 22: tri_prefix: bad array subscript

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: -1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  (( $# < 1 )) && echo \"Invalid number of arguments: tri requires at least one\
    \ argument\" && return 1\n  \n  local n x1 x2 x3 x4 x5 x6 x7 x8 x9 x10\n  (( $#\
    \ > 1 )) && echo \"Too many arguments given: tri requires exactly one argument\"\
    \ && return 1\n\n  n=${1}\n  (( $n == 0 )) && echo \"Invalid number of arguments:\
    \ tri requires non-zero argument value\" && return 1\n\n  x=$(expr $n \\* 3 +\
    \ 1)\n  (( x == 2 )) && echo \"Invalid number of arguments: tri requires non-negative\
    \ argument value\"\n\n  x1=$(( ${x}-1 ))\n  x2=$(( ${x}-1 ))\n  x3=$(( ${x} ))\n\
    \  x4=$(( ${x} ))\n  x5=$(( ${x} ))\n  x6=$(( ${x} ))\n  x7=$(( ${x} ))\n  x8=$((\
    \ ${x} ))\n  x9=$(( ${x} ))\n  x10=$(( ${x} ))\n\n  while (( ${x} >= 1 )); do\n\
    \    x3=$(( ${x} + ${x} ))\n    x4=$(( ${x} + ${x} ))\n    x5=$(( ${x} + ${x}\
    \ ))\n    x6=$(( ${x} + ${x} ))\n    x7=$(( ${x} + ${x} ))\n    x8=$(( ${x} +\
    \ ${x} ))\n    x9=$(( ${x} + ${x} ))\n    x10=$(( ${x} + ${x} ))\n  done\n\n \
    \ echo \"$x1$x2$x3$x4$x5$x6$x7$x8$x9$x10\"\n}\n\ncandidate() {\n    tri \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[\
    \ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8\
    \ 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=48 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=17 encoding='utf-8'>
  timestamp: 1660058652
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n=$1\n    local i=1\n    local sum=0 \n    local output\n    \n   \
    \ while [ $i -le $n ]; do\n        if [ $((i % 2)) -eq 0 ]; then \n          \
    \  sum=$((sum + $i))\n        else \n            sum=$((sum + $((i + 1))))\n \
    \       fi\n        i=$((i + 1))\n    done \n    output=$(eval echo $sum)\n  \
    \  echo $output\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3\
    \ 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  if [ $1 -le 2 ]; then \n    echo \"$1\"\n  elif [ $1 -eq 4 ]; then \n    echo\
    \ \"$1\"\n  else \n    tri $(($1 -1))\n    echo \"$1 + $($1 -1) + $($1 -2)\"\n\
    \  fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0j2rmdzh.sh: line 27: 3: command not found

    /tmp/tmp0j2rmdzh.sh: line 27: 3: command not found

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  local n=$1\n  local i k\n  local result\n  result=()\n  i=$(eval \"echo $n\
    \ / 2\" )\n  k=$(eval \"echo $n / 3\" )\n  result+=$(eval echo ${i})\n  if [ $((\
    \ n % 2 )) -eq 0 ]; then \n    result+=$(eval echo ${i})\n    result+=$(eval echo\
    \ ${k})\n  else\n    result+=$(eval echo ${k})\n    result+=$(eval echo ${i})\n\
    \  fi\n  eval \"echo $result | tr ' ' '\\n'\"\n}\n\ncandidate() {\n    tri \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n\
    \    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"\
    1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \techo \"$1 ${2}/2\" >/dev/null\n\t(( $1 % 2 )) && echo \"1 + ${2}/2 ${3}\" >/dev/null\n\
    \techo \"${1}+${2}/2+${3}\" >/dev/null\n\t(( $1 % 2 )) && echo \"${1} + ${2}/2\"\
    \ >/dev/null\n\techo \"${1}+${2}/2+${3}\" >/dev/null\n}\n\ncandidate() {\n   \
    \ tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\"\
    \ ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\")\
    \ = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n \
    \   [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\"\
    ) = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24\
    \ 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8\
    \ 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  if [[ ! -z \"$1\" ]] && [[ ! -z \"$2\" ]]; then\n    local n=\"$1\"\n    local\
    \ res\n    local i=1\n    local j=0\n    res=()\n    while [[ ${#res} -lt ${#n}\
    \ ]]; do\n      res[j]=\"$(( j+1 ))\"\n      i=$(( i+1 ))\n      j=$(( j+1 ))\n\
    \    done\n    res[j]=\"$(( j+1 ))\"\n    res=$(echo \"${res[*]}\" | sed 's/^/echo\
    \ /')\n    echo ${res[*]}\n  else\n    echo \"\"\n  fi\n}\n\ncandidate() {\n \
    \   tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2\
    \ 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"\
    5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n\
    \    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\"\
    ) = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24\
    \ 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8\
    \ 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: -1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    declare -i n \n    declare -i x y \n    declare -i acc \n    \n    # Read\
    \ input\n    read -p 'Input a non-negative integer: ' n\n    \n    # Compute Tribonacci\
    \ sequence\n    for ((x=0;x<n;x++)) ; do\n        y=$((x+x+x))\n        acc=$((x+y))\n\
    \        echo \"$acc\"\n    done\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate\
    \ \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n\
    \    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\")\
    \ = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24\
    \ 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=42 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=26 encoding='utf-8'>
  timestamp: 1660058652
- exit_code: -1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \   if [ $1 != \"\" ]\n   then\n      echo $(($(tri $1 - 1) + $(tri $1 - 2) +\
    \ $(tri $1 + 1)))\n   else\n      echo \"-1\"\n   fi\n}\n\ncandidate() {\n   \
    \ tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\"\
    \ ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\")\
    \ = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n \
    \   [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\"\
    ) = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24\
    \ 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8\
    \ 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=55 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=7 encoding='utf-8'>
  timestamp: 1660058652
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  local n \n  (( n = $1 ))\n  \n  if [[ $n -le 0 ]]; then\n    echo []\n  else\n\
    \    local -a arr\n    local -i i \n    local -j\n    for (( i = 1; i <= n; i++\
    \ )); do\n      (( i = i + 2 ))\n      if (( i % 2 )); then \n        arr+=(\"\
    $i\")\n      else\n        (( j = i - 1 ))\n        arr+=(\"$(( i - 1 ))\")\n\
    \        arr+=(\"$(( j + 1 ))\")\n      fi\n    done\n    echo ${arr[@]}\n  fi\n\
    }\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpyj__wme0.sh: line 29: local: -j: invalid option

    local: usage: local [option] name[=value] ...

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  # let n is $1 as string\n  # n is odd\n  if [[ $1 =~ ^[0-9]+$ ]]; then\n  \
    \  let n=$1\n    let \"tri_sum = 0\"\n    let \"tri_cur = 1\"\n    if [[ \"$n\"\
    \ =~ ^[0-9]+$ ]]; then\n      while [[ \"$n\" -ge 0 ]]; do\n        let \"tri_sum\
    \ += $tri_cur\"\n        let \"tri_cur += $tri_cur + $tri_cur\"\n        let \"\
    n -= 2\"\n      done\n      echo $tri_sum\n    else\n      echo \"Error\"\n  \
    \  fi\n  # n is even\n  else\n    echo \"Error\"\n  fi\n}\n\ncandidate() {\n \
    \   tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2\
    \ 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"\
    5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n\
    \    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\"\
    ) = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24\
    \ 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8\
    \ 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n=$1\n    local s=\"\"\n    local d\n    if [ $n -eq 1 ]; then \n \
    \       s=\"1\"\n    elif [ $((n-1)) -eq 0 ]; then \n        s=\"0\"\n    elif\
    \ [ $((n-1)) -eq 1 ]; then\n        s=\"$((n))\"\n    else\n        d=$(tri $((n-1)))\
    \ \n        s=$((s+$((d+$(((n-1)-$((n-d)))))))\n    fi\n    echo \"$s\"\"$((n+1))\"\
    \n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb6tpkdjb.sh: line 32: unexpected EOF while looking for matching
    `)''

    /tmp/tmpb6tpkdjb.sh: line 56: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local i\n    local sum\n    local length\n    local i\n    local j\n    local\
    \ k\n    local limit\n    local tmp\n\n    limit=\"${1:-${MAXNUM}}\" # If the\
    \ limit was not passed, default to MAXNUM\n    sum=\"$( echo \"${1:-${MAXNUM}}\"\
    \ |awk '{print $1}' )\"\n\n    # Get the length of the number\n    length=${#sum}\n\
    \    \n    # If the length is zero, just return an empty string\n    if [ \"$length\"\
    \ -eq \"0\" ]; then\n        return\n    fi\n\n    # Loop through numbers until\
    \ we reach the required length\n    for (( i = 1; i <= length; ++i )); do\n  \
    \      tmp=\"$(echo \"${sum}\" | awk \"{ print substr(\\$0,$i,1)}\" \"${1:-${MAXNUM}}\"\
    \ )\" || return\n        sum=$( echo \"$tmp $tmp\" | awk '{s+=$1} END { print\
    \ $s}' )\n    done\n\n    # Put the numbers in the list\n    i=0\n    length=${#sum}\n\
    \    list=\"\"\n    for (( i = 1; i <= length; ++i )); do\n        list=\"$( echo\
    \ \"$list\" | awk \"{ print substr(\\$0,$i,1)}\" \"${1:-${MAXNUM}}\" )\"\n   \
    \ done\n\n    # Return the list\n    echo $list\n}\n\ncandidate() {\n    tri \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n\
    \    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"\
    1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local i\n    local n=$1\n    local sum\n    local result\n    sum=$((n+1))\n\
    \    result=($(seq ${n}))\n    echo ${result[@]}\n}\n\ncandidate() {\n    tri\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n\
    \    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"\
    1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  if [ \"$1\" -lt 1 ]; then\n    echo \"No arguments given\"\n    exit\n  fi\n\
    \n  local i\n  local out\n\n  if [ \"$1\" -eq 1 ]; then\n    out=\"1\"\n  else\n\
    \    i=1\n    while [ \"$i\" -le \"$1\" ]; do\n      out=\"$out,$(( $i + $(( $i\
    \ + 1 )) ))\"\n      (( i += 2 ))\n    done\n  fi\n\n  echo \"$out\"\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n=\"$1\"\n    if [ ! $n -gt 2 ] || [ $n -lt 1 ]\n    then\n       \
    \ echo \"Usage: $(basename $0) n\"\n        exit 1\n    fi\n    local -i i\n \
    \   local -i j\n    local result=()\n    for ((i = 0; i <= $((n - 1)); i++));\
    \ do\n        result+=($(eval echo ${!i}+${!(i+1)}))\n    done\n    result+=(\"\
    ${!n}\")\n    eval echo \"\\\"${result[@]}\\\"\"\n}\n\ncandidate() {\n    tri\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n\
    \    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"\
    1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpg_u5zvy0.sh: line 31: ${!i}+${!(i+1)}: bad substitution

    /tmp/tmpg_u5zvy0.sh: line 31: ${!i}+${!(i+1)}: bad substitution

    /tmp/tmpg_u5zvy0.sh: line 31: ${!i}+${!(i+1)}: bad substitution

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  (( ${#} > 1 )) && printf 'Too many arguments, not an integer.'\n  (( ${#} ==\
    \ 1 )) && printf 'Too few arguments, not an integer.'\n  [[ ! $1 =~ ^[0-9]+$ ]]\
    \ && printf 'Argument must be an integer.' && exit 1\n  [[ ! $1 =~ ^[0-9]+$ ]]\
    \ && printf 'Argument must be an integer.' && exit 1\n  n=$1\n  (( n >= 1 )) &&\
    \ printf 'Bad argument, number must be greater than 1.' && exit 1\n  (( n == 1\
    \ )) && printf 'Bad argument, number must be greater than 1.' && exit 1\n  ((\
    \ n == 2 )) && printf 'Bad argument, number must be greater than 1.' && exit 1\n\
    \  (( n % 2 != 0 )) && printf 'Bad argument, number must be odd.' && exit 1\n\
    \  for i in {1..n} do\n    printf \"%d\" \"$(echo $(( $(echo $(( $(echo $(( $(echo\
    \ $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo\
    \ $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo\
    \ $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo\
    \ $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo\
    \ $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo\
    \ $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo\
    \ $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo\
    \ $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo\
    \ $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo\
    \ $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo\
    \ $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo\
    \ $(( $(echo $(( $(echo $((\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"\
    4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n   \
    \ [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"\
    1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n\
    \    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpz4fvxlif.sh: line 31: syntax error near unexpected token `printf''

    /tmp/tmpz4fvxlif.sh: line 31: `    printf "%d" "$(echo $(( $(echo $(( $(echo $((
    $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo
    $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $((
    $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo
    $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $((
    $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo
    $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $((
    $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo
    $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $((
    $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo
    $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $((
    $(echo $(( $(echo $(( $(echo $(( $(echo $(( $(echo $((''

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n=$1 \n    if [ $n -gt 1 ] ; then\n        echo \"Usage: $(tri <n>)\"\
    \n    else\n        if [ $((n % 2)) -eq 1 ] ; then\n            tri $((n - 1))\n\
    \        else\n            tri $((n - 1)) + $((n - 2)) + $((n + 1))\n        fi\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp273vk2ql.sh: command substitution: line 24: syntax error near unexpected
    token `)''

    /tmp/tmp273vk2ql.sh: command substitution: line 24: `tri <n>)"''

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \t[[ $1 =~ ^[[:digit:]]+$ ]] || return\n\tlet n=$(echo \"$1\" | bc) \n\tprintf\
    \ -v s \"\" \"%s\" \"$({ [[ $n -lt 2 ]] && echo ${s:-\"\"} || echo \"$(echo ${s%:*}\
    \ | sed -E 's/^([0-9]+):.*$/\"&\"/')\"})\"\n\tprintf -v s \"\" \"%s\" \"$({ [[\
    \ $n -eq 1 ]] && echo ${s:-\"\"} || echo \"$(echo ${s%:*} | sed -E 's/^([0-9]+):.*/\"\
    &\"/')\"})\"\n\tprintf -v s \"\" \"%s\" \"$({ [[ $n -eq 2 ]] && echo ${s:-\"\"\
    } || echo \"$(echo ${s%:*} | sed -E 's/^([0-9]+):.*$/\"&\"/')\"})\"\n\tprintf\
    \ -v s \"\" \"%s\" \"$({ [[ $n -eq 3 ]] && echo ${s:-\"\"} || echo \"$(echo ${s%:*}\
    \ | sed -E 's/^([0-9]+):.*/\"&\"/')\"})\"\n\tprintf -v s \"\" \"%s\" \"$({ [[\
    \ $n -eq 4 ]] && echo ${s:-\"\"} || echo \"$(echo ${s%:*} | sed -E 's/^([0-9]+):.*$/\"\
    &\"/')\"})\"\n\tprintf -v s \"\" \"%s\" \"$({ [[ $n -eq 5 ]] && echo ${s:-\"\"\
    } || echo \"$(echo ${s%:*} | sed -E 's/^([0-9]+):.*/\"&\"/')\"})\"\n\tprintf -v\
    \ s \"\" \"%s\" \"$({ [[ $n -eq 6 ]] && echo ${s:-\"\"} || echo \"$(echo ${s%:*}\
    \ | sed -E 's/^([0-9]+):.*$/\"&\"/')\"})\"\n\tprintf -v s \"\" \"%s\" \"$({ [[\
    \ $n -eq 7 ]] && echo ${s:-\"\"} || echo \"$(echo ${s%:*} | sed -E 's/^([0-9]+):.*/\"\
    &\"/')\"})\"\n\tprintf -v s \"\" \"%s\" \"$({ [[ $n -eq 8 ]] && echo ${s:-\"\"\
    } || echo \"$(echo ${s%:*} | sed -E 's/^([0-9]+):.*$/\"&\"/')\"})\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpon007skr.sh: line 49: unexpected EOF while looking for matching
    `"''

    /tmp/tmpon007skr.sh: line 53: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    n=$1\n    tri_array=(\"$(1)\" \"$(1)\" \"$(1)\" \"${tri_array[@]:0:1}\")\n\
    \    if [[ ( $(n%2) -eq 0 ) && ( -n $n ) ]]; then\n        tri_array=(\"$(1)\"\
    \ \"$(1)\" \"${tri_array[@]:1}\")\n    fi\n    echo \"${tri_array[@]}\"\n}\n\n\
    candidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4mtq5xy_.sh: line 22: 1: command not found

    /tmp/tmp4mtq5xy_.sh: line 22: 1: command not found

    /tmp/tmp4mtq5xy_.sh: line 22: 1: command not found

    /tmp/tmp4mtq5xy_.sh: line 23: n%2: command not found

    /tmp/tmp4mtq5xy_.sh: line 24: 1: command not found

    /tmp/tmp4mtq5xy_.sh: line 24: 1: command not found

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    # Write your code here\n    if [ \"$1\" -lt 0 ]\n    then\n        echo \"\
    Wrong input. Try again.\"\n    else\n        echo \"$(( $(echo \"(1 + $1) // 2\"\
    \ | bc ) ))\"\n        for i in $(seq 0 $1); do\n            echo \"$(( ($(echo\
    \ \"$i\" | bc) + $(echo \"$i | bc\") + $(echo \"$i | bc\") ) ))\"\n        done\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \   local i j k \n   \n   if test $# -eq 0 \n    then\n       echo '' \n     \
    \  return \n   fi\n   if test $# -eq 1\n    then\n       echo \"$1\"\n       return\
    \ \n   fi\n   for ((i = 3; i <= $1; i++))\n    do\n       for ((j = 1; j <= i;\
    \ j++))\n       do\n          for ((k = 1; k <= j; k++))\n          do\n     \
    \        echo \"$k\"\n          done\n       done\n    done\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n=$1\n    local a=0 b=1\n    local sum=0\n    local last\n\n    echo\
    \ $n | cut -d \"(\" -f 1\n    for ((i=0;i<$n;i++))\n    do\n        echo $a $b\n\
    \        a=$(b); b=$(a) \n        sum=$(($sum + $a))\n        last=$a\n    done\n\
    \    echo $sum\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3\
    \ 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpg2fuyzw_.sh: line 30: b: command not found

    /tmp/tmpg2fuyzw_.sh: line 30: a: command not found

    /tmp/tmpg2fuyzw_.sh: line 31: 0 + : syntax error: operand expected (error token
    is "+ ")

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  local n=$1\n  local fib_numbers=()\n  fib_numbers[0]=\"${fib_numbers[0]}${fib_numbers[1]}\"\
    \n  local i\n  for ((i=2; i<n; i++)); do\n    local next_i=$(expr $i - 1)\n  \
    \  local next_j=$(expr $i + 1)\n    local next_k=$(expr $i + 2)\n    local fib=\"\
    ${fib_numbers[i]}${fib_numbers[next_i]}${fib_numbers[next_j]}${fib_numbers[next_k]}\"\
    \n    fib_numbers[i]=\"${fib}\"\n  done\n  printf '%s\\n' \"${fib_numbers[@]}\"\
    \ | cut -d '\"' -f -\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'cut: invalid range with no endpoint: -

    Try ''cut --help'' for more information.

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    if [ $1 -lt 1 ] ; then\n        echo \"Invalid input\"\n    else\n      \
    \  (( n = $1 ))\n        # Tribonacci sequence\n        if [ $n -eq 2 ] ; then\n\
    \            echo \"\\\"${n}\\\"\"\n            return\n        fi\n        #\
    \ Odd number of elements in the sequence\n        if [ $((n % 2)) -eq 1 ] ; then\n\
    \            echo \"\\\"${n}\\\"\"\n            return\n        fi\n        #\
    \ Odd number of elements in the sequence\n        if [ $((n % 2)) -eq 0 ] ; then\n\
    \            echo \"\\\"${n}\\\"\"\n            return\n        fi\n        #\
    \ Recursive call\n        (( n1 = n - 1 ))\n        (( n2 = n - 2 ))\n       \
    \ (( n3 = n - 3 ))\n        echo $(tri $n1); echo $(tri $n2); echo $(tri $n3)\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  local n=$1; shift; shift;\n  declare -i n i\n  (( n = n )) || return 0;\n \
    \ (( n % 2 )) && return $(( 1 + n / 2 )); \n  (( n % 2 )) && return $(( $( tri(\
    \ n - 1 ) + tri( n - 2 ) + tri( n + 1 ) )));\n}\n\ncandidate() {\n    tri \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[\
    \ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8\
    \ 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    declare -i a\n    declare -i i\n    declare -i c\n    declare -i k\n    declare\
    \ -i x\n    a=1\n    b=3\n    c=a+b\n    for (( i=1 ; i<=$1 ; i++ )); do\n\tx=$c\n\
    \tc=a\n\ta=$(( a+b ))\n\tb=$(( x+c ))\n\tx\n    done\n}\n\ncandidate() {\n   \
    \ tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\"\
    \ ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\")\
    \ = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n \
    \   [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\"\
    ) = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24\
    \ 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8\
    \ 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2er_96t_.sh: line 34: x: command not found

    /tmp/tmp2er_96t_.sh: line 34: x: command not found

    /tmp/tmp2er_96t_.sh: line 34: x: command not found

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n=$1\n    local t=1\n    local r=3\n    local a=1\n    local b=1\n\
    \    local c=1\n    local s=\"\"\n    \n    while [ $n -gt 0 ]\n    do\n     \
    \   echo $t\n        (( n-- ))\n        (( r-- ))\n        (( a++ ))\n       \
    \ (( b++ ))\n        (( c++ ))\n        s=$s+$(( $a + $b ))\n    done\n    echo\
    \ $s\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  # Write your code here.\n  local n=$1\n  local i a b c\n  a=$((3*(n+1))); b=$((2*(n+1)));\
    \ c=$((n*(n+1))); echo \"$a\" \"$b\" \"$c\"\n}\n\ncandidate() {\n    tri \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[\
    \ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8\
    \ 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  local n=$1\n  local a=($(echo \"$n\" | (read -r a) ; echo $a))\n  if [ $(echo\
    \ \"$n\" | bc) -eq 0 ]; then\n    echo \"$a\"\n  else\n    local b=($(echo \"\
    $n\" | (read -r b) ; echo $b))\n    local c=($(echo \"$n + 1\" | (read -r c) ;\
    \ echo $c))\n    echo \"$a$b\"$c\"\n  fi\n}\n\ncandidate() {\n    tri \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[\
    \ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8\
    \ 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppb3dpvd1.sh: line 47: unexpected EOF while looking for matching
    `"''

    /tmp/tmppb3dpvd1.sh: line 51: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \tif [[ $1 -ge 1 ]] && [[ $1 -le 9 ]]; then\n\t\ta=$(( 3 * $1 ))\n\t\tb=$(( $1\
    \ + 3 ))\n\t\tc=$(( 1 + $1 ))\n\t\td=$(( 2 * $1 ))\n\t\te=$(( 1 + $1 ))\n\t\t\
    f=$(( 2 * $1 ))\n\t\tg=$(( $1 + 1 ))\n\t\th=$(( $1 + 2 ))\n\t\ti=$(( $1 + 3 ))\n\
    \t\tj=$(( $1 + 4 ))\n\t\tk=$(( $1 + 5 ))\n\t\tl=$(( $1 + 6 ))\n\t\tm=$(( $1 +\
    \ 7 ))\n\t\tn=$(( $1 + 8 ))\n\t\to=$(( $1 + 9 ))\n\t\tp=$(( $1 + 10 ))\n\t\tq=$((\
    \ $1 + 11 ))\n\t\tr=$(( $1 + 12 ))\n\t\ts=$(( $1 + 13 ))\n\t\tt=$(( $1 + 14 ))\n\
    \t\tu=$(( $1 + 15 ))\n\t\tv=$(( $1 + 16 ))\n\t\tw=$(( $1 + 17 ))\n\t\tx=$(( $1\
    \ + 18 ))\n\t\ty=$(( $1 + 19 ))\n\t\tz=$(( $1 + 20 ))\n\t\techo $a $b $c $d $e\
    \ $f $g $h $i $j $k $l $m $n $o $p $q $r $s $t $u $v $w $x $y $z\n\telse\n\t\t\
    echo \"Invalid Number!\"\n\tfi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"\
    4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n   \
    \ [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"\
    1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n\
    \    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \   local n=$1\n   echo $n \"\\t$(( ( (n-2))+(( (n-1)/2) ))) $(( ( (n-1)+(( (n)/2)\
    \ ))) )\" \n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2\
    \ 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpoai77iww.sh: command substitution: line 22: syntax error near unexpected
    token `+''

    /tmp/tmpoai77iww.sh: command substitution: line 22: `( ( (n-1)+(( (n)/2) ))) ''

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  echo \"${1}\"\n  (( \"$1\" )) && \n  local n=$(expr \"${1}\" : '-\\?\\(2\\\
    )')\n  echo \"${1}\" \n  (( \"$n\" )) && \n  echo \"${n}\" && \n  (( \"$n\" ))\
    \ && \n  local a b\n  a=$(( ${1%%[+\\-]*} + 1 ))\n  b=$(( ${1##*[-]*} + 1 ))\n\
    \  echo \"${a}\"\n  (( \"$n\" )) && \n  while [ \"$n\" -gt \"0\" ]; do\n    echo\
    \ \"${n}\"\n    (( \"$n\" )) && \n    local c=$(expr \"${n}\" : '-\\?\\(2\\)')\n\
    \    a=$(( ${a%%[+\\-]*} + ${c} ))\n    b=$(( ${b##*[-]*} + ${c} ))\n    echo\
    \ \"${a}\"\n    (( \"$n\" )) && \n  done && \n  echo \"${b}\"\n  (( \"$n\" ))\
    \ && \n  echo \"${a}\"\n  (( \"$n\" )) && \n  echo \"${b}\"\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwp4jyxjy.sh: line 41: syntax error near unexpected token `done''

    /tmp/tmpwp4jyxjy.sh: line 41: `  done && ''

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n=\"$1\"\n    if [[ $n -lt 2 ]]; then\n        printf -v out \"%d\"\
    \ \"$n\"\n        printf -v tri \"%d\" \"$(( n - 1 ))\"\n        printf -v tail\
    \ \"%d\" \"$(( n + 1 ))\"\n        printf -v result '[%q]' \"$out\"\n        printf\
    \ -v tails '[%q]' \"$tail\"\n        printf -v tailq '%q' \"$tails\"\n       \
    \ printf -v head '[%q]' \"$tri\"\n        printf -v headq '%q' \"$triq\"\n   \
    \     printf -v tailqs '%q' \"$tailq\"\n        printf -v headqs '%q' \"$headq\"\
    \n        printf -v tailqsq '%q' \"$tailqs\"\n        printf -v headqsq '%q' \"\
    $headqs\"\n        printf -v tailqsqs '%q' \"$tailqsq\"\n        printf -v headqsqs\
    \ '%q' \"$headqsq\"\n        printf -v tailqsqsq '%q' \"$tailqsqs\"\n        printf\
    \ -v headqsqsq '%q' \"$headqsqs\"\n        printf -v tailqsqsqs '%q' \"$tailqsqsq\"\
    \n        printf -v headqsqsqs '%q' \"$headqsqsq\"\n        printf -v tailqsqsqsq\
    \ '%q' \"$tailqsqsqs\"\n        printf -v headqsqsqsqs '%q' \"$headqsqsqsq\"\n\
    \        printf -v tailqsqsqsqs '%q' \"$tailqsqsqsqs\"\n        printf -v headqsqsqsqsqs\
    \ '%q' \"$headqsqsqsqs\"\n        printf -v tailqsqsqsqsq '%q' \"$tailqsqsqsqsq\"\
    \n        printf -v headqsqsqsqsqs '%q' \"$headqsqsqsqsqs\"\n        printf -v\
    \ tailqsqsqsqsqsq '%q' \"$tailqsqsqsqsqsq\"\n        printf -v headqsqsqsqsqsqs\
    \ '%q' \"$headqsqsqsqsqsqs\"\n        printf -v tailqsqsqsqsqsqs '%q' \"$tailqsqsqsqsqsqsq\"\
    \n        printf -v\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpoac66pd8.sh: line 51: syntax error near unexpected token `}''

    /tmp/tmpoac66pd8.sh: line 51: `}''

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n=\"${1:?You must input an integer}\"\n    echo \"${tri_sum:+-${tri_sum}}\"\
    \n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  n=$(echo \"$1\" | sed 's/^\\([0-9]*\\).*$/\\1/')\n  echo $(python -c 'print\
    \ \"'$((n*(n+1)/2))'\\n\"')\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"\
    4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n   \
    \ [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"\
    1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n\
    \    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \tif [ $# -eq 0 ]\n\tthen\n\t\techo \"$1\"\n\telse\n\t\techo \"$(echo $(( $1 +\
    \ $1 )) $(( $1 + $2 )) $(( $1 + $3 )) | bc)\"\n\tfi\n}\n\ncandidate() {\n    tri\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n\
    \    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"\
    1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp818zq62b.sh: line 25: 3 +  : syntax error: operand expected (error
    token is "+  ")

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    if [ \"$1\" -lt \"3\" ]; then\n        echo \"-1\"\n        return\n    fi\n\
    \    local i j sum\n    i=1; j=2;sum=1\n    while [ $i -le $1 ]; do\n        sum=$(($sum\
    \ + $j))\n        j=$(($j + 2))\n        i=$(($i + 1))\n    done\n    echo \"\
    $sum\"\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  if [ $# -ne 1 ]\n  then\n    echo \"Error! The argument of the tribonacci sequence\
    \ is incorrect.\"\n  else\n    local result=\"\"\n    if [ $1 -eq 1 ]\n    then\n\
    \      result='\"1\"'\n    elif [ $(($(echo $1 | bc -l)%2)) -eq 1 ]\n    then\n\
    \      result=\"${result} ${tri(${(($(echo $1 | bc -l)-1))} + ${(($(echo $1 |\
    \ bc -l)-1))} + ${(($(echo $1 | bc -l)-2))}\"\n    else\n      result=\"${result}\
    \ ${tri(${(($(echo $1 | bc -l)-1))} + ${(($(echo $1 | bc -l)-2))}\"\n    fi\n\
    \  fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2hlu_7ip.sh: line 53: unexpected EOF while looking for matching
    `"''

    /tmp/tmp2hlu_7ip.sh: line 57: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  if (( $# < 1 || $# -gt 3 )); then\n    echo Usage: $0 number\n    exit 0\n\
    \  fi\n\n  local n=$1 \n  local a=$(( ( $n+1 ) / 2 ))\n  local b=$(( $(( $n+1\
    \ ) / 2 )) ))\n  local c=$(( $(( $(( $n+1 ) / 2 )) )) ))\n\n  while (( $n > 0\
    \ )); do\n    echo $a\n    a=$(( $a + $b ))\n    b=$(( $c + $b ))\n    c=$(( $a\
    \ + $c ))\n    n=$(( $n - 1 ))\n  done\n\n  echo $c\n}\n\ncandidate() {\n    tri\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n\
    \    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"\
    1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmps0gupk85.sh: line 28: syntax error near unexpected token `)''

    /tmp/tmps0gupk85.sh: line 28: `  local b=$(( $(( $n+1 ) / 2 )) ))''

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    # Tribonacci sequence\n    local n=$1\n    # Initialize an array with size\
    \ n, where every element is the previous two tribonacci numbers.\n    local tri[${n}]\n\
    \    # tri[0] = 3\n    tri[0]=3\n    local i=0\n    local temp=0\n    \n    #\
    \ Loop n times\n    while [ $i -lt $n ]; do\n        # When n is even, set tri[2*i]\
    \ = 3 and tri[2*i + 1] = 1\n        if [ ${n} -eq ${i} ]; then\n            tri[$((2*i))]=$((tri[((2*i)-1)]+1))\n\
    \        # When n is odd, set tri[2*i] = tri[2*i + 1] and tri[2*i + 2] = tri[2*i\
    \ + 1] + tri[2*i + 1]\n        else\n            tri[$((2*i))]=$(tri[((2*i)-1)]+1)\n\
    \            tri[$((2*i)+1))]=$(tri[((2*i)+1)]+$(tri[((2*i)-1)]+1))\n        fi\n\
    \        # Store the tribonacci number at tri[2*i]\n        temp=$(tri[$((2*i))])\n\
    \        # Insert \"temp\" at tri[2*i+1], shift the array and increase i\n   \
    \     local j=$((2*(i+1)))\n        tri[$((2*i+1))]=$(temp); shift tri; let i=$i+1\n\
    \    done\n    # Return tri[n]\n    echo \"$tri[$((${n}-1))]\"\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcw86fjgd.sh: line 37: tri[((2*i)-1)]+1: command not found

    /tmp/tmpcw86fjgd.sh: line 38: tri[((2*i)-1)]+1: command not found

    /tmp/tmpcw86fjgd.sh: line 38: tri[((2*i)+1)]+: command not found

    /tmp/tmpcw86fjgd.sh: command substitution: line 38: syntax error near unexpected
    token `+1''

    /tmp/tmpcw86fjgd.sh: command substitution: line 38: `(2*i)+1''

    /tmp/tmpcw86fjgd.sh: line 38: ): syntax error: operand expected (error token is
    ")")

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  n=$1\n  seq 0 \"$n\" | awk -v n=\"$n\" '\n  {\n    printf \"\\\"%s\\\"\" NR\
    \ < n ? $0 : $0 \"\\\"%s\\\"\" NR >= n ? $0 : $0\n  }'\n}\n\ncandidate() {\n \
    \   tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2\
    \ 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"\
    5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n\
    \    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\"\
    ) = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24\
    \ 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8\
    \ 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n=$1\n    local i a b c r\n\n    # Initialize all numbers to 0 \n \
    \   a=0\n    b=0\n    c=0\n    r=$((c+a+b))\n    while [ $n -gt 0 ]; do\n    \
    \    ((n--))\n        case $n in\n            0) r=$c\n            ;;\n      \
    \      1) r=$a\n            ;;\n            2) r=$b\n            ;;\n        \
    \    *)\n                # Get next number in the sequence and add it to the running\
    \ total\n                r=$((r+$((n-$((n-1))))))\n                ((n+1))\n \
    \           ;;\n        esac\n        # Add to the running total\n        a=$b\n\
    \        b=$c\n        c=$r\n    done\n    # Return the total\n    echo $r\n}\n\
    \ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  local n result\n  (( n > 1 )) && return 1>&2 echo \"Invalid input $1\"\n  result=(\
    \ $(seq 3 $(( n - 1 ))) ); result+=($((n+1)) )\n  echo \"$result\"\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: -1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  local n=$1\n  \n  [ $n -lt 0 ] && return 1\n  [ $n == 0 ] && return 0\n  [\
    \ $n == 1 ] && return 3\n  \n  local n1=$(tri ${n-1})\n  local n2=$(tri ${n-2})\n\
    \  local n3=$(tri ${n+1}) \n  \n  echo $n1 \"\\\"$n3\\\"$n2\"\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=30 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=4 encoding='utf-8'>
  timestamp: 1660058652
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \tlocal x=0\n\tlocal a=3\n\tlocal b=3\n\tlocal c=3\n\tlocal d=$1\n\tlocal l\n\t\
    while [[ \"$d\" -gt 0 ]]; do\n\t\tlocal temp=$((a+b+c))\n\t\tif [[ \"$temp\" -gt\
    \ \"$d\" ]]; then\n\t\t\tlocal temp1=$(echo \"$temp / 2\" | bc -l)\n\t\t\tlocal\
    \ temp2=$(echo \"$temp / $temp1\" | bc -l)\n\t\t\tlocal temp3=$(echo \"$temp /\
    \ $temp2\" | bc -l)\n\t\t\tlocal temp4=$(echo \"$temp / $temp3\" | bc -l)\n\t\t\
    \tl=$(echo \"$temp4 + $temp3 + $temp2\" | bc -l)\n\t\t\ta=$(echo \"$temp\" | bc\
    \ -l)\n\t\t\tb=$(cat <<< \"$l\")\n\t\t\tc=$(echo \"$c+$temp\" | bc -l)\n\t\telse\n\
    \t\t\tl=$(echo \"$temp\" | bc -l)\n\t\t\tb=$(cat <<< \"$l\")\n\t\tfi\n\t\td=$(echo\
    \ \"$d+$temp\" | bc -l)\n\tdone\n\tcat <<< \"$b\" | sed 's/\"//g'\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1b4yl37y.sh: line 28: 8.50000000000000000000: syntax error: invalid
    arithmetic operator (error token is ".50000000000000000000")

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: -1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  local n=$1\n  local sum\n  sum=1\n  while [ $n -gt 0 ]; do\n    local i=1\n\
    \    local k=$((n-i+1))\n    local sum1=$((sum+(i*(i+1))/2))\n    local sum2=$((sum+(i*(2*i+1))/2))\n\
    \    local sum3=$((sum+(i*(3*i+2))/2))\n    sum=$((sum1+sum2+sum3))\n    i=$((k+1))\n\
    \  done\n  echo \"$sum\"\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=51 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=11 encoding='utf-8'>
  timestamp: 1660058652
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \techo $(( $(seq 1 $1) ))\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpf3zwnm2a.sh: line 21: 1

    2

    3 : syntax error in expression (error token is "2

    3 ")

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  local x\n  x=$(( ( $1 - 1 ) * ( 1 + $1 / $2 ) ))\n  if [ $(($1 % 2)) -eq 0\
    \ ]\n  then\n    echo \"\\\"$x\\\"\"\n  else\n    tri $(($x - 1))\n    echo \"\
    \\\"$x\\\"\"\n  fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvdosnsxo.sh: line 22: ( 3 - 1 ) * ( 1 + 3 /  ) : syntax error:
    operand expected (error token is ") ")

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  local n=\"${1:-}\"\n  echo \"$(seq -f '\"%d\" ' 3 $((${n}+1))) \\\n$(seq -f\
    \ '\"%d\" ' $((${n}+3)) $((${n}+1))) \\\n$(seq -f '\"%d\" ' $((${n}+2)) $((${n}+2)+1))\"\
    \n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "seq: format \u2018\"%d\" \u2019 has unknown %d directive\nseq: format \u2018\
    \"%d\" \u2019 has unknown %d directive\n/tmp/tmpigfr9blg.sh: command substitution:\
    \ line 24: syntax error near unexpected token `+1'\n/tmp/tmpigfr9blg.sh: command\
    \ substitution: line 24: `(${n}+2)+1'\nseq: format \u2018\"%d\" \u2019 has unknown\
    \ %d directive\n"
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n=${1:?No input}\n    echo \"${#n}\"\n    while [[ ${n} -gt 0 ]]; do\n\
    \        echo \"${n}\"\n        let n=$((n-2)) && echo \"${n}\"\n        let n=$((n-1))\
    \ && echo \"${n}\"\n        let n=$((n+1)) && echo \"${n}\"\n    done\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n=$1\n    local first\n    local i=1\n    local j=3\n    local res\n\
    \    while [[ $i -lt $n ]]\n    do\n        first=$(( $j + $i ))\n        res=\"\
    ${res}\" $first\n        j=$i\n        i=$(( $i + $(( $n - $i )) ))\n    done\n\
    \    echo $res\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3\
    \ 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpsta0owlr.sh: line 29: 4: command not found

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  local n=$1; shift\n  local sum=$((n-1)); shift # First tribonacci number is\
    \ 3.\n  local i; for i in $(seq 1 $n); do sum=$((sum + i)); done; echo $sum\n\
    }\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: -1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \techo \"$1 is an integer\"\n\ta=$1\n\tb=$(( $a + 1 ))\n\tc=$(( $b + 1 ))\n\t\
    echo \"$a $b $c\"\n\techo \"$a $b $c \" > output.txt\n\twhile [ $b -lt $c ]; do\n\
    \t\techo $b $c > output.txt\n\t\tb=$(( $c + 1 ))\n\t\tc=$(( $b + 1 ))\n\tdone\n\
    \thead -n $(( $1 + 1 )) output.txt >> output.txt\n\ttail -n $1 output.txt > output.txt\n\
    \trm output.txt\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3\
    \ 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=58 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=39 encoding='utf-8'>
  timestamp: 1660058652
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n=$1\n    local i=0\n    local arr=()\n    while [ $i -lt $n ]; do\n\
    \        arr[$i]=`expr 1 + $(( $n - $i ))`\n        (( i++ ))\n    done\n    arr[$((\
    \ n - 2 ))]=$(( arr[$(( n - 1 ))] + arr[$(( n - 2 ))] ))\n    arr[$(( n - 1 ))]=$((\
    \ arr[$(( n - 1 ))] + arr[$(( n - 2 ))] ))\n    echo \"${arr[@]}\"\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local i j k\n    j=1\n    k=1\n    i=$((${#1}-1))\n    echo ${1[i]}\n   \
    \ while [ $i -gt 1 ]\n    do\n        j=$(($j+$((${1[i]}+${1[i+1]}))))\n     \
    \   k=$(($k+$((${1[i]}-${1[i+1]}))))\n        i=$((i-1))\n        echo ${1[i]}\n\
    \    done\n    echo ${1[i]}\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"\
    4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n   \
    \ [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"\
    1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n\
    \    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmp434ymdw0.sh: line 25: ${1[i]}: bad substitution

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  echo \"$1\" > /tmp/fib\n  echo 3 > /tmp/fib\n  tail /tmp/fib > /tmp/fib\n \
    \ sort /tmp/fib > /tmp/fib\n  cat /tmp/fib | sed -n 's/^/\"'\"'/p;'\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmy89pfdb.sh: line 43: unexpected EOF while looking for matching
    `"''

    /tmp/tmpmy89pfdb.sh: line 47: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local i a\n    for ((i = 1; i <= $1; i+= 2)); do\n        if [ $i -eq 1 ];\
    \ then\n            a=\"1\"\n        elif [ $i -eq 2 ]; then\n            a=\"\
    3\"\n        else\n            a=$((1 + $i / 2))\n        fi\n        echo \"\\\
    \"$i\\\"\"\n    done\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local number=$1\n    if [ $number -eq 1 ]; then\n        echo 1\n    elif\
    \ [ $number -eq 2 ]; then\n        echo 2\n    elif [ $number -eq 3 ]; then\n\
    \        echo 3\n    elif [ $number -eq 4 ]; then\n        echo 4\n    elif [\
    \ $number -eq 5 ]; then\n        echo 5\n    elif [ $number -eq 6 ]; then\n  \
    \      echo 6\n    elif [ $number -eq 7 ]; then\n        echo 7\n    elif [ $number\
    \ -eq 8 ]; then\n        echo 8\n    elif [ $number -eq 9 ]; then\n        echo\
    \ 9\n    elif [ $number -eq 10 ]; then\n        echo 10\n    elif [ $number -eq\
    \ 11 ]; then\n        echo 11\n    elif [ $number -eq 12 ]; then\n        echo\
    \ 12\n    elif [ $number -eq 13 ]; then\n        echo 13\n    elif [ $number -eq\
    \ 14 ]; then\n        echo 14\n    elif [ $number -eq 15 ]; then\n        echo\
    \ 15\n    elif [ $number -eq 16 ]; then\n        echo 16\n    elif [ $number -eq\
    \ 17 ]; then\n        echo 17\n    elif [ $number -eq 18 ]; then\n        echo\
    \ 18\n    elif [ $number -eq 19 ]; then\n        echo 19\n    elif [ $number -eq\
    \ 20 ]; then\n        echo 20\n    elif [ $number -eq 21 ]; then\n        echo\
    \ 21\n    elif [ $number -eq 22 ]; then\n        echo 22\n    elif [ $number -eq\
    \ 23 ]; then\n        echo 23\n    elif [ $number -eq 24 ]; then\n        echo\
    \ 24\n    elif [ $number -eq 25 ]; then\n        echo 25\n    elif [ $number -eq\
    \ 26 ]; then\n        echo 26\n    elif [ $number -eq 27 ]; then\n        echo\
    \ 27\n    elif [ $number -eq 28 ]; then\n        echo 28\n    elif [ $number -eq\
    \ 29 ]; then\n        echo 29\n    elif [ $number -eq 30 ]; then\n        echo\
    \ 30\n    elif [ $number -eq 31 ]; then\n        echo 31\n    elif [ $number -eq\
    \ 32 ]; then\n        echo 32\n    elif [ $number -eq 33 ]; then\n        echo\
    \ 33\n    elif [ $number -eq 34 ]; then\n        echo 34\n    elif [ $number -eq\
    \ 35 ]; then\n        echo 35\n    elif [ $number -eq 36 ]; then\n        echo\
    \ 36\n    elif [ $number -eq 37 ]; then\n        echo 37\n    elif [ $number -eq\
    \ 38 ]; then\n        echo 38\n    elif [ $number -eq 39 ]; then\n\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmd8k87j7.sh: line 100: syntax error near unexpected token `}''

    /tmp/tmpmd8k87j7.sh: line 100: `}''

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n=$1\n    # echo \"n is $n\"\n    if [ $n -ge 0 ]; then\n        local\
    \ i\n        local a\n        local b\n        local c\n        local list\n \
    \       list=\"'\"\n        a=3\n        b=1\n        c=2\n        if [ $n -eq\
    \ 1 ]; then\n            # echo \"n is 1\"\n            list=$(echo $list | tr\
    \ -d '\"')\n            echo \"$list\"\n            return\n        fi\n     \
    \   # echo \"n is 2\"\n        list=$(echo $list | tr -d '\"')\n        for i\
    \ in $(seq 0 $((n-1)))\n        do\n            list=$(echo $list | tr -d '\"\
    ')\n            list=$(echo $list | awk -F, '{print $1$2}')\n        done\n  \
    \      list=$(echo $list | tr -d '\"')\n        list=$(echo $list | awk -F, '{print\
    \ $1$2}')\n        list=$(echo $list | tr -d '\"')\n        list=$(echo $list\
    \ | awk -F, '{print $1$2}')\n        list=$(echo $list | tr -d '\"')\n       \
    \ list=$(echo $list | awk -F, '{print $1$2}')\n        list=$(echo $list | tr\
    \ -d '\"')\n        list=$(echo $list | awk -F, '{print $1$2}')\n        list=$(echo\
    \ $list | tr -d '\"')\n        list=$(echo $list | awk -F, '{print $1$2}')\n \
    \       list=$(echo $list | tr -d '\"')\n        list=$(echo $list | awk -F, '{print\
    \ $1$2}')\n        list=$(echo $list | tr -d '\"')\n        list=$(echo $list\
    \ | awk -F, '{print $1$2}')\n        list=$(echo $list | tr -d '\"')\n       \
    \ list=$(echo $list | awk -F, '{print $1$2}')\n        list=$(echo $list | tr\
    \ -d '\"')\n        list=$(echo $list | awk -F, '{print $1$2}')\n        list=$(echo\
    \ $list | tr -d '\"')\n        list=$(echo $list | awk -F, '{print $1$2}')\n \
    \       list=$(echo $list | tr -d '\"')\n        list=$(echo $list | awk -F, '{print\
    \ $1$2}')\n        list=$(echo $list | tr -d '\"')\n        list=$(echo $list\
    \ | awk -F, '{print $1$2}')\n        list=$(echo $list | tr -d '\"')\n       \
    \ list=$(echo $list | awk -F, '{print $1$2}')\n        list=$(echo $\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpd1m0kjhf.sh: line 72: unexpected EOF while looking for matching
    `)''

    /tmp/tmpd1m0kjhf.sh: line 94: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n $2\n    local -n numbers=()\n    local i j\n    if [ -z \"$1\" ];\
    \ then return 1\n    elif [ \"$1\" -gt \"0\" ]; then return 1\n    elif [ \"$1\"\
    \ -eq \"1\" ]; then return 3\n    elif [ \"$1\" -lt \"1\" ]; then return 1\n \
    \   fi\n    i=$(tri $(($1 - 1)))\n    echo $i | bc\n    j=$((i + 1))\n    echo\
    \ $j | bc\n    numbers[$n]=$j\n    n=$((n + 1))\n    echo $n | bc\n    while ((\
    \ n <= $(echo $((2 * $1)) - 1) + 1 )); do \n        numbers[$n]=$(( numbers[$n]\
    \ + numbers[$((n - (n - (n + (n - 1))))] ))\n        echo $n | bc\n        n=$((n\
    \ + 1))\n    done\n    echo ${numbers[*]} | tr ' ' ','\n}\n\ncandidate() {\n \
    \   tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2\
    \ 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"\
    5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n\
    \    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\"\
    ) = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24\
    \ 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8\
    \ 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjpr7jijr.sh: line 37: unexpected EOF while looking for matching
    `)''

    /tmp/tmpjpr7jijr.sh: line 63: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \   local -n a=$1\n   local i a b\n   [[ -z $a ]] || return 0\n   a=${a#0} # remove\
    \ leading zero\n   for ((i=1,b=$a,c=1; i<$a; i+=2,c=b*2+c)) ; do\n      printf\
    \ -v a \"%d\" $c\n   done\n   printf -v a \"%d\" $c\n   return $a\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp10pb8zh4.sh: line 21: local: `3'': invalid variable name for name
    reference

    /tmp/tmp10pb8zh4.sh: line 25: ((: i=1,b=,c=1: syntax error: operand expected (error
    token is ",c=1")

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n=$1\n    local num\n    if [[ \"$n\" =~ ^[0-9]+$ ]]; then\n      \
    \  num=$(grep -Eo '^[0-9]+' <<< \"$n\")\n        echo \"\\\"$((num + 1))\\\"\"\
    \n    else\n        echo \"Invalid Input\"\n    fi\n}\n\ncandidate() {\n    tri\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n\
    \    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"\
    1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n=$1\n    if [ $n -gt 5 ] || [ $n -lt 1 ] ; then\n        echo \"wrong\
    \ input number\"\n        return\n    fi\n    # Write your code below this line\n\
    \    local fib1=$(echo $((2 * $n + 1)) | bc)\n    local fib2=$(echo $(($n + $((2\
    \ * $n - 1))))  | bc)\n    local fib3=$(echo $(($fib1 + $fib2))  | bc)\n    local\
    \ fib4=$(echo $(($fib1 - $fib2))  | bc)\n    local fib5=$(echo $(($fib3 - $fib4))\
    \  | bc)\n    local fib6=$(echo $(($fib4 + $fib5))  | bc)\n    local fib7=$(echo\
    \ $(($fib6 - $fib5))  | bc)\n    local fib8=$(echo $(($fib7 + $fib6))  | bc)\n\
    \    local fib9=$(echo $(($fib8 - $fib6))  | bc)\n    local fib10=$(echo $(($fib9\
    \ + $fib7))  | bc)\n    local fib11=$(echo $(($fib10 - $fib7))  | bc)\n    local\
    \ fib12=$(echo $(($fib11 - $fib8))  | bc)\n    local fib13=$(echo $(($fib12 +\
    \ $fib9))  | bc)\n    local fib14=$(echo $(($fib13 - $fib10))  | bc)\n    local\
    \ fib15=$(echo $(($fib14 - $fib11))  | bc)\n    local fib16=$(echo $(($fib15 +\
    \ $fib12))  | bc)\n    local fib17=$(echo $(($fib16 - $fib13))  | bc)\n    local\
    \ fib18=$(echo $(($fib17 - $fib14))  | bc)\n    local fib19=$(echo $(($fib18 +\
    \ $fib15))  | bc)\n    local fib20=$(echo $(($fib19 - $fib16))  | bc)\n    local\
    \ fib21=$(echo $(($fib20 - $fib17))  | bc)\n    local fib22=$(echo $(($fib21 -\
    \ $fib18))  | bc)\n    local fib23=$(echo $(($fib22 + $fib19))  | bc)\n    local\
    \ fib24=$(echo $(($fib23 - $fib20))  | bc)\n    local fib25=$(echo $(($fib24 +\
    \ $fib21))  | bc)\n    local fib26=$(echo $(($fib25 - $fib22))  | bc)\n    local\
    \ fib27=$(echo $(($fib26 - $fib23))  | bc)\n    local fib28=$(\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpm7whffdq.sh: line 54: unexpected EOF while looking for matching
    `)''

    /tmp/tmpm7whffdq.sh: line 76: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: -1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  if [ $1 -lt 3 ]\n  then\n    echo \"invalid input\"\n  else\n    if [ $1 -eq\
    \ 1 ]\n    then\n      echo 3\n    else\n      echo $(tri $(( $(expr 2 + $(expr\
    \ 1 + $1)) - 1 )) )\n    fi\n  fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate\
    \ \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n\
    \    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\")\
    \ = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24\
    \ 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=60 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=32 encoding='utf-8'>
  timestamp: 1660058652
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n=$1\n    if [ $n -lt 3 ]\n    then\n        echo \"ERROR: Illegal\
    \ input\"\n        return 1\n    fi\n    local f1=3\n    local f2=3\n    local\
    \ f3=3\n    local fout\n    local i\n    for (( i=2; i <= n; i++ )); do\n    \
    \    # Check if i is even\n        if [ $((i % 2)) -eq 0 ]\n        then\n   \
    \         f1=$((f1+f3))\n            f3=$((f2+f1))\n            fout=$fout$f1\n\
    \        else\n            f2=$((f2+f1))\n            f3=$((f3+f2))\n        \
    \    fout=$fout$f2\n        fi\n    done\n    echo \"$fout\"\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  echo \"${1}\" | awk '{\n    if ($0 % 2 == 0) {\n       return $0 + $1 / 2;\n\
    \    } else {\n      n = $0 % 2 + 1;\n      return $1 + $n / 2 + $n - $n / 2;\n\
    \    }\n  }'\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3\
    \ 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'awk: cmd. line:3:        return $0 + $1 / 2;

    awk: cmd. line:3:        ^ `return'' used outside function context

    awk: cmd. line:6:       return $1 + $n / 2 + $n - $n / 2;

    awk: cmd. line:6:       ^ `return'' used outside function context

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    if [ $# -lt 1 ] ; then \n        echo \"No argument supplied\"\n        exit\n\
    \    fi\n    if [ $# -gt 1 ] ; then\n        echo \"Too many arguments\"\n   \
    \     exit\n    fi\n    local n\n    local arr \n    arr=()\n    arr+=(`echo \"\
    (1 + $1 / 2)\" | bc`)\n    arr+=(`echo \"$(( $(echo \"(1 + $1 / 2)\" | bc ) -\
    \ $1 )$(( $1 % 2 ))\" | bc`)\n    arr+=(`echo \"$(( $(echo \"(1 + $1 / 2)\" |\
    \ bc ) - $1 )$(( $1 % 2 ))$(( $1 % 2 ))\" | bc`)\n    arr+=(\"$(( $(echo \"(1\
    \ + $1 / 2)\" | bc ) - $1 )$(( $1 % 2 ))$(( $1 % 2 ))$(( $1 % 2 ))\")\n    arr+=(\"\
    $(( $(echo \"(1 + $1 / 2)\" | bc ) - $1 )$(( $1 % 2 ))$(( $1 % 2 ))$(( $1 % 2\
    \ ))$(( $1 % 2 ))\")\n    arr+=(\"$(( $(echo \"(1 + $1 / 2)\" | bc ) - $1 )$((\
    \ $1 % 2 ))$(( $1 % 2 ))$(( $1 % 2 ))$(( $1 % 2 ))$(( $1 % 2 ))\")\n    arr+=(\"\
    $(( $(echo \"(1 + $1 / 2)\" | bc ) - $1 )$(( $1 % 2 ))$(( $1 % 2 ))$(( $1 % 2\
    \ ))$(( $1 % 2 ))$(( $1 % 2 ))$(( $1 % 2 ))\")\n    arr+=(\"$(( $(echo \"(1 +\
    \ $1 / 2)\" | bc ) - $1 )$(( $1 % 2 ))$(( $1 % 2 ))$(( $1 % 2 ))$(( $1 % 2 ))$((\
    \ $1 % 2 ))$(( $1 % 2 ))$(( $1 % 2 ))\")\n    arr+=(\"$(( $(echo \"(1 + $1 / 2)\"\
    \ | bc ) - $1 )$(( $1 % 2 ))$(( $1 % 2 ))$(( $1 % 2 ))$(( $1 % 2 ))$(( $1 % 2\
    \ ))$(( $1 % 2 ))$(( $1 % 2 ))$(( $1 % 2 ))\")\n    arr+=(\"$(( $(echo \"(1 +\
    \ $1 / 2)\" | bc ) - $1 )$(( $1 % 2 ))$(( $\n}\n\ncandidate() {\n    tri \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[\
    \ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8\
    \ 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpj7o_j0zq.sh: line 35: unexpected EOF while looking for matching
    `)''

    /tmp/tmpj7o_j0zq.sh: line 63: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    # your code goes here\n    local n=\"${1:-}\"\n    local s=0\n    local x=0\n\
    \    local a=0\n    local b=1\n    local c=2\n    while [ $n -gt 0 ]; do\n   \
    \     x=$(( $x * $b + $c ))\n        s=\"${s}${x}\"\n        if [ $((n % 2)) -eq\
    \ 0 ]; then\n            a=$(( $a + $x ))\n        else\n            b=$(( $b\
    \ + $x ))\n            c=$(( $c - $x ))\n        fi\n        (( n=n-1 ))\n   \
    \ done\n    echo \"\\\"$s\\\"${a}${b}${c}\"\n}\n\ncandidate() {\n    tri \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[\
    \ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8\
    \ 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  local n i\n  n=$1\n  echo \"$(( ${n%?} + 1 ))\"\n  (( n % 2 )) && echo \"$((\
    \ ${n%?} + ${n%?} + ${n%?} ))\"\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate\
    \ \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n\
    \    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\")\
    \ = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24\
    \ 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpgn6dcsmo.sh: line 24: +  +  : syntax error: operand expected (error
    token is "+  ")

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local i a b c n sum\n    sum=0\n    for ((i=1;i<=$1;i++)); do\n        ((a=$b+$c))\n\
    \        ((b=$a))\n        ((c=$b+$a))\n        sum=$sum\",\"$c\n    done\n  \
    \  echo $sum\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3\
    \ 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3gz2iyqe.sh: line 24: ((: a=+: syntax error: operand expected (error
    token is "+")

    /tmp/tmp3gz2iyqe.sh: line 25: ((: b=: syntax error: operand expected (error token
    is "=")

    /tmp/tmp3gz2iyqe.sh: line 26: ((: c=+: syntax error: operand expected (error token
    is "+")

    /tmp/tmp3gz2iyqe.sh: line 24: ((: a=+: syntax error: operand expected (error token
    is "+")

    /tmp/tmp3gz2iyqe.sh: line 25: ((: b=: syntax error: operand expected (error token
    is "=")

    /tmp/tmp3gz2iyqe.sh: line 26: ((: c=+: syntax error: operand expected (error token
    is "+")

    /tmp/tmp3gz2iyqe.sh: line 24: ((: a=+: syntax error: operand expected (error token
    is "+")

    /tmp/tmp3gz2iyqe.sh: line 25: ((: b=: syntax error: operand expected (error token
    is "=")

    /tmp/tmp3gz2iyqe.sh: line 26: ((: c=+: syntax error: operand expected (error token
    is "+")

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n i\n    n=$1\n    local results=()\n    local count=0\n    \n    #\
    \ Calculate all tribonacci numbers from 1 to n\n    for i in $(seq 1 $n); do\n\
    \        # Odd tribonacci numbers start with 1\n        if [[ $((i % 2)) -eq 1\
    \ ]]; then\n            count=$((count + 1))\n            results+=($(printf \"\
    \\\"%s\\\"\" $(expr $i + $((i + 1)) - $((i + 2)))))\n        else\n          \
    \  # Even tribonacci numbers start with 3\n            count=$((count + 1))\n\
    \            results+=($(printf \"\\\"%s\\\"\" $(expr $i + $((i + 1)) - $((i +\
    \ 2)) - $((i + 3)))))\n        fi\n    done\n    # Remove the first entry to return\
    \ only the Tribonacci numbers\n    results=(\"${results[@]:1}\")\n    # Return\
    \ the array of all Tribonacci numbers\n    echo \"${results[*]}\"\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: -1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n=\"$1\"\n    local sum=$(($((2 * $n + 1)) / 2))\n    local fibonacci\n\
    \    for ((i = $n; i >= 1; i--)); do\n        fibonacci=$(echo \"$(($(tri $i-1)\
    \ + $(tri $i-2) + $(tri $i+1)))\")\n        sum=$(($sum + $fibonacci))\n    done\n\
    \    echo \"$sum\"\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=66 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=40 encoding='utf-8'>
  timestamp: 1660058652
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  local n=$1\n  shift\n  local a=0\n  local b=1\n  local c=1\n  local ret\n \
    \ while [ $n -gt 0 ]; do\n    ret=\"$b\"\n    b=$((c+b))\n    c=$((a+b))\n   \
    \ a=$((c+a))\n    n=$((n-1))\n    echo \"$ret\"\n  done\n}\n\ncandidate() {\n\
    \    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3\
    \ 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"\
    5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n\
    \    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\"\
    ) = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24\
    \ 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8\
    \ 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n=$1\n    local sum=0\n    if [ \"$n\" -gt \"0\" ] ; then\n       \
    \ local ndiv2=$(div $n 2)\n        local nminus1=$(sub $n 1)\n        local nplus=$(add\
    \ $n 1)\n        sum=$(expr $ndiv2 + $nminus1 + $nplus)\n    fi\n    if [ \"$n\"\
    \ -lt \"2\" ] ; then\n        local triminus1=$(add $n 1)\n        local triplus=$(add\
    \ $n 2)\n        sum=$(expr $triminus1 + $triplus)\n    fi\n    echo -n \"$sum\"\
    \n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpl82i7mgk.sh: line 24: div: command not found

    /tmp/tmpl82i7mgk.sh: line 25: sub: command not found

    /tmp/tmpl82i7mgk.sh: line 26: add: command not found

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  local i=$1\n  local results=()\n  if [ $i -eq 0 ] || [ $i -eq 1 ]; then\n \
    \   results+=( $i )\n  else\n    tri $(( $i - 1 ))\n    tri $(( $i - 2 ))\n  \
    \  results+=( $i + $i )\n  fi\n  echo \"${results[@]}\"\n}\n\ncandidate() {\n\
    \    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3\
    \ 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"\
    5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n\
    \    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\"\
    ) = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24\
    \ 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8\
    \ 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    if [ $# -lt 1 ]\n    then\n        echo \"Invalid number of parameters. Expected\
    \ integer and received $#\"\n        exit 1\n    fi\n    \n    if [ $1 -eq 0 ]\n\
    \    then\n        echo \"Invalid input for parameter $1\"\n        exit 1\n \
    \   fi\n    \n    local tri_seq=()\n    \n    local i\n    local temp\n    local\
    \ num\n    local tri_seq_tmp\n    \n    local count\n    local count2\n    local\
    \ count3\n    \n    count=0\n    count2=0\n    count3=0\n    \n    for i in $(seq\
    \ 1 $1)\n    do\n        \n        num=$(expr $i + 1)\n        temp=$(expr $count\
    \ + $count2 + $count3)\n        \n        tri_seq_tmp=$(expr $temp $num)\n   \
    \     \n        if [ $(expr $temp -eq 0) ]\n        then\n            tri_seq_tmp=$(expr\
    \ $num $count)\n            tri_seq+=($tri_seq_tmp)\n        else\n          \
    \  tri_seq+=($tri_seq_tmp)\n        fi\n        \n        count=$temp\n      \
    \  count2=$count\n        count3=$num\n    done\n    \n    tri_seq+=($count)\n\
    \    \n    echo \"${tri_seq[@]}\"\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate\
    \ \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n\
    \    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\")\
    \ = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24\
    \ 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: "expr: syntax error: unexpected argument \u20182\u2019\nexpr: syntax error:\
    \ unexpected argument \u2018-eq\u2019\nexpr: syntax error: unexpected argument\
    \ \u20183\u2019\nexpr: syntax error: unexpected argument \u2018-eq\u2019\nexpr:\
    \ syntax error: unexpected argument \u20184\u2019\nexpr: syntax error: unexpected\
    \ argument \u2018-eq\u2019\n"
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \   let n=1;\n   while [ $n -le $1 ]; do\n      if [ $(($n % 2)) -eq 0 ]\n   \
    \   then\n         echo \"\\\"$n\\\"\\\\n$((n + 1 ))\"\n      else\n         echo\
    \ \"\\\"$n\\\"\\\\n$((n + 1 ))\"\n      fi\n      let n=$((n + 2 ));\n   done\n\
    }\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n=$1\n    local -r seq=()\n    local -r a=3\n    local -r b=1\n   \
    \ local -r c=0\n    local i\n    i=0\n    while [ $i -lt $n ]; do\n        seq=(\"\
    ${seq[@]}\" \"$a\")\n        (( a=$b ))\n        (( b=$c ))\n        (( c=$a+$b\
    \ ))\n        (( i++))\n    done\n    seq=(\"${seq[@]}\" \"$c\")\n    echo -n\
    \ \"[\"\n    for i in \"${seq[@]}\"; do\n        echo \"$i\"\n    done\n    echo\
    \ -n \"]\"\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2\
    \ 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpdq8j1_1t.sh: line 29: seq: readonly variable

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: -1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  read -n1 n\n  echo $(sed 's/^\\([0-9]\\+\\)$/'\"\\1\"'/' <<< \"$(< /dev/urandom\
    \ | head -n 1 )$n\" | bc)\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=69 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=62 encoding='utf-8'>
  timestamp: 1660058652
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \tlet sum=\"1\" \n\tlet sum2=\"2\"\n\tlet sum3=\"3\"\n\tif [[ $(expr \"$1\" '+'\
    \ \"$2\") -eq 0 ]]; then\n\t\techo \"$sum\"\n\telif [[ $(expr \"$1\" '+' \"$2\"\
    ) -eq 1 ]]; then\n\t\techo \"$sum2\"\n\telse\n\t\techo \"$sum3\"\n\t\tlet sum=$(expr\
    \ \"$sum\" '+' \"$sum2\")\n\t\tlet sum2=$(expr \"$sum\" '+' \"$sum3\")\n\t\tlet\
    \ sum3=$(expr \"$sum2\" '+' \"$sum\")\n\t\tlet sum=$(expr \"$sum3\" '+' \"$sum\"\
    )\n\tfi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'expr: non-integer argument

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    if [ $# -ne 1 ]\n    then\n        echo \"Invalid input. Usage: $(basename\
    \ $0) [integer]\"\n        exit 1\n    fi\n    if [ $1 -lt 1 -o $1 -gt 9 ]\n \
    \   then\n        echo \"Invalid input. Usage: $(basename $0) [integer]\"\n  \
    \      exit 1\n    fi\n    local n=$1\n    local n1=$(echo \"$n\" | bc -l)\n \
    \   local n2=$(echo \"$((n+1))\" | bc -l)\n    local n3=$(echo \"$((n+2))\" |\
    \ bc -l)\n    local n4=$(echo \"$((n+3))\" | bc -l)\n    local n5=$(echo \"$((n+4))\"\
    \ | bc -l)\n    local n6=$(echo \"$((n+5))\" | bc -l)\n    local n7=$(echo \"\
    $((n+6))\" | bc -l)\n    local n8=$(echo \"$((n+7))\" | bc -l)\n    local n9=$(echo\
    \ \"$((n+8))\" | bc -l)\n    local n10=$(echo \"$((n+9))\" | bc -l)\n    local\
    \ n11=$(echo \"$((n+10))\" | bc -l)\n    local n12=$(echo \"$((n+11))\" | bc -l)\n\
    \    local n13=$(echo \"$((n+12))\" | bc -l)\n    local n14=$(echo \"$((n+13))\"\
    \ | bc -l)\n    local n15=$(echo \"$((n+14))\" | bc -l)\n    local n16=$(echo\
    \ \"$((n+15))\" | bc -l)\n    local n17=$(echo \"$((n+16))\" | bc -l)\n    local\
    \ n18=$(echo \"$((n+17))\" | bc -l)\n    local n19=$(echo \"$((n+18))\" | bc -l)\n\
    \    local n20=$(echo \"$((n+19))\" | bc -l)\n    local n21=$(echo \"$((n+20))\"\
    \ | bc -l)\n    local n22=$(echo \"$((n+21))\" | bc -l)\n    local n23=$(echo\
    \ \"$((n+22))\" | bc -l)\n    local n24=$(echo \"$((n+23))\" | bc -l)\n    local\
    \ n25=$(echo \"$((n+24))\" | bc -l)\n    \n}\n\ncandidate() {\n    tri \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[\
    \ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8\
    \ 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \tlocal n=$1\n\t((n%2)) \n\t[ \"$n\" -eq 0 ] && return $((n-1))\n\t[ \"$n\" -eq\
    \ 1 ] && return $((n))\n\t[ \"$n\" -eq 2 ] && return $((n-1) + $((n-2) + $((n-3)))\n\
    \t[ \"$n\" -eq 3 ] && return $((n-2) + $((n-1) + $((n)))\n\t[ \"$n\" -eq 4 ] &&\
    \ return $((n-3) + $((n-2) + $((n-1)) + $((n)))\n\t[ \"$n\" -eq 5 ] && return\
    \ $((n-4) + $((n-3) + $((n-2)) + $((n-1)) + $((n)))\n\t[ \"$n\" -eq 6 ] && return\
    \ $((n-5) + $((n-4) + $((n-3)) + $((n-2)) + $((n-1)) + $((n)))\n\t[ \"$n\" -eq\
    \ 7 ] && return $((n-6) + $((n-5) + $((n-4)) + $((n-3)) + $((n-2)) + $((n-1))\
    \ + $((n)))\n\t[ \"$n\" -eq 8 ] && return $((n-7) + $((n-6) + $((n-5)) + $((n-4))\
    \ + $((n-3)) + $((n-2)) + $((n-1)) + $((n)))\n\t[ \"$n\" -eq 9 ] && return $((n-8)\
    \ + $((n-7) + $((n-6)) + $((n-5)) + $((n-4)) + $((n-3)) + $((n-2)) + $((n-1))\
    \ + $((n)))\n\t[ \"$n\" -eq 10 ] && return $((n-9) + $((n-8) + $((n-7)) + $((n-6))\
    \ + $((n-5)) + $((n-4)) + $((n-3)) + $((n-2)) + $((n-1)) + $((n)))\n\t[ \"$n\"\
    \ -eq 11 ] && return $((n-10) + $((n-9) + $((n-8)) + $((n-7)) + $((n-6)) + $((n-5))\
    \ + $((n-4)) + $((n-3)) + $((n-2)) + $((n-1)) + $((n)))\n\t[ \"$n\" -eq 12 ] &&\
    \ return $((n-11) + $((n-10) + $((n-9)) + $((n-8)) + $((n-7)) + $((\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp74jgtns3.sh: line 25: unexpected EOF while looking for matching
    `)''

    /tmp/tmp74jgtns3.sh: line 57: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \  local n=$1\n  shift\n  local number\n  printf -v number '%s%.0s' '[' \"$n\"\
    \ ']' '%.0s' \"$(( (n-1)+$n ))\"\n  printf -v number '%s%.0s' \"${number%,}\"\
    \ \"${number#*,}\"\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n a b c ret\n    for (( n = 0; n <= $1; n++ )); do\n        ret=$(\
    \ echo \"\\${tri(${n-1} + ${n-2} + ${n})}\" | awk -F '\"' '{print $2}' )\n   \
    \     echo $(( ${ret}+1 ))\n    done\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate\
    \ \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n\
    \    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\")\
    \ = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24\
    \ 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: -1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    local n=$1\n    local i\n    local s\n    local i1\n    local i2\n    local\
    \ s3\n    local i3\n    local i4\n    local i5\n    local s4\n    local s5\n\n\
    \    # Tribonacci sequence is defined by the recurrence:\n    # tri(1) = 3\n \
    \   # tri(n) = 1 + n / 2, if n is even.\n    # tri(n) =  tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1), if n is odd.\n    # For example:\n    # tri(2) = 1 + (2 / 2)\
    \ = 2\n    # tri(4) = 3\n    # tri(3) = tri(2) + tri(1) + tri(4)\n    # = 2 +\
    \ 3 + 3 = 8 \n    # You are given a non-negative integer number n, you have to\
    \ a return a list of the \n    # first n + 1 numbers of the Tribonacci sequence.\n\
    \    # Examples:\n    # >>> $(tri \"3\")\n    # ['\"1\"', '\"3\"', '\"2\"', '\"\
    8\"']\n    #\n    # $1 is an integer\n    n=$((n+1))\n    i=1\n    s=0\n    i1=1\n\
    \    i2=1\n    s3=3\n    i3=1\n    i4=1\n    i5=1\n    s4=2\n    s5=8\n\n    while\
    \ [ $n -ge 1 ]; do\n        i=$((i$((n+1))))\n        s=$((s$((n+1))))\n     \
    \   if [ $(echo \"$n & 1\"| bc) -eq 1 ]; then\n            n=$((n+1))\n      \
    \      echo \"$s$i\"\n        fi\n        if [ $(echo \"$n & 2\"| bc) -eq 1 ];\
    \ then\n            n=$((n+1))\n            echo \"$s3$i\"\n        fi\n     \
    \   if [ $(echo \"$n & 4\"| bc) -eq 1 ]; then\n            n=$((n+1))\n      \
    \      echo \"$s4$i\"\n        fi\n        if [ $(echo \"$n & 8\"| bc) -eq 1 ];\
    \ then\n            n=$((n+1))\n            echo \"$s5$i\"\n        fi\n    done\n\
    }\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=68 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=63 encoding='utf-8'>
  timestamp: 1660058652
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \    [[ $1 == [0-9] || $1 == - ]] && echo \"$1\" || echo \"$(tri $($1 - 1))$(tri\
    \ $(($1-1)))$(tri $(($1-2)))\"\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"\
    4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n   \
    \ [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"\
    1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n\
    \    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"\
    3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n\
    \tlocal n=$1\n\tlocal i j\n\tlocal result\n\tresult=\"\\\"$n\\\"\"\n\tfor ((i=0;\
    \ i<n; i++))\n\tdo\n\t\tj=$((i+1))\n\t\tresult+=\", \\\"$j\\\"\"\n\tdone\n\tresult+=\"\
    , \\\"$((n+1))\\\"\"\n\tprintf '%s\\n' \"$result\"\n}\n\ncandidate() {\n    tri\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n\
    \    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"\
    1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058647
