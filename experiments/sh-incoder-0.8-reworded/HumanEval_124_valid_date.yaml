name: HumanEval_124_valid_date
language: sh
prompt: "#!/bin/bash\n# You have to write a function which validates a given date\
  \ string and\n# returns true if the date is valid otherwise false.\n# The date is\
  \ valid if all of the following rules are satisfied:\n# 1. The date string is not\
  \ empty.\n# 2. The number of days is not less than 1 or higher than 31 days for\
  \ months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than\
  \ 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
  \ than 29 for the month 2.\n# 3. The months should not be less than 1 or higher\
  \ than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n# >>> $(valid_date\
  \ \"03-11-2000\")\n# \"true\"\n# >>> $(valid_date \"15-01-2012\")\n# \"false\"\n\
  # >>> $(valid_date \"04-0-2040\")\n# \"false\"\n# >>> $(valid_date \"06-04-2020\"\
  )\n# \"true\"\n# >>> $(valid_date \"06/04/2020\")\n# \"false\"\n#\n# $1 is a string\n\
  valid_date() {\n"
tests: "}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n   \
  \ [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
  ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
  \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n\
  \    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
  false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate\
  \ \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\"\
  \ ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\"\
  ) = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate\
  \ \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n\
  \    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
completions: ["    local date=\"$1\"\n    if [ -z \"$date\" ]; then\n        echo\
    \ \"Date is empty\"\n        return\n    fi\n\n    local d=\"${date#*-}\"\n  \
    \  local months_1=\"1-3\"\n    local months_3=\"4-6\"\n    local months_5=\"9-11\"\
    \n    local months_7=\"12-29\"\n    local months_8=\"30\"\n    local months_10=\"\
    31-31\"\n    local months_12=\"12-31\"\n    local d_1=\"01\"\n    local d_3=\"\
    03\"\n    local d_5=\"05\"\n    local d_7=\"07\"\n    local d_8=\"08\"\n    local\
    \ d_10=\"10\"\n    local d_12=\"12\"\n    local months=$months_1\n    local years=$((${date:0:4}\
    \ - 1970))\n    if [[ $d -le $d_1 ]]; then\n        (( months += 1 ))\n    fi\n\
    \    if [[ $d -le $d_3 ]]; then\n        (( months += 3 ))\n    fi\n    if [[\
    \ $d -le $d_5 ]]; then\n        (( months += 5 ))\n    fi\n    if [[ $d -le $d_7\
    \ ]]; then\n        (( months += 7 ))\n    fi\n    if [[ $d -le $d_8 ]]; then\n\
    \        (( months += 8 ))\n    fi\n    if [[ $d -le $d_10 ]]; then\n        ((\
    \ months += 10 ))\n    fi\n    if [[ $d -le $d_12 ]]; then\n        (( months\
    \ += 12 ))\n    fi\n    if [[ $months -le $months_12 ]]; then\n        (( years\
    \ += 1 ))\n    fi\n    if [[ $months -le $months_1 ]]; then\n        (( years\
    \ += 1 ))\n    fi\n    if [[ $months -le $months_3 ]]; then\n        (( years\
    \ += 3 ))\n    fi\n    if [[ $months -le $months_5 ]]; then\n        (( years\
    \ += 5 ))\n    fi\n    if [[ $months -le $months_7 ]]; then\n        (( years\
    \ += 7 ))\n    fi\n    if [[ $months -le $months_8 ]]; then\n        (( years\
    \ += 8 ))\n    fi\n    if [[ $months -le $months_10 ]]; then\n        (( years\
    \ += 10 ))\n    fi\n    if [[ $months -le $months_12 ]]; then\n        (( years\
    \ += 12 ))\n    fi\n\n    if [[ $(expr \"$months\" ", "    if [[ \"$1\" = $(echo\
    \ $1|sed 's/\\/Date//g') ]]; then\n        return 0;\n    else\n        date_array=(\
    \ $1 )\n        day=\"${date_array[1]}\"\n        month=\"${date_array[2]}\"\n\
    \        year=\"${date_array[3]}\"\n        \n        [[ $(expr $(date --date=\"\
    $month-$day-$year\" +%s) + $(expr $(date --date=\"$month-$day-$year\" +%s) * 86400)\
    \ = $(expr $(date --date=\"$month-$day-$year\" +%s) * 86400) ]] || return 0;\n\
    \    fi\n    return 1;", "  if [ -z \"$1\" ]\n  then\n    echo \"Usage: $0 date\"\
    \n    echo \"The input date must be provided\"\n    exit 1\n  fi\n  dateArray=($1)\n\
    \  if ((${#dateArray[@]} != 3)); then\n    echo \"Usage: $0 date\"\n    echo \"\
    The input date must be provided\"\n    exit 1\n  fi\n  if [[ \"$dateArray[2]\"\
    \ != \"-\" ]]; then\n    echo \"Usage: $0 date\"\n    echo \"The input date must\
    \ be provided\"\n    exit 1\n  fi\n  if [[ \"$dateArray[1]\" != \"-\" ]]; then\n\
    \    echo \"Usage: $0 date\"\n    echo \"The input date must be provided\"\n \
    \   exit 1\n  fi\n  if [[ ${#dateArray[@]} < 1 || ${#dateArray[@]} > 3 ]]; then\n\
    \    echo \"Usage: $0 date\"\n    echo \"The input date must be provided\"\n \
    \   exit 1\n  fi\n  if [[ ${#dateArray[@]} < 2 ]]; then\n    echo \"Usage: $0\
    \ date\"\n    echo \"The input date must be provided\"\n    exit 1\n  fi\n  if\
    \ ((${#dateArray[@]} != 2)); then\n    echo \"Usage: $0 date\"\n    echo \"The\
    \ input date must be provided\"\n    exit 1\n  fi\n  if [[ ${#dateArray[@]} !=\
    \ 1 ]]; then\n    echo \"Usage: $0 date\"\n    echo \"The input date must be provided\"\
    \n    exit 1\n  fi\n  if [[ \"$dateArray[0]\" != \"-\" ]]; then\n    echo \"Usage:\
    \ $0 date\"\n    echo \"The input date must be provided\"\n    exit 1\n  fi\n\
    \  if [[ \"$dateArray[1]\" != \"-\" ]]; then\n    echo \"Usage: $0 date\"\n  \
    \  echo \"The input date must be provided\"\n    exit 1\n  fi\n  if [[ ${#dateArray[@]}\
    \ < 4 ]]; then\n    echo \"Usage: $0 date\"\n    echo \"The input date must be\
    \ provided\"\n    exit 1\n  fi\n  if [[ ${#dateArray[@]} > 12 ]]; then\n    echo\
    \ \"Usage: $0 date\"\n    echo \"The input date must be provided\"\n    exit 1\n\
    \  fi\n  if ((${#dateArray[@]} != 4)); then\n    echo \"Usage: $0 date\"\n   \
    \ echo \"The input date must be provided\"\n    exit 1\n  fi\n  if [[ ${#dateArray[@]}\
    \ != 2 ]]; then\n    echo \"Usage: $0 date\"\n    echo \"The input date must be\
    \ provided\"\n    exit 1\n  fi\n  if [[ \"$dateArray[0]\" != [0-9] ]]; then\n\
    \    echo \"Usage: $0 date", "    date -d \"$1\" > /dev/null 2>&1\n    return\
    \ $?", "  test -n \"$1\" || return 1\n  local months=($(echo \"$1\" | sed 's/-/\
    \ /g'))\n  [[ \"${months[0]}\" != \"$1\" ]] && return 1\n  [[ \"${#months[@]}\"\
    \ -eq 3 ]] && test $(echo \"${months[0]}-${months[1]}-${months[2]}\" | sed 's/-/\
    \ /g') -eq \"$1\" || return 1\n  (( ${#months[@]} > 2 )) && return 1\n  [[ \"\
    ${months[1]}\" < 1 || \"${months[1]}\" > 12 ]] && return 1\n  [[ \"${months[2]}\"\
    \ < 1 || \"${months[2]}\" > 31 ]] && return 1\n  [[ \"${months[3]}\" < 1 || \"\
    ${months[3]}\" > 30 ]] && return 1\n  [[ \"${months[3]}\" -eq 2 ]] && [[ \"${months[2]}\"\
    \ -eq 2 ]] && return 0\n  [[ \"${months[2]}\" -eq 4 ]] && [[ \"${months[3]}\"\
    \ -eq 4 ]] && return 0\n  return 1", "    local date=$1\n    local month=`date\
    \ -d $date +'%m'`\n    local day=`date -d $date +'%d'`\n    local year=`date -d\
    \ $date +'%Y'`\n    local days_in_month=`cal $month | grep -E '^Days\\|^Day' |\
    \ awk '{print $2}'`\n\n    if [[ \"$month\" -lt 1 ]] || [[ \"$month\" -gt 12 ]]\
    \ || [[ \"$day\" -lt 1 ]] || [[ \"$day\" -gt $days_in_month ]] ; then\n      \
    \  echo \"false\"\n    else\n        echo \"true\"\n    fi", "    if [ ! -z \"\
    $1\" ]; then\n        date -d \"$1\" >/dev/null 2>&1\n        if [ $? -eq 0 ];\
    \ then\n            true\n        else\n            false\n        fi\n    else\n\
    \        false\n    fi", "    local date=\"$1\"\n    local day=1\n    local month=1\n\
    \    local year=1\n    local check1=true\n    local check2=true\n    local check3=true\n\
    \    local check4=true\n    local check5=true\n    local check6=true\n    local\
    \ check7=true\n    local check8=true\n    local check9=true\n    local check10=true\n\
    \    local check11=true\n    local check12=true\n    local check13=true\n    local\
    \ check14=true\n    local check15=true\n    local check16=true\n    local check17=true\n\
    \    local check18=true\n    local check19=true\n    local check20=true\n    local\
    \ check21=true\n    local check22=true\n    local check23=true\n    local check24=true\n\
    \    local check25=true\n    local check26=true\n    local check27=true\n    local\
    \ check28=true\n    local check29=true\n    local check30=true\n    local check31=true\n\
    \    local check32=true\n    local check33=true\n    local check34=true\n    local\
    \ check35=true\n    local check36=true\n    local check37=true\n    local check38=true\n\
    \    local check39=true\n    local check40=true\n    local check41=true\n    local\
    \ check42=true\n    local check43=true\n    local check44=true\n    local check45=true\n\
    \    local check46=true\n    local check47=true\n    local check48=true\n    local\
    \ check49=true\n    local check50=true\n    local check51=true\n    local check52=true\n\
    \    local check53=true\n    local check54=true\n    local check55=true\n    local\
    \ check56=true\n    local check57=true\n    local check58=true\n    local check59=true\n\
    \    local check60=true\n    local check61=true\n    local check62=true\n    local\
    \ check63=true\n    local check64=true\n    local check65=true\n    local check66=true\n\
    \    local check67=true\n    local check68=true\n    local check69=true\n    local\
    \ check70=true\n    local check7", "    local date_str=\"$1\"\n    local err_msg=\"\
    \"\n\n    if [[ ${date_str} =~ ^[[:digit:]]+$ ]]; then\n        local year=${date_str:0:4}\n\
    \        local month=${date_str:4:2}\n        local day=${date_str:6:2}\n    else\n\
    \        err_msg=\"The date string is not valid!\"\n        return ${err_msg}\n\
    \    fi\n\n    if [[ -z \"${year}\" ]] || [[ -z \"${month}\" ]] || [[ -z \"${day}\"\
    \ ]]; then\n        err_msg=\"The date string is not valid!\"\n        return\
    \ ${err_msg}\n    fi\n\n    if (( month < 1 || month > 12 )); then\n        err_msg=\"\
    The month is not valid!\"\n        return ${err_msg}\n    fi\n\n    if (( day\
    \ < 1 || day > 31 )); then\n        err_msg=\"The day is not valid!\"\n      \
    \  return ${err_msg}\n    fi\n\n    if (( day > 30 )); then\n        err_msg=\"\
    The day is not valid!\"\n        return ${err_msg}\n    fi\n\n    if [[ -z \"\
    ${err_msg}\" ]]; then\n        local months=\"01 03 05 07 08 10 12\"\n       \
    \ if [[ ${months} != *\"${month}\"* ]]; then\n            err_msg=\"The month\
    \ is not valid!\"\n            return ${err_msg}\n        fi\n\n        local\
    \ days=\"01 03 30 31 30 31\"\n        if [[ ${days} != *\"${day}\"* ]]; then\n\
    \            err_msg=\"The day is not valid!\"\n            return ${err_msg}\n\
    \        fi\n\n        local years=\"00 10 20 30 40 50 60 70\"\n        if [[\
    \ ${years} != *\"${year}\"* ]]; then\n            err_msg=\"The year is not valid!\"\
    \n            return ${err_msg}\n        fi\n    fi\n\n    return ${err_msg}",
  "  local DATE YEAR MONTH DAY YEARMONTH\n\n  read DATE YEAR MONTH DAY YEARMONTH <\
    \ <(printf '%s\\n' \"$1\")\n\n  if ! [ -z \"$DATE\" ]; then\n    case \"$MONTH\"\
    \ in\n      [1-12]) MONTH=\"01\" ;;\n      [13]) MONTH=\"02\" ;;\n      [14])\
    \ MONTH=\"03\" ;;\n      [15]) MONTH=\"04\" ;;\n      [16]) MONTH=\"05\" ;;\n\
    \      [17]) MONTH=\"06\" ;;\n      [18]) MONTH=\"07\" ;;\n      [19]) MONTH=\"\
    08\" ;;\n      [20]) MONTH=\"09\" ;;\n      [21]) MONTH=\"10\" ;;\n      [22])\
    \ MONTH=\"11\" ;;\n      [23]) MONTH=\"12\" ;;\n      *) MONTH=\"01\" ;;\n   \
    \ esac\n\n    case \"$DAY\" in\n      [1-31]) DAY=\"01\" ;;\n      [32]) DAY=\"\
    02\" ;;\n      [33]) DAY=\"03\" ;;\n      [34]) DAY=\"04\" ;;\n      [35]) DAY=\"\
    05\" ;;\n      [36]) DAY=\"06\" ;;\n      [37]) DAY=\"07\" ;;\n      [38]) DAY=\"\
    08\" ;;\n      [39]) DAY=\"09\" ;;\n      [40]) DAY=\"10\" ;;\n      [41]) DAY=\"\
    11\" ;;\n      [42]) DAY=\"12\" ;;\n      *) DAY=\"01\" ;;\n    esac\n\n    if\
    \ ! [ -z \"$YEAR\" ]; then\n      case \"$MONTH\" in\n        [1-12]) YEARMONTH=\"\
    $YEAR/$MONTH\" ;;\n        [13]) YEARMONTH=\"$YEAR/01/$MONTH\" ;;\n        [14])\
    \ YEARMONTH=\"$YEAR/02/$MONTH\" ;;\n        [15]) YEARMONTH=\"$YEAR/03/$MONTH\"\
    \ ;;\n        [16]) YEARMONTH=\"$YEAR/04/$MONTH\" ;;\n        [17]) YEARMONTH=\"\
    $YEAR/05/$MONTH\" ;;\n        [18]) YEARMONTH=\"$YEAR/06/$MONTH\" ;;\n       \
    \ [19]) YEARMONTH=\"$YEAR/07/$MONTH\" ;;\n        [20]) YEARMONTH=\"$YEAR/08/$MONTH\"\
    \ ;;\n        [21]) YEARMONTH=\"$YEAR/09/$MONTH\" ;;\n        [22]) YEARMONTH=\"\
    $YEAR/10/$MONTH\" ;;\n        [23]) YEARMONTH=\"$YEAR/11/$MONTH\" ;;\n       \
    \ *)  YEARMONTH=\"$YEAR/01/$MONTH\" ;;\n      esac\n      if ! [ -", "    local\
    \ date_str=$1\n\n    local valid_flag=\"false\"\n\n    if [ -z \"$date_str\" ];\
    \ then\n        valid_flag=\"false\"\n    else\n        if [[ $1 =~ ^[0-9]{1,2}-[0-9]{1,2}-[0-9]{4}$\
    \ ]]; then\n            valid_flag=\"true\"\n        else\n            if [[ $1\
    \ =~ ^[0-9]{1,2}-[0-9]{1,2}$ ]]; then\n                valid_flag=\"true\"\n \
    \           else\n                if [[ $1 =~ ^[0-9]{1,2}$ ]]; then\n        \
    \            valid_flag=\"true\"\n                else\n                    if\
    \ [[ $1 =~ ^[0-3][0-9]-[0-9]{1,2}-[0-9]{4}$ ]]; then\n                       \
    \ valid_flag=\"true\"\n                    else\n                        if [[\
    \ $1 =~ ^[0-3][0-9]-[0-9]{1,2}$ ]]; then\n                            valid_flag=\"\
    true\"\n                        else\n                            if [[ $1 =~\
    \ ^[0-3][0-9]$ ]]; then\n                                valid_flag=\"true\"\n\
    \                            else\n                                if [[ $1 =~\
    \ ^[0-9]{4}$ ]]; then\n                                    valid_flag=\"true\"\
    \n                                else\n                                    echo\
    \ \"$1 is invalid\"\n                                    valid_flag=\"false\"\n\
    \                                fi\n                            fi\n        \
    \                fi\n                    fi\n                fi\n            fi\n\
    \        fi\n    fi\n\n    echo $valid_flag", "    [[ -z $1 ]] && return 1\n \
    \   [[ -z \"${1:0:1}\" ]] && return 1\n    [[ -z \"${1:0:2}\" ]] && return 1\n\
    \    [[ -z \"${1:0:3}\" ]] && return 1\n    [[ -z \"${1:0:4}\" ]] && return 1\n\
    \    [[ -z \"${1:0:5}\" ]] && return 1\n    [[ -z \"${1:0:6}\" ]] && return 1\n\
    \    [[ -z \"${1:0:7}\" ]] && return 1\n    [[ -z \"${1:0:8}\" ]] && return 1\n\
    \    [[ -z \"${1:0:9}\" ]] && return 1\n    [[ -z \"${1:0:10}\" ]] && return 1\n\
    \    [[ -z \"${1:0:11}\" ]] && return 1\n    [[ -z \"${1:0:12}\" ]] && return\
    \ 1\n    [[ -z \"${1:0:13}\" ]] && return 1\n    [[ -z \"${1:0:14}\" ]] && return\
    \ 1\n    [[ -z \"${1:0:15}\" ]] && return 1\n    [[ -z \"${1:0:16}\" ]] && return\
    \ 1\n    [[ -z \"${1:0:17}\" ]] && return 1\n    [[ -z \"${1:0:18}\" ]] && return\
    \ 1\n    [[ -z \"${1:0:19}\" ]] && return 1\n    [[ -z \"${1:0:20}\" ]] && return\
    \ 1\n    [[ -z \"${1:0:21}\" ]] && return 1\n    [[ -z \"${1:0:22}\" ]] && return\
    \ 1\n    [[ -z \"${1:0:23}\" ]] && return 1\n    [[ -z \"${1:0:24}\" ]] && return\
    \ 1\n    [[ -z \"${1:0:25}\" ]] && return 1\n    [[ -z \"${1:0:26}\" ]] && return\
    \ 1\n    [[ -z \"${1:0:27}\" ]] && return 1\n    [[ -z \"${1:0:28}\" ]] && return\
    \ 1\n    [[ -z \"${1:0:29}\" ]] && return 1\n    [[ -z \"${1:0:30}\" ]] && return\
    \ 1\n    [[ -z \"${1:0:31}\" ]] && return 1\n    [[ -z \"${1:0:32}\" ]] && return\
    \ 1\n    [[ -z \"${1:0:33}\" ]] && return 1\n    [[ -z \"${1:0:34}\" ]] && return\
    \ 1\n    [[ -z \"${1:0:35}\" ]] && return 1\n    [[ -z \"${1:0:36}\" ]] && return\
    \ 1\n    ", "  local date\n  date=$1\n  [[ -z \"$date\" ]] && return 1\n  local\
    \ month\n  month=${date:0:2}\n  local day\n  day=${date:2:2}\n  [[ -z \"$day\"\
    \ ]] && return 1\n  local year\n  year=${date:6:4}\n  [[ -z \"$year\" ]] && return\
    \ 1\n  if (( ((day < 1) || (day > 31))) || ((month < 1) || (month > 12)) || ((day\
    \ < 1) || (day > 30)) || ((month == 2)) ; then\n    return 1\n  fi\n  if (( (month\
    \ == 1) || (month == 3) || (month == 5) || (month == 7) || (month == 8) || (month\
    \ == 10) || (month == 12) )) ; then\n    if (( (day < 1) || (day > 31) )) ; then\n\
    \      return 1\n    fi\n  fi\n  if (( (month == 4) || (month == 6) || (month\
    \ == 9) || (month == 11) )) ; then\n    if (( (day < 1) || (day > 30) )) ; then\n\
    \      return 1\n    fi\n  fi\n  if (( (month == 2) )) ; then\n    if (( (day\
    \ < 1) || (day > 29) )) ; then\n      return 1\n    fi\n  fi\n  return 0", " \
    \   local date_str=$1\n    local month=`echo $date_str | cut -d '-' -f 1`\n  \
    \  local day=`echo $date_str | cut -d '-' -f 2`\n    local year=`echo $date_str\
    \ | cut -d '-' -f 3`\n    \n    if [[ $month == 1 || $month == 3 || $month ==\
    \ 5 || $month == 7 || $month == 8 || $month == 10 || $month == 12 ]]; then\n \
    \     if (( $day < 1 || $day > 31 )); then\n        return false\n      else\n\
    \        return true\n      fi\n    else\n      if (( $day < 1 || $day > 30 ));\
    \ then\n        return false\n      else\n        return true\n      fi\n    fi",
  '    echo "$1" | grep -q "^[0-9][0-9][^0-9]*$" && echo "true" || echo "false"',
  "    local valid=false\n    local date=$1\n    if [ -n \"$date\" -a \"$date\" !=\
    \ \"\" ]; then\n        local month_days_year=${date//-/ }\n        # Replace\
    \ / with -\n        if [[ $month_days_year == *\"-\"* ]]; then\n            month_days_year=${month_days_year//-/\
    \ }\n        elif [[ $month_days_year == *\"-\"* ]]; then\n            month_days_year=${month_days_year//\\\
    / }\n        fi\n        local month=${month_days_year//\\/ }\n        local day=${month_days_year//\\\
    / }\n        local year=${month_days_year//\\/ }\n        if [[ $month == *\"\
    0\"* ]]; then\n            month=$((${month}-1))\n        fi\n        if [[ $month\
    \ == *\"12\"* ]]; then\n            month=$((${month}+1))\n        fi\n      \
    \  local month=${month//0/}\n        local month=${month//1/}\n        local month=${month//2/}\n\
    \        local month=${month//3/}\n        local month=${month//4/}\n        local\
    \ month=${month//5/}\n        local month=${month//6/}\n        local month=${month//7/}\n\
    \        local month=${month//8/}\n        local month=${month//9/}\n        local\
    \ month=${month//10/}\n        local month=${month//11/}\n        local month=${month//12/}\n\
    \        local month=$((${month}-${month}%12))\n        local day=$((${day}-1))\n\
    \        if [[ $day == *\"0\"* ]]; then\n            day=$((${day}-1))\n     \
    \   fi\n        if [[ $day == *\"31\"* ]]; then\n            day=$((${day}-1))\n\
    \        fi\n        if [[ $day == *\"30\"* ]]; then\n            day=$((${day}-1))\n\
    \        fi\n        if [[ $day == *\"29\"* ]]; then\n            day=$((${day}-1))\n\
    \        fi\n        if [[ $day == *\"31\"* ]]; then\n            day=$((${day}-1))\n\
    \        fi\n        if [[ $day == *\"30\"* ]]; then\n            day=$((${day}-1))\n\
    \        fi\n        if [[ $day == *\"29\"* ]]; then\n            day=$((${day}-1))\n\
    \        fi\n        if [[ $day == *\"31\"* ]]; then\n            day=$((${day}-1))\n\
    \        fi\n        if ", "  [ ! -z \"$1\" ] && [ \"$1\" != \"null\" ] && [ \"\
    $1\" != \"null\" ]\n  [ $(date +%s -d \"$1\") > 0 ] && [ \"$1\" != \"null\" ]\
    \ && [ \"$1\" != \"null\" ]\n  [ $(date +%s -d \"$1\" +\"%m\") > 1 && [ \"$1\"\
    \ != \"null\" ] && [ \"$1\" != \"null\" ]\n  [ $(date +%s -d \"$1\" +\"%d\") >\
    \ 1 && [ \"$1\" != \"null\" ] && [ \"$1\" != \"null\" ]\n  [ $(date +%s -d \"\
    $1\" +\"%y\") > 2012 && [ \"$1\" != \"null\" ] && [ \"$1\" != \"null\" ]\n  [\
    \ $(date +%s -d \"$1\" +\"%m\") > 0 && [ \"$1\" != \"null\" ] && [ \"$1\" != \"\
    null\" ]\n  [ $(date +%s -d \"$1\" +\"%d\") > 0 && [ \"$1\" != \"null\" ] && [\
    \ \"$1\" != \"null\" ]\n  [ $(date +%s -d \"$1\" +\"%m\") > 0 && [ \"$1\" != \"\
    null\" ] && [ \"$1\" != \"null\" ]\n  [ $(date +%s -d \"$1\" +\"%d\") > 1 && [\
    \ \"$1\" != \"null\" ] && [ \"$1\" != \"null\" ]\n  [ $(date +%s -d \"$1\" +\"\
    %d\") > 30 && [ \"$1\" != \"null\" ] && [ \"$1\" != \"null\" ]\n  [ $(date +%s\
    \ -d \"$1\" +\"%d\") > 29 && [ \"$1\" != \"null\" ] && [ \"$1\" != \"null\" ]\n\
    \  [ $(date +%s -d \"$1\" +\"%d\") > 28 && [ \"$1\" != \"null\" ] && [ \"$1\"\
    \ != \"null\" ]\n  [ $(date +%s -d \"$1\" +\"%d\") > 27 && [ \"$1\" != \"null\"\
    \ ] && [ \"$1\" != \"null\" ]\n  [ $(date +%s -d \"$1\" +\"%d\") > 26 && [ \"\
    $1\" != \"null\" ] && [ \"$1\" != \"null\" ]\n  [ $(date +%s -d \"$1\" +\"%d\"\
    ) > 25 && [ \"$1\" != \"null\" ] && [ \"$1\" != \"null\" ]\n  [ $(date +%s -d\
    \ \"$1\" +\"%d\") > 24 && [ \"$1\" != \"null\" ] && [ \"$1\" != \"null\" ]\n \
    \ [ $(date +%s -d \"$1\" +\"%d\") > 23 && [ \"$1\" != \"null\" ] && [ \"$1\" !=\
    \ \"null\" ]\n  [ $(date +%s -d \"$1\" +\"%d\") > 22 && [ \"$1\" != \"null\" ]\
    \ && [ \"$1\" != \"null\" ]\n  [ $(date +%s -d \"$1\" +\"%d\") > 21 && [ \"$1\"\
    \ != \"null\" ] && [ \"$1\" != \"null\" ]\n  [ $(date +%s -d \"$1\" +\"%d\") >\
    \ 20 && ", "  # The date should not be empty.\n  if [[ -z \"$1\" ]]; then\n  \
    \  echo \"The date string should not be empty.\" >&2\n    return 1\n  fi\n  #\
    \ The date should have a valid format.\n  # The date should be in the format:\
    \ mm-dd-yyyy\n  local MONTHNUM=`echo $1 | awk -F \"-\" '{print $3}'`\n  local\
    \ DAYNUM=`echo $1 | awk -F \"-\" '{print $4}'`\n  local YEARNUM=`echo $1 | awk\
    \ -F \"-\" '{print $5}'`\n  # The date should not be less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12.\n  local DAYCOUNT=`expr $DAYNUM - $MONTHNUM`\n\
    \  if [[ ( $DAYCOUNT < 1 ) || ( $DAYCOUNT > 31 ) ]]; then\n    echo \"The date\
    \ should be less than 1 but more than 31 days for month $MONTHNUM.\" >&2\n   \
    \ return 1\n  fi\n  # The date should not be less than 1 or higher than 30 days\
    \ for months 4,6,9,11.\n  local MONTHCOUNT=`expr $MONTHNUM - 2`\n  if [[ ( $MONTHCOUNT\
    \ < 1 ) || ( $MONTHCOUNT > 12 ) ]]; then\n    echo \"The date should be less than\
    \ 1 but more than 12 months for month $MONTHNUM.\" >&2\n    return 1\n  fi\n \
    \ # The date should not be less than 1 or higher than 29 days for the month 2.\n\
    \  local MONTHCOUNT=`expr $MONTHNUM - 1`\n  if [[ ( $MONTHCOUNT < 1 ) || ( $MONTHCOUNT\
    \ > 2 ) ]]; then\n    echo \"The date should be less than 1 but more than 29 days\
    \ for month $MONTHNUM.\" >&2\n    return 1\n  fi\n  # The date should not be less\
    \ than 1 or higher than 29 for the month 2.\n  local MONTHCOUNT=`expr $MONTHNUM`\n\
    \  if [[ ( $MONTHCOUNT < 1 ) || ( $MONTHCOUNT > 2 ) ]]; then\n    echo \"The date\
    \ should be less than 1 but more than 29 for month $MONTHNUM.\" >&2\n    return\
    \ 1\n  fi\n  # The date should be valid.\n  true", "  local d=$1\n  if [[ -z $d\
    \ ]]; then\n    echo \"Date string is empty\";\n    return 1;\n  fi\n  if [[ $d\
    \ != [0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9] ]]; then\n    echo \"\
    Invalid date format: $d\";\n    return 1;\n  fi\n  local i\n  for i in {1..12};\
    \ do\n    if [[ $d != ${i}*-${i}*-${i} ]]; then\n      echo \"Invalid date: $d\"\
    ;\n      return 1;\n    fi\n  done\n  for i in {1..2}; do\n    if [[ $d != ${i}*-${i}-${i}\
    \ ]]; then\n      echo \"Invalid date: $d\";\n      return 1;\n    fi\n  done\n\
    \  for i in {1..29}; do\n    if [[ $d != ${i}*-${i}-${i} ]]; then\n      echo\
    \ \"Invalid date: $d\";\n      return 1;\n    fi\n  done\n  for i in {1..31};\
    \ do\n    if [[ $d != ${i}*-${i}-${i} ]]; then\n      echo \"Invalid date: $d\"\
    ;\n      return 1;\n    fi\n  done\n  return 0", "    local day=1\n    local month=1\n\
    \    local year=1\n    local d=$1\n    while [[ $d =~ (([0-9]{2})-([0-9]{2})-([0-9]{4})\
    \ ) ]]\n    do\n        if [[ -z $1 ]]\n        then\n            return 1\n \
    \       fi\n        day=${BASH_REMATCH[1]}\n        month=${BASH_REMATCH[2]}\n\
    \        year=${BASH_REMATCH[3]}\n        (( day >= 1 && day <= 31 && month >\
    \ 1 && month <= 12 )) ||\n            (( month == 4 && day >= 1 && day <= 30 ))\
    \ ||\n            (( month == 6 && day >= 1 && day <= 29 )) ||\n            ((\
    \ month == 9 && day >= 1 && day <= 31 )) ||\n            (( month == 11 && day\
    \ >= 1 && day <= 30 )) ||\n            (( month == 12 && day >= 1 && day <= 29\
    \ ))\n        (( day == 1 || day == 3 || day == 5 || day == 7 || day == 8 || day\
    \ == 10 || day == 12 )) ||\n            (( day == 4 || day == 6 || day == 9 ||\
    \ day == 11 ))\n    done\n    return 0", "    local DATE_FORMAT='%m-%d-%Y'\n \
    \   local DAYS=()\n    local MONTHS=()\n    local YEARS=()\n\n    DATE_STR=\"\
    $1\"\n\n    local DAY=$(date -d \"$DATE_STR\" +\"%s\")\n    local MONTH=$(date\
    \ -d \"$DATE_STR\" +\"%m\")\n    local YEAR=$(date -d \"$DATE_STR\" +\"%Y\")\n\
    \n    # Check for non-zero return code\n    if [ $? -ne 0 ]\n    then\n      \
    \  return 0\n    fi\n    # Check for valid number of days\n    if [ -z \"$DAY\"\
    \ ]\n    then\n        return 0\n    fi\n    # Check for valid number of days\n\
    \    if [ \"$DAY\" -lt 1 -o \"$DAY\" -gt 31 ]\n    then\n        return 0\n  \
    \  fi\n    # Check for valid number of days\n    if [ \"$DAY\" -lt 1 -o \"$DAY\"\
    \ -gt 30 ]\n    then\n        return 0\n    fi\n    # Check for valid number of\
    \ days\n    if [ \"$MONTH\" -lt 1 -o \"$MONTH\" -gt 12 ]\n    then\n        return\
    \ 0\n    fi\n\n    # Add the day to the DAYS array\n    DAYS+=($DAY)\n\n    #\
    \ Add the month to the MONTHS array\n    MONTHS+=($MONTH)\n\n    # Add the year\
    \ to the YEARS array\n    YEARS+=($YEAR)\n\n    local TODAY\n    TODAY=$(date\
    \ \"+%s\")\n    local TOMORROW\n    TOMORROW=$(( $TODAY + 86400 ))\n\n    local\
    \ DAYS_CHECK\n    local MONTHS_CHECK\n    local YEARS_CHECK\n\n    if [ \"$TODAY\"\
    \ -ge \"$TOMORROW\" ]\n    then\n        DAYS_CHECK=$(( DAYS + 1 ))\n    else\n\
    \        DAYS_CHECK=$(( DAYS ))\n    fi\n\n    if [ \"$MONTHS[0]\" -ge 12 ]\n\
    \    then\n        MONTHS_CHECK=$(( MONTHS + 1 ))\n    else\n        MONTHS_CHECK=$((\
    \ MONTHS ))\n    fi\n\n    if [ \"$YEARS[0]\" -ge 1000 ]\n    then\n        YEARS_CHECK=$((\
    \ YEARS + 1 ))\n    else\n        YEARS_CHECK=$(( YEARS ))\n    fi\n\n    if [\
    \ \"${#DAYS[@]}\" -eq 0 -o \"${#MONTHS[@]}\" -eq 0 -o \"${#YEARS[@]}\" -eq 0 ]\n\
    \    then\n        return 0\n    fi\n\n    if [ ${#DAYS[@]} -eq ${#MONTHS[@]}\
    \ -o ${", "    [ \"$1\" ]\n    test -n \"$1\"\n    [ $# -eq 1 ]\n    [ $(echo\
    \ $1 | egrep -c '^[0-9]{2}-[0-9]{2}-[0-9]{4}$') -eq 1 ]\n    [ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$\
    \ ]\n    [ $2 -ge 1 ]\n    [ $2 -le 12 ]\n    [ $3 -ge 1 ]\n    [ $3 -le 31 ]\n\
    \    [ $4 -ge 1 ]\n    [ $4 -le 30 ]\n    [ $2 -gt $3 ]\n    [ $3 -gt $4 ]\n \
    \   [ $4 -gt $2 ]", "    local date YOURDATE\n    YOURDATE=$1\n    if [ -n \"\
    $YOURDATE\" ]; then\n        date=${YOURDATE//-/}\n        YOURDATE=${date//\\\
    //-}\n        YOURDATE=${YOURDATE//\\//-}\n        YOURDATE=${YOURDATE//:/-}\n\
    \        YOURDATE=${YOURDATE//\\//-}\n        YOURDATE=${YOURDATE//^/}\n     \
    \   YOURDATE=${YOURDATE//-/}\n        YOURDATE=${YOURDATE//-/}\n        YOURDATE=${YOURDATE//-/}\n\
    \        YOURDATE=${YOURDATE//-/}\n        YOURDATE=${YOURDATE//-/}\n        YOURDATE=${YOURDATE//-/}\n\
    \        YOURDATE=${YOURDATE//-/}\n        YOURDATE=${YOURDATE//-/}\n        YOURDATE=${YOURDATE//-/}\n\
    \        YOURDATE=${YOURDATE//-/}\n        YOURDATE=${YOURDATE//-/}\n        YOURDATE=${YOURDATE//-/}\n\
    \        YOURDATE=${YOURDATE//-/}\n        YOURDATE=${YOURDATE//-/}\n        YOURDATE=${YOURDATE//-/}\n\
    \        YOURDATE=${YOURDATE//-/}\n        YOURDATE=${YOURDATE//-/}\n        YOURDATE=${YOURDATE//-/}\n\
    \        YOURDATE=${YOURDATE//-/}\n        YOURDATE=${YOURDATE//-/}\n        YOURDATE=${YOURDATE//-/}\n\
    \        YOURDATE=${YOURDATE//-/}\n        YOURDATE=${YOURDATE//-/}\n        YOURDATE=${YOURDATE//-/}\n\
    \        YOURDATE=${YOURDATE//-/}\n        YOURDATE=${YOURDATE//-/}\n        YOURDATE=${YOURDATE//-/}\n\
    \        YOURDATE=${YOURDATE//-/}\n        YOURDATE=${YOURDATE//-/}\n        YOURDATE=${YOURDATE//-/}\n\
    \        YOURDATE=${YOURDATE//-/}\n        YOURDATE=${YOURDATE", "  local IFS=$1\n\
    \  local d=$2\n  local M=$3\n  local Y=$4\n\n  # Check if input is an empty string\n\
    \  if [ -z \"$d\" ]; then\n    return 0\n  fi\n\n  # Check if the month is invalid\n\
    \  if [ -z \"$M\" ]; then\n    return 0\n  fi\n  \n  # Check if the year is invalid\n\
    \  if [ -z \"$Y\" ]; then\n    return 0\n  fi\n\n  # Check if the date is invalid\n\
    \  if [[ $d =~ ^([0-9])$ && $d -le 31 ] && [[ $M -ge 1 && $M -le 12 ]]; then\n\
    \    return 0\n  fi\n\n  # Check if the date is invalid\n  if [[ $d =~ ^([0-9])$\
    \ && $d -le 30 ] && [[ $M -ge 4 && $M -le 11 ]]; then\n    return 0\n  fi\n\n\
    \  # Check if the date is invalid\n  if [[ $d =~ ^([0-9])$ && $d -le 29 ]]; then\n\
    \    return 0\n  fi\n\n  return 1", "  date=\"$1\"\n  if [[ ! -z \"$date\" ]];\
    \ then\n    [[ \"$date\" =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]] || return 1\n\
    \    [[ \"$1\" =~ ^(1[0-2]|0[1-9]) ]]  || return 1\n    [[ \"$2\" =~ ^([1-9]|[12][0-9]|3[01])$\
    \ ]] || return 1\n    [[ \"$2\" =~ ^(1[0-2]|0[1-9]) ]]  || return 1\n    [[ \"\
    $2\" =~ ^([1-9]|[12][0-9]|3[01])$ ]] || return 1\n    [[ \"$2\" =~ ^([1-9]|[12][0-9]|3[01])$\
    \ ]] || return 1\n    [[ \"$2\" =~ ^(1[0-2]|0[1-9]) ]]  || return 1\n    [[ \"\
    $2\" =~ ^(1[0-2]|0[1-9]) ]]  || return 1\n    [[ \"$2\" =~ ^([1-9]|[12][0-9]|3[01])$\
    \ ]] || return 1\n    [[ \"$2\" =~ ^(1[0-2]|0[1-9]) ]]  || return 1\n    [[ \"\
    $2\" =~ ^(1[0-2]|0[1-9]) ]]  || return 1\n    [[ \"$2\" =~ ^([1-9]|[12][0-9]|3[01])$\
    \ ]] || return 1\n    [[ \"$2\" =~ ^(1[0-2]|0[1-9]) ]]  || return 1\n    [[ \"\
    $2\" =~ ^(1[0-2]|0[1-9]) ]]  || return 1\n    [[ \"$2\" =~ ^([1-9]|[12][0-9]|3[01])$\
    \ ]] || return 1\n    [[ \"$2\" =~ ^(1[0-2]|0[1-9]) ]]  || return 1\n    [[ \"\
    $2\" =~ ^(1[0-2]|0[1-9]) ]]  || return 1\n    [[ \"$2\" =~ ^([1-9]|[12][0-9]|3[01])$\
    \ ]] || return 1\n    [[ \"$2\" =~ ^(1[0-2]|0[1-9]) ]]  || return 1\n    [[ \"\
    $2\" =~ ^(1[0-2]|0[1-9]) ]]  || return 1\n    [[ \"$2\" =~ ^([1-9]|[12][0-9]|3[01])$\
    \ ]] || return 1\n    [[ \"$2\" =~ ^(1[0-2]|0[1-9]) ]]  || return 1\n    [[ \"\
    $2\" =~ ^(1[0-2]|0[1-9]) ]]  || return 1\n    [[ \"$2\" =~ ^([1-9]|[12][0-9]|3[0",
  "  local date=$1\n  echo $date | grep -q '^\\s*$'\n  if [ $? -ne 0 ]; then\n   \
    \ echo \"$date not valid\"\n  else\n    echo \"$date valid\"\n  fi\n  date=$2\n\
    \  echo $date | grep -q '^[[:digit:]]{1,2}-[[:digit:]]{1,2}-[[:digit:]]{4}$'\n\
    \  if [ $? -ne 0 ]; then\n    echo \"$date not valid\"\n  else\n    echo \"$date\
    \ valid\"\n  fi\n  date=$3\n  echo $date | grep -q '^[[:digit:]]{1,2}\\/[[:digit:]]{1,2}\\\
    /[[:digit:]]{4}$'\n  if [ $? -ne 0 ]; then\n    echo \"$date not valid\"\n  else\n\
    \    echo \"$date valid\"\n  fi", "    local date=\"$1\"\n    if [ -z \"$date\"\
    \ ]; then\n        echo \"The given date string is empty.\"\n        return 0\n\
    \    elif [ \"$date\" = \" \" ]; then\n        echo \"The given date string is\
    \ empty.\"\n        return 0\n    elif [ \"$date\" = \"--\" ]; then\n        echo\
    \ \"The given date string is empty.\"\n        return 0\n    elif [ \"$date\"\
    \ = \"null\" ]; then\n        echo \"The given date string is empty.\"\n     \
    \   return 0\n    elif [ \"$date\" = \"null\" ]; then\n        echo \"The given\
    \ date string is empty.\"\n        return 0\n    elif [ \"$date\" = \"null\" ];\
    \ then\n        echo \"The given date string is empty.\"\n        return 0\n \
    \   elif [ \"$date\" = \"null\" ]; then\n        echo \"The given date string\
    \ is empty.\"\n        return 0\n    elif [ \"$date\" = \"null\" ]; then\n   \
    \     echo \"The given date string is empty.\"\n        return 0\n    elif [ \"\
    $date\" = \"null\" ]; then\n        echo \"The given date string is empty.\"\n\
    \        return 0\n    elif [ \"$date\" = \"null\" ]; then\n        echo \"The\
    \ given date string is empty.\"\n        return 0\n    elif [ \"$date\" = \"null\"\
    \ ]; then\n        echo \"The given date string is empty.\"\n        return 0\n\
    \    elif [ \"$date\" = \"null\" ]; then\n        echo \"The given date string\
    \ is empty.\"\n        return 0\n    elif [ \"$date\" = \"null\" ]; then\n   \
    \     echo \"The given date string is empty.\"\n        return 0\n    elif [ \"\
    $date\" = \"null\" ]; then\n        echo \"The given date string is empty.\"\n\
    \        return 0\n    elif [ \"$date\" = \"null\" ]; then\n        echo \"The\
    \ given date string is empty.\"\n        return 0\n    elif [ \"$date\" = \"null\"\
    \ ]; then\n        echo \"The given date string is empty.\"\n        return 0\n\
    \    elif [ \"$date\" = \"null\" ]; then\n        echo \"The given date string\
    \ is empty.\"\n        return 0\n    elif [ \"$date\" = \"null\" ]; then\n   \
    \     echo \"The given date string is empty.\"\n        return 0\n    elif [ \"\
    $date\" = \"null\" ]; then\n        echo \"The given date string is empty.\"\n\
    \        return 0\n    elif [ \"$date\" = \"null\" ]; then\n        echo \"The\
    \ given date string is empty.\"\n        return 0\n    elif [ \"$date\" = \"null\"\
    \ ]; then\n        echo \"The given date string is empty.\"\n        return 0\n\
    \    elif [ \"$date\" = \"null\" ]; then\n        echo \"The given date string\
    \ is empty.\"\n        return 0\n    elif [ \"$date\" = \"null\" ]; then\n   \
    \     echo \"The given date string is empty.\"\n        return 0\n    elif [ \"\
    $date\" = \"null\" ]; then\n        echo \"The given date string is empty.\"\n\
    \        return 0\n    elif [ \"$date\" = \"null\" ]; then\n        echo \"The\
    \ given date string is empty.\"\n        return 0\n    elif [ \"$date\" = \"null\"\
    \ ]; then\n        echo \"The given date string is empty.\"\n        return 0\n\
    \    elif [ \"$date\" = \"null\" ]; then\n        echo \"The given ", "   [ -n\
    \ \"$1\" ] && [[ ${#1} -le 30 ]] && [[ ${#1} -le 31 ]] && [[ ${#1} -le 30 ]] &&\
    \ [[ ${#1} -le 29 ]] && [[ ${#1} -le 12 ]] && [[ $(date -d \"$1\" \"+%m-%d-%Y\"\
    ) =~ ^(\\d{1,2})\\-(\\d{1,2})\\-(\\d{4})$ ]] || return 1\n   return 0", "\t[ -z\
    \ \"$1\" ] && return 1\n\t[[ $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4} ]] && return 1\
    \ || return 0\n\t[[ $1 =~ ^[0-9]{2}\\/[0-9]{2}\\/[0-9]{4} ]] && return 1 || return\
    \ 0\n\t[[ $1 =~ ^[0-3][0-9]-[0-3][0-9]-[0-9][0-9][0-9][0-9]$ ]] && return 1 ||\
    \ return 0\n\t[[ $1 =~ ^[0-3][0-9]\\/[0-3][0-9]\\/[0-9][0-9][0-9][0-9]$ ]] &&\
    \ return 1 || return 0\n\t[[ $1 =~ ^[0-3][0-9]\\-[0-3][0-9]-[0-9][0-9][0-9][0-9]$\
    \ ]] && return 1 || return 0\n\t[[ $1 =~ ^[0-3][0-9]\\/[0-3][0-9]\\/[0-9][0-9][0-9][0-9]$\
    \ ]] && return 1 || return 0\n\t[[ $1 =~ ^[0-3][0-9]\\-[0-3][0-9]\\/[0-9][0-9][0-9][0-9]$\
    \ ]] && return 1 || return 0\n\t[[ $1 =~ ^[0-3][0-9]\\/[0-3][0-9]\\-[0-9][0-9][0-9][0-9]$\
    \ ]] && return 1 || return 0\n\t[[ $1 =~ ^[0-3][0-9]\\-[0-3][0-9]\\/[0-9][0-9][0-9][0-9]$\
    \ ]] && return 1 || return 0\n\t[[ $1 =~ ^[0-3][0-9]\\-[0-3][0-9]\\-[0-9][0-9][0-9][0-9]$\
    \ ]] && return 1 || return 0\n\t[[ $1 =~ ^[0-3][0-9]\\/[0-3][0-9]\\-[0-9][0-9][0-9][0-9]$\
    \ ]] && return 1 || return 0\n\t[[ $1 =~ ^[0-3][0-9]\\-[0-3][0-9]\\/[0-9][0-9][0-9][0-9]$\
    \ ]] && return 1 || return 0\n\t[[ $1 =~ ^[0-3][0-9]\\-[0-3][0-9]\\-[0-9][0-9][0-9][0-9]$\
    \ ]] && return 1 || return 0\n\t[[ $1 =~ ^[0-3][0-9]\\/[0-3][0-9]\\/[0-9][0-9][0-9][0-9]$\
    \ ]] && return 1 || return 0\n\t[[ $1 =~ ^[0-3][0-9]\\-[0-3][0-9]\\/[0-9][0-9][0-9][0-9]$\
    \ ]] && return 1 || return 0\n\t[[ $1 =~ ^[0-3][0-9]\\-[0-3][0-9]\\-[0-9][0-9][0-9][0-9]$\
    \ ]] && return 1 || return 0\n\t[[ $1 =~ ^[0-3][0-9]\\/[0-3][0-9]\\/[0-9][0-9][0-9][0-9]$\
    \ ]] && return 1 || return 0\n", "    local date=$1\n    local month=`date +%m\
    \ -d \"$date\" +%b`\n    local day=`date +%d -d \"$date\" +%b`\n    local year=`date\
    \ +%y -d \"$date\"`\n    local months=(\n        1 3 5 7 8 10 12\n        4 6\
    \ 9 11\n        2 )\n    local days=(\n        31 30 29\n        31 30 29 )\n\
    \    local months_ok=1\n    local days_ok=1\n    for month in \"${months[@]}\"\
    \n    do\n        if [ \"$month\" -eq \"$month\" -a \"$day\" -eq \"$day\" ]; then\n\
    \            months_ok=0\n            break\n        fi\n    done\n    if [ $months_ok\
    \ ]; then\n        for day in \"${days[@]}\"\n        do\n            if [ \"\
    $day\" -eq \"$day\" ]; then\n                days_ok=0\n                break\n\
    \            fi\n        done\n    fi\n    if [ $days_ok ]; then\n        if [\
    \ \"$month\" -le \"1\" -o \"$month\" -ge \"12\" ]; then\n            months_ok=0\n\
    \        else\n            if [ \"$day\" -le \"1\" -o \"$day\" -ge \"30\" ]; then\n\
    \                days_ok=0\n            else\n                if [ \"$year\" -le\
    \ \"1\" -o \"$year\" -ge \"60\" ]; then\n                    days_ok=0\n     \
    \           else\n                    if [ \"$month\" -le \"2\" -o \"$month\"\
    \ -ge \"12\" ]; then\n                        months_ok=0\n                  \
    \  else\n                        return 1\n                    fi\n          \
    \      fi\n            fi\n        fi\n    fi\n    if [ $months_ok -eq 0 -o $days_ok\
    \ -eq 0 ]; then\n        return 0\n    else\n        return 1\n    fi", "    DATE_FORMAT=\"\
    %m-%d-%Y\"\n    if [ -z \"$1\" ]; then\n        return 1\n    fi\n\n    # Validating\
    \ date string format\n    [[ $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4} ]] || {\n     \
    \   echo \"Invalid date format: $1\"\n        return 1\n    }\n\n    # Validating\
    \ number of days\n    # A leap year\n    DAYS_IN_A_LEAPYEAR=365\n    DAYS_IN_A_MONTH=31\n\
    \    DAYS_IN_A_YEAR=366\n    if [ $(expr $1 : '-0131') -gt 0 ]; then\n       \
    \ DAYS_IN_A_LEAPYEAR=366\n    elif [ $(expr $1 : '-0122') -gt 0 ]; then\n    \
    \    DAYS_IN_A_MONTH=29\n    fi\n\n    # Validating number of months\n    # A\
    \ leap year\n    DAYS_IN_MONTHS_IN_LEAPYEAR=12\n    DAYS_IN_MONTHS_IN_YEAR=12\n\
    \    if [ $(expr $1 : '-0131') -gt 0 ]; then\n        DAYS_IN_MONTHS_IN_LEAPYEAR=12\n\
    \    elif [ $(expr $1 : '-0122') -gt 0 ]; then\n        DAYS_IN_MONTHS_IN_YEAR=12\n\
    \    fi\n\n    # Validating months\n    if [ $(expr $1 : '-0') -gt 0 ]; then\n\
    \        MONTHS_IN_LEAPYEAR=$(echo \"$1\"|awk 'BEGIN{\n            for(i=1;i<=3;i++)\n\
    \            {\n              count=0;\n              for(j=1;j<=12;j++)\n   \
    \           {\n                count=count+(($i-1) * $j);\n              }\n \
    \             days[count]=$i-1;\n            }\n            print days[$1%12]\n\
    \          }')\n        if [ -z $MONTHS_IN_LEAPYEAR ]; then\n            MONTHS_IN_LEAPYEAR=12\n\
    \        fi\n        if [ $(expr $MONTHS_IN_LEAPYEAR : '-') -gt 0 ]; then\n  \
    \          echo \"Invalid months: $1\"\n            return 1\n        fi\n   \
    \ else\n        MONTHS_IN_YEAR=$(echo \"$1\"|awk 'BEGIN{\n            for(i=1;i<=12;i++)\n\
    \            {\n              count=0;\n              for(j=1;j<=12;j++)\n   \
    \           {\n                count=count+(($i-1) * $j);\n              }\n \
    \             days[count]=$i-1;\n            }\n            print days[$1%12]\n\
    \          }')\n        if [ $(expr $MONTHS_IN_YEAR : '", "   if [[ \"$1\" ==\
    \ \"\" ]] ; then\n      return 1\n   fi\n   if [[ \"$1\" != [0-9][0-9]*-[0-9][0-9]*-[0-9][0-9][0-9][0-9]\
    \ ]] ; then\n      return 1\n   fi\n   if [[ \"$1\" == [0-9][0-9]*-[0-9][0-9]*-[0-9][0-9][0-9][0-9]\
    \ ]] ; then\n      if [[ \"$1\" != [0-9][0-9]*-[0-9][0-9]*-[0-9][0-9][0-9][0-9]\
    \ ]] ; then\n         return 1\n      fi\n   fi\n   if [[ \"$1\" == [0-9][0-9]*-[0-9][0-9]*-[0-9][0-9][0-9][0-9]\
    \ ]] ; then\n      if [[ \"$1\" != [0-9][0-9]*-[0-9][0-9]*-[0-9][0-9][0-9][0-9]\
    \ ]] ; then\n         return 1\n      fi\n   fi\n   if [[ \"$1\" == [0-9][0-9]*-[0-9][0-9]*-[0-9][0-9][0-9][0-9]\
    \ ]] ; then\n      if [[ \"$1\" != [0-9][0-9]*-[0-9][0-9]*-[0-9][0-9][0-9][0-9]\
    \ ]] ; then\n         return 1\n      fi\n   fi\n   if [[ \"$1\" == [0-9][0-9]*-[0-9][0-9]*-[0-9][0-9][0-9][0-9]\
    \ ]] ; then\n      if [[ \"$1\" != [0-9][0-9]*-[0-9][0-9]*-[0-9][0-9][0-9][0-9]\
    \ ]] ; then\n         return 1\n      fi\n   fi\n   if [[ \"$1\" == [0-9][0-9]*-[0-9][0-9]*-[0-9][0-9][0-9][0-9]\
    \ ]] ; then\n      if [[ \"$1\" != [0-9][0-9]*-[0-9][0-9]*-[0-9][0-9][0-9][0-9]\
    \ ]] ; then\n         return 1\n      fi\n   fi\n   if [[ \"$1\" == [0-9][0-9]*-[0-9][0-9]*-[0-9][0-9][0-9][0-9]\
    \ ]] ; then\n      if [[ \"$1\" != [0-9][0-9]*-[0-9][0-9]*-[0-9][0-9][0-9][0-9]\
    \ ]] ; then\n         return 1\n      fi\n   fi\n   if [[ \"$1\" == [0-9][0-9]*-[0-9][0-9]*-[0-9][0-9][0-9][0-9]\
    \ ]] ; then\n      if [[ \"$1\" != [0-9][0-9]*-[0-9][0-9]*-[0-9][0-9][0-9][0-9]\
    \ ]] ; then\n         return 1\n      fi\n   fi\n   if [[ \"$1\" == [0-9][0-9]*-[0-9][0-9]*-[0-9][0-9][0-9][0-9]\
    \ ]] ; then\n      if [[ \"$1\" != [0-9][0-9]*-[0-9][0-9]*-[0-9][0-9][0-9][0-9]\
    \ ]] ; then\n         return 1\n      fi\n   fi\n   if [[ \"$1\" == [0-9][0-9]*-[0-9][0-9]*-[0-9][0-9][0-9][0-9]\
    \ ]] ; then\n      if [[ \"$", "    local date_str=\"$1\"\n    local month_len=\"\
    $(get_months_len $1 $2)\"\n    local day_len=\"$(get_days_len $1 $2)\"\n    local\
    \ year_len=\"$(get_years_len $1 $2)\"\n\n    if [ \"$month_len\" -eq 0 ] || [\
    \ \"$day_len\" -eq 0 ] || [ \"$year_len\" -eq 0 ]; then\n        echo \"Invalid\
    \ date format!\"\n    else\n        if [ \"$month_len\" -lt 1 ] || [ \"$month_len\"\
    \ -gt 12 ]; then\n            echo \"Invalid month!\"\n        else\n        \
    \    if [ \"$day_len\" -lt 1 ] || [ \"$day_len\" -gt 31 ]; then\n            \
    \    echo \"Invalid number of days!\"\n            else\n                if [\
    \ \"$year_len\" -lt 1 ] || [ \"$year_len\" -gt 30 ]; then\n                  \
    \  echo \"Invalid year!\"\n                else\n                    if [ \"$month_len\"\
    \ -eq 2 ] && [ \"$day_len\" -eq 29 ]; then\n                        echo \"Invalid\
    \ number of days!\"\n                    else\n                        echo \"\
    true\"\n                    fi\n                fi\n            fi\n        fi\n\
    \    fi", '  date "+${1:--%m%d%Y}" > /dev/null 2>&1', "  local date=\"${1##*\\\
    /}\"\n  local year=\"${date:0:4}\"\n  local month=\"${date:4:2}\"\n  local day=\"\
    ${date:6:3}\"\n\n  local months[12]=\"Jan-Dec January-December\"\n  local days[31]=\"\
    31st Mar-Apr 05-Jun Jul-Aug 09-Oct 11-Nov 13-Dec 15-Feb 16-Jan 17-Feb 18-Mar 19-Apr\
    \ 20-May 21-Jun 22-Jul 23-Aug 24-Sep 25-Oct 26-Nov 27-Dec 28-Jan 29-Feb 30-Mar\
    \ 31\"\n  local days[30]=\"30th Apr 05-Jun Jul-Aug 09-Oct 11-Nov 13-Dec 15-Feb\
    \ 16-Jan 17-Feb 18-Mar 19-Apr 20-May 21-Jun 22-Jul 23-Aug 24-Sep 25-Oct 26-Nov\
    \ 27-Dec 28-Jan 29-Feb 30-Mar 31\"\n  local days[29]=\"29th Apr 05-Jun Jul-Aug\
    \ 09-Oct 11-Nov 13-Dec 15-Feb 16-Jan 17-Feb 18-Mar 19-Apr 20-May 21-Jun 22-Jul\
    \ 23-Aug 24-Sep 25-Oct 26-Nov 27-Dec 28-Jan 29-Feb 30-Mar 31\"\n\n  # If days\
    \ is empty and months is empty or month is empty, then date is not valid\n  if\
    \ [ -z \"$day\" ] && [ -z \"$month\" ]; then\n    return false\n  fi\n  # If days\
    \ is empty and months is non-empty, then date is not valid\n  if [ -z \"$day\"\
    \ ] && [ \"$month\" ] && [ \"$months\" ]; then\n    return false\n  fi\n  # If\
    \ months is empty and days is empty or day is empty, then date is not valid\n\
    \  if [ \"$day\" ] && [ -z \"$month\" ]; then\n    return false\n  fi\n  # If\
    \ months is non-empty and day is empty or day is non-empty, then date is not valid\n\
    \  if [ \"$month\" ] && [ \"$day\" ] && [ \"$days\" ]; then\n    return false\n\
    \  fi\n  # If months is non-empty, then date must be one of the months.\n  if\
    \ [ \"$month\" ] && [ \"$months\" ]; then\n    [ ${months[$month]} != $date ]\
    \ && return false\n", "  local date month\n  # We need to check whether the date\
    \ string is empty or not.\n  if [ -z \"$1\" ]; then\n    echo \"Date string cannot\
    \ be empty!\"\n    return 1\n  fi\n  # We need to check whether the number of\
    \ days is less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the\
    \ number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\
    \ And, the number of days is not less than 1 or higher than 29 for the month 2.\n\
    \  if [[ $1 =~ ^([0-9]+)-[0-9]+-[0-9]{4,8}$ && $1 -lt 1 ]] ; then\n    echo \"\
    Invalid date format! The number of days is less than 1 or higher than 31 days\
    \ for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher\
    \ than 30 days for months 4,6,9,11. And, the number of days is not less than 1\
    \ or higher than 29 for the month 2.\"\n    return 1\n  fi\n  # We need to check\
    \ whether the months should not be less than 1 or higher than 12.\n  if [[ $1\
    \ =~ ^([0-9]+)-[0-9]+-[0-9]{2}$ && $1 -gt 12 ]] ; then\n    echo \"Invalid date\
    \ format! The months should not be less than 1 or higher than 12.\"\n    return\
    \ 1\n  fi\n  # We need to check whether the date should be in the format: mm-dd-yyyy\n\
    \  if [[ $1 =~ ^([0-9]+)-[0-9]+-[0-9]{2}$ ]] ; then\n    date=${BASH_REMATCH[1]}\n\
    \    # If the month is greater than or equal to 11, the date string must have\
    \ 4 digits for the month\n    if [[ \"$date\" =~ ^([0-9]+)-([0-9]+)-([0-9]+)$\
    \ ]] ; then\n      month=${BASH_REMATCH[1]}\n      day=${BASH_REMATCH[2]}\n  \
    \    if [[ $month -ge 11 ]] ; then\n        if [[ \"$day\" =~ ^[0-9]+$ ]] ; then\n\
    \          if (( ( ${month} >= 1 )) &&\n            (( ( ${month} <= 12) )) &&\n\
    \            (( ( ${day} <= 31 )) &&\n            (( ( ${day} >= 1 )) )) ; then\n\
    \            return 0\n          fi\n        fi\n      fi\n    fi\n  fi\n  echo\
    \ \"Invalid date format! Date should be in the format: mm-dd-yyyy.\"\n  return\
    \ 1", "    local date valid_date=$1\n    IFS='-'\n    read -r month day year <<<\
    \ \"$date\"\n    months=()\n    if [[ ${month} -le 0 ]]; then\n        months=\"\
    0 1 2 3 4 5 6 7 8 9 10 11 12\"\n    elif [[ ${month} -eq 1 ]]; then\n        months=\"\
    1 3 5 7 8 10 12\"\n    elif [[ ${month} -eq 2 ]]; then\n        months=\"4 6 9\
    \ 11\"\n    fi\n    days=(1 3 5 7 8 10 12 14 16 18 20 22 24 26 28 30 32)\n   \
    \ if [[ ${day} -le 0 ]]; then\n        days=\"0 1 2 3 4 5 6 7 8 9 10 11 12\"\n\
    \    elif [[ ${day} -eq 1 ]]; then\n        days=\"1 2 3 4 5 6 7 8 9 10 11\"\n\
    \    elif [[ ${day} -eq 2 ]]; then\n        days=\"2 3 4 5 6 7 8 9 10 11\"\n \
    \   elif [[ ${day} -eq 3 ]]; then\n        days=\"3 4 5 6 7 8 9 10 11\"\n    elif\
    \ [[ ${day} -eq 4 ]]; then\n        days=\"4 5 6 7 8 9 10 11\"\n    elif [[ ${day}\
    \ -eq 5 ]]; then\n        days=\"5 6 7 8 9 10 11\"\n    elif [[ ${day} -eq 6 ]];\
    \ then\n        days=\"6 7 8 9 10 11\"\n    elif [[ ${day} -eq 7 ]]; then\n  \
    \      days=\"7 8 9 10 11\"\n    elif [[ ${day} -eq 8 ]]; then\n        days=\"\
    8 9 10 11\"\n    elif [[ ${day} -eq 9 ]]; then\n        days=\"9 10 11\"\n   \
    \ elif [[ ${day} -eq 10 ]]; then\n        days=\"10 11\"\n    elif [[ ${day} -eq\
    \ 11 ]]; then\n        days=\"11\"\n    elif [[ ${day} -eq 12 ]]; then\n     \
    \   days=\"12\"\n    fi\n    if [[ \"$month\" -le \"12\" ]]; then\n        echo\
    \ \"false\"\n    elif [[ \"$month\" -ge \"01\" ]]; then\n        for m in \"${months[@]}\"\
    ; do\n            if [[ \"${day}\" == \"${days[$((month-1))]}\" ]]; then\n   \
    \             echo \"true\"\n                break\n            fi\n        done\n\
    \    else\n        for m in \"${months[@]}\"; do\n            if [[ \"${day}\"\
    \ == \"", "\tlocal valid=true\n\t[[ $1 ]] || return 1\n\tlocal d=$1\n\tlocal m=`echo\
    \ \"$d\" | cut -c-3 | cut -c-2`\n\tlocal d=`echo \"$d\" | cut -c-1`\n\tlocal y=`echo\
    \ \"$d\" | cut -c-5`\n\t[[ \"$m\" -ge 1 && \"$m\" -le 12 && \"$d\" -ge 1 && \"\
    $d\" -le 31 ]] || return 1\n\t[[ \"$m\" -ge 4 && \"$m\" -le 6 && \"$d\" -ge 1\
    \ && \"$d\" -le 30 ]] || return 1\n\t[[ \"$m\" -ge 2 && \"$m\" -le 12 && \"$d\"\
    \ -ge 1 && \"$d\" -le 29 ]] || return 1\n\treturn 0", "  if [[ $1 ]]; then\n \
    \   # Check if month exists\n    if [[ $1 =~ ^[0-9]+\\-[0-9]+\\-[0-9]+ ]]; then\n\
    \      # Check if month value is greater than 12\n      if [[ $1 =~ ^[0-9]+\\\
    -[0-9]+\\/[0-9]+ ]]; then\n        # Check if month value is less than or equal\
    \ to 31\n        if [[ $1 =~ ^[0-9]+\\-[0-9]+\\/[0-9]\\-[0-9]+$ ]]; then\n   \
    \       # Check if month value is less than or equal to 30\n          if [[ $1\
    \ =~ ^[0-9]+\\-[0-9]+\\/[0-9]\\-[0-9]\\-[0-9]+$ ]]; then\n            # Check\
    \ if month value is less than or equal to 29\n            if [[ $1 =~ ^[0-9]+\\\
    -[0-9]+\\/[0-9]\\-[0-9]\\-[0-9]\\-[0-9]+$ ]]; then\n              # Check if day\
    \ is not less than or equal to 31\n              if [[ $1 =~ ^[0-9]+\\-[0-9]+\\\
    -[0-9]+$ ]]; then\n                # Check if day is not less than or equal to\
    \ 30\n                if [[ $1 =~ ^[0-9]+\\-[0-9]+\\-[0-9]\\-[0-9]+$ ]]; then\n\
    \                  return 1\n                else\n                  return 0\n\
    \                fi\n              else\n                return 0\n          \
    \    fi\n            else\n              return 0\n            fi\n          else\n\
    \            return 0\n          fi\n        else\n          return 0\n      \
    \  fi\n      else\n        return 0\n      fi\n    else\n      return 0\n    fi\n\
    \  else\n    return 0\n  fi", "  local VALID_DAYS=\"1-31 31-30 30-29 29-31 31-31\"\
    \n  local VALID_MONTHS=\"1-12 3-12 5-12 7-12 9-12 11-12 12-31\"\n  if [ -z \"\
    $1\" ]\n  then\n    exit 1\n  fi\n  local MONTHS=`echo $1 | awk -F- '{print $3}'`\n\
    \  local DAYS=`echo $1 | awk -F- '{print $2}'`\n  local VALID_MONTH=`echo $VALID_MONTHS\
    \ | awk -F- '{$1=$1-1; print $1}'`\n  local VALID_DAY=`echo $VALID_DAYS | awk\
    \ -F- '{$1=$1-1; print $1}'`\n  local YEAR=`echo $1 | awk -F- '{print $4}'`\n\
    \  # Check if the string is empty or null\n  if [[ -z \"$1\" ]]\n  then\n    echo\
    \ \"Date is empty.\"\n    return 1\n  fi\n  # Check whether the given date string\
    \ is in the correct format.\n  if [[ \"$1\" != \"${MONTHS}-${DAYS}-${YEAR}\" ]]\n\
    \  then\n    echo \"The date must be in the format: mm-dd-yyyy\"\n    return 1\n\
    \  fi\n  # Validate day\n  if [[ \"$DAYS\" -lt 1 || \"$DAYS\" -gt \"${VALID_DAY}\"\
    \ ]]\n  then\n    echo \"Invalid number of days given.\"\n    return 1\n  fi\n\
    \  # Validate month\n  if [[ \"$MONTHS\" -lt 1 || \"$MONTHS\" -gt \"${VALID_MONTH}\"\
    \ ]]\n  then\n    echo \"Invalid number of months given.\"\n    return 1\n  fi\n\
    \  # Validate year\n  if [[ \"$YEAR\" -lt 1970 || \"$YEAR\" -gt \"9999\" ]]\n\
    \  then\n    echo \"Invalid year given.\"\n    return 1\n  fi\n  return 0", "\t\
    local date_string=$1\n\n\t# Trim whitespace from start/end for validation\n\t\
    date_string=${date_string}\n\tdate_string=${date_string#*( }\n\tdate_string=${date_string%*\
    \ }\n\n\t# Check for empty string\n\tif [ -z \"$date_string\" ]; then\n\t\treturn\
    \ 0\n\tfi\n\n\t# Check if there are less than 2 numbers\n\tif ! [ -z \"${date_string#*\
    \ }\" ]; then\n\t\treturn 0\n\tfi\n\n\t# Check if there are more than 2 numbers\n\
    \tif ! [ -z \"${date_string## }\" ]; then\n\t\treturn 0\n\tfi\n\n\t# Split the\
    \ string into components\n\tdate_components=${date_string//-/}\n\n\t# Validate\
    \ Month\n\tmonth=${date_components[0]}\n\tif ! [ -z \"$month\" ] && [ \"$month\"\
    \ -gt \"01\" ] && [ \"$month\" -lt \"12\" ]; then\n\t\treturn 0\n\tfi\n\n\t# Validate\
    \ Day\n\tday=${date_components[1]}\n\tif ! [ -z \"$day\" ] && [ \"$day\" -lt \"\
    01\" ] && [ \"$day\" -gt \"31\" ] && [ \"$day\" -lt \"30\" ] && [ \"$day\" -lt\
    \ \"29\" ]; then\n\t\treturn 0\n\tfi\n\n\t# Validate Year\n\tyear=${date_components[2]}\n\
    \tif ! [ -z \"$year\" ] && [ \"$year\" -lt \"1000\" ] && [ \"$year\" -gt \"2000\"\
    \ ]; then\n\t\treturn 0\n\tfi\n\n\treturn 1", "        test -n \"$1\" || return\
    \ 1;\n        date -d \"$1\" | grep -q '^Invalid Date' || return 1;\n        date\
    \ -d \"$1\" | grep -q '^Invalid input' || return 1;\n        date -d \"$1\" |\
    \ grep -q '^date: invalid date format' || return 1;\n        date -d \"$1\" |\
    \ grep -q '^date: invalid date format' || ( date -d \"$1\" | grep -q '^Invalid\
    \ input' && return 1 ) || return 1;\n\n        date_part=$(date -d \"$1\" +%m-%d-%Y)\n\
    \        month_part=$(date -d \"$1\" +%m)\n        day_part=$(date -d \"$1\" +%d)\n\
    \n        if [[ $date_part == *\"$month_part-$day_part\"* ]]; then\n         \
    \       return 0\n        else\n                return 1\n        fi", "  IFS='-'\n\
    \  echo \"$1\" | grep -q -E \"^[[:digit:]]{1,2}-[[:digit:]]{1,2}-[[:digit:]]{4}$\"",
  "  if [[ -z \"$1\" ]]; then\n    echo \"Date string empty.\";\n    return 1\n  fi\n\
    \n  local year=\"$1\"\n  [[ \"$year\" =~ ^[0-9]{4}$ ]] || return 1\n  [[ \"$year\"\
    \ =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]] || return 1\n\n  local month1=\"$(echo \"\
    $year\" | sed -E 's/^([0-9]{2})-(0|1|3|5|7|8|10|12)-([0-9]{2})$/\\2/')\"\n  [[\
    \ -z \"$month1\" ]] || return 1\n  [[ -z \"$2\" ]] || return 1\n  [[ \"$month1\"\
    \ =~ ^[0-9]{1,2}$ ]] || return 1\n  [[ \"$2\" =~ ^[0-9]{1,2}$ ]] || return 1\n\
    \  [[ \"$month1\" -lt 1 ]] || return 1\n  [[ \"$month1\" -lt 4 ]] || return 1\n\
    \  [[ \"$2\" -lt 1 ]] || return 1\n  [[ \"$2\" -lt 30 ]] || return 1\n  [[ \"\
    $month1\" -lt 12 ]] || return 1\n  [[ \"$month1\" -lt 12 ]] || return 1\n\n  local\
    \ month2=\"$(echo \"$year\" | sed -E 's/^([0-9]{2})-(0|1|4|6|9|11)-([0-9]{2})$/\\\
    2/')\"\n  [[ -z \"$month2\" ]] || return 1\n  [[ -z \"$3\" ]] || return 1\n  [[\
    \ \"$month2\" =~ ^[0-9]{1,2}$ ]] || return 1\n  [[ \"$3\" =~ ^[0-9]{1,2}$ ]] ||\
    \ return 1\n  [[ \"$month2\" -lt 1 ]] || return 1\n  [[ \"$month2\" -lt 4 ]] ||\
    \ return 1\n  [[ \"$3\" -lt 1 ]] || return 1\n  [[ \"$3\" -lt 30 ]] || return\
    \ 1\n  [[ \"$month2\" -lt 12 ]] || return 1\n  [[ \"$month2\" -lt 12 ]] || return\
    \ 1\n\n  local day1=\"$(echo \"$year\" | sed -E 's/^([0-9]{4})-(0|1|3|5|7|8|10|12)(\\\
    /[0-9]{2})?$/\\2/')\"\n  [[ -z \"$day1\" ]] || return 1\n  [[ -z \"$2\" ]] ||\
    \ return 1\n  [[ \"$day1\" =~ ^[0-9]{1,2}$ ]] || return 1\n  [[ \"$2\" =~ ^",
  "  if [[ ! -z \"$1\" ]]; then\n    date --date=\"$1\" --utc --quiet\n    if [ \"\
    $?\" -ne 0 ]; then\n      return 1\n    fi\n  else\n    return 0\n  fi", "   \
    \ local DATE=\"$1\"\n    [[ -n \"${DATE}\" ]] || return 1\n    local MONTHS=(\
    \ $(date +%m-%d-%y -d \"${DATE}\") )\n    if [[ \"${MONTHS[0]}\" -lt 1 ]]; then\n\
    \        return 0\n    fi\n    if [[ \"${MONTHS[1]}\" -lt 1 ]]; then\n       \
    \ return 0\n    fi\n    if [[ \"${MONTHS[2]}\" -lt 1 ]]; then\n        return\
    \ 0\n    fi\n    if [[ \"${MONTHS[3]}\" -lt 1 ]]; then\n        return 0\n   \
    \ fi\n    if [[ \"${MONTHS[4]}\" -lt 1 ]]; then\n        return 0\n    fi\n  \
    \  if [[ \"${MONTHS[5]}\" -lt 1 ]]; then\n        return 0\n    fi\n    if [[\
    \ \"${MONTHS[6]}\" -lt 1 ]]; then\n        return 0\n    fi\n    if [[ \"${MONTHS[7]}\"\
    \ -lt 1 ]]; then\n        return 0\n    fi\n    if [[ \"${MONTHS[8]}\" -lt 1 ]];\
    \ then\n        return 0\n    fi\n    if [[ \"${MONTHS[9]}\" -lt 1 ]]; then\n\
    \        return 0\n    fi\n    if [[ \"${MONTHS[10]}\" -lt 1 ]]; then\n      \
    \  return 0\n    fi\n    if [[ \"${MONTHS[11]}\" -lt 1 ]]; then\n        return\
    \ 0\n    fi\n    if [[ \"${MONTHS[12]}\" -lt 1 ]]; then\n        return 0\n  \
    \  fi\n    return 1", "  local date=\"$1\"\n  if [[ ! -z \"$date\" ]]; then\n\
    \    echo \"$date\" | grep -q '^[0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9]$'\n\
    \    if [ $? = 0 ]; then\n      local days=$(date -d \"$date\" +%s)\n      ((\
    \ days >= 1 )) && \\\n      (( days <= 31 )) && \\\n      (( days < 29 )) && \\\
    \n      (( days < 31 )) && \\\n      (( days < 30 )) && \\\n      (( days < 31\
    \ ))\n      local months=$(date -d \"$date\" +%m)\n      (( months >= 1 )) &&\
    \ \\\n      (( months <= 12 ))\n      echo \"$days && $months\"\n    fi\n  fi",
  "  local DATE=$1\n  if [[ -z \"$DATE\" ]]; then\n    echo \"No input provided!\"\
    \n    return 1\n  fi\n\n  local year=${DATE:0:4}\n  local month=${DATE:4:2}\n\
    \  local day=${DATE:6:2}\n  local datestr=${year}${month}${day}\n\n  if [[ \"\
    $month\" -lt 1 || \"$month\" -gt 12 ]]; then\n    echo \"Invalid month provided!\"\
    \n    return 1\n  fi\n\n  if [[ \"$day\" -lt 1 || \"$day\" -gt 31 ]]; then\n \
    \   echo \"Invalid day provided!\"\n    return 1\n  fi\n\n  if [[ \"$year\" -lt\
    \ 1 || \"$year\" -gt 99 ]]; then\n    echo \"Invalid year provided!\"\n    return\
    \ 1\n  fi\n\n  if [[ \"$month\" -lt 1 || \"$month\" -gt 12 ]]; then\n    echo\
    \ \"Invalid month provided!\"\n    return 1\n  fi\n\n  if [[ \"$day\" -lt 1 ||\
    \ \"$day\" -gt 31 ]]; then\n    echo \"Invalid day provided!\"\n    return 1\n\
    \  fi\n\n  if [[ \"$year\" -lt 1 || \"$year\" -gt 99 ]]; then\n    echo \"Invalid\
    \ year provided!\"\n    return 1\n  fi\n\n  if [[ \"$month\" -lt 1 || \"$month\"\
    \ -gt 12 ]]; then\n    echo \"Invalid month provided!\"\n    return 1\n  fi\n\n\
    \  if [[ \"$day\" -lt 1 || \"$day\" -gt 30 ]]; then\n    echo \"Invalid day provided!\"\
    \n    return 1\n  fi\n\n  echo \"$datestr\" > dates\n  echo \"$datestr\" > dates2\n\
    \  echo \"$datestr\" > dates3\n\n  while read -r line\n  do\n    local datestr=$(echo\
    \ $line | cut -d '-' -f 1)\n    local month=$(echo $line | cut -d '-' -f 2)\n\
    \    local day=$(echo $line | cut -d '-' -f 3)\n    local year=$(echo $line |\
    \ cut -d '-' -f 4)\n    local result=$(date -d \"$datestr\" '+%m%d%Y')\n    local\
    \ result2=$(date -d \"$datestr\" '+%m%d')\n    local result3=$(date -d \"$datestr\"\
    \ '+%m%d')\n    local result4=$(date -d \"$datestr\" '+%m%d')\n    local result5=$(date\
    \ -d \"$datestr\" '+%m%d')\n    local result6=$(date -d \"$datestr\" '+%m%d')\n\
    \    local result7=$(date -d \"$datestr\" '+%m%d')\n    local result8=$(date ",
  "  local date=\"$1\"\n  if [ -z \"$date\" ] ; then\n    return 1\n  fi\n  date \"\
    +%Y-%m-%d\" -d \"$date\" || return 1\n  if [ \"$(date \"+%m\")\" -le \"2\" ] ||\
    \ [ \"$(date \"+%m\")\" -gt \"12\" ] || [ \"$(date \"+%d\")\" -le 1 ] || [ \"\
    $(date \"+%d\")\" -gt 29 ] || [ \"$(date \"+%m\")\" -le 1 ] || [ \"$(date \"+%m\"\
    )\" -gt 12 ] ; then\n    return 0\n  else\n    return 1\n  fi", '    date -d "$1"
    > /dev/null', "    local DATE=\"$1\"\n    local MONTHS=(\"01\" \"03\" \"05\" \"\
    07\" \"08\" \"10\" \"12\")\n    local DAYS=(\"01\" \"03\" \"05\" \"07\" \"08\"\
    \ \"10\" \"12\" \"01\" \"03\" \"05\" \"07\" \"08\" \"10\" \"12\" \"01\" \"03\"\
    \ \"05\" \"07\" \"08\" \"10\" \"12\" \"01\" \"03\" \"05\" \"07\" \"08\" \"10\"\
    \ \"12\" \"01\" \"03\" \"05\" \"07\" \"08\" \"10\" \"12\" \"01\" \"03\" \"05\"\
    \ \"07\" \"08\" \"10\" \"12\" \"01\" \"03\" \"05\" \"07\" \"08\" \"10\" \"12\"\
    \ \"01\" \"03\" \"05\" \"07\" \"08\" \"10\" \"12\" \"01\" \"03\" \"05\" \"07\"\
    \ \"08\" \"10\" \"12\" \"01\" \"03\" \"05\" \"07\" \"08\" \"10\" \"12\" \"01\"\
    \ \"03\" \"05\" \"07\" \"08\" \"10\" \"12\" \"01\" \"03\" \"05\" \"07\" \"08\"\
    \ \"10\" \"12\" \"01\" \"03\" \"05\" \"07\" \"08\" \"10\" \"12\" \"01\" \"03\"\
    \ \"05\" \"07\" \"08\" \"10\" \"12\" \"01\" \"03\" \"05\" \"07\" \"08\" \"10\"\
    \ \"12\" \"01\" \"03\" \"05\" \"07\" \"08\" \"10\" \"12\" \"01\" \"03\" \"05\"\
    \ \"07\" \"08\" \"10\" \"12\" \"01\" \"03\" \"05\" \"07\" \"08\" \"10\" \"12\"\
    \ \"01\" \"03\" \"05\" \"07\" \"08\" \"10\" \"12\" \"01\" \"03\" \"05\" \"07\"\
    \ \"08\" \"10\" \"12\" \"01\" \"03\" \"05\" \"07\" \"08\" \"10\" \"12\" \"01\"\
    \ \"03\" \"05\" \"07\" \"08\" \"10\" \"12\" \"01\" \"03\" \"05\" \"07\" \"08\"\
    \ \"10\" \"12\" \"01\" \"03\" \"05\" \"07\" \"08\" \"10\" \"12\" \"01\" \"03\"\
    \ \"05\" \"07\" \"08\" \"10\" \"12\" \"01\" \"03\" \"05\" \"07\" \"08\" \"10\"\
    \ \"12\" \"01\" \"03\" \"05\" \"07\" \"08\" \"10\" \"12\" \"01\" \"03\" \"05\"\
    \ \"07\" \"08\" \"10\" \"12\" \"01\" \"03\" \"05\" \"07\" \"08\" \"10\" \"12\"\
    \ \"01\" \"03\" \"05\" \"07\" \"08\" \"10\" \"12\" \"01\" \"03\" \"05\" \"07\"\
    \ \"08\" \"10\" \"12\" \"01\" \"03\" \"05\" \"07\" \"08\" \"10\" \"12\" \"01\"\
    \ \"03\" \"05\" \"07\" \"08\" \"10\" \"12\" \"01\" \"03\" \"05\" \"07\" \"08\"\
    \ \"10\" \"12\" \"01\" \"03", "  echo \"$1\" | grep -v -e '^$' -e '^$' -e '^$'\n\
    \  local DATE=\"$1\"\n  local DAYS_IN_YEAR=$(( ( ${#DATE}+900000 ) % 365 ))\n\
    \  local MONTHS=(\"01\" \"03\" \"05\" \"07\" \"08\" \"10\" \"12\" \"04\" \"06\"\
    \ \"09\" \"11\" \"02\")\n  local MONTHS_IN_YEAR=$(( ${#MONTHS[@]} ))\n  local\
    \ YEARS=(\"0000\" \"0100\" \"0200\" \"0300\" \"0400\" \"0500\" \"0600\" \"0700\"\
    \ \"0800\" \"0900\" \"1000\" \"1100\" \"1200\" \"1300\" \"1400\" \"1500\" \"1600\"\
    \ \"1700\" \"1800\" \"1900\" \"2000\" \"2100\" \"2200\" \"2300\" \"2400\" \"2500\"\
    \ \"2600\" \"2700\" \"2800\" \"2900\" \"3000\" \"3100\" \"3200\" \"3300\" \"3400\"\
    \ \"3500\" \"3600\" \"3700\" \"3800\" \"3900\" \"4000\" \"4100\" \"4200\" \"4300\"\
    \ \"4400\" \"4500\" \"4600\" \"4700\" \"4800\" \"4900\" \"5000\" \"5100\" \"5200\"\
    \ \"5300\" \"5400\" \"5500\" \"5600\" \"5700\" \"5800\" \"5900\" \"6000\" \"6100\"\
    \ \"6200\" \"6300\" \"6400\" \"6500\" \"6600\" \"6700\" \"6800\" \"6900\" \"7000\"\
    \ \"7100\" \"7200\" \"7300\" \"7400\" \"7500\" \"7600\" \"7700\" \"7800\" \"7900\"\
    \ \"8000\" \"8100\" \"8200\" \"8300\" \"8400\" \"8500\" \"8600\" \"8700\" \"8800\"\
    \ \"8900\" \"9000\" \"9100\" \"9200\" \"9300\" \"9400\" \"9500\" \"9600\" \"9700\"\
    \ \"9800\" \"9900\" \"10000\" \"10100\" \"10200\" \"10300\" \"10400\" \"10500\"\
    \ \"10600\" \"10700\" \"10800\" \"10900\" \"11000\" \"11100\" \"11200\" \"11300\"\
    \ \"11400\" \"11500\" \"11600\" \"11700\" \"11800\" \"11900\" \"12000\" \"12100\"\
    \ \"12200\" \"12300\" \"12400\" \"12500\" \"12600\" \"12700\" \"12800\" \"12900\"\
    \ \"13000\" \"13100\" \"13200\" \"13300\" \"13400\" \"13500\" \"13600\" \"13700\"\
    \ \"13800\" \"13900\" \"14000\" \"14100\" \"14200\" \"14", "  [[ -z $1 ]] && return\
    \ 1\n  local months=\"01 03 05 07 08 10 12\"\n  local days month\n  local year\n\
    \n  # Split the date string into year and month.\n  read -r year month <<< \"\
    $1\"\n\n  # Test whether the date is valid or not.\n  read -r days <<< $(date\
    \ -d \"$1\" +%d)\n  [[ -z $days ]] && return 1\n  [[ $days < 1 ]] && return 1\n\
    \  [[ -z $months ]] && return 1\n  [[ -z $year ]] && return 1\n  [[ $month -le\
    \ 12 ]] && return 1\n  [[ $month -gt 12 ]] && return 1\n  [[ $days > $months ||\
    \ $days -le $months && $month -le $((12 - $month)) ]] && return 1\n  [[ $year\
    \ > 9999 ]] && return 1\n  [[ $year < 1900 ]] && return 1\n  [[ $days -ge 29 ||\
    \ $days -le 29 ]] && return 1\n  return 0", "  if [[ -z \"$1\" ]]; then\n    return\
    \ 0\n  fi\n  IFS=\"-/.\" read -a month <<< \"$1\"\n  [[ \"${month[0]}\" -le 12\
    \ ]] || return 0\n  [[ \"${month[1]}\" -le 31 ]] || return 0\n  [[ \"${month[2]}\"\
    \ -le 29 ]] || return 0\n  [[ \"${month[3]}\" -le 12 ]] || return 0\n  [[ \"$2\"\
    \ =~ ^[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]$ ]] || return 0\n  return 1",
  "    local DATE=$1\n    local DAYS=0\n    local MONTHS=0\n    local YEARS=0\n  \
    \  local day=0\n    local month=0\n    local year=0\n    local years=0\n    local\
    \ months=0\n    local days=0\n    local months_array=(1 3 5 7 8 10 12)\n    local\
    \ days_array=(1 30 29 29 29 29 29 29 29)\n    local month_array=(0 1 2 3 4 5 6\
    \ 7 8 9 10 11 12)\n    local year_array=(0 0 1 1 1 1 1 2 3 4 5 6 7 8)\n\n    if\
    \ [[ -z \"$DATE\" ]]\n    then\n        echo \"Date string not provided\"\n  \
    \  else\n        # Split the date into day, month, and year\n        DATE=($DATE)\n\
    \        DAYS=${DATE[1]}\n        MONTHS=${DATE[2]}\n        YEARS=${DATE[3]}\n\
    \n        day=${DATE[4]}\n        month=${DATE[5]}\n        year=${DATE[6]}\n\n\
    \        days=${#DATE[@]}\n        months=${#MONTHS_ARRAY[@]}\n        years=${#YEARS_ARRAY[@]}\n\
    \n        if [ $YEARS -lt 1 ] || [ $YEARS -gt 8 ] || [ $MONTHS -lt 1 ] || [ $MONTHS\
    \ -gt 12 ] || [ $days -lt 1 ] || [ $days -gt 31 ] || [ $days -lt 30 ] || [ $MONTHS\
    \ -lt 1 ] || [ $MONTHS -gt 12 ] || [ $days -lt 1 ] || [ $days -gt 29 ]\n     \
    \   then\n            echo \"Invalid date\"\n        fi\n    fi", "    if [ -z\
    \ \"$1\" ] ; then\n        echo \"invalid date format\"\n        exit 1\n    fi\n\
    \    month=$( date -d \"$1\" -I+%d )\n    if [ \"$month\" -lt 1 ] || [ \"$month\"\
    \ -gt 12 ]; then\n        echo \"invalid date format\"\n        exit 1\n    fi\n\
    \    day=$( date -d \"$1\" -I+%b )\n    if [ \"$day\" -lt 1 ] || [ \"$day\" -gt\
    \ 31 ] || [ \"$day\" -lt \"01-$month\" ] || [ \"$day\" -gt \"01-$month\" ] ||\
    \ [ \"$day\" -lt \"01-01\" ] || [ \"$day\" -lt \"01-01\" ] || [ \"$day\" -gt \"\
    01-01\" ]; then\n        echo \"invalid date format\"\n        exit 1\n    fi\n\
    \    year=$( date -d \"$1\" -I+%Y )\n    if [ \"$year\" -lt 1000 ] || [ \"$year\"\
    \ -gt 2100 ]; then\n        echo \"invalid date format\"\n        exit 1\n   \
    \ fi\n    return 0", "  local month=\"${1}\"\n  local date=\"${2}\"\n  local year=\"\
    ${3}\"\n  [[ -z \"$month\" ]] && return 1\n  [[ -z \"$date\" ]] && return 1\n\
    \  [[ -z \"$year\" ]] && return 1\n  [[ \"$month\" -lt 1 ]] && return 1\n  [[\
    \ \"$month\" -gt 12 ]] && return 1\n  [[ \"$date\" -lt 1 ]] && return 1\n  [[\
    \ \"$date\" -gt 31 ]] && return 1\n  [[ \"$month\" -lt 1 ]] && return 1\n  [[\
    \ \"$month\" -gt 12 ]] && return 1\n  [[ \"$year\" -lt 1 ]] && return 1\n  [[\
    \ \"$year\" -gt 30 ]] && return 1\n  [[ \"$month\" -lt 1 ]] && return 1\n  [[\
    \ \"$month\" -gt 12 ]] && return 1\n  [[ \"$year\" -lt 1 ]] && return 1\n  [[\
    \ \"$year\" -gt 29 ]] && return 1\n  [[ \"$month\" -lt 1 ]] && return 1\n  [[\
    \ \"$month\" -gt 12 ]] && return 1\n  return 0", "  local date=$1\n  date -d \"\
    $date\" > /dev/null 2>&1", "\tdate=$1\n\t[[ $date != \"\" ]] && [[ $date != +([[:digit:]])*\
    \ ]] && [[ $date != -([[:digit:]])* ]] && [[ $date != -* ]] && [[ $date != +*\
    \ ]] && [[ $date != -* ]] && [[ $date != +([[:digit:]])* ]] && [[ $date != -([[:digit:]])*\
    \ ]] && [[ $date != -* ]] && [[ $date != +* ]] && [[ $date != -* ]] && [[ $date\
    \ != +([[:digit:]])* ]] && [[ $date != -([[:digit:]])* ]] && [[ $date != -* ]]\
    \ && [[ $date != +([[:digit:]])* ]] && [[ $date != -([[:digit:]])* ]] && [[ $date\
    \ != -* ]] && [[ $date != +([[:digit:]])* ]] && [[ $date != -([[:digit:]])* ]]\
    \ && [[ $date != -* ]] && [[ $date != +([[:digit:]])* ]] && [[ $date != -([[:digit:]])*\
    \ ]] && [[ $date != -* ]] && [[ $date != +([[:digit:]])* ]] && [[ $date != -([[:digit:]])*\
    \ ]] && [[ $date != -* ]] && [[ $date != +([[:digit:]])* ]] && [[ $date != -([[:digit:]])*\
    \ ]] && [[ $date != -* ]]", "    if [ -z $1 ]\n    then\n        echo \"Invalid\
    \ date provided\"\n        return\n    fi\n\n    IFS='-' read -r m1 d1 y1 <<<\
    \ \"$1\"\n\n    if ! [[ \"$m1\" -ge 1 ]]\n    then\n        echo \"Invalid month\"\
    \n        return\n    fi\n\n    if ! [[ \"$d1\" -ge 1 ]]\n    then\n        echo\
    \ \"Invalid day\"\n        return\n    fi\n\n    if ! [[ \"$y1\" -ge 1900 ]]\n\
    \    then\n        echo \"Invalid year\"\n        return\n    fi\n\n    if ! [[\
    \ \"$m1\" -le 12 ]]\n    then\n        echo \"Invalid month\"\n        return\n\
    \    fi\n\n    if ! [[ \"$d1\" -le 31 ]]\n    then\n        echo \"Invalid day\"\
    \n        return\n    fi\n\n    if ! [[ \"$y1\" -lt 5000 ]]\n    then\n      \
    \  echo \"Invalid year\"\n        return\n    fi\n\n    if ! [[ \"$d1\" -lt 31\
    \ ]]\n    then\n        echo \"Invalid day\"\n        return\n    fi\n\n    if\
    \ ! [[ \"$d1\" -le 30 ]]\n    then\n        echo \"Invalid day\"\n        return\n\
    \    fi\n\n    if ! [[ \"$m1\" -le 12 ]]\n    then\n        echo \"Invalid month\"\
    \n        return\n    fi\n\n    if [[ \"$m1\" -eq 1 ]]\n    then\n        if [[\
    \ ${d1} -eq 1 ]]\n        then\n            echo \"Invalid day\"\n           \
    \ return\n        else\n            return true\n        fi\n    fi\n\n    if\
    \ [[ \"$m1\" -eq 3 ]]\n    then\n        if [[ ${d1} -eq 3 ]]\n        then\n\
    \            echo \"Invalid day\"\n            return\n        else\n        \
    \    return true\n        fi\n    fi\n\n    if [[ \"$m1\" -eq 5 ]]\n    then\n\
    \        if [[ ${d1} -eq 5 ]]\n        then\n            echo \"Invalid day\"\n\
    \            return\n        else\n            return true\n        fi\n    fi\n\
    \n    if [[ \"$m1\" -eq 7 ]]\n    then\n        if [[ ${d1} -eq 7 ]]\n       \
    \ then\n            echo \"Invalid day\"\n            return\n        else\n \
    \           return true\n        fi\n    fi\n\n    if [[ \"$m1\" -eq 8 ]]\n  \
    \  then\n        if [[ ${d1} -eq 8 ]]\n        then\n            echo \"Invalid\
    \ day\"\n            return\n        else\n            return true\n        fi\n\
    \    fi\n\n    if [[ \"$m1\" -eq 10 ]]\n    then\n        if [[ ${", "    echo\
    \ $1 | grep -E \"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" || return 1\n    local month=1\n\
    \    local day=1\n    local year=1\n    if echo $1 | grep -E \"^[0-9]{2}-[0-9]{2}$\"\
    ; then\n        local month=${1#*}-\n        local year=${1%-*}\n    else\n  \
    \      local month=${1#*}\n    fi\n    if echo $month | grep -E \"^1[0-2]$\" ||\
    \ echo $month | grep -E \"^0?[12][0-9]$\"; then\n        if echo $month | grep\
    \ -E \"^3[01]$\" || echo $month | grep -E \"^30$\"; then\n            month=2\n\
    \            if echo $month | grep -E \"^3[01]$\" || echo $month | grep -E \"\
    ^30$\"; then\n                month=3\n                if echo $month | grep -E\
    \ \"^3[01]$\" || echo $month | grep -E \"^30$\"; then\n                    month=4\n\
    \                    if echo $month | grep -E \"^3[01]$\" || echo $month | grep\
    \ -E \"^30$\"; then\n                        month=5\n                       \
    \ if echo $month | grep -E \"^3[01]$\" || echo $month | grep -E \"^30$\"; then\n\
    \                            month=6\n                            if echo $month\
    \ | grep -E \"^3[01]$\" || echo $month | grep -E \"^30$\"; then\n            \
    \                    month=7\n                                if echo $month |\
    \ grep -E \"^3[01]$\" || echo $month | grep -E \"^30$\"; then\n              \
    \                      month=8\n                                    if echo $month\
    \ | grep -E \"^3[01]$\" || echo $month | grep -E \"^30$\"; then\n            \
    \                            month=9\n                                       \
    \ if echo $month | grep -E \"^3[01]$\" || echo $month | grep -E \"^30$\"; then\n\
    \                                            month=10\n                      \
    \                      if echo $month | grep -E \"^3[01]$\" || echo $month | grep\
    \ -E \"^30$\"; then\n                                                month=11\n\
    \                                                if echo $month | grep -E \"^3[01]$\"\
    \ || echo $month | grep -E \"^30$\"; then\n                                  \
    \                  month=12\n                                                \
    \    if echo $month | grep -E \"^3[01]$\" || echo $month | grep -E \"^30$\"; then\n\
    \                                                        month=01\n          \
    \                                              if echo $month | grep -E \"^3[01]$\"\
    \ || echo $month | grep -E \"^30$\"; then\n                                  \
    \                          month=02\n                                        \
    \                    if echo $month | grep -E \"^3[01]$\" || echo $month | grep\
    \ -E \"^30$\"; then\n                                                        \
    \        month=03\n", "    local date=\"$1\"\n    if [ -z \"$date\" ]\n    then\n\
    \        echo \"$date: date is empty or invalid date format\"\n        exit 1\n\
    \    fi\n    if [ $(date -d \"$date\" \"+%s\") -gt $(date -d \"$(date -d \"$date\"\
    \ \"+%Y-01-01\" +%s)\" \"+%s\") ]\n    then\n        echo \"$date: date exceeds\
    \ the date range allowed for month and day\"\n        exit 1\n    fi\n    if [\
    \ $(date -d \"$date\" \"+%m\") -lt 1 -o $(date -d \"$date\" \"+%m\") -gt 12 ]\n\
    \    then\n        echo \"$date: Months should be from 1 to 12\"\n        exit\
    \ 1\n    fi\n    if [ $(date -d \"$date\" \"+%d\") -lt 1 -o $(date -d \"$date\"\
    \ \"+%d\") -gt 31 ]\n    then\n        echo \"$date: Days should be from 1 to\
    \ 31\"\n        exit 1\n    fi\n    if [ $(date -d \"$date\" \"+%Y\") -lt 2010\
    \ ]\n    then\n        echo \"$date: Years should be from 2010 to 2099\"\n   \
    \     exit 1\n    fi\n    echo $?", "  [[ -z \"$1\" ]] && return 1\n  local date=\"\
    $1\"\n  local months=( {1..12} 0 4 6 9 11 )\n  local years=( {0..99} 200 201 202\
    \ 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221\
    \ 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240\
    \ 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 )\n  local check_date_array=(\
    \ {1..31} {0..30} {1..12} )\n  local check_months_array=( {1..12} {0..12} )\n\
    \  local check_years_array=( {0..99} )\n  for month in \"${check_months_array[@]}\"\
    \n  do\n    [[ ${month} -ge 1 ]] && months_check_flag=1\n    [[ ${month} -le 12\
    \ ]] && months_check_flag=0\n  done\n  for year in \"${check_years_array[@]}\"\
    \n  do\n    [[ ${year} -ge 0 ]] && years_check_flag=1\n    [[ ${year} -le 99 ]]\
    \ && years_check_flag=0\n  done\n  for month in \"${check_date_array[@]}\"\n \
    \ do\n    [[ ${months_check_flag} -eq 1 ]] && \\\n    [[ ${months_check_flag}\
    \ -eq ${check_months_array[0]} ]] && \\\n    [[ ${months_check_flag} -eq ${check_date_array[0]}\
    \ ]] && \\\n    [[ ${month} -eq ${check_date_array[1]} ]] && \\\n    [[ ${month}\
    \ -le ${check_months_array[1]} ]] && \\\n    [[ ${month} -le ${check_date_array[2]}\
    \ ]] && \\\n    [[ ${month} -le ${check_months_array[2]} ]] && \\\n    [[ ${years_check_flag}\
    \ -eq 1 ]] && \\\n    [[ ${years_check_flag} -eq ${check_years_array[0]} ]] &&\
    \ \\\n    [[ ${year} -eq ${check_years_array[1]} ]] && \\\n    [", "    local\
    \ valid=true\n    local day=$1\n    local month=$2\n    local year=$3\n    local\
    \ months=$((12+month/2))\n    local days=$((31-months))\n    local days_month=$((day+months))\n\
    \    local days_year=$((31+days))\n\n    if [[ \"$day\" =~ ^[0-9]+$ ]] ; then\n\
    \        if [[ -z \"$days\" ]] || [[ \"$days\" -lt 1 ]] || [[ \"$days\" -gt 31\
    \ ]] ; then\n            valid=false\n        else\n            ((days_month ==\
    \ days_year)) && days_month=1 || days_month=31\n        fi\n    fi\n\n    if [[\
    \ \"$month\" =~ ^[0-9]+$ ]] ; then\n        if [[ -z \"$months\" ]] || [[ \"$months\"\
    \ -lt 1 ]] || [[ \"$months\" -gt 12 ]] ; then\n            valid=false\n     \
    \   else\n            ((months == days_month)) && months=1 || months=12\n    \
    \    fi\n    fi\n\n    ((month == 2 && days_month == 28)) && months=3 || months=4\n\
    \    ((month == 2 && days_month == 29)) && months=5 || months=6\n\n    ((month\
    \ == 1 && (((days_year > 31) || (days_year < 1)) || ((days_year == 31) && ((days_month\
    \ > 1) || (days_month < 1))))) && months=7 || months=8\n    ((month == 1 && (((days_year\
    \ > 30) || (days_year < 1)) || ((days_year == 30) && ((days_month > 1) || (days_month\
    \ < 1))))) && months=9 || months=10\n    ((month == 1 && (((days_year > 29) ||\
    \ (days_year < 1)) || ((days_year == 29) && ((days_month > 1) || (days_month <\
    \ 1))))) && months=11\n\n    ((month == 3 && days_month == 1) && months=4 || months=5\n\
    \    ((month == 3 && days_month == 2) && months=6 || months=7\n    ((month ==\
    \ 3 && days_month == 3) && months=8 || months=9\n    ((month == 3 && days_month\
    \ == 4) && months=10 || months=11\n    ((month == 3 && days_month == 5) && months=12\
    \ || months=12\n\n    ((month == 5 && days_month == 1) && months=6 || months=7\n\
    \    ((month == 5 && days_month == 2) && months=8 || months=9\n    ((month", "\t\
    [ -n \"$1\" ] || return 1\n\t(( $1 =~ ^([0-9][0-9]?)?([0-9][0-9])-([0-9][0-9])-([0-9][0-9][0-9][0-9])$\
    \ )) || return 1\n\t(( $2 <= 12 )) || return 1\n\t(( $2 != 2 )) || return 1\n\t\
    (( $3 <= 31 )) || return 1\n\t(( $3 != 3 )) || return 1\n\t(( $4 <= 29 )) || return\
    \ 1\n\t(( $4 != 4 )) || return 1", "    local DATE=$1\n    local DAYS\n    local\
    \ MONTHS\n    local YEARS\n    local MONTH\n    local DATESTRING\n    local DATEVAL\n\
    \    local VAL\n\n    YEARS=${DATE:0:4}\n    MONTHS=${DATE:4:2}\n    DAYS=${DATE:6:2}\n\
    \    MONTH=${DATE:8:2}\n    DATESTRING=${DATE:10:2}\n\n    VAL=false\n    if [\
    \ -z \"$DATE\" ]; then\n        VAL=true\n    fi\n    if [ \"$DATE\" != \"\" ]\
    \ && [ \"$DAYS\" -ge 1 ] && [ \"$MONTHS\" -ge 1 ] && [ \"$MONTHS\" -le 12 ] &&\
    \ [ \"$DAYS\" -le 31 ] && [ \"$YEARS\" -ge 1000 ] && [ \"$YEARS\" -le 2020 ];\
    \ then\n        VAL=true\n    fi\n    if [ \"$DATE\" != \"\" ] && [ \"$DAYS\"\
    \ -ge 1 ] && [ \"$MONTHS\" -ge 1 ] && [ \"$MONTHS\" -le 12 ] && [ \"$DAYS\" -le\
    \ 30 ] && [ \"$YEARS\" -ge 1000 ] && [ \"$YEARS\" -le 2020 ]; then\n        VAL=true\n\
    \    fi\n    if [ \"$DATE\" != \"\" ] && [ \"$DAYS\" -ge 1 ] && [ \"$MONTHS\"\
    \ -ge 1 ] && [ \"$MONTHS\" -le 12 ] && [ \"$DAYS\" -le 29 ] && [ \"$MONTH\" -ge\
    \ 0 ] && [ \"$MONTH\" -le 11 ]; then\n        VAL=true\n    fi\n    if [ \"$DATE\"\
    \ != \"\" ] && [ \"$DAYS\" -ge 1 ] && [ \"$MONTHS\" -ge 1 ] && [ \"$MONTHS\" -le\
    \ 12 ] && [ \"$DAYS\" -le 30 ] && [ \"$MONTH\" -ge 1 ] && [ \"$MONTH\" -le 12\
    \ ]; then\n        VAL=true\n    fi\n    if [ \"$DATE\" != \"\" ] && [ \"$DAYS\"\
    \ -ge 1 ] && [ \"$MONTHS\" -ge 1 ] && [ \"$MONTHS\" -le 12 ] && [ \"$DAYS\" -le\
    \ 31 ] && [ \"$MONTH\" -ge 2 ] && [ \"$MONTH\" -le 12 ]; then\n        VAL=true\n\
    \    fi\n    if [ \"$DATE\" != \"\" ] && [ \"$DAYS\" -ge 1 ] && [ \"$MONTHS\"\
    \ -ge 1 ] && [ \"$MONTHS\" -le 12 ] && [ \"$DAYS\" -le 31 ] && [ \"$MONTH\" -ge\
    \ 3 ] && [ \"$MONTH\" -le 12 ]; then\n        VAL=true\n    fi\n    if [ \"$DATE\"\
    \ != \"\" ] && [ \"$DAYS\" -ge 1 ] && [ \"$MONTHS\" -ge 1 ] && [ \"$MONTHS\" -le\
    \ 12 ] && [ \"$DAYS\" -le 30 ", "\tlocal date=$1\n\n\t# Check date is not empty\n\
    \tif [ -z \"$date\" ]; then\n\t\techo \"Invalid date string ${date}\"\n\t\treturn\
    \ false\n\tfi\n\n\t# Check month\n\tcase \"$date\" in\n\t\t*-* )\n\t\t\techo \"\
    Invalid date string ${date}\"\n\t\t\treturn false\n\t\t\t;;\n\t\t* ) ;;\n\tesac\n\
    \n\t# Check month\n\tcase \"$date\" in\n\t\t*-* )\n\t\t\techo \"Invalid date string\
    \ ${date}\"\n\t\t\treturn false\n\t\t\t;;\n\t\t* ) ;;\n\tesac\n\n\t# Check day\n\
    \tcase \"$date\" in\n\t\t*-* ) ;;\n\t\t* ) [ \"$date\" = \"$date-$((31))\" ] &&\
    \ return 0 || [ \"$date\" = \"$date-$((29))\" ] && return 1 || [ \"$date\" = \"\
    $date-$((31))\" ] && return 0;;\n\tesac\n\n\t# Check date format\n\tcase \"$date\"\
    \ in\n\t\t*-* ) ;;\n\t\t* ) [ \"$date\" = \"$date-$((31))\" ] && return 0 || [\
    \ \"$date\" = \"$date-$((29))\" ] && return 1 || [ \"$date\" = \"$date-$((31))\"\
    \ ] && return 0 || [ \"$date\" = \"$date-$((30))\" ] && return 1;;\n\tesac\n\n\
    \treturn 0", "    date=${1:-$(date)}\n    if [[ -z \"$date\" ]]; then\n      \
    \  echo \"false\"\n    else\n        month=${date%-*}\n        day=${date#*-*}\n\
    \        day=${day//-/ }\n        day=${day:0:1}\n\n        if [[ $day -lt 1 ||\
    \ $day -gt 31 ]] ; then\n            echo \"false\"\n        else\n          \
    \  if [[ $month -gt 12 ]] || [[ $month -le 1 ]]; then\n                echo \"\
    false\"\n            else\n                if [[ $day -gt 29 ]] || [[ $day -lt\
    \ 1 ]]; then\n                    echo \"false\"\n                else\n     \
    \               if [[ $month -gt 3 ]] || [[ $month -le 4 ]]; then\n          \
    \              echo \"false\"\n                    else\n                    \
    \    echo \"true\"\n                    fi\n                fi\n            fi\n\
    \        fi\n    fi", "    local date=$1\n    [[ -z \"$date\" ]] && return 1\n\
    \    local check_year=$(date -d \"$date\" +%Y)\n    local check_month=$(date -d\
    \ \"$date\" +%m)\n    local check_day=$(date -d \"$date\" +%d)\n    local check_date=$(date\
    \ -d \"$date\" +%m-%d)\n    local check_hour=$(date -d \"$date\" +%H)\n    local\
    \ check_minute=$(date -d \"$date\" +%M)\n    local check_seconds=$(date -d \"\
    $date\" +%S)\n    # Check for valid date\n    [[ -z \"$check_year\" ]] && return\
    \ 1\n    [[ -z \"$check_month\" ]] && return 1\n    [[ -z \"$check_day\" ]] &&\
    \ return 1\n    # Check for valid days\n    [[ -z \"$check_date\" ]] && return\
    \ 1\n    [[ -z \"$check_hour\" ]] && return 1\n    [[ -z \"$check_minute\" ]]\
    \ && return 1\n    [[ -z \"$check_seconds\" ]] && return 1\n    if [ \"$check_year\"\
    \ -lt 100 ] || [ \"$check_year\" -gt 2021 ] || [ \"$check_month\" -lt 1 ] || [\
    \ \"$check_month\" -gt 12 ] || [ \"$check_day\" -lt 1 ] || [ \"$check_day\" -gt\
    \ 31 ] || [ \"$check_date\" -lt 1 ] || [ \"$check_date\" -gt 30 ] || [ \"$check_date\"\
    \ -lt 29 || [ \"$check_hour\" -lt 1 ] || [ \"$check_hour\" -gt 23 ] || [ \"$check_minute\"\
    \ -lt 1 ] || [ \"$check_minute\" -gt 59 ] || [ \"$check_seconds\" -lt 1 ] || [\
    \ \"$check_seconds\" -gt 59 ]\n    then\n        return 0\n    else\n        return\
    \ 1\n    fi", "    date -d \"$1\" > /dev/null 2>&1\n    if [ \"$?\" == \"1\" ];\
    \ then\n        return false\n    fi\n    # Check if there are any valid dates\
    \ in the string\n    valid_dates_regex='^((((0?[13578]|1[02])-(0?[1-9]|[12]\\\
    d|3[01]))|((0?[1,3-9])-(0?[1-9]|[12]\\d|30))|(0?2[0,3-9]|3[0,1]|[12][0,1])(0?[1-9]|1\\\
    d|2[0-8]))-(((0?[1-9]|[12]\\d|3[01])(0?[1-9]|1\\d|2[0-8])-(0?[1-9]|[12]\\d|3[01])))|((0?[1,3,5,7,8,10,12])-(0?[1-9]|[12]\\\
    d|30))-(((0?[48]00)-04-(0?[1-9]|[12]\\d|30)))$'\n    if [[ $1 =~ $valid_dates_regex\
    \ ]]; then\n        # Check for the correct number of days\n        num_days=${#${1//-/}}\
    \ #Count number of dashes\n        if [ $num_days == 1 ]; then\n            if\
    \ [[ $num_days -le 31 ]]; then\n                # Check for the correct number\
    \ of months.\n                num_months=${#${1//-/}} #Count number of dashes\n\
    \                if [ $num_months == 1 ]; then\n                    if [[ $num_months\
    \ -le 12 ]]; then\n                        true\n                    else\n  \
    \                      false\n                    fi\n                else\n \
    \                   false\n                fi\n            else\n            \
    \    false\n            fi\n        else\n            false\n        fi\n    else\n\
    \        false\n    fi", "  local STRING=$1\n  local VALID=\"^(01|03|05|07|08|10|12)(\\\
    -)(01|03|05|07|08|10|12)(\\-)(\\d{4})$\"\n\n  if [[ $STRING != \"\" ]]; then\n\
    \    if [[ $VALID != \"\" ]]; then\n      if [[ $STRING =~ $VALID ]]; then\n \
    \       local MONTH=$(( ${BASH_REMATCH[3]} - 1 ))\n        local DAY=$(( ${BASH_REMATCH[4]}\
    \ - 1 ))\n        local YEAR=$(( ${BASH_REMATCH[5]} - 2000 ))\n\n        if [[\
    \ $MONTH -lt 1 || $MONTH > 12 ]]; then\n          echo \"false\"\n        fi\n\
    \        if [[ $DAY -lt 1 || $DAY > 30 ]]; then\n          echo \"false\"\n  \
    \      fi\n        if [[ $MONTH -lt 1 || $MONTH > 12 ]]; then\n          echo\
    \ \"false\"\n        fi\n        if [[ $YEAR -lt 1 || $YEAR > 30 ]]; then\n  \
    \        echo \"false\"\n        fi\n        echo \"true\"\n      else\n     \
    \   echo \"false\"\n      fi\n    else\n      echo \"false\"\n    fi\n  else\n\
    \    echo \"false\"\n  fi", "\tlocal date=$1\n\ttest -z \"$date\"\n\treturn\n\t\
    test \"$date\" != ''\n\ttest \"$date\" != \\#\n\ttest $(($(date -d \"$date\" +%s)\
    \ - $(date +%s))/86400) -gt 0\n\ttest $(($(date -d \"$date\" +%s) - $(date +%s))/86400)\
    \ -lt 31\n\ttest $(($(date -d \"$date\" +%s) - $(date +%s))/86400) -gt 30\n\t\
    test $(($(date -d \"$date\" +%s) - $(date +%s))/86400) -lt 29\n\ttest \"$date\"\
    \ != '-' -o \"$date\" != '+'\n\ttest \"$date\" != '/' -o \"$date\" != '-'\n\t\
    test \"$date\" != '-' -o \"$date\" != '+'\n\ttest \"$date\" != '/' -o \"$date\"\
    \ != '-'\n\ttest \"$date\" != '-' -o \"$date\" != '+'\n\ttest \"$date\" != '/'\
    \ -o \"$date\" != '-'\n\ttest \"$date\" != '-' -o \"$date\" != '+'\n\ttest \"\
    $date\" != '/' -o \"$date\" != '-'\n\ttest \"$date\" != '-' -o \"$date\" != '+'\n\
    \ttest \"$date\" != '/' -o \"$date\" != '-'", "    local months=\"1 3 5 7 8 10\
    \ 12\"\n    local days=\"1 30 29 31 31 30 31\"\n    local years=\"4 6 9 11 12\
    \ 13 14 15 16 17 18 19 20 21 22 23\"\n\n    if [ -z \"$1\" ]\n    then\n     \
    \   return 1\n    fi\n\n    if [[ \"$1\" =~ ^[0-9]+$ ]]\n    then\n        return\
    \ 1\n    fi\n\n    if [[ \"$1\" =~ ^([1-9]|[12][0-9]|3[01])\\-(0[1-9]|1[012])\\\
    -[0-9]{4}$ ]]\n    then\n        return 0\n    fi\n\n    if [[ $1 =~ ^([1-9]|[12][0-9]|3[01])\\\
    -(0[1-9]|1[012])\\-[0-9]{2}$ ]]\n    then\n        return 1\n    fi\n\n    if\
    \ [[ \"$1\" =~ ^([1-9]|[12][0-9]|3[01])\\-(0[1-9]|1[012])\\-[0-9]{2}\\/(0[1-9]|1[012])\\\
    -[0-9]{4}$ ]]\n    then\n        return 0\n    fi\n\n    if [[ $1 =~ ^(0[1-9]|1[012])\\\
    -(0[1-9]|1[012])\\-[0-9]{2}\\/(0[1-9]|1[012])\\-[0-9]{4}$ ]]\n    then\n     \
    \   return 0\n    fi\n\n    for month in $months\n    do\n        if [[ \" ${months[@]}\
    \ \" =~ \" $1 \" ]]\n        then\n            return 0\n        fi\n    done\n\
    \n    for day in $days\n    do\n        if [[ \" ${days[@]} \" =~ \" $1 \" ]]\n\
    \        then\n            return 0\n        fi\n    done\n\n    for year in $years\n\
    \    do\n        if [[ \" ${years[@]} \" =~ \" $1 \" ]]\n        then\n      \
    \      return 0\n        fi\n    done\n\n    return 1", "  echo \"$1\" | awk -F-\
    \ -v months=\"{13,20,29,30,31}\" '($1<1 || $1<13 || $1>12) || (($1-13)%4==0 &&\
    \ $1-13+($1-1<months[$1]?1:0)>=31) || (($1-13)%4==1 && $1-13+($1-1<months[$1]?1:0)>=30)\
    \ || (($1-13)%4==2 && $1-13+($1-1<months[$1]?1:0)>=29) || ($1-13+($1-1<months[$1]?1:0)>=months[$1])'",
  "    date=`date --date=\"$1\" +\"%m-%d-%Y\"`\n    if [ \"$date\" != \"\" ]; then\n\
    \        datelen=`echo $date | wc -c`\n        if [ \"$datelen\" -eq 5 ]; then\n\
    \            if [ ${date:0:1} == \"1\" ]; then\n                if [ ${date:2:1}\
    \ == \"1\" ]; then\n                    if [ ${date:3:1} == \"1\" ]; then\n  \
    \                      if [ ${date:4:1} == \"1\" ]; then\n                   \
    \         if [ ${date:6:1} == \"1\" ]; then\n                                return\
    \ 0\n                            fi\n                        fi\n            \
    \        fi\n                fi\n            fi\n        fi\n    fi\n    return\
    \ 1", "    [ ! -z \"$1\" ] && [ \"$(echo \"$1\" | sed -e 's/\\(.\\)\\(.\\)\\(.\\\
    )\\(.\\)\\(.\\)/\\1\\2\\3\\4\\5\\6\\7')\" -ge 1 ] && [ \"$(echo \"$1\" | sed -e\
    \ 's/\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)/\\1\\2\\3\\4\\5\\6\\7')\" -le 31 && [\
    \ \"$(echo \"$1\" | sed -e 's/\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)/\\1\\2\\3\\\
    4\\5\\6\\7')\" -le 30 && [ \"$(echo \"$1\" | sed -e 's/\\(.\\)\\(.\\)\\(.\\)\\\
    (.\\)\\(.\\)/\\1\\2\\3\\4\\5\\6\\7')\" -le 29 ] && [ \"$(echo \"$1\" | sed -e\
    \ 's/\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)/\\1\\2\\3\\4\\5\\6\\7')\" -le 12 ]",
  "  local date=$1\n  local month=${date:0:2}\n  local day=${date:2:2}\n  local year=${date:4:4}\n\
    \  if [[ ${month} =~ ^[0-1][0-9]$ ]]; then\n    local days_month=`expr ${day}\
    \ + ${month} / 30`\n    if [[ ${days_month} -ge 1 ]] && [[ ${month} -ge 1 ]] &&\
    \ [[ ${month} -le 12 ]]; then\n      if [[ ${days_month} -ge 31 ]]; then\n   \
    \     if [[ ${month} -ge 3 ]] && [[ ${month} -le 5 ]]; then\n          if [[ ${day}\
    \ -ge 1 ]] && [[ ${day} -le 31 ]]; then\n            if [[ ${month} -ge 6 ]] &&\
    \ [[ ${month} -le 9 ]]; then\n              if [[ ${day} -ge 1 ]] && [[ ${day}\
    \ -le 30 ]]; then\n                if [[ ${month} -ge 10 ]] && [[ ${month} -le\
    \ 12 ]]; then\n                  echo \"true\"\n                else\n       \
    \           echo \"false\"\n                fi\n              else\n         \
    \       echo \"false\"\n              fi\n            else\n              echo\
    \ \"false\"\n            fi\n          else\n            echo \"false\"\n    \
    \      fi\n        else\n          echo \"false\"\n        fi\n      else\n  \
    \      echo \"false\"\n      fi\n    else\n      echo \"false\"\n    fi\n  else\n\
    \    echo \"false\"\n  fi", "\tif [ -z \"$1\" ] ; then\n\t\treturn 1\n\tfi\n\t\
    # Check string is not empty\n\tif [ \"`echo $1 | grep -E '^$'`\" != \"`echo $1\
    \ | grep -E '^$'`\" ] ; then\n\t\treturn 1\n\tfi\n\t\n\t# Check month string\n\
    \tif [ \"$1\" == \"01-31-\" -o \"$1\" == \"01-31\" ] ; then\n\t\treturn 1\n\t\
    fi\n\tif [ \"$1\" == \"02-29-\" -o \"$1\" == \"02-29\" ] ; then\n\t\treturn 1\n\
    \tfi\n\tif [ \"$1\" == \"03-31-\" -o \"$1\" == \"03-31\" ] ; then\n\t\treturn\
    \ 1\n\tfi\n\tif [ \"$1\" == \"04-30-\" -o \"$1\" == \"04-30\" ] ; then\n\t\treturn\
    \ 1\n\tfi\n\tif [ \"$1\" == \"05-31-\" -o \"$1\" == \"05-31\" ] ; then\n\t\treturn\
    \ 1\n\tfi\n\tif [ \"$1\" == \"06-30-\" -o \"$1\" == \"06-30\" ] ; then\n\t\treturn\
    \ 1\n\tfi\n\tif [ \"$1\" == \"07-31-\" -o \"$1\" == \"07-31\" ] ; then\n\t\treturn\
    \ 1\n\tfi\n\tif [ \"$1\" == \"08-31-\" -o \"$1\" == \"08-31\" ] ; then\n\t\treturn\
    \ 1\n\tfi\n\tif [ \"$1\" == \"09-30-\" -o \"$1\" == \"09-30\" ] ; then\n\t\treturn\
    \ 1\n\tfi\n\tif [ \"$1\" == \"10-31-\" -o \"$1\" == \"10-31\" ] ; then\n\t\treturn\
    \ 1\n\tfi\n\tif [ \"$1\" == \"11-30-\" -o \"$1\" == \"11-30\" ] ; then\n\t\treturn\
    \ 1\n\tfi\n\tif [ \"$1\" == \"12-31-\" -o \"$1\" == \"12-31\" ] ; then\n\t\treturn\
    \ 1\n\tfi\n\t\n\t# Check year string\n\tyear=`echo $1 | awk -F- '{print $3}'`\n\
    \tif [ \"$year\" == \"2000\" -o \"$year\" == \"1910\" -o \"$year\" == \"2010\"\
    \ -o \"$year\" == \"2020\" -o \"$year\" == \"2030\" -o \"$year\" == \"2040\" -o\
    \ \"$year\" == \"1910\" -o \"$year\" == \"1920\" -o \"$year\" == \"1930\" -o \"\
    $year\" == \"1940\" -o \"$year\" == \"1950\" -o \"$year\" == \"1960\" -o \"$year\"\
    \ == \"1970\" -o \"$year\" == \"1980\" -o \"$year\" == \"1990\" -o \"$year\" ==\
    \ \"2000\" -o ", "  local string=$1\n  local is_valid_date=true\n  if [ -z \"\
    $string\" ]; then\n    echo \"string variable is empty\";\n    is_valid_date=false;\n\
    \  else\n    string=${string#*\\/}\n    string=${string%\\/}\n    if [ \"$string\"\
    \ == \"\" ]; then\n      echo \"string variable is empty\";\n      is_valid_date=false;\n\
    \    fi\n    if [ \"$string\" != \"${string#-}\" ]; then\n      echo \"string\
    \ variable does not contain dash(-)\";\n      is_valid_date=false;\n    fi\n \
    \   arr=(${string//-/ })\n    if [ ${#arr[@]} -lt 2 ]; then\n      echo \"string\
    \ variable does not contain 2 dashes(-)\";\n      is_valid_date=false;\n    fi\n\
    \    if [ ${#arr[@]} -lt 3 ]; then\n      echo \"string variable does not contain\
    \ 3 dashes(-)\";\n      is_valid_date=false;\n    fi\n    if [ \"$string\" ==\
    \ ${string#*-} ]; then\n      echo \"string variable does not contain dash(-)\"\
    ;\n      is_valid_date=false;\n    fi\n    if [ \"$string\" == ${string##*-} ];\
    \ then\n      echo \"string variable does not contain dash(-)\";\n      is_valid_date=false;\n\
    \    fi\n    if [ $(( ${arr[1]} + 1 )) -lt 1 ] || [ $(( ${arr[1]} + 1 )) -gt 31\
    \ ]; then\n      echo \"year variable contains invalid date format\";\n      is_valid_date=false;\n\
    \    fi\n    if [ $(( ${arr[2]} + 1 )) -lt 1 ] || [ $(( ${arr[2]} + 1 )) -gt 31\
    \ ] || [ $(( ${arr[2]} + 1 )) -gt 30 ] || [ $(( ${arr[2]} + 1 )) -lt 29 ]; then\n\
    \      echo \"month variable contains invalid date format\";\n      is_valid_date=false;\n\
    \    fi\n    echo \"$is_valid_date\"\n  fi", "    # your code here\n    local\
    \ date=\"$1\"\n    local year=\"$(echo $date | cut -d -4 -f)\"\n    local month=\"\
    $(echo $date | cut -d -2 -f)\"\n    local day=\"$(echo $date | cut -d -3 -f)\"\
    \n    if [[ $day -lt 1 || $day -gt 31 ]] ; then\n        return false\n    fi\n\
    \    if [[ $month -lt 1 || $month -gt 12 ]] ; then\n        return false\n   \
    \ fi\n    if [[ $year != \"$(echo $year | sed 's/-/+/g')\" ]] ; then\n       \
    \ return false\n    fi\n    if [[ \"$day\" < 1 || \"$day\" > 29 && \"$day\" <\
    \ 31 ]] ; then\n        return false\n    fi\n    if [[ \"$month\" -lt 1 || \"\
    $month\" -gt 12 ]] ; then\n        return false\n    fi\n    return true", " \
    \ local date=\"$1\"\n  local year=\"$2\"\n  local month=\"$3\"\n  local day=\"\
    $4\"\n\n  case \"${month}\" in\n    0) return false ;;\n    1) return false ;;\n\
    \    2) return false ;;\n    3) return true ;;\n    4) return true ;;\n    5)\
    \ true ;;\n    6) true ;;\n    7) true ;;\n    8) true ;;\n    9) true ;;\n  \
    \  10) true ;;\n    11) true ;;\n    12) true ;;\n    *) return false ;;\n  esac\n\
    \n  case \"${day}\" in\n    0) return false ;;\n    1) return false ;;\n    2)\
    \ return true ;;\n    3) return true ;;\n    4) return true ;;\n    5) return\
    \ true ;;\n    6) return true ;;\n    7) return true ;;\n    8) return true ;;\n\
    \    9) return true ;;\n    10) true ;;\n    11) true ;;\n    12) true ;;\n  \
    \  *) return false ;;\n  esac\n\n  case \"${year}\" in\n    0) return false ;;\n\
    \    1) return false ;;\n    2) return false ;;\n    3) return true ;;\n    4)\
    \ return true ;;\n    5) return true ;;\n    6) return true ;;\n    7) return\
    \ true ;;\n    8) return true ;;\n    9) return true ;;\n    10) true ;;\n   \
    \ 11) true ;;\n    12) true ;;\n    *) return false ;;\n  esac\n\n  case \"${month}\"\
    \ in\n    [0-9]) true ;;\n    *) return false ;;\n  esac\n\n  case \"${day}\"\
    \ in\n    [0-9]) true ;;\n    *) return false ;;\n  esac\n\n  case \"${year}\"\
    \ in\n    [0-9]) true ;;\n    *) return false ;;\n  esac\n\n  case \"${year}\"\
    \ in\n    [0-9][0-9]) true ;;\n    *) return false ;;\n  esac\n\n  case \"${month}\"\
    \ in\n    [0-9][0-9]) true ;;\n    *) return false ;;\n  esac\n\n  case \"${day}\"\
    \ in\n    [0-9][0-9]) true ;;\n    *) return false ;;\n  esac\n\n  case \"${year}\"\
    \ in\n    [0-9][0-9][0-9]) true ;;\n    *) return false ;;\n  esac\n\n  case \"\
    ${month}\" in\n    [0-9][0-9][0-9]) true ;;\n    *) return false ;;\n  esac\n\n\
    \  case \"${day}\" in\n    [0-9][0-9][0-9]) true ;;\n    *) return false ;;\n\
    \  e", "  local year=$1\n  local month=$2\n  local day=$3\n\n  local num_days=$((\
    \ ((31 * $month + $day) \\\n                    + $(((month == 1) || (month ==\
    \ 3) || \\\n                        (month == 5) || (month == 7) || \\\n     \
    \                   (month == 8) || (month == 10) || \\\n                    \
    \    (month == 12)) ? 29 : 28)) % 365 ))\n  local month_name=$(date -d \"${year}-${month}-${day}\"\
    \ +\"%b\" --utc)\n  if [[ -z $day ]] && [[ -z $month ]]; then\n    month=01\n\
    \    num_days=$(( ((31 * $month + 1) \\\n                    + $(((month == 1)\
    \ || (month == 3) || \\\n                        (month == 5) || (month == 7)\
    \ || \\\n                        (month == 8) || (month == 10) || \\\n       \
    \                 (month == 12)) ? 29 : 28)) % 365 ))\n  fi\n\n  if [[ -z $day\
    \ ]]; then\n    day=$(date -d \"${year}-${month}-01\" +\"%d\" --utc)\n  fi\n\n\
    \  if [[ -z $month ]]; then\n    month=$(date -d \"${year}-01-01\" +\"%m\" --utc)\n\
    \  fi\n\n  if [[ -z $year ]]; then\n    year=$(date -d \"2020-01-01\" +\"%Y\"\
    \ --utc)\n  fi\n\n  if [[ $num_days -lt 1 || $num_days -gt 31 ]]; then return\
    \ 0; fi\n  if [[ $month -le 1 || $month -gt 12 ]]; then return 0; fi\n  if [[\
    \ $day -le 1 || $day -gt $num_days ]]; then return 0; fi\n\n  true", '    date
    "+${1}" > /dev/null 2>&1', "\techo -n \"Enter the date in MM-DD-YYYY format:\"\
    \n\tread string\n\tstring=\"${string//-/}\"\n\tstring=\"${string//\\//}\"\n\t\
    IFS=- read mm dd yyyy <<< \"$string\"\n\t((mm > 12)) || return 1\n\t((mm < 1))\
    \ || (return 1)\n\t((dd > 29)) || return 1\n\t((dd < 1)) || (return 1)\n\t((yyyy\
    \ > 9999)) || (return 1)\n\t((yyyy < 1800)) || (return 1)\n\t((dd == \"\")) ||\
    \ (return 1)\n\t((dd == \" \")) || (return 1)\n\t((mm == \"\")) || (return 1)\n\
    \t((mm == \" \")) || (return 1)\n\t((md != \"\")) || (return 1)\n\t((md == \"\
    \ \")) || (return 1)\n\t((year != \"\")) || (return 1)\n\t((year == \" \")) ||\
    \ (return 1)\n\t((month != \"\")) || (return 1)\n\t((month == \" \")) || (return\
    \ 1)\n\t((year == \"\")) || (return 1)\n\t((month == \"\")) || (return 1)\n\t\
    ((day != \"\")) || (return 1)\n\t((day == \" \")) || (return 1)\n\t((month ==\
    \ \"1\")) || (return 1)\n\t((month == \"2\")) || (return 1)\n\t((month == \"3\"\
    )) || (return 1)\n\t((month == \"4\")) || (return 1)\n\t((month == \"5\")) ||\
    \ (return 1)\n\t((month == \"6\")) || (return 1)\n\t((month == \"7\")) || (return\
    \ 1)\n\t((month == \"8\")) || (return 1)\n\t((month == \"9\")) || (return 1)\n\
    \t((month == \"10\")) || (return 1)\n\t((month == \"11\")) || (return 1)\n\t((month\
    \ == \"12\")) || (return 1)\n\t((month == \"01\")) || (return 1)\n\t((month ==\
    \ \"02\")) || (return 1)\n\t((month == \"03\")) || (return 1)\n\t((month == \"\
    04\")) || (return 1)\n\t((month == \"05\")) || (return 1)\n\t((month == \"06\"\
    )) || (return 1)\n\t((month == \"07\")) || (return 1)\n\t((month == \"08\")) ||\
    \ (return 1)\n\t((month == \"09\")) || (return 1)\n\t((month == \"10\")) || (return\
    \ 1)\n\t((month == \"11\")) || (return 1)\n\t((month == \"12\")) || (return 1)\n\
    \t((month == \"13\")) || (return 1)\n\t((month == \"14\")) || (return 1)\n\t((month\
    \ == \"15\")) || (return 1)", "    local date\n    date=${1:-$(date '+%m-%d-%Y')}\n\
    \    [[ \"$date\" =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]] || return 0\n    [[ \"$date\"\
    \ =~ ^[1-12]$ ]] || return 0\n    [[ \"$date\" =~ ^[01][0-9]-[0-3][0-9]-[0-9]{4}$\
    \ ]] || return 0\n    [[ \"$date\" =~ ^[01][0-9]/[0-3][0-9]/[0-9]{4}$ ]] || return\
    \ 0\n    [[ \"$date\" =~ ^[0-3][0-9]/[0-3][0-9]/[0-9]{4}$ ]] || return 0\n   \
    \ [[ \"$date\" =~ ^[0-3][0-9][0-9]-[0-3][0-9]-[0-9]{4}$ ]] || return 0\n    [[\
    \ \"$date\" =~ ^[0-1][0-9]-[0-3][0-9]-[0-9]{4}$ ]] || return 0\n    [[ \"$date\"\
    \ =~ ^[0-1][0-9]/[0-3][0-9]/[0-9]{4}$ ]] || return 0\n    [[ \"$date\" =~ ^[0-3][0-9]/[0-3][0-9]/[0-9]{4}$\
    \ ]] || return 0\n    [[ \"$date\" =~ ^[0-3][0-9][0-9]-[0-1][0-9]-[0-9]{4}$ ]]\
    \ || return 0\n    [[ \"$date\" =~ ^[0-1][0-9]-[0-3][0-9]-[0-9]{4}$ ]] || return\
    \ 0\n    [[ \"$date\" =~ ^[0-1][0-9]/[0-3][0-9]/[0-9]{4}$ ]] || return 0\n   \
    \ [[ \"$date\" =~ ^[0-3][0-9]/[0-3][0-9]/[0-9]{4}$ ]] || return 0\n    [[ \"$date\"\
    \ =~ ^[0-3][0-9][0-9]-[0-1][0-9]-[0-9]{4}$ ]] || return 0\n    [[ \"$date\" =~\
    \ ^[0-1][0-9]-[0-3][0-9]-[0-9]{4}$ ]] || return 0\n    [[ \"$date\" =~ ^[0-1][0-9]/[0-3][0-9]/[0-9]{4}$\
    \ ]] || return 0\n    [[ \"$date\" =~ ^[0-3][0-9]/[0-3][0-9]/[0-9]{4}$ ]] || return\
    \ 0\n    [[ \"$date\" =~ ^[0-3][0-9][0-9]-[0-1][0-9]-[0-9]{4}$ ]] || return 0\n\
    \    [[ \"$date\" =~ ^[0-1][0-9]-[0-3][0-9]-[0-9]{4}$ ]] || return 0\n    [[ \"\
    $", "\tdate=$1\n\tday=`echo $date | sed -e 's/\\([0-9]*\\)-\\(.*\\)/\\1/g' -e\
    \ 's/-/ /g' -e 's/\\([0-9]*\\)/\\1/g'`\n\tmonth=`echo $date | sed -e 's/\\([0-9]*\\\
    )-\\(.*\\)/\\1/g' -e 's/-/ /g' -e 's/\\([0-9]*\\)/\\1/g'`\n\tyear=`echo $date\
    \ | sed -e 's/\\([0-9]*\\)-\\(.*\\)/\\1/g' -e 's/-/ /g' -e 's/\\([0-9]*\\)/\\\
    1/g'`\n\tif [ \"$(echo $date | awk '{print $1!=\"\" && $3!=\"\" && $5!=\"\" &&\
    \ $7!=\"\" && $8!=\"\" && $10!=\"\" && $12!=\"\"}')\" = \"true\" ]\n\tthen\n\t\
    \tif [ \"$day\" -le \"1\" -o \"$day\" -ge \"31\" -o \"$month\" -le \"1\" -o \"\
    $month\" -ge \"12\" -o \"$year\" -le \"1900\" -o \"$year\" -ge \"2040\" ]\n\t\t\
    then\n\t\t\tif [ \"$month\" -le \"1\" -o \"$month\" -ge \"12\" ]\n\t\t\tthen\n\
    \t\t\t\tif [ \"$day\" -le \"1\" -o \"$day\" -ge \"29\" ]\n\t\t\t\tthen\n\t\t\t\
    \t\tif [ \"$month\" = \"1\" ]\n\t\t\t\t\tthen\n\t\t\t\t\t\techo \"true\"\n\t\t\
    \t\t\telse\n\t\t\t\t\t\techo \"false\"\n\t\t\t\t\tfi\n\t\t\t\telse\n\t\t\t\t\t\
    echo \"false\"\n\t\t\t\tfi\n\t\t\telse\n\t\t\t\techo \"false\"\n\t\t\tfi\n\t\t\
    else\n\t\t\techo \"false\"\n\t\tfi\n\telse\n\t\techo \"false\"\n\tfi", "    #\
    \ Write the validation code here\n    IFS='-' read -a date <<< \"$1\"\n    if\
    \ [ -z \"$1\" ]; then\n        echo \"true\"\n    elif [[ ${date[2]} -le 1 ]]\
    \ || [[ ${date[2]} -ge 12 ]]; then\n        echo \"false\"\n    elif [[ ${date[1]}\
    \ -le 1 ]] || [[ ${date[1]} -ge 12 ]] || [[ ${date[1]} -eq 0 ]] || [[ ${date[1]}\
    \ -eq 1 ]] || [[ ${date[1]} -eq 3 ]] || [[ ${date[1]} -eq 5 ]] || [[ ${date[1]}\
    \ -eq 7 ]] || [[ ${date[1]} -eq 8 ]] || [[ ${date[1]} -eq 10 ]] || [[ ${date[1]}\
    \ -eq 12 ]]; then\n        echo \"true\"\n    elif [[ ${date[1]} -le 4 ]] || [[\
    \ ${date[1]} -ge 6 ]] || [[ ${date[1]} -eq 9 ]] || [[ ${date[1]} -eq 11 ]]; then\n\
    \        echo \"false\"\n    elif [[ ${date[1]} -le 2 ]] || [[ ${date[1]} -ge\
    \ 3 ]]; then\n        echo \"false\"\n    elif [[ ${date[2]} -le 1 ]] || [[ ${date[2]}\
    \ -ge 31 ]] || [[ ${date[2]} -le 30 ]] || [[ ${date[2]} -le 29 ]]; then\n    \
    \    echo \"false\"\n    elif [[ ${date[2]} -le 4 ]] || [[ ${date[2]} -ge 6 ]]\
    \ || [[ ${date[2]} -ge 9 ]] || [[ ${date[2]} -ge 11 ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi", '    date "+%s" -d "$1" 2>/dev/null',
  "  [[ -z $1 ]] && return 1\n  [[ \"$1\" =~ ^[0-9]*$ ]] && return 1\n  [[ \"$1\"\
    \ =~ ^[0-9]*\\-[0-9]*\\-[0-9]*$ ]] && return 1\n  [[ \"$1\" =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\
    \ ]] && return 0\n  [[ \"$1\" =~ ^[0-9]{2}\\/[0-9]{2}\\/[0-9]{4}$ ]] && return\
    \ 0\n  [[ \"$1\" =~ ^[0-9]{2}\\-[0-9]{2}\\-[0-9]{4}$ ]] && return 0\n  [[ \"$1\"\
    \ =~ ^[0-9]{2}-[0-9]{2}-[0-9]{2}$ ]] && return 0\n  [[ \"$1\" =~ ^[0-9]*\\-[0-9]*\\\
    -[0-9]*$ ]] && return 0\n  [[ \"$1\" =~ ^[0-9]{2}-[0-9]{2}-[0-9]{2}$ ]] && return\
    \ 0\n  [[ \"$1\" =~ ^[0-9]*\\-[0-9]*\\-[0-9]*$ ]] && return 0\n  [[ \"$1\" =~\
    \ ^[0-9]{2}\\/[0-9]{2}\\/[0-9]{2}$ ]] && return 0\n  [[ \"$1\" =~ ^[0-9]{2}\\\
    -[0-9]{2}\\-[0-9]{2}$ ]] && return 0\n  [[ \"$1\" =~ ^[0-9]{2}\\/[0-9]{2}\\/[0-9]{4}$\
    \ ]] && return 0\n  [[ \"$1\" =~ ^[0-9]{2}\\-[0-9]{2}\\-[0-9]{4}$ ]] && return\
    \ 0\n  [[ \"$1\" =~ ^[0-9]{2}\\-[0-9]{2}\\-[0-9]{2}$ ]] && return 0\n  [[ \"$1\"\
    \ =~ ^[0-9]{2}\\/[0-9]{2}\\/[0-9]{2}$ ]] && return 0\n  [[ \"$1\" =~ ^[0-9]{2}\\\
    -[0-9]{2}\\-[0-9]{2}$ ]] && return 0\n  [[ \"$1\" =~ ^[0-9]{2}\\/[0-9]{2}\\/[0-9]{4}$\
    \ ]] && return 0\n  [[ \"$1\" =~ ^[0-9]{2}\\-[0-9]{2}\\-[0-9]{4}$ ]] && return\
    \ 0\n  [[ \"$1\" =~ ^[0-9]{2}\\-[0-9]{2}\\-[0-9]{2}$ ]] && return 0\n  [[ \"$1\"\
    \ =~ ^[0-9]{2}\\-[0-9]{2}\\-[0-9]{2}$ ]] && return 0\n  [[ \"$1\" =~ ^[0-9]{2}\\\
    -[0-9]{2}\\-[0-9]{2}$ ]] && return 0\n  [[ \"$1\" =~ ^[0-9]{2}\\-[0-9]{2}\\-",
  "        local _date=\"$1\"\n        if [ -z \"$_date\" ];\n        then\n     \
    \           echo \"Invalid date: \\\"$date\\\"!\"\n                return 1\n\
    \        fi\n        local _year=\"${_date:0:4}\"\n        local _month=\"${_date:5:2}\"\
    \n        local _day=\"${_date:8:2}\"\n        if [ -z \"$_year\" ];\n       \
    \ then\n                echo \"Invalid date: \\\"$date\\\"!\"\n              \
    \  return 1\n        fi\n        if [ -z \"$_month\" ];\n        then\n      \
    \          echo \"Invalid date: \\\"$date\\\"!\"\n                return 1\n \
    \       fi\n        if [ -z \"$_day\" ];\n        then\n                echo \"\
    Invalid date: \\\"$date\\\"!\"\n                return 1\n        fi\n       \
    \ if [ \"$_month\" -lt \"01\" ] || [ \"$_month\" -gt \"12\" ];\n        then\n\
    \                echo \"Invalid date: \\\"$date\\\"!\"\n                return\
    \ 1\n        fi\n        if [ \"$_day\" -lt \"01\" ] || [ \"$_day\" -gt \"31\"\
    \ ] || [ \"$_day\" -lt \"30\" ] || [ \"$_day\" -gt \"29\" ];\n        then\n \
    \               echo \"Invalid date: \\\"$date\\\"!\"\n                return\
    \ 1\n        fi\n        if [ \"$_month\" -lt \"01\" ] || [ \"$_month\" -gt \"\
    12\" ];\n        then\n                echo \"Invalid date: \\\"$date\\\"!\"\n\
    \                return 1\n        fi\n        return 0", "  [[ -z \"$1\" ]] &&\
    \ echo \"Invalid date\" && return 1\n  [[ \"$1\" =~ ^[0-9]{1,2}-[0-9]{1,2}-[0-9]{4}$\
    \ ]] || return 0\n  [[ \"$1\" =~ ^[0-9]{1,2}\\/[0-9]{1,2}\\/[0-9]{4}$ ]] || return\
    \ 0\n  [[ \"$1\" =~ ^[0-9]+$ ]] || return 0\n  (( ${#1} <= 31 )) && (( ${#1} >\
    \ 31 )) && (( ${#1} <= 30 )) && (( ${#1} > 30 )) && (( ${#1} <= 29 )) && (( ${#1}\
    \ > 29 )) && (( ${#1} <= 12 )) && (( ${#1} > 12 )) || return 0\n  [[ \"$1\" =~\
    \ ^(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])-[0-9]{4}$ ]] || return 0\n  [[ \"\
    $1\" =~ ^(0?[1-9]|1[012])\\/(0?[1-9]|[12][0-9]|3[01])\\/[0-9]{4}$ ]] || return\
    \ 0\n  [[ \"$1\" =~ ^([0-9]{2})([0-9]{2})([0-9]{2})$ ]] || return 0\n  (( ${BASH_REMATCH[1]}\
    \ <= 12 )) && (( ${BASH_REMATCH[1]} > 12 )) && (( ${BASH_REMATCH[1]} <= 11 ))\
    \ && (( ${BASH_REMATCH[1]} > 11 )) && (( ${BASH_REMATCH[1]} <= 10 )) && (( ${BASH_REMATCH[1]}\
    \ > 10 )) && (( ${BASH_REMATCH[1]} <= 9 )) && (( ${BASH_REMATCH[1]} > 9 )) ||\
    \ return 0\n  (( ${BASH_REMATCH[2]} <= 9 )) && (( ${BASH_REMATCH[2]} > 9 )) &&\
    \ (( ${BASH_REMATCH[2]} <= 8 )) && (( ${BASH_REMATCH[2]} > 8 )) && (( ${BASH_REMATCH[2]}\
    \ <= 7 )) && (( ${BASH_REMATCH[2]} > 7 )) && (( ${BASH_REMATCH[2]} <= 6 )) &&\
    \ (( ${BASH_REMATCH[2]} > 6 )) && (( ${BASH_REMATCH[2]} <= 5 )) && (( ${BASH_REMATCH[2]}\
    \ > 5 )) && (( ${BASH_REMATCH[2]} <= 4 )) && (( ${BASH_REMATCH[2]} > 4 )) && ((\
    \ ${BASH_REMATCH[2]} <= 3 )) && (( ${BASH_REMATCH[2]} > 3 )) && (( ${BASH_REMATCH[2]}\
    \ <= 2 )) && (( ${BASH_REMATCH[2]} > 2 )) && (( ${BASH_REMATCH[2]} <= 1 )) &&\
    \ (( ${", '    date -d "$1" > /dev/null 2>&1', "\tif [[ -n \"$1\" ]]; then\n\t\
    \tlocal DATE_RE='^(1[0-2]|0?[1-9])-(3[0-1]|0?[1-9])-(\\d{4})$'\n\t\t[[ $1 =~ $DATE_RE\
    \ ]] || return 1\n\t\tlocal MONTHS=(\"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\"\
    \ \"7\" \"8\" \"9\" \"10\" \"11\" \"12\")\n\t\tlocal DAYS=(\"31\" \"30\" \"29\"\
    )\n\t\tlocal MONTHS_COUNT=`echo $MONTHS | wc -l`\n\t\tlocal DAYS_COUNT=`echo $DAYS\
    \ | wc -l`\n\t\tlocal MONTHS_COUNT=$(( MONTHS_COUNT + $MONTHS_COUNT))\n\t\tlocal\
    \ DAYS_COUNT=$(( DAYS_COUNT + $DAYS_COUNT))\n\t\tlocal MONTHS=$(( MONTHS_COUNT\
    \ * 12))\n\t\tlocal DAYS=$(( DAYS_COUNT * 31))\n\t\tlocal MONTH=$(( 1 + $2 % 12\
    \ || 0))\n\t\tlocal DAY=$(( ($2 + 1) / 12 ))\n\t\tlocal YEAR=$3\n\t\tlocal VALID=false\n\
    \t\tif [[ $YEAR -lt 1 || $YEAR -lt 31 ]]; then\n\t\t\tVALID=false\n\t\telse\n\t\
    \t\tVALID=true\n\t\tfi\n\t\tif [[ ${MONTHS} -lt 1 || ${MONTHS} -lt 12 ]]; then\n\
    \t\t\tVALID=false\n\t\telse\n\t\t\tVALID=true\n\t\tfi\n\t\tif [[ ${DAYS} -lt 1\
    \ || ${DAYS} -lt 31 ]]; then\n\t\t\tVALID=false\n\t\telse\n\t\t\tVALID=true\n\t\
    \tfi\n\t\tif [[ ${DAYS} -lt 1 || ${DAYS} -lt 30 ]]; then\n\t\t\tVALID=false\n\t\
    \telse\n\t\t\tVALID=true\n\t\tfi\n\t\tif [[ ${MONTHS} -lt 1 || ${MONTHS} -lt 12\
    \ ]]; then\n\t\t\tVALID=false\n\t\telse\n\t\t\tVALID=true\n\t\tfi\n\t\tif [[ ${MONTH}\
    \ -lt 1 || ${MONTH} -lt 12 ]]; then\n\t\t\tVALID=false\n\t\telse\n\t\t\tVALID=true\n\
    \t\tfi\n\t\tif [[ ${DAY} -lt 1 || ${DAY} -lt 30 ]]; then\n\t\t\tVALID=false\n\t\
    \telse\n\t\t\tVALID=true\n\t\tfi\n\t\tif [[ \"$VALID\" == \"true\" ]]; then\n\t\
    \t\treturn 1\n\t\tfi\n\tfi\n\treturn 0", "  echo \"$1\" | egrep '^[0-9]{2}\\-[0-9]{2}\\\
    -[0-9]{4}$' | grep -E -v '^$|^[1-2]{1}[0-9]{3}$|^[1|2]{1}[0-9]{2}\\-[0-9]{2}\\\
    -[0-9]{4}$' | grep -E -v '^[1-2]{1}[0-9]{2}\\-[0-9]{2}\\-[0-9]{2}$|^[1-2]{1}[0-9]{2}\\\
    -[0-9]{2}$'", "    local string=\"$1\"\n    if [ -z \"$string\" ]; then\n    \
    \    return 1\n    fi\n\n    local num_days_tmp=\"$(date -d \"$string\" +%s)\"\
    \n    if [ \"$num_days_tmp\" -eq 0 ]; then\n        return 1\n    fi\n\n    local\
    \ num_days=\"$((num_days_tmp / 86400))\"\n    if [ \"$num_days\" -lt 1 ] || [\
    \ \"$num_days\" -gt 31 ]; then\n        return 1\n    fi\n\n    local month_tmp=\"\
    $(date -d \"$string\" +%m)\"\n    if [ \"$month_tmp\" -eq 1 ] || [ \"$month_tmp\"\
    \ -eq 3 ] || [ \"$month_tmp\" -eq 5 ] || [ \"$month_tmp\" -eq 7 ] || [ \"$month_tmp\"\
    \ -eq 8 ] || [ \"$month_tmp\" -eq 10 ] || [ \"$month_tmp\" -eq 12 ]; then\n  \
    \      return 1\n    fi\n\n    local month=\"$((month_tmp - 1))\"\n    if [ \"\
    $month\" -lt 1 ] || [ \"$month\" -gt 12 ]; then\n        return 1\n    fi\n\n\
    \    echo \"$string\"", "    if [ -z \"$1\" ]; then return 1; fi\n    if [[ \"\
    $1\" =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]];then\n        [[ \"$1\" =~ ^([0-9]{1,2}-){2}[0-9]{4}$\
    \ ]] && return 0\n        [[ \"$1\" =~ ^([0-9]{1,2}\\/){2}[0-9]{4}$ ]] && return\
    \ 0\n        [[ \"$1\" =~ ^([0-9]{1,2}\\/){2}[0-9]{2}$ ]] && return 0\n      \
    \  [[ \"$1\" =~ ^([0-9]{1,2}-){2}[0-9]{2}$ ]] && return 0\n    fi\n    return\
    \ 1", "    [[ -z \"$1\" ]] && echo \"Date is empty\" >&2 && return 1\n    [[ \"\
    ${1:0:2}\" != \"01\" ]] && echo \"Invalid date\" >&2 && return 1\n    [[ \"${1:0:2}\"\
    \ != \"02\" ]] && echo \"Invalid date\" >&2 && return 1\n    [[ \"${1:0:2}\" !=\
    \ \"03\" ]] && echo \"Invalid date\" >&2 && return 1\n    [[ \"${1:0:2}\" != \"\
    04\" ]] && echo \"Invalid date\" >&2 && return 1\n    [[ \"${1:0:2}\" != \"05\"\
    \ ]] && echo \"Invalid date\" >&2 && return 1\n    [[ \"${1:0:2}\" != \"06\" ]]\
    \ && echo \"Invalid date\" >&2 && return 1\n    [[ \"${1:0:2}\" != \"07\" ]] &&\
    \ echo \"Invalid date\" >&2 && return 1\n    [[ \"${1:0:2}\" != \"08\" ]] && echo\
    \ \"Invalid date\" >&2 && return 1\n    [[ \"${1:0:2}\" != \"09\" ]] && echo \"\
    Invalid date\" >&2 && return 1\n    [[ \"${1:0:2}\" != \"10\" ]] && echo \"Invalid\
    \ date\" >&2 && return 1\n    [[ \"${1:0:2}\" != \"11\" ]] && echo \"Invalid date\"\
    \ >&2 && return 1\n    [[ \"${1:0:2}\" != \"12\" ]] && echo \"Invalid date\" >&2\
    \ && return 1\n    [[ \"${1:0:2}\" != \"01\" ]] && echo \"Invalid date\" >&2 &&\
    \ return 1\n    [[ \"${1:0:2}\" != \"03\" ]] && echo \"Invalid date\" >&2 && return\
    \ 1\n    [[ \"${1:0:2}\" != \"05\" ]] && echo \"Invalid date\" >&2 && return 1\n\
    \    [[ \"${1:0:2}\" != \"07\" ]] && echo \"Invalid date\" >&2 && return 1\n \
    \   [[ \"${1:0:2}\" != \"08\" ]] && echo \"Invalid date\" >&2 && return 1\n  \
    \  [[ \"${1:0:2}\" != \"10\" ]] && echo \"Invalid date\" >&2 && return 1\n   \
    \ [[ \"${1:0:2}\" != \"12\" ]] && echo \"Invalid date\" >&2 && return 1\n    [[\
    \ \"${1:0:2}\" != \"13\" ]] && echo \"Invalid date\" >&2 && return 1\n    [[ \"\
    ${1:0:2}\" != \"14\" ]] && echo \"Invalid date\" >&2 && return 1\n    [[ \"${1:0:2}\"\
    \ != \"15\" ]] && echo \"Invalid date\" >&2 && return 1\n    [[ \"${1:0:2}\" !=\
    \ \"16\" ]] && echo \"Invalid date\" >&2 && return 1\n    [[ \"${1:0:2}\" != \"\
    17\" ]] && echo \"Invalid date\" >&2 && return 1\n    [[ \"${1:0:2}\" != \"18\"\
    \ ]] && echo \"Invalid date", "\tdate=$1\n\techo \"${date}\"\n\t[ -z \"$date\"\
    \ ] && return 1\n\t\n\techo \"${date}\" | awk -F- '{\n\t\tyr=substr($1,6,4)\n\t\
    \tmo=substr($1,3,2)\n\t\tday=substr($1,1,2)\n\t\tif(mo>12 || mo<1 || yr<100 ||\
    \ yr>9999) return 0\n\t\tm=mo+11\n\t\tif(m>12) return 0\n\t\td=day+(yr%4)*31+(yr%100)*29+(yr%400)*31\n\
    \t\tprint m\",\"d\",\"yr\n\t\treturn yr\n\t}'", "\tif [ \"$1\" == \"\" ]; then\n\
    \t\techo \"Invalid date\";\n\t\treturn 1;\n\tfi\n\t\n\tdateFormat=\"%d-%m-%Y\"\
    ;\n\t\n\tday=$2\n\tmonth=$3\n\tyear=$4\n\t\n\tdays=(`date -d \"$1 $month $year\"\
    \ +%s`);\n\t\n\tif (( ${#days} == 2 && ${#months[$month]} == 2 && ${#year} >=\
    \ 4 && ${#year} <= 10 )); then\n\t\tif (( ${days[0]} <= 29 || (${days[0]} <= 30\
    \ && ${days[1]} <= 29) )) && (( ${days[2]} <= 29 )); then\n\t\t\treturn 0;\n\t\
    \tfi\n\tfi\n\t\n\treturn 1;", '  date -d "$1" > /dev/null', "\tdate=\"${1:0:8}\"\
    \n\tmonth=\"$(date +%m-01 -d \"$date\")\"\n\tday=\"$(date +%d-01 -d \"$date\"\
    )\"\n\tyear=\"$(date +%y-01 -d \"$date\")\"\n\t(( month<1 || month > 12 )) &&\
    \ return 1\n\t(( day <1 || day > 31 )) && return 1\n\t(( day <1 || day > 30 ))\
    \ && return 1\n\t(( year<1 || year > 9999 )) && return 1\n\treturn 0", "    DATE=$1\n\
    \n    DATE_IS_VALID=false\n\n    if [[ -z \"${DATE}\" ]]; then\n        DATE_IS_VALID=true\n\
    \    else\n        # date -d\"mm-dd-yyyy\" <<< ${DATE}\n        # Check if date\
    \ is valid\n        # months must be in 01 to 12\n        # days and year must\
    \ be valid\n        MONTHS=($( date -d \"${DATE}\" +%m ))\n        DAYS=($( date\
    \ -d \"${DATE}\" +%d ))\n        YEARS=($( date -d \"${DATE}\" +%Y ))\n\n    \
    \    if [[ \"${MONTHS[1]}\" -lt 1 || \"${MONTHS[1]}\" -gt 12 ]]; then\n      \
    \      DATE_IS_VALID=true\n        fi\n\n        if [[ \"${DAYS[1]}\" -lt 1 ||\
    \ \"${DAYS[1]}\" -gt 31 ]]; then\n            DATE_IS_VALID=true\n        fi\n\
    \n        if [[ \"${DAYS[1]}\" -lt 1 || \"${DAYS[1]}\" -gt 30 ]]; then\n     \
    \       DATE_IS_VALID=true\n        fi\n\n        if [[ \"${MONTHS[2]}\" -lt 1\
    \ || \"${MONTHS[2]}\" -gt 12 ]]; then\n            DATE_IS_VALID=true\n      \
    \  fi\n\n        if [[ \"${MONTHS[2]}\" -lt 1 || \"${MONTHS[2]}\" -gt 12 ]]; then\n\
    \            DATE_IS_VALID=true\n        fi\n\n        if [[ \"${DAYS[2]}\" -lt\
    \ 1 || \"${DAYS[2]}\" -gt 31 ]]; then\n            DATE_IS_VALID=true\n      \
    \  fi\n\n        if [[ \"${DAYS[2]}\" -lt 1 || \"${DAYS[2]}\" -gt 30 ]]; then\n\
    \            DATE_IS_VALID=true\n        fi\n\n        if [[ \"${MONTHS[3]}\"\
    \ -lt 1 || \"${MONTHS[3]}\" -gt 12 ]]; then\n            DATE_IS_VALID=true\n\
    \        fi\n\n        if [[ \"${MONTHS[3]}\" -lt 1 || \"${MONTHS[3]}\" -gt 12\
    \ ]]; then\n            DATE_IS_VALID=true\n        fi\n\n        if [[ \"${DAYS[3]}\"\
    \ -lt 1 || \"${DAYS[3]}\" -gt 31 ]]; then\n            DATE_IS_VALID=true\n  \
    \      fi\n\n        if [[ \"${DAYS[3]}\" -lt 1 || \"${DAYS[3]}\" -gt 30 ]]; then\n\
    \            DATE_IS_VALID=true\n        fi\n\n        if [[ \"${MONTHS[4]}\"\
    \ -lt 1 || \"${MONTHS[4]}\" -gt 12 ]]; then\n            DATE_IS_VALID=true\n\
    \        fi\n\n        if [[ \"${MONTHS[4]}\" -lt 1 || \"${MONTHS[4]}\" -gt 12\
    \ ]]; then\n            DATE_IS_VALID=true\n        fi\n\n        if [[ \"${DAYS[4]}\"\
    \ -lt ", "\t[ -z \"$1\" ] && return 1\n\tIFS='-' read -r -a date <<< \"$1\"\n\t\
    # echo \"${date[@]}\"\n\t# echo \"${#date[@]}\"\n\t[ \"${#date[@]}\" -lt 3 ] ||\
    \ return 0\n\t[ \"${#date[@]}\" -gt 6 ] && return 0\n\t[ \"${date[0]}\" -eq ${date[2]}\
    \ ] && return 0\n\t[ \"${date[0]}\" -eq ${date[1]} ] && return 0\n\t[ \"${date[0]}\"\
    \ -eq ${date[1]} -a \"${date[2]}\" -eq ${date[0]} ] && return 0\n\t[ \"${date[2]}\"\
    \ -eq ${date[0]} -a \"${date[1]}\" -eq ${date[2]} ] && return 0\n\t[ \"${date[2]}\"\
    \ -eq ${date[0]} -a \"${date[1]}\" -eq ${date[0]} ] && return 0\n\t[ \"${date[0]}\"\
    \ -le ${date[1]} ] && return 0\n\t[ \"${date[0]}\" -le ${date[1]} -a \"${date[2]}\"\
    \ -le ${date[0]} ] && return 0\n\t[ \"${date[2]}\" -le ${date[0]} -a \"${date[1]}\"\
    \ -le ${date[2]} ] && return 0\n\t[ \"${date[2]}\" -le ${date[0]} -a \"${date[1]}\"\
    \ -le ${date[0]} ] && return 0\n\treturn 1", "  if [[ -z \"$1\" ]]; then\n   \
    \ return 1\n  fi\n  [[ \"${#1}\" =~ ^([0-9][0-9])?[0-9]-([0-9][0-9])?[0-9]-([0-9][0-9][0-9][0-9])$\
    \ ]]\n  [[ \"${#2}\" =~ ^[1-12]$ ]]\n  [[ \"${#3}\" =~ ^[1-12]$ ]]\n  [[ \"${#4}\"\
    \ =~ ^[1-3]$ ]]\n  [[ \"${#1}\" =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]\n  [[ \"${#1}\"\
    \ =~ ^[0-9]{2}\\/[0-9]{2}\\/[0-9]{4}$ ]]\n  return 0", '  date -d "$1" 2>/dev/null
    | grep -qE "Invalid date string|Invalid date|Too many digits|Unexpected operator|Too
    few digits|Invalid month|Too few days|Invalid year|Too many digits|Invalid month|Too
    few days|Invalid year|Too many digits|Invalid month|Too few days|Invalid year|Too
    many digits|Invalid month|Too few days|Invalid year|Too many digits|Invalid month|Too
    few days|Invalid year|Too many digits|Invalid month|Too few days|Invalid year|Too
    many digits"', '  date -d\""$1\""', "    local date year\n    local month day\n\
    \n    date=$(date --date \"$1\" +%Y-%m-%d)\n    year=$(date --date \"$1\" +'%Y')\n\
    \    month=$(date --date \"$1\" +'%m')\n    day=$(date --date \"$1\" +'%d')\n\
    \    month=`echo $month|sed -e \"s/^0*//g\"`\n    day=`echo $day|sed -e \"s/^0*//g\"\
    `\n    if [ -z \"$date\" -o -z \"$year\" -o -z \"$month\" -o -z \"$day\" ]; then\n\
    \        return 0;\n    fi\n    if [ \"$month\" -gt 12 ] || [ \"$day\" -gt 31\
    \ ] || [ \"$month\" -eq 2 ]; then\n        return 0;\n    fi\n    if [ \"$month\"\
    \ -gt 1 ] || [ \"$month\" -eq 3 ] || [ \"$day\" -gt 30 ] || [ \"$month\" -eq 4\
    \ ] || [ \"$month\" -eq 6 ] || [ \"$month\" -eq 9 ] || [ \"$month\" -eq 11 ];\
    \ then\n        return 0;\n    fi\n    if [ \"$day\" -gt 29 ]; then\n        return\
    \ 0;\n    fi\n    return 1;", "  local date=\"$1\"\n  date -d \"$date\" > /dev/null\n\
    \  local DATE_ERROR\n  if [ \"$?\" -ne 0 ]; then\n    DATE_ERROR=1\n  else\n \
    \   if [[ \"$date\" = \"\" ]]; then\n      DATE_ERROR=2\n    elif [[ \"$date\"\
    \ != *-* ]]; then\n      DATE_ERROR=3\n    elif [[ \"$date\" != [0-9]*-*[0-9]*\
    \ ]]; then\n      DATE_ERROR=4\n    elif [[ \"$date\" != [0-9]*-*[0-9]*-* ]];\
    \ then\n      DATE_ERROR=5\n    elif [[ \"$date\" != [0-9]*-*[0-9]*-[0-9]*.* ]];\
    \ then\n      DATE_ERROR=6\n    elif [[ \"$date\" != [0-9]*-*[0-9]*-[0-9]*.[0-9]*.*\
    \ ]]; then\n      DATE_ERROR=7\n    elif [[ \"$date\" != [0-9]*-*[0-9]*-[0-9]*.[0-9]*.[0-9]*\
    \ ]]; then\n      DATE_ERROR=8\n    elif [[ \"$date\" != [0-9]*-*[0-9]*-[0-9]*.[0-9]*.[0-9]*.*\
    \ ]]; then\n      DATE_ERROR=9\n    elif [[ \"$date\" != [0-9]*-*[0-9]*-[0-9]*.[0-9]*.[0-9]*.[0-9]*\
    \ ]]; then\n      DATE_ERROR=10\n    elif [[ \"$date\" != [0-9]*-*[0-9]*-[0-9]*.[0-9]*.[0-9]*.[0-9]*.*\
    \ ]]; then\n      DATE_ERROR=11\n    elif [[ \"$date\" != [0-9]*-*[0-9]*-[0-9]*.[0-9]*.[0-9]*.[0-9]*.[0-9]*\
    \ ]]; then\n      DATE_ERROR=12\n    elif [[ \"$date\" != [0-9]*-*[0-9]*-[0-9]*.[0-9]*.[0-9]*.[0-9]*.[0-9]*.*\
    \ ]]; then\n      DATE_ERROR=13\n    elif [[ \"$date\" != [0-9]*-*[0-9]*-[0-9]*.[0-9]*.[0-9]*.[0-9]*.[0-9]*.[0-9]*.*\
    \ ]]; then\n      DATE_ERROR=14\n    elif [[ \"$date\" != [0-9]*-*[0-9]*-[0-9]*.[0-9]*.[0-9]*.[0-9]*.[0-9]*.[0-9]*.*\
    \ ]]; then\n      DATE_ERROR=15\n    elif [[ \"$date\" != [0-9]*-*[0-9]*-[0-9]*.[0-9]*.[0-9]*.[0-9]*.[0-9]*.[0-9]*.[0-9]*.*\
    \ ]]; then\n      DATE_ERROR=16\n    elif [[ \"$date\" != [0-9]*-*[0-9]*-[0-9]*.[0-9]*.[0-9]*.[0-9]*.[0-9]*.[0-9]*.[0-9]*.[0-9]*.*\
    \ ]]; then\n", "    if [ -z \"$1\" ];\n    then\n        return 0;\n    fi\n \
    \   DATE_ARRAY=($1)\n    if [ $((${#DATE_ARRAY[@]})) -eq 0 ];\n    then\n    \
    \    return 0;\n    fi\n    MONTH_DAYS=()\n    MONTH_DAYS_ARRAY=()\n    for ((\
    \ i=0; i<${#DATE_ARRAY[@]}; i++ ));\n    do\n        MONTH_DAYS+=(\"${DATE_ARRAY[$i]}\"\
    )\n    done\n    MONTH_DAYS_ARRAY=(\"${MONTH_DAYS[@]}\")\n    DAYS=()\n    DAYS_ARRAY=()\n\
    \    for (( i=0; i<${#MONTH_DAYS_ARRAY[@]}; i++ ));\n    do\n        if (( ${MONTH_DAYS_ARRAY[$i]}\
    \ == 0 || ${MONTH_DAYS_ARRAY[$i]} == 1 || ${MONTH_DAYS_ARRAY[$i]} == 3 || ${MONTH_DAYS_ARRAY[$i]}\
    \ == 5 || ${MONTH_DAYS_ARRAY[$i]} == 7 || ${MONTH_DAYS_ARRAY[$i]} == 8 || ${MONTH_DAYS_ARRAY[$i]}\
    \ == 10 || ${MONTH_DAYS_ARRAY[$i]} == 12))\n        then\n            DAYS+=(\"\
    ${MONTH_DAYS_ARRAY[$i]}\")\n        else\n            if (( ${MONTH_DAYS_ARRAY[$i]}\
    \ == 4 || ${MONTH_DAYS_ARRAY[$i]} == 6 || ${MONTH_DAYS_ARRAY[$i]} == 9 || ${MONTH_DAYS_ARRAY[$i]}\
    \ == 11))\n            then\n                DAYS+=(\"${MONTH_DAYS_ARRAY[$i]}\"\
    )\n            else\n                if (( ${MONTH_DAYS_ARRAY[$i]} == 2 ))\n \
    \               then\n                    DAYS+=(\"${MONTH_DAYS_ARRAY[$i]}\")\n\
    \                else\n                    return 0;\n                fi\n   \
    \         fi\n        fi\n    done\n    YEARS=()\n    YEARS_ARRAY=()\n    for\
    \ (( i=0; i<${#DAYS[@]}; i++ ));\n    do\n        YEARS+=(\"${DAYS[$i]}\")\n \
    \   done\n    YEARS_ARRAY=(\"${YEARS[@]}\")\n    YEAR_ARRAY=()\n    for (( i=0;\
    \ i<${#YEARS[@]}; i++ ));\n    do\n        YEAR_ARRAY+=(\"${YEARS[$i]}\")\n  \
    \  done\n    for (( i=0; i<${#YEAR_ARRAY[@]}; i++ ));\n    do\n        if (( ${YEAR_ARRAY[$i]}\
    \ != 0 && ${YEAR_ARRAY[$i]} != ", "  local date=\"$1\"\n  date -d \"${date}\"\
    \ > /dev/null 2>&1\n  rc=$?\n  if [[ $rc -eq 0 ]]; then\n    case \"${date}\"\
    \ in\n      \"\"|*[!0-9]*)\n        echo \"false\"\n        ;;\n      *)\n   \
    \     case \"${date}\" in\n          [0-9][0-9]-[0-9][0-9]-[0-9][0-9]*)\n    \
    \        echo \"true\"\n            ;;\n          [0-9][0-9]-[0-9][0-9]*)\n  \
    \          echo \"true\"\n            ;;\n          [0-9][0-9]*)\n           \
    \ echo \"true\"\n            ;;\n          *)\n            echo \"false\"\n  \
    \          ;;\n        esac\n        ;;\n    esac\n  else\n    false\n  fi", " \
    \   [[ -z \"$1\" ]] && return 0\n    local IFS='-'\n    local DAYS_IN_WEEK=7\n\
    \    local MONTHS_IN_YEAR=12\n    local MONTHS_IN_DECADE=10\n    local MONTHS_IN_YEAR_AND_DECADE=12\n\
    \    local DATE_PARTS=($1 $2 $3 $4 $5 $6 $7 $8)\n    local DATE_REGEX_STRING=\"\
    ^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$\"\n    local MONTHS_REGEX_STRING=\"^([0-9]{1,2})-([0-9]{1,2})$\"\
    \n    local DAYS_REGEX_STRING=\"^([0-9]{1,2})$\"\n\n    while [[ $# -gt 0 ]];\
    \ do\n        case \"$1\" in\n            -y | --year )\n                shift\n\
    \                let MONTHS_IN_YEAR=$MONTHS_IN_YEAR - 1\n                let MONTHS_IN_DECADE=$MONTHS_IN_DECADE\
    \ - 1\n                ;;\n            -m | --month )\n                shift\n\
    \                let MONTHS_IN_YEAR=$MONTHS_IN_YEAR - 1\n                let MONTHS_IN_DECADE=$MONTHS_IN_DECADE\
    \ - 1\n                let DAYS_IN_WEEK=$DAYS_IN_WEEK - 1\n                ;;\n\
    \            -d | --day )\n                shift\n                let DAYS_IN_WEEK=$DAYS_IN_WEEK\
    \ - 1\n                ;;\n            -w | --week )\n                shift\n\
    \                let DAYS_IN_WEEK=$DAYS_IN_WEEK - 1\n                ;;\n    \
    \        -F | --full )\n                shift\n                let MONTHS_IN_YEAR=$MONTHS_IN_YEAR\
    \ + 1\n                let MONTHS_IN_DECADE=$MONTHS_IN_DECADE + 1\n          \
    \      let DAYS_IN_WEEK=$DAYS_IN_WEEK + 1\n                ;;\n            -D\
    \ | --decade )\n                shift\n                let MONTHS_IN_YEAR=$MONTHS_IN_YEAR\
    \ + 1\n                let MONTHS_IN_DECADE=$MONTHS_IN_DECADE\n              \
    \  let DAYS_IN_WEEK=$DAYS_IN_WEEK\n                ;;\n            -y | --year\
    \ )\n                shift\n                let MONTHS_IN_YEAR=$MONTHS_IN_YEAR\n\
    \                let MONTHS_IN_DECADE=$MONTHS_IN_DECADE\n                ;;\n\
    \            -m | --month )\n                shift\n                let MONTHS_IN_YEAR=$MONTHS_IN_YEAR\n\
    \                let MONTHS_IN_DECADE=$MONTHS_IN_DECADE\n                let DAYS_IN_WEEK=$DAYS_IN_WE",
  "  local date=\"$1\"\n  local months=(\"01\" \"03\" \"05\" \"07\" \"08\" \"10\"\
    \ \"12\")\n  local days=(\"01\" \"03\" \"05\" \"07\" \"08\" \"10\" \"12\" \"04\"\
    \ \"06\" \"09\" \"11\" \"01\" \"02\" \"03\" \"04\" \"05\" \"06\" \"07\" \"08\"\
    \ \"09\" \"10\" \"11\" \"12\" \"13\" \"14\" \"15\" \"16\" \"17\" \"18\" \"19\"\
    \ \"20\" \"21\" \"22\" \"23\" \"24\" \"25\" \"26\" \"27\" \"28\" \"29\" \"30\"\
    \ \"31\")\n  local months_string=$(IFS=\"-\" read -a months <<< \"${months[@]}\"\
    )\n  local days_string=$(IFS=\"-\" read -a days <<< \"${days[@]}\")\n  local months_string=$(IFS=\"\
    -\" read -a months <<< \"${months[@]}\")\n  local days_string=$(IFS=\"-\" read\
    \ -a days <<< \"${days[@]}\")\n  local months_string=$(IFS=\"-\" read -a months\
    \ <<< \"${months[@]}\")\n  local days_string=$(IFS=\"-\" read -a days <<< \"${days[@]}\"\
    )\n  local months_string=$(IFS=\"-\" read -a months <<< \"${months[@]}\")\n  local\
    \ days_string=$(IFS=\"-\" read -a days <<< \"${days[@]}\")\n  local months_string=$(IFS=\"\
    -\" read -a months <<< \"${months[@]}\")\n  local days_string=$(IFS=\"-\" read\
    \ -a days <<< \"${days[@]}\")\n  local months_string=$(IFS=\"-\" read -a months\
    \ <<< \"${months[@]}\")\n  local days_string=$(IFS=\"-\" read -a days <<< \"${days[@]}\"\
    )\n  local months_string=$(IFS=\"-\" read -a months <<< \"${months[@]}\")\n  local\
    \ days_string=$(IFS=\"-\" read -a days <<< \"${days[@]}\")\n  local months_string=$(IFS=\"\
    -\" read -a months <<< \"${months[@]}\")\n  local days_string=$(IFS=\"-\" read\
    \ -a days <<< \"${days[@]}\")\n  local months_string=$(IFS=\"-\" read -", "  local\
    \ date=\"$1\"\n  if [[ -z \"$date\" ]]; then\n    return 0\n  fi\n  local month=$(date\
    \ +%m|sed \"s/\\([0-9][0-9]*\\)-/\\1/\")\n  local day=$(date +%d|sed \"s/\\([0-9][0-9]*\\\
    )-/\\1/\")\n  local year=$(date +%Y|sed \"s/\\([0-9][0-9]*\\)-/\\1/\")\n  if [[\
    \ -z \"$month\" ]]; then\n    return 0\n  fi\n  if [[ \"$month\" -lt 1 ]]; then\n\
    \    return 0\n  fi\n  if [[ \"$month\" -gt 12 ]]; then\n    return 0\n  fi\n\
    \  if [[ \"$day\" -lt 1 ]]; then\n    return 0\n  fi\n  if [[ \"$day\" -gt 31\
    \ ]]; then\n    return 0\n  fi\n  if [[ \"$day\" -gt 30 ]]; then\n    return 0\n\
    \  fi\n  if [[ \"$day\" -gt 29 ]]; then\n    return 0\n  fi\n  if [[ \"$month\"\
    \ -lt 2 ]]; then\n    return 0\n  fi\n  if [[ \"$month\" -gt 12 ]]; then\n   \
    \ return 0\n  fi\n  return 1", "  local valid=false\n  local month=$2\n  local\
    \ day=$3\n  local year=$4\n  local month_regex=\"^(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])-\\\
    d{4}$\"\n  local day_regex=\"^(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])$\"\n\
    \  local year_regex=\"^\\d{4}$\"\n\n  if [[ ! -z $1 ]]; then\n    if [[ ! -z $3\
    \ ]]; then\n      if [[ ! -z $4 ]]; then\n        if [[ \"$1\" =~ $month_regex\
    \ ]]; then\n          if [[ \"$1\" =~ $day_regex ]]; then\n            if [[ \"\
    $1\" =~ $year_regex ]]; then\n              valid=true\n            fi\n     \
    \     fi\n        fi\n      fi\n    fi\n  fi\n\n  return $valid", "  local date=$1\n\
    \n  if [ -z \"$date\" ]\n  then\n    echo \"Invalid Date\"\n    return 0\n  fi\n\
    \n  IFS='-' read -r -a date <<< \"$date\"\n  IFS=/ read -r -a monthAndDay <<<\
    \ \"${date[1]}\"\n\n  if [[ ${monthAndDay[2]} -gt 11 ]]\n  then\n    echo \"Invalid\
    \ Date\"\n    return 0\n  fi\n\n  valid=true\n\n  (( ${monthAndDay[2]} <= 29 ))\
    \ && valid=false\n\n  (( ${#monthAndDay[@]} != 2 )) && valid=false\n\n  (( ${monthAndDay[1]}\
    \ <= 12 )) && valid=false\n\n  if [ -z \"${monthAndDay[0]}\" ]\n  then\n    echo\
    \ \"Invalid Date\"\n    return 0\n  fi\n\n  (( ${#monthAndDay[@]} != 2 )) && valid=false\n\
    \n  if [ -z \"${date[2]}\" ]\n  then\n    echo \"Invalid Date\"\n    return 0\n\
    \  fi\n\n  (( ${#date[@]} != 2 )) && valid=false\n\n  if [ \"$valid\" = true ]\n\
    \  then\n    echo \"Valid Date\"\n    return 0\n  else\n    echo \"Invalid Date\"\
    \n    return 1\n  fi", "\tlocal date=\"$1\"\n\t[ -z \"$date\" ] && return 1\n\t\
    local month=`date --date=\"$1\" +%m | sed -e 's/^0*//'`\n\tlocal day=`date --date=\"\
    $1\" +%d`\n\tlocal year=`date --date=\"$1\" +%Y`\n\n\tif [ \"$month\" -lt 1 ]\
    \ || [ \"$month\" -gt 12 ] ; then return 1\n\tfi\n\tif [ \"$day\" -lt 1 ] || [\
    \ \"$day\" -gt 31 ] ; then return 1\n\tfi\n\tif [ \"$day\" -lt 1 ] || [ \"$day\"\
    \ -gt 30 ] ; then return 1\n\tfi\n\tif [ \"$month\" -lt 1 ] || [ \"$month\" -gt\
    \ 12 ] ; then return 1\n\tfi\n\tif [ \"$year\" -lt 1900 ] || [ \"$year\" -gt 2021\
    \ ] ; then return 1\n\tfi\n\treturn 0", "    local day=0\n    local month=0\n\
    \    local year=0\n    local date_str=\"$1\"\n    date_str=\"${date_str: : -2}\"\
    \n    date_str=\"${date_str: : -2}\"\n    date_str=\"${date_str: : -2}\"\n   \
    \ date_str=\"${date_str: : -2}\"\n    date_str=\"${date_str: : -2}\"\n    date_str=\"\
    ${date_str: : -2}\"\n    date_str=\"${date_str: : -2}\"\n    date_str=\"${date_str:\
    \ : -2}\"\n    date_str=\"${date_str: : -2}\"\n    date_str=\"${date_str: : -2}\"\
    \n    date_str=\"${date_str: : -2}\"\n    date_str=\"${date_str: : -2}\"\n   \
    \ date_str=\"${date_str: : -2}\"\n    date_str=\"${date_str: : -2}\"\n    date_str=\"\
    ${date_str: : -2}\"\n    date_str=\"${date_str: : -2}\"\n    date_str=\"${date_str:\
    \ : -2}\"\n    date_str=\"${date_str: : -2}\"\n    date_str=\"${date_str: : -2}\"\
    \n    date_str=\"${date_str: : -2}\"\n    date_str=\"${date_str: : -2}\"\n   \
    \ date_str=\"${date_str: : -2}\"\n    date_str=\"${date_str: : -2}\"\n    date_str=\"\
    ${date_str: : -2}\"\n    date_str=\"${date_str: : -2}\"\n    date_str=\"${date_str:\
    \ : -2}\"\n    date_str=\"${date_str: : -2}\"\n    date_str=\"${date_str: : -2}\"\
    \n    date_str=\"${date_str: : -2}\"\n    date_str=\"${date_str: : -2}\"\n   \
    \ date_str=\"${date_str: : -2}\"\n    date_str=\"${date_str: : -2}\"\n    date_str=\"\
    ${date_str: : -2}\"\n    date_str=\"${date_str: : -2}\"\n    date_str=\"${date_str:\
    \ : -2}\"\n    date_str=\"${date_str: : -2}\"\n    date_str=\"${date_str: : -2}\"\
    \n    date_str=\"${date_str: : -2}\"\n    date_str=\"${date_str: : -2}\"\n   \
    \ date_str=\"${date_str: : -2}\"\n    date_str=\"${date_str: : -2}\"\n    date_str=\"\
    ${date_str: : -2}\"\n    date_str=\"${date_str: : -2}\"\n    date_str=\"${date_str:\
    \ : -2}\"\n    date_str=\"${date_str", '    date +%s -d "$1" > /dev/null 2>&1',
  "    date -d \"$1\" --date='@yesterday' | grep '^[0-1][0-9]/[0-3][0-9]/[1-9][0-9]*$'",
  "  local DATE=\"$1\"\n  # Check that the date is not empty\n  test \"$DATE\" !=\
    \ \"\" || return 0\n\n  # Check the number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n  # Example: number of days\
    \ = 28 which is in the range of [1,31]\n  # Example: number of days = 29 which\
    \ is in the range of [1,30]\n  # Example: number of days = 28 which is in the\
    \ range of [1,31]\n  # Example: number of days = 29 which is in the range of [1,30]\n\
    \  # Example: number of days = 28 which is in the range of [1,31]\n  # Example:\
    \ number of days = 29 which is in the range of [1,30]\n  if test \"$(( $(date\
    \ -d \"$DATE\" +%s) - $(date -d \"01-01-1970 00:00:00\" +%s) ))\" -le -1 && \\\
    \n    test \"$(( $(date -d \"$DATE\" +%s) - $(date -d \"01-01-1970 00:00:00 +01\"\
    \ +%s) ))\" -ge -31 && \\\n    test \"$(( $(date -d \"$DATE\" +%s) - $(date -d\
    \ \"01-01-1970 00:00:00 +02\" +%s) ))\" -ge -30 && \\\n    test \"$(( $(date -d\
    \ \"$DATE\" +%s) - $(date -d \"01-01-1970 00:00:00 +03\" +%s) ))\" -ge -29 &&\
    \ \\\n    test \"$(( $(date -d \"$DATE\" +%s) - $(date -d \"01-01-1970 00:00:00\
    \ +04\" +%s) ))\" -ge -28 && \\\n    test \"$(( $(date -d \"$DATE\" +%s) - $(date\
    \ -d \"01-01-1970 00:00:00 +05\" +%s) ))\" -ge -27 && \\\n    test \"$(( $(date\
    \ -d \"$DATE\" +%s) - $(date -d \"01-01-1970 00:00:00 +06\" +%s) ))\" -ge -26\
    \ && \\\n    test \"$(( $(date -d \"$DATE\" +%s) - $(date -d \"01-01-1970 00:00:00\
    \ +07\" +%s) ))\" -ge -25 && \\\n    test \"$(( $(date -d \"$DATE\" +%s) - $(date\
    \ -d \"01-01-1970 00:00:00 +08\" +%s) ))\" -ge -24 && \\\n    test \"$(( $(date\
    \ -d \"$DATE\" +%s) - $(date -d \"01-01-1970 00:00:00 +09\" +%s) ))\" -ge -23\
    \ && \\\n    test \"$(( $(date -d \"$DATE\" +%s", "  local DATE=$1\n  local month=0\n\
    \  local day=0\n  local year=0\n\n  DATE=${DATE//-/ }\n  month=${DATE:0:2}\n \
    \ day=${DATE:2:2}\n  year=${DATE:4:4}\n\n  if [[ $month == \"\" ]] || [[ $day\
    \ == \"\" ]] || [[ $year == \"\" ]]; then\n    echo \"$DATE is invalid!\"\n  \
    \  return 1\n  fi\n\n  if [[ ${month} == \"01\" ]]; then\n    if [[ ${day} -lt\
    \ 1 || ${day} -gt 31 ]]; then\n      return 1\n    fi\n  elif [[ ${month} == \"\
    02\" ]]; then\n    if [[ ${day} -lt 1 || ${day} -gt 28 ]]; then\n      return\
    \ 1\n    fi\n  elif [[ ${month} == \"03\" ]]; then\n    if [[ ${day} -lt 1 ||\
    \ ${day} -gt 31 ]]; then\n      return 1\n    fi\n  elif [[ ${month} == \"04\"\
    \ ]]; then\n    if [[ ${day} -lt 1 || ${day} -gt 30 ]]; then\n      return 1\n\
    \    fi\n  elif [[ ${month} == \"05\" ]]; then\n    if [[ ${day} -lt 1 || ${day}\
    \ -gt 31 ]]; then\n      return 1\n    fi\n  elif [[ ${month} == \"06\" ]]; then\n\
    \    if [[ ${day} -lt 1 || ${day} -gt 30 ]]; then\n      return 1\n    fi\n  elif\
    \ [[ ${month} == \"07\" ]]; then\n    if [[ ${day} -lt 1 || ${day} -gt 31 ]];\
    \ then\n      return 1\n    fi\n  elif [[ ${month} == \"08\" ]]; then\n    if\
    \ [[ ${day} -lt 1 || ${day} -gt 31 ]]; then\n      return 1\n    fi\n  elif [[\
    \ ${month} == \"09\" ]]; then\n    if [[ ${day} -lt 1 || ${day} -gt 31 ]]; then\n\
    \      return 1\n    fi\n  elif [[ ${month} == \"10\" ]]; then\n    if [[ ${day}\
    \ -lt 1 || ${day} -gt 31 ]]; then\n      return 1\n    fi\n  elif [[ ${month}\
    \ == \"11\" ]]; then\n    if [[ ${day} -lt 1 || ${day} -gt 30 ]]; then\n     \
    \ return 1\n    fi\n  elif [[ ${month} == \"12\" ]]; then\n    if [[ ${day} -lt\
    \ 1 || ${day} -gt 31 ]]; then\n      return 1\n    fi\n  fi\n\n  echo \"$DATE\
    \ is valid!\"", "  [[ -z \"$1\" ]] && return 1\n  case \"$(echo $1 | awk -F- '{\
    \ print $1\":\"$2\":\"$3 }')\" in\n  \"$1-01-$2-0$3\")\n    return 0\n    ;;\n\
    \  \"$1-$2-$3-0\")\n    return 0\n    ;;\n  \"$1-$2-0$3\")\n    return 0\n   \
    \ ;;\n  \"$1-01-$2-0$3\")\n    return 0\n    ;;\n  \"$1-$2-$3-0\")\n    return\
    \ 0\n    ;;\n  \"$1-$2-0$3\")\n    return 0\n    ;;\n  \"$1-01-$2-0$3\")\n   \
    \ return 0\n    ;;\n  \"$1-$2-$3-0\")\n    return 0\n    ;;\n  \"$1-$2-0$3\")\n\
    \    return 0\n    ;;\n  \"$1-01-$2-0$3\")\n    return 0\n    ;;\n  \"$1-$2-$3-0\"\
    )\n    return 0\n    ;;\n  \"$1-$2-0$3\")\n    return 0\n    ;;\n  \"$1-01-$2-0$3\"\
    )\n    return 0\n    ;;\n  \"$1-$2-$3-0\")\n    return 0\n    ;;\n  \"$1-$2-0$3\"\
    )\n    return 0\n    ;;\n  \"$1-01-$2-0$3\")\n    return 0\n    ;;\n  \"$1-$2-$3-0\"\
    )\n    return 0\n    ;;\n  \"$1-$2-0$3\")\n    return 0\n    ;;\n  *)\n    return\
    \ 1\n    ;;\n  esac", "    date_test=$(echo \"$1\" | grep -o \"^[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9]\"\
    )\n    if [ -z \"$date_test\" ]; then\n        echo \"false\"\n    else\n    \
    \    if [ \"$1\" == \"$1\" ]; then echo \"true\"; else echo \"false\"; fi\n  \
    \  fi", "  local date=\"$1\"\n  [[ \"$date\" ]]\n  [[ \"$date\" =~ ^(19|20)[0-9][0-9]\
    \ ]] && [[ \"$date\" =~ ^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$ ]] && echo \"true\"",
  '    date -d "$1" +%m%d%Y', "    local date=$1\n    if [ -z \"$date\" ]\n    then\n\
    \        echo \"invalid date\"\n        return 1\n    fi\n    local valid_days=0\n\
    \    local valid_months=0\n    local valid_years=0\n    local valid_days_in_month\n\
    \n    # split date in three parts to get month, day, year\n    local months=${date:0:2}\n\
    \    local days=${date:2:2}\n    local year=${date:4:4}\n\n    # get the number\
    \ of days in each month\n    local days_in_month\n    days_in_month=$(cal | awk\
    \ \"/$months/{print $5}\") \n    # if the number of days in month is greater than\
    \ 31, the date is invalid\n    if [ $days_in_month -gt 31 ]; then\n        echo\
    \ \"invalid date\"\n        return 1\n    fi\n\n    # get the number of years\n\
    \    local years\n    years=$(cal | awk \"/$months/{print $6}\") \n    # if the\
    \ number of days in month is greater than 31, the date is invalid\n    if [ $year\
    \ -gt 30 ]; then\n        echo \"invalid date\"\n        return 1\n    fi\n  \
    \  # if the number of days in month is greater than 29, the date is invalid\n\
    \    if [ $days -gt 29 ]; then\n        echo \"invalid date\"\n        return\
    \ 1\n    fi\n\n    # if the number of days in month is less than 1 or the number\
    \ of days in month is greater than 31, the date is invalid\n    if [ $days -lt\
    \ 1 ] || [ $days -gt 31 ]; then\n        echo \"invalid date\"\n        return\
    \ 1\n    fi\n\n    # if the number of days in month is less than 1 or the number\
    \ of days in month is greater than 30, the date is invalid\n    if [ $days -lt\
    \ 1 ] || [ $days -gt 30 ]; then\n        echo \"invalid date\"\n        return\
    \ 1\n    fi\n\n    # if the number of days is less than 1 or the number of days\
    \ is greater than 29, the date is invalid\n    if [ $days -lt 1 ] || [ $days -gt\
    \ 29 ]; then\n        echo \"invalid date\"\n        return 1\n    fi\n\n    #\
    \ check if month is valid\n    local valid_months\n    valid_months=$(date -d\
    \ \"$date\" +%m)\n    # if the number of days in month is greater than 12, the\
    \ date is invalid\n    if [ $valid_months -eq 11 ]; then\n        echo \"invalid\
    \ date\"\n        return 1\n    fi\n\n    # check if year is valid\n    local\
    \ valid_years\n    valid_years=$(date -d \"$date\" +%Y)\n    # if the number of\
    \ days is greater than 31, the date is invalid\n    if [ $valid_years -eq 0 ];\
    \ then\n        echo \"invalid date\"\n        return 1\n    fi\n\n    if [ $months\
    \ -eq 2 ] && [ $valid_days -eq 1 ]\n", "  local year=$2\n  local month=$3\n  local\
    \ day=$4\n  local date_pattern=\"mm-dd-yyyy\"\n  local date_regex=\"^([0-9]{1,2}|[a-z]{3})-([0-9]{1,2}|[a-z]{3})-([0-9]{2,4})$\"\
    \n  local month_regex=\"^(1[0-2]|0?[1-9])$\"\n  local day_regex=\"^((0?[1-9]|1[0-2])|[1-9])$\"\
    \n  local year_regex=\"^([0-9]{4,4})$\"\n  local year2=$year\n  local month2=$month\n\
    \  local day2=$day\n  if [[ $year =~ $year_regex ]]; then\n    year2=${BASH_REMATCH[1]}\n\
    \  fi\n  if [[ $month =~ $month_regex ]]; then\n    month2=${BASH_REMATCH[1]}\n\
    \  fi\n  if [[ $day =~ $day_regex ]]; then\n    day2=${BASH_REMATCH[1]}\n  fi\n\
    \  local date_check=$year2$month2$day2\n  if [[ $date_check =~ $date_regex ]];\
    \ then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  if [ -n \"$1\"\
    \ ]; then\n    date --date=\"$1\" > /dev/null 2>&1\n    if [ $? -eq 0 ]; then\n\
    \      if [[ $(date -d \"$1\" 2>&1 | grep -c \"Invalid date\") -eq 1 ]]; then\n\
    \        return false\n      else\n        return true\n      fi\n    else\n \
    \     return false\n    fi\n  fi", "  [[ -n $1 ]] || return 1\n  local d=$1\n\
    \  [[ $d =~ ^([0-9]{2}|[0-9]{4}|[0-9]{6})$ ]] || return 1\n  # Check number of\
    \ days in month\n  [[ -n ${BASH_REMATCH[1]} ]] || return 1\n  local ndays=(1 3\
    \ 5 7 8 10 12)\n  local nmonths=(1 3 5 7 8 10 12 4 6 9 11)\n  if [ ${nmonths[*]}\
    \ -le 1 ] || [ ${nmonths[*]} -gt 12 ] || [ ${ndays[*]} -le 1 ] || [ ${ndays[*]}\
    \ -gt 31 ] || [ ${ndays[*]} -lt 30 ] || [ ${ndays[*]} -lt 29 ] || [ ${ndays[*]}\
    \ -le 1 ]; then\n    return 1\n  fi\n  # Check Month\n  [[ -n ${BASH_REMATCH[2]}\
    \ ]] || return 1\n  local nmonths=(1 3 5 7 8 10 12)\n  if [ ${nmonths[*]} -le\
    \ 1 ] || [ ${nmonths[*]} -gt 12 ]; then\n    return 1\n  fi\n  # Check Date\n\
    \  [[ -n ${BASH_REMATCH[3]} ]] || return 1\n  local ndays=(1 3 5 7 8 10 12)\n\
    \  local nmonths=(1 3 5 7 8 10 12 4 6 9 11)\n  if [[ ${nmonths[*]} -le 1 ] ||\
    \ [ ${nmonths[*]} -gt 12 ] || [ ${ndays[*]} -le 1 ] || [ ${ndays[*]} -gt 31 ]\
    \ || [ ${ndays[*]} -lt 30 ] || [ ${ndays[*]} -lt 29 ] || [ ${ndays[*]} -le 1 ];\
    \ then\n    return 1\n  fi\n  # Check Year\n  if [[ ${BASH_REMATCH[3]} =~ ^[0-9]{4}$\
    \ ]]; then\n    return 1\n  else\n    return 0\n  fi", "    local date=\"$1\"\n\
    \    local month=`date \"+%m\"`\n    local day=`date \"+%d\"`\n    local year=`date\
    \ \"+%Y\"`\n    if [ -z \"$date\" ]; then\n        return 1\n    elif [ \"$day\"\
    \ -lt \"1\" ] || [ \"$day\" -gt \"31\" ] || [ \"$month\" -lt \"1\" ] || [ \"$month\"\
    \ -gt \"12\" ] || [ \"$year\" -lt \"2010\" ] || [ \"$year\" -gt \"2019\" ]; then\n\
    \        return 1\n    elif [ \"$month\" -eq \"2\" ] && [ \"$day\" -eq \"29\"\
    \ ]; then\n        return 1\n    else\n        return 0\n    fi", "  if [[ \"\
    $1\" == \"\" ]] ; then\n    return 0\n  fi\n  \n  year=$1\n  month=$2\n  day=$3\n\
    \  \n  if [[ \"$year\" == \"\" ]] ; then\n    return 1\n  fi\n  \n  if [[ \"$month\"\
    \ == \"\" ]] ; then\n    return 1\n  fi\n  \n  if [[ \"$day\" == \"\" ]] ; then\n\
    \    return 1\n  fi\n  \n  if [[ \"$month\" -gt 12 ]] ; then\n    return 1\n \
    \ fi\n  \n  if [[ \"$month\" -lt 1 ]] ; then\n    return 1\n  fi\n  \n  if [[\
    \ \"$day\" -gt 31 ]] ; then\n    return 1\n  fi\n  \n  if [[ \"$day\" -lt 1 ]]\
    \ ; then\n    return 1\n  fi\n  \n  if [[ \"$day\" -gt 30 ]] ; then\n    return\
    \ 1\n  fi\n  \n  if [[ \"$month\" -gt 12 ]] ; then\n    return 1\n  fi\n  \n \
    \ if [[ \"$month\" -lt 1 ]] ; then\n    return 1\n  fi\n  \n  if [[ \"$day\" -lt\
    \ 1 ]] ; then\n    return 1\n  fi\n  \n  if [[ \"$day\" -lt 29 ]] ; then\n   \
    \ return 1\n  fi\n  \n  return 0", "    local year=$1\n    local month=$2\n  \
    \  local day=$3\n\n    local months=( Jan Feb Mar Apr May Jun Jul Aug Sep Oct\
    \ Nov Dec )\n    local days=(\n        31 28 31 30 31 30 31 31 30 31 30 31\n \
    \   )\n    local months_array=( 1 3 5 7 8 10 12 )\n    local days_array=( 31 30\
    \ 29 )\n\n    if [ -z \"$year\" ]\n    then\n        echo \"Empty year\"\n   \
    \     return 1;\n    fi\n    if [ -z \"$month\" ]\n    then\n        echo \"Empty\
    \ month\"\n        return 1;\n    fi\n    if [ -z \"$day\" ]\n    then\n     \
    \   echo \"Empty day\"\n        return 1;\n    fi\n\n    year=$(expr $year - 19)\n\
    \    if [ \"$month\" -lt 1 -o \"$month\" -gt 12 ]\n    then\n        echo \"Invalid\
    \ month\"\n        return 1\n    fi\n\n    if [ \"$day\" -lt 1 -o \"$day\" -gt\
    \ $days[$month-1] ]\n    then\n        echo \"Invalid day\"\n        return 1\n\
    \    fi\n\n    month=$(( ${months_array[$month-1]} ))\n    day=$(( ${days_array[$month-1]}\
    \ ))\n\n    if [ \"$month\" -lt 1 -o \"$month\" -gt 12 ]\n    then\n        echo\
    \ \"Invalid month\"\n        return 1\n    fi\n\n    if [ \"$day\" -lt 1 -o \"\
    $day\" -gt $days[$month-1] ]\n    then\n        echo \"Invalid day\"\n       \
    \ return 1\n    fi\n\n    echo \"true\"", "    [[ -z \"$1\" ]] && return 1\n \
    \   [[ -z \"$2\" ]] && return 1\n    [[ \"$2\" != \"1-12\" ]]  && return 1\n \
    \   [[ \"$2\" != \"2-9\" ]] && return 1\n    [[ \"$2\" != \"4-11\" ]]  && return\
    \ 1\n    [[ \"$2\" != \"6-9\" ]] && return 1\n    [[ \"$2\" != \"2-29\" ]] &&\
    \ return 1\n    [[ \"$2\" != \"2-12\" ]]  && return 1\n    [[ \"$2\" != \"02-29\"\
    \ ]]  && return 1\n    [[ \"$2\" != \"02-12\" ]]  && return 1\n    [[ \"$2\" !=\
    \ \"02-31\" ]]  && return 1\n    [[ \"$2\" != \"03-31\" ]]  && return 1\n    [[\
    \ \"$2\" != \"04-30\" ]]  && return 1\n    [[ \"$2\" != \"05-31\" ]]  && return\
    \ 1\n    [[ \"$2\" != \"06-31\" ]]  && return 1\n    [[ \"$2\" != \"07-31\" ]]\
    \  && return 1\n    [[ \"$2\" != \"08-31\" ]]  && return 1\n    [[ \"$2\" != \"\
    09-30\" ]]  && return 1\n    [[ \"$2\" != \"10-30\" ]]  && return 1\n    [[ \"\
    $2\" != \"11-30\" ]]  && return 1\n    [[ \"$2\" != \"12-31\" ]]  && return 1\n\
    \    [[ \"$2\" != \"01-31\" ]]  && return 1\n    [[ \"$2\" != \"02-29\" ]]  &&\
    \ return 1\n    [[ \"$2\" != \"02-12\" ]]  && return 1\n    [[ \"$2\" != \"02-31\"\
    \ ]]  && return 1\n    [[ \"$2\" != \"03-31\" ]]  && return 1\n    [[ \"$2\" !=\
    \ \"04-30\" ]]  && return 1\n    [[ \"$2\" != \"05-31\" ]]  && return 1\n    [[\
    \ \"$2\" != \"06-31\" ]]  && return 1\n    [[ \"$2\" != \"07-31\" ]]  && return\
    \ 1\n    [[ \"$2\" != \"08-31\" ]]  && return 1\n    [[ \"$2\" != \"09-30\" ]]\
    \  && return 1\n    [[ \"$2\" != \"10-30\" ]]  && return 1\n    [[ \"$2\" != \"\
    11-30\" ]]  && return 1\n    [[ \"$2\" != \"12-31\" ]]  && return 1\n    [[ \"\
    $2\" != \"01-31\" ]]  && return 1\n    [[", "    echo $1 | grep -q -E '^(0?[1-9]|[12][0-9]|3[01])[\\\
    -\\.\\/](0?[1-9]|1[012])[\\-\\.\\/]20[01]$' && return 0\n    echo $1 | grep -q\
    \ -E '^(0?[1-9]|[12][0-9]|3[01])[\\-\\.\\/](0?[1-9]|1[012])$' && return 0\n  \
    \  echo $1 | grep -q -E '^(0?[1-9]|[12][0-9]|3[01])$' && return 0\n    echo $1\
    \ | grep -q -E '^(0?[1-9]|[12][0-9]|3[01])/(0?[1-9]|1[012])[\\-\\.\\/]20[01]$'\
    \ && return 0\n    echo $1 | grep -q -E '^(0?[1-9]|[12][0-9]|3[01])/(0?[1-9]|1[012])$'\
    \ && return 0\n    echo $1 | grep -q -E '^(0?[1-9]|[12][0-9]|3[01])/(0?[1-9]|1[012])/(0?[1-9]|1[0-9]|2[0-9]|3[01])/20[01]$'\
    \ && return 0\n    echo $1 | grep -q -E '^(0?[1-9]|[12][0-9]|3[01])/(0?[1-9]|1[012])/(0?[1-9]|1[0-9]|2[0-9]|3[01])$'\
    \ && return 0\n    echo $1 | grep -q -E '^(0?[1-9]|[12][0-9]|3[01])/(0?[1-9]|1[012])/(0?[1-9]|1[0-9]|2[0-9]|3[01])/20[01]$'\
    \ && return 0\n    echo $1 | grep -q -E '^(0?[1-9]|[12][0-9]|3[01])/(0?[1-9]|1[012])/(0?[1-9]|1[0-9]|2[0-9]|3[01])/20[01]$'\
    \ && return 0\n    echo $1 | grep -q -E '^(0?[1-9]|[12][0-9]|3[01])/(0?[1-9]|1[012])/(0?[1-9]|1[0-9]|2[0-9]|3[01])/20[01]$'\
    \ && return 0\n    echo $1 | grep -q -E '^(0?[1-9]|[12][0-9]|3[01])/(0?[1-9]|1[012])/(0?[1-9]|1[0-9]|2[0-9]|3[01])/20[01]$'\
    \ && return 0\n    echo $1 | grep -q -E '^(0?[1-9]|[12][0-9]|3[01])/(0?[1-9]|1[012])/(0?[1-9]|1[0-9]|2[0-9]|3[01])/20[01]$'\
    \ && return 0\n    echo $1 | grep -q -E '^(0?[1-9]|[12][0-9]|3[01])/(0?[1-9]|1[012])/(0?[1-9]|1[0-9]|2[0-9]|3[01])/20[01]$'\
    \ && return ", "    local string=\"$1\"\n    local month_day\n\n    [ -z \"$string\"\
    \ ] && return 1\n    \n    # Split month into array using dash(-) as delimiter\n\
    \    # and day into another array using slash(/) as delimiter\n    month_day=(\"\
    ${string#*-}\")\n    month_day=(\"${month_day[@]/#/-}\")\n\n    # Months range\
    \ 1-12 excluding February \n    months_array=(\"${month_day[@]##*-}\")\n    months_array=(\"\
    ${months_array[@]/#-}\")\n\n    # Number of days in month\n    days_in_month=(\"\
    ${months_array[@]##*/}\")\n\n    # Number of days in year according to leap or\
    \ not\n    days_in_year=(\"${string#*-}\")\n\n    # Months are either 1, 3, 5,\
    \ 7, 8, 10, 12\n    # or 4, 6, 9, 11\n    # So first we check for leap year or\
    \ not\n    if [ ${days_in_year%400} == 0 ] || [ ${days_in_year%100} != 0 ] &&\
    \ [ ${days_in_year%400} != 0 ]; then\n        leap_or_not=\"1\"\n    else\n  \
    \      leap_or_not=\"0\"\n    fi\n    \n    # Validate if the date is not empty\n\
    \    if [ ${#month_day[@]} != 2 ]; then\n        return 0\n    fi\n    \n    #\
    \ Check if the number of days is less than 1 or greater than 31\n    if [ ${#days_in_month[@]}\
    \ -lt 1 ] || [ ${#days_in_month[@]} -gt 31 ]; then\n        return 0\n    fi\n\
    \    \n    # Check if the number of days is less than 1 or greater than 30\n \
    \   if [ ${#days_in_month[@]} -lt 1 ] || [ ${#days_in_month[@]} -gt 30 ]; then\n\
    \        return 0\n    fi\n    \n    # Check if the number of days is less than\
    \ 1 or greater than 29\n    if [ ${#days_in_month[@]} -lt 1 ] || [ ${#days_in_month[@]}\
    \ -gt 29 ]; then\n        return 0\n    fi\n    \n    # Check if month is not\
    \ less than 1 or greater than 12\n    if [ ${#months_array[@]} -lt 1 ] || [ ${#months_array[@]}\
    \ -gt 12 ]; then\n        return 0\n    fi\n    \n    # Check if months are not\
    \ less than 1 or greater than 12\n    if [ ${#months_array[@]} -lt 1 ] || [ ${#months_array[@]}\
    \ -gt 12 ]; then\n        return 0\n    fi\n\n    # Check if months are in range\
    \ 1-12\n    if [ ${#months_array[@]} -gt 0 ] && [ ${#", "    if [ -z \"$1\" ]\
    \ ; then\n        echo \"invalid date\" 1>&2\n        return 1\n    elif ! date\
    \ --date=\"$1\" --date \"01-01\" \"+%m-%d-%Y\" 2> /dev/null > /dev/null ; then\n\
    \        echo \"invalid date\" 1>&2\n        return 1\n    elif [ $(($(date \"\
    +%m\") -2)) -lt 1 -o $(($(date \"+%m\") -2)) -gt 12 ] ; then\n        echo \"\
    invalid date\" 1>&2\n        return 1\n    elif [ $(($(date \"+%d\") -2)) -lt\
    \ 1 -o $(($(date \"+%d\") -2)) -gt 30 ] ; then\n        echo \"invalid date\"\
    \ 1>&2\n        return 1\n    elif [ $(($(date \"+%m\") -1)) -lt 1 -o $(($(date\
    \ \"+%m\") -1)) -gt 12 ] ; then\n        echo \"invalid date\" 1>&2\n        return\
    \ 1\n    elif [ $(($(date \"+%d\") -1)) -lt 1 -o $(($(date \"+%d\") -1)) -gt 29\
    \ ] ; then\n        echo \"invalid date\" 1>&2\n        return 1\n    else\n \
    \       return 0\n    fi", "  if [ -z \"$1\" ]\n    then\n      return 1\n  fi\n\
    \  if [ $1 -eq \"\" ]\n    then\n      return 0\n  fi\n  IFS='-' read -a str <<<\
    \ \"$1\"\n  day=${str[0]}\n  month=${str[1]}\n  year=${str[2]}\n  case \"$month\"\
    \ in\n  01|03|05|07|08|10|12) ;;\n  04|06|09|11) ;;\n  02) [ \"$month\" -eq 2\
    \ ] && [ \"$day\" -eq 1 ] ;;\n  *) [ \"$month\" -gt 12 ] ;;\n  esac\n  case \"\
    $month\" in\n  01|03|05|07|08|10|12) ;;\n  04|06|09|11) ;;\n  02) [ \"$day\" -le\
    \ 31 && [ \"$month\" -le 12 ] ;;\n  *) [ \"$day\" -le 30 ] && [ \"$month\" -le\
    \ 11 ] ;;\n  esac\n  case \"$month\" in\n  01|03|05|07|08|10|12) ;;\n  04|06|09|11)\
    \ ;;\n  02) [ \"$day\" -le 29 && [ \"$month\" -le 12 ] ;;\n  *) [ \"$day\" -le\
    \ 29 ] && [ \"$month\" -le 12 ] ;;\n  esac\n  case \"$day\" in\n  01|03|05|07|08|10|12)\
    \ ;;\n  04|06|09|11) ;;\n  02) [ \"$month\" -le 12 ] ;;\n  *) [ \"$day\" -le 31\
    \ ] ;;\n  esac\n  case \"$day\" in\n  01|03|05|07|08|10|12) ;;\n  04|06|09|11)\
    \ ;;\n  02) [ \"$month\" -le 12 ] ;;\n  *) [ \"$month\" -le 12 ] ;;\n  esac\n\
    \  case \"$year\" in\n  01|03|05|07|08|10|12) ;;\n  04|06|09|11) ;;\n  02) [ \"\
    $month\" -le 12 ] ;;\n  *) [ \"$year\" -le 100 ] ;;\n  esac\n  return 0", "  if\
    \ [[ ! -z $1 ]]; then\n    # Check if $1 contains only digits\n    if [[ $1 =~\
    \ ^[0-9]+$ ]]; then\n      if [[ $1 -lt 1 || $1 -gt 31 ]]; then\n        echo\
    \ \"Invalid date format. Please try again.\" >&2\n        return 1\n      fi\n\
    \      if [[ $1 -lt 1 || $1 -gt 30 ]]; then\n        echo \"Invalid date format.\
    \ Please try again.\" >&2\n        return 1\n      fi\n      if [[ $1 -lt 1 ||\
    \ $1 -gt 29 ]]; then\n        echo \"Invalid date format. Please try again.\"\
    \ >&2\n        return 1\n      fi\n\n      # Check if $1 contains only digits\
    \ after -\n      if [[ ${1:0:2} = \"-\" ]]; then\n        local month=$1\n   \
    \     if [[ ${month} -lt 1 || ${month} -gt 12 ]]; then\n          echo \"Invalid\
    \ date format. Please try again.\" >&2\n          return 1\n        fi\n     \
    \   local day=${1#*-}\n        if [[ ${day} -lt 1 || ${day} -gt 31 ]]; then\n\
    \          echo \"Invalid date format. Please try again.\" >&2\n          return\
    \ 1\n        fi\n      else\n        local month=${1#*-}\n        if [[ ${month}\
    \ -lt 1 || ${month} -gt 12 ]]; then\n          echo \"Invalid date format. Please\
    \ try again.\" >&2\n          return 1\n        fi\n        local day=${1%-*}\n\
    \        if [[ ${day} -lt 1 || ${day} -gt 31 ]]; then\n          echo \"Invalid\
    \ date format. Please try again.\" >&2\n          return 1\n        fi\n     \
    \ fi\n\n      # Check if $1 contains only digits and after /\n      if [[ ${1:0:2}\
    \ = \"/\" ]]; then\n        local month=${1#*/}\n        if [[ ${month} -lt 1\
    \ || ${month} -gt 12 ]]; then\n          echo \"Invalid date format. Please try\
    \ again.\" >&2\n          return 1\n        fi\n        local day=${1%/*}\n  \
    \      if [[ ${day} -lt 1 || ${day} -gt 31 ]]; then\n          echo \"Invalid\
    \ date format. Please try again.\" >&2\n          return 1\n        fi\n     \
    \ else\n        local month=${1%/*}\n        if [[ ${month} -lt 1 || ${month}\
    \ -gt 12 ]]; then\n          echo \"Invalid date format. Please try again.\" >&2\n\
    \          return 1\n        fi\n        local day=${1##*/}\n        if [[ ${day}\
    \ -lt 1 || ${day} -gt 31 ]]; then\n          echo \"Invalid date format. Please ",
  '    date -d "$1" >/dev/null', "    local year=$1\n    local month=$2\n    local\
    \ date=$3\n    if [ -z \"$year\" ]; then\n        echo \"year empty\"\n      \
    \  return false\n    fi\n    if [ -z \"$month\" ]; then\n        echo \"month\
    \ empty\"\n        return false\n    fi\n    if [ -z \"$date\" ]; then\n     \
    \   echo \"date empty\"\n        return false\n    fi\n\n    if [ -z \"$month\"\
    \ ] || [ -z \"$date\" ] || [ -z \"$year\" ]; then\n        echo \"Invalid date\
    \ format\"\n        return false\n    fi\n\n    local datecheck=\"$(date -d \"\
    $date\" \"+%m\")\"\n    local monthcheck=\"$(date -d \"$date\" \"+%d\")\"\n  \
    \  local yearcheck=\"$(date -d \"$date\" \"+%Y\")\"\n    if [ \"$datecheck\" !=\
    \ \"$month\" ] || [ \"$datecheck\" != \"$year\" ]; then\n        echo \"Invalid\
    \ date format\"\n        return false\n    fi\n\n    if [ \"$monthcheck\" -lt\
    \ 1 || [ \"$monthcheck\" -gt 12 ]; then\n        echo \"Invalid date format\"\n\
    \        return false\n    fi\n\n    if [ \"$yearcheck\" -lt \"$year\" ]; then\n\
    \        echo \"Invalid date format\"\n        return false\n    fi\n\n    echo\
    \ \"true\"\n    return true", '  date -d "$1" +%s > /dev/null', "    IFS='-' read\
    \ -r -a dateStr <<< \"$1\"\n    ((${#dateStr[@]} < 7)) && return 0\n    ((${dateStr[1]}\
    \ < 1 || ${dateStr[1]} > 12)) && return 0\n    ((${dateStr[2]} < 1 || ${dateStr[2]}\
    \ > 31) && return 0\n    ((${dateStr[3]} < 1 || ${dateStr[3]} > 30) && return\
    \ 0\n    ((${dateStr[4]} < 1 || ${dateStr[4]} > 29) && return 0\n    return 1",
  "  local date_string=$1\n  local year=${date_string:0:4} #Get the year\n  local\
    \ month=${date_string:4:2}   #Get the month\n  local day=${date_string:6:2}  \
    \   #Get the day\n  # We are going to validate the date with the above rules\n\
    \  # The date format should be mm-dd-yyyy\n  local date_valid=false\n  # Check\
    \ whether the date string is not empty\n  if [ -z $date_string ]; then\n    echo\
    \ \"date string is empty\"\n    return 1\n  fi\n  # Check whether the number of\
    \ days is less than 1 or higher than 31 days for months 1,3,5,7,8,10,12\n  if\
    \ [ \"$month\" -ge 1 -o \"$month\" -le 3 ]; then\n    date_valid=true\n  fi\n\
    \  # Check whether the number of days is less than 1 or higher than 30 days for\
    \ months 4,6,9,11\n  if [ \"$month\" -ge 4 -o \"$month\" -le 6 ]; then\n    date_valid=true\n\
    \  fi\n  # Check whether the number of days is less than 1 or higher than 29 for\
    \ the month 2\n  if [ \"$month\" -ge 2 -o \"$month\" -le 2 ]; then\n    date_valid=true\n\
    \  fi\n  # If the number of days is less than 1 or higher than 29\n  if [ \"$day\"\
    \ -le 1 -o \"$day\" -gt 29 ]; then\n    date_valid=true\n  fi\n  # If the months\
    \ should not be less than 1 or higher than 12\n  if [ \"$month\" -ge 12 ]; then\n\
    \    date_valid=true\n  fi\n  # If the date should be in the format: mm-dd-yyyy\n\
    \  if [ \"$date_valid\" = true ]; then\n    echo \"Valid Date\"\n  else\n    echo\
    \ \"Not Valid Date\"\n  fi", "  date -d \"$1\" > /dev/null 2>&1\n  ret=$?\n  if\
    \ [ $ret -eq 1 ]\n  then\n    echo \"$1 is not a valid date\"\n  else\n    if\
    \ [[ $1 =~ ^[0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9]$ ]]\n    then\n  \
    \    if [[ $(date -d \"$1\" +%m) -le 2 ]]\n      then\n        if [[ $(date -d\
    \ \"$1\" +%d) -le 31 ]]\n        then\n          if [[ $(date -d \"$1\" +%Y) -le\
    \ 2012 ]]\n          then\n            if [[ $(date -d \"$1\" +%d) -le 30 ]]\n\
    \            then\n              if [[ $(date -d \"$1\" +%d) -le 29 ]]\n     \
    \         then\n                if [[ $(date -d \"$1\" +%d) -le 29 ]]\n      \
    \          then\n                  if [[ $(date -d \"$1\" +%d) -le 28 ]]\n   \
    \               then\n                    if [[ $(date -d \"$1\" +%d) -le 31 ]]\n\
    \                    then\n                      if [[ $(date -d \"$1\" +%d) -le\
    \ 30 ]]\n                      then\n                        if [[ $(date -d \"\
    $1\" +%d) -le 31 ]]\n                        then\n                          if\
    \ [[ $(date -d \"$1\" +%d) -le 30 ]]\n                          then\n       \
    \                     echo \"true\"\n                          else\n        \
    \                    echo \"false\"\n                          fi\n          \
    \              else\n                          echo \"false\"\n              \
    \          fi\n                      else\n                        echo \"false\"\
    \n                      fi\n                    else\n                      echo\
    \ \"false\"\n                    fi\n                  else\n                \
    \    echo \"false\"\n                  fi\n                else\n            \
    \      echo \"false\"\n                fi\n              else\n              \
    \  echo \"false\"\n              fi\n            else\n              echo \"false\"\
    \n            fi\n          else\n            echo \"false\"\n          fi\n \
    \       else\n          echo \"false\"\n        fi\n      else\n        echo \"\
    false\"\n      fi\n    else\n      echo \"false\"\n    fi\n  fi\n  return $ret",
  "    date -d \"$1\" >/dev/null 2>&1\n    if [[ $? -eq 0 ]] ; then\n        case\
    \ \"$1\" in\n            *-[0-9][0-9]*[0-9][0-9]*) echo \"true\" ;;\n        \
    \    *) echo \"false\" ;;\n        esac\n    else\n        echo \"false\"\n  \
    \  fi", "\t[[ -z \"$1\" ]] || [[ $1 =~ ^[0-9]+ ]] || return 1\n\tlocal month_arr=(\"\
    01\" \"03\" \"05\" \"07\" \"08\" \"10\" \"12\")\n\tlocal day_arr=(\"01\" \"03\"\
    \ \"05\" \"07\" \"08\" \"10\" \"12\" \"13\" \"15\" \"17\" \"19\" \"21\" \"23\"\
    \ \"25\" \"27\" \"29\" \"31\")\n\tlocal month_num=$(date +%m -d \"$1\")\n\t[[\
    \ -z \"$month_num\" ]] || return 1\n\tlocal day_num=$(date +%A -d \"$1\")\n\t\
    [[ -z \"$day_num\" ]] || return 1\n\tlocal year=$(date +%Y -d \"$1\")\n\t[[ -z\
    \ \"$year\" ]] || return 1\n\tlocal days_num=$(expr $month_num \\* 31 \\+ $day_num\
    \ \\+ $year)\n\t[[ -z \"$days_num\" ]] || return 1\n\tlocal months=$(expr $month_num\
    \ \\* 12)\n\t[[ -z \"$months\" ]] || return 1\n\tlocal days=$(expr $days_num -\
    \ $months)\n\t[[ -z \"$days\" ]] || return 1\n\tlocal ret=0\n\tif [[ \"$days\"\
    \ -le 1 ]] && [[ \"$days\" -le 30 ]] && [[ \"$days\" -le 29 ]] && [[ \"$months\"\
    \ -le 12 ]]; then\n\t\tlocal month_num=$(expr $months - 1)\n\t\tif [[ $month_num\
    \ -lt 1 ]] || [[ $month_num -lt 12 ]]; then\n\t\t\techo \"$1 is not a valid date\"\
    \n\t\t\tret=1\n\t\tfi\n\telse\n\t\techo \"$1 is not a valid date\"\n\t\tret=1\n\
    \tfi\n\techo \"$ret\"", "  local string=\"$1\"\n  if [[ $string == \"\" ]]\n \
    \ then\n    echo \"true\"\n    return\n  fi\n\n  local month=$(date -d $string\
    \ +%m) # get the month from date -d command\n  local day=$(date -d $string +%d)\
    \ # get the day from date -d command\n  local year=$(date -d $string +%Y) # get\
    \ the year from date -d command\n\n  # check for month\n  if (( ${month} == 1\
    \ || ${month} == 3 || ${month} == 5 || ${month} == 7 || ${month} == 8 || ${month}\
    \ == 10 || ${month} == 12))\n  then\n    echo \"false\"\n    return\n  fi\n\n\
    \  # check for month\n  if (( ${month} == 4 || ${month} == 6 || ${month} == 9\
    \ || ${month} == 11))\n  then\n    echo \"false\"\n    return\n  fi\n\n  # check\
    \ for month\n  if (( ${month} > 2))\n  then\n    echo \"false\"\n    return\n\
    \  fi\n\n  # check for day\n  if (( ${day} > 1 && ${day} < 31))\n  then\n    echo\
    \ \"false\"\n    return\n  fi\n\n  # check for day\n  if (( ${day} > 1 && ${day}\
    \ < 30))\n  then\n    echo \"false\"\n    return\n  fi\n\n  # check for day\n\
    \  if (( ${day} > 1 && ${day} < 29))\n  then\n    echo \"false\"\n    return\n\
    \  fi\n\n  # check for day\n  if (( ${month} == 2 && ${day} > 1))\n  then\n  \
    \  echo \"false\"\n    return\n  fi\n\n  echo \"true\"", "    local date_str=$1\n\
    \    if [ -z \"$date_str\" ]; then return 0; fi\n    local month_days[12]\n  \
    \  month_days[1]=31\n    month_days[3]=30\n    month_days[5]=29\n    month_days[7]=28\n\
    \    month_days[8]=31\n    month_days[10]=30\n    month_days[12]=31\n    local\
    \ month=${date_str%/*}\n    local day=${date_str#*/}\n    local date\n    month=${month%/*}\n\
    \    day=${day#*/}\n    local check_month=$((${month//-/}))\n    local check_day=$((${day//-/}))\n\
    \    local check_date=1\n    if [[ $check_month -le 0 ]] || [[ $check_month -gt\
    \ 12 ]] || [[ $check_day -le 0 ]] || [[ $check_day -gt $month_days[$check_month]\
    \ ]]; then\n        return 0\n    fi\n    for (( i=0; i<${#month_days[@]}; i++\
    \ )); do\n        if [[ ${month_days[$i]} == $check_day ]]; then\n           \
    \ check_date=0\n            break\n        fi\n    done\n    if [[ $check_date\
    \ -eq 1 ]]; then\n        return 0\n    fi\n    return 1", "    local date=\"\
    $1\"\n    if [ -z \"$date\" ]; then\n        return false\n    fi\n\n    local\
    \ months_array=( 1 3 5 7 8 10 12 )\n    local days_array=( 31 30 29 28 )\n   \
    \ local years_array=( 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011\
    \ 2012 )\n\n    local months=${months_array[$(( ${#date} / 2 ))]}\n    local days=${days_array[$((\
    \ ${#date} / 2 ))]}\n    local years=${years_array[$(( ${#date} / 2 ))]}\n\n \
    \   local months_length=${#months_array[@]}\n    local days_length=${#days_array[@]}\n\
    \    local years_length=${#years_array[@]}\n\n    local months_valid=$(( $months\
    \ == $months_length ))\n    local days_valid=$(( $days == $days_length ))\n  \
    \  local years_valid=$(( $years == $years_length ))\n\n    if [ \"$months_valid\"\
    \ -eq \"$months_length\" ] && [ \"$days_valid\" -eq \"$days_length\" ] && [ \"\
    $years_valid\" -eq \"$years_length\" ]; then\n        local months_found=0\n \
    \       local days_found=0\n        local years_found=0\n        for (( i=0; i<${#months_array[@]};\
    \ i++ )); do\n            local month_text=${months_array[$i]}\n            case\
    \ \"$month_text\" in\n                $months_array[$i]* )\n                 \
    \   (( months_found++ ))\n                    ;;\n            esac\n        done\n\
    \n        for (( i=0; i<${#days_array[@]}; i++ )); do\n            local day_text=${days_array[$i]}\n\
    \            case \"$day_text\" in\n                $days_array[$i]* )\n     \
    \               (( days_found++ ))\n                    ;;\n            esac\n\
    \        done\n\n        for (( i=0; i<${#years_array[@]}; i++ )); do\n      \
    \      local year_text=${years_array[$i]}\n            case \"$year_text\" in\n\
    \                $years_array[$i]* )\n                    (( years_found++ ))\n\
    \                    ;;\n            esac\n        done\n\n        if [ \"$months_found\"\
    \ -gt 0 ] && [ \"$days_found\" -gt 0 ] && [ \"$years_found\" -gt 0 ]; then\n \
    \           case \"$month", "  local date=\"$1\"\n  if [ -z \"$date\" ] ; then\n\
    \    return 0\n  fi\n  if [[ $date =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]] || [[ $date\
    \ =~ ^[0-9]{2}\\/[0-9]{2}\\/[0-9]{4}$ ]]; then\n    local year=${BASH_REMATCH[1]}\n\
    \    local month=${BASH_REMATCH[2]}\n    local day=${BASH_REMATCH[3]}\n    if\
    \ [[ $day < 1 || day > 31 ]] || [[ $month < 1 || month > 12 ]] || [[ $month ==\
    \ 2 && day > 29 ]]; then\n      return 0\n    fi\n    return 1\n  fi\n  return\
    \ 0", "    date -d \"$1\" 2>/dev/null || return 1\n    case \"$1\" in\n      \
    \  \"\"|*[!0-9]*) return 1\n        date -d \"$1\" 2>/dev/null || return 1\n \
    \       case \"$1\" in\n            *-[0-9]*) echo \"false\" && return 1 || return\
    \ 0\n            1-12) echo \"false\" && return 1 || return 0\n            2-29)\
    \ echo \"false\" && return 1 || return 0\n            1-31) echo \"false\" &&\
    \ return 1 || return 0\n            1-30) echo \"false\" && return 1 || return\
    \ 0\n            2-12) echo \"false\" && return 1 || return 0\n            *)\n\
    \            echo \"false\" && return 1 || return 0\n        esac\n        ;;\n\
    \    esac\n    echo \"true\" && return 0 || return 1", "    DATE=$1\n    if [\
    \ -z \"$DATE\" ]; then\n        echo \"Invalid date: $DATE\"\n        return 0\n\
    \    fi\n\n    IFS='-'\n    set -- $DATE\n\n    for ((i = 0; i < 3; i++)); do\n\
    \        if [[ ${!i} -ge 1 ]] ; then\n            if [[ ${!i} -le 12 ]] ; then\n\
    \                if [[ ${!i} -ge 4 ]] ; then\n                    if [[ ${!i}\
    \ -le 30 ]] ; then\n                        if [[ ${!i} -ge 29 ]] ; then\n   \
    \                         if [[ ${!i} -ge 1 ]] ; then\n                      \
    \          return 0\n                            fi\n                        fi\n\
    \                    fi\n                fi\n            fi\n        fi\n    done\n\
    \    return 1", "    # Extract the day, month, and year\n    local day=$1\n  \
    \  local month=$2\n    local year=$3\n\n    # Validate day and month\n    if [\
    \ ! -z \"$day\" -a ! -z \"$month\" ]; then\n        # Validate year\n        if\
    \ [ ! -z \"$year\" ]; then\n            if [[ ${day} -lt 1 || ${day} -gt 31 ||\
    \ ${month} -lt 1 || ${month} -gt 12 ]]; then\n                return 1\n     \
    \       fi\n        fi\n    fi\n\n    # Success.\n    return 0", "    if [ -z\
    \ \"$1\" ]; then\n        return 1\n    elif [ \"$1\" != \"mm-dd-yyyy\" ]; then\n\
    \        return 0\n    else\n        date -d \"$1\" +%s 2> /dev/null\n    fi",
  "    local DATE_STRING=$1\n    if [ -z \"$DATE_STRING\" ]; then return 1; fi\n \
    \   # Split the date into three parts\n    local DATE_ARRAY=($DATE_STRING)\n \
    \   local MONTH_INDEX=0\n    local DAY_INDEX=1\n    local YEAR_INDEX=2\n    #\
    \ Validate month\n    if [[ $DATE_ARRAY[MONTH_INDEX] =~ ^[0-11]$ ]]; then MONTH_INDEX=0;\
    \ fi\n    if [[ $DATE_ARRAY[MONTH_INDEX] =~ ^[12]$ ]]; then MONTH_INDEX=0; fi\n\
    \    # Validate day\n    if [[ $DATE_ARRAY[DAY_INDEX] =~ ^[0-31]$ ]]; then DAY_INDEX=0;\
    \ fi\n    if [[ $DATE_ARRAY[DAY_INDEX] =~ ^[1-30]$ ]]; then DAY_INDEX=0; fi\n\
    \    if [[ $DATE_ARRAY[DAY_INDEX] =~ ^[30]$ ]]; then DAY_INDEX=0; fi\n    # Validate\
    \ year\n    if [[ $DATE_ARRAY[YEAR_INDEX] =~ ^[0-9999]$ ]]; then YEAR_INDEX=0;\
    \ fi\n    if [[ $DATE_ARRAY[YEAR_INDEX] =~ ^[10000-10999]$ ]]; then YEAR_INDEX=0;\
    \ fi\n    if [[ $DATE_ARRAY[YEAR_INDEX] =~ ^[11000-11999]$ ]]; then YEAR_INDEX=0;\
    \ fi\n    if [[ $DATE_ARRAY[YEAR_INDEX] =~ ^[12000-12999]$ ]]; then YEAR_INDEX=0;\
    \ fi\n    if [[ $DATE_ARRAY[YEAR_INDEX] =~ ^[0-1]$ ]]; then YEAR_INDEX=0; fi\n\
    \    if [[ $DATE_ARRAY[YEAR_INDEX] =~ ^[0-12]$ ]]; then YEAR_INDEX=0; fi\n   \
    \ # Return true if all 3 parts are valid else return false.\n    if [ ${#DATE_ARRAY[@]}\
    \ -ne 3 ]; then return 1; fi\n    if [ ${DATE_ARRAY[MONTH_INDEX]} -lt 1 || \\\n\
    \     ${DATE_ARRAY[MONTH_INDEX]} -gt 12 ]; then return 1; fi\n    if [ ${DATE_ARRAY[DAY_INDEX]}\
    \ -lt 1 || \\\n     ${DATE_ARRAY[DAY_INDEX]} -gt 31 ]; then return 1; fi\n   \
    \ if [ ${DATE_ARRAY[YEAR_INDEX]} -lt 1 || \\\n     ${DATE_ARRAY[YEAR_INDEX]} -gt\
    \ 9999 ]; then return 1; fi\n    if [ ${DATE_ARRAY[YEAR_INDEX]} -lt 10000 ]; then\
    \ return 1; fi", "    # Your code here\n    echo \"false\"", "    local date=$1\n\
    \    local error=1\n\n    if [ -z \"$date\" ] || [ \"$date\" = \"$date\" ] ||\
    \ [ \"$date\" = \"$date\" ] || [ \"$date\" = \"$date\" ] || [ \"$date\" = \"$date\"\
    \ ] || [ \"$date\" = \"$date\" ] || [ \"$date\" = \"$date\" ] || [ \"$date\" =\
    \ \"$date\" ] || [ \"$date\" = \"$date\" ] || [ \"$date\" = \"$date\" ] || [ \"\
    $date\" = \"$date\" ] || [ \"$date\" = \"$date\" ] || [ \"$date\" = \"$date\"\
    \ ]; then\n        error=0\n    fi\n\n    if [ -z \"$error\" ]; then\n       \
    \ if [[ $(expr \"$date\" +%s) -ne $(expr \"$date\" +%Y%m%d) ]]; then\n       \
    \     error=1\n        fi\n        if [[ $error -eq 1 ]] || [[ $(expr \"$date\"\
    \ +%s) -ne $(expr \"$date\" +%d-%m-%Y) ]]; then\n            error=1\n       \
    \ fi\n        if [[ $error -eq 1 ]] || [[ $(expr \"$date\" +%s) -ne $(expr \"\
    $date\" +%m-%d-%Y) ]]; then\n            error=1\n        fi\n        if [[ $error\
    \ -eq 1 ]] || [[ $(expr \"$date\" +%s) -ne $(expr \"$date\" +%m/%d/%Y) ]]; then\n\
    \            error=1\n        fi\n        if [[ $error -eq 1 ]] || [[ $(expr \"\
    $date\" +%s) -ne $(expr \"$date\" +%m/%m/%Y) ]]; then\n            error=1\n \
    \       fi\n        if [[ $error -eq 1 ]] || [[ $(expr \"$date\" +%s) -ne $(expr\
    \ \"$date\" +%b %d %Y) ]]; then\n            error=1\n        fi\n    fi\n\n \
    \   if [ -z \"$error\" ]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi", "  [[ \"$1\" =~ \\^$ ]] && return 0\n  [[ -n \"$1\" ]] &&\
    \ return 0\n  local days_check=( 1 3 5 7 8 10 12 )\n  local months_check=( 4 6\
    \ 9 11 )\n  local month_check=( 2 )\n  if [[ \"${#1}\" -eq 0 ]]; then\n    return\
    \ 0\n  fi\n  local IFS=\"-\" read -r -a date <<< \"$1\"\n  local year=${date[2]}\n\
    \  local month=${date[1]}\n  local day=${date[0]}\n  local date_check=0\n  for\
    \ (( i=0; i<${#month[@]}; i++ )); do\n    local months_check=\"${months_check[@]}\"\
    \n    if [[ ${month[$i]} -le 0 ]]; then\n      months_check=\"${months_check[@]}-\"\
    \n    elif [[ ${month[$i]} -gt 12 ]]; then\n      months_check=\"${months_check[@]}-\"\
    \n    fi\n  done\n  for (( i=0; i<${#day[@]}; i++ )); do\n    local days_check=\"\
    ${days_check[@]}\"\n    if [[ ${day[$i]} -le 0 ]]; then\n      days_check=\"${days_check[@]}-\"\
    \n    elif [[ ${day[$i]} -gt 31 ]]; then\n      days_check=\"${days_check[@]}-\"\
    \n    elif [[ ${day[$i]} -gt 30 ]]; then\n      days_check=\"${days_check[@]}+\"\
    \n    fi\n  done\n  for (( i=0; i<${#month[@]}; i++ )); do\n    local months_check=\"\
    ${months_check[@]}\"\n    if [[ ${month[$i]} -le 0 ]]; then\n      months_check=\"\
    ${months_check[@]}-\"\n    elif [[ ${month[$i]} -gt 12 ]]; then\n      months_check=\"\
    ${months_check[@]}-\"\n    fi\n  done\n  if [[ ${#day[@]} -gt 31 ]]; then\n  \
    \  days_check=\"${days_check[@]}+\"\n  fi\n  if [[ ${#month[@]} -gt 12 ]]; then\n\
    \    months_check=\"${months_check[@]}+\"\n  fi\n  for (( i=0; i<${#month[@]};\
    \ i++ )); do\n    local month_check=\"${month_check[@]}\"\n    if [[ ${month[$i]}\
    \ -le 0 ]]; then\n      month_check=\"${month_check[@", "    if [ -z \"$1\" ];\
    \ then echo \"Invalid date string\"; return 1; fi\n    if [ $(( $1|cut -c -2 |\
    \ tr \":\" / |cut -c -3 ) -le 31 )] || [ $(( $1|cut -c -2 | tr \":\" / |cut -c\
    \ -3 ) -ge 30 ]  || [ $(( $1|cut -c -2 | tr \":\" / |cut -c -3 ) -le 28 )] ||\
    \ [ $(( $1|cut -c -2 | tr \":\" / |cut -c -3 ) -le 29 )] || [[ $(( $1|cut -c -2\
    \ | tr \":\" / |cut -c -3 ) -le 1 ) = $(( $1|cut -c -2 | tr \":\" / |cut -c -3\
    \ ) -le 12 )] || [[ $(( $1|cut -c -2 | tr \":\" / |cut -c -3 ) -le 4 ) = $(( $1|cut\
    \ -c -2 | tr \":\" / |cut -c -3 ) -le 6 )] || [[ $(( $1|cut -c -2 | tr \":\" /\
    \ |cut -c -3 ) -le 10 ) = $(( $1|cut -c -2 | tr \":\" / |cut -c -3 ) -le 9 )]\
    \ || [[ $(( $1|cut -c -2 | tr \":\" / |cut -c -3 ) -le 3 ) = $(( $1|cut -c -2\
    \ | tr \":\" / |cut -c -3 ) -le 11 )] ]; then return 0; else echo \"Invalid date\"\
    ; return 1; fi", "    if [[ -z \"$1\" ]]; then\n        echo \"invalid date provided\"\
    \n        exit 1\n    fi\n\n    # Check for the empty string.\n    if [[ \"$1\"\
    \ == \"$1\" ]]; then\n        echo \"invalid date provided\"\n        exit 1\n\
    \    fi\n\n    # Check for valid month format.\n    if [[ $(date \"+%m\") -lt\
    \ 1 || $(date \"+%m\") -gt 12 ]]; then\n        echo \"invalid month format provided\"\
    \n        exit 1\n    fi\n\n    # Check for valid date format.\n    if [[ $(date\
    \ \"+%d\") -lt 1 || $(date \"+%d\") -gt 31 ||\n        $(date \"+%d\") -lt 1 ||\
    \ $(date \"+%d\") -gt 30 ||\n        $(date \"+%d\") -lt 1 || $(date \"+%d\")\
    \ -gt 29 ]]; then\n        echo \"invalid date format provided\"\n        exit\
    \ 1\n    fi\n\n    echo \"$1\"", "    DATE_STRING=\"$1\"\n    if [ ! -z \"${DATE_STRING}\"\
    \ ]; then\n        # Split the date string\n        DATE_ARRAY=(${DATE_STRING//-/\
    \ })\n        MONTH_STRING=${DATE_ARRAY[0]}\n        DAY_STRING=${DATE_ARRAY[1]}\n\
    \        YEAR_STRING=${DATE_ARRAY[2]}\n\n        # Check if string is not empty\n\
    \        if [ -z \"${MONTH_STRING}\" ]; then\n            echo \"The date string\
    \ should not be empty.\"\n            exit 1\n        fi\n        # Check if month\
    \ string's length is less than 1 or higher than 12\n        if [ ${#MONTH_STRING}\
    \ -lt 1 -o ${#MONTH_STRING} -gt 12 ]; then\n            echo \"Invalid month length:\
    \ ${#MONTH_STRING}\"\n            exit 1\n        fi\n        # Check if month\
    \ string's length is less than 1 or higher than 31\n        if [ ${#MONTH_STRING}\
    \ -lt 1 -o ${#MONTH_STRING} -gt 31 ]; then\n            echo \"Invalid number\
    \ of days month: ${#MONTH_STRING}\"\n            exit 1\n        fi\n        #\
    \ Check if day string's length is less than 1 or higher than 30\n        if [\
    \ ${#DAY_STRING} -lt 1 -o ${#DAY_STRING} -gt 30 ]; then\n            echo \"Invalid\
    \ number of days day:  ${#DAY_STRING}\"\n            exit 1\n        fi\n    \
    \    # Check if day string's length is less than 1 or higher than 29\n       \
    \ if [ ${#DAY_STRING} -lt 1 -o ${#DAY_STRING} -gt 29 ]; then\n            echo\
    \ \"Invalid number of days day:  ${#DAY_STRING}\"\n            exit 1\n      \
    \  fi\n        # Check if day string's length is less than 1 or higher than 31\n\
    \        if [ ${#DAY_STRING} -lt 1 -o ${#DAY_STRING} -gt 31 ]; then\n        \
    \    echo \"Invalid number of days day:  ${#DAY_STRING}\"\n            exit 1\n\
    \        fi\n        # Check if month string's length is less than 1 or higher\
    \ than 12\n        if [ ${#MONTH_STRING} -lt 1 -o ${#MONTH_STRING} -gt 12 ]; then\n\
    \            echo \"Invalid month length: ${#MONTH_STRING}\"\n            exit\
    \ 1\n        fi\n        # Check if year string's length is less than 1 or higher\
    \ than 99\n        if [ ${#YEAR_STRING} -lt 1 -o ${#YEAR_STRING} -gt 99 ]; then\n\
    \            echo \"Invalid year length: ${#YEAR_STRING}\"\n            exit 1\n\
    \        fi\n        # Check if month string's length is less than 1 or higher\
    \ than 12\n        if [ ${#MONTH_STRING} -lt 1 -o ${#MONTH_STRING} -gt 12 ", " \
    \ local date days_count days_of_month month months_count months_of_year year\n\
    \  date=$1\n  days_count=$(echo $date | cut -c-6 -d -)\n  days_of_month=$(echo\
    \ $date | cut -c-5 -d -)\n  month=$(echo $date | cut -c-3 -d -)\n  months_count=$(echo\
    \ $date | cut -c-2 -d -)\n  months_of_year=$(echo $date | cut -c-1 -d -)\n  year=$(echo\
    \ $date | cut -c-7 -d -)\n  echo -n $((days_count<1)||((days_count<31)&&((days_of_month<1)||(days_of_month<31)&&((month<1)||(month<3)&&((months_count<1)||(months_count<31)&&((months_of_year<1)||(months_of_year<31)&&((year<1)||(year<30))))))))",
  "    if [ -z $1 ]; then\n        return 1\n    fi\n\n    if [[ $1 =~ ^[0-9]+-[0-9]+-[0-9]+$\
    \ ]]; then\n        # Date is valid\n        return 0\n    else\n        # Date\
    \ is invalid\n        return 1\n    fi", "    date -d \"$1\" > /dev/null\n   \
    \ return $?", "    local DATE=\"$1\"\n    # Make sure the given date is not empty.\n\
    \    if [[ ! -z $DATE ]]; then\n        # Check if the given date is in the correct\
    \ format.\n        if [[ \"$DATE\" =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n\
    \            # Make sure the date is not less than 1 or higher than 31 days for\
    \ months 1,3,5,7,8,10,12. And the date is not less than 1 or higher than 30 days\
    \ for months 4,6,9,11. And, the number of days is not less than 1 or higher than\
    \ 29 for the month 2.\n            if [[ $1 == \"01\" || $1 == \"03\" || $1 ==\
    \ \"05\" || $1 == \"07\" || $1 == \"08\" || $1 == \"10\" || $1 == \"12\" ]]; then\n\
    \                if [[ ${BASH_REMATCH[1]} -le 1 || ${BASH_REMATCH[1]} -le 31 ]];\
    \ then\n                    if [[ ${BASH_REMATCH[2]} -le 1 || ${BASH_REMATCH[2]}\
    \ -le 30 ]]; then\n                        if [[ ${BASH_REMATCH[1]} -le 1 || ${BASH_REMATCH[1]}\
    \ -le 29 ]]; then\n                            if [[ ${BASH_REMATCH[2]} -le 1\
    \ || ${BASH_REMATCH[2]} -le 29 ]]; then\n                                return\
    \ 1\n                            fi\n                        fi\n            \
    \        fi\n                fi\n            fi\n        fi\n    fi\n    return\
    \ 0", "    if [ -z $1 ]; then return 1; fi\n    if [ $(echo $1 | grep -c '^[0-9]')\
    \ -ne 0 ]; then return 1; fi\n    if [ $(echo $1 | grep -c '^[1-3]') -ne 0 ];\
    \ then return 1; fi\n    if [ $(echo $1 | grep -c '^[4-6]') -ne 0 ]; then return\
    \ 1; fi\n    if [ $(echo $1 | grep -c '^[7-9]') -ne 0 ]; then return 1; fi\n \
    \   if [ $(echo $1 | grep -c '^[1-30]') -ne 0 ]; then return 1; fi\n    if [ $(echo\
    \ $1 | grep -c '^[1-29]') -ne 0 ]; then return 1; fi\n    if [ $(echo $1 | grep\
    \ -c '^[0-2]') -ne 0 ]; then return 1; fi\n    if [ $(echo $1 | grep -c '^[1-9][0-1][1-9]')\
    \ -ne 0 ]; then return 1; fi\n    if [ $(echo $1 | grep -c '^[1-9][1-2][0-9]')\
    \ -ne 0 ]; then return 1; fi\n    if [ $(echo $1 | grep -c '^[1-9][1-3][0-9]')\
    \ -ne 0 ]; then return 1; fi\n    if [ $(echo $1 | grep -c '^[1-9][0-9]$') -ne\
    \ 0 ]; then return 1; fi\n    echo 0;", "    local DATE_STRING=\"$1\"\n    local\
    \ VALID=\"false\"\n\n    DATE_STRING=${DATE_STRING//-/}\n    if [ -z \"$DATE_STRING\"\
    \ ]\n    then\n        VALID=\"true\"\n    fi\n\n    # MONTHS\n    if [[ $VALID\
    \ == \"true\" ]]\n    then\n        if [[ ${DATE_STRING:0:2} =~ ^(0[1-9]|1[0-2])$\
    \ ]]\n        then\n            if [[ ${DATE_STRING:2:2} =~ ^(0[1-9]|1[0-2])$\
    \ ]]\n            then\n                if [[ ${DATE_STRING:2:2} =~ ^(0[1-9]|1[0-2])$\
    \ ]]\n                then\n                    VALID=\"true\"\n             \
    \   fi\n            fi\n        else\n            VALID=\"true\"\n        fi\n\
    \    fi\n\n    # DAYS\n    if [[ $VALID == \"true\" ]]\n    then\n        if [[\
    \ ${DATE_STRING:2:2} =~ ^(0[1-9]|1[0-2])$ ]]\n        then\n            if [[\
    \ ${DATE_STRING:4:2} =~ ^(0[1-9]|1[0-2])$ ]]\n            then\n             \
    \   if [[ ${DATE_STRING:4:2} =~ ^(0[1-9]|1[0-2])$ ]]\n                then\n \
    \                   VALID=\"true\"\n                fi\n            fi\n     \
    \   else\n            VALID=\"true\"\n        fi\n    fi\n\n    # YEAR\n    if\
    \ [[ $VALID == \"true\" ]]\n    then\n        if [[ ${DATE_STRING:4:4} =~ ^(0[1-9]|1[0-2])$\
    \ ]]\n        then\n            if [[ ${DATE_STRING:6:4} =~ ^(0[1-9]|1[0-2])$\
    \ ]]\n            then\n                if [[ ${DATE_STRING:6:4} =~ ^(0[1-9]|1[0-2])$\
    \ ]]\n                then\n                    VALID=\"true\"\n             \
    \   fi\n            fi\n        else\n            VALID=\"true\"\n        fi\n\
    \    fi\n\n    echo $VALID", "    local date=\"$1\"\n\n    if [[ \"$date\" ==\
    \ \"\" ]]; then\n        echo \"invalid date string $1\"\n        return 0\n \
    \   elif [[ \"$date\" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then\n        if [[\
    \ $(date -d \"$1\" +%m%d%Y -d)  -le 31 ]] ; then\n            if [[ $(date -d\
    \ \"$1\" +%m%d%Y -d)  -gt 30 ]] ; then\n                if [[ $(date -d \"$1\"\
    \ +%m%d%Y -d)  -le 29 ]] ; then\n                    if [[ $(date -d \"$1\" +%m%d%Y\
    \ -d)  -le 12 ]] ; then\n                        echo \"true\"\n             \
    \       else\n                        echo \"false\"\n                    fi\n\
    \                else\n                    echo \"false\"\n                fi\n\
    \            else\n                echo \"false\"\n            fi\n        else\n\
    \            echo \"false\"\n        fi\n    else\n        echo \"false\"\n  \
    \  fi", "    local date=\"$1\"\n\n    # Validate date string\n    [[ \"$date\"\
    \ != \"\" ]] || return 1\n\n    # Validate the day and month\n    local month=`date\
    \ +%m`\n    local day=`date +%d`\n\n    # Validate the month\n    [[ \"$month\"\
    \ -lt 1 || \"$month\" -gt 12 ]] || return 1\n\n    # Validate the year\n    [[\
    \ \"$day\" -lt 1 || \"$day\" -gt 31 ]] || return 1\n\n    # Validate the date\n\
    \    [[ \"$day\" -eq 1 ]] && [[ \"$month\" -eq 2 ]] && [[ \"$day\" -ge 1 && \"\
    $day\" -le 30 ]] || return 1\n\n    # Validate the date\n    [[ \"$day\" -eq 2\
    \ ]] && [[ \"$month\" -eq 1 ]] && [[ \"$day\" -ge 1 && \"$day\" -le 29 ]] || return\
    \ 1\n\n    # Validate the date\n    [[ \"$month\" -eq 3 ]] && [[ \"$day\" -ge\
    \ 1 && \"$day\" -le 31 ]] || return 1\n\n    # Validate the date\n    [[ \"$month\"\
    \ -eq 4 ]] && [[ \"$day\" -ge 1 && \"$day\" -le 30 ]] || return 1\n\n    # Validate\
    \ the date\n    [[ \"$month\" -eq 5 ]] && [[ \"$day\" -ge 1 && \"$day\" -le 31\
    \ ]] || return 1\n\n    # Validate the date\n    [[ \"$month\" -eq 6 ]] && [[\
    \ \"$day\" -ge 1 && \"$day\" -le 30 ]] || return 1\n\n    # Validate the date\n\
    \    [[ \"$month\" -eq 7 ]] && [[ \"$day\" -ge 1 && \"$day\" -le 31 ]] || return\
    \ 1\n\n    # Validate the date\n    [[ \"$month\" -eq 8 ]] && [[ \"$day\" -ge\
    \ 1 && \"$day\" -le 30 ]] || return 1\n\n    # Validate the date\n    [[ \"$month\"\
    \ -eq 9 ]] && [[ \"$day\" -ge 1 && \"$day\" -le 31 ]] || return 1\n\n    # Validate\
    \ the date\n    [[ \"$month\" -eq 10 ]] && [[ \"$day\" -ge 1 && \"$day\" -le 30\
    \ ]] || return 1\n\n    # Validate the date\n    [[ \"$month\" -eq 11 ]] && [[\
    \ \"$day\" -ge 1 && \"$day\" -le 31 ]] || return 1\n\n    # Validate the date\n\
    \    [[ \"$month\" -eq 12 ]] && [[ \"$day\" ", "    if [ -z \"$1\" ]; then\n \
    \       echo \"Invalid Date\";\n        return 1;\n    fi\n    if [[ $1 == \"\
    -\" ]]; then\n        echo \"Invalid Date\";\n        return 1;\n    fi\n    date_array=($1);\n\
    \    if [ $date_array[0] != '0' ]; then\n        echo \"Invalid Date\";\n    \
    \    return 1;\n    fi\n    if [ ${#date_array[@]} != 2 ]; then\n        echo\
    \ \"Invalid Date\";\n        return 1;\n    fi\n    if [[ ${date_array[1]} !=\
    \ \"-\" ]]; then\n        echo \"Invalid Date\";\n        return 1;\n    fi\n\
    \    if [[ ${date_array[1]} != \"-\" ]]; then\n        echo \"Invalid Date\";\n\
    \        return 1;\n    fi\n    if [[ ${date_array[2]} != \"-\" ]]; then\n   \
    \     echo \"Invalid Date\";\n        return 1;\n    fi\n    if [[ ${date_array[1]}\
    \ != \"01\" ]]; then\n        echo \"Invalid Date\";\n        return 1;\n    fi\n\
    \    if [[ ${date_array[2]} != \"01\" ]]; then\n        echo \"Invalid Date\"\
    ;\n        return 1;\n    fi\n    if [[ ${date_array[3]} != \"01\" ]]; then\n\
    \        echo \"Invalid Date\";\n        return 1;\n    fi\n    if [[ ${date_array[2]}\
    \ != \"12\" ]]; then\n        echo \"Invalid Date\";\n        return 1;\n    fi\n\
    \    if [[ ${date_array[1]} != \"03\" ]]; then\n        echo \"Invalid Date\"\
    ;\n        return 1;\n    fi\n    if [[ ${date_array[3]} != \"03\" ]]; then\n\
    \        echo \"Invalid Date\";\n        return 1;\n    fi\n    if [[ ${date_array[1]}\
    \ != \"04\" ]]; then\n        echo \"Invalid Date\";\n        return 1;\n    fi\n\
    \    if [[ ${date_array[3]} != \"04\" ]]; then\n        echo \"Invalid Date\"\
    ;\n        return 1;\n    fi\n    if [[ ${date_array[1]} != \"06\" ]]; then\n\
    \        echo \"Invalid Date\";\n        return 1;\n    fi\n    if [[ ${date_array[3]}\
    \ != \"06\" ]]; then\n        echo \"Invalid Date\";\n        return 1;\n    fi\n\
    \    if [[ ${date_array[1]} != \"07\" ]]; then\n        echo \"Invalid Date\"\
    ;\n        return 1;\n    fi\n    if [[ ${date_array[3]} != \"07\" ]]; then\n\
    \        echo \"Invalid Date\";\n        return 1;\n    fi\n    if [[ ${date_array[1]}\
    \ != \"08\" ]]; then\n        echo \"Invalid Date\";\n        return 1;\n    fi\n\
    \    if [[ ${date_array[3]} != \"08\" ]]; then\n        echo \"Invalid Date\"\
    ;\n        return 1;\n    fi\n    if [[ ${date_array[1]} != \"10\" ]]; then\n\
    \        ", "    local date=$1\n    local month=\"$(date +%m|sed -e 's/^0*//g')\"\
    \n    local day=\"$(date +%e|sed -e 's/^0*//g')\"\n    local year=\"$(date +%Y|sed\
    \ -e 's/^0*//g')\"\n    local date=\"$(echo $date | sed -e 's/^0*//g')\"\n\n \
    \   if [[ $month == \"01\" ]]; then\n        if [[ $day -lt 1 || $day -gt 31 ]];\
    \ then\n            echo \"false\"\n        else\n            echo \"true\"\n\
    \        fi\n    elif [[ $month == \"02\" ]]; then\n        if [[ $day -lt 1 ||\
    \ $day -gt 29 ]]; then\n            echo \"false\"\n        else\n           \
    \ echo \"true\"\n        fi\n    elif [[ $month == \"03\" ]]; then\n        if\
    \ [[ $day -lt 1 || $day -gt 31 ]]; then\n            echo \"false\"\n        else\n\
    \            echo \"true\"\n        fi\n    elif [[ $month == \"04\" ]]; then\n\
    \        if [[ $day -lt 1 || $day -gt 30 ]]; then\n            echo \"false\"\n\
    \        else\n            echo \"true\"\n        fi\n    elif [[ $month == \"\
    05\" ]]; then\n        if [[ $day -lt 1 || $day -gt 31 ]]; then\n            echo\
    \ \"false\"\n        else\n            echo \"true\"\n        fi\n    elif [[\
    \ $month == \"06\" ]]; then\n        if [[ $day -lt 1 || $day -gt 30 ]]; then\n\
    \            echo \"false\"\n        else\n            echo \"true\"\n       \
    \ fi\n    elif [[ $month == \"07\" ]]; then\n        if [[ $day -lt 1 || $day\
    \ -gt 31 ]]; then\n            echo \"false\"\n        else\n            echo\
    \ \"true\"\n        fi\n    elif [[ $month == \"08\" ]]; then\n        if [[ $day\
    \ -lt 1 || $day -gt 31 ]]; then\n            echo \"false\"\n        else\n  \
    \          echo \"true\"\n        fi\n    elif [[ $month == \"09\" ]]; then\n\
    \        if [[ $day -lt 1 || $day -gt 31 ]]; then\n            echo \"false\"\n\
    \        else\n            echo \"true\"\n        fi\n    elif [[ $month == \"\
    10\" ]]; then\n        if [[ $day -lt 1 || $day -gt 31 ]]; then\n            echo\
    \ \"false\"\n        else\n            echo \"true\"\n        fi\n    elif [[\
    \ $month == \"11\" ]]; then\n        if [[ $day -lt 1 || $day -gt 31 ]]; then\n\
    \            echo \"false\"\n        else\n            echo \"true\"\n       \
    \ fi\n    else\n        echo \"", "    local date month\n    local day\n    local\
    \ year\n\n    date --utc \"$1\"\n    if [[ $? -eq 0 ]]; then\n        year=${date:8:2}\n\
    \        month=${date:10:2}\n        day=${date:12:2}\n\n        if [[ $month\
    \ -gt 12 ]]; then\n            month=12\n        fi\n        if [[ $month -gt\
    \ 0 ]]; then\n            if [[ $day -gt 1 ]]; then\n                if [[ $month\
    \ -gt 3 ]]; then\n                    if [[ $day -gt 1 ]]; then\n            \
    \            if [[ $day -gt 1 ]]; then\n                            if [[ $day\
    \ -gt 1 ]]; then\n                                return 0\n                 \
    \           else\n                                return 1\n                 \
    \           fi\n                        else\n                            return\
    \ 1\n                        fi\n                    else\n                  \
    \      return 1\n                    fi\n                else\n              \
    \      return 1\n                fi\n            else\n                return\
    \ 1\n            fi\n        else\n            return 1\n        fi\n    else\n\
    \        return 1\n    fi", "  local date_string=$1\n  if [[ ! -z $date_string\
    \ ]]; then\n    month=$(date -d \"$date_string\" +%m)\n    year=$(date -d \"$date_string\"\
    \ +%Y)\n    day=$(date -d \"$date_string\" +%d)\n    if [[ -z $month ]] || [[\
    \ -z $day ]] || [[ -z $year ]]; then\n      return 0\n    fi\n    if [[ -z $((\
    \ $(date -d \"$date_string\" +%s) / (24*60*60) )) ]] || [[ -z $(( $(date -d \"\
    $date_string\" +%s) / (60*60) )) ]] || [[ -z $(( $(date -d \"$date_string\" +%s)\
    \ / (60) )) ]]; then\n      return 0\n    fi\n    if [[ -z $(( $(date -d \"$date_string\"\
    \ +%s) / 30 )) ]] || [[ -z $(( $(date -d \"$date_string\" +%s) / 29 )) ]]; then\n\
    \      return 0\n    fi\n    if (( $(date -d \"$date_string\" +%m) > 12 )); then\n\
    \      return 0\n    fi\n    if (( $(date -d \"$date_string\" +%d) > 31 )); then\n\
    \      return 0\n    fi\n    if (( $(date -d \"$date_string\" +%m) > 1 )); then\n\
    \      return 0\n    fi\n    if (( $(date -d \"$date_string\" +%d) > 29 )); then\n\
    \      return 0\n    fi\n    return 1\n  fi\n  return 0", "  if [[ $# -eq 0 ]];\
    \ then\n    echo \"Date string not given\"\n    exit 1\n  fi\n\n  # Get the date\
    \ string passed as argument and split into day, month and year\n  local datestring=$1\n\
    \  local day=`echo $datestring | cut -d '-' -f1`\n  local month=`echo $datestring\
    \ | cut -d '-' -f2`\n  local year=`echo $datestring | cut -d '-' -f3`\n\n  # Check\
    \ if the month is valid\n  if [[ $month -ge 1 ]] && [[ $month -le 12 ]]; then\n\
    \    # Check if the day is valid\n    if [[ $day -ge 1 ]] && [[ $day -le 31 ]]\
    \ && [[ $month -ne 1 ]] && [[ $month -ne 3 ]] && [[ $month -ne 5 ]] && [[ $month\
    \ -ne 7 ]] && [[ $month -ne 8 ]] && [[ $month -ne 10 ]] && [[ $month -ne 12 ]];\
    \ then\n      # Check if the year is valid\n      if [[ \"$year\" =~ ^[0-9]+$\
    \ ]]; then\n        echo \"true\"\n      else\n        echo \"false\"\n      fi\n\
    \    else\n      echo \"false\"\n    fi\n  else\n    echo \"false\"\n  fi", " \
    \ local DATE_INPUT=${1:-${1}}\n  local DATE=${DATE_INPUT::3}\n  local MONTH=${DATE_INPUT::2-1}\n\
    \  local YEAR=${DATE_INPUT::4}\n  local MONTH_DAY=\"${DATE::2}\"\n  local DAY_OF_MONTH=\"\
    ${DATE::4}\"\n  local MONTH_DAYS=()\n  if (( MONTH != 1 )); then\n    (( MONTH_DAYS[${MONTH}]\
    \ += DAY_OF_MONTH ))\n  fi\n  if (( MONTH != 2 )); then\n    (( MONTH_DAYS[${MONTH}]\
    \ += DAY_OF_MONTH + 31 ))\n  fi\n  if (( MONTH != 3 )); then\n    (( MONTH_DAYS[${MONTH}]\
    \ += DAY_OF_MONTH + 31 ))\n  fi\n  if (( MONTH != 4 )); then\n    (( MONTH_DAYS[${MONTH}]\
    \ += DAY_OF_MONTH + 30 ))\n  fi\n  if (( MONTH != 6 )); then\n    (( MONTH_DAYS[${MONTH}]\
    \ += DAY_OF_MONTH + 29 ))\n  fi\n  if (( MONTH != 9 )); then\n    (( MONTH_DAYS[${MONTH}]\
    \ += DAY_OF_MONTH + 29 ))\n  fi\n  if (( MONTH != 11 )); then\n    (( MONTH_DAYS[${MONTH}]\
    \ += DAY_OF_MONTH + 29 ))\n  fi\n  if (( MONTH != 12 )); then\n    (( MONTH_DAYS[${MONTH}]\
    \ += DAY_OF_MONTH + 29 ))\n  fi\n  if [[ ${MONTH_DAYS[*]} -eq 0 ]] ; then\n  \
    \  echo 'false'\n  else\n    echo 'true'\n  fi", "  local date=$1\n  local MONTHS=\"\
    1 3 5 7 8 10 12\"\n  local DAYS=\"1 30 29 31\"\n  local MONTHS2=\"4 6 9 11\"\n\
    \  local DAYS2=\"29 30\"\n  local MONTHS3=\"2 12\"\n  local DAYS3=\"31\"\n  local\
    \ day\n  local month\n  local year\n  local date_part\n\n  date -d \"$date\" '+%-d\
    \ %-m %Y'\n  date_part=$(date -d \"$date\" '+%-d %-m %Y')\n\n  month=$(echo \"\
    $date_part\" | cut -d\"-\" -f1)\n  year=$(echo \"$date_part\" | cut -d\"-\" -f2)\n\
    \n  if [ -z \"$month\" ] || [ -z \"$year\" ]; then\n    echo \"invalid date string\"\
    \n    return 1\n  fi\n\n  if [[ $(echo \"$MONTHS | tr \" \" \"\\n\" | grep -c\
    \ \"$month\") -gt 0 ]] && [[ $(echo \"$MONTHS2 | tr \" \" \"\\n\" | grep -c \"\
    $month\") -gt 0 ]] && [[ $(echo \"$MONTHS3 | tr \" \" \"\\n\" | grep -c \"$month\"\
    ) -gt 0 ]]; then\n    echo \"invalid date string\"\n    return 1\n  fi\n\n  if\
    \ [[ $(echo \"$DAYS | tr \" \" \"\\n\" | grep -c \"$day\") -gt 0 ]] && [[ $(echo\
    \ \"$DAYS2 | tr \" \" \"\\n\" | grep -c \"$day\") -gt 0 ]] && [[ $(echo \"$DAYS3\
    \ | tr \" \" \"\\n\" | grep -c \"$day\") -gt 0 ]]; then\n    echo \"invalid date\
    \ string\"\n    return 1\n  fi\n\n  return 0", "  local DATE_FORMAT=\"%m-%d-%Y\"\
    \n  local date valid=false\n  if [[ $1 ]]; then\n    date -d \"$1\" <<<$(date\
    \ --date=\"$1\" --utc --rfc-2822 --format=${DATE_FORMAT})\n    if [[ $(date --date=\"\
    $1\" --utc --rfc-2822 --format=${DATE_FORMAT}) != *\"${DATE_FORMAT}\"* ]]; then\n\
    \      echo \"false\"\n    else\n      if [[ \"${date:0:3}\" < 1 || \\\n     \
    \     \"${date:0:3}\" > 12 || \\\n          (( \"${date:0:3}\" == 2 && \\\n  \
    \            \"${date:1:3}\" > 6 && \\\n              \"${date:1:3}\" < 9 )) ||\
    \ \\\n          (( \"${date:0:3}\" == 2 && \\\n              \"${date:1:3}\" >\
    \ 4 && \\\n              \"${date:1:3}\" < 6 )) || \\\n          (( \"${date:0:3}\"\
    \ == 3 && \\\n              \"${date:1:3}\" > 0 && \\\n              \"${date:1:3}\"\
    \ < 2 )) || \\\n          (( \"${date:0:3}\" == 3 && \\\n              \"${date:1:3}\"\
    \ > 0 && \\\n              \"${date:1:3}\" < 1 )) || \\\n          (( \"${date:0:3}\"\
    \ == 2 && \\\n              \"${date:1:3}\" > 1 && \\\n              \"${date:1:3}\"\
    \ < 2 )) || \\\n          (( \"${date:0:3}\" == 1 && \\\n              \"${date:1:3}\"\
    \ > 2 && \\\n              \"${date:1:3}\" < 3 )) || \\\n          (( \"${date:0:3}\"\
    \ == 1 && \\\n              \"${date:1:3}\" > 1 && \\\n              \"${date:1:3}\"\
    \ < 2 )) || \\\n          (( \"${date:0:3}\" == 0 && \\\n              \"${date:1:3}\"\
    \ > 0 && \\\n              \"${date:1:3}\" < 1 )) || \\\n          (( \"${date:0:3}\"\
    \ == 0 && \\\n              \"${date:1:3}\" > 0 && \\\n              \"${date:1:3}\"\
    \ < 1 )) || \\\n          (( \"${date:0:3}\" == 0 && \\\n              \"${date:1:3}\"\
    \ > 0 && \\\n              \"${date:1:3}\" < 1 )) || \\\n          (( \"${date:0:3}\"\
    \ == 0 && \\\n              \"${date:1:3}\" > 0 && \\\n              \"${date:1:3}\"\
    \ < 1 ", "  local date _date _month _year _day\n  date=\"$1\"\n  read _date _month\
    \ _year _day <<< \"$(echo $date | sed 's/\\//-/g')\"\n  ((_month--))\n  ((_year--))\n\
    \  ((_day--))\n  if [ -z \"$date\" ]; then\n    return 0\n  fi\n  # The date string\
    \ is not empty.\n  if [ -z \"$_date\" ]; then\n    return 0\n  fi\n  # The months\
    \ should not be less than 1 or higher than 12.\n  if [ \"$_month\" -le 0 -o \"\
    $_month\" -gt 12 ]; then\n    return 0\n  fi\n  # The date should be in the format:\
    \ mm-dd-yyyy\n  if [ \"$_month\" -eq 1 -a \"$_day\" -eq 1 -a \"$_year\" -ge 31\
    \ -a \"$_year\" -le 30 or \"$_month\" -eq 4 -a \"$_day\" -eq 1 -a \"$_year\" -ge\
    \ 30 -a \"$_year\" -le 29 ]; then\n    return 0\n  fi\n  return 1", "  local date\
    \ month=0 day=0 year=0\n\n  IFS='-' read -r date month day year <<< \"$1\"\n\n\
    \  # Check the date\n  if [ -z \"$date\" ]; then\n    return 1\n  fi\n\n  # Validate\
    \ month\n  if ((month < 1 || month > 12)) ; then\n    return 1\n  fi\n\n  # Validate\
    \ day\n  if ((day < 1 || ((day == 1) && (month == 2))))  ; then\n    return 1\n\
    \  fi\n\n  # Validate year\n  if ((year < 1 || year > 10000))  ; then\n    return\
    \ 1\n  fi\n\n  # Validate the date\n  if [[ $date != *-* ]]; then\n    return\
    \ 0\n  fi\n\n  # Validate day\n  if ((day < 1 || ((day == 1) && (month in [1,3,5,7,8,10,12]))))\
    \  ; then\n    return 1\n  fi\n\n  # Validate month\n  if ((month < 1 || month\
    \ > 12))  ; then\n    return 1\n  fi\n\n  # Validate year\n  if ((year < 1 ||\
    \ year > 10000))  ; then\n    return 1\n  fi\n\n  return 0", "    if [[ -z \"\
    $1\" ]]\n    then\n        echo \"invalid date format\"\n        exit 1\n    fi\n\
    \    if [[ \"$1\" =~ ^[0-9] ]]\n    then\n        echo \"invalid date format\"\
    \n        exit 1\n    fi\n    date -d \"$1\" \"+%m%d%Y\" > /dev/null\n    if [\
    \ \"$?\" == \"0\" ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi", "    if [ -z \"$1\" ]; then\n        return\n    fi\n    date\
    \ -d \"$1\" --date \"+\"$1 --date=\"+%Y", "\t[ \"$1\" ] && date -d \"$1\" > /dev/null\
    \ 2>&1\n\t[ $? -eq 0 ] && [ -n \"$1\" ] && [ \"${1:0:2}\" != \"-\" ] && [ \"${1:0:2}\"\
    \ != \"+\" ] && [ \"${1:0:1}\" != \"-\" ] && [ \"${1:0:1}\" != \"+\" ] && [ \"\
    ${1:3:4}\" != \"-\" ] && [ \"${1:3:4}\" != \"+\" ] && [ \"$2\" -gt 0 ] && [ \"\
    $2\" -le 29 ] && [ \"$3\" -gt 0 ] && [ \"$3\" -le 12 ] && [ \"$4\" -gt 0 ] &&\
    \ [ \"$4\" -le 31 && [ \"$1\" != \"--\" ] && [ \"$1\" != \"---\" ] && [ \"$1\"\
    \ != \"--\" ] && [ \"$1\" != \"---\" ] && [ \"$1\" != \"----\" ]", "  local date\
    \ date day year month days_in_month is_valid result\n  # date validation\n  date=\"\
    $1\"\n  if [[ \"$date\" == \"\" ]]; then\n    return 1\n  fi\n  # day validation\n\
    \  day=$(date -d \"$date\" +%d)\n  if [[ $day -eq 0 ]]; then\n    return 1\n \
    \ fi\n  # month validation\n  month=$(date -d \"$date\" +%m)\n  if [[ $month -eq\
    \ 0 ]]; then\n    return 1\n  fi\n  # year validation\n  year=$(date -d \"$date\"\
    \ +%y)\n  if [[ $year -eq 0 ]]; then\n    return 1\n  fi\n  # days_in_month validation\n\
    \  days_in_month=$(date -d \"$date\" +%n)\n  if [[ $days_in_month -eq 0 ]]; then\n\
    \    return 1\n  fi\n  # month validation\n  if [[ \"$month\" -lt 1 ]] || [[ \"\
    $month\" -gt 12 ]]; then\n    return 1\n  fi\n  # date validation\n  if [[ \"\
    $day\" -lt 1 ]] || [[ \"$day\" -gt 31 ]] || ([[ \"$day\" -lt 1 ]] && [[ \"$day\"\
    \ -gt 30 ]] && ([[ \"$month\" -lt 1 ]] || [[ \"$month\" -gt 12 ])); then\n   \
    \ return 1\n  fi\n  # date validation\n  if [[ \"$days_in_month\" -lt 1 ]] ||\
    \ [[ \"$days_in_month\" -gt 29 ]]; then\n    return 1\n  fi\n  # date validation\n\
    \  if [[ \"$day\" -gt 29 ]]; then\n    return 1\n  fi\n  # date validation\n \
    \ return 0", "  local DATE=\"$1\"\n  date -d \"$DATE\" \"+%m-%d-%Y\" > /dev/null\
    \ 2>&1\n  [[ \"$?\" == 0 ]] || return 1\n  [[ $(date -d \"$DATE\" \"+%m\") ==\
    \ \"01\" ]] || return 1\n  [[ $(date -d \"$DATE\" \"+%d\") == \"01\" ]] || return\
    \ 1\n  [[ $(date -d \"$DATE\" \"+%Y\") == \"1970\" ]] || return 1\n  return 0",
  "  local date=\"$1\"\n  if [ -z \"$date\" ]; then\n    return 0\n  fi\n\n  local\
    \ months=(\"01\" \"03\" \"05\" \"07\" \"08\" \"10\" \"12\")\n  local days=(\"\
    01\" \"03\" \"05\" \"07\" \"08\" \"10\" \"12\" \"13\" \"15\" \"17\" \"19\" \"\
    21\" \"23\" \"25\" \"27\" \"29\")\n  local years=(\"00\" \"01\" \"02\" \"03\"\
    \ \"04\" \"05\" \"06\" \"07\" \"08\" \"09\" \"10\" \"11\" \"12\" \"13\" \"14\"\
    \ \"15\" \"16\" \"17\" \"18\" \"19\" \"20\" \"21\" \"22\" \"23\" \"24\" \"25\"\
    \ \"26\" \"27\" \"28\" \"29\" \"30\" \"31\")\n\n  local m\n  local d\n  local\
    \ y\n  local valid=\"N\"\n  local msg\n\n  read m d y < <<EOF\n$date\nEOF\n\n\
    \  while [ \"$valid\" != \"N\" ] && [ \"$m\" != \"01\" ] && [ \"$m\" != \"03\"\
    \ ] && [ \"$m\" != \"05\" ] && [ \"$m\" != \"07\" ] && [ \"$m\" != \"08\" ] &&\
    \ [ \"$m\" != \"10\" ] && [ \"$m\" != \"12\" ] && [ \"$m\" != \"\" ] && [ \"$m\"\
    \ != \"0\" ] && [ \"$m\" != \"1\" ] && [ \"$m\" != \"2\" ] && [ \"$m\" != \"3\"\
    \ ] && [ \"$m\" != \"4\" ] && [ \"$m\" != \"6\" ] && [ \"$m\" != \"9\" ] && [\
    \ \"$m\" != \"11\" ] && [ \"$m\" != \"12\" ] && [ \"$m\" != \"1\" ]; then\n  \
    \  echo \"$date is not a valid date. Please enter a valid date in mm-dd-yyyy format.\"\
    \n    read m d y < <<EOF\n$date\nEOF\n  done\n\n  while [ \"$valid\" != \"N\"\
    \ ] && [ \"$d\" != \"01\" ] && [ \"$d\" != \"03\" ] && [ \"$d\" != \"05\" ] &&\
    \ [ \"$d\" != \"07\" ] && [ \"$d\" != \"08\" ] && [ \"$d\" != \"10\" ] && [ \"\
    $d\" != \"12\" ] && [ \"$d\" != \"\" ] && [ \"$d\" != \"0\" ] && [ \"$d\" != \"\
    1\" ] && [ \"$d\" != \"2\" ] && [ \"$d\" != \"3\" ] && [ \"$d\" != \"4\" ] &&\
    \ [ \"$d\" != \"6\" ] && [ \"$d\" != \"9\" ] && [ \"$d\" != \"11\" ] && [ \"$d\"\
    \ != \"12\" ] && [ \"$d\" != \"1\" ]; then\n    echo \"$date is not a valid date.\
    \ Please enter a valid date in mm-dd-yyyy format.\"\n    read m d y < <<EOF\n\
    $date\nEOF\n  ", "    local date_string=\"$1\"\n    local date=$(date -d \"$date_string\"\
    \ +\"%m-%d-%Y\")\n    # Checking whether the date string is empty or not.\n  \
    \  if [ -z \"$date_string\" ]; then\n        echo \"false\"\n        return\n\
    \    fi\n\n    # Checking whether the date string is valid or not.\n    if [ \"\
    $date\" -lt \"01-31-$((${#date_string}-2))\" ] || [ \"$date\" -gt \"12-$((${#date_string}-1))\"\
    \ ] || [ \"$date\" -lt \"01-$((${#date_string}-3))\" ] || [ \"$date\" -gt \"30-$((${#date_string}-3))\"\
    \ ] || [ \"$date\" -lt \"01-$((${#date_string}-3))\" ] || [ \"$date\" -gt \"29-$((${#date_string}-2))\"\
    \ ]; then\n        echo \"false\"\n        return\n    fi\n    # Checking whether\
    \ the date string is valid or not.\n    if [ \"$date\" -lt \"01-$((${#date_string}-2))\"\
    \ ] || [ \"$date\" -gt \"12-$((${#date_string}-1))\" ] || [ \"$date\" -lt \"01-$((${#date_string}-3))\"\
    \ ] || [ \"$date\" -gt \"30-$((${#date_string}-3))\" ] || [ \"$date\" -lt \"01-$((${#date_string}-3))\"\
    \ ] || [ \"$date\" -gt \"29-$((${#date_string}-2))\" ]; then\n        echo \"\
    false\"\n        return\n    fi\n    # Checking whether the date string is valid\
    \ or not.\n    if [ \"$date\" -lt \"01-$((${#date_string}-2))\" ] || [ \"$date\"\
    \ -gt \"12-$((${#date_string}-1))\" ] || [ \"$date\" -lt \"01-$((${#date_string}-3))\"\
    \ ] || [ \"$date\" -gt \"30-$((${#date_string}-3))\" ] || [ \"$date\" -lt \"01-$((${#date_string}-3))\"\
    \ ] || [ \"$date\" -gt \"29-$((${#date_string}-2))\" ]; then\n        echo \"\
    false\"\n        return\n    fi\n    \n    local date_array=(${date})\n    local\
    \ month_array=(${date_array[0]})\n    local day_array=(${date_array[1]})\n   \
    \ local year=(${date_array[2]})\n\n    # Checking whether the month is valid or\
    \ not.\n    if [ \"$month_array\" -lt \"01\" ] || [ \"$month_array\" -gt \"12\"\
    \ ]; then\n        echo \"false", "  local date=\"$1\"\n  local month=\"$(date\
    \ -d \"$date\" +%m)\"\n  local day=\"$(date -d \"$date\" +%d)\"\n  local year=\"\
    $(date -d \"$date\" +%Y)\"\n\n  if [ -z \"$date\" ]\n  then\n    return 0\n  fi\n\
    \  if [ $month -ge 1 -a $month -le 3 ]\n  then\n    if [ $day -le 1 -a $day -le\
    \ 31 ]\n    then\n      if [ $month -ge 4 -a $month -le 6 ]\n      then\n    \
    \    if [ $day -le 1 -a $day -le 30 ]\n        then\n          if [ $month -ge\
    \ 2 -a $month -le 12 ]\n          then\n            return 1\n          fi\n \
    \       fi\n      fi\n    fi\n  fi\n  return 0", "    date -d \"$1\" +%m #month\n\
    \    date -d \"$1\" +%d #day\n    date -d \"$1\" +%Y #year", "\tlocal date part1\
    \ part2 part3 part4 day1 month1 day2 month2 month3 year1 year2 year3\n\tdate=${1}\n\
    \n\t# Check if the string is not empty\n\tif [ -z \"${date}\" ]; then\n\t\techo\
    \ \"String is empty\";\n\t\treturn;\n\tfi\n\n\t# Split the date into parts\n\t\
    IFS=- read part1 part2 part3 part4 <<< \"${date}\"\n\n\t# Check if the date string\
    \ is in the correct format\n\tcase \"${part1}\" in\n\t\t*[!0-9]*) echo \"Invalid\
    \ date format\";;\n\t\t*)\n\t\t# Check if the date string has 2 parts\n\t\tif\
    \ [ -n \"${part2}\" -a -n \"${part3}\" ]; then\n\t\t\tday1=${part2}\n\t\t\tmonth1=${part1}\n\
    \t\t\tday2=${part3}\n\t\t\tmonth2=${part1}\n\t\t\tyear1=${part4}\n\t\t\tyear2=${part4}\n\
    \t\t\tyear3=${part4}\n\t\tfi\n\t\t# Check if the date string has 3 parts\n\t\t\
    if [ -n \"${part2}\" -a -n \"${part3}\" -a -n \"${part4}\" ]; then\n\t\t\tday1=${part2}\n\
    \t\t\tmonth1=${part1}\n\t\t\tday2=${part3}\n\t\t\tmonth2=${part1}\n\t\t\tday3=${part4}\n\
    \t\t\tmonth3=${part1}\n\t\t\tyear1=${part4}\n\t\t\tyear2=${part4}\n\t\t\tyear3=${part4}\n\
    \t\tfi\n\t\t# Check if the date string has 4 parts\n\t\tif [ -n \"${part2}\" -a\
    \ -n \"${part3}\" -a -n \"${part4}\" -a -n \"${part5}\" ]; then\n\t\t\tday1=${part2}\n\
    \t\t\tmonth1=${part1}\n\t\t\tday2=${part3}\n\t\t\tmonth2=${part1}\n\t\t\tday3=${part4}\n\
    \t\t\tmonth3=${part1}\n\t\t\tday4=${part5}\n\t\t\tmonth4=${part1}\n\t\t\tyear1=${part4}\n\
    \t\t\tyear2=${part4}\n\t\t\tyear3=${part4}\n\t\t\tyear4=${part4}\n\t\tfi\n\tesac\n\
    \n\t# Check if the date is in valid range\n\tif [ \"$month1\" -le \"12\" ] ||\
    \ [ \"$month2\" -le \"12\" ] || [ \"$month3\" -le \"12\" ] || [ \"$month4\" -le\
    \ \"12\" ]; then\n\t\techo \"Invalid date range\";\n\t\treturn;\n\tfi\n\tif [\
    \ \"$month1\" -gt \"12\" ] && [ \"$month2\" -gt \"12\" ] && ", "    date=$(date\
    \ -d \"$1\" 2>/dev/null)\n    if [ \"$?\" -eq \"0\" ]; then\n        if [[ $(echo\
    \ \"$date\" | awk '{print $4}') -lt 1 || $(echo \"$date\" | awk '{print $4}')\
    \ -gt 31 ]]; then\n            echo \"false\"\n            return 1\n        fi\n\
    \        if [[ $(echo \"$date\" | awk '{print $5}') -lt 1 || $(echo \"$date\"\
    \ | awk '{print $5}') -gt 30 ]]; then\n            echo \"false\"\n          \
    \  return 1\n        fi\n        if [[ $(echo \"$date\" | awk '{print $6}') -lt\
    \ 1 || $(echo \"$date\" | awk '{print $6}') -gt 29 ]]; then\n            echo\
    \ \"false\"\n            return 1\n        fi\n        if [[ $(echo \"$date\"\
    \ | awk '{print $2}') -lt 1 || $(echo \"$date\" | awk '{print $2}') -gt 12 ]];\
    \ then\n            echo \"false\"\n            return 1\n        fi\n       \
    \ if [[ $(echo \"$date\" | awk '{print $1}') != \"-\" && $(echo \"$date\" | awk\
    \ '{print $1}') != \"0\" ]]; then\n            echo \"false\"\n            return\
    \ 1\n        fi\n        if [[ $(echo \"$date\" | awk '{print $3}') != \"-\" &&\
    \ $(echo \"$date\" | awk '{print $3}') != \"0\" ]]; then\n            echo \"\
    false\"\n            return 1\n        fi\n    else\n        echo \"true\"\n \
    \       return 0\n    fi", "    if [ -z \"$1\" ]; then\n        echo \"Invalid\
    \ date\"\n    else\n        local date=\"$1\"\n        # Validate the date\n \
    \       if ! date -d \"$date\" > /dev/null; then\n            echo \"Invalid date\"\
    \n        else\n            if [[ $date =~ ^[0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9]$\
    \ ]]; then\n                local year=${date:0:4}\n                local month=${date:4:2}\n\
    \                local day=${date:6:2}\n                local dayCount=`expr ${month}\
    \ - ${day}`\n                local daysInMonth=`expr 31 - $dayCount`\n       \
    \         local dayMinusMonth=`expr ${day} - $month`\n                local dayMinusMonthCount=`expr\
    \ ${dayMinusMonth} - 31`\n                local monthCount=`expr ${month} - 2`\n\
    \                local monthMinusDay=`expr ${month} - 1`\n                local\
    \ monthMinusDayCount=`expr ${monthMinusDay} - 31`\n                local monthMinusYear=`expr\
    \ ${month} - 4`\n                local monthMinusYearCount=`expr ${monthMinusYear}\
    \ - 12`\n                local yearCount=`expr ${month} - 6`\n               \
    \ local yearMinusDay=`expr ${month} - 2`\n                local yearMinusDayCount=`expr\
    \ ${yearMinusDay} - 30`\n                if [ $month -eq 1 ] && [ $dayCount -eq\
    \ 31 ]; then\n                    echo \"true\"\n                elif [ $month\
    \ -eq 2 ] && [ $dayCount -eq 29 ]; then\n                    echo \"true\"\n \
    \               elif [ $month -eq 1 ] && [ $dayCount -gt 31 ] || [ $month -eq\
    \ 4 ] && [ $dayCount -gt 30 ] || [ $month -eq 6 ] && [ $dayCount -gt 31 ] || [\
    \ $month -eq 9 ] && [ $dayCount -gt 30 ] || [ $month -eq 11 ] && [ $dayCount -gt\
    \ 29 ]; then\n                    echo \"false\"\n                elif [ $dayCount\
    \ -eq 31 ] && [ $month -eq 1 ] || [ $dayCount -eq 31 ] && [ $month -eq 4 ] ||\
    \ [ $dayCount -eq 31 ] && [ $month -eq 6 ] || [ $dayCount -eq 31 ] && [ $month\
    \ -eq 9 ] || [ $dayCount -eq 31 ] && [ $month -eq 11 ]; then\n               \
    \     echo \"false\"\n                elif [ $dayCount -gt 31 ] && [ $month -eq\
    \ 2 ] || [ $dayCount -gt 31 ] && ", "    [ -z \"$1\" ] && return 1\n    # [[ $1\
    \ =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]] && return 0\n    [[ $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\
    \ ]] && return 0\n    \n    day=$(( $(date -d \"$1\" +%s) - $(date +%s) ))\n \
    \   # return true if $day >= 1 && $day <= 31\n    # return false if $day < 1 ||\
    \ $day > 31\n    # return false if $day < 1 || $day > 30\n    # return true if\
    \ $day < 1 || $day > 29\n    return 1", "    echo \"$1\"|awk -F- '{\n    # Get\
    \ the date in a variable\n    day=$1;\n    month=$2;\n    year=$3;\n    \n   \
    \ # Get the number of days in a month\n    for(i=1;i<=12;i++){\n        if(i==month){\n\
    \            days_in_month[$i]=$i;\n        }\n    }\n    \n    # Get the number\
    \ of days in a year\n    for(i=1;i<=365;i++){\n        if(i==year){\n        \
    \    days_in_year=$i;\n        }\n    }\n    \n    # Get the first day of the\
    \ month\n    for(i=1;i<=days_in_month[$month];i++){\n        day_of_month=$i;\n\
    \    }\n    \n    # Get the last day of the month\n    for(i=days_in_month[$month];i<days_in_year;i++){\n\
    \        day_of_month=$i;\n    }\n    \n    # Check if the first day is the last\
    \ day of the month\n    for(i=1;i<days_in_month[$month];i++){\n        day_of_month=$i;\n\
    \        if(day_of_month==days_in_month[$month]){\n            day_of_month=$i-1;\n\
    \        }\n    }\n    \n    # Check if the first day of the month is a valid\
    \ date\n    # i.e. greater than or equal to the second day of the month\n    if(day_of_month>=days_in_month[$month]){\n\
    \        day_of_month=days_in_month[$month];\n    }\n    \n    # Check if the\
    \ last day of the month is a valid date\n    # i.e. less than or equal to the\
    \ third day of the month\n    if(day_of_month<=days_in_month[$month]){\n     \
    \   day_of_month=days_in_month[$month];\n    }\n    \n    # Check if the last\
    \ day is a valid date\n    if(day_of_month==days_in_month[$month]){\n        day_of_month=days_in_year;\n\
    \    }\n    \n    # Check if the first day is valid date\n    if(day_of_month==1){\n\
    \        day_of_month=days_in_year;\n    }\n    \n    # Check if the last day\
    \ is valid date\n    if(day_of_month==days_in_year){\n        day_of_month=days_in_year-1;\n\
    \    }\n    \n    # If day_of_month is valid, return true\n    if(day_of_month>=1){\n\
    \        if(day_of_month<=days_in_month[$month]){\n            return 1;\n   \
    \     }\n    }\n    \n    # If day_of_month is invalid, return false\n    return\
    \ 0;", "    local string=\"$1\"\n\n    # Check if the string is not empty\n  \
    \  [[ -z \"${string}\" ]] && return 1\n\n    # Get the number of days in the month\n\
    \    local number_of_days_in_month=()\n    for (( i=1;i<=31;i++ )); do\n     \
    \   number_of_days_in_month+=( $(date -d \"${string} +%d\" \"+%d\") )\n    done\n\
    \    for (( i=4;i<=12;i++ )); do\n        number_of_days_in_month+=( $(date -d\
    \ \"${string} +%d\" \"+%d\") )\n    done\n    number_of_days_in_month+=( $(date\
    \ -d \"${string} +%d\" \"+%d\") )\n\n    # Check if the date is in the right format\n\
    \    [[ ${#number_of_days_in_month[@]} -lt 2 ]] && return 1\n    [[ ${number_of_days_in_month[0]}\
    \ -lt 1 ]] && return 1\n    [[ ${number_of_days_in_month[1]} -lt 1 ]] && return\
    \ 1\n    [[ ${number_of_days_in_month[2]} -lt 1 ]] && return 1\n    [[ ${number_of_days_in_month[3]}\
    \ -lt 1 ]] && return 1\n    [[ ${number_of_days_in_month[4]} -lt 1 ]] && return\
    \ 1\n    [[ ${number_of_days_in_month[5]} -lt 1 ]] && return 1\n    [[ ${number_of_days_in_month[6]}\
    \ -lt 1 ]] && return 1\n    [[ ${number_of_days_in_month[7]} -lt 1 ]] && return\
    \ 1\n    [[ ${number_of_days_in_month[8]} -lt 1 ]] && return 1\n    [[ ${number_of_days_in_month[9]}\
    \ -lt 1 ]] && return 1\n    [[ ${number_of_days_in_month[10]} -lt 1 ]] && return\
    \ 1\n    [[ ${number_of_days_in_month[11]} -lt 1 ]] && return 1\n\n    # Check\
    \ if the days are in the correct range\n    if [[ ${number_of_days_in_month[1]}\
    \ -lt 1 ]] || [[ ${number_of_days_in_month[1]} -gt 31 ]]; then\n        echo \"\
    Invalid month. Month is correct but date is not in correct range.\"\n        return\
    \ 1\n    elif [[ ${number_of_days_in_month[2]} -lt 1 ]] || [[ ${number_of_days_in_month[2]}\
    \ -gt 31 ]]; then\n        echo \"Invalid month. Month is correct but date is\
    \ not in correct range.\"\n        return 1\n    elif [[ ${number_of_days_in_month[3]}\
    \ -lt 1 ]] || [[ ${number_of_days_in_month[3]} -gt 30 ]]; then\n        echo \"\
    Invalid month. Month is correct but date is not ", "\t[ -z \"$1\" ] && return\
    \ 1\n\t[ -n \"$1\" ] && return 1\n\tcase \"$1\" in\n\t\t[0-9][0-9])|(29))\n\t\t\
    \t[[ $(expr \"$1\" : '[0-9][0-9])') -le 12 ]] && return 1\n\t\t\t[[ $(expr \"\
    $1\" : '[0-9][0-9])') -gt 12 ]] && return 1\n\t\t\t[[ $(expr \"$1\" : '29')) -le\
    \ 29 ]] && return 1\n\t\t\t[[ $(expr \"$1\" : '29')) -gt 29 ]] && return 1\n\t\
    \t\t;;\n\t\t[1-31]|(31))\n\t\t\t[[ $(expr \"$1\" : '[1-31]') -le 31 ]] && return\
    \ 1\n\t\t\t[[ $(expr \"$1\" : '[1-31]') -gt 31 ]] && return 1\n\t\t\t;;\n\t\t\
    [0-30]|(30))\n\t\t\t[[ $(expr \"$1\" : '[0-30]') -le 30 ]] && return 1\n\t\t\t\
    [[ $(expr \"$1\" : '[0-30]') -gt 30 ]] && return 1\n\t\t\t;;\n\t\t[0-1]|(12))\n\
    \t\t\t[[ $(expr \"$1\" : '[0-1]') -le 12 ]] && return 1\n\t\t\t[[ $(expr \"$1\"\
    \ : '[0-1]') -gt 12 ]] && return 1\n\t\t\t;;\n\t\t*)\n\t\t\t[[ $(expr \"$1\" :\
    \ '[0-9][0-9])|(29))|[1-31]|(31))|[0-30]|(30))|[0-1]|(12)]\n\t\t\treturn 1\n\t\
    \t\t;;\n\tesac", "  local DATE_FORMAT='%m-%d-%Y';\n  local DAYS=(31 28 31 30 31\
    \ 30 31 30 31 30 31 30 31); local MONTHS=(2 4 6 9 11); local YEARS=(2000 2000\
    \ 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000);\n  local\
    \ MONTH_INDEX=${1:0:2}; local DAY_OF_MONTH=${1:2:2}; local YEAR=${1:4:4};\n  if\
    \ [ -z \"$1\" ]; then echo \"Date is not valid\"; return 1; fi;\n  if [[ $MONTHS[$DAY_OF_MONTH]\
    \ -lt 1 || $MONTHS[$DAY_OF_MONTH] -gt 12 ]]; then\n    echo \"Month is not valid\"\
    ; return 1; fi;\n  if [[ $MONTH_INDEX -le 0 || $MONTH_INDEX -gt 12 ]]; then\n\
    \    echo \"Month Index is not valid\"; return 1; fi;\n  if [[ \"$MONTH_INDEX\"\
    \ -lt 1 || \"$MONTH_INDEX\" -gt 12 ]]; then\n    echo \"Month Index out of range\"\
    ; return 1; fi;\n  if [[ \"$DAY_OF_MONTH\" -lt 1 || \"$DAY_OF_MONTH\" -gt $DAYS[$DAY_OF_MONTH]\
    \ ]]; then\n    echo \"Day of Month is not valid\"; return 1; fi;\n  if [[ \"\
    $YEAR\" -lt 0 || \"$YEAR\" -gt $YEARS[$DAY_OF_MONTH] ]]; then\n    echo \"Year\
    \ is not valid\"; return 1; fi;\n  if [[ $YEAR -eq $DAY_OF_MONTH ]]; then\n  \
    \  echo \"Year and Day of Month are not equal\"; return 1; fi;\n  if [[ \"$YEAR\"\
    \ -gt $YEARS[$DAY_OF_MONTH] ]]; then\n    echo \"Year is not valid\"; return 1;\
    \ fi;\n  if [[ \"$YEAR\" -lt $YEARS[$DAY_OF_MONTH] ]]; then\n    echo \"Year is\
    \ not valid\"; return 1; fi;\n  if [[ \"$YEAR\" -eq $YEARS[$DAY_OF_MONTH] ]];\
    \ then\n    echo \"Year and Day of Month are not equal\"; return 1; fi;\n  if\
    \ [[ \"$YEAR\" -le $YEARS[$DAY_OF_MONTH] ]]; then\n    echo \"Year is not valid\"\
    ; return 1; fi;\n  local VALID_DATE_STRING=\"$DATE_FORMAT $DAY_OF_MONTH-$MONTH_INDEX-$YEAR\"\
    ;\n  [[ \"$VALID_DATE_STRING\" =~ $1 ]] && echo \"true\" || echo \"false\";",
  "  [[ -n $1 ]] || return 1\n  local date=\"${1##*/}\"\n  local date=\"$(date -d\
    \ \"$1\" +%d)\"\n  [[ \"$date\" -lt 1 || \"$date\" -gt 31 ]] || return 0\n  local\
    \ year=\"$(date -d \"$1\" +%s)\"\n  local month=\"$(date -d \"$1\" +%m)\"\n  [[\
    \ \"$month\" -lt 1 || \"$month\" -gt 12 ]] || return 0\n  [[ \"$year\" -lt 1970\
    \ ]] || return 0\n  return 1", "  local date=\"$1\"\n  local year=\"${date:0:4}\"\
    \n  local month=\"${date:5}\"\n  local day=\"${date:6}\"\n  local days=\"${day}\"\
    \n  local month_length='0123'\n  local is_valid_month\n\n  if [ -z \"$date\" ];\
    \ then\n    echo \"The date string cannot be empty.\"\n    return 1\n  fi\n\n\
    \  if [ \"${days}\" -gt 31 ] || [ \"${days}\" -le 1 ]; then\n    echo \"Number\
    \ of days is invalid.\"\n    return 1\n  fi\n\n  if [ \"${days}\" -gt 30 ] ||\
    \ [ \"${days}\" -le 1 ]; then\n    echo \"Number of days is invalid.\"\n    return\
    \ 1\n  fi\n\n  if [ \"${month}\" -lt 1 ] || [ \"${month}\" -gt 12 ]; then\n  \
    \  echo \"Month is invalid.\"\n    return 1\n  fi\n\n  if [ \"${month}\" -gt 2\
    \ ]; then\n    echo \"Month is invalid.\"\n    return 1\n  fi\n\n  is_valid_month=false\n\
    \  for i in \"${month_length[@]}\"\n  do\n    case $i in\n      \"${month}\")\
    \ is_valid_month=true;;\n      *) continue;; # Skip the rest\n    esac\n  done\n\
    \n  if [ \"$is_valid_month\" == false ]; then\n    echo \"Month is invalid.\"\n\
    \    return 1\n  fi\n\n  local days_in_month\n  days_in_month=`expr \"$days\"\
    \ \"$i\"`\n\n  if [ \"$days_in_month\" -eq 31 ] || [ \"$days_in_month\" -eq 30\
    \ ] || [ \"$days_in_month\" -eq 29 ]; then\n    echo \"Number of days is invalid.\"\
    \n    return 1\n  fi\n\n  if [ \"$year\" != \"20$year\" ] && [ \"$year\" != \"\
    19$year\" ]; then\n    echo \"Year is invalid.\"\n    return 1\n  fi\n\n  local\
    \ month_number\n  month_number=$(( ((10#$month) - 1) + 1 ))\n  if [ \"$month_number\"\
    \ -lt 1 ] || [ \"$month_number\" -gt 12 ]; then\n    echo \"Month is invalid.\"\
    \n    return 1\n  fi\n\n  return 0", "  local datestr=\"$1\"\n  if ! [[ \"${datestr}\"\
    \ =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then\n    return 1\n  fi\n  local year=\"\
    ${datestr%-*}\"\n  if [[ ${year} == [0-9] || ${year} == \"-\" ]]; then\n    return\
    \ 1\n  fi\n  local month=\"${datestr##*-}\"\n  if [[ ${month} == [0-9] || ${month}\
    \ == \"-\" ]]; then\n    return 1\n  fi\n  local day=\"${datestr#*-*}\"\n  if\
    \ [[ ${day} == [0-9] || ${day} == \"-\" ]]; then\n    return 1\n  fi\n  local\
    \ montharray=({01..12} {04..09} {11..29})\n  local dayarray=({01..31} {04..30}\
    \ {6..29})\n  local monthcheck=0\n  for (( i=0; i<${#montharray[@]}; i++ )); do\n\
    \    if [[ \"${montharray[i]}\" == \"${month}\" ]]; then\n      monthcheck=1\n\
    \      break\n    fi\n  done\n  if [[ \"${monthcheck}\" != 1 ]]; then\n    return\
    \ 1\n  fi\n  for (( i=0; i<${#dayarray[@]}; i++ )); do\n    if [[ \"${dayarray[i]}\"\
    \ == \"${day}\" ]]; then\n      return 0\n    fi\n  done\n  return 1", "    #\
    \ Validate date string\n    if [ -z \"$1\" ]; then\n        return 1\n    fi\n\
    \    \n    # Validate mm-dd-yyyy format\n    if [ \"$(date -d \"$1\" 2>/dev/null)\"\
    \ != $(date -d \"$1\" --date=\"01-01-1970\" 2>/dev/null) ]; then\n        return\
    \ 0\n    fi\n    \n    # Validate days limit\n    days_limit=30\n    if [[ $(date\
    \ -d \"$1\" --date=\"01-01-1970\" 2>/dev/null | awk -F- '{print $1}') == \"01\"\
    \ ]]; then\n        days_limit=1\n    fi\n    if [[ $(date -d \"$1\" --date=\"\
    01-01-1970\" 2>/dev/null | awk -F- '{print $1}') == \"02\" ]]; then\n        days_limit=1\n\
    \    fi\n    if [[ $(date -d \"$1\" --date=\"01-01-1970\" 2>/dev/null | awk -F-\
    \ '{print $1}') == \"03\" ]]; then\n        days_limit=1\n    fi\n    if [[ $(date\
    \ -d \"$1\" --date=\"01-01-1970\" 2>/dev/null | awk -F- '{print $1}') == \"04\"\
    \ ]]; then\n        days_limit=1\n    fi\n    if [[ $(date -d \"$1\" --date=\"\
    01-01-1970\" 2>/dev/null | awk -F- '{print $1}') == \"05\" ]]; then\n        days_limit=1\n\
    \    fi\n    if [[ $(date -d \"$1\" --date=\"01-01-1970\" 2>/dev/null | awk -F-\
    \ '{print $1}') == \"06\" ]]; then\n        days_limit=1\n    fi\n    if [[ $(date\
    \ -d \"$1\" --date=\"01-01-1970\" 2>/dev/null | awk -F- '{print $1}') == \"07\"\
    \ ]]; then\n        days_limit=1\n    fi\n    if [[ $(date -d \"$1\" --date=\"\
    01-01-1970\" 2>/dev/null | awk -F- '{print $1}') == \"08\" ]]; then\n        days_limit=1\n\
    \    fi\n    if [[ $(date -d \"$1\" --date=\"01-01-1970\" 2>/dev/null | awk -F-\
    \ '{print $1}') == \"09\" ]]; then\n        days_limit=1\n    fi\n    if [[ $(date\
    \ -d \"$1\" --date=\"01-01-1970\" 2>/dev/null | awk -F- '{print $1}') == \"10\"\
    \ ]]; then\n        days_limit=1\n    fi\n    if [[ $(date -d \"$1\" --date=\"\
    01-01-1970\" 2>/dev/null | awk -F- '{print $"]
stop_tokens:
- "\n}"
