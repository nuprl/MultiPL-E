language: sh
name: HumanEval_68_pluck
results:
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    declare -i i n result\n    declare -a nodes\n    nodes=(\
    \ $1 )\n    for ((i=0; i<${#nodes[@]}; i++)); do\n        [[ -z ${nodes[$i]} ]]\
    \ && break\n    done\n    # nodes is guaranteed to have an even number of elements.\n\
    \    [[ -z ${nodes[$i]} ]] && return 0\n    # Sort the even elements.\n    sort\
    \ ${nodes[@]} 2> /dev/null | tr ' ' '\\n' | sort -n | awk '{print $2}'\n}\n\n\
    candidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  # Your code here\n  mapfile -t arr < <(sort -u <<<\"$1\"\
    ) \n  if [[ ${#arr[@]} -eq 0 ]]; then\n    echo []\n  elif [[ ${arr[0]} -eq 0\
    \ ]]; then\n    echo []\n  elif [[ ${arr[0]} -le 4 ]]; then\n    echo -n \"$1\"\
    \n    echo -n \"[\\\"${arr[0]}\\\", \\\"${arr[1]}\\\"}\"\n  else\n    local min\n\
    \    min=$((${arr[0]} % 2 ))\n    for (( i = 0; i < ${#arr[@]}; i++ )); do\n \
    \     local cur=\"${arr[$i]}\"\n      if [[ \"$cur\" -le \"$min\" ]]; then\n \
    \       min=$(( ${arr[$i]} % 2 ))\n      fi\n    done\n    echo -n \"$1\"\n  \
    \  echo -n \"[\\\"${arr[$min]}\\\", \\\"${min}\\\"}\"\n  fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7hlvtple.sh: line 34: [[: 4 2 3: syntax error in expression (error
    token is "2 3")

    /tmp/tmp7hlvtple.sh: line 36: [[: 4 2 3: syntax error in expression (error token
    is "2 3")

    /tmp/tmp7hlvtple.sh: line 41: 4 2 3 % 2 : syntax error in expression (error token
    is "2 3 % 2 ")

    '
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local node i s smallest index value\n    for ((i=0; i <\
    \ ${#1[@]}; i++)); do\n        node=${1[$i]}\n        value=${node%?}\n      \
    \  if [[ \"$value\" -eq \"0\" ]]; then\n            index=${node##* }\n      \
    \      value=${value%?}\n        fi\n        if [[ -z \"$value\" ]]; then\n  \
    \          return 2\n        fi\n        smallest=$(echo $value | cut -c -2)\n\
    \        while [[ \"$smallest\" -le \"0\" ]]; do\n            smallest=$(echo\
    \ $smallest | cut -c -1)\n        done\n        if [[ \"$smallest\" -eq \"0\"\
    \ ]]; then\n            smallest=null\n        fi\n        if [[ -z \"$smallest\"\
    \ ]]; then\n            continue\n        fi\n        if [[ \"$value\" -eq \"\
    $smallest\" ]]; then\n            echo $value\n            echo $index\n     \
    \       return $smallest\n        fi\n        if [[ \"$smallest\" -gt \"$value\"\
    \ ]]; then\n            echo $value\n            echo $index\n            return\
    \ $smallest\n        fi\n    done\n    echo []\n    return 0\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1303ha8d.sh: line 31: i < ${#1[@]}: bad substitution

    '
  stdout: ''
  timestamp: 1660055523
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local numbers=\"$1\"\n  if [[ $numbers ]]; then\n    local\
    \ numbers=( $numbers )\n    local smalest_value\n    local smallest_index\n  \
    \  local i\n\n    # sort the numbers\n    IFS=' ' read -r -a numbers <<< \"${numbers}\"\
    \n    IFS=' ' read -r -a nums <<< \"${numbers}\"\n    for (( i = 0; i < ${#nums[@]};\
    \ i++ )); do\n      smalest_value=\"${nums[$i]}\"\n      smallest_index=\"${i}\"\
    \n      # sort them using shellsort algorithm\n      # shellsort requires integers\n\
    \      nums[$i]=$(( ${nums[$i]} + 1 ))\n    done\n    IFS=' ' read -r -a nums\
    \ <<< \"${nums[@]}\"\n\n    # find the smallest even number\n    smalest_value=\"\
    \"\n    smallest_index=0\n    for (( i = 0; i < ${#nums[@]}; i++ )); do\n    \
    \  if [[ ${nums[$i]} % 2 == 0 ]]; then\n        smalest_value=\"${nums[$i]}\"\n\
    \        smallest_index=\"${i}\"\n      fi\n    done\n\n    # append the smallest\
    \ even value\n    smallest_even_value=\"${smallest_value}\"\n    if [[ \"${smallest_index}\"\
    \ != 0 ]]; then\n      smallest_even_value=\"${smallest_even_value} ${smallest_index}\"\
    \n    fi\n\n    echo  \"[\\\"${smallest_even_value}\\\", \\\"${smallest_index}\\\
    \"\"\n  else\n    echo  \"\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1adjfel1.sh: line 53: conditional binary operator expected

    /tmp/tmp1adjfel1.sh: line 53: syntax error near `%''

    /tmp/tmp1adjfel1.sh: line 53: `      if [[ ${nums[$i]} % 2 == 0 ]]; then''

    '
  stdout: ''
  timestamp: 1660055523
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  mapfile -t -n 1 < <(printf '%s\\n' \"$1\")\n  local smalest_val\n\
    \  local smalest_idx\n  while read -r node i || [[ -n \"$node\" ]] &&\n    (smalest_val=\"\
    $(echo \"$node\" | cut -d ' ' -f 2)\" ||\n     smalest_val=\"$node\" ||\n    \
    \ (smalest_val=\"$node\" &&\n      smalest_idx=\"$i\"))\n  do\n    if [ \"$(echo\
    \ \"$node\" | cut -d ' ' -f 2\" | grep -E -e '^[02468]$' | wc -l)\" -eq 1 ]\n\
    \    then\n      break\n    fi\n  done < <(\n    printf '%s\\n' \"${a[@]}\" |\n\
    \      sort -n |\n      awk '$1 ~ \"^[02468]\" { print $2, $1 }' )\n  if [[ -z\
    \ \"$smalest_val\" ]] ; then\n    smalest_val=\"\"\n    smalest_idx=\"\"\n  else\n\
    \    printf \"[ '%s', '%s' ]\\n\" \"$smalest_val\" \"$smalest_idx\"\n  fi\n  unset\
    \ -v smalest_val smalest_idx\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbpmogv3h.sh: line 39: unexpected EOF while looking for matching
    `)''

    /tmp/tmpbpmogv3h.sh: line 73: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local n=$1\n  echo \"${n}\" | tr \" \" \",\" | sed \"s/^/[/\"\
    \n  echo \"${n}\" | tr \" \" \",\" | sed \"s/$/]/\" | awk -F, '{print $1\"@\"\
    $2}' | sort --version-sort --field-separator=@ --key \"@\" --key \"1\"\n}\n\n\
    candidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "sort: invalid number at field start: invalid count at start of \u2018@\u2019\
    \n"
  stdout: ''
  timestamp: 1660055523
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  # Your code here\n}\n\ncandidate() {\n    pluck \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfif0xh5n.sh: line 31: syntax error near unexpected token `}''

    /tmp/tmpfif0xh5n.sh: line 31: `}''

    '
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local i=0\n    local min=$1[i]\n    local min_index=0\n\
    \    while [ $i -lt ${#1}]\n    do\n        if [ $min -eq $1[$i] ]\n        then\n\
    \            min_index=$i\n        fi\n        i=$((i+1))\n    done\n    echo\
    \ \"$min\"\n    echo \"$min_index\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4haycvl1.sh: line 33: [: missing `]''

    '
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes\n    IFS=' '\n    local -i size\n\n    nodes=$1\
    \ \n    size=${#nodes[@]}\n    if [ ${size} -eq 0 ] ; then\n        echo []\n\
    \    else\n        local index\n        local value\n        local mvalue\n  \
    \      local mindex\n        for index in $(seq 0 ${size}); do\n            value=${nodes[index]}\n\
    \            if [ \"$value\" -ge 0 ]; then\n                if [ \"$value\" -eq\
    \ \"$mvalue\" ]; then\n                    if [ \"$index\" -eq \"$mindex\" ];\
    \ then\n                        echo []\n                    else\n          \
    \              echo [[ \"$mvalue\" ]]\n                        echo [[ \"$mindex\"\
    \ ]]\n                        echo [[ \"$index\" ]]\n                        return\n\
    \                    fi\n                else\n                    mvalue=$value\n\
    \                    mindex=$index\n                fi\n            else\n   \
    \             echo []\n                break\n            fi\n        done\n \
    \       echo [[ \"$mvalue\" ]]\n        echo [[ \"$mindex\" ]]\n        echo [[\
    \ \"$index\" ]]\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxqpp8k39.sh: line 44: 0

    1: syntax error in expression (error token is "1")

    '
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local index=$1 values=$(echo $1 | tr -s ' ' ',' | sort -r)\n\
    \  [[ \"${#values}\" -eq 0 ]] && return 0\n  [[ \"${#values}\" -eq 1 ]] && return\
    \ 0\n  local i=0\n  while [[ -n \"${values[i]}\" ]]; do\n    local value=$(echo\
    \ ${values[i]} | cut -d' ' -f1)\n    if [[ \"${value}\" -gt 0 ]]; then\n     \
    \ (( index++))\n      [[ \"${value}\" -gt $(( $value % 2 )) ]] || break\n    fi\n\
    \    (( i++ ))\n  done\n  echo ${values[$i]}\n}\n\ncandidate() {\n    pluck \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpm45vch47.sh: line 37: ((: 4 2 3: syntax error in expression (error
    token is "2 3")

    '
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    echo \"$1\" | grep -Po \"(?<=\\d)(?=(?:even|odd)\\d*)\"\
    \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055523
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  if [[ ! -z $1 ]] && [[ \"$1\" =~ ^[0-9]+$ ]]; then\n    local\
    \ numbers_str=\"$1\"\n    local numbers=()\n    local smalest_even_value\n   \
    \ local smalest_even_index\n\n    local i=0\n    while IFS= read -r node; do\n\
    \      ((i++))\n      if [[ \"$node\" =~ ^[0-9]+$ ]]; then\n        numbers+=(\"\
    $node\")\n      fi\n    done <<<\"$numbers_str\"\n\n    smalest_even_value=\"\
    ${numbers[0]}\"\n    smalest_even_index=-1\n    for ((i = 0; i < ${#numbers[@]};));\
    \ do\n      local j=0\n      local tmp\n      for ((j = 0; j < ${#numbers[@]};\
    \ j++)); do\n        tmp=\"${numbers[$j]\"}\"\n        if [[ \"$tmp\" == ${smalest_even_value}*\
    \ ]]; then\n          smalest_even_value=\"${numbers[$j]\"}\"\n          smalest_even_index=\"\
    $j\"\n        fi\n      done\n      ((i++))\n    done\n\n    local returned_numbers\n\
    \    returned_numbers=()\n    for ((i = 0; i < ${#numbers[@]};)); do\n      if\
    \ [[ \"$numbers[$i]\" == $smalest_even_value ]]; then\n        returned_numbers+=(\"\
    $numbers[$i]\")\n      fi\n      ((i++))\n    done\n    if [[ -z $returned_numbers\
    \ ]]; then\n      return 0\n    fi\n    local returned_node_and_index\n    returned_node_and_index=\"\
    ${returned_numbers[0]} $smalest_even_index\"\n    for ((i = 1; i < ${#returned_numbers[@]};));\
    \ do\n      local j=0\n      for ((j = 0; j < ${#returned_numbers[@]}; j++));\
    \ do\n        if [[ \"$returned_numbers[$j+1]\" == $returned_numbers[$j] ]]; then\n\
    \          returned_node_and_index=\"${returned_numbers[$j]} $j\"\n          break\n\
    \        fi\n      done\n      ((i++))\n    done\n    if [[ -z $returned_node_and_index\
    \ ]]; then\n      return 0\n    fi\n    echo \"$returned_node_and_index\"\n  else\n\
    \    return 0\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqyw35glr.sh: line 104: unexpected EOF while looking for matching
    `"''

    /tmp/tmpqyw35glr.sh: line 108: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    # initialize result array\n    result=()\n    # read each\
    \ value from each argument\n    mapfile -t array < <(echo -e \"${1}\")\n    #\
    \ sort the array\n    sort -t \" \" -k \"${array[0]}\" -r \"${array[@]}\"\n  \
    \  # loop through the sorted array\n    for i in \"${array[@]}\"\n    do\n   \
    \     # if the current value is the smallest even value then add it to result\n\
    \        if (( \"${i%%[!0]}\" == \"${i}\" )) ; then\n            result+=( \"\
    ${i}\" )\n        fi\n    done\n    # return result\n    echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "sort: stray character in field spec: invalid field specification \u2018\
    4 2 3\u2019\n/tmp/tmpp9w25ylr.sh: line 40: ((: 4 2  == 4 2 3 : syntax error in\
    \ expression (error token is \"2  == 4 2 3 \")\n"
  stdout: ''
  timestamp: 1660055523
- exit_code: -1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local values=($(sort -n))\n    local smallest=$(echo ${values[0]}\
    \ | awk '{print $1%2}')\n    if [ -z ${values[0]} ] || [ \"${smallest}\" == \"\
    1\" ]; then\n        echo \"[]\"\n    else\n        echo ${values[@]} | awk -v\
    \ m=${smallest} '{print $m}'\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=21 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=16 encoding='utf-8'>
  timestamp: 1660055528
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=(\"${1}\")\n    local smalest_value=0\n   \
    \ local smalest_node_index=0\n    local j=0\n    local k=0\n    local i=0\n  \
    \  while [ $i -lt ${#nodes[*]} ]; do\n        if [ ${nodes[i]} -eq ${smalest_value}\
    \ ]; then\n            if [ \"${nodes[${i}]}\" = \"${smalest_value}\" ]; then\n\
    \                if [ ${smalest_value} -eq 0 ]; then\n                    smalest_node_index=${i}\n\
    \                elif [ ${smalest_value} -gt 0 ]; then\n                    smalest_node_index=${i}\n\
    \                fi\n            fi\n        fi\n        i=$((i + 1))\n    done\n\
    \    local j=0\n    while [ $j -lt ${#nodes[*]} ]; do\n        if [ ${nodes[j]}\
    \ -eq ${smalest_value} ]; then\n            if [ \"${nodes[${j}]}\" = \"${smalest_value}\"\
    \ ]; then\n                if [ ${smalest_value} -eq 0 ]; then\n             \
    \       smalest_node_index=${j}\n                elif [ ${smalest_value} -gt 0\
    \ ]; then\n                    smalest_node_index=${j}\n                fi\n \
    \           fi\n        fi\n        j=$((j + 1))\n    done\n    if [ \"${#nodes[@]}\"\
    \ = 0 ]; then\n        echo \"[]\"\n    else\n        echo \"[ '\"$(echo \"${nodes[smalest_node_index]:0:-1}\"\
    )\"', '\"${smalest_node_index}\"' ]\"\n    fi\n}\n\ncandidate() {\n    pluck \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpaphyi0t0.sh: line 37: [: too many arguments

    /tmp/tmpaphyi0t0.sh: line 50: [: too many arguments

    '
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n   local n=$1\n   n=$(echo \"${n}\" | sed 's/\\([0-9][0-9]*\\\
    ) /\\1/')\n   n=$(echo \"${n}\" | sed 's/[0-9][0-9]*//g')\n   n=$(echo \"${n}\"\
    \ | sed 's/ //g')\n   local j=0\n   for i in $(echo \"${n}\" | sed 's/[0-9][0-9]*//g');\
    \ do\n      j=$((j+i))\n   done\n   j=$((j+1))\n   n=$(echo \"${n}\" | sed 's/[0-9][0-9]*//g')\n\
    \   for i in $(echo \"${n}\" | sed 's/[0-9][0-9]*//g'); do\n      if [ $((j%2))\
    \ -eq 0 ]; then\n         echo \"${i}\"\n      fi\n      j=$((j+i))\n   done\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local current_value current_index current_index\
    \ value\n    local smalest_value smalest_index smalest_index smalest_value smalest_value_index\n\
    \    local i j\n    smalest_value_index=0\n    smalest_value=$(echo $nodes | awk\
    \ '{if($0>0)print $1}')\n    smalest_value_index=$(echo $nodes | awk '{if($0>0)print\
    \ $1}' | sort -nr | head -1 | awk -F\"[\" '{print $2}')\n    for (( i=0; i<${#smalest_value};\
    \ i++ )); do\n        current_value=$(echo $nodes | awk -F\"[\" '{print $i}')\n\
    \        if (( $current_value == $smalest_value )); then\n            current_index=$(echo\
    \ $nodes | awk -F\"[\" '{print $i}' | sort -nr | head -1 | awk -F\"[\" '{print\
    \ $2}')\n            if (( $current_index == $smalest_value_index )); then\n \
    \               continue\n            fi\n        fi\n        current_index=$(echo\
    \ $nodes | awk -F\"[\" '{print $i}' | sort -nr | head -1 | awk -F\"[\" '{print\
    \ $2}')\n        current_value=$(echo $nodes | awk -F\"[\" '{print $i}')\n   \
    \     if (( $current_index == $smalest_index )); then\n            continue\n\
    \        fi\n        smalest_value=${current_value}\n        smalest_value=$(echo\
    \ $current_value | awk '{if($0>0)print $1}')\n        smalest_value_index=${current_index}\n\
    \        smalest_value_index=$(echo $current_index | awk '{if($0>0)print $1}'\
    \ | sort -nr | head -1 | awk -F\"[\" '{print $2}')\n    done\n    if [ -z \"$smalest_value\"\
    \ ]; then return \"\"; fi\n    echo $smalest_value\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpoojhicmg.sh: line 39: ((: 4 2 3 == 4 : syntax error in expression
    (error token is "2 3 == 4 ")

    /tmp/tmpoojhicmg.sh: line 47: ((: ==  : syntax error: operand expected (error
    token is "==  ")

    '
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local items=(\"$@\")\n  local result=()\n  local min_index\n\
    \  local min_value\n  local max_value\n  local node\n  local index\n  local value\n\
    \  local i\n  local count\n  index=0\n  count=${#items[@]}\n  for ((i=1; i<=count;\
    \ i++));\n  do\n    node=$(echo \"${items[i]}\" | cut -d' ' -f1)\n    value=$(echo\
    \ \"${items[i]}\" | cut -d' ' -f2)\n    if [ \"${value}\" -ge \"${min_value}\"\
    \ ];\n    then\n      min_value=${value}\n      min_index=${index}\n    fi\n \
    \   index=$((${index} + 1))\n  done\n  if [ -n \"${min_value}\" ];\n  then\n \
    \   if [ ${index} -eq ${#min_value} ];\n    then\n      result=( \"${min_value}\"\
    \ )\n    else\n      if [ \"${min_value}\" -le \"${max_value}\" ];\n      then\n\
    \        value=${min_value}\n        result=( \"${min_value}\" )\n      fi\n \
    \   fi\n  fi\n  if [ -n \"${result}\" ];\n  then\n    return ${result}\n  else\n\
    \    return ${result[@]}\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpinxnmn3p.sh: line 46: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    echo \"$1\" | cut -d\" \" -f 2\n}\n\ncandidate() {\n  \
    \  pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local IFS=\" \"\n  local arr=($1)\n  local small=100000\n\
    \  local small_index=0\n  local node\n  for ((i = 0; i < ${#arr[@]}; ++i)); do\n\
    \    node=${arr[$i]}\n    if [[ ${#node} -gt 0 ]]; then\n      if (( ${node%%[!0]}\
    \ == 0 )); then\n        if (( ${node%%[0*]} < small )); then\n          small=${node%%[!0]}\n\
    \          small_index=${i}\n        fi\n      fi\n    fi\n  done\n  # echo $small_index\n\
    \  # echo $small\n  echo '[' ${arr[$small_index]} ' ' $small_index ']'\n}\n\n\
    candidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0q9mysc6.sh: line 38: ((: == 0 : syntax error: operand expected
    (error token is "== 0 ")

    /tmp/tmp0q9mysc6.sh: line 38: ((: == 0 : syntax error: operand expected (error
    token is "== 0 ")

    /tmp/tmp0q9mysc6.sh: line 38: ((: == 0 : syntax error: operand expected (error
    token is "== 0 ")

    '
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -i n i min=$1 cur=$2\n  IFS=$'\\n' read -a arr <<<\
    \ $min\n  if [ \"${#arr[@]}\" = \"0\" ]; then\n    return 1\n  fi\n  for (( n=0;\
    \ n < ${#arr[@]}; n++ )); do\n    (( i = n + $min))\n    if [ $((cur-arr[i]))\
    \ -gt 0 ]; then\n      min=$i\n    fi\n  done\n  printf \"'%s'\" \"${arr[@]}\"\
    \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3qoijnl3.sh: line 30: local: 4 2 3: syntax error in expression
    (error token is "2 3")

    '
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smallest_value=-1\n    local\
    \ index=0\n    local min_even=0\n    local smallest_index=0\n    while read -r\
    \ node; do\n        [[ $node =~ ^([[:digit:]]+) ]] || continue\n        (( min_even+=(\
    \ \"$node\" % 2 )) )\n        if (( min_even < smallest_value )); then\n     \
    \       smallest_value=min_even\n            smallest_index=index\n        fi\n\
    \        (( index++ ))\n    done <<< \"$nodes\"\n    if [ \"$smallest_value\"\
    \ -eq 0 ]; then\n        smallest_value=\"-1\"\n        smallest_index=$(( ${#nodes}\
    \ + 1 ))\n    fi\n    printf '[\"%s\", \"%d\"]' \"$smallest_value\" \"$smallest_index\"\
    \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -n arr=$1\n  local -a output\n  local min_index\n \
    \ local min_val\n  local value\n  local index\n\n  [[ \"$#\" -lt \"1\" ]] && return\
    \ -1\n\n  for index in \"${!arr[@]}\"; do\n    if [[ \"${arr[index]}\" -ge 0 ]];\
    \ then\n      min_val=\"$((${arr[index]} % 2))\"\n      [[ -z \"$min_val\" ]]\
    \ && return -1\n      if [[ ${output[$min_val]} -eq 0 ]]; then\n        output[$min_val]=\"\
    ${arr[index]}\"\n        [[ -z \"$min_index\" ]] && min_index=\"$index\"\n   \
    \   else\n        if [[ -z \"$min_index\" ]]; then\n          min_index=\"$index\"\
    \n          min_val=\"$((${arr[index]} % 2))\"\n        fi\n      fi\n    fi\n\
    \  done\n\n  if [[ -z \"$min_index\" ]]; then\n    return -1\n  fi\n\n  value=\"\
    ${output[$min_val]}\"\n  output[$min_val]=\"\"\n  echo \"$value\"\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpknae67oz.sh: line 30: local: `4 2 3'': invalid variable name for
    name reference

    '
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    declare -i i node_index\n    declare node\n    local array=\"\
    $1\"\n    declare -a indices\n    declare -a values\n    local smalest_value=\n\
    \    local smalest_index=\n\n    indices=( $( seq 0 $# ) )\n    values=\"$(echo\
    \ \"${array}\" | tr \" \" \"\\n\")\"\n\n    for ((i=0; i<${#values[@]}; i++));\
    \ do\n        node=\"$(echo \"${values[$i]}\" | cut -d\" \" -f1)\"\n        if\
    \ [ \"$node\" == \"0\" ]; then\n            if [ \"$smalest_value\" == \"\" ];\
    \ then\n                smalest_value=\"${values[$i]}\"\n                smalest_index=$i\n\
    \            else\n                smalest_index=$i\n            fi\n        fi\n\
    \    done\n\n    if [ \"$smalest_value\" != \"\" ]; then\n        echo \"\\\"\
    $smalest_value\\\"\"\n    else\n        echo \"[]\"\n    fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local input\n    local values\n    local output\n    local\
    \ value\n    local idx\n    local min\n\n    input=$1\n\n    IFS=$'\\n' read -ra\
    \ values <<< \"$input\"\n    min=values[*]\n    min=\"${min%%[!0-9]}\"\n    idx=\"\
    ${#values[@]}\"\n\n    case \"$idx\" in\n        0) echo \"$min\" >&2; return\
    \ ;;\n        1) echo \"$min\" >&2; echo \"$min\" >&2; return ;;\n    esac\n \
    \   while [ \"$idx\" -ge 0 ]\n    do\n        value=${values[$(($idx-1))]}\n \
    \       case \"$value\" in\n            0) echo \"$min\" >&2; return ;;\n    \
    \        1) echo \"$min\" >&2; echo \"$value\" >&2; return ;;\n        esac\n\
    \        idx=$(($idx-1))\n    done\n\n    echo \"$min\" >&2\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'values[*

    values[*

    '
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local node_value\n  local node node_index\n  node=$(get_node\
    \ \"$1\")\n  if [ $? = 0 ] ; then\n    node_value=$(get_node_value \"$node\")\n\
    \    node_index=$(($(get_node_index \"$node\")))\n    pluck_node \"$node\" \"\
    $node_value\" \"$node_index\"\n  else\n    return 0\n  fi\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpjsrgs054.sh: line 32: get_node: command not found

    '
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local arr=($1)\n  local i val\n  val=0\n  for i in \"${arr[@]}\"\
    ; do\n    (( val += i % 2 ))\n  done\n  (( val += $(( ${#arr[@]} % 2 )) ))\n \
    \ echo \"$val\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smallest_value\n    local smallest_index\n\
    \    local i=0\n    while [ $i -lt ${#nodes[@]} ]; do\n        smallest_value=$(\
    \ echo \"${nodes[$i]}\" | cut -d \" \" -f 2 )\n        if [ $smallest_value -ge\
    \ 0 ] ; then\n            smallest_index=$( echo \"${nodes[$i]}\" | cut -d \"\
    \ \" -f 1 )\n            if [ $(( $i + 1 )) -lt ${#nodes[@]} ] ; then\n      \
    \          if [ ${nodes[$(($i+1))]} -eq 0 ] ; then\n                    echo ${smallest_value}\n\
    \                    return $smallest_value\n                else\n          \
    \          smallest_value=$( echo \"${nodes[$(($i+1))]}\" | cut -d \" \" -f 2\
    \ )\n                    if [ $smallest_value -ge 0 ] ; then\n               \
    \         echo ${smallest_value}\n                        return $smallest_value\n\
    \                    else\n                        smallest_index=$(echo \"${nodes[$(($i+1))]}\"\
    \ | cut -d \" \" -f 1 )\n                    fi\n                fi\n        \
    \    fi\n        fi\n        i=$(( i+1 ))\n    done\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local i nums\n  read -a nums <<< \"$1\"\n  local num\n  local\
    \ ret=()\n\n  for ((i=0; i<${#nums[@]}; i++)); do\n    num=\"${nums[$i]}\"\n \
    \   if test \"$num\" -eq \"0\"; then\n      ((i++))\n      continue\n    fi\n\
    \    for ((j=0; j<i; j++)); do\n      if test ${nums[$j%${#nums[@]}]} -eq $num;\
    \ then\n        ((j++))\n        break\n      fi\n    done\n    if test \"$i\"\
    \ -ge \"$j\"; then\n      num=\"${nums[$j%${#nums[@]}]}\"\n      ret+=(\"$num\"\
    )\n    fi\n  done\n  if test -z \"${ret[@]}\"; then\n    return 0\n  fi\n  echo\
    \ ${ret[@]}\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpdx_sttlx.sh: line 52: test: too many arguments

    '
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  # grab a space-separated list as input\n  local nodes=$1\n\
    \n  # loop through each node in the list and pluck one that is even\n  for ((i=0;\
    \ i < ${#nodes[@]}; i++))\n  do\n    # convert our list to a number, so that we\
    \ can use arithmetic operators\n    node=${nodes[i]}\n    node=${node#\"${nodes[i]}\"\
    }\n    node=${node%%[!0-9]}\n    node=${node^^}\n\n    [[ -z \"${node}\" ]] &&\
    \ break\n\n    # do our arithmetic with variable arithmetic, which handles leading\
    \ zeroes\n    if (( ${node} % 2 == 0 ))\n    then\n      echo \"$node $i\"\n \
    \     return 0\n    fi\n  done\n\n  return 1\n}\n\ncandidate() {\n    pluck \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local i j k\n    local -n nodes=($(IFS=' '; echo \"$1\"\
    )); shift\n    local -n node_values=($(IFS=' '; echo \"$1\")); shift\n    local\
    \ -n result=$1\n    local -n min=$2\n    local -n min_idx=$3\n    [[ -z $nodes\
    \ || -z $node_value ]] && return 0\n    local count=0\n    [[ -z $result ]] &&\
    \ result=()\n    for ((i=0; i<${#nodes[@]}; i++)); do\n        [[ -z ${node_values[$i]}\
    \ ]] && break\n        [[ -z $nodes[$i] ]] && break\n        if ((node_values[$i]%2==0));\
    \ then\n            ((count++))\n            if ((count==min)); then\n       \
    \         result+=($(echo \"$nodes[$i]\"))\n                ((min_idx=$i))\n \
    \           fi\n        fi\n    done\n    [[ -z ${result[@]} ]] && result=()\n\
    \    [[ -z ${result[@]} ]] && return 0\n}\n\ncandidate() {\n    pluck \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbinm2q26.sh: line 31: local: nodes: reference variable cannot be
    an array

    /tmp/tmpbinm2q26.sh: line 32: local: node_values: reference variable cannot be
    an array

    /tmp/tmpbinm2q26.sh: line 33: local: `'': not a valid identifier

    /tmp/tmpbinm2q26.sh: line 34: local: `'': not a valid identifier

    /tmp/tmpbinm2q26.sh: line 35: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660055523
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    arr=( $1 )\n    even=0\n    smallest=1000000000000000\n\
    \    smallest_value=\n    for (( i=0; i<${#arr[*]}; i++ ));\n    do\n        ((\
    \ even=( $arr[$i] % 2 ))\n        if (( even && $even < smallest )); then\n  \
    \          smallest=$even\n            smallest_value=$arr[$i]\n        fi\n \
    \   done\n    arr=( ${arr[@]:0:i} )\n    return $( printf \"\\\"%d\\\" \\\"%d\\\
    \"\\n\", $smallest_value, $i )\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp67o5sknh.sh: line 37: syntax error near unexpected token `(''

    /tmp/tmp67o5sknh.sh: line 37: `        if (( even && $even < smallest )); then''

    '
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=( $1 )\n    # Write your code here\n    local\
    \ even_values=()\n    local min_val=100000\n    local min_idx=0\n    for (( i\
    \ = 0; nodes[i]; i++ ))\n    do\n        if (( \"${nodes[i]}\" % 2 )); then\n\
    \            even_values+=( \"$nodes[i]\" )\n        fi\n        (( min_val =\
    \ ${min_val} > ${nodes[i]} ))\n        (( min_idx = $min_idx > ${i} ))\n    done\n\
    \    local even_values=( \"${even_values[@]}\" )\n    local min_val=${even_values[0]}\n\
    \    local min_idx=${even_values[1]}\n    echo \"[\\\"${min_val}\\\", \\\"${min_idx}\\\
    \"]\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  if [ -z \"$1\" ]\n  then\n    echo \"[]\"\n  else\n    local\
    \ branch=( $(echo $1 | sed -e 's/ /\" \"/g') )\n    local min=$(( $(branch=( $(echo\
    \ -n $1 | sed -e 's/ /\" \"/g') )  | sort -k 2 -n | head -1 | awk '{print $1}')\
    \ * 2 ))\n    local index=0\n    local min_index=$min\n    local tmp=${branch[${min_index}]}\n\
    \    for (( c=1; c<${#branch[@]}; c++ ))\n    do\n      if [ \"${branch[$c]}\"\
    \ -gt \"$min\" ]\n      then\n        min=${branch[$c]}\n        min_index=${index}\n\
    \        tmp=${branch[$c]}\n      fi\n      ((index+=1))\n    done\n    echo \"\
    [\\\"${tmp}\\\", \\\"${min_index}\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmf7puoq9.sh: line 35: * 2 : syntax error: operand expected (error
    token is "* 2 ")

    '
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local -r nodes=( \"$@\" )\n    local -r smalest_value=0\n\
    \    local -r smalest_index=0\n    local -r array_node_index=0\n    local -r new_node\n\
    \    local -r array_node_count\n    local -r array_index\n\n    array_node_count=${#nodes[@]}\n\
    \    for node in \"${nodes[@]}\"; do\n        if (( ${node%% *} == 0 )); then\n\
    \            smalest_value=${node}\n            smalest_index=$array_node_index\n\
    \        fi\n        ((array_node_index+=1))\n    done\n\n    if (( array_node_count\
    \ == 0 )); then\n        return $( return )\n    fi\n\n    local -ra sorted_nodes=()\n\
    \    local array_node_value\n    for array_index in \"${!nodes[@]}\"; do\n   \
    \     array_node_value=${nodes[array_index]}\n        array_node_value=${array_node_value%%\
    \ *}\n        sorted_nodes+=( \"$array_node_value\" )\n    done\n\n    local -ra\
    \ sorted_nodes_sorted=()\n    for index in \"${!sorted_nodes[@]}\"; do\n     \
    \   local array_node_value\n        array_node_value=${sorted_nodes[$index]}\n\
    \        array_node_value=${array_node_value%% *}\n        sorted_nodes_sorted+=(\
    \ \"$array_node_value\" )\n    done\n\n    if (( array_node_count > 1 )); then\n\
    \        array_index=0\n        while (( ${sorted_nodes_sorted[array_index]} >\
    \ \"$smalest_value\" )) ; do\n            ((array_index+=1))\n        done\n \
    \       new_node=${sorted_nodes_sorted[$array_index]}\n    else\n        new_node=$smalest_value\n\
    \    fi\n    return $( echo \"$new_node\" )\n}\n\ncandidate() {\n    pluck \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp78iu4yja.sh: line 38: array_node_count: readonly variable

    '
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    read -r -a array <<< \"$1\"\n    array=( ${array[@]//[^\
    \ ]/} ); declare -i n=$#\n    if [[ ${#array[@]} -eq 0 ]]; then\n        declare\
    \ -a return_value\n        return_value=( )\n        return\n    fi\n    local\
    \ smallest=( )\n    local smallest_index=0\n    for i in ${!array[@]}; do\n  \
    \      [[ ${array[i]} -eq 0 ]] && continue\n        [[ ${smallest[@]} -eq 0 ]]\
    \ || [[ \"${smallest[@]}\" -gt \"${array[i]}\" ]]\n        (( smallest[smallest_index]++\
    \ ))\n        (( smallest_index+1 ))\n        smallest=( ${smallest[@]} )\n  \
    \  done\n    [[ \"${smallest[@]}\" -gt 0 ]] || return \"no even value\"\n    smallest_index=$((\
    \ ${#smallest[@]} -1 ))\n    return_value=\"'${smallest[smallest_index]}'\"\n\
    \    return_value=\"${return_value},${smallest_index}\"\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055523
- exit_code: -1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  # Split $1 into array by whitespace\n  mapfile -t array <<<\
    \ \"$1\"\n  # Remove empty values and duplicates\n  unique_array=()\n  for value\
    \ in \"${array[@]}\"; do\n    if [[ \"$value\" =~ ^[0-9]+$ ]]; then\n      unique_array+=(\
    \ \"$value\" )\n    fi\n  done\n  # Sort the array by even value\n  sorted=($(sort\
    \ -gr \"${unique_array[@]}\" | awk '$1 !~ /^0/ && $0 !~ /^0/'))\n  # If sorted\
    \ array is not empty\n  if ((${#sorted[@]})); then\n    # Return the sorted array\
    \ and it's index\n    echo \"${sorted[@]}\"\n  else\n    # Return empty array\n\
    \    echo \"[]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=34 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=13 encoding='utf-8'>
  timestamp: 1660055528
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local node_list=$1\n  local min\n  local index\n\n  # initialize\
    \ min\n  min=$2\n  index=$3\n\n  # check min\n  if [[ $min = $1 || $min = $2 ]];\
    \ then\n    min=$1\n    index=$2\n  else\n    # check min is even\n    [[ \"$min\"\
    \ == *\"$min\"* ]] || return 1\n    min=$(( min / 2 ))\n    index=$3\n  fi\n\n\
    \  # check min is even\n  [[ \"$min\" == *\"$min\"* ]] || return 1\n\n  # check\
    \ min is not even\n  [[ \"$min\" == *\"$min\"* ]] || return 1\n\n  # iterate through\
    \ array\n  for (( i = 3; i <= $#node_list; i++ )); do\n    [[ -n \"$node_list[$i]\"\
    \ ]] || return 1\n    if [[ \"$node_list[$i]\" == \"$min\" ]]; then\n      min=$((\
    \ min + 1 ))\n      index=$i\n    fi\n  done\n\n  # check min is not even\n  [[\
    \ \"$min\" == *\"$min\"* ]] || return 1\n\n  # check min is even\n  [[ \"$min\"\
    \ == *\"$min\"* ]] || return 1\n\n  # check min is not even\n  [[ \"$min\" ==\
    \ *\"$min\"* ]] || return 1\n\n  # return min\n  echo \"$min\"\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmyoih802.sh: line 56: ((: i <= 1node_list: value too great for
    base (error token is "1node_list")

    '
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  if [ -z \"$1\" ]\n  then\n    return 1\n  fi\n  \n  local\
    \ array_value=( $( echo \"$1\" | sed \"s/ //g\" | tr \" \" \"\\n\" | sort -n -k2,2\
    \ | awk '{ print $2 }') )\n  local array_nodes=( $( echo \"$1\" | sed \"s/ //g\"\
    \ | tr \" \" \"\\n\" | sort -n -k1,1 | awk '{ print $1 }') )\n  \n  local smallest_value=-1\n\
    \  local smallest_index=-1\n  \n  local i node\n  \n  for (( i = 0; i < ${#array_values[@]};\
    \ i++ )); do\n    node=${array_nodes[$i]}\n    \n    if [ ${array_values[$i]}\
    \ -le 0 ]; then\n      smallest_value=-1\n      smallest_index=-1\n      \n  \
    \    return\n    elif [ ${array_values[$i]} -gt 0 ] && [ ${array_values[$i]} -le\
    \ ${smallest_value} ]; then\n      smallest_value=${array_values[$i]}\n      smallest_index=${i}\n\
    \    fi\n  done\n  \n  smallest_value=-1\n  smallest_index=-1\n  \n  for (( i\
    \ = 0; i < ${#array_values[@]}; i++ )); do\n    node=${array_nodes[$i]}\n    \n\
    \    if [ ${array_values[$i]} -le 0 ]; then\n      smallest_value=-1\n      smallest_index=-1\n\
    \      \n      return\n    elif [ ${array_values[$i]} -gt 0 ] && [ ${array_values[$i]}\
    \ -le ${smallest_value} ]; then\n      smallest_value=${array_values[$i]}\n  \
    \    smallest_index=${i}\n    fi\n  done\n  \n  return\n}\n\ncandidate() {\n \
    \   pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local i node\n    local results smallest_value index even_value\n\
    \    local -n array=$1\n    local -a result=()\n    smallest_value=$(echo $array\
    \ | cut -d ' ' -f 1)\n    even_value=$(( $smallest_value % 2 ))\n    smallest_value=${smallest_value}\n\
    \    smallest_value=${smallest_value}\n    smallest_value+=$(( $smallest_value\
    \ % 2 ))\n    smallest_value+=$(( $smallest_value % 2 ))\n    for (( i = 0; i\
    \ <= $#array; i++ )); do\n        node=$(echo $array[$i] | cut -d ' ' -f 1)\n\
    \        if (( $node == $smallest_value )); then\n            result=(\"$smallest_value\"\
    \ \"$i\")\n        elif (( $node == $even_value)); then\n            result=(\"\
    $even_value\" \"$i\")\n        elif (( $node > $smallest_value )); then\n    \
    \        result=(\"$smallest_value\" \"$i\")\n        elif (( $node < $smallest_value\
    \ )); then\n            result=(\"$even_value\" \"$i\")\n        fi\n    done\n\
    \    echo $result\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3ltdnv8t.sh: line 32: local: `4 2 3'': invalid variable name for
    name reference

    /tmp/tmp3ltdnv8t.sh: line 35: % 2 : syntax error: operand expected (error token
    is "% 2 ")

    '
  stdout: ''
  timestamp: 1660055523
- exit_code: -1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local node_value node_index current_val current_index\n\
    \    IFS=$'\\t' node_value=$1\n    # Initialize variables\n    current_val=node_value\n\
    \    current_index=${#node_value}\n    nodes=()\n    while [ \"$node_value\" !=\
    \ \"\" ]; do\n        node_index=$((current_index))\n        if [ \"$node_value\"\
    \ == \"${node_value}\" ]; then\n            node_val=${node_value}\n         \
    \   node_index=${node_index}\n        fi\n        current_val=\"${node_value}\"\
    \n        current_index=$((current_index - 1))\n        node_value=\"${node_value}\"\
    \n        nodes+=($((node_index)))\n    done\n}\n\ncandidate() {\n    pluck \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=46 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=41 encoding='utf-8'>
  timestamp: 1660055528
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$(echo \"$1\" | tr '\\n' ' ' | sed 's/ //g')\n\
    \    local pluck_node\n    local smalest_value\n    local index\n    local smalest_index\n\
    \    local smalest_even_value\n    local even_values\n\n    even_values=$(echo\
    \ \"$nodes\" | awk -F \"[()]\" '{for(i=2;i<NF;i++) if($i%%2==0) print $i}')\n\n\
    \    if [ ${#even_values} -eq 0 ]\n    then\n        echo \"$1\" | tr '\\n' '\
    \ '\n    else\n        smalest_value=$(echo \"$nodes\" | awk -F \"[()]\" '{for(i=2;i<NF;i++)\
    \ if($i%%2==0) { if($i<smalest_value) smalest_value=$i; if($i>smalest_even_value)\
    \ { smalest_even_value=$i; smalest_index=$i }}}' | head -1)\n        smalest_index=$(($(echo\
    \ \"$nodes\" | awk -F \"[()]\" '{for(i=2;i<NF;i++) if($i%%2==0) { if($i<smalest_value)\
    \ smalest_value=$i; if($i>smalest_even_value) { smalest_even_value=$i; smalest_index=$i\
    \ }}}' | head -1) - 1))\n        smalest_even_value=$(($(echo \"$nodes\" | awk\
    \ -F \"[()]\" '{for(i=2;i<NF;i++) if($i%%2==0) { if($i<smalest_value) smalest_value=$i;\
    \ if($i>smalest_even_value) { smalest_even_value=$i; smalest_index=$i }}}' | head\
    \ -1) - 2))\n        pluck_node=\"$((smalest_even_value))\"\n        echo \"$smalest_value\
    \ \\\"$smalest_index\\\"\" \n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'awk: cmd. line:1: {for(i=2;i<NF;i++) if($i%%2==0) print $i}

    awk: cmd. line:1:                          ^ syntax error

    awk: cmd. line:1: {for(i=2;i<NF;i++) if($i%%2==0) print $i}

    awk: cmd. line:1:                               ^ syntax error

    '
  stdout: ''
  timestamp: 1660055523
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local arr=$1\n    local min_ind min_ind_value\n    local\
    \ smin_ind smmin_ind_value\n    local i j\n    local len=${#arr[@]}\n\n    # loop\
    \ through all elements and find min\n    i=0;\n    while [ $i -lt $len ]; do\n\
    \        local node=${arr[$i]}\n        local value=$node\n        local index=$(echo\
    \ $node | sed -r \"s/(\\d+)/\\1/g\")\n        ((index*2>>8)) &>/dev/null || continue\n\
    \n        if ((index%2)==0 && [[ -z $value ]]; then\n            echo \"$value\
    \ $index\"\n            exit 0;\n        fi\n        ((value+=1))\n        local\
    \ ind_value=($((index%2)))\n        ((value=2*$ind_value))\n        ((value+=1))\n\
    \        local ind_index=($((index/2)));\n\n        if [[ -z $min_ind ]]; then\n\
    \            min_ind=$ind_index\n            min_ind_value=$ind_value\n      \
    \      smmin_ind=$i\n            smmin_ind_value=$value\n        elif ((min_ind_value<$ind_value));\
    \ then\n            min_ind=$ind_index\n            min_ind_value=$ind_value\n\
    \            smmin_ind=$i\n            smmin_ind_value=$value\n        elif ((min_ind_value==$ind_value))\
    \ && ((min_ind_index<$smmin_ind)); then\n            min_ind=$ind_index\n    \
    \        min_ind_value=$ind_value\n            smmin_ind=$i\n            smmin_ind_value=$value\n\
    \        fi\n\n        ((i++))\n    done\n    echo \"$min_ind $min_ind_value\"\
    \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpf7tq5d32.sh: line 44: syntax error near unexpected token `==0''

    /tmp/tmpf7tq5d32.sh: line 44: `        if ((index%2)==0 && [[ -z $value ]]; then''

    '
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local plucked_node\n  local smallest_value\n\
    \  local smallest_value_index\n  local result\n\n  smallest_value=$(sort -u <<<\
    \ \"${nodes[@]}\" | head -1)\n  smallest_value_index=$(printf \"%s\" \"${nodes[@]}\"\
    \ | cut -d ' ' -f \"$smallest_value\" | wc -w)\n  if [[ \"${smallest_value_index}\"\
    \ -lt \"${#nodes[@]}\" ]]; then\n    return 0\n  fi\n\n  smallest_value_index=${smallest_value_index}\n\
    \  smallest_value=${smallest_value}\n\n  while [[ ${smallest_value_index} -ge\
    \ ${#nodes[@]} ]]; do\n    (( smallest_value_index-- ))\n    smallest_value=$(printf\
    \ \"%s\" \"${nodes[@]}\" | cut -d ' ' -f \"${smallest_value_index}\")\n    if\
    \ [[ \"${smallest_value}\" -gt \"${smallest_value_index}\" ]]; then\n      break\n\
    \    fi\n  done\n\n  if [[ ${smallest_value_index} -ge ${#nodes[@]} ]]; then\n\
    \    return 0\n  fi\n\n  while [[ \"${smallest_value}\" != \"${smallest_value_index}\"\
    \ ]]; do\n    smallest_value_index=$(( ${smallest_value_index} + 1 ))\n    smallest_value=$(printf\
    \ \"%s\" \"${nodes[@]}\" | cut -d ' ' -f \"${smallest_value_index}\")\n  done\n\
    \n  plucked_node=$(printf \"%s\" \"${nodes[@]}\" | cut -d ' ' -f \"${smallest_value_index}\"\
    )\n  result=( \"${plucked_node}\" )\n  echo ${result[@]}\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=(${1//[[ \\t]+/ })\n  # for node in $nodes; do\n\
    \  # echo $node #>  /tmp/node_${node}\n  # done\n  echo ${nodes[*]}\n  echo ${nodes[*]}\n\
    \  echo ${nodes[*]}\n  echo ${nodes[*]}\n  echo ${nodes[*]}\n  echo ${nodes[*]}\n\
    \  echo ${nodes[*]}\n  echo ${nodes[*]}\n  echo ${nodes[*]}\n  echo ${nodes[*]}\n\
    \  echo ${nodes[*]}\n  echo ${nodes[*]}\n  echo ${nodes[*]}\n  echo ${nodes[*]}\n\
    \  echo ${nodes[*]}\n  echo ${nodes[*]}\n  echo ${nodes[*]}\n  echo ${nodes[*]}\n\
    \  echo ${nodes[*]}\n  echo ${nodes[*]}\n  echo ${nodes[*]}\n  echo ${nodes[*]}\n\
    \  echo ${nodes[*]}\n  echo ${nodes[*]}\n  echo ${nodes[*]}\n  echo ${nodes[*]}\n\
    \  echo ${nodes[*]}\n  echo ${nodes[*]}\n  echo ${nodes[*]}\n  echo ${nodes[*]}\n\
    \  echo ${nodes[*]}\n  echo ${nodes[*]}\n  echo ${nodes[*]}\n  echo ${nodes[*]}\n\
    \  echo ${nodes[*]}\n  echo ${nodes[*]}\n  echo ${nodes[*]}\n  echo ${nodes[*]}\n\
    \  echo ${nodes[*]}\n  echo ${nodes[*]}\n  echo ${nodes[*]}\n  echo ${nodes[*]}\n\
    \  echo ${nodes[*]}\n  echo ${nodes[*]}\n  echo ${nodes[*]}\n  echo ${nodes[*]}\n\
    \  echo ${nodes[*]}\n  echo ${nodes[*]}\n  echo ${nodes[*]}\n  echo ${nodes[*]}\n\
    \  echo ${nodes[*]}\n  echo ${nodes[*]}\n  echo ${nodes[*]}\n  echo ${nodes[*]}\n\
    \  echo ${nodes[*]}\n  echo ${nodes[*]}\n  echo ${nodes[*]}\n  echo ${nodes[*]}\n\
    \  echo ${nodes[*]}\n  echo ${nodes[*]}\n  echo ${nodes[*]}\n  echo ${nodes[*]}\n\
    \  echo ${nodes[*]}\n  echo ${nodes[*]}\n  echo ${nodes[*]}\n  echo ${nodes[*]}\n\
    \  echo ${nodes[*]}\n  echo ${nodes[*]}\n}\n\ncandidate() {\n    pluck \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  echo \"$1\" | grep -Po \"(?<=^ *)(\\S+)(?=.*$)\"\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'grep: lookbehind assertion is not fixed length

    '
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=\"$1\"\n\n    # remove quotes, split by space\
    \ and convert to array\n    local nodes=${nodes//\\\"/}\n    IFS=' ' read -r -a\
    \ nodes <<<\"$nodes\"\n    local len=${#nodes[@]}\n\n    # check if array is empty\
    \ or has no even values\n    if [ $len -gt 0 -a $(( len % 2 )) -eq 0 ]; then\n\
    \        # sort the array by even values\n        sort -n -k2 <<<\"${nodes[@]}\"\
    \n\n        # pick the smallest even value\n        if [ -n \"$nodes[0]\" ]; then\n\
    \            local min=\"$nodes[0]\"\n            local i\n            for ((i=1;i<$len;i++));\
    \ do\n                if [ \"$nodes[i]\" -eq \"$min\" ]; then\n              \
    \      ((i++))\n                else\n                    break\n            \
    \    fi\n            done\n            echo \"$min $i\"\n        else\n      \
    \      echo \"[]\"\n        fi\n    else\n        echo \"[]\"\n    fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$(echo $1 | tr \" \" \"\\n\")\n    local i=${#nodes[@]}\n\
    \    local arr=()\n    local smalest_value=${nodes[0]}\n    local smalest_index=${i}\n\
    \    local even_values=()\n    for (( i=0; i<$(( i+1 )); i++ )); do\n        if\
    \ [[ -z \"${nodes[$i]}\" ]]; then\n            break\n        fi\n        local\
    \ v=${nodes[$i]}\n        if (( v & 1 )); then\n            even_values+=(\"$v\"\
    )\n        fi\n        if [[ -z \"${arr[$i]}\" ]]; then\n            if (( ${#even_values[@]}\
    \ > 0 ));then\n                if (( ${#even_values[@]} < ${smalest_value} ));then\n\
    \                    smalest_value=\"${even_values[$(( ${#even_values[@]} - 1\
    \ ))]}\"\n                    smalest_index=\"${i}\"\n                fi\n   \
    \         fi\n            arr[$i]=\"$v\"\n        fi\n    done\n    if (( ${#even_values[@]}\
    \ > 0 )); then\n        echo \"${arr[$smalest_index]}\"\n    else\n        echo\
    \ \"$1\"\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkkoiuzoy.sh: line 41: ((: 4

    2

    3: syntax error in expression (error token is "2

    3")

    '
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local plucked_node\n  local smallest_value\n\
    \  local smallest_index\n  local node_value\n  \n  echo \"$nodes\" | grep -E '^[0-9]+$'\n\
    \  echo \"$nodes\" | sort | uniq -d --ignore-case\n  echo \"$nodes\" | sort |\
    \ uniq -c --ignore-case | grep '^[0-9]+' | head -1\n  echo \"$nodes\" | sort |\
    \ uniq -c --ignore-case | grep '^[0-9]+' | head -1\n  if [[ ${#nodes[@]} -gt 0\
    \ ]]; then\n    smallest_value=${nodes[0]}\n    smallest_index=0\n  fi\n  \n \
    \ for (( i=0; ${#nodes[@]}-1; i++ )); do\n    node_value=$(echo \"${nodes[i]}\"\
    \ | cut -d' ' -f1)\n    echo \"$node_value\"\n  done\n}\n\ncandidate() {\n   \
    \ pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  if [ \"$#\" -eq 1 ]; then\n    echo \"$1\" | tr \" \" \"\\\
    n\" | sort -n | head -1\n  else\n    echo \"$1\" | tr \" \" \"\\n\" | sort -n\
    \ | head -1 | tr \" \" \"\\n\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1 out\n    local min\n    local node\n   \
    \ for ((i=0; i < nodes.length; i++)) {\n        node=$(echo \"${nodes[i]}\" |\
    \ cut -d\" \" -f1)\n        node=$(echo \"${node}\" | sort --field-separator '\
    \ ' --numeric-sort | head --lines=-1 | awk '$2 % 2' |tail --lines=1)\n       \
    \ min=$(( (${nodes[*]} + ${nodes[$node]} ) / 2 ))\n        [[ -n \"$node\" ]]\
    \ && out=( ${out[*]} \"$node\" )\n        [[ -z \"$out\" ]] && out=( )\n    }\n\
    \    echo \"${out[@]}\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwqvfyt50.sh: line 33: ((: i < nodes.length: syntax error: invalid
    arithmetic operator (error token is ".length")

    '
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  if [ -z \"$1\" ]\n  then\n    echo \"\"\n  else\n    arr=$1\n\
    \    arr=(${arr//,/ })\n    arr=(${arr[@]//\"/ })\n    arr=($(sort -n <<< \"$arr\"\
    ))\n    arr=(\"${arr[@]##* }\")\n    echo ${arr[0]}\n  fi\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpouqar79q.sh: line 56: unexpected EOF while looking for matching
    `"''

    /tmp/tmpouqar79q.sh: line 60: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660055523
- exit_code: -1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes\n    local s\n    local i\n    local m\n  \
    \  read -r nodes\n    nodes=${nodes// /;}\n    set -- \"$nodes\" && shift # removes\
    \ spaces and trailing commas\n    for i in $@; do\n        ((m % 2 == 0)) && {\n\
    \            ((m += 1)) && {\n                if [[ \"$s\" < \"$i\" ]]; then\n\
    \                    s=$i\n                    m=$((m+1))\n                fi\n\
    \            }\n        }\n    done\n    [[ -n \"$s\" ]] && echo \"$s,$m\"\n}\n\
    \ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=30 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=28 encoding='utf-8'>
  timestamp: 1660055528
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes i=0 j=0\n    local -a min\n    min=($1)\n \
    \   while (( ${#nodes[*]} > 0 )); do\n        if (( $(( ${min[$j]} % 2 )) < 0\
    \ )) {\n            min[$j]=$(( ${min[$j]} + 1 ))\n        fi\n        j=$(( ${j}\
    \ + 1 ))\n    done\n    echo $min[$j]\n}\n\ncandidate() {\n    pluck \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpphag0lpd.sh: line 34: syntax error near unexpected token `{''

    /tmp/tmpphag0lpd.sh: line 34: `        if (( $(( ${min[$j]} % 2 )) < 0 )) {''

    '
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local IFS=' '\n    local nodes=(${1:-})\n    local smallest_value\n\
    \    local smallest_index\n\n    smallest_value=${nodes[0]}\n    smallest_index=0\n\
    \n    for (( i=1;i<${#nodes[@]};i++ )); do\n        if [[ ${nodes[$i]} =~ ^[0-9]+$\
    \ ]]; then\n            ((${smallest_value}<${nodes[$i]}))&&(smallest_value=${nodes[$i]})\n\
    \            ((${smallest_index}<${i}))&&(smallest_index=\"${i}\")\n        fi\n\
    \    done\n\n    echo $smallest_value $smallest_index\n}\n\ncandidate() {\n  \
    \  pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local node=''\n    local val=''\n \
    \   local index=0\n    local min_val=''\n    local val_index=0\n\n    for node\
    \ in $nodes; do\n        if [ ! -z $node ] && [ ! -z $val ] && [ ! -z $min_val\
    \ ]; then\n            local val2=$val\n            local val_index2=$index\n\
    \            if [ ! -z $min_val ]; then\n                if [ \"$val\" -eq \"\
    $min_val\" ]; then\n                    val_index=$val_index2\n              \
    \  fi\n            fi\n            val=$node\n            val_index=$index\n \
    \           min_val=$val2\n            val_index2=$val_index\n        fi\n   \
    \ done\n\n    if [ ! -z $min_val ]; then\n        echo \"$min_val\"\n    else\n\
    \        echo \"\"\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n\tlocal array min_value min_value index smallest_value\n\t\
    array=($1)\n\tsmallest_value=${array[0]}\n\tmin_value=${array[0]}\n\tmin_value=${smallest_value}\n\
    \tindex=0\n\tfor element in ${array[@]}; do\n\t\tif [[ ${element} < ${min_value}\
    \ ]]; then\n\t\t\tmin_value=${element}\n\t\tfi\n\tdone\n\techo ${smallest_value}\
    \ ${index}\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  IFS=\" \" read -a arr $1\n  vals=${arr[*]}\n  for i in $(seq\
    \ 0 ${#arr[@]})\n  do\n    if [ ${vals[$i]} -eq 0 ]; then\n      continue\n  \
    \  fi\n    val=${vals[$i]}\n    num=$(echo \"$val\" | bc)\n    if [ \"$num\" -eq\
    \ \"0\" ]; then\n      num=$(( ${#vals[$i]} - 1 ))\n      echo \"$val\"\n    \
    \  vals[$i]=${vals[$num]}\n      val=${vals[$i]}\n    fi\n  done\n  echo \"${vals[*]}\"\
    \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp65v6bwpx.sh: line 30: read: `4'': not a valid identifier

    /tmp/tmp65v6bwpx.sh: line 34: [: -eq: unary operator expected

    /tmp/tmp65v6bwpx.sh: line 39: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local index smalest_value smallest_value\n  IFS=' ' read\
    \ -a nodes <<< \"$1\"\n  for index in \"${!nodes[@]}\"; do\n    smalest_value=\"\
    ${nodes[$index]}\"\n    smallest_value=\"${nodes[$index]}\";\n  done\n  for index\
    \ in \"${!nodes[@]}\"; do\n    smalest_value=\"${nodes[$index]}\"\n    if [ \"\
    ${smalest_value:0:1}\" == \"0\" ] ; then\n      smallest_value=\"${nodes[$index]}\"\
    ;\n    fi\n  done\n  # echo \"Smallest value: ${smallest_value}\"\n  if [ \"${#smallest_value}\"\
    \ -eq 0 ] ; then\n    echo \"[]\"\n  else\n    echo \"${smallest_value} \\\"${index}\\\
    \"\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local i smallest_even smallest smallest_index\n  smallest_even=-1\n\
    \  smallest_index=0\n  for ((i=1; i<=$#; i++))\n  do\n    smallest=$(echo $i |\
    \ cut -d \" \" -f 1)\n    smallest_even=-1\n    ((smallest_even=smallest_even+$smallest))\n\
    \    smallest_index=$((i+1))\n  done\n  echo \"$smallest_even $smallest_index\"\
    \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local index\n    local val\n    local arr\n\n    arr=$1\n\
    \    local smalest_value=0\n    local smalest_idx=-1\n    local node\n    for\
    \ node in $arr; do\n        if (( ( ${#arr[@]} != 1 ) ) || ( ! is_integer $node\
    \ )  ); then\n            echo \"Invalid Input\"\n            exit 1\n       \
    \ fi\n        if (( ${node} < 0 )); then\n            echo \"Invalid Input\"\n\
    \            exit 1\n        fi\n        if (( $node == 0 ));  then\n        \
    \    continue\n        fi\n        if (( $node > $smalest_value ));  then\n  \
    \          smalest_value=$node\n            smalest_idx=$index\n        fi\n \
    \       (( index++ ))\n    done\n    local result\n    if (( $index == 0 )); then\n\
    \        result=\"[]\"\n    else\n        result=\"[$smalest_value,$smalest_idx]\"\
    \n    fi\n    echo $result\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp5tjzbs1q.sh: line 39: 1: command not found

    /tmp/tmp5tjzbs1q.sh: line 39: is_integer: command not found

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  [[ \"$nodes\" == *\" \"$* ]] || return\
    \ 1\n  local head=${node#* *}\n  local value=$head\n  local index=$(( $head %\
    \ 2 ))\n  [[ \"$index\" -eq 0 ]] || return 1\n  [[ \"$value\" -eq 0 ]] || return\
    \ 1\n  local result\n  local smallest=-1\n  local smallest_index=0\n  local i=0\
    \ j=0 k=0\n  [[ \"$k\" -lt \"$nodes\" ]] || return 1\n  while [ \"$i\" -lt \"\
    $nodes\" ] || [ \"$j\" -lt \"$nodes\" ]; do\n    (( i++ ))\n    (( j++ ))\n  \
    \  (( k++ ))\n    [[ \"$k\" -eq \"$nodes\" ]] || break\n    [[ \"$i\" -le \"$k\"\
    \ ]] || continue\n    [[ \"$smallest_index\" -lt \"$j\" ]] || continue\n    [[\
    \ \"$smallest\" -eq 0 ]] || continue\n    [[ \"$smallest\" -lt \"$i\" ]] || continue\n\
    \    [[ \"$smallest\" -lt \"$k\" ]] || continue\n    [[ \"$smallest\" -lt \"$smallest_index\"\
    \ ]] || continue\n    [[ \"$smallest_index\" -lt \"$smallest\" ]] || continue\n\
    \    [[ \"$smallest_index\" -eq \"$smallest\" ]] && continue\n    [[ \"$smallest_index\"\
    \ -ge \"$index\" ]] && continue\n    [[ \"$smallest_index\" -ge \"$k\" ]] && continue\n\
    \    [[ \"$smallest_index\" -ge \"$i\" ]] && continue\n    [[ \"$smallest_index\"\
    \ -ge \"$j\" ]] && continue\n    [[ \"$smallest_index\" -ge \"$smallest\" ]] &&\
    \ continue\n    [[ \"$smallest_index\" -ge \"$smallest_index\" ]] && continue\n\
    \    [[ \"$smallest_index\" -ge \"$smallest_index\" ]] && continue\n    [[ \"\
    $smallest_index\" -ge \"$smallest_index\" ]] && continue\n    [[ \"$smallest_index\"\
    \ -ge \"$smallest_index\" ]] && continue\n    [[ \"$smallest_index\" -ge \"$smallest_index\"\
    \ ]] && continue\n    [[ \"$smallest_index\" -ge \"$smallest_index\" ]] && continue\n\
    \    [[ \"$smallest_index\" -ge \"$smallest_index\" ]] && continue\n    [[ \"\
    $smallest_index\" -ge \"$smallest_index\" ]] && continue\n    [[ \"$smallest_index\"\
    \ -ge \"$\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpn9z4a4ss.sh: line 68: syntax error in conditional expression

    /tmp/tmpn9z4a4ss.sh: line 78: syntax error near `"2''

    /tmp/tmpn9z4a4ss.sh: line 78: `    [[ $(candidate "1 2 3") = "2 1" ]]''

    '
  stdout: ''
  timestamp: 1660055523
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes_index=$1\n    local node=$(\n        echo \"\
    $nodes_index\" | sort -nr | head -n 1 | cut -d' ' -f 2\n    )\n    local node_value=$(\n\
    \        echo \"$nodes_index\" | sort -nr | head -n 1 | cut -d' ' -f 1\n    )\n\
    \n    echo \"$node $node_value\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1;\n    local even_values=$(\n        echo\
    \ \"$nodes\" | sed \"s/ //g\" | sort -n -k2 | tail -n 1\n    );\n    echo \"$even_values\"\
    \ | grep -P \"^[+-]?\\d+\\K\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local i node node node_index result\n  IFS=' ' read -ra nodes\
    \ <<< \"$1\"\n  for ((i=1; i<=${#nodes[@]}; ++i)); do\n    node=nodes[$i]\n  \
    \  node_index=$i\n    if [[ $((node % 2)) -eq 0 ]]; then\n      continue\n   \
    \ else\n      break\n    fi\n  done\n  if [[ ${#nodes[@]} -eq 0 ]]; then\n   \
    \ return 0\n  else\n    node=\"$node\"\n    if [[ ${#nodes[@]} -eq 1 ]]; then\n\
    \      return \"$node\"\n    elif ((node_index < ${#nodes[@]})); then\n      node_index=$((node_index\
    \ + 1))\n    fi\n    result=$(pluck \"$nodes[@]\" \"$node_index\")\n    if [[\
    \ -z \"$result\" ]]; then\n      return 0\n    else\n      echo \"$result\"\n\
    \    fi\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphy17a3t4.sh: line 46: return: nodes[1]: numeric argument required

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    declare -a arr\n    IFS=$'\\n' read -ra arr <<< \"$1\"\n\
    \    local -a even\n    local -a min_index\n    local -i index even_index index\n\
    \    even=()\n    min_index=()\n\n    arr=(${arr[@]})\n    for node in \"${arr[@]}\"\
    ; do\n        even+=( $(( $node % 2 == 0 )) )\n    done\n\n    for node in \"\
    ${arr[@]}\"; do\n        if [ ${even[even_index]} -eq 0 ]; then\n            even_index=$((\
    \ even_index + 1 ))\n        else\n            if (( min_index[ ${min_index[@]}\
    \ ] == 0 )); then\n                min_index+=( ( index++ ))\n            fi\n\
    \n            if (( min_index[ ${min_index[@]} ] < ${index}++ )); then\n     \
    \           min_index+=( ( ${min_index[@]}++ ))\n                min_index+=(\
    \ $(( ${index} )) )\n            fi\n\n            even_index=0\n        fi\n\
    \    done\n\n    echo ${min_index[@]}\n}\n\ncandidate() {\n    pluck \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprjrozpbx.sh: line 48: syntax error near unexpected token `(''

    /tmp/tmprjrozpbx.sh: line 48: `                min_index+=( ( index++ ))''

    /tmp/tmprjrozpbx.sh: line 49: syntax error near unexpected token `fi''

    /tmp/tmprjrozpbx.sh: line 49: `            fi''

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local IFS=$'\\n'\n    local a b c d e\n    local minval\n\
    \    local i idx\n    local mid val\n    local nodes=($1)\n    local count=0\n\
    \    for b in ${nodes[@]}; do\n        (( count++ ))\n        i=$(echo $b | awk\
    \ '{print $1}')\n        (( i++ ))\n        if (( i % 2 != 0 ))\n        then\n\
    \            val=$(echo $b | awk '{print $1}')\n            val=${val: : -1}\n\
    \        else\n            val=$(echo $b | awk '{print $2}')\n            val=${val:\
    \ : -1}\n        fi\n        echo $val > /dev/null\n        if [ $? -ne 0 ]\n\
    \        then\n            idx=$(( count ))\n        fi\n        if [ $val -le\
    \ $minval ]\n        then\n            minval=$val\n            mid=$i\n     \
    \   fi\n    done\n    if [ ${#nodes[@]} -eq 0 ]\n    then\n        echo []\n \
    \   else\n        echo [\"$minval\"-\"$mid]\n    fi\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjcgg2nk4.sh: line 81: unexpected EOF while looking for matching
    `"''

    /tmp/tmpjcgg2nk4.sh: line 85: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  # Your code here\n  mapfile -t arr < <(echo \"$1\" | cut\
    \ -d\"-\" -f1 -n -2)\n  if [[ ${#arr[@]} -eq 0 ]]; then\n    echo []\n  else\n\
    \    echo [ \"${arr[@]:0:1}\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'cut: invalid option -- ''2''

    Try ''cut --help'' for more information.

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a arr\n  IFS=' ' read -ra arr <<< \"$1\"\n  local\
    \ index=0\n  local smalest_value\n  for value in \"${arr[@]}\"; do\n    ((value\
    \ % 2 == 0)) && let index+=1\n    [[ $value -lt $smalest_value ]] && smalest_value=$value\
    \ || smalest_value=0\n  done\n  [[ -z $smalest_value ]] && return 0 || return\
    \ \"$smalest_value $index\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpz6c3y8er.sh: line 38: return: 0 2: numeric argument required

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -n nodes=$1\n  local -a map\n  local -a result\n  local\
    \ min_value\n  local min_idx\n  local node\n  local idx\n  local value\n  local\
    \ key\n  local found\n  local i\n  local key1\n  local key2\n\n  map=()\n  result=()\n\
    \  idx=0\n  value=false\n\n  for node in ${nodes[*]}; do\n    while read -r; do\n\
    \      [[ $REPLY == [0-9]* ]] || break\n      if (( value )); then\n        if\
    \ (( $(echo \"$REPLY < $min_value\" | bc -l) ));then\n          key=$(echo \"\
    $REPLY < $min_value\" | bc)\n          value\n          min_value=$(echo \"$REPLY\
    \ < $min_value\" | bc)\n          min_idx=$idx\n        fi\n        map=(\"${map[*]}$REPLY\"\
    )\n      else\n        value=$(echo \"$REPLY < $min_value\" | bc)\n        min_value=$(echo\
    \ \"$REPLY < $min_value\" | bc)\n        min_idx=$idx\n      fi\n    done <<<\
    \ \"$node\"\n  done\n\n  idx=0\n  found=false\n  for key in ${map[*]}; do\n  \
    \  key1=$(echo \"$key / 2\" | bc)\n    key2=$(echo \"$key % 2\" | bc)\n    if\
    \ [ \"$key2\" -eq 0 ];then\n      if [ \"$key1\" -eq \"$key\" ];then\n       \
    \ found=true\n        break\n      fi\n    fi\n    idx=$(( idx+1 ))\n  done\n\n\
    \  if [ \"$found\" = true ];then\n    if [ -z ${map[$idx]} ];then\n      result=()\n\
    \    else\n      result=(\"${map[$idx]}\")\n    fi\n  fi\n  printf '\"%s\"' \"\
    ${result[@]}\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwqkhm4us.sh: line 30: local: `4 2 3'': invalid variable name for
    name reference

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=-1\n  local index=0\n\
    \  local smalest_index=0\n  local smalest_even=false\n  local even_index=0\n \
    \ while IFS= read -r line; do\n    local node=`echo \"$line\" | sed \"s/'//g\"\
    `\n    even_index=$((even_index+1))\n    even=$(($(echo \"$node\" | grep -o -E\
    \ \"^0{1,}\") || 0))\n    if [[ ${#nodes[*]} -gt 0 ]]; then\n      if [[ ${nodes[*]}\
    \ -eq 0 ]]; then\n        smalest_even=true\n        smalest_value=-1\n      elif\
    \ [[ ${smalest_even} = false ]]; then\n        if [[ $((${even}+${index})) -eq\
    \ ${even} ]]; then\n          smalest_value=${node}\n          smalest_index=${even_index}\n\
    \          smalest_even=true\n        fi\n      else\n        if [[ $((${even}+${index}))\
    \ -eq ${even} ]]; then\n          smalest_value=${node}\n          smalest_index=${even_index}\n\
    \        fi\n      fi\n    fi\n    index=$((index+1))\n  done <<< \"$nodes\"\n\
    \  if [[ ${#nodes[*]} -gt 0 ]]; then\n    if [[ $((${smalest_index}+1)) = 0 ]];\
    \ then\n      echo \"$smalest_value\" \"$smalest_index\"\n    else\n      echo\
    \ \"$smalest_value\" \"$smalest_index\"\n    fi\n  else\n    echo '[]'\n  fi\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5y17acj0.sh: line 39: || 0: syntax error: operand expected (error
    token is "|| 0")

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=( ${1//' '/ } );\n    local smalest_value\n\
    \    local smalest_index\n    local smalest_index_of_smalest_value\n    local\
    \ smalest_even_index\n\n    if [ \"${#nodes[@]}\" -eq 0 ]; then\n        return\
    \ 0;\n    fi\n\n    for (( i = 0; i < ${#nodes[@]} - 1; i++ )); do\n        smalest_value=${nodes[$i]}\n\
    \        smalest_index=$i\n        smalest_index_of_smalest_value=$i\n\n     \
    \   if (( i % 2 != 0 )); then\n            smalest_even_index=$(\n           \
    \     sed -n -e \"s/^[ ]*${nodes[$i]}[ ]*=.*/\\1/p\"\n            )\n        else\n\
    \            smalest_even_index=$i\n        fi\n\n        smalest_value=$(echo\
    \ \"${smalest_value}\" | sed -e \"s/\\\"//g\")\n\n        smalest_index_of_smalest_value=$(\n\
    \            echo \"${smalest_value}\" | sed -e \"s/\\\"//g\"\n        )\n\n \
    \       smalest_even_index=$(echo \"${smalest_even_index}\" | sed -e \"s/\\\"\
    //g\")\n\n        if [ \"${smalest_index_of_smalest_value}\" -lt \"${smalest_even_index}\"\
    \ ]; then\n            smalest_value=${nodes[$i]}\n            smalest_index=$i\n\
    \        fi\n\n        if (( smalest_index == 0 )); then\n            break;\n\
    \        fi\n    done\n\n    if [ \"${#nodes[@]}\" -eq 0 ]; then\n        smalest_value=\"\
    \";\n        smalest_index=0;\n    else\n        smalest_value=${nodes[$smalest_index]}\n\
    \    fi\n\n    local plucked_nodes=()\n    local i=0\n    for (( i = 0; i < ${#nodes[@]};\
    \ i++ )); do\n        local j=0\n        for (( j=0; j < ${#nodes[@]}; j++ ));\
    \ do\n            local k=0\n            for (( k=0; k < ${#nodes[@]}; k++ ));\
    \ do\n                if (( ${nodes[k]} != ${nodes[$i]} )); then\n           \
    \         break;\n                fi\n            done\n            local k=0\n\
    \            for (( k=0; k < ${#nodes[@]}; k++ )); do\n                if (( ${nodes[k]}\
    \ != ${nodes[$j]}) ); then\n                    break;\n                fi\n \
    \           \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpadoqel03.sh: line 95: syntax error near unexpected token `}''

    /tmp/tmpadoqel03.sh: line 95: `}''

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: -1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local -a nodes=()\n    local smalest_value smallest_index\
    \ i=0 j=1\n    local node value smallest_node smallest_value\n\n    for node in\
    \ $1; do\n        nodes[$i]=\"$node\"\n        ((i++))\n    done\n\n    i=$((i-1))\n\
    \    while ((i <= $i)); do\n        smallest_node=\n        smallest_value=\n\
    \        for node in \"${nodes[@]}\"; do\n            value=$(echo \"$node\" |\
    \ grep -o '[^ ]*')\n            if [[ \"$value\" == *\"$smallest_value\"* ]];\
    \ then\n                smallest_node=\"$node\"\n                smallest_value=\"\
    $value\"\n            fi\n        done\n        ((j++))\n        nodes[$j]=$(echo\
    \ \"$smallest_node\" | grep -o '[^ ]*')\n        ((j++))\n        ((i++))\n  \
    \  done\n\n    for node in \"${nodes[@]}\"; do\n        value=$(echo \"$node\"\
    \ | grep -o '[^ ]*')\n        if [[ \"$value\" == *\"$smalest_value\"* ]]; then\n\
    \            smalest_value=\"$value\"\n            smallest_index=\"${i}\"\n \
    \       fi\n    done\n\n    if [[ \"$smalest_value\" == *\"$smallest_value\"*\
    \ ]]; then\n        echo \"$smallest_value $smallest_index\"\n    else\n     \
    \   echo \"$smalest_value $smallest_index\"\n    fi\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=20 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=5 encoding='utf-8'>
  timestamp: 1660055529
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local arr=( $1 )\n    local min_index=0\n    local min_even_value=0\n\
    \    local min_values=\"\"\n    for index in \"${arr[@]}\"; do\n        local\
    \ value=${arr[$index]}\n        if (( value % 2 == 0 )); then\n            if\
    \ [ \"$min_even_value\" -gt \"$value\" ]; then\n                min_even_value=\"\
    $value\"\n                min_index=$index\n                min_values=\"$value\"\
    \n            else\n                min_values=\"$min_values $value\"\n      \
    \      fi\n        fi\n    done\n    if [ \"$min_even_value\" = 0 ]; then\n  \
    \      echo \"[]\"\n    else\n        echo \"$min_values $min_index\"\n    fi\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpaipundzv.sh: line 37: [: : integer expression expected

    /tmp/tmpaipundzv.sh: line 37: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  echo $1 |\n  sed 's/^ *//' |\n  sed 's/ *$//' |\n  awk '\n\
    \    BEGIN { OFS=\"\\\"\"; n = 0; } \n    $1 != \"\" {\n      split($1, a, \"\
    \ *\");\n      if (a[2] % 2 == 0) {\n        s[++n]  = a[2]; s[++n] = $1; \n \
    \     }\n    }\n    END {\n      for(i=1;i<=n;i++) {\n        if(i==1) {\n   \
    \       print s[i]\n        } else {\n          print s[i-1], s[i]\n        }\n\
    \      }\n    }\n  '\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local values=( $(echo $1 | tr \" \" \"\\n\"))\n  local value=\n\
    \  local index=\n  local min=\n  local nodes=()\n  for value in \"${values[@]}\"\
    ; do\n    [[ -z $value ]] && continue\n    [[ -z $min ]] || [[ \"$value\" -gt\
    \ \"$min\" ]] \\\n      && [[ \"$value\" -lt \"$min\" ]] || [[ \"$value\" -eq\
    \ \"$min\" ]] && nodes=()\n    [[ -z $index ]] && nodes=()\n    ((index+=1))\n\
    \    [[ -z \"$index\" ]] && break\n    [[ \"$value\" -gt \"$min\" ]] \\\n    \
    \  && [[ \"$value\" -lt \"$min\" ]] && min=\"$value\" nodes=()\n    ((index+=1))\n\
    \    [[ -z \"$index\" ]] && break\n    [[ \"$value\" -eq \"$min\" ]] && nodes=()\n\
    \    ((index+=1))\n    [[ -z \"$index\" ]] && break\n    nodes=( \"${nodes[@]}\"\
    \ \"\\\"$value\\\"\" $(echo $index | bc) )\n  done\n  echo \"${nodes[@]}\"\n}\n\
    \ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1;\n  local values=();\n  local node\n  local\
    \ index\n  local value\n  local val\n  local vals\n  vals=$(echo ${nodes} | tr\
    \ ' ' '\\n');\n  for vals in $vals; do\n    node=$(eval echo \"\\$vals\")\n  \
    \  if [ ${#node} -eq 0 ];then\n      break;\n    fi\n    value=$(eval echo \"\\\
    $node\")\n    if [[ ${value} -eq 0 ]]; then\n      continue;\n    fi\n    value=${value%*}\n\
    \    if [[ $val ]];then\n      val=$val\n    else\n      val=${value}\n    fi\n\
    \    index=$(($val - 1))\n    values+=($val)\n  done\n  if [[ $val ]]; then\n\
    \    values+=($val \"${index}\")\n  fi\n  echo $(values)\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpsdit2jfb.sh: line 59: values: command not found

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local i node result smallest evens index smallest_index\n\
    \  IFS=\"[[:space:]]\" read -r -a nodes < <(echo \"${1}\")\n  evens=()\n  result=()\n\
    \  for ((i=0; i < ${#nodes[@]}; i++)); do\n    small=\"${nodes[$i]}\"\n    index=\"\
    ${i}\"\n    for ((j=i+1; j < ${#nodes[@]}; j++)); do\n      node=\"${nodes[$j]}\"\
    \n      if [[ ${node} -eq ${small} ]]; then\n        ((evens[$((${index}+1))]+=1))\n\
    \        break\n      fi\n      if [[ ${node} -eq ${small} ]]; then\n        ((evens[$((${index}+1))]+=1))\n\
    \        index=\"${j}\"\n        break\n      fi\n    done\n    if [[ ${evens[$((${index}+1))]}\
    \ -gt 0 ]]; then\n      smallest_index=\"$((${index}+1))\"\n      smallest=\"\
    $small\"\n    fi\n  done\n  if [[ ${#evens[@]} -gt 0 ]]; then\n    result+=(\"\
    ${smallest}\")\n  fi\n  echo ${result[@]}\n}\n\ncandidate() {\n    pluck \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local values=$(echo $1 | tr ' ' '\\n' | sort -nr | cut -d\"\
    \ \" -f 2-)\n  if [ ${#values} -eq 0 ]; then\n    return []\n  else\n    local\
    \ result\n    local index=1\n    local smallest_even_value=$(echo $values | sort\
    \ -n | cut -d\" \" -f 1)\n    local smallest_even_index=0\n    for value in $values;\
    \ do\n      local even_value=$(echo $value | cut -d\" \" -f 1)\n      if [ $even_value\
    \ -eq ${smallest_even_value} ]; then\n        smallest_even_index=$index\n   \
    \   fi\n      index=$((index+1))\n    done\n    smallest_even_value=\"${smallest_even_value}\
    \ ${smallest_even_index}\"\n    echo \"$smallest_even_value\"\n  fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=\"${1}\"\n    local -a node\n    local -i smalest_index\n\
    \    local smalest_value\n    local len\n    len=\"${#nodes}\"\n    for i in $(seq\
    \ 0 \"$((len-1))\"); do\n        node=\"$(echo -e \"${nodes[$i]}\" | sed 's/\"\
    //g')\"\n        smalest_value=\"${node#*[}\"\n        smalest_index=\"$((${#node}\
    \ + 1 - ${#smalest_value}))\"\n        smalest_index=\"${node%*$smalest_value}${smalest_index}\"\
    \n        if [ ${#smalest_value} -gt 0 ]; then\n            smalest_index=\"${smalest_index}\"\
    \"${smalest_value}\"\n        fi\n        smalest_value=\"${smalest_index}\"\n\
    \        node+=\" ${smalest_value}\"\n    done\n    echo \"${node}\"\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyhzx0w_y.sh: line 42: 14 2 3: syntax error in expression (error
    token is "2 3")

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    echo \"$1\" | sort -t_ -nk2 -k 1 -r | cut -d \" \" -f 2\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local i node\n    IFS=$'\\n'\n    local smalest_value\n\
    \    local smalest_index\n    smalest_value=$(echo $1 | sort -n -r -k 2,2 | awk\
    \ '$1==$2{$1=$2}1' | head -n 1)\n    smalest_index=0\n    for ((i=0; i<$#; i++\
    \ )); do\n        node=$(echo $1 | cut -d' ' -f$i)\n        if (( $(echo \"$node\
    \ % 2\" | bc) > 0 )); then\n            smalest_value=$node\n            smalest_index=$i\n\
    \        fi\n    done\n    IFS=$' \\t\\n'\n    if [ -z \"$smalest_value\" -o -z\
    \ \"$smalest_index\" ]; then\n        echo \"$1\"\n    else\n        echo \"$smalest_value\
    \ $smalest_index\"\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'cut: fields are numbered from 1

    Try ''cut --help'' for more information.

    (standard_in) 1: syntax error

    /tmp/tmp52hmistr.sh: line 38: ((: > 0 : syntax error: operand expected (error
    token is "> 0 ")

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local -r nodes=$1\n    local -r result=''\n    local -r\
    \ index=0\n    local -r smalest_value=0\n    local -r count=0\n\n    for node\
    \ in ${nodes}; do\n        ((count++))\n        if ((count % 2 == 0)); then\n\
    \            if (( ${node} % 2 == 0 )); then\n                if [[ ${node} -le\
    \ ${smalest_value} ]]; then\n                    smalest_value=${node}\n     \
    \               result=\"${node}\"\n                    index=\"${index}\"\n \
    \               fi\n            fi\n        fi\n    done\n\n    if [[ -z ${nodes}\
    \ ]]; then\n        if [[ ${smalest_value} -eq 0 ]]; then\n            echo '[]'\n\
    \        else\n            echo \"${result}\"\n        fi\n    else\n        echo\
    \ \"${result} ${index}\"\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpo80vxa5j.sh: line 37: count: readonly variable

    /tmp/tmpo80vxa5j.sh: line 37: count: readonly variable

    /tmp/tmpo80vxa5j.sh: line 37: count: readonly variable

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nnodes=${1:-1}\n  local node\n  local nvals\n  local\
    \ vals\n  local index\n  local val\n  local result\n  if [ $nnodes -eq 0 ]\n \
    \ then\n    return []\n  fi\n  local i=0 nvals=${nnodes}\n  while [ $i -le $nvals\
    \ ]; do\n    node=$(($i+1))\n    value=$((node*$node))\n    if [ $value -eq $(($node*$node))\
    \ ]\n    then\n      index=$node\n    fi\n    nvals=$(($nvals-1)) vals=$(($nvals*$val))\
    \ result=$(($vals))\n    ((i=$i-1))\n  done\n  if [ $nvals -gt 0 ]\n  then\n \
    \   val=$((nvals-1))\n    index=$(($index+1))\n  fi\n  if [ $nvals -eq 0 ]\n \
    \ then\n    return []\n  fi\n  if [ $nvals -gt 1 ]\n  then\n    vals=$((nvals))\n\
    \  else\n    vals=1\n  fi\n  if [ $val -ne $((vals/2)) ]\n  then\n    return $[vals,$index]\n\
    \  fi\n  val=$((val-1))\n  vals=$(($vals/2))\n  if [ $val -ne $vals ]\n  then\n\
    \    return $[vals,$index]\n  fi\n  val=$((val-1))\n  vals=$(($vals/2))\n  if\
    \ [ $val -ne $vals ]\n  then\n    return $[vals,$index]\n  fi\n  return $[vals,$index]\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp56g7vy9i.sh: line 37: [: too many arguments

    /tmp/tmp56g7vy9i.sh: line 42: [: too many arguments

    /tmp/tmp56g7vy9i.sh: line 52: [: too many arguments

    /tmp/tmp56g7vy9i.sh: line 57: [: too many arguments

    /tmp/tmp56g7vy9i.sh: line 61: [: too many arguments

    /tmp/tmp56g7vy9i.sh: line 67: [: -ne: unary operator expected

    /tmp/tmp56g7vy9i.sh: line 75: vals,: syntax error: operand expected (error token
    is ",")

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    mapfile -t arr < <(paste <(echo \"$1\" | sed 's/ /\" \"\
    /g') <<< \"$(echo \"$1\" | sed 's/ /\",\"/g')\" | sort -n -k 1,1 | awk '{if ($0!=\"\
    0\") print $0}');\n    min=$(echo \"$arr[0]\"|awk '{print $1}');\n    max=$(echo\
    \ \"$arr[0]\"|awk '{print $2}');\n    for i in $(seq 1 \"${#arr[@]}\")\n    do\n\
    \        curr=$(echo \"$arr[$i]\"|awk '{print $1}');\n        ((curr=$curr>$min)?:((curr=$curr<$min)?:((curr=$curr>$max)?:((curr=$curr<$max)?:curr=max))))\n\
    \        if [[ \"$curr\" -eq \"0\" ]]\n        then\n            min=$curr\n \
    \           max=$curr\n        elif [[ \"$curr\" -eq \"1\" ]]\n        then\n\
    \            min=$(echo \"$min\"|awk '{print $1}'|sed -e 's/ /\",\"/g');\n   \
    \         max=$(echo \"$max\"|awk '{print $1}'|sed -e 's/ /\",\"/g');\n      \
    \      if [[ \"$min\" -gt \"$max\" ]]\n            then\n                min=$min\n\
    \            fi\n        fi\n    done\n    echo \"$min\"\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpup62mfcq.sh: line 36: syntax error near unexpected token `?:''

    /tmp/tmpup62mfcq.sh: line 36: `        ((curr=$curr>$min)?:((curr=$curr<$min)?:((curr=$curr>$max)?:((curr=$curr<$max)?:curr=max))))''

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local array value\n  IFS=$'\\n' read -ra array < <(echo \"\
    $1\")\n  for value in \"${array[@]}\"; do\n    if [[ \"$value\" =~ ^-?[0-9]+$\
    \ ]] && [ \"$value\" -lt \"$value%2\" ]; then\n      echo \"$value\"\n      break\n\
    \    fi\n  done\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local i len $1 cur min\n    len=\"${#1}\"\n    declare\
    \ -a min\n    min=$((len > 2 ? len : 2))\n    for ((i = 0; i < len; i++)); do\n\
    \        cur=\"${1[i]}\"\n        # $((cur % 2 == 0)).\n        [ $((cur % 2))\
    \ -gt 0 ] && [[ ${min[$((i / 2))]} -le ${cur} ]] && min[$((i / 2))]=${cur}\n \
    \   done\n    if [ \"${#min[@]}\" -gt 0 ]; then\n        for ((i = 0; i < ${#min[@]};\
    \ i++)); do\n            echo \"\\\"${min[i]}\\\"\"\n        done\n    fi\n}\n\
    \ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpsbqlurjc.sh: line 30: local: `4'': not a valid identifier

    /tmp/tmpsbqlurjc.sh: line 30: local: `2'': not a valid identifier

    /tmp/tmpsbqlurjc.sh: line 30: local: `3'': not a valid identifier

    /tmp/tmpsbqlurjc.sh: line 35: ${1[i]}: bad substitution

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  if [[ \"$#\" -lt 1 ]]; then\n    return 1\n  fi\n  local\
    \ nodes=(${1//[^ ]+/ })\n  local max_value\n  local max_index\n  local i\n  local\
    \ temp_value\n\n  local sorted_nodes=()\n  local sorted_indexs=()\n  local i\n\
    \  local smallest_even_node\n  local smallest_even_node_index\n  local found_min_even\n\
    \  local found_min_even_index\n\n  for i in ${!nodes[*]}; do\n    temp_value=${nodes[$i]}\n\
    \    if [[ $temp_value -eq 0 ]]; then\n      smallest_even_node=$(( ($temp_value+$i-1)\
    \ % $nodes.length ))\n      smallest_even_node_index=$i\n      found_min_even=1\n\
    \      found_min_even_index=$i\n      break\n    elif [[ $temp_value < $max_value\
    \ ]]; then\n      smallest_even_node=$(( ($temp_value+$i-1) % $nodes.length ))\n\
    \      smallest_even_node_index=$i\n      found_min_even=1\n      found_min_even_index=$i\n\
    \    elif [[ $temp_value == $max_value ]]; then\n      if (( $found_min_even ==\
    \ 1 )); then\n        smallest_even_node=$(( ($temp_value+$i-1) % $nodes.length\
    \ ))\n        smallest_even_node_index=$i\n        found_min_even=1\n        found_min_even_index=$i\n\
    \      fi\n    fi\n  done\n  echo ${smallest_even_node_index} ${smallest_even_node}\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  IFS=\" \" read -ra nodes <<< \"$1\"\n  result=()\n  for node\
    \ in \"${nodes[@]}\"; do\n    if [[ \"$node\" =~ ^[0-9]+$ ]]; then\n      if !\
    \ [[ $(echo \"$node & 1\" | bc -l) -eq 1 ]]; then\n        value=$(echo \"$node*2\"\
    \ | bc -l)\n        index=$(echo \"$node + 1\" | bc -l)\n      else\n        value=$(echo\
    \ \"$node - 1\" | bc -l)\n        index=$(echo \"$node - 1\" | bc -l)\n      fi\n\
    \      result+=(\"$value\" \"\\\"$index\\\"\")\n    fi\n  done\n  if [[ ${#result[@]}\
    \ -eq 0 ]]; then\n    return 0\n  else\n    echo \"${result[@]}\"\n  fi\n}\n\n\
    candidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local a b i j k l min max smalest_value\n  a=$1\n  min=0\n\
    \  max=${#a}-1\n  for (( i=0; i < ${#a}; i++ )); do\n    if [ ${a[i]} -ge 0 ];\
    \ then\n      if [ ${a[i]} -gt ${min} ]; then\n        min=${a[i]}\n      fi\n\
    \      if [ ${a[i]} -lt ${max} ]; then\n        max=${a[i]}\n      fi\n    fi\n\
    \  done\n  if [ ${min} -eq ${max} ]; then\n    echo ${min}\n    return\n  fi\n\
    \  smalest_value=${min}\n  for (( j=0; j < ${#a}; j++ )); do\n    if [ ${a[j]}\
    \ -eq ${smalest_value} ]; then\n      smalest_value=${a[j]}\n    fi\n  done\n\
    \  for (( k=0; k < ${#a}; k++ )); do\n    if [ ${a[k]} -eq ${smalest_value} ];\
    \ then\n      l=k\n    fi\n  done\n  echo ${a[l]}\n  return\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1ga314hs.sh: line 35: [: too many arguments

    /tmp/tmp1ga314hs.sh: line 35: [: -ge: unary operator expected

    /tmp/tmp1ga314hs.sh: line 35: [: -ge: unary operator expected

    /tmp/tmp1ga314hs.sh: line 35: [: -ge: unary operator expected

    /tmp/tmp1ga314hs.sh: line 35: [: -ge: unary operator expected

    /tmp/tmp1ga314hs.sh: line 44: [: 5-1: integer expression expected

    /tmp/tmp1ga314hs.sh: line 50: [: too many arguments

    /tmp/tmp1ga314hs.sh: line 50: [: -eq: unary operator expected

    /tmp/tmp1ga314hs.sh: line 50: [: -eq: unary operator expected

    /tmp/tmp1ga314hs.sh: line 50: [: -eq: unary operator expected

    /tmp/tmp1ga314hs.sh: line 50: [: -eq: unary operator expected

    /tmp/tmp1ga314hs.sh: line 55: [: too many arguments

    /tmp/tmp1ga314hs.sh: line 55: [: -eq: unary operator expected

    /tmp/tmp1ga314hs.sh: line 55: [: -eq: unary operator expected

    /tmp/tmp1ga314hs.sh: line 55: [: -eq: unary operator expected

    /tmp/tmp1ga314hs.sh: line 55: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=( \"$1\" )\n  local smallest_even_value\n  local\
    \ smallest_index\n  local pluck_node\n\n  if [ \"$#\" -lt 1 ]\n  then\n    return\
    \ 0\n  fi\n  smallest_even_value=$( echo \"${nodes[*]}\" | sort -n | tail -n +2\
    \ | head -n 1 | sed 's/[^0-9]//g' )\n  smallest_index=0\n  for (( i=0; i < ${#nodes[*]};\
    \ i++ ))\n  do\n    if [ ${nodes[$i]} -eq $smallest_even_value ]\n    then\n \
    \     pluck_node=\"${nodes[$i]}\"\n      smallest_index=$i\n    fi\n  done\n\n\
    \  echo \"$smallest_even_value $smallest_index\"\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpc3whr0qh.sh: line 43: [: too many arguments

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  read -r -a arr $1\n  declare -a sorted\n\n  for i in \"${!arr[@]}\"\
    \n  do\n    (( sorted[$(( i < ${#arr[@]} ? ${arr[$i]} : 0 ))] += 1 ))\n  done\n\
    \n  for i in \"${!sorted[@]}\"\n  do\n    arr[$(( i < ${#arr[@]} ? ${sorted[$i]}\
    \ : 0 ))]\n  done\n\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpsfwqoxmq.sh: line 30: read: `4'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local -n arr=$1\n    local smalest_value=0\n    local smallest_index=0\n\
    \    local plucked_node\n    for node in ${arr[@]}; do\n        local node_value=${node%%\
    \ *}\n        local node_index=${node#* }\n        local node_even=\"${node_value%%\
    \ *}\"\n        local node_even_index=${node_index#* }\n        if [ \"$node_even\"\
    \ -eq \"$node_even_index\" ]; then\n            (( smalest_value+=node_value ))\n\
    \            (( smallest_index+=node_index ))\n            plucked_node=$node\n\
    \        elif [ \"$smalest_value\" -gt \"$node_even\" ]; then\n            ((\
    \ smalest_value=node_value ))\n            (( smallest_index=node_index ))\n \
    \           plucked_node=$node\n        fi\n    done\n    if [[ ${#arr[@]} -eq\
    \ 0 ]]; then\n        echo \"[]\"\n    else\n        echo \"[ $smalest_value,\
    \ $smallest_index ]\"\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpexhq_ujt.sh: line 30: local: `4 2 3'': invalid variable name for
    name reference

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    IFS=$'\\n' read -r nodes <<< \"$1\"\n    local plucked_node=\"\
    \"\n    local smallest_node_index=-1\n    for node in \"${nodes[@]}\"; do\n  \
    \      (( smallest_node_index == 1 )) && smallest_node_index=$(( node_index +\
    \ 1 ))\n        (( smallest_node_index == node_index )) && smallest_node_index=$((\
    \ node_index + 1 ))\n\n        if (( node_index == 0 )); then\n            smallest_node_index=1\n\
    \        fi\n\n        if (( node % 2 == 0 )) ; then\n            if [ -z \"$plucked_node\"\
    \ ] ; then\n                plucked_node=\"$node\"\n            else\n       \
    \         if [ \"$node\" -gt \"$plucked_node\" ] ; then\n                    plucked_node=\"\
    $node\"\n                fi\n            fi\n        fi\n        node_index=$((\
    \ node_index + 1 ))\n    done\n    echo \"$plucked_node $smallest_node_index\"\
    \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpt89s88ro.sh: line 41: ((: 4 2 3: syntax error in expression (error
    token is "2 3")

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: -1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local branches=()\n  local branches_len=0\n\n  local current_branch\n\
    \  local current_branch_len=0\n  local branch\n  local branch_index\n  local value\n\
    \  local current_value\n  local current_index\n  local index=0\n\n  while IFS=\
    \ read -r branch; do\n    if [ \"$branch\" == \"[\" ]; then\n      current_branch=$branch\n\
    \      current_branch_len=0\n      branches_len=$((branches_len + 1))\n    elif\
    \ [ \"$branch\" == \"]\" ]; then\n      branches[$index+$current_branch_len]=\"\
    $current_branch\"\n      current_branch_len=$((current_branch_len + 1))\n    \
    \  current_branch=\"[\"\n      branches[$index+$current_branch_len]=\"$current_branch\"\
    \n      current_branch_len=$((current_branch_len + 1))\n      index=$((index +\
    \ 1))\n      current_branch=\"\"\n    else\n      value=$(echo $branch | cut -d\
    \ \" \" -f1)\n      value=$(echo $value | cut -d \"\\\"\" -f2)\n      branches[$index+$current_branch_len]=\"\
    $value\"\n      current_branch_len=$((current_branch_len + 1))\n      current_branch=\"\
    \"\n    fi\n  done\n  branches[$index+$current_branch_len]=\"$current_branch\"\
    \n  current_branch_len=$((current_branch_len + 1))\n  current_branch=\"\"\n\n\
    \  # If branches is empty\n  if [ $branches_len -eq 0 ] ; then\n    return 0\n\
    \  fi\n\n  # If no even values in the array\n  if [ $current_branch_len -gt 0\
    \ ] ; then\n    local smallest=0\n    local smallest_index=0\n    local index=0\n\
    \    local even_value\n    while [ $index -le $branches_len ] ; do\n      even_value=$((branches[$index]))\n\
    \      if [ $even_value -ge $smallest ] ; then\n        smallest=$even_value\n\
    \        smallest_index=$index\n      fi\n      index=$((index + 1))\n    done\n\
    \n    echo $(echo $branches[$smallest_index])\n    return 0\n  fi\n\n  # If all\
    \ values are even then return the value that has the smallest index.\n  if [ $current_branch_len\
    \ -eq 1 ] ; then\n    echo $(echo $branches[0] | cut -d \" \" -f1)\n    return\
    \ 0\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=22 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=10 encoding='utf-8'>
  timestamp: 1660055529
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  arr=($1)\n  odd_values=$2\n\n  if [[ ${#arr[@]} -eq 0 ]];\
    \ then\n    return 0\n  fi\n\n  result=()\n  smallest=${arr[0]}\n  index=0\n\n\
    \  for i in $(seq 1 ${#arr[@]}); do\n    ((i+1))\n    val=${arr[i]}\n    if [[\
    \ ${val} -eq ${smallest} ]]; then\n      if [[ $odd_values == \"true\" ]]; then\n\
    \        ((index++))\n      fi\n    else\n      if [[ $odd_values == \"true\"\
    \ ]]; then\n        smallest=$val\n        index=$i\n      fi\n    fi\n  done\n\
    \n  return $result\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    # Your code here\n    local node_arr=( $1 )\n    local\
    \ picked_node\n    local index=0\n    local count=0\n    local result\n\n    #\
    \ Iterate over array and search for smallest even value\n    for ((i=0; i<${#node_arr[@]};\
    \ i++)); do\n        if [[ ${node_arr[$i]} -eq $((${node_arr[$i]}%2)) ]]; then\n\
    \            # If the value is the smallest even value then add it to list\n \
    \           result+=( \"${node_arr[$i]}\" )\n            index=$i\n          \
    \  # Increment count to track number of evens found\n            ((count++))\n\
    \        fi\n    done\n\n    # If there are multiple even values, pick the one\
    \ with the smallest index\n    if [[ ${count} -gt 1 ]]; then\n        # Find the\
    \ minimum value among all even values\n        picked_node=$(echo \"${result[*]}\"\
    \ | sort -n | tail -n 1 | tr -d \"[:space:]\")\n    else\n        # No even values\
    \ found, return empty list\n        picked_node=\"\"\n    fi\n\n    # Return list\n\
    \    echo \"$picked_node\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  echo \"$1\"\n  echo \"$1\" | awk '{\n    # remove spaces\
    \ and \"\n    while(substr($1,index,1) != \" \") {\n      index++\n    }\n   \
    \ while(substr($1,index,1) != \",\") {\n      index++\n    }\n    while(substr($1,index,1)\
    \ != \"\\\"\") {\n      index++\n    }\n    # remove quotes\n    while(substr($1,index,1)\
    \ != \"\\\"\") {\n      index++\n    }\n    while(substr($1,index,1) != \" \"\
    ) {\n      index++\n    }\n    # get the index of the first space\n    index++\n\
    \    while(substr($1,index,1) != \" \") {\n      index++\n    }\n    # get the\
    \ index of the second space\n    index++\n    while(substr($1,index,1) != \" \"\
    ) {\n      index++\n    }\n    # remove spaces and \"\n    while(substr($1,index,1)\
    \ != \" \") {\n      index++\n    }\n    while(substr($1,index,1) != \",\") {\n\
    \      index++\n    }\n    while(substr($1,index,1) != \"\\\"\") {\n      index++\n\
    \    }\n    while(substr($1,index,1) != \"\\\"\") {\n      index++\n    }\n  \
    \  # get the index of the third quote\n    index++\n    while(substr($1,index,1)\
    \ != \" \") {\n      index++\n    }\n    # get the index of the fourth quote\n\
    \    index++\n    while(substr($1,index,1) != \"\\\"\") {\n      index++\n   \
    \ }\n    # remove quotes\n    while(substr($1,index,1) != \"\\\"\") {\n      index++\n\
    \    }\n    while(substr($1,index,1) != \" \") {\n      index++\n    }\n    #\
    \ get the index of the fifth space\n    index++\n    while(substr($1,index,1)\
    \ != \" \") {\n      index++\n    }\n    # get the index of the sixth space\n\
    \    index++\n    while(substr($1,index,1) != \" \") {\n      index++\n    }\n\
    \    # remove spaces and \"\n    while(substr($1,index,1) != \" \") {\n      index++\n\
    \    }\n    while(substr($1,index,1) != \",\") {\n      index++\n    }\n    while(substr($1,index,1)\
    \ != \"\\\"\") {\n      index++\n    }\n    while(substr($1,index,1) != \"\\\"\
    \") {\n      index++\n    }\n    # get the index of the seventh quote\n    index++\n\
    \    while(substr($1,index,1) != \" \") {\n      index++\n    }\n    # get the\
    \ index of the eighth quote\n    index++\n    while(substr($1,index,1) != \"\\\
    \"\") {\n      index++\n    }\n\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprc8m3q5r.sh: line 31: unexpected EOF while looking for matching
    `''''

    /tmp/tmprc8m3q5r.sh: line 142: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=\"$1\"\n  local smalest_value\n  local smalest_index\n\
    \  local smalest_node\n  local smalest_node_index\n  local smalest_node_value\n\
    \  local smalest_node_node\n\n  smalest_value=\"$2\"\n  smalest_index=\"$3\"\n\
    \  smalest_node=\"$4\"\n  smalest_node_index=\"$5\"\n  smalest_node_value=\"$6\"\
    \n  smalest_node_node=\"$7\"\n\n  if [ -z \"$nodes\" ]\n  then\n    return 1\n\
    \  fi\n\n  while read -r node\n  do\n    smalest_node_value=\"$node\"\n    ((\
    \ smalest_node_value > smalest_value )) &&\n      (( smalest_value = smalest_node_value\
    \ ))\n    (( smalest_node_node = ($node > smalest_value )) &&\n      (( smalest_node\
    \ = smalest_node_node )))\n    (( smalest_node_node_index = ($node < smalest_value\
    \ )) &&\n      (( smalest_node_index = smalest_node_node_index )))\n    (( smalest_node_value\
    \ == smalest_value )) &&\n      (( smalest_node_value ))\n  done <<< \"$nodes\"\
    \n\n  if [ -z \"$smalest_node\" ]\n  then\n    return 0\n  fi\n\n  echo \"$smalest_value\
    \ $smalest_node\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp44lm1d6t.sh: line 55: syntax error near unexpected token `(''

    /tmp/tmp44lm1d6t.sh: line 55: `( smalest_node_node = ($node > smalest_value ))
    ''

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  IFS=$'\\n' read -r -a nodes <<< \"$1\"\n  local -n val=\"\
    ${nodes[*]}\"\n  local -n i=\"${nodes[*]}\"\n  local -n min=\"${nodes[*]}\"\n\
    \  local -n j=\"${nodes[*]}\"\n  local -n nodes=\"${nodes[*]}\"\n\n  local -n\
    \ min_index=\"${nodes[*]}\"\n  local -n smallest_value=\"${nodes[*]}\"\n  local\
    \ -n index=\"${nodes[*]}\"\n\n  for ((i = 0; i < ${#nodes[*]}; i++)); do\n   \
    \ val=${nodes[$i]}\n    if (( $(echo $val | bc -l) + $(echo $index | bc -l) >\
    \ 0 )); then\n      smallest_value=$val\n      min_index=$index\n      smallest_index=$i\n\
    \    fi\n    ((j++))\n    ((index=${nodes[$j]}))\n    ((j++))\n    ((index=${nodes[$j]}))\n\
    \    ((j++))\n    ((index=${nodes[$j]}))\n  done\n\n  echo ${smallest_value}\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4zj57921.sh: line 31: local: `4 2 3'': invalid variable name for
    name reference

    /tmp/tmp4zj57921.sh: line 32: local: `4 2 3'': invalid variable name for name
    reference

    /tmp/tmp4zj57921.sh: line 33: local: `4 2 3'': invalid variable name for name
    reference

    /tmp/tmp4zj57921.sh: line 34: local: `4 2 3'': invalid variable name for name
    reference

    /tmp/tmp4zj57921.sh: line 35: local: `4 2 3'': invalid variable name for name
    reference

    /tmp/tmp4zj57921.sh: line 37: local: `4 2 3'': invalid variable name for name
    reference

    /tmp/tmp4zj57921.sh: line 38: local: `4 2 3'': invalid variable name for name
    reference

    /tmp/tmp4zj57921.sh: line 39: local: `4 2 3'': invalid variable name for name
    reference

    (standard_in) 1: syntax error

    /tmp/tmp4zj57921.sh: line 43: ((: +  > 0 : syntax error: operand expected (error
    token is "> 0 ")

    /tmp/tmp4zj57921.sh: line 49: ((: index=: syntax error: operand expected (error
    token is "=")

    /tmp/tmp4zj57921.sh: line 51: ((: index=: syntax error: operand expected (error
    token is "=")

    /tmp/tmp4zj57921.sh: line 53: ((: index=: syntax error: operand expected (error
    token is "=")

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  mapfile -t arr < <(echo \"$1\")\n  local arrlen=${#arr[@]}\n\
    \  if [ ${arrlen} -eq 0 ]\n  then\n    echo \"[]\"\n    return\n  fi\n  local\
    \ smalest_value=0\n  local smalest_idx=0\n  local idx=0\n  local value\n  for\
    \ ((i=0; i<arrlen; i++)); do\n    value=${arr[i]}\n    idx=$((idx+1))\n    if\
    \ [ $((value % 2)) -eq 0 ]\n    then\n      if [ $idx -gt $smalest_idx ]\n   \
    \   then\n        smalest_idx=$idx\n        smalest_value=$value\n      fi\n \
    \   fi\n  done\n  echo \"$smalest_value $smalest_idx\"\n  return\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpoohq6k3d.sh: line 44: 4 2 3: syntax error in expression (error
    token is "2 3")

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local arr=$1\n    local result=$2\n    local i=0\n    local\
    \ pick\n    pick=$(echo ${arr} | cut -d ' ' -f $((${#arr[@]}-1))) #The number\
    \ of the element from the end\n    pick=${pick:-0} #To remove the quote marks\n\
    \    local node\n    local next_node\n    while [[ \"$i\" -lt ${#arr[@]} ]]; do\n\
    \        node=${arr[$i]}\n        next_node=$(echo $arr | cut -d ' ' -f $((i+1)))\
    \ #The next element in the array\n        if [[ \"$pick\" == \"$node\" ]]; then\n\
    \            result+=$(echo \"$next_node\" | cut -d ' ' -f 1) #Add the next element\
    \ to the result\n        fi\n        i=$((i+1))\n    done\n    echo \"$result\"\
    \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'cut: fields are numbered from 1

    Try ''cut --help'' for more information.

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -r arr=$1\n  local -r len=${#arr[*]}\n  local -r val\n\
    \n  val=\"\\\"${arr[0]}\\\"\"\n  # If there are more than one smallest even value,\
    \ we pick the smallest\n  [[ $(( len > 1 )) ]] && val=$arr[1]\n  # If there are\
    \ multiple smallest even values, we pick the smallest one\n  [[ $(( len > 1 ))\
    \ ]] && val=\"${val}${arr[0]}\"\n  # If there are no even values, return the smallest\
    \ value\n  [[ $(( len == 0 )) ]] || val=\"${val}\"\n\n  # Get index of smallest\
    \ value\n  local -I idx=0 i\n  for i in $(seq 0 $(( len - 1 ))); do\n    (( idx\
    \ < (len - 1 )) && idx+=1 )\n    [[ ${arr[$idx]} -eq \"${val}\" ]] && break\n\
    \  done\n  [[ $(( len - 1 )) -eq $i ]] && idx=-1\n\n  # Get smallest value if\
    \ it exists\n  if [[ $idx -eq -1 ]]; then\n    val=\"${arr[0]}\"\n  else\n   \
    \ val=\"${arr[$idx+1]}\"\n  fi\n\n  # Remove smallest\n  arr=( ${arr[@]:0:idx}\
    \ ${arr[@]:idx:} )\n\n  echo \"$val\"\n}\n\ncandidate() {\n    pluck \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcnzdr5oc.sh: line 45: syntax error near unexpected token `(''

    /tmp/tmpcnzdr5oc.sh: line 45: `( idx < (len - 1 )) ''

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=\"$1\"\n  [[ -z \"$nodes\" ]] && return 0\n \
    \ local min=\"$nodes[0]\"\n  local index=0\n  for node in \"$nodes\" ; do\n  \
    \  [[ \"$node\" =~ \"^-?[0-9]+$\" ]] || continue\n    local value=\"${node#-}\"\
    \n    local val=\"${value%%.*}\"\n    if [[ \"$val\" == \"0\" ]]; then\n     \
    \ if [[ \"$min\" == \"0\" ]]; then\n        min=\"$node\"\n      else\n      \
    \  [[ \"$min\" > \"$node\" ]] && min=\"$node\"\n      fi\n    else\n      if [[\
    \ \"$min\" == \"$value\" ]]; then\n        min=\"$node\"\n      fi\n    fi\n \
    \ done\n  echo \"$min\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local indexes=()\n    local smalest_value=\n    local index=0\n\
    \    for x in $1; do\n        value=$(( (x%2)+1 ))\n        if [ $value -lt $smalest_value\
    \ ]; then\n            smalest_value=$value\n        fi\n        indexes=$(( $indexes+1\
    \ ))\n    done\n    smalest_value\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqix1t_ya.sh: line 35: [: 1: unary operator expected

    /tmp/tmpqix1t_ya.sh: line 35: [: 1: unary operator expected

    /tmp/tmpqix1t_ya.sh: line 35: [: 2: unary operator expected

    /tmp/tmpqix1t_ya.sh: line 40: smalest_value: command not found

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local i j\n  local val\n  local arr\n  arr=( $1 )\n  echo\
    \ \"${arr[@]}\"\n  val=\"-1\"\n  i=0\n  while [ $i -lt $(( ${#arr[@]} -1 )) ]\n\
    \  do\n    local j=$(( i + 1 ))\n    echo \"${arr[$i]}\"\n    local val=\"-1\"\
    \n    while [ $j -lt $(( ${#arr[@]} )) ]\n    do\n      echo \"${arr[$j]}\"\n\
    \      if (( $(echo \"${arr[$j]}%2==0\" | bc) ));\n      then\n        echo \"\
    ${arr[$j]}\"\n        (( val=\"$j\" ))\n        break\n      fi\n      (( j=$j\
    \ ))\n    done\n    echo \"$val\"\n    if [ $val -ne -1 ]\n    then\n      break\n\
    \    fi\n    (( i=\"$j\" ))\n  done\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=( $1 )\n  local smalest_value\n  local smalest_index\n\
    \  local smalest_index2\n  local smalest_value2\n  local smalest_index3\n  local\
    \ smalest_value3\n  local smalest_index4\n  local smalest_value4\n  local smalest_index5\n\
    \  local smalest_value5\n  local smalest_index6\n  local smalest_value6\n  local\
    \ smalest_index7\n  local smalest_value7\n  local smalest_index8\n  local smalest_value8\n\
    \  local smalest_index9\n  local smalest_value9\n  local smalest_index10\n  local\
    \ smalest_value10\n  local smalest_index11\n  local smalest_value11\n  local smalest_index12\n\
    \  local smalest_value12\n  local smalest_index13\n  local smalest_value13\n \
    \ local smalest_index14\n  local smalest_value14\n  local smalest_index15\n  local\
    \ smalest_value15\n  local smalest_index16\n  local smalest_value16\n  local smalest_index17\n\
    \  local smalest_value17\n  local smalest_index18\n  local smalest_value18\n \
    \ local smalest_index19\n  local smalest_value19\n  local smalest_index20\n  local\
    \ smalest_value20\n  local smalest_index21\n  local smalest_value21\n  local smalest_index22\n\
    \  local smalest_value22\n  local smalest_index23\n  local smalest_value23\n \
    \ local smalest_index24\n  local smalest_value24\n  local smalest_index25\n  local\
    \ smalest_value25\n  local smalest_index26\n  local smalest_value26\n  local smalest_index27\n\
    \  local smalest_value27\n  local smalest_index28\n  local smalest_value28\n \
    \ local smalest_index29\n  local smalest_value29\n  local smalest_index30\n  local\
    \ smalest_value30\n  local smalest_index31\n  local smalest_value31\n  local smalest_index32\n\
    \  \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  if [ -z \"$1\" ]\n  then\n    return 0\n  fi\n  mapfile -t\
    \ array < <(echo \"$1\")\n  smallest_value=0\n  smallest_index=0\n  for i in \"\
    ${array[@]}\"\n  do\n    ((smallest_value=$smallest_value+$i))\n    smallest_index=$((smallest_index+1))\n\
    \  done\n  if [ $smallest_value -le 2 ]\n  then\n    return 0\n  fi\n  for i in\
    \ \"${array[@]}\"\n  do\n    if (( (($smallest_value%2)==0) && (( ((${array[$i]}+0)%2)==0)\
    \ ))\n    then\n      echo \"${smallest_value} ${smallest_index}\"\n      return\
    \ 0\n    fi\n  done\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp__b45wim.sh: line 48: syntax error near unexpected token `==0''

    /tmp/tmp__b45wim.sh: line 48: `( (($smallest_value%2)==0) && (( ((${array[$i]}+0)%2)==0)
    ))''

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=(${1//\"$'\\t'\"})\n    local smallest=$(awk\
    \ -F: 'BEGIN {min=1000000; for (i=1; i<=NF; i++) if ($i < min) {min=$i}} {if ($min%2==0)\
    \ {print $1;min}}' <<< ${nodes[0]})\n    local smallest_index=0\n    for (( i=0;\
    \ i < ${#nodes[@]} && smallest_index==0; i++ ));\n    local even_index=0\n   \
    \ for (( i=0; i < ${#nodes[@]} && even_index==0; i++ ));\n    local result=()\n\
    \    for (( i=0; i < ${#nodes[@]} && even_index==0; i++ ));\n    if [[ ${#nodes[@]}==0\
    \ && ${#result}==0 ]]; then\n        echo \"[]\"\n    elif [[ ${#nodes[@]}==0\
    \ && ${#result}!=0 ]]; then\n        echo \"${result[0]}\"\n    else\n       \
    \ local smallest_even_value=$(awk -F: 'BEGIN {min=1000000; for (i=1; i<=NF; i++)\
    \ if ($i < min) {min=$i}} {if ($min%2==0) {print $1}}' <<< ${smallest})\n    \
    \    local even_value=$(awk -F: 'BEGIN {min=1000000; for (i=1; i<=NF; i++) if\
    \ ($i < min) {min=$i}} {if ($min%2==0) {print $1}}' <<< ${nodes[0]})\n       \
    \ for (( i=0; i < ${#nodes[@]} && even_index==0; i++ ));\n        for (( i=0;\
    \ i < ${#nodes[@]} && even_index==0; i++ ));\n        result=($(echo $result $smallest_even_value))\n\
    \        for (( i=0; i < ${#nodes[@]} && even_index==0; i++ ));\n        smallest_index=$(awk\
    \ -F: 'BEGIN {min=1000000; for (i=1; i<=NF; i++) if ($i < min) {min=$i}} {if ($min%2==0)\
    \ {print $1}}' <<< ${smallest})\n        echo \"${result[@]}\"\n    fi\n}\n\n\
    candidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpj1d9ff_c.sh: line 34: syntax error near unexpected token `local''

    /tmp/tmpj1d9ff_c.sh: line 34: `    local even_index=0''

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n\tlocal values=$(echo $1 | cut -d ' ' -f2)\n\tlocal index=$(echo\
    \ $1 | cut -d ' ' -f1)\n\tlocal smalest_value=$(echo $values) | cut -d ' ' -f2\n\
    \tlocal index\n\tfor (( i=1 ; i<$values ; i++)); do\n\t\tlocal node_value=$(echo\
    \ $values | cut -d ' ' -f$i)\n\t\tif [[ ${node_value} -eq ${smalest_value} ]];\
    \ then\n\t\t\tindex=$(echo $i | cut -d ' ' -f1)\n\t\t\tbreak\n\t\telse\n\t\t\t\
    if [[ ${node_value} -lt ${smalest_value} ]]; then\n\t\t\t\tsmalest_value=${node_value}\n\
    \t\t\t\tindex=$(echo $i | cut -d ' ' -f1)\n\t\t\tfi\n\t\tfi\n\tdone\n\techo ${smalest_value},${index}\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=\"$1\"\n  # The index of the minimum odd value\
    \ will be the index of the first odd value\n  # We start searching from the second\
    \ node to find the smallest odd value\n  # The smallest odd value will occur after\
    \ the first node\n  local index=$((${#nodes}-1))\n  local value\n  while [[ -z\
    \ $value ]];\n  do\n    value=$(echo \"$nodes\" | tr -cd \"[:digit:]\" | sort\
    \ --stable | head -1)\n    index=$((index-1))\n    if [[ ! -z $value ]]; then\n\
    \      local odd\n      if (( $((${#value}%2)) == 0)); then\n        odd=\"$(echo\
    \ \"$value\" | awk '{print ($1 % 2)}')\"\n      else\n        odd=\"$(echo \"\
    $value\" | awk '{print ($1 / 2)}')\"\n      fi\n      if [[ $odd -eq 0 ]]; then\n\
    \        value=$(echo \"$value\" | awk '{print $1}')\n        index=$((index+1))\n\
    \      fi\n    fi\n  done\n  if [[ -z \"$value\" ]]; then\n    return 0\n  else\n\
    \    echo \"$value $index\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptw02hzsm.sh: line 47: [[: 211.5: syntax error: invalid arithmetic
    operator (error token is ".5")

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local i=0\n  local max=0\n  local min=0\n  local node\n \
    \ local node_1\n  local node_2\n  local val\n  local val1\n  local val2\n\n  while\
    \ [ $i -lt $1 ]\n  do\n    val=$1\n    node=$(( $val % 2 ))\n    if [ $node -eq\
    \ 0 ]\n    then\n      val1=$val\n      val2=$i\n      (( i=i+1 ))\n    else\n\
    \      val1=$(( $val + 1 ))\n      val2=$i\n      (( i=i+1 ))\n    fi\n    if\
    \ [ $val -gt $max ]\n    then\n      max=$val\n      node_1=$node\n      node_2=$i\n\
    \    fi\n    if [ $val -eq $max ]\n    then\n      (( max=$i ))\n    fi\n    if\
    \ [ $val1 -eq $max ]\n    then\n      (( max=$i ))\n    fi\n  done\n  if [ $i\
    \ -gt $min ]\n  then\n    node=$(( $node_2 ))\n  else\n    node=$(( $node_1 ))\n\
    \  fi\n  echo $node\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2qs2r6jk.sh: line 40: [: too many arguments

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=$(sort -n <<<$nodes\
    \ | tail -n 1)\n    local even_values=$(sort -n <<<$nodes | cut -d ' ' -f 2 |\
    \ grep -o '[02468]'\n    local smalest_node_index=0\n    local smalest_node_index1=0\n\
    \    local smalest_node_index2=0\n    local smalest_node_index3=0\n    for ((\
    \ i=0; i < ${#nodes}; i++ )); do\n        local node_value=$nodes[i]\n       \
    \ local node_index=$i\n        if [[ \"$node_value\" != *\"0\"* ]]; then\n   \
    \         local even_value=$(echo \"$node_value\" | grep -o '[02468]')\n     \
    \       if [[ \"$even_value\" != \"\" ]]; then\n                if (( smalest_value\
    \ == node_value )); then\n                    smalest_node_index=$node_index\n\
    \                    smalest_node_index1=$node_index\n                    smalest_node_index2=$node_index\n\
    \                    smalest_node_index3=$node_index\n                fi\n   \
    \             if (( smalest_node_index != 0 )); then\n                    if ((\
    \ smalest_value == node_value )); then\n                        smalest_node_index=$node_index\n\
    \                        smalest_node_index1=$node_index\n                   \
    \     smalest_node_index2=$node_index\n                        smalest_node_index3=$node_index\n\
    \                    fi\n                fi\n            fi\n        fi\n    done\n\
    \    if [[ \"$even_values\" == \"\" ]]; then\n        echo \"[]\"\n    else\n\
    \        echo \"[$smalest_value,${smalest_node_index1},${smalest_node_index2},${smalest_node_index3}]\"\
    \n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbvbxukxg.sh: line 32: unexpected EOF while looking for matching
    `)''

    /tmp/tmpbvbxukxg.sh: line 84: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local -a nodes=($1)\n    local -a evens=()\n    local smalest_value=-1\n\
    \    local smallest_idx=0\n    for i in ${nodes[@]}; do\n        evens+=(\"$i\"\
    \ $(( $i % 2 )))\n        local index=$(( $i + 1))\n        if [ \"$index\" -gt\
    \ \"$smalest_value\" ]; then\n            smalest_value=$index\n            smallest_idx=$i\n\
    \        fi\n    done\n    evens=(${evens[*]})\n    if [ ${#evens[@]} -eq 0 ];\
    \ then\n        echo \"[]\"\n    else\n        echo \"[ '$smalest_value', \\\"\
    ${evens[*]}\\\" ]\"\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes INDEX\n    IFS=' ' read -r -a nodes <<< \"\
    $1\"\n    for i in \"${!nodes[@]}\"; do\n        [ -z \"${nodes[$i]}\" ] && continue\n\
    \        [ \"$(echo \"${nodes[$i]}\" | sed 's/ //g' | tr a-z A-Z | sort -n)\"\
    \ -gt 0 ] &&\n            INDEX=\"$i\" && break\n    done\n    [[ -z \"${INDEX}\"\
    \ ]] && return 0\n    sort -n <<<\"${nodes[$INDEX]}\" | head -1 | sed 's/ //g'\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local array=\"$1\"\n    local smalest_value\n    local\
    \ smalest_index\n    local i\n\n    declare -a new_array\n    IFS=' ' read -r\
    \ -a array <<<\"$array\"\n\n    for ((i = 0; i < ${#array[@]}; i++)); do\n   \
    \     if ((${array[i]} % 2 == 0)); then\n            smalest_value=${array[i]}\n\
    \            smalest_index=${i}\n            fi\n        done\n        if ((smalest_value\
    \ eq 0)); then\n            new_array+=( \"${array[smalest_index]}\")\n      \
    \  else\n            for ((j=0; j < ${#smalest_array[@]}; j++)); do\n        \
    \        if ((${smalest_array[j]} <= smalest_value)); then\n                 \
    \   smalest_value=${smalest_array[j]}\n                    smalest_index=${j}\n\
    \                    fi\n                done\n            done\n            new_array+=(\
    \ \"${array[smalest_index]}\")\n        fi\n    echo \"${new_array[@]}\"\n}\n\n\
    candidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsb_97uip.sh: line 53: syntax error near unexpected token `done''

    /tmp/tmpsb_97uip.sh: line 53: `            done''

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local result\n    if [[ -z $nodes ]];\
    \ then\n        result=()\n    elif [[ ${#nodes[@]} -eq 0 ]]; then\n        result=()\n\
    \    else\n        local index=0\n        while [[ ${#nodes[@]} -gt 0 ]]; do\n\
    \            local node\n            node=${nodes[0]}\n            local value\n\
    \            value=\"$node\"\n            local index\n            index=$((index+1))\n\
    \            local odd_value\n            odd_value=$(( value / 2 ))\n       \
    \     local even_value\n            even_value=$(( value % 2 ))\n            if\
    \ [[ ${#nodes[@]} -eq 1 ]]; then\n                if [[ ${even_value} -eq 0 ]];\
    \ then\n                    node=${nodes[@]}\n                    value=$node\n\
    \                    index=${index}\n                    break\n             \
    \   elif [[ ${index} -gt ${#nodes[@]} ]]; then\n                    echo \"No\
    \ nodes with even values were found\"\n                    return 1\n        \
    \        elif [[ ${odd_value} -eq 0 ]]; then\n                    node=${nodes[@]}\n\
    \                    value=$node\n                    index=${index}\n       \
    \             break\n                else\n                    continue\n    \
    \            fi\n            elif [[ ${even_value} -eq 1 ]]; then\n          \
    \      if [[ ${odd_value} -eq 0 ]]; then\n                    node=${nodes[@]}\n\
    \                    value=$node\n                    index=${index}\n       \
    \             break\n                elif [[ ${index} -gt ${#nodes[@]} ]]; then\n\
    \                    echo \"No nodes with odd values were found\"\n          \
    \          return 1\n                elif [[ ${odd_value} -eq 0 ]]; then\n   \
    \                 node=${nodes[@]}\n                    value=$node\n        \
    \            index=${index}\n                    break\n                else\n\
    \                    continue\n                fi\n            elif [[ ${odd_value}\
    \ -eq 1 ]]; then\n                if [[ ${even_value} -eq 0 ]]; then\n       \
    \             node=${nodes[@]}\n                    value=$node\n            \
    \        index=${index}\n                    break\n                elif [[ ${index}\
    \ -gt ${#nodes[@]} ]]; then\n                    echo \"No nodes with even values\
    \ were found\"\n                    return 1\n                elif [[ ${even_value}\
    \ -eq 0 ]]; then\n                    node=${nodes[@]}\n                    value=$node\n\
    \                    index=${index}\n                    break\n             \
    \   else\n                    continue\n                fi\n            else\n\
    \                continue\n            fi\n            shift nodes\n        done\n\
    \        result=( \"${nodes[\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfrdbgzm8.sh: line 121: unexpected EOF while looking for matching
    `"''

    /tmp/tmpfrdbgzm8.sh: line 125: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local n=$1 a i min min i j min2 min2 len\n    min=min2=i=0\n\
    \    for ((j=1; j<$#; j++))\n    do\n        a=`echo $j | cut -d \" \" -f1`\n\
    \        if [[ ${#a[@]} -eq 0 ]]\n        then\n            len=$j\n        else\n\
    \            len=$((len+1))\n        fi\n        if [[ ${#a[@]} -gt 1 ]]\n   \
    \     then\n            if (( ${a[i]}+${a[((i-1))]} % 2 == 0 ))\n            then\n\
    \                if [[ $((a[${i}])+${a[${i}-1]}) % 2 -eq 0 ]]\n              \
    \  then\n                    min=$(expr ${a[((i-1))]} + ${a[i]})\n           \
    \         if [[ $((len-2)) -eq 0 ]]\n                    then\n              \
    \          min2=min\n                    elif [[ $((a[${i}])+${a[${i}-1]}) ==\
    \ $min2 ]]\n                    then\n                        min2=min\n     \
    \               fi\n                else\n                    min2=min\n     \
    \           fi\n            fi\n        fi\n        ((i++))\n    done\n    if\
    \ [[ ${min} -le $((len-1)) ]]\n    then\n        echo \"${a[$min]} $min2\"\n \
    \   else\n        echo \"${a[$((len-1))]} $min2\"\n    fi\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsspyk_ud.sh: line 45: conditional binary operator expected

    /tmp/tmpsspyk_ud.sh: line 45: syntax error near `%''

    /tmp/tmpsspyk_ud.sh: line 45: `                if [[ $((a[${i}])+${a[${i}-1]})
    % 2 -eq 0 ]]''

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1;\n  local smalest_value=0;\n  local smalest_index=0;\n\
    \  local current_index=0\n  local current_value=0\n  local current_value_index\n\
    \  local current_even_index=0\n  local current_even_value\n  local even_values\n\
    \  local even_indexes\n  for ((i=0; i < ${#nodes[@]}; i++))\n  do\n    odd=$(expr\
    \ ${nodes[i]} %% 2)\n    even=$(expr ${nodes[i]} %% 2)\n    if [ $current_index\
    \ == 0 ]\n    then\n      if [ $odd -eq 0 ]\n      then\n        current_value=${nodes[i]};\n\
    \      else\n        current_even_value=${nodes[i]};\n      fi\n    elif [ $odd\
    \ -eq 0 ]\n    then\n      if [ $current_index -eq 0 ]\n      then\n        current_even_value=${nodes[i]};\n\
    \      else\n        current_even_index=$current_index\n      fi\n      even_values=(\"\
    ${even_values[@]}\" \"${current_even_value}\")\n      even_indexes=(\"${even_indexes[@]}\"\
    \ \"${current_even_index}\")\n      current_even_index=0\n      current_even_value=0\n\
    \    else\n      if [ $current_index -eq 0 ]\n      then\n        current_even_index=$current_index\n\
    \      else\n        current_even_value=${nodes[i]};\n      fi\n      even_values=(\"\
    ${even_values[@]}\" \"${current_even_value}\")\n      even_indexes=(\"${even_indexes[@]}\"\
    \ \"${current_even_index}\")\n    fi\n    current_index=$(( ${current_index} +\
    \ 1 ))\n  done\n  if [ ${#even_values[@]} -eq 0 ]\n  then\n    return []\n  else\n\
    \    return (\"${even_values[@]}\" \"${even_indexes[@]}\")\n  fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjnc970d8.sh: line 80: syntax error near unexpected token `"${even_values[@]}"''

    /tmp/tmpjnc970d8.sh: line 80: `    return ("${even_values[@]}" "${even_indexes[@]}")''

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local items index\n  IFS=' ' read -r -a items <<<\"$1\"\n\
    \  local smallest_value\n  local smallest_index\n  smallest_value=0\n  smallest_index=0\n\
    \  for index in \"${!items[@]}\"; do\n    local item=\"${items[index]}\"\n   \
    \ if [[ ${item:0:2} == ${smallest_value:0:2} ]]; then\n      if [[ ${item:0:2}\
    \ -lt ${smallest_value:0:2} ]]; then\n        smallest_value=${item:0:2}\n   \
    \     smallest_index=${index}\n      fi\n    fi\n  done\n  if [[ ${#items[@]}\
    \ -eq 0 ]]; then\n    return 0\n  fi\n  return\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local num_nodes=$1\n  local node_vals=$2\n  local evens=$(echo\
    \ \"$node_vals\" | sed -e 's/ /\\n/g' -e '/^$/d')\n  local smalest_val\n  local\
    \ smalest_i\n  if [ -n \"$evens\" ]\n    then\n      smalest_val=$(cat $evens\
    \ | sort -r -n | head -1)\n      smalest_i=$(echo \"$node_vals\" | grep -n \"\
    $smalest_val\" | head -1)\n      echo \"$smalest_val\"\n      echo \"$smalest_i\"\
    \n  else\n      echo \"[]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local i value nodes smallest_value smallest_index i\n \
    \   local -a output\n    local -a min_array\n    local -a node_array\n    read\
    \ -a node_array <<< $1\n    local -a array_size\n    array_size=${#node_array[@]}\n\
    \    smallest_value=${node_array[0]}\n    smallest_index=0\n    local -a max_array\n\
    \    max_array=()\n    for ((i=1; i<=$array_size; i++)); do\n        value=${node_array[i]}\n\
    \        smallest_value=$((value < smallest_value ? value : smallest_value))\n\
    \        max_array+=(\"$smallest_value\")\n    done\n    if [ -z \"$smallest_value\"\
    \ ]; then\n        return output\n    else\n        output=()\n        for value\
    \ in \"${max_array[@]}\"; do\n            ((smallest_index++))\n            if\
    \ [ \"$value\" = \"$smallest_value\" ]; then\n                smallest_value=$value\n\
    \                output+=(\"$smallest_value\" \"${smallest_index}\")\n       \
    \         break\n            else\n                output+=(\"$smallest_value\"\
    \ \"${smallest_index}\")\n            fi\n        done\n        output+=(\"$smallest_value\"\
    \ \"${array_size}\")\n        return output\n    fi\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpk45rgbdy.sh: line 61: return: output: numeric argument required

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes\n  IFS=$'\\n' read -d '' -ra nodes <<<\"${1}\"\
    \n  local smalest_value\n  local smalest_index\n  for ((i = 0; i < ${#nodes[@]};\
    \ i++)); do\n    if [ ${nodes[$i]} -eq \"${nodes[$((i + 1))]}\" ]; then\n    \
    \  smalest_value=${nodes[$i]}\n      smalest_index=$((i + 1))\n    elif (( ${nodes[$i]}\
    \ < ${smalest_value} )) ; then\n      smalest_value=${nodes[$i]}\n      smalest_index=$((i\
    \ + 1))\n    fi\n  done\n  echo \"${smalest_value}\" \"${smalest_index}\"\n}\n\
    \ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpi_czxbgr.sh: line 35: [: too many arguments

    /tmp/tmpi_czxbgr.sh: line 38: ((: 4 2 3 <  : syntax error in expression (error
    token is "2 3 <  ")

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  declare -A hash\n  local i j\n  for j in \"$1\"; do\n   \
    \ i=$(expr \"$j\" : '\\([0-9]*\\)')\n    hash[\"${hash[\"$i\"]}\"=\"$j\"]\n  done\n\
    \  for i in \"${!hash[@]}\"; do\n    [[ \"$i\" =~ ^[0-9]+$ ]] && [[ -n ${hash[\"\
    $i\"]} ]] && (([[ ${hash[\"$i\"]} =~ ^[0-9]+$ ]] && [[ -n ${hash[\"$i\"]} ]] ||\
    \ echo \"${hash[\"$i\"]}\") && break\n  done\n}\n\ncandidate() {\n    pluck \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp25mn5jhm.sh: line 38: syntax error near unexpected token `done''

    /tmp/tmp25mn5jhm.sh: line 38: `  done''

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local numbers=$1\n    local result\n    local min\n   \
    \ local index\n    local min_index\n    local min_indexes\n    for ((i=0; i<${#numbers[@]};\
    \ i++))\n    do\n        ((${#min_indexes[@]} == 0))\n        index=0\n      \
    \  ((min_indexes=${#min_indexes[@]})) \n        min=${numbers[i]}\n        ((min_index=${#min_indexes[@]}))\
    \ \n        min=`echo \"$min\" | awk '{print $1}'`\n        min_indexes[$index]=$min_index\n\
    \        while ((${#min_indexes[@]} > 0))\n        do\n            ((index=$((${#min_indexes[@]}\
    \ - 1))))\n            ((min_index=${min_indexes[index]}))\n            min=`echo\
    \ \"$min\" | awk '{print $1}'`\n            if ((${min_indexes[index]} == $min_index))\n\
    \            then\n                ((min_indexes=${min_indexes[@]/%$min_index/}))\n\
    \                ((min_indexes=${min_indexes[@]}%$min_index))\n            else\n\
    \                ((min_indexes[$index]=$min_index))\n            fi\n        done\n\
    \        result=`echo \"$min\"`\n        echo -n $result\n        echo -n $min_index\n\
    \        echo -n ${min_indexes[@]}`\n    done\n}\n\ncandidate() {\n    pluck \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpc0_7l60l.sh: line 61: unexpected EOF while looking for matching
    ``''

    /tmp/tmpc0_7l60l.sh: line 82: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local IFS=$'\\t' i=1\n  local nodes=()\n  while [ $i -le\
    \ $1 ]; do\n    local value=$i\n    local index=$(( $i % $2 ))\n    local node=$index\n\
    \    local key=$value\n    nodes[${#nodes[@]}]=\"$value\"\n    nodes[$index]=\"\
    $value\"\n    (( i++ ))\n  done\n  echo ${nodes[@]}\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp3wurtksv.sh: line 32: [: 4 2 3: integer expression expected

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes i node smallest result idx=0\n    for ((i=0;i<${#$1};i++))\n\
    \    do\n        [[ \"${!1}[i]\" =~ ^[0-9]+$ ]] && continue\n        node=\"${!1}[$i]\"\
    \n        [[ \"${!1}[i]\" > 0 ]] || continue\n        idx=$((i+1))\n        result=false\n\
    \        smallest=$(echo $node | tr -dc '[:digit:]')\n        if [[ -n ${!1[idx]}\
    \ ]]\n        then\n            [[ \"${!1}[idx]\" -gt \"$smallest\" ]]  && result=true\
    \ && smallest=\"${!1}[idx]\" && idx=$((idx+1))\n        fi\n        if [[ -n ${!1[idx]}\
    \ ]]\n        then\n            [[ \"${!1}[idx]\" -gt \"$smallest\" ]]  && result=true\
    \ && smallest=\"${!1}[idx]\" && idx=$((idx+1))\n        fi\n        if [[ -n ${!1[idx]}\
    \ ]]\n        then\n            [[ \"${!1}[idx]\" -gt \"$smallest\" ]]  && result=true\
    \ && smallest=\"${!1}[idx]\" && idx=$((idx+1))\n        fi\n        [[ \"$result\"\
    \ == true ]] && result=false && break\n    done\n    [[ -z $result ]] && result=false\
    \ && [[ -z $smallest ]] && result=false\n    echo \"${!1}[$((idx))]\"\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp5l3ccmvf.sh: line 31: i<${#$1}: bad substitution

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local index value\n    local -a array nodes\n\n    # convert\
    \ $1 into a list\n    IFS=' ' read -a array <<<\"$1\"\n\n    # find the smallest\
    \ even value in the array\n    local smallest_value=0\n    local smallest_index=0\n\
    \    for index in \"${!array[@]}\"; do\n        value=${array[index]} #${array[index]}\
    \ is a string\n        if (( value % 2 )); then\n            smallest_value=$value\n\
    \            smallest_index=$index\n        fi\n    done\n\n    if [ \"${smallest_value}\"\
    \ -eq 0 ]; then\n        return 0\n    fi\n\n    if [ \"${array[@]}\" == \"\"\
    \ ]; then\n        return []\n    fi\n\n    # return the node with the smallest\
    \ even value\n    # return [ smallest_value, smallest_index ]\n    return \"${array[smallest_index]}\
    \ ${smallest_index}\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp06_o6vo5.sh: line 51: [: too many arguments

    /tmp/tmp06_o6vo5.sh: line 57: return: 3 2: numeric argument required

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=( $1 )\n    local minValue=${nodes[0]}\n  \
    \  local minIndex=0\n    local nodeWithSmallestEvenValue\n    local evenValueIndex=0\n\
    \    local i=0\n\n    if [[ -z ${nodes[*]} ]]; then\n        return false\n  \
    \  fi\n\n    for node in ${nodes[@]};do\n        if [[ ${node}%2 -eq 0 ]]; then\n\
    \            evenValueIndex=$((i+1))\n        else\n            if [[ ${minValue}\
    \ -gt ${node} ]]; then\n                minValue=${node}\n                minIndex=${evenValueIndex}\n\
    \            fi\n        fi\n        i=$((i+1))\n    done\n\n    if [[ -z ${minIndex}\
    \ ]]; then\n        return false\n    fi\n\n    nodeWithSmallestEvenValue=${minIndex}\n\
    \    echo \"${nodes[*]}\"\n    echo ${nodeWithSmallestEvenValue}\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  read -r nodes <<< \"$1\"\n  if [[ \"${nodes}\" =~ \\- ]]\n\
    \  then\n    echo \"Empty list\"\n    return 1\n  fi\n  if [[ ${#nodes} -eq 0\
    \ ]]\n  then\n    echo \"No even values\"\n    return 1\n  fi\n  local smallest_even_value=\"\
    ${nodes[0]}\"\n  local smallest_index=\"${nodes[0]}\"\n  local smallest_value=\n\
    \  local smallest_index=\n  local value=\n  local index=0\n  for node in ${nodes[@]:1};\
    \ do\n    value=\"${node}\"\n    [[ ${#smallest_value} -eq 0 || ${smallest_value}\
    \ -le \"${value}\" ]] && smallest_value=\"${value}\"\n    [[ ${#smallest_index}\
    \ -eq 0 || ${smallest_index} -le \"${index}\" ]] && smallest_index=\"${index}\"\
    \n    ((index++))\n  done\n  echo \"${smallest_value}\" \"${smallest_index}\"\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local index value\n  IFS=' ' read -a array <<< \"$1\"\n \
    \ local smallest_even_index smallest_even_value\n  smallest_even_index=$(echo\
    \ \"${array[@]}\" | sort -nr|head -1)\n  smallest_even_value=${array[$smallest_even_index]}\n\
    \n  if [[ ${#array[@]} -eq 0 || ${smallest_even_value} -eq 0 ]]; then\n    return\
    \ 0\n  else\n    local value_index=0\n    while (( value_index < $(echo \"${array[@]}\"\
    \ | sort -nr|head -1) )); do\n      local value=${array[$value_index]}\n     \
    \ if [[ $(echo \"${array[@]}\" | sort -nr|head -2) = $value ]]; then\n       \
    \ smallest_even_value=${value}\n      fi\n      value_index=$((value_index + 1))\n\
    \    done\n\n    local result\n    result=()\n    while (( value_index < $(echo\
    \ \"${array[@]}\" | sort -nr|head -1) )); do\n      if [[ ${array[$value_index]}\
    \ -eq ${smallest_even_value} ]]; then\n        result+=(${array[$value_index]})\
    \ \n      fi\n      value_index=$((value_index + 1))\n    done\n  fi\n  return\
    \ \"${result[@]}\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0vwxhmbv.sh: line 34: 4 2 3: syntax error in expression (error
    token is "2 3")

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=$(( ${nodes[0]}\
    \ + 2 ))\n    local index=1\n    local smalest_node=\n    local i=0\n    while\
    \ [ $i -lt $nodes ]; do\n        if [ $(( $nodes[$i] % 2 )) -eq 0 ] ; then\n \
    \           if [ -z $smalest_value ]; then\n                smalest_value=$((\
    \ ${nodes[$i]} + 2 ))\n                smalest_node=$i\n            else\n   \
    \             if [ \"$smalest_value\" -gt $(( ${nodes[$i]} + 2 )) ]; then\n  \
    \                  smalest_value=$(( ${nodes[$i]} + 2 ))\n                   \
    \ smalest_node=$i\n                fi\n            fi\n        fi\n        ((\
    \ i++ ))\n    done\n    if [ $i -gt 0 ]; then\n        if [ \"$smalest_value\"\
    \ -eq $(( ${nodes[$i]} + 2 )) ]; then\n            smalest_node=$i\n        fi\n\
    \    fi\n    echo -n \"[ \\\"$smalest_value\\\", \\\"$smalest_node\\\" ]\"\n}\n\
    \ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprsezaxwt.sh: line 31: 4 2 3 + 2 : syntax error in expression (error
    token is "2 3 + 2 ")

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local arr smalest_value smalest_index smalest_index\n  read\
    \ -r -a arr < <(echo \"$1\" | tr ' ' ',')\n  smalest_value=${arr[0]}\n  smalest_index=${arr[0]}\n\
    \  for i in \"${arr[@]:1}\"; do\n    if [ $(echo \"$i | grep -c even\" > /dev/null\
    \ 2>&1) -eq 0 ]; then\n      if [ \"$i\" -gt \"$smalest_value\" ]; then\n    \
    \    smalest_value=$i\n        smalest_index=$i\n      elif [ \"$i\" -eq \"$smalest_value\"\
    \ ]; then\n        smalest_index=$i\n      fi\n    fi\n  done\n  echo \"$smalest_value\"\
    \ \"${arr[$smalest_index]}\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local i j\n  local nodes=( $1 )\n  IFS=' ' read -ra nodes\
    \ <<<\"$nodes\"\n  local smalest_value\n  local smalest_index\n  for ((i=0; i<${#nodes[@]};\
    \ ++i)); do\n    if [[ ${nodes[i]} != \"\" ]]; then\n      smalest_value=\"${nodes[i]}\"\
    \n      smalest_index=\"${i}\"\n      break\n    fi\n  done\n  if [[ \"${#nodes[@]}\"\
    \ -eq 0 ]]; then\n    return 0\n  fi\n  local new_node\n  for ((j=0; j<${#nodes[@]};\
    \ ++j)); do\n    if [[ ${nodes[j]} != \"\" ]]; then\n      if (( (smalest_value<${nodes[j]}))\
    \ && (j<smalest_index)) {\n        smalest_value=\"${nodes[j]}\"\n        smalest_index=\"\
    ${j}\"\n        new_node=\"${nodes[j]}\"\n        break\n      fi\n    fi\n  done\n\
    \  [[ -z ${new_node} ]] && return 0\n  local new_nodes=()\n  local new_nodes\n\
    \  new_nodes=\"$new_nodes $new_node\"\n  for ((j=0; j<${#nodes[@]}; ++j)); do\n\
    \    if [[ ${nodes[j]} != \"\" ]]; then\n      new_nodes+=(${nodes[j]})\n    fi\n\
    \  done\n  echo \"${new_nodes[@]}\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp05cub3qa.sh: line 48: syntax error near unexpected token `{''

    /tmp/tmp05cub3qa.sh: line 48: `      if (( (smalest_value<${nodes[j]})) && (j<smalest_index))
    {''

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -r nodes=$(compgen -A array \"$@\")\n  local -r smalest_value=$(smallest_value\
    \ \"$nodes\")\n  if (( ${#smalest_value} <= 1 )); then\n    return 1\n  fi\n \
    \ local -r smalest_index=$(smallest_index \"$nodes\" \"$smalest_value\")\n  echo\
    \ -n \"$smalest_value $smalest_index\"\n}\n\ncandidate() {\n    pluck \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpiq0sgobq.sh: line 30: compgen: array: invalid action name

    /tmp/tmpiq0sgobq.sh: line 31: smallest_value: command not found

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local n=$1\n    local arr=()\n    local minVal\n    local\
    \ minIdx\n    local curVal\n    local curIdx\n    local len=$((${#n} / 2))\n\n\
    \    for ((i = 0; i < (len); i++))\n    do\n        curVal=${n:$((i * 2))}\n \
    \       curIdx=$((i * 2 + 1))\n        if [ $((${#arr[@]})) -eq 0 ]\n        then\n\
    \            minVal=${curVal}\n            minIdx=${curIdx}\n        else\n  \
    \          if ((curVal%2)) -eq 0\n            then\n                if ((${#minVal})>=(${curVal}))\n\
    \                then\n                    minVal=${curVal}\n                \
    \    minIdx=${curIdx}\n                fi\n            fi\n        fi\n      \
    \  arr+=(${curVal} ${curIdx})\n    done\n    if [ -z \"$minVal\" ]\n    then\n\
    \        return $arr\n    else\n        ((minIdx))\n        arr+=(${minVal} ${minIdx})\n\
    \        return $arr\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp78w6pvg3.sh: line 47: syntax error near unexpected token `-eq''

    /tmp/tmp78w6pvg3.sh: line 47: `            if ((curVal%2)) -eq 0''

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  if [[ \"$#\" -eq 0 ]]; then\n    return 0\n  fi\n\n  local\
    \ number\n  local numbers\n  local index\n  local string\n  local smallest\n \
    \ local i\n  numbers=()\n  for number in \"$1\"; do\n    if [[ \"$number\" =~\
    \ ^-?[0-9]+$ ]]; then\n      numbers+=(\"$number\")\n    fi\n  done\n  if [[ \"\
    $#\" -eq 0 ]]; then\n    return 0\n  fi\n  smallest=\n  index=\n  for (( i=1 ;\
    \ i <= ${#numbers[*]} ; i++)) ; do\n    if [[ ${numbers[$i]} -eq ${smallest} ]];\
    \ then\n      if [[ \"$i\" -gt \"${#smallest}\" ]]; then\n        smallest=\"\
    ${numbers[$i]}\"\n        index=\"$i\"\n      fi\n    else\n      smallest=\"\
    ${numbers[$i]}\"\n      index=\"$i\"\n    fi\n  done\n  if [[ \"$#\" -eq 0 ]];\
    \ then\n    return 0\n  fi\n\n  local values\n  values=()\n  for i in $(seq 0\
    \ ${#smallest}); do\n    values+=(\"${smallest:$i:1}\")\n  done\n  echo \"$values\"\
    \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local i num\n    read -r num <<< \"$1\"\n    local arr\n\
    \    IFS=' ' read -r -a arr <<< \"$num\"\n    local smalest_value\n    for ((i=0;\
    \ i < \"${#arr[@]}; i++)); do\n        if (( ${arr[i]} % 2 == 0)); then\n    \
    \        if (( ${arr[i]} < smalest_value )); then\n                smalest_value=${arr[i]}\n\
    \            fi\n        fi\n    done\n    if [[ ${#smalest_value} -gt 0 ]]; then\n\
    \        echo \"${arr[@]:0:${#smalest_value}}\"\n    else\n        echo \"[]\"\
    \n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2r385pbh.sh: line 62: unexpected EOF while looking for matching
    `"''

    /tmp/tmp2r385pbh.sh: line 66: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  arr=$1\n  arr=( $arr )\n  min=$( IFS=$' \\t\\r\\n' read -r\
    \ -a array <<<\"${arr[*]}\" )\n  # $( IFS=$' \\t\\r\\n' read -r -a array <<<\"\
    ${arr[*]}\" ) -- This line creates a new array with the values from the original\
    \ one, but with quotes around them.\n  declare -a even_index\n  for (( i=0; i<${#arr[@]};\
    \ i++ )); do\n    if [[ \"${arr[$i]}\" -eq \"${min}\" ]]; then\n      even_index[$i]=$i\n\
    \    fi\n  done\n  even_value=$( IFS=$' \\t\\r\\n' read -r -a array <<<\"${arr[*]}\"\
    \ )\n  if [ \"${#even_index[@]}\" -eq 0 ]; then return 0; fi\n  # If $( IFS=$'\
    \ \\t\\r\\n' read -r -a array <<<\"${arr[*]}\" ) didn't split the array on spaces,\
    \ we'd need to do something like this\n  # even_value=\"$( IFS=$' \\t\\r\\n' read\
    \ -r -a array <<<\"${arr[*]}\" )\"\n  even_value=\"${even_value[0]}\"\n  # The\
    \ second line below finds the smallest index in the array\n  # We assume there\
    \ is only 1 even value so we don't need to worry about the loop\n  # for (( i=0;\
    \ i<${#arr[@]}; i++ )); do\n  #   if [[ ${even_value} -le \"${arr[$i]}\" ]]; then\n\
    \  #     even_value=\"${arr[$i]}\"\n  #     even_index[$i]=$i\n  #   fi\n  # done\n\
    \  # We don't need this because we already know that $min = $even_value\n  # even_index=$(\
    \ IFS=$' \\t\\r\\n' read -r -a array <<<\"${arr[*]}\" )\n  # We don't need this\
    \ because we already know that $min = $even_value\n  # even_value=\"$( IFS=$'\
    \ \\t\\r\\n' read -r -a array <<<\"${arr[*]}\" )\"\n  # The third line below finds\
    \ the smallest index in the array\n  # We assume there is only 1 even value so\
    \ we don't need to worry about the loop\n  # for (( i=0; i<${#arr[@]}; i++ ));\
    \ do\n  #   if [[ ${even_value} -le \"${arr[$i]}\" ]]; then\n  #     even_value=\"\
    ${arr[$i]}\"\n  #     even_index[$i]=$i\n  #   fi\n  # done\n  # We don't need\
    \ this because we \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local num_nodes=$#nodes\n    local\
    \ pick_index=0\n    local pick_even_index=0\n    local pick_odd_index=0\n    local\
    \ result=0\n    local pick_node\n    local pick_value\n    local node_even_value\n\
    \    local node_odd\n    local is_node_even\n    local is_node_odd\n\n    for\
    \ (( node_idx = 0; node_idx < num_nodes; ++node_idx))\n    do\n        pick_node=$nodes[node_idx]\n\
    \        pick_value=$pick_node\n        is_node_even=false\n        is_node_odd=false\n\
    \        for (( even_odd = 0; even_odd < num_nodes; ++even_odd))\n        do\n\
    \            node_even_value=$nodes[even_odd]\n            node_odd=$nodes[even_odd+1]\n\
    \            if is_node_even=false\n            then\n                if (( node_even_value\
    \ % 2 ) == 0)\n                then\n                    is_node_even=true\n \
    \               fi\n            fi\n            if is_node_odd=false\n       \
    \     then\n                if (( node_odd % 2 ) == 0)\n                then\n\
    \                    is_node_odd=true\n                fi\n            fi\n  \
    \          if (( is_node_even && is_node_odd )); then\n                break\n\
    \            fi\n        done\n        if is_node_even\n        then\n       \
    \     if (( pick_even_index < num_nodes && pick_even_index > 0 ))\n          \
    \  then\n                pick_node=$nodes[pick_even_index]\n                pick_value=$pick_node\n\
    \                pick_even_index=$node_idx\n            else\n               \
    \ result=$result\"$pick_value $pick_even_index\"\n                break\n    \
    \        fi\n        elif is_node_odd\n        then\n            if (( pick_odd_index\
    \ < num_nodes && pick_odd_index > 0 ))\n            then\n                pick_node=$nodes[pick_odd_index]\n\
    \                pick_value=$pick_node\n                pick_odd_index=$node_idx\n\
    \            else\n                result=$result\"$pick_value $pick_odd_index\"\
    \n                break\n            fi\n        else\n            pick_index=$node_idx\n\
    \            break\n        fi\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgd0s1mcx.sh: line 55: syntax error near unexpected token `==''

    /tmp/tmpgd0s1mcx.sh: line 55: `                if (( node_even_value % 2 ) ==
    0)''

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=( \"$1\" )\n  local smalest_value=0\n  local\
    \ index=0\n  local val\n  local smalest_index # index at which the smallest value\
    \ is found\n\n  # find smallest even value\n  for i in \"${nodes[@]}\"; do\n \
    \   ((i%2==0)) || continue\n    val=\"$i\"\n    ((val > smalest_value)) && smalest_value=val\
    \ && smalest_index=\"$index\"\n    ((index++))\n  done\n\n  # pick the smallest\
    \ even value\n  val=\"$smalest_value\"\n  ((val%2==0)) && smalest_index=\"$index\"\
    \n  echo \"\\\"$val\\\", \\\"$smalest_index\\\"\"\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpguskyy_j.sh: line 38: ((: 4 2 3: syntax error in expression (error
    token is "2 3")

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local arr=($1)\n    local smalest_value=${arr[0]}\n   \
    \ local smallest_index=0\n    local smalest_value_index=0\n    local smalest_value_even=0\n\
    \    local smalest_value_even_index=0\n\n    for (( i=0; i < ${#arr[@]} - 1; i++\
    \ )); do\n        local current_value=${arr[$i]}\n        local current_index=$((\
    \ $i + 1 ))\n        local current_even=0\n        local current_even_index=0\n\
    \n        local even_index=0 #current even index number \n        for (( j=0;\
    \ j < ${#arr[@]} - 1; j++ )); do\n            local current_even_value=${arr[$((\
    \ $i + 1 ))]}\n            even_index=$(( even_index + 1 ))\n            local\
    \ current_even_index=$(( $j + 1 ))\n\n            (( current_even < current_even_value\
    \ )) &&\n            (( current_even_index > current_even_index )) ||\n      \
    \      (( current_even_index == current_even_index && current_even_index > even_index\
    \ )) || \n            (( current_even > current_even_value )) ||\n           \
    \ (( current_even_index == current_even_index && current_even_index < even_index\
    \ ))\n            \n            (( $current_even_index == even_index )); \n  \
    \      done\n\n        (( current_even_index == even_index )); \n        (( current_index\
    \ > smallest_index )) &&\n        (( current_value == smalest_value )) ||\n  \
    \      (( current_even == smalest_value_even )) ||\n        (( current_even_index\
    \ == smalest_value_even_index )) ||\n        (( current_index == smallest_index\
    \ )) ||\n        (( current_value == smalest_value )) ||\n        (( current_even_index\
    \ == smalest_value_even_index )) ||\n        (( current_index == current_even_index\
    \ )) ||\n        (( current_index > current_even_index )) ||\n        (( current_index\
    \ == current_even_index && current_even_index > even_index )) || \n        ((\
    \ current_index == current_even_index && current_even_index < even_index ))\n\
    \        \n        (( $current_index == smallest_index )) ||\n        (( $current_index\
    \ == smallest_index && current_index > smallest_index )) ||\n        (( $current_index\
    \ == smallest_index && current_index == smallest_index && current_index > even_index\
    \ )) || \n        (( $current_index == smalle\n}\n\ncandidate() {\n    pluck \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1ysfv06b.sh: line 74: unexpected EOF while looking for matching
    `)''

    /tmp/tmp1ysfv06b.sh: line 94: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local i min\n    IFS=' ' read -r -a nums <<<\"$1\"\n  \
    \  local numslen=\"${#nums[@]}\"\n    for ((i=0;i<$numslen;i++)); do\n       \
    \ [[ $(printf '%s\\n' \"${nums[@]:$i:2}\"|sort -n|awk '{print $2}') = 0 ]] &&\n\
    \        [[ $(printf '%s\\n' \"${nums[@]:$i:2}\"|sort -n|awk '{print $1}') = \"\
    ${nums[$i]}\" ]] &&\n        [[ i -lt $numslen ]] &&\n        ((min=$i)) ||\n\
    \        [[ $nums[$min] -lt \"${nums[$i]}\" ]] &&\n        ((min=$i))\n    done\n\
    \    if [[ ${min} -eq 0 ]]; then\n        echo \"[]\"\n    else\n        echo\
    \ \"${nums[$min]:1}\"\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6y7j5kvh.sh: line 38: [[: 4[]: syntax error: invalid arithmetic
    operator (error token is "[]")

    /tmp/tmp6y7j5kvh.sh: line 38: [[: 4[]: syntax error: invalid arithmetic operator
    (error token is "[]")

    /tmp/tmp6y7j5kvh.sh: line 38: [[: 4[]: syntax error: invalid arithmetic operator
    (error token is "[]")

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  read -a node <<<\"$1\"\n  [[ -z \"$node\" ]] && return 0\n\
    \  [[ \"$node\" =~ ^-?[0-9]+$ ]] || return 1\n  local -i min_idx=$(( ${#node[*]}\
    \ -1 ))\n  local -i min_even=0\n  local -i even_idx=0\n  local -i odd=$(( ${#node[*]}\
    \ ))\n  local -i odd=0\n  local -a even\n  local -i i=0\n  local -a output\n \
    \ local -i j=0\n  local val\n  local node_name\n  local min_val\n  output=($(sort\
    \ -nr <<<\"${node[@]}\" | tail +1))\n  even=($(grep -Eo '^.+ .+ 0' <<<\"${output[*]}\"\
    \ | sed 's/\"//'))\n  even_idx=$(( ${#even[*]} -1 ))\n  for ((i=0; i<${#even[*]};\
    \ i++)); do\n    (( (j=i+1) ))\n    (( j+=1 ))\n    (( j%2 )) && even[j-1]=\"\
    ${even[i]}\"\n    (( j%2 )) && even[j]=\"${even[i]}\"\n    (( even[j-1] < even[j]\
    \ )) && even[j-1]=\"${even[i]}\"\n    (( even[j-1] < even[j] )) && even[j]=\"\
    ${even[i]}\"\n    (( even[j-1] == even[j] )) && even[j-1]=\"${even[i]}\"\n   \
    \ (( even[j-1] < even[j] )) && even[j]=\"${even[i]}\"\n    (( even[j-1] == even[j]\
    \ )) && even[j]=\"${even[i]}\"\n    (( even[j-1] < even[j] )) && even[j]=\"${even[i]}\"\
    \n    (( even[j-1] == even[j] )) && even[j]=\"${even[i]}\"\n    (( even[j-1] <\
    \ even[j] )) && even[j]=\"${even[i]}\"\n    (( even[j-1] == even[j] )) && even[j]=\"\
    ${even[i]}\"\n    (( even[j-1] < even[j] )) && even[j]=\"${even[i]}\"\n    ((\
    \ even[j-1] == even[j] )) && even[j]=\"${even[i]}\"\n    (( even[j-1] < even[j]\
    \ )) && even[j]=\"${even[i]}\"\n    (( even[j-1] == even[j] )) && even[j]=\"${even[i]}\"\
    \n    (( even[j-1] < even[j] )) && even[j]=\"${even[i]}\"\n    (( even[j-1] ==\
    \ even[j] )) && even[j]=\"${\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp57vpjauj.sh: line 83: unexpected EOF while looking for matching
    `"''

    /tmp/tmp57vpjauj.sh: line 87: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$@\n  local smalest_value\n  local smalest_index\n\
    \  local current_index\n  local node\n  local value\n  [[ -z ${nodes[0]} ]] &&\
    \ return 0\n  [[ -z ${nodes[*]} ]] && return 0\n  smalest_value=0\n  smalest_index=-1\n\
    \  current_index=0\n  for value in ${nodes[*]}; do\n    [[ -z ${value} ]] && return\
    \ 0\n    [[ \"${value}\" -eq \"${smalest_value}\" ]] && continue\n    if [[ ${current_index}\
    \ -lt ${smalest_index} ]]; then\n      smalest_value=${value}\n      smalest_index=${current_index}\n\
    \    fi\n    current_index=$((current_index + 1))\n  done\n  [[ \"${smalest_index}\"\
    \ -lt ${#nodes[*]} ]] && return 0\n  smalest_value\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local branches=($1)\n  local smalest_value\n  local smalest_index\n\
    \  if [ ${#branches[@]} -gt 0 ];then\n    for index in ${!branches[@]}\n    do\n\
    \      smalest_value=${branches[index]}\n      smalest_index=$index\n      break\n\
    \    done\n  else\n    return 1\n  fi\n  local smalest_even_value=$(echo $smalest_value\
    \ | awk '{print $3}')\n  local smalest_even_index=$((${#smalest_even_value} -\
    \ 1))\n  local smalest_even_value=${smalest_even_value:$smalest_even_index}\n\
    \  local smalest_even_value='\"'$smalest_even_value'\"' \n  local smalest_even_value=$(echo\
    \ $smalest_value | awk '{print $1}')\n  local smalest_values_list=$(echo $smalest_value\
    \ | sed 's/ //g')\n  local smalest_values_list=$(echo $smalest_values_list | sed\
    \ 's/\"//g')\n  local smalest_values_list=$(echo $smalest_values_list | sed 's/\
    \ //g')\n  if [ ${#smalest_values_list} -eq 0 ];then\n    return 1\n  fi\n  if\
    \ [ ${#smalest_values_list} -gt 0 ];then\n    local smalest_values_list=$(echo\
    \ $smalest_values_list | sed 's/,//g')\n    local smalest_values_list=$(echo $smalest_values_list\
    \ | sed 's/ //g')\n  fi\n  if [ ${#smalest_values_list} -gt 1 ];then\n    local\
    \ smalest_values_list=$(echo $smalest_values_list | sed 's/,//g')\n  fi\n  local\
    \ smalest_values_list=$(echo $smalest_values_list | sed 's/\"//g')\n  local smalest_values_list=$(echo\
    \ $smalest_values_list | sed 's/ //g')\n  local smalest_values_list=$(echo $smalest_values_list\
    \ | sed 's/,//g')\n  if [ ${#smalest_values_list} -gt 1 ];then\n    local smalest_values_list=$(echo\
    \ $smalest_values_list | sed 's/,//g')\n    local smalest_values_list=$(echo $smalest_values_list\
    \ | sed 's/,//g')\n    local \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpk5l_lggc.sh: line 68: syntax error near unexpected token `}''

    /tmp/tmpk5l_lggc.sh: line 68: `}''

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    # Write your code here\n    local -i i j min max count\n\
    \    local -a array\n    local node val\n    array=( $1 )\n    min=max=0\n   \
    \ count=0\n    while (( i < ${#array[@]} )); do\n        val=( ${array[i]} ) \n\
    \        ((count+=1))\n        ((min+=val))\n        ((max+=val))\n        ((i++))\n\
    \    done\n    if (( min==0 )); then\n        echo \"\"\n    else\n        for\
    \ i in $(seq 1 $count); do\n            if [ $((min%2)) -eq $((i-1)) ];then\n\
    \                echo ${array[i]}\n                break\n            fi\n   \
    \     done\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  IFS=' '\n  local nodes=( $1 )\n  local value=\n  local even=0\n\
    \  local index=\n  for ((i=0; i < ${#nodes[@]}; i++)); do\n    nodes[i]=$(echo\
    \ $nodes[$i])\n    value=$(echo $nodes[$i])\n    ((even+=(( ${value:0:2} % 2 )\
    \ ))\n    ((index+=(( ${value:0:1} % 2 ) ))\n  done\n  if (( even > 0 )); then\n\
    \    echo ${nodes[@]:0:${index}}\n  else\n    echo []\n  fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_m4n940l.sh: line 38: syntax error near unexpected token `(''

    /tmp/tmp_m4n940l.sh: line 38: `(even+=(( ${value:0:2} % 2 ) ))''

    /tmp/tmp_m4n940l.sh: line 39: syntax error near unexpected token `(''

    /tmp/tmp_m4n940l.sh: line 39: `(index+=(( ${value:0:1} % 2 ) ))''

    /tmp/tmp_m4n940l.sh: line 40: syntax error near unexpected token `done''

    /tmp/tmp_m4n940l.sh: line 40: `  done''

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local node val=$1\n    local idx i result\n    # Get the\
    \ smallest even value\n    for idx in $(seq 0 $(($#node - 1)/2)); do\n       \
    \ if (( $(( ${node[idx]} * 2 )) % 2 == 0 )); then\n            val=${node[idx]}\
    \ && break\n        fi\n    done\n    # Get the smallest index greater than the\
    \ smallest even value\n    for idx in $(seq $(( ${#node[@]} / 2 ))); do\n    \
    \    if (( $(( ${node[$(( 2 * $idx + 1 ))]} * 2 )) % 2 == 0 )); then\n       \
    \     val=${node[$(( 2 * $idx + 1 ))]} && break\n        fi\n    done\n    # Return\
    \ the node and its index\n    echo ${val} | sed \"s/\\\"//g\" | sed \"s/\\\"//g\"\
    \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8zgoagwz.sh: command substitution: line 33: syntax error near unexpected
    token `/2''

    /tmp/tmp8zgoagwz.sh: command substitution: line 33: `($#node - 1)/2''

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local even_values\n  local smalest_value\n\
    \  local smalest_index\n  local index\n  \n  if [[ \"${#nodes[@]}\" -eq 0 ]];\
    \ then\n    return []\n  fi\n  \n  local node_value\n  even_values=( ${nodes[@]:1}\
    \ )\n  \n  local smallest_value\n  smallest_value=${even_values[0]}\n  smalest_value=0\n\
    \  smalest_index=0\n  index=0\n  \n  local i\n  for (( i=0; i<${#even_values[@]};\
    \ i++ )); do\n    if [[ $(( ${even_values[i]} % 2 )) -eq 0 ]]; then\n      if\
    \ [[ \"${smallest_value}\" == \"${even_values[i]}\" ]]; then\n        smalest_index=${i}\n\
    \        smalest_value=${even_values[i]}\n      fi\n    fi\n  done\n  \n  if [[\
    \ ${smalest_index} -gt 0 ]]; then\n    smallest_value=${even_values[smalest_index]}\n\
    \    index=${smalest_index}\n  fi\n  \n  echo \"${even_values[@]:$((index-1))}\"\
    \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: -1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local i j k smallest_value\n    local nodes value\n   \
    \ IFS=\" \" read -a nodes <<< $1\n    smallest_value=0\n    for i in $(seq 0 $((${#nodes[@]}-1)));\
    \ do\n        value=${nodes[$i]}\n        for j in $(seq 0 $((${#nodes[@]})-1));\
    \ do\n            k=${nodes[$j]}\n            if [ $(( k % 2 )) == 0 ] && [ $((\
    \ k % $(( $value < $smallest_value )) )) -gt 0 ]; then\n                smallest_value=$value\n\
    \                smallest_index=$j\n            fi\n        done\n    done\n \
    \   if [ $smallest_index -eq 0 ]; then\n        echo '[]'\n    else\n        echo\
    \ \"[\\\"${nodes[$smallest_index]}\\\", \\\"${smallest_value}\\\"$(pluck ${nodes[@]}\
    \ $(( $smallest_index + 1 )))]\"\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=15 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=6 encoding='utf-8'>
  timestamp: 1660055529
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local index=0\n    local values=\"$1\"\n    if [[ ${#values}\
    \ -eq 0 ]]; then\n        return \"\"\n    elif [[ ${#values} -eq 1 ]]; then\n\
    \        local value=\"$1\"\n        # if the value is odd, then it has the smallest\
    \ index\n        if [[ $(( $value % 2 )) -ne 0 ]]; then\n            index=$((\
    \ $value % ${#values}))\n        else\n            index=0\n        fi\n     \
    \   return [ \"${values[$index]}\" ]\n    else\n        # sort the array in ascending\
    \ order\n        local temp\n        for value in $values; do\n            ((\
    \ $index % 2 ))\n            (( $index++ ))\n            temp=\"${values[$index]}\"\
    \n        done\n        index=0\n        # if the first value is even, then it\
    \ has the smallest index\n        if [[ $(( $temp % 2 )) -ne 0 ]]; then\n    \
    \        index=$(( $temp % ${#values}))\n        else\n            index=0\n \
    \       fi\n        local value=\"$temp\"\n        local values=$(sort -n -k $((\
    \ index )) -o -k $index $values)\n        local values=$(echo \"${values}\" |\
    \ sed 's/^ *//')\n        values=$(echo \"${values}\" | sed 's/ *$//')\n     \
    \   # if the first value is odd, then it has the smallest index\n        if [[\
    \ $(( $value % 2 )) -ne 0 ]]; then\n            index=$(( $value % ${#values}))\n\
    \        else\n            index=0\n        fi\n        return [ \"${values[$index]}\"\
    \ ]\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1makolcw.sh: line 48: ((: 0++ : syntax error: operand expected
    (error token is "+ ")

    /tmp/tmp1makolcw.sh: line 48: ((: 0++ : syntax error: operand expected (error
    token is "+ ")

    /tmp/tmp1makolcw.sh: line 48: ((: 0++ : syntax error: operand expected (error
    token is "+ ")

    /tmp/tmp1makolcw.sh: line 53: 4 2 3 % 2 : syntax error in expression (error token
    is "2 3 % 2 ")

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local i val\n  local result minIndex temp\n  val=$(echo \"\
    $1\" | tr -d '[[:space:]]')\n  temp=${val}\n  for i in $(seq 1 $((${#val}-2)));\
    \ do\n    if [[ $((${val[$i]}%2)) -eq 0 ]]; then\n      val[$i]=\"${val[$i]/2+1}\"\
    \n    fi\n  done\n  result=( $(echo \"${val[*]}\" | sort -nr) )\n  minIndex=0\n\
    \  for ((i=0;i<${#result[@]};i++)); do\n    temp=${result[i]}\n    if [[ $((temp%2))\
    \ -eq 0 ]]; then\n      minIndex=$((minIndex+1))\n    fi\n  done\n  if [[ ${#result[@]}\
    \ -eq 0 ]]; then\n    return 0\n  fi\n  echo \"${result[$minIndex]}\"\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpubohrrbn.sh: line 35: %2: syntax error: operand expected (error
    token is "%2")

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$(echo \"$1\" | tr ' ' ',')\n    local min=0\n\
    \    local max=0\n    local min_index=-1\n    local smalest_value=$(echo \"$nodes\"\
    \ | sed \"s/,/ 1/\" | sort -n | head -1)\n    local index=0\n    while [ $index\
    \ -ge 1 ]; do\n        local value=$(echo \"$nodes\" | sed \"s/,/ $((index*2))/\"\
    \ | sort -n | head -1)\n        local value_even=$(echo \"$value\" | sed \"s/\
    \ /*/\")\n        if [ $(echo \"$value_even\" | sed \"s/,/ 1/\" | wc -l) -gt 0\
    \ ]; then\n            ((min=$value))\n            ((min_index=index))\n     \
    \   fi\n        ((index=$index+1))\n    done\n    if [ $((min)) -eq $((smalest_value))\
    \ ]; then\n        echo \"$min_index\"\n    else\n        echo \"$min\"\n    fi\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgo9x4uzf.sh: line 45: 4 12,3: syntax error in expression (error
    token is "12,3")

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes value\n  local i smallest_index smalest_value\
    \ smalest_index\n  nodes=( $1 )\n  smallest_value=${nodes[*]}\n  smallest_index=0\n\
    \  smalest_value=${nodes[*]}\n  smalest_index=0\n  for (( i=0; i<${#nodes[@]};\
    \ i++ )); do\n      (( i+1 ))\n      if (( nodes[i] == 0 )); then\n        continue\n\
    \      fi\n      if (( nodes[i] < smallest_value )); then\n        smallest_value=nodes[i]\n\
    \        smallest_index=i\n      elif (( nodes[i] > smallest_value )); then\n\
    \        if (( nodes[i] == smalest_value )); then\n          smalest_index=i\n\
    \        else\n          smalest_value=nodes[i]\n          smalest_index=i\n \
    \       fi\n      fi\n  done\n  echo \"${nodes[smalest_index]}\"\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp08997x4i.sh: line 42: ((: 4 2 3: syntax error in expression (error
    token is "2 3")

    /tmp/tmp08997x4i.sh: line 45: ((: 4 2 3: syntax error in expression (error token
    is "2 3")

    /tmp/tmp08997x4i.sh: line 42: ((: 4 2 3: syntax error in expression (error token
    is "2 3")

    /tmp/tmp08997x4i.sh: line 45: ((: 4 2 3: syntax error in expression (error token
    is "2 3")

    /tmp/tmp08997x4i.sh: line 42: ((: 4 2 3: syntax error in expression (error token
    is "2 3")

    /tmp/tmp08997x4i.sh: line 45: ((: 4 2 3: syntax error in expression (error token
    is "2 3")

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n\tlocal i j\n\tlocal nodes=$1 indices\n\tlocal evens=()\n\n\
    \tfor (( i = 0; i < ${#nodes[@]}; i++ )); do\n\t\tif [[ ${nodes[$i]} =~ ^-?[0-9]+$\
    \ ]]; then\n\t\t\tj=0\n\t\t\twhile [[ ${evens[$j]} ]]; do\n\t\t\t\t(( j += 1 ))\n\
    \t\t\t\tif [[ \"${evens[$j]}\" = ${nodes[$i]} ]]; then\n\t\t\t\t\tbreak\n\t\t\t\
    \tfi\n\t\t\tdone\n\t\t\tevens+=(\"${nodes[$i]}\" \"${i}\")\n\t\tfi\n\tdone\n\n\
    \tlocal smalest_value=${evens[*]} | sort -nr | head -n1\n\techo \"${smalest_value[@]}\"\
    \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local array value index i min max\n  IFS=' ' read -r -a array\
    \ <<<\"$1\"\n  local min_index\n  min=0\n  max=${#array[@]}\n  for ((i=0;i<max;++i));\
    \ do\n    if [[ -z \"${array[$i]}\" ]]; then\n      break\n    elif [[ \"${array[$i]}\"\
    \ = \"0\" ]]; then\n      min_index=$i\n      break\n    fi\n  done\n  if [[ $min_index\
    \ ]]; then\n    for ((i=0;i<max;++i)); do\n      if [[ -n \"${array[$i]}\" ]]\
    \ && [[ \"${array[$i]}\" -ge 0 ]]; then\n        if [[ $((array[$i]+min)) -gt\
    \ $((min+array[$i]))]]; then\n          min=$((array[$i]+min))\n          min_index=$i\n\
    \        fi\n      fi\n    done\n    echo $((min+min_index))\n  else\n    echo\
    \ \"\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3tlchv_3.sh: line 46: syntax error in conditional expression: unexpected
    token `;''

    /tmp/tmp3tlchv_3.sh: line 46: syntax error near `;''

    /tmp/tmp3tlchv_3.sh: line 46: `        if [[ $((array[$i]+min)) -gt $((min+array[$i]))]];
    then''

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local pluck_output\n    pluck_output=$(for\
    \ ((i=0; i<${#nodes[@]}; i++)); do\n        value=${nodes[i]}\n        even_value=0\n\
    \        index_of_even_value=0\n        smallest_value=${value}\n        smallest_index=0\n\
    \n        for ((j=0; j<${#nodes[@]}; j++)); do\n            if [ ${nodes[j]} ==\
    \ $value ]; then\n                even_value=$((even_value + 1))\n           \
    \     if [ $even_value -eq $((${value}%2)) ]; then\n                    index_of_even_value=$j\n\
    \                fi\n            else\n                if [ $even_value -eq 0\
    \ ]; then\n                    smallest_value=$value\n                    smallest_index=$i\n\
    \                fi\n            fi\n        done\n        [[ -n $index_of_even_value\
    \ ]] && [[ -n $smallest_value ]] && [[ -n $smallest_index ]] \\\n            &&\
    \ [[ $smallest_value < $value ]] || [[ $smallest_index -eq 0 ]] && \\\n      \
    \      [[ -n $even_value ]] && [[ -n $index_of_even_value ]] && \\\n         \
    \   [[ -n $smallest_index ]] && [[ $smallest_index -ne 0 ]] && \\\n          \
    \  [[ -n $smallest_value ]]; then\n            [[ -z $pluck_output ]] || pluck_output+=','\n\
    \            pluck_output+='\"'.\"${smallest_value}\".'\"'\n            [[ -n\
    \ $smallest_index ]] && pluck_output+=':'.\"${smallest_index}\"\n        fi\n\
    \    done)\n    [[ -z $pluck_output ]] || pluck_output=$(echo $pluck_output |\
    \ cut -d: -f2-)\n    [[ -z $pluck_output ]] || echo $pluck_output\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp009xe2hf.sh: command substitution: line 82: syntax error near unexpected
    token `then''

    /tmp/tmp009xe2hf.sh: command substitution: line 82: `        [[ -n $index_of_even_value
    ]] && [[ -n $smallest_value ]] && [[ -n $smallest_index ]]             && [[ $smallest_value
    < $value ]] || [[ $smallest_index -eq 0 ]] &&             [[ -n $even_value ]]
    && [[ -n $index_of_even_value ]] &&             [[ -n $smallest_index ]] && [[
    $smallest_index -ne 0 ]] &&             [[ -n $smallest_value ]]; then''

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local IFS=' ' arr=($1) index=0\n    local val\n    val=${arr[0]}\n\
    \    arr=(\"${arr[@]:1}\")\n    local j=0\n    for i in \"${arr[@]}\"; do\n  \
    \      if (( val % 2 == 0 )); then\n            arr[$index]=$i\n            val=$((\
    \ val / 2 ))\n            j=$(( j+1 ))\n        fi\n    done\n    if [ $j -eq\
    \ 0 ]; then return ; fi\n    local smallest=$(( val % 2 ))\n    local index\n\
    \    index=\"${j}\"\n    while [ $(( $j < $size )) ]; do\n        if [ ${arr[$index]}\
    \ -eq ${smallest} ]; then return ; fi\n        if [ ${arr[$index]} -lt ${smallest}\
    \ ]; then smallest=$(( arr[$index] % 2 )); fi\n        let index=$(( index + 1\
    \ ))\n    done\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8urm4aad.sh: line 46: 2 <  : syntax error: operand expected (error
    token is "<  ")

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local IFS=' ' nums=$1 smalest_value smalest_index\n  [[ -z\
    \ \"${nums}\" ]] && return 0\n  smalest_value=\"$nums\"\n  smalest_index=0\n \
    \ for ((i=${#nums[@]}-1; i>0; i--)); do\n    [[ \"$nums\" =~ (^|([0-9]+))\\\\\
    2(.*) ]] && nums=\"${BASH_REMATCH[1]} ${BASH_REMATCH[2]}\"\n    if [[ \"$nums\"\
    \ =~ (^|([0-9]+))\\\\2(.*) ]]; then\n      if [[ \"${nums:$((i+1))}\" = 0 ]];\
    \ then\n        smalest_value=\"${nums:$((i+1))}\"\n        smalest_index=\"${i}\"\
    \n        break\n      fi\n    fi\n  done\n  echo \"${nums}\"\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=( $1 )\n    local smalest_value=${nodes[0]}\n\
    \    local smalest_index=0\n    local smalest_even_value=0\n    for (( i = 0;\
    \ i < ${#nodes[@]}; ++i )); do\n        if [ ${nodes[$i]} -eq $smalest_even_value\
    \ ]; then\n            smalest_value=${nodes[$i]}\n            smalest_index=$(expr\
    \ $i + 1)\n        fi\n        if [ ${nodes[$i]} -eq $smalest_value ]; then\n\
    \            smalest_even_value=${nodes[$i]}\n        fi\n    done\n    local\
    \ index_of_smalest_even_value\n    if [ ${#smalest_even_value} -gt 0 ]; then\n\
    \        index_of_smalest_even_value=$(expr $i + 1)\n    else\n        index_of_smalest_even_value=${#smalest_even_value}\n\
    \    fi\n    echo $( IFS=' ' read -d '' \"${index_of_smalest_even_value} ${smalest_value}\"\
    \ )\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp6rj2ljkd.sh: line 49: read: `4 4'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  # Your code here\n  declare -a arr=$1\n  local smalest_value=${arr[0]}\n\
    \  local smallest_index=${arr[0]}\n  for i in ${arr[@]}; do\n      local cur_index=$(echo\
    \ $i | cut -d \" \" -f 1)\n      local cur_value=$(echo $i | cut -d \" \" -f 2)\n\
    \      if [ \"$cur_value\" -eq \"$cur_index\" ];then\n          local smallest_value=$(echo\
    \ $i | cut -d \" \" -f 2)\n          (( smallest_index=$cur_index < smallest_index\
    \ )) && smallest_value=$cur_value\n      else\n          if (( cur_index % 2 ));\
    \ then\n              local smalest_value=$(echo $i | cut -d \" \" -f 2)\n   \
    \           (( smalest_index=$cur_index < smalest_index )) && smalest_value=$cur_value\n\
    \          else\n              if (( smallest_index == $cur_index )); then\n \
    \                 smallest_value=$(echo $i | cut -d \" \" -f 2)\n            \
    \  else\n                  if (( smalest_index == $cur_index )); then\n      \
    \                smalest_value=$(echo $i | cut -d \" \" -f 2)\n              \
    \    else\n                      smallest_value=$(echo $i | cut -d \" \" -f 2)\n\
    \                      smalest_value=$(echo $i | cut -d \" \" -f 2)\n        \
    \          fi\n              fi\n          fi\n      fi\n  done\n  echo \"[$smallest_value,\
    \ $smallest_index]\" >&2\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjexajbwk.sh: line 39: ((: 4 2 3: syntax error in expression (error
    token is "2 3")

    /tmp/tmpjexajbwk.sh: line 39: ((: 4 2 3: syntax error in expression (error token
    is "2 3")

    /tmp/tmpjexajbwk.sh: line 39: ((: 4 2 3: syntax error in expression (error token
    is "2 3")

    [3, 4 2 3]

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: -1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  echo \"$1\" | xargs -n1 echo\n  read node\n  echo \"$node\"\
    \ | xargs -n1 echo\n  echo \"$node\" | xargs -n1 echo\n  echo \"$node\" | xargs\
    \ -n1 echo\n  echo \"$node\" | xargs -n1 echo\n  echo \"$node\" | xargs -n1 echo\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=59 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=52 encoding='utf-8'>
  timestamp: 1660055529
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local val=\"${1// /}\";\n  local tmp=${val//\" \"}\n  local\
    \ arr=($tmp);\n  local vals=(\"${!arr[@]}\" | sort -n | sed 's/^[0-9]*//')\n \
    \ local smalest_val=\"\";\n  local smalest_index=\"-1\";\n  local index=\"-1\"\
    ;\n  local val_to_remove=\"\";\n  for val in $vals; do\n    if [ $val -eq 0 ];then\n\
    \      val_to_remove=$val;\n      break;\n    fi;\n    if [ \"$val\" -lt \"$val_to_remove\"\
    \ ];then\n      smalest_val=$val;\n      smalest_index=$index;\n      val_to_remove=$val;\n\
    \    elif [ \"$val\" -eq \"$val_to_remove\" ];then\n      ((index++))\n    fi;\n\
    \  done;\n  echo $((smalest_val)).$((smalest_index));\n  if [ \"$smalest_val\"\
    \ -ne \"0\" ];then\n    return $val\n  else\n    return []\n  fi;\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0gn1weik.sh: line 33: syntax error near unexpected token `|''

    /tmp/tmp0gn1weik.sh: line 33: `  local vals=("${!arr[@]}" | sort -n | sed ''s/^[0-9]*//'')''

    /tmp/tmp0gn1weik.sh: line 34: local: can only be used in a function

    /tmp/tmp0gn1weik.sh: line 35: local: can only be used in a function

    /tmp/tmp0gn1weik.sh: line 36: local: can only be used in a function

    /tmp/tmp0gn1weik.sh: line 37: local: can only be used in a function

    /tmp/tmp0gn1weik.sh: line 52: [: : integer expression expected

    /tmp/tmp0gn1weik.sh: line 55: return: []: numeric argument required

    /tmp/tmp0gn1weik.sh: line 55: return: can only `return'' from a function or sourced
    script

    /tmp/tmp0gn1weik.sh: line 57: syntax error near unexpected token `}''

    /tmp/tmp0gn1weik.sh: line 57: `}''

    '
  stdout: '0.0

    '
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local i\n    local result\n    local length\n    local\
    \ i1\n    local i3\n    local i4\n    local j\n    local j1\n    local j3\n  \
    \  local j4\n    local k1\n    local k3\n    local k4\n    local l\n    local\
    \ m1\n    local m3\n    local m4\n    local n\n    local n3\n    local n4\n  \
    \  local p\n    local s\n    local s1 \n    local s2\n    local s3\n    local\
    \ s4\n    local t\n    local t1\n    local t2\n    local t3\n    local t4\n  \
    \  local v\n    local v2\n    local v21\n    local v22\n    local v23\n    local\
    \ v24\n    local v25\n    local v26\n    local v27\n    local v28\n    local v29\n\
    \    local v30\n    local v31\n    local v32\n    local v33\n    local v34\n \
    \   local v35\n    local v36\n    local v37\n    local v38\n    local v39\n  \
    \  local v40\n    local v41\n    local v42\n    local v43\n    local v44\n   \
    \ local v45\n    local v46\n    local v47\n    local v48\n    local v49\n    local\
    \ v50\n    local v51\n    local v52\n    local v53\n    local v54\n    local v55\n\
    \    local v56\n    local v57\n    local v58\n    local v59\n    local v60\n \
    \   local v61\n    local v62\n    local v63\n    local v64\n    local v65\n  \
    \  local v66\n    local v67\n    local v68\n    local v69\n    local v70\n   \
    \ local v71\n    local v72\n    local v73\n    local v74\n    local v75\n    local\
    \ v76\n    local v77\n    local v78\n    local v79\n    local v80\n    local v81\n\
    \    local v82\n    local v83\n    local v84\n    local v85\n    local v86\n \
    \   local v87\n    local v88\n    local v89\n    local v90\n    local v91\n  \
    \  local v92\n    local v93\n    \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local array min_index value min smalest_value smalest_index\n\
    \  IFS=\" \"\n  read -ra array <<< \"$1\"\n  min_index=0\n  min=100000\n  smalest_value=0\n\
    \  smalest_index=0\n  for ((i=1; i<${#array[@]}; ++i)); do\n    value=\"$((${array[i]}+$min))\"\
    \n    if (($value % 2 == 0)); then\n      if ((value < min)) ; then\n        min=\"\
    $value\"\n        smalest_index=$i\n        smalest_value=\"$value\"\n      fi\n\
    \    fi\n  done\n  if ((smalest_index != 0)); then\n    echo \"$smalest_value\
    \ $smalest_index\"\n  else\n    echo \"\"\n  fi\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes i\n    read -r nodes <<<\"$1\"\n    declare\
    \ -i index\n    read -r nodes <<<\"$1\"\n    read -r nodes <<<\"$1\"\n    for\
    \ i in $(seq 0 $(( ${#nodes[*]} - 1 ))); do\n        case \"${nodes[$i]}\" in\n\
    \        \"$((${nodes[$i]}%2))\") index=\"$i\"; break;;\n        *) break;;\n\
    \        esac\n    done\n    if [ -z \"${nodes[*]}\" ]; then\n        echo \"\"\
    \n    else\n        echo \"${nodes[$index]}\"\n    fi\n}\n\ncandidate() {\n  \
    \  pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgw9a4b1r.sh: line 36: 4 2 3%2: syntax error in expression (error
    token is "2 3%2")

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  mapfile -t array <<< \"$1\"\n  local index=0\n  local node_value\n\
    \  local smalest_value\n  local index_node\n  while IFS=\" \" read -ra line; do\n\
    \    index_node=\"${line[@]:1}\"\n    node_value=\"${line[@]:2}\"\n    if [[ -n\
    \ $node_value ]]; then\n      if [ \"$node_value\" -eq \"$smalest_value\" ]; then\n\
    \        index_node\n      elif [ \"$node_value\" -lt \"$smalest_value\" ]; then\n\
    \        smalest_value=$node_value\n        index_node\n      fi\n    fi\n  done\
    \ <<< \"${array[@]}\"\n\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpkyvegv6l.sh: line 39: [: : integer expression expected

    /tmp/tmpkyvegv6l.sh: line 41: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes array\n    IFS=$'\\t' read -r -a array <<<\"\
    $1\"\n    local index\n    local node\n    local even_index\n    local smallest_value\n\
    \    local even\n    for i in \"${array[@]}\"; do\n        ((index=$((i+1))))\
    \ >&2\n        ((even=(index % 2)))\n        if (( even )) && [[ \"${array[$i]}\"\
    \ == \\<2 ]]; then\n            node=$(echo \"${array[$i]}\" | cut -d '\"' -f\
    \ 1)\n            ((even_index=index))\n            smallest_value=${array[$i]}\n\
    \            break\n        fi\n    done\n    if (( ${#array[@]} >= 1 )) && [[\
    \ \"${array[0]}\" == \\<2 ]]; then\n        smallest_value=${array[0]}\n    elif\
    \ [[ \"${#array[@]}\" == 0 ]]; then\n        smallest_value=\n    else\n     \
    \   echo \"ERROR: empty list or array passed\"\n        return 1\n    fi\n   \
    \ echo \"${smallest_value}\" \"${even_index}\"\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpp76a6o45.sh: line 38: 4 2 3: syntax error in expression (error
    token is "2 3")

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=$(head -n 1 <<<\
    \ \"$nodes\") || return $?\n    local smalest_index=0\n    for node in $nodes;\
    \ do\n        if [[ \"$node\" -eq \"$smalest_value\" ]]; then\n            smalest_index=$((smalest_index+1))\n\
    \            if [[ \"$smalest_index\" -gt \"0\" ]]; then\n                smalest_value=\"\
    $node\"\n                break\n            fi\n        fi\n    done\n    echo\
    \ $smalest_value | sed \"s/\\\"//g\" &> /dev/null || return $?\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp25be3x23.sh: line 34: [[: 4 2 3: syntax error in expression (error
    token is "2 3")

    /tmp/tmp25be3x23.sh: line 34: [[: 4 2 3: syntax error in expression (error token
    is "2 3")

    /tmp/tmp25be3x23.sh: line 34: [[: 4 2 3: syntax error in expression (error token
    is "2 3")

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$@\n    local -i index=0\n    local -i small_index=$(echo\
    \ ${nodes[*]} | tr ' ' '+' | sort -n | uniq)\n    if [ ${#small_index} -eq 0 ]\n\
    \    then\n        echo '[]'\n    else\n        echo ${small_index}\n    fi\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  # Your code goes here\n}\n\ncandidate() {\n    pluck \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdjkqn9oi.sh: line 31: syntax error near unexpected token `}''

    /tmp/tmpdjkqn9oi.sh: line 31: `}''

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    set +o nounset\n    arr1=$1\n    arr2=()\n    smalest_value=-1\n\
    \    smalest_index=-1\n    \n    for ((i=1; i<${#arr1[@]}; i++)); do\n       \
    \ arr2+=(\"${arr1[$i]}\")\n        if [[ ${arr1[$i]} -le ${arr1[$i-1]} ]]; then\n\
    \            smalest_value=${arr1[$i]}\n            smalest_index=$i\n       \
    \ fi\n    done\n    \n    set -o nounset\n    echo \"$smalest_index $smalest_value\"\
    \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: -1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    read -r nodes\n    if [[ \"$nodes\" =~ ^[0-9]+$ ]]; then\n\
    \        nodes=$(echo $nodes |tr ' ' ',')\n    fi\n    if [[ \"$nodes\" =~ ^[0-9]+,[0-9]+$\
    \ ]]; then\n        echo \"${nodes::1}\"\n    else\n        nodes=$(echo $nodes\
    \ |tr ' ' ' ' |sort -n)\n    fi\n    if [[ \"$nodes\" =~ ^[0-9]+,[0-9]+,[0-9]+$\
    \ ]]; then\n        echo \"${nodes::2}\"\n    else\n        echo \"[]\"\n    fi\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=60 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=53 encoding='utf-8'>
  timestamp: 1660055529
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  # Your code here\n  local nodes=$1\n  local smalest_value=\"\
    \"\n  local index=0\n  local min_even_value\n  local new_value\n\n  for node in\
    \ ${nodes[@]}; do\n    [[ -z \"$node\" ]] && return\n    [[ \"$node\" =~ '^[0-9]+$'\
    \ ]] && new_value=${node}\n    [[ \"$node\" =~ '^[0-9]+\\.[0-9]+$' ]] && new_value=${node%.*}\n\
    \    [[ \"$new_value\" -lt \"$smalest_value\" ]] && smalest_value=${new_value}\n\
    \    [[ \"$node\" =~ '^[0-9]+\\.[0-9]+$' ]] && index=${#new_value}\n    [[ \"\
    $node\" =~ '^[0-9]+$' ]] && [[ \"$index\" -lt \"$index\" ]] && min_even_value=${node}\n\
    \  done\n  [[ -z \"$smalest_value\" ]] && return\n  [[ -z \"$min_even_value\"\
    \ ]] && return\n  return\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    declare -a value\n    declare -a index\n    declare -a\
    \ sorted\n\n    local -a array\n    local -a nodes\n\n    nodes=( $1 )\n\n   \
    \ for ((i=0; i < ${#nodes[@]}; i++)); do\n        value=( \"${nodes[i]}\" )\n\
    \        sorted=( \"${value[@]}\" )\n        sorted_length=( \"${#sorted[@]}\"\
    \ )\n\n        if (( sorted_length == 0 )); then\n            echo \"$value\"\
    \ >&2\n        else\n            array=( \"${sorted[@]}\" )\n            for ((j=0;\
    \ j < $sorted_length; j++)); do\n                if (( ${array[j]} & 1 )); then\n\
    \                    break\n                fi\n            done\n           \
    \ value=( \"${array[$j]}\" )\n            index=( \"${i}\" )\n        fi\n   \
    \ done\n    echo \"$value\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local vals=( $1 );\n  local min=0;\n  local max=${#vals[@]}\n\
    \  local min=-1\n  local smalest_value=${vals[$min]}\n  local index;\n  while\
    \ (( $max > 0 )); do\n    local index=0\n    while (( index < max )); do\n   \
    \   if (( $( echo \"${vals[$index]}\" | wc -w ) -eq 0 )); then\n        vals[$index]=''\n\
    \        break\n      fi\n      if (( $( echo \"${vals[$index]}\" | awk -F\"[\"\
    \ \"${vals[$index]}\"* | wc -w ) -eq 0 ));  then\n        index=$(( index + 1\
    \ ))\n        vals[$index]=''\n      else\n        if (( $(echo \"${vals[$index]}\"\
    \ | awk -F\"[\" '{print $2}' | sort -n -k 2 | head -n 1 | awk '{print $2}' | tr\
    \ -d \"\\\"\") -ne 0 ));  then\n          index=$(echo \"${vals[$index]}\" | awk\
    \ -F\"[\" '{print $1}' | sort -n -k 2 | head -n 1 | awk '{print $2}' | tr -d \"\
    \\\"\")\n        fi\n        smalest_value=$(echo \"${vals[$index]}\" | awk -F\"\
    [\" '{print $1}' | sort -n -k 2 | head -n 1 | awk '{print $2}' | tr -d \"\\\"\"\
    )\n        break\n      fi\n    done\n    min=$(echo \"${vals[$index]}\" | awk\
    \ -F\"[\" '{print $1}' | sort -n -k 2 | head -n 1 | awk '{print $2}' | tr -d \"\
    \\\"\")\n    if [ $min -ne -1 ];  then\n      smalest_value=$(echo \"${vals[$index]}\"\
    \ | awk -F\"[\" '{print $1}' | sort -n -k 2 | head -n 1 | awk '{print $2}' | tr\
    \ -d \"\\\"\")\n    fi\n    (( min = max - 1 ))\n    (( max = $max - 1 ))\n  done\n\
    \  echo -n \"${smalest_value}\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppo3kj1ie.sh: line 39: ((: 1 -eq 0 : syntax error in expression
    (error token is "0 ")

    /tmp/tmppo3kj1ie.sh: line 43: ((: 1 -eq 0 : syntax error in expression (error
    token is "0 ")

    /tmp/tmppo3kj1ie.sh: line 47: ((: -ne 0 : syntax error in expression (error token
    is "0 ")

    /tmp/tmppo3kj1ie.sh: line 55: [: -ne: unary operator expected

    /tmp/tmppo3kj1ie.sh: line 39: ((: 1 -eq 0 : syntax error in expression (error
    token is "0 ")

    /tmp/tmppo3kj1ie.sh: line 43: ((: 1 -eq 0 : syntax error in expression (error
    token is "0 ")

    /tmp/tmppo3kj1ie.sh: line 47: ((: -ne 0 : syntax error in expression (error token
    is "0 ")

    /tmp/tmppo3kj1ie.sh: line 55: [: -ne: unary operator expected

    /tmp/tmppo3kj1ie.sh: line 39: ((: 1 -eq 0 : syntax error in expression (error
    token is "0 ")

    /tmp/tmppo3kj1ie.sh: line 43: ((: 1 -eq 0 : syntax error in expression (error
    token is "0 ")

    /tmp/tmppo3kj1ie.sh: line 47: ((: -ne 0 : syntax error in expression (error token
    is "0 ")

    /tmp/tmppo3kj1ie.sh: line 55: [: -ne: unary operator expected

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local node_value node_index\n  read -r node_value node_index\
    \ < <(IFS=' ' read -r -a nodes <<<\"$1\")\n  local min_value=0\n  local min_index\n\
    \  local min_node\n  for (( node_index; node_index>0; node_index=node_index-1\
    \ )); do\n    if (( node_value%2 )); then\n      min_value=node_value\n      min_index=node_index\n\
    \      min_node=\"${nodes[min_index-1]}\"\n    fi\n  done\n  if [ \"${min_value}\"\
    \ = \"${node_value}\" ]; then\n    return \"${min_node}\"\n  fi\n  if [ \"${#nodes[@]}\"\
    \ -eq 0 ]; then\n    return []\n  fi\n  local min_index\n  for (( node_index;\
    \ node_index>0; node_index=node_index-1 )); do\n    if (( node_value%2 )); then\n\
    \      if [ \"${node_value}\" -gt \"${min_value}\" ]; then\n        min_value=node_value\n\
    \        min_index=node_index\n      fi\n    fi\n  done\n  return \"${nodes[min_index-1]}\"\
    \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp8se5rwfz.sh: line 46: return: []: numeric argument required

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local i index\n  local nodes=$1\n  local smalest_value\n\
    \  local smalest_index\n  smalest_value=$(head -1 <<< \"$nodes\" | tail -1)\n\
    \  smalest_index=0\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ \"${nodes[i]}\"\
    \ -gt \"$smalest_value\" ]] || [[ $i -eq 0 ]]; then\n      smalest_value=${nodes[i]}\n\
    \      smalest_index=$i\n    fi\n  done\n  if [[ ${#nodes[@]} -eq 0 ]]; then\n\
    \    return 0\n  fi\n  echo \"$smalest_value\"\n  echo \"$smalest_index\"\n}\n\
    \ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4wytcuz4.sh: line 37: [[: 4 2 3: syntax error in expression (error
    token is "2 3")

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local node_array value\n    node_array=( $(echo \"$1\"\
    |sed \"s/ /\\n/g\"))\n    local i=0\n    local node_value index\n    local node_even_value\
    \ s\n    local min_index\n    local min_index2\n    node_even_value=0;\n    min_index=$(echo\
    \ \"${node_array[0]}\"|sed \"s/ /\\n/g\")\n    min_index2=$(echo \"${node_array[0]}\"\
    |sed \"s/ /\\n/g\")\n    echo \"$min_index\"\n    echo \"$min_index2\"\n    echo\
    \ \"$node_array\"\n    for node_value in \"${node_array[@]}\"; do\n        node_even_value=$((node_even_value\
    \ + ${node_value}))\n        if [ $((node_even_value % 2)) -eq 0 ]; then\n   \
    \         echo \"$node_value\"\n            if [ $node_value < $min_index ]; then\n\
    \                min_index=$node_value\n            fi\n            echo \"$min_index\"\
    \n            node_array=( $(echo \"$node_array\"|sed \"s/$node_value/\\\\n/g\"\
    ))\n        else\n            echo \"$node_value\"\n            if [ $node_value\
    \ < $min_index2 ]; then\n                min_index2=$node_value\n            fi\n\
    \        fi\n    done\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$(echo $1 |sed 's/ /\\n/g')\n  local minvals=$(echo\
    \ $1 | sort -n)\n  local node\n  local i\n  local val\n  while read -r node; do\n\
    \    val=$(echo $node | cut -d' ' -f1)\n    for ((i=0; i<${#minvals[@]}; i++));\
    \ do\n      val2=${minvals[$i]}\n      [[ \"$val\" == \"$val2\" ]] && [[ \"${minvals[$(($i))]}\"\
    \ == \"$val2\" ]] || continue\n      minvals[$i]=\"$val\"\n      node=\"$val\"\
    \n    done\n    printf '%s\\n' \"$node\"\n  done <<< \"$minvals\"\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local i=0\n    local nodes=$1\n    local val=$2\n    local\
    \ result\n    local count\n    local min_val\n    local min_index\n    local min_count\n\
    \    while [ $i -lt ${#nodes[@]} ]; do\n        val=`echo ${nodes[$i]} | tr -d\
    \ ' '`\n        count=0\n        local index=0\n        while [ $i -le ${#nodes[$i]}\
    \ ]; do\n            val2=`echo ${nodes[$i]:$index} | tr -d ' '`\n           \
    \ if [ ${val2%%[!0-9]} -eq 0 ] ; then\n                count=$(( count+1 ))\n\
    \                if [ $count -eq 0 ]; then\n                    min_val=$val2\n\
    \                    min_index=$index\n                else\n                \
    \    if [ $min_val -eq $val2 ]; then\n                        if [ $min_count\
    \ -gt $count ]; then\n                            min_count=$count\n         \
    \                   min_index=$index\n                            min_val=$val2\n\
    \                        fi\n                    fi\n                fi\n    \
    \        fi\n            index=`expr $index + 1 `\n            i=$(( $i + 1 ))\n\
    \        done\n        result=`echo ${nodes[$i]} | tr -d ' '`\n        i=$(( $i\
    \ + 1 ))\n    done\n    if [ $i -eq $(( ${#nodes[@]} - 1 ) ) ]; then\n       \
    \ echo $result\n    else\n        echo $result\n        echo ${nodes[$i]}\n  \
    \  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpw7lr1oza.sh: line 65: 1: command not found

    /tmp/tmpw7lr1oza.sh: line 65: [: 2: unary operator expected

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local i value index evens value odd index even odd evens\
    \ index even odds\n  evens=()\n  odds=()\n  index=0\n  value=0\n  odd=$1\n  odd_idx=0\
    \ odd_value=0\n  for i in $1 do\n    value=\"$value\"$i\n    ((evens[$index++]))=\"\
    $value\"\n  done\n  for i in $(seq 1 $index) do\n    odd=$1\n    odd=$2\n    ((odd_idx++))\n\
    \    ((odds[$odd_idx++]))=\"$odd\"\n  done\n  if [[ ${#odds[@]} -eq 0 ]] && [[\
    \ ${#evens[@]} -eq 0 ]]; then\n    return 0\n  fi\n  value=$(echo \"${evens[@]}\"\
    \ | sort -g | head -1)\n  odd=${odds[$odd_idx]}\n  echo [ \"\\\"$value\\\"\",\
    \ \\\"$odd\\\" ]\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpge5i10nx.sh: line 38: syntax error near unexpected token `value="$value"$i''

    /tmp/tmpge5i10nx.sh: line 38: `    value="$value"$i''

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=(\"${@}\")\n    local smalest_value=\"${nodes[0]}\"\
    \n    local smallest_index=\"${nodes[0]}\"\n    local smales_even_index=\"$(echo\
    \ \"${nodes[@]}\" | sort -nk 2,2 | head -1)\"\n    local smales_even_value=\"\
    ${smales_even_index}\"\n    for node in \"${nodes[@]}\"; do\n        if [[ $node\
    \ -eq \"$smales_even_value\" ]]; then\n            smalest_value=\"$node\"\n \
    \           smallest_index=\"${node}\"\n        fi\n        if [[ $node -lt \"\
    $smales_even_value\" ]]; then\n            smales_even_value=\"$node\"\n     \
    \       smales_even_index=\"$node\"\n        fi\n    done\n    echo '\"' \"$smalest_value\"\
    \ '\"' \"$smallest_index\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpk2xqfibg.sh: line 36: [[: 4 2 3: syntax error in expression (error
    token is "2 3")

    /tmp/tmpk2xqfibg.sh: line 40: [[: 4 2 3: syntax error in expression (error token
    is "2 3")

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n   local values=$1\n   local numNodes=${#values[@]}\n   if\
    \ [ ${numNodes} -eq 0 ] ; then return 0 ; fi\n   local sortedArray\n   sortedArray=($(sort\
    \ -nr -k 1 <<<\"${values}\"|sed \"s/\\\"//g\"))\n   if [ $sortedArray[ ${#sortedArray[@]}\
    \ - 1 ] -gt 0 ] ; then\n     local smallestValue=${sortedArray[${#sortedArray[@]}\
    \ -1]}\n     local smallestIndex=0\n   else\n     smallestValue=${sortedArray[0]}\n\
    \     smallestIndex=1\n   fi\n   local index=1\n   while [ ${index} -le ${numNodes}\
    \ ] ; do\n     local currentValue=${sortedArray[$index]}\n     if [ \"${smallestValue}\"\
    \ -eq \"${currentValue}\" ] ; then\n       smallestValue=${sortedArray[$index+1]}\n\
    \       smallestIndex=$index+1\n     elif [ \"${smallestIndex}\" -eq \"${index}\"\
    \ ] ; then\n       smallestValue=${sortedArray[$index]};\n       smallestIndex=$index\n\
    \     fi\n     index=$(($index+2))\n   done\n   echo ${smallestValue}\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp79isk59n.sh: line 35: [: too many arguments

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  # Convert a string into an array using split then map\n \
    \ local -a arr=( $( echo \"$1\" | tr \" \" \" \" ) )\n  # Sort the array\n  local\
    \ -a sorted=( $( echo \"${arr[@]}\" | sort -n -r ) )\n  # Extract the values by\
    \ removing the first element\n  local -a nodes=( ${sorted[@]:1} )\n  # Find the\
    \ smallest even value\n  local smalest_value=\n  local -a indexes\n  for node\
    \ in \"${nodes[@]}\"; do\n    (( smalest_value += node ))\n  done\n  # Find the\
    \ index of the smallest even value\n  local -i smalest_index\n  for (( i=1; i<${#nodes[@]};\
    \ i++ )); do\n    local node=${nodes[$i]}\n    (( smalest_index++ ))\n    [[ $node\
    \ -eq \"$smalest_value\" ]] && break\n  done\n  # Return the smallest even value\
    \ and the index\n  [[ $smalest_index -eq ${#nodes[@]} ]] && return 0\n  echo \"\
    $smalest_value \\\"${nodes[$smalest_index]}\\\"\"\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local vals=( $(echo $1 | sed 's/[[:space:]]*$//g') )\n\
    \    local smalest_value=0\n    local smalest_index=0\n    local min_idx=0\n \
    \   for idx in $(seq 0 $(( ${#vals[@]} - 1 )))\n    do\n        local val=${vals[$idx]}\n\
    \        if (( $val % 2 == 0))\n        then\n            if [ \"$smalest_value\"\
    \ -lt \"$val\" ]\n            then\n                smalest_value=$val\n     \
    \           smalest_index=$idx\n            elif [ \"$smalest_value\" = \"$val\"\
    \ ]\n            then\n                if [ \"$idx\" -lt \"$min_idx\" ]\n    \
    \            then\n                    min_idx=$idx\n                fi\n    \
    \        fi\n        fi\n    done\n    echo $vals[$min_idx]\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local node smallest\n    local nodeList\n    IFS=$'\\n'\
    \ read -r -a nodes <<< \"$1\"\n\n    smallest=${nodes[0]}\n    smallest_idx=0\n\
    \    for (( idx=1; idx<${#nodes[@]}; idx++ )); do\n        node=${nodes[idx]}\n\
    \        nodeList=( $(echo \"${nodes[*]}\" | sort -n -k 2 | sed 's/ //g'))\n \
    \       if [[ ${nodeList[*]} =~ ^[0-9]+$ && $(( 10#$node % 2 )) == 0 ]]; then\n\
    \            if [[ ${nodeList[*]} -lt $smallest ]]; then\n                smallest=${node}\n\
    \                smallest_idx=$idx\n            fi\n        fi\n    done\n   \
    \ echo \"${smallest}\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n\n    declare -i i smalest_value smallest_value\
    \ smalest_index smallest_index\n    smalest_value=${nodes[*]}\n    smallest_value=${nodes[*]}\n\
    \    smalest_index=0\n    smallest_index=0\n\n    for ((i=0; i < ${#nodes[*]};\
    \ i++)); do\n        if [ $nodes[$i] -ge ${smallest_value} ]; then\n         \
    \   smalest_value=$nodes[$i]\n            smallest_value=$nodes[$i]\n        \
    \    smalest_index=$i\n            smallest_index=$i\n        fi\n    done\n\n\
    \    case \"$smalest_value\" in\n        \"0\")\n            echo \"[]\"\n   \
    \     ;;\n        \"1\")\n            echo \"['\\\"$smalest_value\\\"', '\\\"\
    $smalest_index\\\"']\"\n        ;;\n        *)\n            echo \"[\\\"$smalest_value\\\
    \", '\\\"$smalest_index\\\"']\"\n        ;;\n    esac\n\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7zxopcr9.sh: line 33: 4 2 3: syntax error in expression (error
    token is "2 3")

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value=0\n    local smalest_index=0\n\
    \n    while [ -n \"$nodes\" ]; do\n        local node=$(IFS=' ' read -a array\
    \ <<< \"$nodes\")\n        local value=${array[0]}\n        local index=${array[1]}\n\
    \        ((index--))\n        if [ $(( index%2 )) -eq 0 ] && [ $(( value%2 ))\
    \ -gt $smalest_value ]; then\n            smalest_value=$value\n            smalest_index=$index\n\
    \        fi\n        nodes=\"${array[@]:2}\" # skip the first 2 elements\n   \
    \ done\n\n    printf \"[ '%s', '%s' ]\\n\" \"$smalest_value\" \"$smalest_index\"\
    \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local str=$1\n    local value=0 index=0\n    local array=($(echo\
    \ $str | tr \" \" \"\\n\"))\n    for i in ${array[@]}; do\n        value=$(( $value\
    \ + $i ))\n        index=$(( $index + 1 ))\n    done\n    local smalest_value=$((\
    \ $value / 2 ))\n    local smalest_index=0\n    local smalest_array_item\n   \
    \ for i in ${array[@]}; do\n        if [ $i == $smalest_value ]; then\n      \
    \      smalest_array_item=$i\n            smalest_index=$index\n        fi\n \
    \       index=$(echo $i | bc)\n    done\n    echo ${smalest_array_item}\n}\n\n\
    candidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=$1\n  local smalest_value=${nodes[0]}\n  local\
    \ smalest_index=0\n  local even_values=0\n  local even_value_index=0\n  local\
    \ i=1 \n  while (( $i < ${#nodes[@]} )); do\n    # Check if this node is an even\
    \ number\n    if [[ ${nodes[$i]} == ${nodes[$i]} && ${nodes[$i]} -eq 0 ]]; then\n\
    \      # Increment the even values counter\n      even_values=$((even_values+1))\n\
    \      # Increment the even values index counter\n      even_value_index=$((even_value_index+1))\n\
    \    fi\n    if ((even_values == ${nodes[$i]})); then\n      # If this is the\
    \ smallest even value so far...\n      if ((even_value_index < ${smalest_index}));\
    \ then\n        smalest_index=${even_value_index}\n        smalest_value=${nodes[$i]}\n\
    \      fi\n      # Increment the even values counter\n      even_values=$((even_values+1))\n\
    \      # Increment the even values index counter\n      even_value_index=$((even_value_index+1))\n\
    \    else\n      (( i+=1 ))\n      # If this is the smallest index so far...\n\
    \      if (( ${smalest_value} < ${nodes[$i]} )); then\n        smalest_index=${i}\n\
    \        smalest_value=${nodes[$i]}\n      fi\n    fi\n  done\n  if (( ${#nodes[@]}\
    \ )); then\n    echo ${smalest_value}\n  fi\n}\n\ncandidate() {\n    pluck \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  echo \"pluck $1\"\n  local i=0\n  local nodes=()\n  local\
    \ values=()\n  local max=0\n  while read -r value; do\n    values[$i]=\"$value\"\
    \n    (( i++ ))\n  done <<< \"$1\"\n  echo \"${values[@]}\" | grep -Eo '^[0-9]+$'\
    \ | sort -nr | head -1 | tr -d '\"'\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local array=$1\n  local smalest_value sindex smallest_even\
    \ smallest_index smalest_value sindex\n  local result=\"\"\n  for index in ${!array[@]};\
    \ do\n    value=${array[$index]};\n    if [ ${#result} -eq 0 ]; then\n      if\
    \ [[ ${value} -eq 0 ]]; then\n        continue\n      fi\n      smalest_value=${value}\n\
    \      smallest_even=${value}\n      smallest_even_index=${index}\n      sindex=0\n\
    \    else\n      if [[ ${value} -eq 0 && ${sindex} -eq 0 ]]; then\n        smallest_even=$value\n\
    \        smallest_even_index=${index}\n        sindex=0\n      elif [ ${value}\
    \ -lt ${smalest_value} ]; then\n        smalest_value=${value}\n        smallest_even=$value\n\
    \        smallest_even_index=${index}\n        sindex=0\n      elif [ ${value}\
    \ -eq ${smalest_value} ] && [ ${index} -lt ${smallest_even_index} ]; then\n  \
    \      smallest_even=$value\n        smallest_even_index=${index}\n        sindex=0\n\
    \      elif [ ${value} -eq ${smalest_value} ] && [ ${index} -gt ${smallest_even_index}\
    \ ]; then\n        smalest_value=${value}\n        smallest_even=$value\n    \
    \    smallest_even_index=${index}\n        sindex=0\n      elif [ ${value} -eq\
    \ ${smalest_value} ] && [ ${index} -eq ${smallest_even_index} ]; then\n      \
    \  smalest_value=${value}\n        smallest_even=$value\n        smallest_even_index=${index}\n\
    \        sindex=0\n      fi\n    fi\n  done\n  if [[ ${#array[@]} -gt 0 ]]; then\n\
    \    if [ ${#result} -eq 0 ]; then\n      smalest_value=${array[0]}\n      smallest_even=${array[0]}\n\
    \      smallest_even_index=${array[0]}\n      sindex=0\n    fi\n    smallest_even=$(echo\
    \ $smallest_even | cut -d' ' -f1)\n    smallest_even_index=$(echo $smallest_even_index\
    \ | cut -d' ' -f1)\n  fi\n  result=($smallest_even $smallest_even_index)\n  echo\
    \ ${result[@]}\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkgwa8cs8.sh: line 36: [[: 4 2 3: syntax error in expression (error
    token is "2 3")

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=$1\n    local smalest_value\n    local smalest_index\n\
    \    local i\n    local smalest_even_values\n    smalest_even_values=0\n    for\
    \ (( i = 1 ; i <= nodes.length ; i++ )); do\n        if [[ $i -eq 1 ]]; then\n\
    \            smalest_value=$i\n            smalest_index=i\n        else\n   \
    \         if [[ \"$i\" -le \"$(( smalest_value + smalest_index ))\" ]]; then\n\
    \                smalest_value=$i\n                smalest_index=i\n         \
    \       smalest_even_values=0\n            fi\n            if (( smalest_even_values\
    \ == 0 )); then\n                smalest_even_values=$i\n            fi\n    \
    \    fi\n    done\n    echo -n '\"'$smalest_value'\",\"'$smalest_index'\"\n}\n\
    \ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5gi6rzxw.sh: line 51: unexpected EOF while looking for matching
    `''''

    /tmp/tmp5gi6rzxw.sh: line 71: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    # convert items to integer list\n    items=($1)\n    #\
    \ sort by even value, starting with the smallest one\n    sort -nr -k2,2 <<<\"\
    ${items[@]}\"\n    # check if any items are even\n    [[ ${#items[*]} -eq 0 ]]\
    \ && return 0\n    # find smallest even item\n    min=$(( ${items[0]} % 2 ))\n\
    \    # find the smallest index\n    for i in $(seq 0 $(( ${#items[*]} - 1 )) );\
    \ do\n        [[ ${items[$i]} % 2 -eq $min ]] || continue\n        min=$(( i +\
    \ 1 ))\n        break\n    done\n    # remove smallest even value from list\n\
    \    items=($(IFS=$'\\n'; echo \"${items[@]/$min}\")) # convert list back into\
    \ single string with newline\n    # return the smallest item and the index\n \
    \   echo \"$items\" | tr -d '\"' \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpi6jq6k7i.sh: line 40: conditional binary operator expected

    /tmp/tmpi6jq6k7i.sh: line 40: syntax error near `%''

    /tmp/tmpi6jq6k7i.sh: line 40: `        [[ ${items[$i]} % 2 -eq $min ]] || continue''

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local array=\"$1\"\n\n    local smalest_value smalest_index\
    \ i j\n    smalest_value=$(null 2> /dev/null); smalest_index=0\n    for ((i=0;\
    \ i<${#array[@]}; i++)); do\n        j=$((i+1))\n        echo \"${array[$i]}\"\
    \ | grep -q \"$((smalest_value | $((smalest_value+array[$i])))%2)\" && smalest_value=${array[$i]}\n\
    \        if [[ -z ${array[$i]} ]]; then\n            echo \"$((smalest_value |\
    \ $((smalest_value+array[$i])))%2)\"\n            return \"$((smalest_value |\
    \ $((smalest_value+array[$i])))%2)\"\n        fi\n    done\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpl70a5xgh.sh: command substitution: line 36: syntax error near unexpected
    token `%2''

    /tmp/tmpl70a5xgh.sh: command substitution: line 36: `(smalest_value | $((smalest_value+array[$i])))%2''

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local i; local res=(); local tmp=(); local n; local e;\
    \ local tmp2;\n    for ((i = 0; i < ${#1}; ++i)); do\n        tmp+=(${!i}); tmp2+=(\"\
    ${!i}\"); done\n    for ((i = 0; i < ${#tmp[@]}; ++i)); do\n        ((n=\"${tmp[i]}\"\
    )); e=\"${tmp2[i]}\"; if (( ${#res[@]} > 0 )) && (( n=\"${res[-1]}\" )); then\n\
    \            if (( ${#e} > 0 )); then if (( n=\"${e}\" )); then [[ \"$n\" -gt\
    \ \"$e\" ]] && res[-1]=\"$n\"; else res[-1]=\"$n\"; fi; fi; else\n           \
    \ res+=(\"$n\"); fi; done\n    [[ -z \"${res[@]}\" ]] && return 0\n    return\
    \ \"${res[@]}\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpl1bmsisk.sh: line 34: ((: n=/tmp/tmpl1bmsisk.sh: syntax error:
    operand expected (error token is "/tmp/tmpl1bmsisk.sh")

    /tmp/tmpl1bmsisk.sh: line 34: ((: n= : syntax error: operand expected (error token
    is "= ")

    /tmp/tmpl1bmsisk.sh: line 38: return: : numeric argument required

    '
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=( $1 )\n  # sort the array\n  local sorted_arr=(\
    \ $(sort -g <<< \"${nodes[@]}\" ) )\n  # find the index of the smallest even value\n\
    \  local index=0\n  for (( i=0; i<${#sorted_arr[@]}; i++ )); do\n    (( ${sorted_arr[i]}\
    \ & 2 )) && continue\n    (( index++ ))\n  done\n  # return [ smalest_value, its\
    \ index ]\n  echo \"${sorted_arr[index]} \\\"${index}\\\"\"\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local arr=$1\n    local max_index=0 smalest_val\n    local\
    \ i=0\n\n    if [[ \"$arr\" == \"\" ]]; then\n        echo \"[]\"\n        return\n\
    \    fi\n\n    while (( i < \"${#arr[@]}\" )); do\n        val=${arr[$i]}\n  \
    \      if [[ \"${val}\" =~ ^-?[0-9]+$ ]]; then\n            if (( val % 2 == 0\
    \ )); then\n                if [[ \"${smalest_val}\" != \"$val\" ]] || [[ \"${i}\"\
    \ == \"${#arr[@]}\" ]]; then\n                    smalest_val=\"$val\"\n     \
    \               max_index=\"$i\"\n                fi\n            fi\n       \
    \ fi\n        i=$(( i + 1 ))\n    done\n    if [[ \"${smalest_val}\" == \"\" ]];\
    \ then\n        echo \"[]\"\n        return\n    fi\n\n    echo '[ \"'\"$smalest_val\"\
    '\"'\"${max_index}\"']'\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055524
