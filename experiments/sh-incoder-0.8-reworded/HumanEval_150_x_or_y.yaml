name: HumanEval_150_x_or_y
language: sh
prompt: "#!/bin/bash\n# A simple program which should return the value of x if n is\
  \ \n# a prime number and should return the value of y otherwise.\n# Examples:\n\
  # >>> $(x_or_y \"7\" \"34\" \"12\")\n# \"34\"\n# >>> $(x_or_y \"15\" \"8\" \"5\"\
  )\n# \"5\"\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nx_or_y()\
  \ {\n"
tests: "}\n\ncandidate() {\n    x_or_y \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"7\" \"34\" \"12\") = \"34\" ]]\n    [[ $(candidate \"15\" \"8\" \"5\") = \"\
  5\" ]]\n    [[ $(candidate \"3\" \"33\" \"5212\") = \"33\" ]]\n    [[ $(candidate\
  \ \"1259\" \"3\" \"52\") = \"3\" ]]\n    [[ $(candidate \"7919\" \"-1\" \"12\")\
  \ = \"-1\" ]]\n    [[ $(candidate \"3609\" \"1245\" \"583\") = \"583\" ]]\n    [[\
  \ $(candidate \"91\" \"56\" \"129\") = \"129\" ]]\n    [[ $(candidate \"6\" \"34\"\
  \ \"1234\") = \"1234\" ]]\n    [[ $(candidate \"1\" \"2\" \"0\") = \"0\" ]]\n  \
  \  [[ $(candidate \"2\" \"2\" \"0\") = \"2\" ]]\n}\n\nrun_test"
completions: ["    local x=$1\n    local y=$2\n    local z=$3\n    local a
  "    local a=$1\n    local b=$2\n    local c=$3\n    if [ $(( $a % $b )) == 0 ];\
    \ then\n        echo \"$a\"\n    else\n        echo \"$c\"\n    fi", "\tif [ $1\
    \ -eq 1 ]; then\n\t\techo $2\n\telif [ $1 -gt 1 ] && [ $1 -le $3 ]; then\n\t\t\
    echo $2\n\telif [ $1 -lt 1 ]; then\n\t\techo $3\n\telse\n\t\techo \"Unknown argument\"\
    \n\tfi", "  if [ $(is_prime \"$1\") ]; then\n    echo $2\n  else\n    echo $3\n\
    \  fi", "    if [ $1 -eq 1 ]; then\n        echo $2\n    elif [ $1 -eq 2 ]; then\n\
    \        echo $3\n    elif [ $1 -eq 3 ]; then\n        echo $2\n    elif [ $1\
    \ -eq 4 ]; then\n        echo $3\n    elif [ $1 -eq 5 ]; then\n        echo $2\n\
    \    elif [ $1 -eq 6 ]; then\n        echo $3\n    elif [ $1 -eq 7 ]; then\n \
    \       echo $2\n    elif [ $1 -eq 8 ]; then\n        echo $3\n    elif [ $1 -eq\
    \ 9 ]; then\n        echo $2\n    elif [ $1 -eq 10 ]; then\n        echo $3\n\
    \    elif [ $1 -eq 11 ]; then\n        echo $2\n    elif [ $1 -eq 12 ]; then\n\
    \        echo $3\n    elif [ $1 -eq 13 ]; then\n        echo $2\n    elif [ $1\
    \ -eq 14 ]; then\n        echo $3\n    elif [ $1 -eq 15 ]; then\n        echo\
    \ $2\n    elif [ $1 -eq 16 ]; then\n        echo $3\n    elif [ $1 -eq 17 ]; then\n\
    \        echo $2\n    elif [ $1 -eq 18 ]; then\n        echo $3\n    elif [ $1\
    \ -eq 19 ]; then\n        echo $2\n    elif [ $1 -eq 20 ]; then\n        echo\
    \ $3\n    elif [ $1 -eq 21 ]; then\n        echo $2\n    elif [ $1 -eq 22 ]; then\n\
    \        echo $3\n    elif [ $1 -eq 23 ]; then\n        echo $2\n    elif [ $1\
    \ -eq 24 ]; then\n        echo $3\n    elif [ $1 -eq 25 ]; then\n        echo\
    \ $2\n    elif [ $1 -eq 26 ]; then\n        echo $3\n    elif [ $1 -eq 27 ]; then\n\
    \        echo $2\n    elif [ $1 -eq 28 ]; then\n        echo $3\n    elif [ $1\
    \ -eq 29 ]; then\n        echo $2\n    elif [ $1 -eq 30 ]; then\n        echo\
    \ $3\n    elif [ $1 -eq 31 ]; then\n        echo $2\n    elif [ $1 -eq 32 ]; then\n\
    \        echo $3\n    elif [ $1 -eq 33 ]; then\n        echo $2\n    elif [ $1\
    \ -eq 34 ]; then\n        echo $3\n    elif [ $1 -eq 35 ]; then\n        echo\
    \ $2\n    elif [ $1 -eq 36 ]; then\n        echo $3\n    elif [ $1 -eq 37 ]; then\n\
    \        echo $2\n    elif [ $1 -eq 38 ]; then\n        echo $3\n    elif [ $1\
    \ -eq 39 ]; then\n        echo $2\n    elif [ $", "    local x=\"$1\"\n    local\
    \ y=\"$2\"\n    local z=\"$3\"\n    local is_prime=\"$(( $(expr x \\% z == 0)\
    \ ))\"\n    \n    if [ $is_prime -eq 0 ]; then\n        echo \"$z\"\n    else\n\
    \        echo \"$y\"\n    fi", "  if [ $(($1 % $2)) -eq 0 ]\n  then\n    echo\
    \ $3\n  else\n    echo $2\n  fi", "  local x=\"$1\"\n  local y=\"$2\"\n  local\
    \ n=\"$3\"\n  if [ -n \"$2\" ] && [ \"$x\" -le \"$n\" ] && [ \"$x\" -ge \"$y\"\
    \ ]; then\n    echo \"$x\"\n  else\n    echo \"$y\"\n  fi", "    # Get the arguments\
    \ passed to the script.\n    echo \"$1\"\n    echo \"$2\"\n    echo \"$3\"\n \
    \   \n    if [ \"$2\" -ne \"0\" ]; then\n        echo \"$2\"\n    elif [ \"$3\"\
    \ -ne \"0\" ]; then\n        echo \"$3\"\n    else\n        echo \"$1\"\n    fi",
  "  local x=\"$1\"\n  local y=\"$2\"\n  local z=\"$3\"\n  if [[ $(($x - 1)) == $x\
    \ ]]; then\n    if [[ $(($x - 1)) == $x ]]; then\n      echo \"$x\"\n    else\n\
    \      echo \"$y\"\n    fi\n  else\n    echo \"$z\"\n  fi", "  if (( $(echo \"\
    ${1} * ${2} + ${3} < 10\" | bc -l) ))\n  then\n    return ${3}\n  else\n    return\
    \ ${2}\n  fi", "    if [ $1 -eq 1 ]\n    then\n        echo \"y\"\n    else\n\
    \        if [ $3 -eq 1 ]\n        then\n            echo \"x\"\n        else\n\
    \            if [ $1 -eq 3 ]\n            then\n                echo \"x\"\n \
    \           else\n                if [ $2 -eq 3 ]\n                then\n    \
    \                echo \"x\"\n                else\n                    if [ $((\
    \ $1 % $2 )) -eq 0 ]\n                    then\n                        echo \"\
    x\"\n                    else\n                        if [ $(( $3 % $2 )) -eq\
    \ 0 ]\n                        then\n                            echo \"y\"\n\
    \                        else\n                            echo \"y\"\n      \
    \                  fi\n                    fi\n                fi\n          \
    \  fi\n        fi\n    fi", "  x=$1\n  y=$2\n  if [[ $(( $1 * $1 + $2 * $2 - $3\
    \ * $3 )) -eq $(( $1 * $1 + $2 * $2 + $3 * $3 )) ]]; then\n    echo $1\n  else\n\
    \    echo $2\n  fi", "\tif [ $(($1 % $2)) -eq 0 ]; then\n\t\techo $3\n\telse\n\
    \t\techo $2\n\tfi", "\t# If n is a multiple of $2, return $3\n\t(( $1 % $2 ))",
  "   local n=$1 a=$2 b=$3\n   if [ \"$n\" -eq \"1\" ]; then\n      echo \"$a\"\n\
    \   elif [ \"$a\" -eq \"1\" ]; then\n      echo \"$b\"\n   else\n      echo \"\
    $b\"\n   fi", "  local x=\"${1}\"\n  local y=\"${2}\"\n  local z=\"${3}\"\n  local\
    \ a=\"${x}\"\n  local b=\"${y}\"\n  local c=\"${z}\"\n  local d=\"${a}\"\n  local\
    \ e=\"${b}\"\n  local f=\"${c}\"\n  local g=\"${d}\"\n  local h=\"${e}\"\n  local\
    \ i=\"${f}\"\n  local j=\"${g}\"\n  local k=\"${h}\"\n  local l=\"${i}\"\n  local\
    \ m=\"${j}\"\n  local n=\"${k}\"\n  local o=\"${l}\"\n  if [[ $(echo \"${x} ${y}\
    \ ${z}\" | grep -c \"${x}\") -gt 0 ]]; then\n    echo \"${x}\"\n  else\n    echo\
    \ \"${y}\"\n  fi", "    if (( $1 == 1 )); then\n        echo $3\n    elif (( $1\
    \ % $1 == 0 )); then\n        echo $2\n    else\n        echo $1\n    fi", " \
    \ if [ $3 -eq 0 ]; then\n    echo \"$1\"\n  else\n    echo \"$2\"\n  fi", "  if\
    \ [ $(($1 % $2)) -eq 0 ] && [ $(($2 % $3)) -eq 0 ]\n  then\n    echo \"$1\"\n\
    \  else\n    echo \"$3\"\n  fi", "\tif (( $1 == $2 )); then\n\t\tif (( $1 == $3\
    \ )); then\n\t\t\techo \"$1\"\n\t\telse\n\t\t\techo \"$2\"\n\t\tfi\n\telse\n\t\
    \techo \"$3\"\n\tfi", "  local n=$1\n  local x=$2\n  local y=$3\n  ((n>1)) &&\
    \ {\n    if ((n%2)); then\n      return $y\n    else\n      return $x\n    fi\n\
    \  }", "    x=\"$1\"\n    y=\"$2\"\n    n=\"$3\"\n    \n    for i in `seq 1 $n`\n\
    \    do\n        (( (x%$i)==0 ))\n    done\n    \n    if [[ $? -eq 0 ]] ; then\n\
    \        echo \"$x\"\n    else\n        echo \"$y\"\n    fi", "    local a b\n\
    \    a=$1\n    b=$2\n    shift\n    shift\n    [ \"$#\" -eq 0 ] && return \"$a\"\
    \n    [ \"$#\" -eq 1 ] && return \"$b\"\n    local n\n    for (( i=1; i<=$(( b\
    \ - a + 1 )); i++ )) do\n        if [ $(( a % i )) -eq 0 ] ; then\n          \
    \  (( n = i ))\n            (( a = b ))\n        else\n            (( b = a +\
    \ 1 ))\n        fi\n    done\n    return $n", "\tif [ \"$1\" = \"$2\" ]; then\n\
    \t\techo $3\n\telse\n\t\techo $2\n\tfi", "    local a b c d x\n    a=${1% *}\n\
    \    b=${2% *}\n    c=${3% *}\n    if [ $(( a == b )) -eq $(( c )) ]\n    then\n\
    \        x=${a}\n    else\n        x=${b}\n    fi\n    echo \"${x}\"", "    if\
    \ [[ $(($1%$2) == 0 && ($1%$3) == 0) ]]; then\n        # $1 is prime\n       \
    \ echo \"$3\"\n    else\n        # $1 is composite\n        echo \"$2\"\n    fi",
  "\t# check if argument 2 exists as an int\n\t[ \"${#2}\" -ne \"1\" ] && echo \"\
    ${#2} is not an integer\" && exit 1\n\t# check if argument 3 exists as an int\n\
    \t[ \"${#3}\" -ne \"1\" ] && echo \"${#3} is not an integer\" && exit 1\n\t# check\
    \ if argument 2 is prime\n\t[ \"${#2}\" -eq \"1\" ] && [ \"$(($2 % 2)) != 0\"\
    \ ] && return \"$2\"\n\t# check if argument 3 is prime\n\t[ \"${#3}\" -eq \"1\"\
    \ ] && [ \"$(($3 % 2)) != 0\" ] && return \"$3\"\n\t# check if both arguments\
    \ are prime\n\t[ \"$(($2 % 3)) -eq $(($3 % 3)) -a $(($2 % 3)) -ne 0 -a $(($3 %\
    \ 3)) -ne 0 ] && return \"$2\"\n\t# none of the above cases were true so just\
    \ return argument 1\n\treturn \"$1\"", "        local x y\n        # check if\
    \ $1 is prime\n        if (( $1 % $2 != 0 )); then\n                x=$3\n   \
    \     else\n                y=$3\n        fi\n        echo \"$x\"\n        echo\
    \ \"$y\"", "  if [ $(($1 % 2)) -eq 0 ]; then\n    echo \"$1\"\n  else\n    echo\
    \ \"$3\"\n  fi", "\tif (( $1 )) && [[ $(($1 % 2)) -eq 0 ]]\n\tthen\n\t\techo \"\
    $2\";\n\telse\n\t\techo \"$3\";\n\tfi", "\tlocal x\n\tlocal y\n\tx=$1\n\ty=$2\n\
    \t(( $3 == 0 )) || return 0\n\t(( $y != 0 )) || return $x\n\tlocal z\n\tz=$(($x*$x))\n\
    \t(( z <= $y )) && return $x\n\treturn $y", "    local x=$1\n    local y=$2\n\
    \    local n=$3\n    if [ $(($n % 2)) -eq 0 ]\n    then\n        if [ $(($n %\
    \ 3)) -eq 0 ]\n        then\n            echo \"$x\"\n        else\n         \
    \   echo \"$y\"\n        fi\n    else\n        echo \"$y\"\n    fi", "\tx=\"$1\"\
    \n\ty=\"$2\"\n\tz=\"$3\"\n\tif [ $x -eq $y ] || [ $x -eq $z ] || [ $y -eq $z ];\
    \ then\n\t\techo \"$x\"\n\telse\n\t\techo \"$y\"\n\tfi", "  x=$1\n  y=$2\n  i=$3\n\
    \  if [ $i -eq 3 ]; then\n    echo $x\n  else\n    echo $y\n  fi", "    if [ $(($1\
    \ % $2)) -eq $((($1 % $3) == 0)) ] ; then\n        echo $2\n    else\n       \
    \ echo $3\n    fi", "    if [ $(($1 % $2)) == 0 ]; then\n        echo $3\n   \
    \ else\n        echo $2\n    fi", "  local n=$1\n  local x=$2\n  local y=$3\n\
    \  local result\n\n  if [ $n -eq $x -o $n -eq $y ]; then\n     result=$n\n  else\n\
    \     result=$x\n  fi\n\n  return $result", "\tif [[ $(($1 & 1)) == 0 ]]; then\n\
    \t\tif [[ $(($3 & 1)) == 0 ]]; then\n\t\t\techo $2\n\t\telse\n\t\t\techo $3\n\t\
    \tfi\n\telse\n\t\techo $1 \n\tfi", "  if [ $(($1 % $2)) -eq 0 ] && [ $(($1 % $3))\
    \ -eq 0 ]; then\n    echo $2\n  elif [ $(($1 % $3)) -eq 0 ] && [ $(($1 % $2))\
    \ -eq 0 ]; then\n    echo $3\n  else\n    echo $1 \"is not a prime number\"\n\
    \  fi", "\t# Test if n is prime\n\tif [ $1 -eq 1 ]; then\n\t\texit 0\n\tfi\n\t\
    \n\t# Tests if n is divisible by any number from 2 to n-1\n\tfor i in `seq 2 $2`\n\
    \tdo\n\t\tif [ $i -eq $1 ]\n\t\tthen\n\t\t\texit 0\n\t\tfi\n\tdone\n\n\t# Tests\
    \ if n is divisible by any number from 3 to n-1\n\tfor j in `seq 3 $3`\n\tdo\n\
    \t\tif [ $j -eq $1 ]\n\t\tthen\n\t\t\texit 0\n\t\tfi\n\tdone\n\t\n\texit 0", " \
    \   if [[ $1 == $3 ]]\n    then\n        echo \"$2\"\n    else\n        echo \"\
    $1\"\n    fi", "  val1=${1};\n  val2=${2};\n  val3=${3};\n  \n  # Verify that\
    \ val1 and val2 are integers\n  if [[ -z ${val1} ]] || [[ -z ${val2} ]]; then\n\
    \    echo \"One of ${1} or ${2} must be a number\"\n    return 1;\n  fi\n  \n\
    \  # Verify that val3 is a prime number\n  if [[ ${val3} -lt 1 ]]; then\n    echo\
    \ \"${val3} is not prime number\"\n    return 1;\n  fi\n  \n  # Verify that val1\
    \ and val2 are prime\n  i=${val3};\n  while (( i <= ${val1} )); do\n    if ((\
    \ ${val1} % $i )); then\n      echo \"${val1} is not prime number\"\n      return\
    \ 1;\n    fi\n    ((i++))\n  done\n  \n  # Verify that val2 and val3 are prime\n\
    \  i=${val3};\n  while (( i <= ${val2} )); do\n    if (( ${val2} % $i )); then\n\
    \      echo \"${val2} is not prime number\"\n      return 1;\n    fi\n    ((i++))\n\
    \  done\n  \n  # Return value\n  echo \"${val1}\"", "  local x=\"$1\"\n  local\
    \ y=\"$2\"\n  local z=\"$3\"\n  \n  # Check if n is a prime number.\n  \n  if\
    \ [ $(( $(( $(div $x $y) )) )) -gt 0 ]; then\n    echo \"$x\"\n  else\n    echo\
    \ \"$y\"\n  fi", "   local N=$1\n   local X=$2\n   local Y=$3\n   local I=$((N-1))\n\
    \   for (( i=1; i<=${I}; i++ )); do\n      if [ $(echo \"${I} mod ${N} = 0\" |\
    \ bc -l) -eq 0 ]; then\n         echo ${X}\n         exit 0\n      else\n    \
    \     echo ${Y}\n         exit 1\n      fi\n   done\n   echo ${Y}", "  local n=$1\n\
    \  local x\n  local y\n  if (( $n % 2 )); then\n    echo \"$2\"\n  else\n    echo\
    \ \"$3\"\n  fi", "  x=$1\n  y=$2\n  z=$3\n\n  case \"$x\" in\n    $z) echo $y\n\
    \    ;;\n  esac", "    local x y n m\n\n    read x y n m <<< \"$1\"\n    (( n\
    \ >= m )) && return \"$3\"\n    (( n < m )) && return \"$2\"\n    return \"$x\"",
  "  if [ $(($1 % $2)) -eq 0 ] && [ $(($1 % $3)) -eq 0 ] ; then\n    echo \"$1\"\n\
    \  else\n    echo \"$2\"\n  fi", "    local x=$1; \n    local y=$2; \n    local\
    \ n=$3;\n    local flag=$(( $n > 0 ))\n    while [ $n -gt 0 ]; do\n        if\
    \ [ $flag -eq 0 ]; then\n            if [ $(( $n % $x )) -gt 0 ]; then\n     \
    \           flag=1\n                break;\n            fi\n        fi\n     \
    \   if [ $flag -eq 1 ]; then\n            if [ $(( $n % $y )) -gt 0 ]; then\n\
    \                flag=0\n                break;\n            fi\n        fi\n\
    \        (( n = n - 1 ))\n    done\n    echo $flag", "    if [ $(($1 % $2)) ==\
    \ 0 ]; then\n        echo \"$3\";\n    else\n        echo \"$2\";\n    fi", " \
    \   local n=$1\n    local x=$2\n    local y=$3\n    if [ $n -eq 1 ]\n    then\n\
    \        echo $1\n    else\n        echo $y\n    fi", "  x=$1\n  y=$2\n  n=$3\n\
    \  if [ $n -eq $1 ]\n  then\n    echo $x\n  else\n    echo $y\n  fi", "  local\
    \ n=$1\n  local a=$2\n  local b=$3\n\n  (( $n % 2 ))\n  (( $a % $b ))\n  (( $n\
    \ == $a ))\n  (( $n == $b ))\n  return $n", "  local x=\"$1\"\n  local y=\"$2\"\
    \n  local n=\"$3\"\n\n  (( n > 0 )) && {\n    if (( n == 2 )); then\n      echo\
    \ \"$x\"\n    else\n      echo \"$y\"\n    fi\n  }", "  x=$(($1 * $1 * $1))\n\
    \  y=$(($2 * $2 * $2))\n  if [ $(($x / $y)) -eq $1 ]; then\n    echo $3\n  else\n\
    \    echo $2\n  fi", '  if
  "    if [ $1 -eq 1 ]\n    then\n        echo \"$2\"\n    elif [ $1 -gt $3 ]\n  \
    \  then\n        echo \"$3\"\n    elif [ $1 -eq $3 ]\n    then\n        echo \"\
    $1\"\n    else\n        echo \"$2\"\n    fi", "\tlocal x=\"$1\"\n\tlocal y=\"\
    $2\"\n\tlocal z=\"$3\"\n\ttest \"$1\" -gt \"$z\" || return\n\ttest \"$1\" -eq\
    \ \"$z\" && return\n\ttest \"$2\" -gt \"$z\" || return\n\ttest \"$2\" -eq \"$z\"\
    \ && return\n\ttest \"$3\" -gt \"$z\" || return\n\ttest \"$3\" -eq \"$z\" && return\n\
    \tprintf \"$x\"", "\tx=$1\n\ty=$2\n\txor_val=0 # xor value will be stored in here\n\
    \twhile [ \"$x\" -lt \"$y\" ]\n\tdo\n\t\txor_val=$(($xor_val ^ $(( $x % $y ))));\n\
    \t\tx=$(( $x + 1 ));\n\tdone\n\techo \"$xor_val\"", "    if [ \"$1\" = \"2\" ];\
    \ then\n        echo \"$2\"\n    else\n        echo \"$3\"\n    fi", "  if [ $(($1\
    \ % $3) == 0) ]; then\n    return $2\n  else\n    return $3\n  fi", "\t\n\tlocal\
    \ n=$1\n\tlocal m=$2\n\tlocal l=$3\n\t\n\t(( n > m )) && return $l\n\t(( m < l\
    \ )) && return $n\n\t(( n == m )) && return $n\n\t(( n == l )) && return $m\n\t\
    (( n == m || n == l )) && return $n\n\t", "    if [[ $(($1%$2)) == 0 ]] ; then\n\
    \        echo $3\n    else\n        echo $2\n    fi", "\tx=$1\n\ty=$2\n\tz=$3\n\
    \t(( x > y ))", "\tif [ $1 -eq 2 ]; then\n\t\techo \"2\"\n\telse\n\t\techo \"\
    $2\"\n\tfi", "  # Make sure $1 and $2 are integers\n  test \"$1\" -eq \"$1\" ||\
    \ return 1\n  test \"$2\" -eq \"$2\" || return 1\n  \n  # If $3 is even, return\
    \ $2, otherwise $1.\n  # In bash, ${1:-0} evaluates to $1 if $1 is not set.\n\
    \  # Thus, ${3:-0} evaluates to $2 if $3 is even and \n  # $1 otherwise.\n  x=\"\
    ${1:-0}\"\n  y=\"${2:-0}\"\n  [[ ${3:-0} -eq 0 ]] && echo \"$x\" || echo \"$y\"",
  "    x=$1\n    y=$2\n    z=$3\n    if [ $(($x / $y)) == 0 ]; then\n        echo\
    \ \"$z\"\n    else\n        echo \"$y\"\n    fi", "    if [ $(($1 % $2)) -eq 0\
    \ ]; then\n        echo \"$3\"\n    else\n        echo \"$1\"\n    fi", "\tx=\"\
    $1\"\n\ty=\"$2\"\n\tz=\"$3\"\n\t\n\tlet x=\"${x}\"\n\tlet y=\"${y}\"\n\tlet z=\"\
    ${z}\"\n\t\n\tlet x=\"x+1\"\n\tlet y=\"${y}+1\"\n\tlet z=\"${z}+1\"\n\t\n\t# check\
    \ if y is prime \n\tlet z=\"${z}\"\n\tlet y=\"${y}\"\n\tlet x=\"${x}\"\n\tif [[\
    \ ${y} -eq 1 ]]; then\n\t\treturn ${z}\n\tfi\n\t# check if x is prime\n\tif [[\
    \ ${x} -eq 1 ]]; then\n\t\treturn ${z}\n\tfi\n\t\n\t# now check if z is prime\n\
    \tlet z=\"${z}\"\n\tlet y=\"${y}\"\n\tlet x=\"${x}\"\n\tlet x=\"${x}\"\n\tif [[\
    \ ${z} -eq 1 ]]; then\n\t\treturn ${z}\n\tfi\n\t# check if x is prime\n\tif [[\
    \ ${x} -eq 1 ]]; then\n\t\treturn ${z}\n\tfi\n\t\n\t# check if y is prime\n\t\
    if [[ ${y} -eq 1 ]]; then\n\t\treturn ${z}\n\tfi\n\t\n\t# now check if y is prime\n\
    \tlet y=\"${y}\"\n\tlet z=\"${z}\"\n\tlet x=\"${x}\"\n\tlet x=\"${x}\"\n\tif [[\
    \ ${z} -eq 1 ]]; then\n\t\treturn ${z}\n\tfi\n\t# check if x is prime\n\tif [[\
    \ ${x} -eq 1 ]]; then\n\t\treturn ${z}\n\tfi\n\t\n\t# now check if y is prime\n\
    \tlet y=\"${y}\"\n\tlet z=\"${z}\"\n\tlet x=\"${x}\"\n\tlet x=\"${x}\"\n\tif [[\
    \ ${z} -eq 1 ]]; then\n\t\treturn ${z}\n\tfi\n\t# check if x is prime\n\tif [[\
    \ ${x} -eq 1 ]]; then\n\t\treturn ${z}\n\tfi\n\t\n\t# now check if y is prime\n\
    \tlet y=\"${y}\"\n\tlet z=\"${z}\"\n\tlet x=\"${x}\"\n\tlet x=\"${x}\"\n\tif [[\
    \ ${z} -eq 1 ]]; then\n\t\treturn ${z}\n\tfi\n\t# check if x is prime\n\tif [[\
    \ ${x} -eq 1 ]]; then\n\t\treturn ${z}\n\tfi\n\t\n\t# now check if y is prime\n\
    \tlet y=\"${y}\"\n\t", "\tif [ $(expr $1 * $1 + $2 * $2) == $3 * $3 ]; then\n\t\
    \techo $3\n\telse\n\t\techo $2\n\tfi", "    if [[ $1 = $2 ]]; then\n        echo\
    \ $3\n    else\n        echo $2\n    fi", "  if [ \"$1\" -eq 1 ] && [ \"$2\" -eq\
    \ 1 ] && [ \"$3\" -eq 1 ] && [ \"$1\" -gt \"$3\" ]; then\n    echo \"$3\"\n  else\n\
    \    echo \"$1\"\n  fi", "  if [ $(( $(expr $1 % $2 )) -ne 0 ] || [ $(( $(expr\
    \ $1 % $3 )) -ne 0 ]); then\n    echo $1\n  else\n    echo $2\n  fi", "\tx=\"\
    $1\"\n\ty=\"$2\"\n\tz=\"$3\"\n\tif [ $(is_prime \"$x\") ]; then\n\t\techo \"$x\"\
    \n\telse\n\t\techo \"$y\"\n\tfi", "  if [ -z \"$3\" ] || [ $1 = $3 ]; then\n \
    \   echo $1\n  else\n    echo $2\n  fi", "  if (($1 % $1) == 0) {\n    if (($1\
    \ % $2) == 0) {\n      if (($1 % $3) == 0) {\n        echo $3\n      else\n  \
    \      echo $2\n      fi\n    else\n      echo $3\n    fi\n  else\n    echo $3\n\
    \  fi", "    local x=$1\n    local y=$2\n    local z=$3\n    if [ $x -eq $y ]\
    \ || [ $x -eq $z ] ; then\n        echo \"$x\"\n    else\n        echo \"$y\"\n\
    \    fi", "    local x=$1; local y=$2\n    local z=$3\n    local xn=$(echo \"\
    $x\" | bc)\n    local yn=$(echo \"$y\" | bc)\n    local zn=$(echo \"$z\" | bc)\n\
    \    if (( $yn == 0 )) ; then\n        echo \"$x\"\n    else\n        if (( $xn\
    \ == 1 )) ; then\n            echo \"$y\"\n        else\n            if (( $yn\
    \ == $zn )) ; then\n                echo \"$z\"\n            else\n          \
    \      echo \"$x\"\n            fi\n        fi\n    fi", "    if [ \"$1\" -eq\
    \ 1 ] || [ \"$2\" -eq 1 ] || [ \"$3\" -eq 1 ]; then\n        $3\n    else\n  \
    \      $2\n    fi", "  if [ $1 -eq $2 ] || [ $1 -eq $3 ]; then\n    return $1\n\
    \  else\n    return $3\n  fi", "  local x=\"$1\"\n  local y=\"$2\"\n  local z=\"\
    $3\"\n  if [[ $(( $(echo \"$x $y $z\" | sort | uniq | wc -l) )) -eq 1 ]]; then\n\
    \    echo \"$x\"\n  else\n    echo \"$y\"\n  fi", "  if [ $1 -eq 0 ]; then\n \
    \   echo $1\n  else\n    echo $3\n  fi", "\tif [ $1 -eq 1 ]; then\n\t\techo $2\n\
    \telse\n\t\techo $3\n\tfi", "  local n=$1\n  local x\n  local y\n  local z\n \
    \ if [ $n -eq 1 ]; then\n    z=$(printf \"%d\\n\" $n)\n    echo $z\n  elif [ $n\
    \ -eq 2 ]; then\n    z=$(printf \"%d\\n\" $n)\n    echo $z\n  elif [ $n -ge 3\
    \ ]; then\n    z=$(printf \"%d\\n\" $n)\n    y=$(printf \"%d\\n\" $(( $n - $z\
    \ )))\n    echo $y\n  elif [ $n -ge 2 ]; then\n    z=$(printf \"%d\\n\" $n)\n\
    \    x=$(printf \"%d\\n\" $(( $n - $z )))\n    echo $x\n  else\n    echo $n\n\
    \  fi", "    if [ \"$1\" -eq \"$2\" ]; then \n        if [ \"$1\" -eq \"$3\" ];\
    \ then \n            echo \"$3\"\n        else \n            echo \"$2\"\n   \
    \     fi\n    else \n        if [ \"$2\" -eq \"$3\" ]; then \n            echo\
    \ \"$1\"\n        else \n            echo \"$2\"\n        fi\n    fi", "  local\
    \ a b\n  (( a=$2 ))\n  (( b=$3 ))\n  (( x=\"${a:$a:0}\" ))\n  (( y=\"${b:$b:0}\"\
    \ ))\n  if (( x<y )); then\n    x\n  else\n    y\n  fi", "    local x=\"$1\"\n\
    \    local y=\"$2\"\n    local z=\"$3\"\n    local i\n    for i in $(seq $(( $z\
    \ / 2 )) $z); do\n        local w=\"$i\"\n        local e\n        e=$(( $i *\
    \ $i + $i * $i + $i * $i ))\n        while [ $w -le $(( $x * $x )) ] && [ $e -le\
    \ $(( $y * $y )) ]; do\n            [ $w -le $z ] && [ $e -le $z ] && echo \"\
    $x\" && return\n            w=$(( $w * $i - $e * $i ))\n            e=$(( $e *\
    \ $i + $i * $i ))\n        done\n    done\n    echo \"$y\"", "    if [ $(($1 %\
    \ 2)) -eq $1 ]; then\n        echo $2\n    elif [ $(($1 % 3)) -eq $1 ]; then\n\
    \        echo $3\n    else\n        echo $1;\n    fi;", "  local n=$1\n  local\
    \ x=$2\n  local y=$3\n  if [ $n -eq $x ]; then\n    return $y\n  else\n    return\
    \ $x\n  fi", "  local n=$1\n  local x\n  local y\n  \n  if [ $(( n % 2 != 0 ))\
    \ == 0 ]; then\n    x=$2\n  else\n    x=$3\n  fi\n  \n  if [ $(( n % 3 != 0 ))\
    \ == 0 ]; then\n    y=$2\n  else\n    y=$3\n  fi\n  \n  if [ $(( n != x )) ==\
    \ 0 ]; then\n    echo $1\n  else\n    echo $y\n  fi", "    local n=$1\n    local\
    \ x=0\n    local y=0\n    # Check if n is prime\n    if [ $n -le 1 ]; then\n \
    \       x=$2\n        y=$3\n    else\n        local j=$(( $n / 2 ))\n        while\
    \ [ $j -le $(( $n - 1 )) ]; do\n            if [ $(($n % $j)) -eq 0 ]; then\n\
    \                x=$2\n                y=$3\n                break\n         \
    \   fi\n            j=$(( $j + 1 ))\n        done\n    fi\n    echo $x", "   \
    \ local i y\n    (( $# == 3 )) && { local i=\"$1\"; shift; y=\"$1\"; shift; }\n\
    \    # A prime number is a natural number greater than 1 and divisible by all\
    \ positive integers \n    for (( i = 0; i < $(($1/2)); i++ )) && [ \"$i\" -ne\
    \ 1 ]\n    do \n        [ \"$(($i%$2))\" -eq 0 ] && { echo \"$y\"; break; }\n\
    \    done\n    return \"$y\"", "  # Check if n is a prime number\n  local n=$1\n\
    \  if (( ${n:0:1} > 9 )); then\n    if [[ $(( ${n:0:1} % 2 )) -eq 0 ]]; then\n\
    \      echo \"$2\"\n      return\n    fi\n  fi\n\n  # Check if n is a prime number\n\
    \  local n=$1\n  if (( ${n:0:1} < 9 )); then\n    if [[ $(( ${n:0:1} % 3 )) -eq\
    \ 0 ]]; then\n      echo \"$3\"\n      return\n    fi\n  fi", "\tlocal -i x=$1;\
    \ local -i y=$2;\n\tif [ $x -eq 0 -o $y -eq 0 ]; then\n\t\treturn 0;\n\tfi\n\t\
    if [ $(($x % $y)) -ne 0 ]; then\n\t\treturn $y;\n\tfi\n\treturn $x;", '    echo
    $(( $1 )) || echo $(( $3 ))', "  x=$1; y=$2\n  if [ $(($x % $3)) -eq $(($x % $y))\
    \ ]\n  then\n    echo \"$3\"\n  else\n    echo \"$y\"\n  fi", "\tlocal x y n \n\
    \tx=\"$1\"\n\ty=\"$2\"\n\tn=\"$3\"\n\tif [[ \"$x\" -le \"$n\" ]] && [[ \"$n\"\
    \ -le \"$y\" ]];then\n\t\treturn \"$x\"\n\telse\n\t\treturn \"$y\"\n\tfi", "\t\
    [ \"$1\" -gt \"$3\" ] && echo \"$2\" || echo \"$1\"", "   local n=$1\n   local\
    \ x=$2\n   local y=$3\n   if [[ $n == $x ]]; then\n      return $y\n   else\n\
    \      return $x\n   fi", "  x=$1\n  y=$2\n  z=$3\n  if [ `echo \"$x $y $z\" |\
    \ grep \"1\"` ]; then\n    echo $x\n  else\n    echo $y\n  fi", "\t# Test if both\
    \ numbers are prime.\n\tif [[ $(($(($(( $(( $1 * $1) )) + $2))) == $(( $(($((\
    \ $3 * $3)) + $2)) )) )\n\tthen\n\t\t# If first number is prime, return second\
    \ number.\n\t\techo $2\n\telse\n\t\t# If first number is not prime, return first\
    \ number.\n\t\techo $1\n\tfi", "\tlocal x=$1\n\tlocal y=$2\n\tlocal z=$3\n\tif\
    \ [ \"$x\" -gt \"$y\" ] || [ \"$y\" -gt \"$z\" ]; then\n\t\tx=\"X\"\n\telse\n\t\
    \ty=\"Y\"\n\tfi\n\techo \"$x\"", "\t# Assumptions\n\t# * $1 is a string\n\t# *\
    \ $2 is a string\n\t# * $3 is a string\n\t# * $1 is non empty\n\t# * $2 is non\
    \ empty\n\t# * $3 is non empty\n\t# * $3 is a number\n\t# * $1 and $2 are primes\n\
    \t# * $1 is not divisible by $2\n\t# * $1 and $2 are not equal\n\t# * $1 is not\
    \ divisible by $3\n\t# * $2 and $3 are equal\n\t# * $2 is not divisible by $3\n\
    \t# * $3 is a prime number\n\t# * $3 is not a prime number\n\n\t# Check assumptions\n\
    \t# * $1 is a number\n\t# * $2 is a number\n\t# * $3 is a number\n\tif [[ -z \"\
    $1\" ]]; then\n\t\treturn 1\n\tfi\n\tif [[ -z \"$2\" ]]; then\n\t\treturn 2\n\t\
    fi\n\tif [[ -z \"$3\" ]]; then\n\t\treturn 2\n\tfi\n\tif [[ -z \"$1\" ]]; then\n\
    \t\treturn 3\n\tfi\n\tif [[ -z \"$2\" ]]; then\n\t\treturn 3\n\tfi\n\tif [[ -z\
    \ \"$3\" ]]; then\n\t\treturn 3\n\tfi\n\n\t# Check assumptions again\n\t# * $1\
    \ is non empty\n\t# * $2 is non empty\n\t# * $3 is non empty\n\t# * $1 is a number\n\
    \t# * $1 and $2 are primes\n\t# * $1 is not divisible by $2\n\t# * $1 and $2 are\
    \ not equal\n\t# * $1 is not divisible by $3\n\t# * $2 and $3 are equal\n\t# *\
    \ $2 is not divisible by $3\n\t# * $3 is a prime number\n\t# * $3 is not a prime\
    \ number\n\t# * $1 and $2 are not divisible by $3\n\n\tx=\"$1\"\n\ty=\"$2\"\n\t\
    z=\"$3\"\n\tif (( x == y )); then\n\t\treturn \"$z\"\n\tfi\n\tif (( y == x ));\
    \ then\n\t\treturn \"$z\"\n\tfi\n\tif (( ( x == y ) || ( x == z ) || ( y == z\
    \ ) )) ; then\n\t\treturn \"$z\"\n\tfi\n\n\t# $1 is divisible by $2\n\t# $1 is\
    \ not divisible by $2\n\t# $2 is not divisible by $3\n\t# $1 and $2 are not divisible\
    \ by $3\n\tif (( $x % $2 )); then\n\t\treturn \"$z\"\n\tfi\n\tif (( $y % ", "\t\
    local x=\"$1\"\n\tlocal y=\"$2\"\n\tlocal z=\"$3\"\n\tif (( $(echo \"${x} > ${y}\"\
    \ | grep -Ev \"[[:space:]]\") )); then\n\t\techo \"${z}\"\n\telse\n\t\techo \"\
    ${y}\"\n\tfi", "\techo $(( $(($(($(( $1 & 3 )) + ($1 & 7)) + ($1 & 15)) + ($1\
    \ & 31)) ))\n\techo $(($(($(($(( $2 & 3 )) + ($2 & 7)) + ($2 & 15)) + ($2 & 31))\
    \ ))", "    if [ $(($1 / 2)) -eq 0 ]; then\n        $2\n    elif [ $(($1 / 2))\
    \ -eq 1 ]; then\n        $3\n    elif [ ($1 % $2) -eq 0 ]; then\n        $3\n\
    \    elif [ ($1 % $2) -eq 1 ]; then\n        $2\n    else\n        echo \"n is\
    \ neither a prime number nor a multiple of n\"\n    fi", "\t\n\tx_value=$2\n\t\
    y_value=$3\n\t\n\twhile [ $x_value -lt $y_value ]\n\tdo\n\t\tx_value=$(( $x_value\
    \ + 1 ))\n\tdone\n\t\n\tif [ $x_value = $y_value ]\n\tthen\n\t\techo \"$x_value\"\
    \n\telse\n\t\techo \"$y_value\"\n\tfi", "\t[ $(($1 % $2)) -eq 0 ] && {\n\t\techo\
    \ $3;\n\t}\n\t[ $(($1 % $3)) -eq 0 ] && {\n\t\techo $2;\n\t}\n\t[ $(($2 % $3))\
    \ -eq 0 ] && {\n\t\techo $1;\n\t}", "    x=\"$1\"\n    case \"$x\" in\n      \
    \  [1234567890]) y=\"$2\";;\n        [9876543210]) y=\"$3\";;\n        *)\n  \
    \          # default value is an empty string\n            y=\"\"\n          \
    \  ;;\n    esac\n    echo \"$y\"", "\tif [ \"$1\" -eq \"$2\" ] || [ \"$1\" -eq\
    \ \"$3\" ]; then\n\t\tif [ \"$1\" -eq \"1\" ]; then\n\t\t\tif [ \"$2\" -eq \"\
    0\" ]; then\n\t\t\t\treturn \"$3\"\n\t\t\telse\n\t\t\t\treturn \"$2\"\n\t\t\t\
    fi\n\t\telse\n\t\t\tif [ \"$2\" -eq \"0\" ]; then\n\t\t\t\treturn \"$1\"\n\t\t\
    \telse\n\t\t\t\treturn \"$3\"\n\t\t\tfi\n\t\tfi\n\telse\n\t\treturn \"$1\"\n\t\
    fi", "    if [ $(($1 % 2)) == 0 ];then\n        echo \"$2\"\n    else\n      \
    \  echo \"$1\"\n    fi", "\tlocal x=\"$1\"\n\tlocal y=\"$2\"\n\tlocal z=\"$3\"\
    \n\tif [[ $(( $(is_prime \"$x\") )) -eq 0 ]] ; then\n\t\treturn \"$y\"\n\telse\n\
    \t\treturn \"$z\"\n\tfi", "    local x y n\n\n    [[ \"$#\" -lt 3 ]] && return\
    \ 1\n    \n    x=$(($1%$3))\n    n=$(($1%$2))\n    y=$(($1%$2))\n    for i in\
    \ {3..$n}\n    do\n        x=$((x%$2))\n        y=$((y%$3))\n    done\n    \n\
    \    echo \"$y\"", "  local n=$1\n  local a=$2\n  local b=$3\n  local result=$(\n\
    \    # Check that $n is an integer\n    [ \"$n\" == \\( -* \\) ] && echo \"$n\"\
    \ || { echo \"$n is not an integer.\"; exit 1; }\n    # Check that $a is an integer\n\
    \    [ \"$a\" == \\( -* \\) ] && echo \"$a\" || { echo \"$a is not an integer.\"\
    ; exit 1; }\n    # Check that $b is an integer\n    [ \"$b\" == \\( -* \\) ] &&\
    \ echo \"$b\" || { echo \"$b is not an integer.\"; exit 1; }\n    # Check that\
    \ $n is prime (by checking the GCD is 1)\n    [ \"$n\" == \\( -* \\) ] && echo\
    \ \"$n\" || { echo \"$n is not prime.\"; exit 1; }\n    # Check that $a is prime\
    \ (by checking the GCD is 1)\n    [ \"$a\" == \\( -* \\) ] && echo \"$a\" || {\
    \ echo \"$a is not prime.\"; exit 1; }\n    # Check that $b is prime (by checking\
    \ the GCD is 1)\n    [ \"$b\" == \\( -* \\) ] && echo \"$b\" || { echo \"$b is\
    \ not prime.\"; exit 1; }\n    # Check that $a is greater than $b\n    [ \"$a\"\
    \ -gt \"$b\" ] || { echo \"$a should be greater than $b.\"; exit 1; }\n    # Check\
    \ that $a is less than $n\n    [ \"$a\" -lt \"$n\" ] || { echo \"$a should be\
    \ less than $n.\"; exit 1; }\n    # Check that $b is greater than $n\n    [ \"\
    $b\" -gt \"$n\" ] || { echo \"$b should be greater than $n.\"; exit 1; }\n   \
    \ # Check that $b is less than $a\n    [ \"$b\" -lt \"$a\" ] || { echo \"$b should\
    \ be less than $a.\"; exit 1; }\n    # Check that $n is equal to the GCD of $a\
    \ and $b\n    [ $n -eq $(( a % b )) ] || { echo \"$n should be equal to the GCD\
    \ of $a and $b\"; exit 1; }\n    # Check that $a is less than or equal to the\
    \ GCD of $a and $b\n    [ $a -le $(( a % b )) ] || { echo \"$a should be less\
    \ than or equal to the GCD of $a and $b\"; exit 1; }\n    # Check that $b is less\
    \ than or equal to the GCD of $a and $b\n    [ $b -le $(( a % b )) ] || { echo\
    \ \"$b should be less than or equal to the GCD of $a and $b\"; exit 1; }\n   \
    \ # Check that $n is equal to the GCD of $b and $a\n    ", "  if [ $(( $1 % $2\
    \ )) -gt 0 ]; then\n    $3\n  else\n    $1\n  fi", "\tx=\"$1\"\n\ty=\"$2\"\n\t\
    z=\"$3\"\n\n\tnumber=$((x%y))\n\n\tif [ $number -eq 0 ]; then\n\t\techo \"$z\"\
    \n\telse\n\t\techo \"$y\"\n\tfi", "    local x=$1\n    local y=$2\n    local z=$3\n\
    \    if [ $(( $x % $z )) == 0 ]; then\n        echo \"$3\"\n    else\n       \
    \ echo \"$x\"\n    fi", "    if [ $(($1 % $2)) == 0 ]\n    then\n        echo\
    \ \"$3\"\n    else\n        echo \"$2\"\n    fi", " local number=$1\n local other=$2\n\
    \ local third=$3\n local result\n \n result=$((number))\n \n while (( $number\
    \ > 1 )); do\n  ((number > 3)) || break\n  ((number % 2)) && result=$(($result+$third))\n\
    \  ((number % 3)) && result=$(($result+$third))\n  ((number % 5)) && result=$(($result+$third))\n\
    \  ((number % 7)) && result=$(($result+$third))\n done\n \n echo $result", " \
    \ x=$1\n  y=$2\n  z=$3\n  echo $x | xargs -I{} sh -c \\\n  \"[[ $(($x%$3)) -eq\
    \ 0 ]] && echo \\\"$x\\\" || echo \\\"$y\\\"\"", "  if (( $1 )); then\n    echo\
    \ \"$3\"\n  else\n    echo \"$2\"\n  fi", "  local x=\"$1\"\n  local y=\"$2\"\n\
    \  local z=\"$3\"\n  if [[ -z \"$x\" ]] || [[ -z \"$y\" ]] || [[ -z \"$z\" ]];\
    \ then\n    return\n  fi\n  ((x>y)) || { echo \"$z\"; return; }\n  ((y>x)) ||\
    \ { echo \"$z\"; return; }\n  ((z>y)) || { echo \"$z\"; return; }\n  ((x%y==0))\
    \ || (echo \"$x\") || (echo \"$y\")", "    x=$(echo \"$1\" | grep -c -E '^[0-9]+$')\n\
    \    y=$(echo \"$3\" | grep -c -E '^[0-9]+$')\n    if [ \"$x\" -eq \"$y\" ]; then\n\
    \        echo \"$2\"\n    else\n        echo \"$1\"\n    fi", "   [[ -z $1 ]]\
    \ && echo \"ERROR: Missing first argument ($1)\" && return 1\n   [[ -z $2 ]] &&\
    \ echo \"ERROR: Missing second argument ($2)\" && return 1\n   [[ -z $3 ]] &&\
    \ echo \"ERROR: Missing third argument ($3)\" && return 1\n   \n   a=$1\n   b=$2\n\
    \   c=$3\n   \n   d=$(($c%$a))\n   \n   if [[ \"$d\" == \"1\" ]]; then\n     \
    \ echo \"$c\"\n   else\n      echo \"$b\"\n   fi", "    local x=$1\n    local\
    \ y=$2\n    local z=$3\n    if [ $x -eq 1 -o $y -eq 1 -o $z -eq 1 ]; then\n  \
    \      echo $x\n    else\n        echo $z\n    fi", "  x=$1\n  y=$2\n  n=$3\n\
    \  if [ $(( n % x )) -eq 0 ] ; then\n    return $y\n  else\n    return $x\n  fi",
  "    local x=\"$1\"\n    local y=\"$2\"\n    local z=\"$3\"\n\n    if [ $x -le $y\
    \ ] || [ $x -le $z ]\n    then\n        echo $x\n    else\n        echo $y\n \
    \   fi", "  if [ $(($1 % 2)) -ne 0 ]; then\n    echo $1\n  else\n    echo $3\n\
    \  fi", " local x y\n x=$1\n y=$2\n if (( \"$x\" == 3 )); then\n  return $3\n\
    \ elif (( \"$x\" > \"$y\" ));then\n  x=$y\n  y=$x\n fi\n let \"x=$x + $y - 1\"\
    \n if (( \"$x\" > \"$y\" ));then\n  x=$y\n fi\n if (( \"$x\" == 1 ));then\n  return\
    \ $y\n else\n  return $x\n fi", "\tx=\"$1\"\n\ty=\"$2\"\n\tz=\"$3\"\n\ti=3\n\t\
    j=2\n\twhile [ $j -le $z ]; do\n\t\tif [ $x -eq $i ]; then\n\t\t\techo $1\n\t\t\
    \treturn\n\t\tfi\n\t\ti=$((i+1))\n\t\tj=$((j+1))\n\tdone", "\tx=$(( $1 == $3 ))\n\
    \ty=$(( $2 == $3 ))\n\tif [ \"$x\" == \"true\" ]; then \n\t\techo $(($3))\n\t\
    else\n\t\techo $(($1))\n\tfi", "    local n=$1\n    local x=$2\n    local y=$3\n\
    \n    if [ $n -eq 1 ]; then\n        echo \"$x\"\n    elif (( n % 2 == 0 )); then\n\
    \        echo \"$y\"\n    else\n        echo \"$x\"\n    fi", "  local i x\n \
    \ x=$2;\n  for ((i = 3; $((i - 1)) > 1 ; i--)); do\n    if (($1 == $i)) ; then\n\
    \       echo \"$x\"\n       break\n    fi\n  done\n  if (($i == $1)) ; then\n\
    \     echo \"$3\"\n     break\n  fi", "\tif [ $1 -eq 1 ] ; then\n\t\tif [ $1 -eq\
    \ $3 ] ; then\n\t\t\techo \"$2\"\n\t\telse\n\t\t\techo \"$3\"\n\t\tfi\n\telse\n\
    \t\tif [ $1 -eq $2 ] ; then\n\t\t\techo \"$1\"\n\t\telse\n\t\t\techo \"$3\"\n\t\
    \tfi\n\tfi", "   local x=\"${1}\"\n   local y=\"${2}\"\n   local z=\"${3}\"\n\
    \   \n   if is_prime \"$x\"; then\n      return \"$x\"\n   else\n      return\
    \ \"$y\"\n   fi", "\tif [ $1 -eq 1 ] && [ $2 -eq 1 ] && [ $3 -eq 1 ]; then\n\t\
    \techo \"1\"\n\telse\n\t\techo \"$3\"\n\tfi", "\ttest $(($1 % $2)) != 0 && $(($2\
    \ % $3)) != 0;\n\tif [ $? -ne 0 ]\n\tthen\n\t\techo \"$3\";\n\telse\n\t\techo\
    \ \"$1\";\n\tfi", "  local x=\"$1\"\n  local y=\"$2\"\n  local z=\"$3\"\n\n  local\
    \ prime=\"false\"\n  local number=0\n\n  while [ \"$prime\" == \"false\" ] \n\
    \  do\n    if (( \"$number\" == \"$z\" ))\n    then\n      prime=\"true\"\n  \
    \    break\n    fi\n\n    number=$(( $number + 1 ))\n\n    if (( ( \"$number\"\
    \ > \"7\" ))\n        && ( ( \"$number\" < \"20\" ))\n        && ( ( \"$number\"\
    \ > \"30\" ))\n        && ( ( \"$number\" < \"50\" ))\n        && ( ( \"$number\"\
    \ > \"80\" ))\n        && ( ( \"$number\" < \"100\" ))\n        && ( ( \"$number\"\
    \ > \"200\" ))\n        && ( ( \"$number\" < \"500\" ))\n        && ( ( \"$number\"\
    \ > \"800\" ))\n        && ( ( \"$number\" < \"1000\" ))\n        && ( ( \"$number\"\
    \ > \"2000\" ))\n        && ( ( \"$number\" < \"5000\" ))\n        && ( ( \"$number\"\
    \ > \"8000\" ))\n        && ( ( \"$number\" < \"10000\" ))\n        && ( ( \"\
    $number\" > \"20000\" ))\n        && ( ( \"$number\" < \"50000\" ))\n        &&\
    \ ( ( \"$number\" > \"80000\" ))\n        && ( ( \"$number\" < \"100000\" ))\n\
    \        && ( ( \"$number\" > \"200000\" ))\n        && ( ( \"$number\" < \"500000\"\
    \ ))\n        && ( ( \"$number\" > \"800000\" ))\n        && ( ( \"$number\" <\
    \ \"1000000\" ))\n        && ( ( \"$number\" > \"2000000\" ))\n        && ( (\
    \ \"$number\" < \"5000000\" ))\n        && ( ( \"$number\" > \"8000000\" ))\n\
    \        && ( ( \"$number\" < \"10000000\" ))\n        && ( ( \"$number\" > \"\
    20000000\" ))\n        && ( ( \"$number\" < \"50000000\" ))\n        && ( ( \"\
    $number\" > \"80000000\" ))\n        && ( ( \"$number\" < \"100000000\" ))\n \
    \       && ( ( \"$number\" > \"200000000\" ))\n        && ( ( \"$number\" < \"\
    500000000\" ))\n        && ( ( \"$number\" > \"800000000\" ))\n        && ( (\
    \ \"$number\" < \"1000000000\" ))\n        && ( ( \"$number\" > \"2000000000\"\
    \ ))\n", "    local n=$1\n    local x=$2\n    local y=$3\n    local ret=\"$(\n\
    \        if [[ $n -eq 0 ]]; then\n            echo $x\n        elif [[ $((n%2))\
    \ -eq 0 ]]; then\n            echo $x\n        elif [[ $((n%3)) -eq 0 ]]; then\n\
    \            echo $y\n        else\n            echo $y\n        fi\n    )\"\n\
    \    echo \"$ret\"", "\tx=$($1 %($2 | xargs -I % echo \"% %% $3\" | awk '{print\
    \ $1}'))\n\ty=$($1 %($2 | xargs -I % echo \"% %% $3\" | awk '{print $2}'))\n\n\
    \tif [ -z \"$x\" -a -z \"$y\" ]; then\n\t\techo \"$x\"\n\telse\n\t\techo \"$y\"\
    \n\tfi", "  local n=\"$1\"\n  local m=\"$2\"\n  local l=\"$3\"\n  if [ $(echo\
    \ \"$n mod $l\" | bc -l) -eq 0 ]; then\n    echo $m\n  else\n    echo $l\n  fi",
  "  local x=$1\n  local y=$2\n  local z=$3\n  if [ $x -eq $y ]; then\n    return\
    \ $x\n  else\n    return $y\n  fi", "  x=$1; y=$2;\n  i=1; prime=\"\";\n  while\
    \ [ $i -le $3 ]; do\n    prime=\"$prime $x\";\n    (( i++ ))\n    (( x++ ))\n\
    \  done\n  if [[ \"$prime\" =~ \"^[23]\" ]]; then\n    return $y\n  else\n   \
    \ return $x\n  fi", "  \n  local n=$1\n  local a=$2\n  local b=$3\n  \n  local\
    \ x \n  local y\n\n  # Prime check\n  if [ $n -gt 0 ] && [ $n -le 1 ]; then\n\
    \    # Check if n is divisible by 2 and print appropriate message\n    if [ $(($n\
    \ % 2)) -eq 1 ]; then\n      echo \"$n is not prime\"\n      exit 2\n    fi\n\
    \  fi\n\n  # Test the prime of b\n  if [ $(($n % $a)) -gt 0 ]; then\n    if [\
    \ $(( $(echo \"$n / $a\" | bc -l) )) -gt $b ]; then\n      x=\"$a\"\n    else\n\
    \      x=\"$n\"\n    fi\n  else\n    if [ $(($n % $b)) -gt 0 ]; then\n      x=\"\
    $b\"\n    else\n      x=\"$n\"\n    fi\n  fi\n\n  # Return the value of x if prime\
    \ or y if not\n  if [ $(( $(echo \"$n / $x\" | bc -l) )) -eq 0 ]; then\n    x=\"\
    $x\"\n  else\n    x=\"$y\"\n  fi\n\n  echo \"$x\"", "    if [ $1 -gt 0 ] && [\
    \ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        x=$(($1 / $3))\n        y=$(($1 %\
    \ $3))\n        if [ $x -gt 0 ] && [ $y -gt 0 ]; then\n            echo \"$3\"\
    \n        fi\n    fi", "  if [ $(($1 % 2)) -eq 0 ]; then\n    return $2\n  else\n\
    \    return $3\n  fi", "    local x=\"$1\"\n    local y=\"$2\"\n    local z=\"\
    $3\"\n    if [ \"$x\" -eq \"$y\" ] && [ \"$y\" -eq \"$z\" ]\n    then\n      \
    \  echo \"$x\"\n    elif [ \"$x\" -eq \"$y\" ] || [ \"$y\" -eq \"$z\" ]\n    then\n\
    \        echo \"$z\"\n    else\n        echo \"$y\"\n    fi", "    x=\"$1\"\n\
    \    y=\"$2\"\n    n=\"$3\"\n    # Loop to find out if n is a prime\n    while\
    \ [ $(( n % 2 )) -ne 0 ]; do\n        n=$(( n - 1 ))\n    done\n    echo $x \n\
    \    if [ $(( n % 3 )) -ne 0 ]; then\n        echo \"$y\"\n    else\n        echo\
    \ \"$x\"\n    fi", "  if (( ($1 >0) && ($2 >0) && ($3 >0) )); then\n    if ((\
    \ $(($1 % $2)) == 0 ))\n    then\n      echo \"$3\"\n    else\n      echo \"$1\"\
    \n    fi\n  else\n    echo \"$3\"\n  fi", "    local x=\"$1\"\n    local y=\"\
    $2\"\n    local z=\"$3\"\n\n    if [ \"$x\" -gt \"$y\" ]; then\n        echo \"\
    $x\"\n    elif [ \"$y\" -gt \"$z\" ]; then\n        echo \"$y\"\n    else\n  \
    \      echo \"$z\"\n    fi", "    case \"$1\" in\n        ${Y}) echo \"$3\";;\n\
    \        ${X}) echo \"$2\";;\n        *) echo \"$1\";;\n    esac", "  x=$1; y=$2\n\
    \  if [ $x -eq $y ]; then \n    echo $x\n  else\n    echo $y\n  fi", "    local\
    \ x=$1;\n    local y=$2;\n    local z=$3;\n    local result\n    if [ $x -eq $y\
    \ -a $x -eq $z -a $y -eq $z ]; then\n        result=$x\n    else\n        result=$y\n\
    \    fi\n    echo \"$result\"", "\tx=\"$1\"\n\ty=\"$2\"\n\tz=\"$3\"\n\n\tif [\
    \ $(( $x % $y )) -gt 0 ]\n\tthen\n\t\tx\n\telif [ $(( $x % $z )) -gt 0 ]\n\tthen\n\
    \t\ty\n\telse\n\t\tz\n\tfi", "  x=$1\n  y=$2\n  z=$3\n  if [ \"$x\" = \"$y\" ]\
    \ || [ \"$x\" = \"$z\" ] || [ \"$y\" = \"$z\" ]; then\n    echo \"$x\"\n  else\n\
    \    echo \"$y\"\n  fi", "  local n=$1\n  local y=$2\n  local z=$3\n  # Check\
    \ if n is a prime number\n  local x_or_y=$(echo $n | sed 's/\\(.\\)\\(.\\)\\(.\\\
    )/\\1 \\2 \\3/')\n  local isPrime=$(echo \"$(expr $(echo \"$x_or_y\" | tr ' '\
    \ '\\n' | sort | uniq | wc -l) - 1\" | bc)\n  if [ $isPrime -gt 0 ]; then\n  \
    \  echo \"$z\"\n  else\n    echo \"$y\"\n  fi", "    if (( $1 % $3 == 0 )); then\n\
    \        echo $3\n    else\n        echo $2\n    fi", "\tx=\"$1\"\n\ty=\"$2\"\n\
    \tn=\"$3\"\n\t# Test if n is a prime number\n\tprime_test=\"$(nix \"$n\" \"$x\"\
    \ \"$y\")\"\n\t\n\tif [ \"$prime_test\" == \"true\" ]\n\tthen\n\t\techo \"$y\"\
    \n\telse\n\t\techo \"$x\"\n\tfi", "    local x y\n    (( $# < 3 )) && return 0\n\
    \    x=\"$1\"\n    y=\"$2\"\n    local z\n\n    for (( z=1; z<=$3; z++ )); do\n\
    \        for (( y=2; $y<$z; y++ )); do\n            [ \"$z\" = \"$y\" ] && continue\n\
    \            (( z % $y == 0 )) && return $y\n        done\n    done\n    return\
    \ $x", "  if (( $1 == $2 )); then\n    if (( $1 == $3 )); then\n      echo \"\
    $2\"\n    else\n      echo \"$1\"\n    fi\n  else\n    echo \"$2\"\n  fi", "\t\
    # Test input values\n\tif [ ! $1 -eq 0 ]\n\tthen\n\t\tif [ $(( $1 % $2 )) -eq\
    \ 0 ]\n\t\tthen\n\t\t\techo \"$3\"\n\t\telse\n\t\t\techo \"$2\"\n\t\tfi\n\telse\n\
    \t\tif [ $(( $1 % $3 )) -eq 0 ]\n\t\tthen\n\t\t\techo \"$1\"\n\t\telse\n\t\t\t\
    echo \"$3\"\n\t\tfi\n\tfi", "\t# Check if n is a prime number\n\tif (( $(is_prime\
    \ $1) )); then\n\t\techo \"$3\"\n\telse\n\t\techo \"$2\"\n\tfi", "    local x=$1\n\
    \    local y=$2\n    local z=$3\n    if [ $x -eq 0 ]\n    then\n        x=\"1\"\
    \n    fi\n    if [ $y -eq 0 ]\n    then\n        y=\"1\"\n    fi\n    if [[ `echo\
    \ $x $y | wc -w` -ne 1 ]]\n    then\n        return 0\n    fi\n    for ((i=0;i<5;i++))\n\
    \    do\n        num=`echo $x $y | cut -d ' ' -f $i`\n        if [[ `echo $x $y\
    \ | wc -w` -eq 1 ]]\n        then\n            echo $num\n        else\n     \
    \       echo $z\n            break\n        fi\n    done", "\tx=$1\n\ty=$2\n\t\
    z=$3\n\t\n\t[ \"$x\" -ne \"1\" ] && { echo \"$x\" >&2; return 1; };\n\t[ \"$y\"\
    \ -ne \"1\" ] && { echo \"$y\" >&2; return 1; };\n\t[ \"$z\" -ne \"1\" ] && {\
    \ echo \"$z\" >&2; return 1; };\n\t\n\tif (( \"$y\" < \"$x\" ))\n\tthen\n\t\t\
    while [ \"$z\" -le \"$y\" ]\n\t\tdo\n\t\t\t(( z+=2 ))\n\t\t\tif [ $(( z % $x ))\
    \ -eq $x ]\n\t\t\tthen\n\t\t\t\tbreak;\n\t\t\tfi\n\t\tdone\n\telse\n\t\twhile\
    \ [ \"$z\" -le \"$x\" ]\n\t\tdo\n\t\t\t(( z+=2 ))\n\t\t\tif [ $(( z % $y )) -eq\
    \ $y ]\n\t\t\tthen\n\t\t\t\tbreak;\n\t\t\tfi\n\t\tdone\n\tfi\n\t\n\tif [ \"$z\"\
    \ -eq \"$y\" ]\n\tthen\n\t\techo \"$z\"\n\telse\n\t\techo \"$y\"\n\tfi", "   \
    \ local n=$1\n    local x=0\n    local y=0\n\n    if [ $n -eq $y ]; then\n   \
    \     echo \"$n\"\n    else\n        y=$(($n/$(($n-1))))\n        x=$(($n%$(($n-1))))\n\
    \    fi\n    echo \"$y\"", "        echo $1\n        if [ $1 -eq $2 -o $1 -eq\
    \ $3 -o $2 -eq $3 ]; then\n                echo $1\n        else\n           \
    \     echo $2\n        fi", "    local n=$1\n    local x=$2\n    local y=$3\n\
    \    if [ $n -eq $x ]\n    then\n        return $x\n    elif [ $n -eq $y ]\n \
    \   then\n        return $y\n    else\n        return $n\n    fi", "    local\
    \ n=${1}\n    local x=${2}\n    local y=${3}\n    if [ $n -gt 1 ] && [ $n -le\
    \ $((n+2)) ]; then\n        ((n--))\n        y=$((x*x))\n        ((n--))\n   \
    \     x=$((y*y))\n        if [ $n -eq 1 ]; then\n            x=$((x))\n      \
    \  fi\n    fi\n    echo \"$x\"", "\tif (($1 % 2) == 0) {\n\t\tif (($1 % $3) ==\
    \ 0) {\n\t\t\techo \"$2\";\n\t\t}\n\t\telse {\n\t\t\techo \"$2\";\n\t\t}\n\t}\n\
    \telse {\n\t\techo \"$2\";\n\t}", "    if [ $# -ne 3 ]; then\n        return 1\n\
    \    fi\n\n    if [ $(( $1 % $2 )) -eq 0 ]; then\n        echo $3\n    else\n\
    \        echo $2\n    fi", "  local n=$1\n  local x=$2\n  local y=$3\n  ((n ==\
    \ (x || y)) && echo $x || echo $y)", "    local x=\"$1\"\n    local y=\"$2\"\n\
    \    local z=\"$3\"\n    if (( \"$x\" < \"$y\" ))\n    then\n      echo \"$z\"\
    \n    else\n      echo \"$x\"\n    fi", "    local x=$1\n    local y=$2\n    local\
    \ z=$3\n    local fname=$1\n    local fcontent=$2\n    local ftype=$3\n    if\
    \ [ $ftype == \"int\" ]; then\n        local n=$1\n    fi\n    if [ $ftype ==\
    \ \"int\" ]; then\n        local n=$2\n    fi\n    if [ $ftype == \"int\" ]; then\n\
    \        local n=$3\n    fi\n    if [ $n -eq $x ]; then\n        echo $y\n   \
    \ elif [ $n -eq $y ]; then\n        echo $x\n    else\n        echo $z\n    fi",
  " x=\"$1\"\n y=\"$2\"\n z=\"$3\"\n n=$(( x>y ? x : y ))\n [ $(( n % z == 0 )) -gt\
    \ 0 ] && return $z || return $n", "  ((n=$1)\n   x=0\n   y=0\n   for ((i=3; i<=n;\
    \ i++)); do\n     ((x+=(( n % i == 0 ))) && ((y+=(( i == n ))))\n   done\n   echo\
    \ $((x>0 ? \"x\" : \"y\"))\n  )", "    local n=\"$1\"\n    local x=\"$2\"\n  \
    \  local y=\"$3\"\n    local p\n    if [ -z \"$n\" ] || [ -z \"$x\" ] || [ -z\
    \ \"$y\" ]; then\n        echo \"Invalid argument supplied\"\n        exit 1\n\
    \    fi\n    if [ \"$n\" -eq \"$x\" ]; then\n        echo \"$y\"\n    else\n \
    \       for (( i=1; i <= $(( n - 1 )); i++ )); do\n            p=\"$(($n % $i))\"\
    \n            if [ \"$p\" -eq \"0\" ]; then\n                echo \"$y\"\n   \
    \             break\n            fi\n        done\n    fi", "  x=\"$1\"\n  y=\"\
    $2\"\n  z=\"$3\"\n  if [ \"${x%$y}\" -eq 0 ]\n  then\n    echo \"$y\"\n  else\n\
    \    echo \"$x\"\n  fi", "  if [ \"`expr \"$1\" : '\\(.*\\)' `\" = \"$1\" ]; then\
    \ \n    echo $3\n  else \n    echo $2\n  fi", "\t# check whether the input is\
    \ valid or not\n\tif [ $(($1 % $2)) -eq $1 ]; then \n\t\techo \"$1\"\n\telse\n\
    \t\techo \"$3\"\n\tfi", "    local x=$1\n    local y=$2\n    local n=$3\n\n  \
    \  for i in $(seq 1 $((n/2))); do\n        x=${x:0:i}\n        y=${y:0:i}\n  \
    \      if [ $(($x%$n)) -eq 0 ]; then\n            x=$x\n            break\n  \
    \      fi\n    done\n    echo \"$x$y\"", "  local x y\n  if [ $# -ne 3 ]\n  then\n\
    \    echo \"USAGE: $(basename $0) n1 n2 n3\"\n    return 1\n  fi\n  x=$1\n  y=$2\n\
    \  if [ $x -eq $y ]\n  then\n    return $x\n  fi\n  for i in $(seq 1 $(( $2 )))\n\
    \  do\n    [ $(($i % ($x )) )) -ne 0 ]\n    if [ $? -eq 0 ]\n    then\n      echo\
    \ \"$3\"\n      return 0\n    fi\n  done\n  echo \"$y\"\n  return 1", "\tif [\
    \ $1 -eq 1 ]; then \n\t\ty=$2\n\telse\n\t\tx=$2\n\tfi\n\t\n\tif [ $x -eq 1 ];\
    \ then \n\t\tx=1\n\tfi\n\t\n\tj=2\n\t\n\twhile [ $j -le $3 ]; do\n\t\t\n\t\tif\
    \ [ $(( $x / $j )) -eq $x ]; then \n\t\t\treturn $j\n\t\tfi\n\t\tj=$(( $j + 1\
    \ ))\n\tdone\n\treturn $y", "    local n=$1\n    local b=$2\n    local c=$3\n\
    \    if [ $n -eq $b ] ; then\n        if [ $n -eq $c ] ; then\n            echo\
    \ $n\n        else\n            echo $c\n        fi\n    else\n        echo $b\n\
    \    fi", "\tx=$1\n\ty=$2\n\tz=$3\n\tif [[ $((x%y)) -ne 0 ]]; then\n\t\techo \"\
    $y\"\n\telse\n\t\techo \"$x\"\n\tfi", "\t[ \"$1\" = \"$2\" ] && [ \"$2\" = \"\
    $3\" ] && echo \"$1\" || echo \"$2\"", "    local x=$1; shift\n    local y=$1;\
    \ shift\n    local n=$1; shift\n    if [[ ${n} -eq 1 ]]\n    then \n        return\
    \ ${x}\n    else\n        return ${y}\n    fi", "  case $1 in\n    $(( $(is_prime\
    \ $1) == 0 ))\n      *) return $1;\n      ;;\n    $(( $(is_prime $1) == 1 ))\n\
    \      *) return $3;\n      ;;\n    *) \n      echo \"$1 is not prime\" >&2\n\
    \      ;;\n  esac", "  if [[ $1 -eq 1 ]] ; then\n    echo \"$2\"\n  elif [[ $1\
    \ -eq $3 ]] ; then\n    echo \"$2\"\n  else\n    echo \"$1\"\n  fi", "\tif [ $#\
    \ -eq 0 ]; then\n\t\techo \"Usage: $0 [integer] [integer] [integer]\"\n\t\techo\
    \ \"where integer is any integer\"\n\t\techo \"Example: $0 7 34 12\"\n\t\techo\
    \ \"See 'x_or_y --help' for further detail\"\n\t\treturn 1\n\tfi\n\tlocal x=\"\
    $1\"\n\tlocal y=\"$2\"\n\tlocal z=\"$3\"\n\tlocal n\n\tlocal r\n\t# check that\
    \ all are integers\n\tif [ \"$(echo \"$x $y $z\" | grep \"^-?[0-9]+$\")\" = \"\
    \" ]; then\n\t\techo \"$x $y $z must be integers\"\n\t\techo \"Example: $0 7 34\
    \ 12\"\n\t\techo \"See 'x_or_y --help' for further detail\"\n\t\treturn 1\n\t\
    fi\n\t(( $# == 3 )) && { echo \"$x $y $z must be integers\"; echo \"Example: $0\
    \ 7 34 12\"; echo \"See 'x_or_y --help' for further detail\"; return 1; }\n\t\
    # check that all are primes\n\tn=$(echo \"$x $y $z\" | awk '{ printf \"%d\\n\"\
    , $1 }')\n\tif [ \"$n\" -eq 0 ]; then\n\t\techo \"$x $y $z must not be 0\"\n\t\
    \techo \"Example: $0 7 34 12\"\n\t\techo \"See 'x_or_y --help' for further detail\"\
    \n\t\treturn 1\n\tfi\n\tn=$(echo \"$x $y $z\" | awk '{ printf \"%d\\n\", $1 }')\n\
    \t# for prime numbers we check only even divisors\n\tx=$(echo \"$x $y $z\" | awk\
    \ '{ printf \"%d\\n\", $1 }')\n\t(( $n % 2 == 1 )) && return 1\n\t# check all\
    \ prime factors\n\tr=3\n\twhile [ $r -lt $n ]; do\n\t\tx=$(echo \"$x $y $z\" |\
    \ awk '{ printf \"%d\\n\", $1 }')\n\t\t# if x is evenly divisible by r\n\t\t((\
    \ $x % $r == 0 )) && return 1\n\t\t# subtract r from x till it's evenly divisible\n\
    \t\tlet \"x -= $r; r\"\n\tdone\n\treturn 0", "  if [ $# -eq 2 ]\n  then\n    echo\
    \ \"$1\"\n  elif [ $# -eq 3 ]\n  then\n    [[ \"$1\" -eq \"$2\" ]] && echo \"\
    $3\" || echo \"$1\"\n  fi", "\tn=$1\n\ty=$2\n\tx=\"$3\"\n\t\n\t## We check x first\
    \ to avoid having a loop in there\n\t[ $x -eq \"$x\" ] || return $x\n\n\t## Make\
    \ sure the given n value is a number\n\t[ \"${n:0:1}\" -eq \"-\" ] || return $x\n\
    \n\t## Check if n is prime\n\tis_prime=\"$(nproc | grep -c \"[0-9] $n \")\"\n\t\
    \n\t## We return the value of y if n is not a prime number\n\tif [ $is_prime -eq\
    \ 0 ]\n\tthen\n\t\t[ $n -eq \"$y\" ] && return \"$y\" || return $x\n\telse\n\t\
    \t## We return n as x\n\t\treturn $n\n\tfi", "  echo \"$1\" \"$2\"\n  if(( $1\
    \ == $2 )); then\n    return 0\n  fi\n  if(( $3 == $2 )); then\n    return 1\n\
    \  fi\n  if(( $1 % $3 == 0 )); then\n    return 1\n  fi\n  if(( $3 % $1 == 0 ));\
    \ then\n    return 0\n  fi\n  if(( $1 % $3 == 0 )); then\n    return 1\n  fi\n\
    \  if(( $3 % $1 == 0 )); then\n    return 1\n  fi\n  echo \"$3\"\n  return 0",
  "  if [ $1 -ne 1 ] || [ $2 -ne 1 ] || [ $3 -ne 1 ]; then\n    echo \"Bad arguments\"\
    \ >&2\n    exit 1\n  fi\n  \n  # Set up variables\n  x=$1\n  y=$2\n  z=$3\n\n\
    \  # Loop through x numbers and see if we find one that divides\n  # into both\
    \ x and y\n  for i in $(seq 1 $x) ; do\n    if (( i % $z == 0 )); then\n     \
    \ echo \"$x divides evenly into $y and $z\"\n      return $z\n    fi\n  done\n\
    \n  echo \"$x does not divide evenly into $y and $z\"\n  return $y", "\tx=$1\n\
    \ty=$2\n\tz=$3\n\tif [ $(($(($x-$y)*$x)+$(($y-$z)*$y))) = $x ]; then\n\t\techo\
    \ \"$z\"\n\telse\n\t\techo \"$y\"\n\tfi", "    local x=$1\n    local y=$2\n  \
    \  local z=$3\n    if [ $x -eq $y ]; then\n        return $x\n    elif [ $x -eq\
    \ $z ]; then\n        return $y\n    else\n        return $z\n    fi", "  x=$1\n\
    \  y=$2\n  z=$3\n  \n  if [ $(($((x%$z)) > 0)) ]; then\n    echo $y\n  else\n\
    \    echo $x\n  fi", "  if [ $# -ne 3 ]; then\n    echo \"Usage: $(basename $0)\
    \ n m n\"\n    exit 1\n  fi\n  n=$1\n  m=$2\n  x=$3\n  y=$4\n  if [ $((n%m)) -ne\
    \ 0 ]; then\n    echo \"$n is not a prime number\"\n  else\n    echo \"$y\"\n\
    \  fi", "  local n=$1 x=\"y\" y=$2\n  for x in {1..n}\n  do\n    if (( n % $3\
    \ == 0 )); then\n      x=$3\n    fi\n    if (( n % $3 == 0 )); then\n      y=$3\n\
    \    fi\n  done\n  echo $x", "    local x y \n    [ $# -ne 3 ] && {\n        echo\
    \ \"Usage: $0 x y n\"\n        exit 1\n    } \n    local n=$1 \n    local a=$2\
    \ \n    local b=$3 \n    if [ $n = \"1\" ] || [ $n = \"2\" ] || [ $n = \"3\" ]\
    \ || [ $n = \"5\" ] || [ $n = \"7\" ] || [ $n = \"8\" ] || [ $n = \"11\" ] ||\
    \ [ $n = \"12\" ] || [ $n = \"13\" ] || [ $n = \"17\" ] || [ $n = \"19\" ] ||\
    \ [ $n = \"23\" ] || [ $n = \"29\" ] || [ $n = \"31\" ] || [ $n = \"37\" ] ||\
    \ [ $n = \"43\" ] || [ $n = \"47\" ] || [ $n = \"53\" ] || [ $n = \"59\" ] ||\
    \ [ $n = \"61\" ] || [ $n = \"67\" ] || [ $n = \"73\" ] || [ $n = \"79\" ] ||\
    \ [ $n = \"83\" ] || [ $n = \"89\" ] || [ $n = \"97\" ] || [ $n = \"101\"  ];\
    \ then\n        x=$n\n    else\n        y=$n \n    fi\n    echo \"$x\"\n    echo\
    \ \"$y\""]
stop_tokens:
- "\n}"
