language: sh
name: HumanEval_77_iscube
results:
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  iscub=1\n  n=$1\n\
    \  for (( i=0; i<n; i++ )); do\n    (( iscub*=3 ))\n    if (( iscub>9 )); then\n\
    \      iscub=1\n    fi\n  done\n  echo $iscub\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a b\n  a=$1\n\
    \  b=`echo \"$a * $a * $a * $a\" | bc`\n  echo \"$a x $a x $a x $a\" == \"$b\"\
    \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  val=$1\n  if [ \"\
    $val\" -eq 0 ]\n  then\n    return\n  fi\n  if [ \"$val\" -ge 1 ] && [ \"$val\"\
    \ -le 9 ]\n  then\n    for (( i=1; i<=val; i++ ))\n    do\n      if [ \"${i%9}\"\
    \ -eq 0 ]\n      then\n        return\n      fi\n    done\n  fi\n  return\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    cube=$1\n    test\
    \ $cube = 0 || return 1\n    cube=$((cube / 3))\n    test $cube < 1 || return\
    \ 1\n    cube=$((cube / 3))\n    test $cube < 0 || return 1\n    cube=$((cube\
    \ / 3))\n    test $cube < 3 || return 1\n    return 0\n}\n\ncandidate() {\n  \
    \  iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"\
    true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    echo \"$1\" |\
    \ awk '{\n        if (( NF > 1 && $1 == 0 ))\n            return 0;\n        if\
    \ (($1 > 1 && $1 == 0 || $1 == -$1))\n            return 1;\n        return 0;\n\
    \    }';\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'awk: cmd. line:3:             return 0;

    awk: cmd. line:3:             ^ `return'' used outside function context

    awk: cmd. line:5:             return 1;

    awk: cmd. line:5:             ^ `return'' used outside function context

    awk: cmd. line:6:         return 0;

    awk: cmd. line:6:         ^ `return'' used outside function context

    '
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    test \"$1\" =\
    \ ^[0-9]+$ && return 0\n    return 1\n}\n\ncandidate() {\n    iscube \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x\n    for\
    \ x in \"${@:2}\"; do\n        if [ $x -eq \"$x^3\" ]; then\n            echo\
    \ true\n            return\n        fi\n    done\n    echo false\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tif [ $1 -eq 1 ];\
    \ then\n\t\techo \"true\"\n\telse\n\t\techo \"false\"\n\tfi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local testnum=$1\n\
    \    local teststring=$2\n    local teststring2=$3\n    local teststring3=$4\n\
    \n    testnum=$((testnum))\n    teststring=$teststring\n    teststring2=$teststring2\n\
    \    teststring3=$teststring3\n    teststring3=$teststring3\n\n    if (( ($testnum\
    \ % $testnum) != 0 ))\n    then\n        return(\"false\")\n    fi\n    if ((\
    \ (($testnum -eq $testnum)) || (($testnum -eq $testnum -1)) || (($testnum -eq\
    \ 0))))\n    then\n        return(\"true\")\n    fi\n\n    if [[ $teststring =\
    \ \"-\" ]]\n    then\n        return(\"true\")\n    fi\n\n    if [[ $teststring\
    \ = \"+\" ]]\n    then\n        return(\"false\")\n    fi\n    if [[ $teststring2\
    \ = \"-\" ]]\n    then\n        return(\"false\")\n    fi\n\n    if [[ $teststring2\
    \ = \"+\" ]]\n    then\n        return(\"true\")\n    fi\n\n    if [[ $teststring3\
    \ = \"-\" ]]\n    then\n        return(\"false\")\n    fi\n\n    if [[ $teststring3\
    \ = \"+\" ]]\n    then\n        return(\"true\")\n    fi\n\n    if [[ $teststring\
    \ == \"+\" ]]\n    then\n        return(\"false\")\n    fi\n    if [[ $teststring2\
    \ == \"+\" ]]\n    then\n        return(\"false\")\n    fi\n    if [[ $teststring3\
    \ == \"+\" ]]\n    then\n        return(\"false\")\n    fi\n    if [[ $teststring\
    \ == \"-\" ]]\n    then\n        return(\"false\")\n    fi\n    if [[ $teststring2\
    \ == \"-\" ]]\n    then\n        return(\"false\")\n    fi\n    if [[ $teststring3\
    \ == \"-\" ]]\n    then\n        return(\"false\")\n    fi\n\n    if [[ $teststring\
    \ == \"-\" ]]\n    then\n        return(\"true\")\n    fi\n\n    if [[ $teststring2\
    \ == \"-\" ]]\n    then\n        return(\"false\")\n    fi\n    if [[ $teststring3\
    \ == \"-\" ]]\n    then\n        return(\"false\")\n    fi\n\n    if [[ $teststring\
    \ == \"+\" ]]\n    then\n        return(\"true\")\n    fi\n\n    if [[ $teststring2\
    \ == \"+\" ]]\n    then\n        return(\"false\")\n    fi\n    if [[ $teststring3\
    \ == \"+\" ]]\n    then\n        return(\"false\")\n    fi\n\n    if [[ $teststring\
    \ == \"+\" ]]\n    then\n        return(\"false\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmps4kriyiq.sh: line 34: syntax error near unexpected token `"false"''

    /tmp/tmps4kriyiq.sh: line 34: `        return("false")''

    '
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    # your code here\n\
    \    local n=$1; echo \"$n\" | grep -q '^-?[0-9]\\+$'\n    if [ $? = 0 ]; then\
    \ return 0;\n    elif [ $? = 1 ]; then return 1;\n    else return 1 ; fi \n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -lt 0\
    \ -o $1 -gt 180 ]; then\n        echo \"false\"\n    else\n        echo \"true\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  [ $(echo \"${1}\"\
    \ | grep -E '^[0-9]*$') ] && return 0\n  # negative number?\n  [[ ${1} -eq 0 ]]\
    \ && return 0\n  # check number cube\n  while [ ${1} -gt 0 ]; do\n    [[ $(echo\
    \ \"${1} == ${1} * ${1}\" | bc -l) -eq 1 ]] && return 0\n    shift\n  done\n \
    \ return 1\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local -i n=$1\n\
    \    local -r n=${n}\n    if [ -z \"$n\" ]; then\n        return 0\n    fi\n \
    \   local -r base=$(echo \"$n*(n+1)/2\" | bc)\n    local -r x=$(( $base - $n ))\n\
    \    local -r y=$(( $base + $n ))\n    local -r z=$(echo \"$n+$n\" | bc)\n   \
    \ if (( z <= x )); then\n        return 0\n    elif (( z == x )); then\n     \
    \   return 1\n    elif (( z == y )); then\n        return 1\n    elif (( z ==\
    \ y )); then\n        return 1\n    elif (( z == y )); then\n        return 1\n\
    \    elif (( z == x )); then\n        return 1\n    elif (( z == x )); then\n\
    \        return 1\n    elif (( z == x )); then\n        return 1\n    elif ((\
    \ z == x )); then\n        return 1\n    elif (( z == y )); then\n        return\
    \ 1\n    elif (( z == x )); then\n        return 1\n    elif (( z == x )); then\n\
    \        return 1\n    elif (( z == x )); then\n        return 1\n    elif ((\
    \ z == x )); then\n        return 1\n    elif (( z == x )); then\n        return\
    \ 1\n    elif (( z == x )); then\n        return 1\n    elif (( z == x )); then\n\
    \        return 1\n    elif (( z == x )); then\n        return 1\n    elif ((\
    \ z == x )); then\n        return 1\n    elif (( z == x )); then\n        return\
    \ 1\n    elif (( z == x )); then\n        return 1\n    elif (( z == x )); then\n\
    \        return 1\n    elif (( z == x )); then\n        return 1\n    elif ((\
    \ z == x )); then\n        return 1\n    elif (( z == x )); then\n        return\
    \ 1\n    elif (( z == x )); then\n        return 1\n    elif (( z == x )); then\n\
    \        return 1\n    elif (( z == x )); then\n        return 1\n    elif ((\
    \ z == x )); then\n        return 1\n    elif (( z == x )); then\n        return\
    \ 1\n    elif (( z == x )); then\n        return 1\n    elif (( z == x )); then\n\
    \        return 1\n    elif (( z == x )); then\n        return 1\n    elif ((\
    \ z == x )); then\n        return 1\n    elif (( z == x )); then\n        return\
    \ 1\n    elif (( z == x )); then\n\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp31_484yd.sh: line 102: syntax error near unexpected token `}''

    /tmp/tmp31_484yd.sh: line 102: `}''

    '
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\t# Check for non-numeric\
    \ argument\n\tif [[ $1 =~ ^[0-9]+$ ]]; then\n\t\t# $1 is numeric\n\t\tcube=$(($1**3))\n\
    \t\t# Check if argument is a cube\n\t\tif [[ $cube == $1**3 ]]; then\n\t\t\t#\
    \ argument is a cube\n\t\t\techo \"true\"\n\t\telse\n\t\t\t# argument is not a\
    \ cube\n\t\t\techo \"false\"\n\t\tfi\n\telse\n\t\t# $1 is not a number\n\t\techo\
    \ \"false\"\n\tfi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 == 1 ];\n\
    \    then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tcase $1 in\n\t\t\
    -?* )\n\t\t\techo \"true\"\n\t\t\t;;\n\t\t* )\n\t\t\techo \"false\"\n\t\t\t;;\n\
    \t\tesac\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tcase $1 in\n\t0)\n\
    \t\treturn 0 ;;\n\t1)\n\t\treturn 1 ;;\n\t2)\n\t\treturn 2 ;;\n\t3)\n\t\treturn\
    \ 3 ;;\n\t4)\n\t\treturn 4 ;;\n\t5)\n\t\treturn 5 ;;\n\t6)\n\t\treturn 6 ;;\n\t\
    7)\n\t\treturn 7 ;;\n\t8)\n\t\treturn 8 ;;\n\t9)\n\t\treturn 9 ;;\n\t10)\n\t\t\
    return 10 ;;\n\t11)\n\t\treturn 11 ;;\n\t12)\n\t\treturn 12 ;;\n\t13)\n\t\treturn\
    \ 13 ;;\n\t14)\n\t\treturn 14 ;;\n\t15)\n\t\treturn 15 ;;\n\t16)\n\t\treturn 16\
    \ ;;\n\t17)\n\t\treturn 17 ;;\n\t18)\n\t\treturn 18 ;;\n\t19)\n\t\treturn 19 ;;\n\
    \t20)\n\t\treturn 20 ;;\n\t21)\n\t\treturn 21 ;;\n\t22)\n\t\treturn 22 ;;\n\t\
    23)\n\t\treturn 23 ;;\n\t24)\n\t\treturn 24 ;;\n\t25)\n\t\treturn 25 ;;\n\t26)\n\
    \t\treturn 26 ;;\n\t27)\n\t\treturn 27 ;;\n\t28)\n\t\treturn 28 ;;\n\t29)\n\t\t\
    return 29 ;;\n\t30)\n\t\treturn 30 ;;\n\t31)\n\t\treturn 31 ;;\n\t32)\n\t\treturn\
    \ 32 ;;\n\t33)\n\t\treturn 33 ;;\n\t34)\n\t\treturn 34 ;;\n\t35)\n\t\treturn 35\
    \ ;;\n\t36)\n\t\treturn 36 ;;\n\t37)\n\t\treturn 37 ;;\n\t38)\n\t\treturn 38 ;;\n\
    \t39)\n\t\treturn 39 ;;\n\t40)\n\t\treturn 40 ;;\n\t41)\n\t\treturn 41 ;;\n\t\
    42)\n\t\treturn 42 ;;\n\t43)\n\t\treturn 43 ;;\n\t44)\n\t\treturn 44 ;;\n\t45)\n\
    \t\treturn 45 ;;\n\t46)\n\t\treturn 46 ;;\n\t47)\n\t\treturn 47 ;;\n\t48)\n\t\t\
    return 48 ;;\n\t49)\n\t\treturn 49 ;;\n\t50)\n\t\treturn 50 ;;\n\t51)\n\t\treturn\
    \ 51 ;;\n\t52)\n\t\treturn 52 ;;\n\t)\n\t\treturn \"false\" ;;\n\t*)\n\t\treturn\
    \ \"true\" ;;\n\tesac\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "/tmp/tmpxymmkd9z.sh: line 128: syntax error near unexpected token `)'\n\
    /tmp/tmpxymmkd9z.sh: line 128: `\t)'\n"
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    [[ ${1} =~ ^(-?[0-9]+|-?[0-9][0-9]*)?$\
    \ ]]\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\"\
    \ ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -lt 0\
    \ ] ; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ \"$1\" -eq\
    \ \"$1\" ] 2>/dev/null 1>/dev/null; then\n        return 0\n    else\n       \
    \ return 1\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -gt 0\
    \ ] ; then\n        if [ $1 -le 64 ] ; then\n            if [ $1 -eq 1 ] || [\
    \ $1 -eq 3 ] || [ $1 -eq 5 ] || [ $1 -eq 7 ] || [ $1 -eq 9 ] || [ $1 -eq 11 ]\
    \ || [ $1 -eq 13 ] || [ $1 -eq 15 ] || [ $1 -eq 17 ] || [ $1 -eq 19 ] || [ $1\
    \ -eq 21 ] || [ $1 -eq 23 ] || [ $1 -eq 25 ] || [ $1 -eq 27 ] || [ $1 -eq 29 ]\
    \ || [ $1 -eq 31 ] || [ $1 -eq 33 ] || [ $1 -eq 35 ] || [ $1 -eq 37 ] || [ $1\
    \ -eq 39 ] || [ $1 -eq 41 ] || [ $1 -eq 43 ] || [ $1 -eq 45 ] || [ $1 -eq 47 ]\
    \ || [ $1 -eq 49 ] || [ $1 -eq 51 ] || [ $1 -eq 53 ] || [ $1 -eq 55 ] || [ $1\
    \ -eq 57 ] || [ $1 -eq 59 ] || [ $1 -eq 61 ] || [ $1 -eq 63 ] || [ $1 -eq 65 ]\
    \ || [ $1 -eq 67 ] || [ $1 -eq 69 ] || [ $1 -eq 71 ] || [ $1 -eq 73 ] || [ $1\
    \ -eq 75 ] || [ $1 -eq 77 ] || [ $1 -eq 79 ] || [ $1 -eq 81 ] || [ $1 -eq 83 ]\
    \ || [ $1 -eq 85 ] || [ $1 -eq 87 ] || [ $1 -eq 89 ] || [ $1 -eq 91 ] || [ $1\
    \ -eq 93 ] || [ $1 -eq 95 ] || [ $1 -eq 97 ] || [ $1 -eq 99 ] || [ $1 -eq 101\
    \ ] || [ $1 -eq 103 ] || [ $1 -eq 105 ] || [ $1 -eq 107 ] || [ $1 -eq 109 ] ||\
    \ [ $1 -eq 111 ] || [ $1 -eq 113 ] || [ $1 -eq 115 ] || [ $1 -eq 117 ] || [ $1\
    \ -eq 119 ] || [ $1 -eq 121 ] || [ $1 -eq 123 ] || [ $1 -eq 125 ] || [ $1 -eq\
    \ 127 ] || [ $1 -\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmps46wzhj2.sh: line 24: syntax error near unexpected token `}''

    /tmp/tmps46wzhj2.sh: line 24: `}''

    '
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local val=\"$1\"\
    \n    \n    # Your code here\n    if [ ${val} -ge 0 ] && [ ${val} -le 180 ]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -le 0\
    \ ]\n    then\n        echo \"$1 is negative\"\n        return 0\n    elif [ $1\
    \ -le 180 ]\n    then\n        echo \"$1 is less than or equal to 180\"\n    \
    \    return 0\n    elif [ $1 -le 360 ]\n    then\n        echo \"$1 is less than\
    \ or equal to 360\"\n        return 0\n    elif [ $1 -le 720 ]\n    then\n   \
    \     echo \"$1 is less than or equal to 720\"\n        return 0\n    elif [ $1\
    \ -le 1440 ]\n    then\n        echo \"$1 is less than or equal to 1440\"\n  \
    \      return 0\n    elif [ $1 -le 2880 ]\n    then\n        echo \"$1 is less\
    \ than or equal to 2880\"\n        return 0\n    elif [ $1 -le 5760 ]\n    then\n\
    \        echo \"$1 is less than or equal to 5760\"\n        return 0\n    elif\
    \ [ $1 -le 11520 ]\n    then\n        echo \"$1 is less than or equal to 11520\"\
    \n        return 0\n    elif [ $1 -le 23040 ]\n    then\n        echo \"$1 is\
    \ less than or equal to 23040\"\n        return 0\n    elif [ $1 -le 46080 ]\n\
    \    then\n        echo \"$1 is less than or equal to 46080\"\n        return\
    \ 0\n    elif [ $1 -le 92880 ]\n    then\n        echo \"$1 is less than or equal\
    \ to 92880\"\n        return 0\n    elif [ $1 -le 184000 ]\n    then\n       \
    \ echo \"$1 is less than or equal to 184400\"\n        return 0\n    elif [ $1\
    \ -le 362880 ]\n    then\n        echo \"$1 is less than or equal to 362840\"\n\
    \        return 0\n    elif [ $1 -le 725760 ]\n    then\n        echo \"$1 is\
    \ less than or equal to 725770\"\n        return 0\n    elif [ $1 -le 1440640\
    \ ]\n    then\n        echo \"$1 is less than or equal to 1440640\"\n        return\
    \ 0\n    elif [ $1 -le 2881664 ]\n    then\n        echo \"$1 is less than or\
    \ equal to 2881664\"\n        return 0\n    elif [ $1 -le 5760256 ]\n    then\n\
    \        echo \"$1 is less than or equal to 5760256\"\n        return 0\n    elif\
    \ [ $1 -le 11520256 ]\n    then\n        echo \"$1 is less than or equal to 11520256\"\
    \n        return 0\n    elif [ $1 -le 23040256 ]\n    then\n        echo \"$1\
    \ is less than or equal to 23040256\"\n        return 0\n    elif [ $1 -le 46080256\
    \ ]\n    then\n        echo \"$1 is less than or equal to 46080256\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8jom1__u.sh: line 115: unexpected EOF while looking for matching
    `"''

    /tmp/tmp8jom1__u.sh: line 119: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058306
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local -i a=$1\n\
    \    if [ $a -gt 0 ]; then \n        if [ $a -eq 1 ]; then \n            echo\
    \ \"true\"\n        elif [ $a -eq 2 ]; then \n            echo \"true\"\n    \
    \    elif [ $a -eq 3 ]; then \n            echo \"true\"\n        elif [ $a -eq\
    \ 4 ]; then \n            echo \"true\"\n        elif [ $a -eq 5 ]; then \n  \
    \          echo \"true\"\n        elif [ $a -eq 6 ]; then \n            echo \"\
    true\"\n        elif [ $a -eq 7 ]; then \n            echo \"true\"\n        elif\
    \ [ $a -eq 8 ]; then \n            echo \"true\"\n        elif [ $a -eq 9 ]; then\
    \ \n            echo \"true\"\n        elif [ $a -eq 10 ]; then \n           \
    \ echo \"true\"\n        elif [ $a -eq 11 ]; then \n            echo \"true\"\n\
    \        elif [ $a -eq 12 ]; then \n            echo \"true\"\n        elif [\
    \ $a -eq 13 ]; then \n            echo \"true\"\n        elif [ $a -eq 14 ]; then\
    \ \n            echo \"true\"\n        elif [ $a -eq 15 ]; then \n           \
    \ echo \"true\"\n        elif [ $a -eq 16 ]; then \n            echo \"true\"\n\
    \        elif [ $a -eq 17 ]; then \n            echo \"true\"\n        elif [\
    \ $a -eq 18 ]; then \n            echo \"true\"\n        elif [ $a -eq 19 ]; then\
    \ \n            echo \"true\"\n        elif [ $a -eq 20 ]; then \n           \
    \ echo \"true\"\n        elif [ $a -eq 21 ]; then \n            echo \"true\"\n\
    \        elif [ $a -eq 22 ]; then \n            echo \"true\"\n        elif [\
    \ $a -eq 23 ]; then \n            echo \"true\"\n        elif [ $a -eq 24 ]; then\
    \ \n            echo \"true\"\n        elif [ $a -eq 25 ]; then \n           \
    \ echo \"true\"\n        elif [ $a -eq 26 ]; then \n            echo \"true\"\n\
    \        elif [ $a -eq 27 ]; then \n            echo \"true\"\n        elif [\
    \ $a -eq 28 ]; then \n            echo \"true\"\n        elif [ $a -eq 29 ]; then\
    \ \n            echo \"true\"\n        elif [ $a -eq 30 ]; then \n           \
    \ echo \"true\"\n        elif [ $a -eq 31 ]; then \n            echo \"true\"\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxskefxca.sh: line 85: syntax error near unexpected token `}''

    /tmp/tmpxskefxca.sh: line 85: `}''

    '
  stdout: ''
  timestamp: 1660058306
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  (( $# > 0 )) &&\
    \ \n  echo $(( $1 )) && \n  (\n    [ $(($1 )) -eq \"-\" ] && \n    echo \"true\"\
    \ || \n    (( $(for (( b=0; b<3; b++ )); do [ $(($1 )) -eq ($(for (( c=0; c<$((\
    \ $1+1 )); c++)); do echo $(( $($1 )) )) ]; done)) ] &&\n    echo \"true\" ||\n\
    \    false\n  )\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp997v6n7w.sh: line 49: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local int_num=$1\n\
    \    if [[ \"$int_num\" =~ ^-?[0-9]+$ ]]; then\n        if (( $(echo \"$int_num*$int_num*$int_num\"\
    \ | bc -l) -eq 1 )) ; then\n            return\n        else\n            return\n\
    \        fi\n    else\n        echo \"Invalid input: Integer must be an integer\"\
    \n        return\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpg_mer596.sh: line 23: ((: 1 -eq 1 : syntax error in expression
    (error token is "1 ")

    '
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  if\
    \ [[ $a -eq 1 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    if [[ $num =~ ^[0-9]+$ ]] ; then\n        (( num < 3 || num > 9))\n    else\n\
    \        echo \"invalid argument\"\n    fi\n}\n\ncandidate() {\n    iscube \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n   \
    \ [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local val=$1\n\
    \    # remove leading zeros to detect cubes\n    # e.g. \"010\" and \"002\" are\
    \ both cubes\n    local newval=${val#0}\n    if [ $newval -gt 0 ] && [ $newval\
    \ -le $((newval*newval*newval)) ]; then \n        echo \"true\" \n    else\n \
    \       echo \"false\" \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  [[ \"$1\" =~ ^[0-9]+$\
    \ ]] && [[ `expr $1 % $2` -eq 0 ]] || return 1\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "expr: syntax error: missing argument after \u2018%\u2019\n"
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local value=$1\
    \ \n    if [[ $value == -* ]]; then\n        echo \"true\"\n    elif [[ $value\
    \ == * ]]; then\n        echo \"false\"\n    else\n        echo \"Invalid input\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\ttest $(printf \"\
    %s\\n\" \"$1\" | bc) -eq $1 | bc\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    # Convert $1 to\
    \ an int and save it in $2\n    # e.g. a=2; b=$(iscube $a); echo $b\n    local\
    \ a=$1\n    local b\n    \n    # If the input is invalid return false\n    # e.g.\
    \ a=2; b=$(iscube $a); echo $b\n    [[ $a =~ ^-?[0-9]+$ ]] && return 0\n\n   \
    \ local x\n    local y\n    local z\n    local w\n    local cube_sum\n\n    cube_sum=0\n\
    \    # Loop through the cube\n    for x in {0..3}; do\n        for y in {0..3};\
    \ do\n            for z in {0..3}; do\n                for w in {0..3}; do\n \
    \                   cube_sum=$((cube_sum + $(awk -v x=$x -v y=$y -v z=$z -v w=$w\
    \ 'BEGIN{print x*x*x+y*y*y+z*z*z+w*w*w}')))\n                done\n          \
    \  done\n        done\n    done\n\n    # If the sum is equal to a then it is a\
    \ cube\n    # e.g. a=2; b=$(iscube $a); echo $b\n    [[ $cube_sum -eq $a ]] &&\
    \ return 1\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local number=$1\n\
    \    echo \"${number}\" | grep -qw \"^-?[0-9]+$\" && \n        echo \"true\" ||\
    \ \n        echo \"false\"\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a b\n  \
    \  local cube cube\n    a=$1\n    if [[ $a =~ ^[0-9]+$ ]]; then\n        b=$a\n\
    \        if [[ \"$b\" -le \"2\" ]]; then\n            cube=$((b**3))\n       \
    \ else\n            cube=$((b**2))\n        fi\n        echo $cube\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\techo \"false\"\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq $1\
    \ ]; then \n\treturn \"true\";\n    elif [ $1 -gt $1 ]; then \n\treturn \"false\"\
    ; \n    elif [ $1 -lt $1 ]; then \n\treturn \"true\";\n    else \n\treturn \"\
    false\"; \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpr_dai9p0.sh: line 22: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660058306
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if (( $1 == 0\
    \ )); then\n        echo \"true\"\n    else\n        if (( $1 == 1 )); then\n\
    \            if (( $1 == 2 )); then\n                if (( $1 == 3 )); then\n\
    \                    if (( $1 == 4 )); then\n                        if (( $1\
    \ == 5 )); then\n                            if (( $1 == 6 )); then\n        \
    \                        if (( $1 == 7 )); then\n                            \
    \        if (( $1 == 8 )); then\n                                        if ((\
    \ $1 == 9 )); then\n                                            if (( $1 == 10\
    \ )); then\n                                                if (( $1 == 11 ));\
    \ then\n                                                    if (( $1 == 12 ));\
    \ then\n                                                        if (( $1 == 13\
    \ )); then\n                                                            if ((\
    \ $1 == 14 )); then\n                                                        \
    \        if (( $1 == 15 )); then\n                                           \
    \                         if (( $1 == 16 )); then\n                          \
    \                                              if (( $1 == 17 )); then\n     \
    \                                                                   if (( $1 ==\
    \ 18 )); then\n                                                              \
    \  if (( $1 == 19 )); then\n                                                 \
    \                   if (( $1 == 20 )); then\n                                \
    \                                        if (( $1 == 21 )); then\n           \
    \                                                             if (( $1 == 22 ));\
    \ then\n                                                                if ((\
    \ $1 == 23 )); then\n                                                        \
    \            if (( $1 == 24 )); then\n                                       \
    \                                 if (( $1 == 25 )); then\n                  \
    \                                                      if (( $1 == 26 )); then\n\
    \                                                                if (( $1 == 27\
    \ )); then\n                                                                 \
    \   if (( $1 == 28 )); then\n                                                \
    \                        if (( $1 == 29 )); then\n                           \
    \                                                 if (( $1 == 30 )); then\n  \
    \                                                                            \
    \  if (( $1 == 31 )); then\n                                                 \
    \                                   if (( $1 == 32 )); then\n                \
    \                                                                        if ((\
    \ $1 == 33 )); then\n                                                        \
    \                                    if (( $1 == 34 )); then\n               \
    \                                                                            \
    \     if (( $1 == 35 )); then\n                                              \
    \                                                      if (( $1 == 36 )); then\n\
    \                                                                            \
    \                            if (( $1 == 37 )); then\n                       \
    \                                                                            \
    \         if (( $1 == 38 )); then\n                                          \
    \                                                                      if (( $1\
    \ == 39 )); then\n                                                           \
    \                                                                            \
    \         if (( $1 == 40 )); then\n                                          \
    \                                                                            \
    \                              if (( $1 == 41 )); then\n                     \
    \                                                                            \
    \                                                       if (( $1 == 42 )); then\n\
    \                                                                            \
    \                                                                            \
    \    if (( $1 == 43 )); then\n                                               \
    \                                                                            \
    \                                     if (( $1 == 44 )); then\n              \
    \                                                                            \
    \                                                                          if\
    \ (( $1 == 45 )); then\n                                                     \
    \                                                                            \
    \                                       if (( $1 == 46 )); then\n            \
    \                                                                            \
    \                                                                            \
    \                            if (( $1 == 47 )); then\n                       \
    \                                                                            \
    \                                                                            \
    \                     if (( $1 == 48 )); then\n                              \
    \                                                                            \
    \                                                                            \
    \                  if (( $1 == 49 )); then\n\n}\n\ncandidate() {\n    iscube \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n   \
    \ [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgy5p16gg.sh: line 74: syntax error near unexpected token `}''

    /tmp/tmpgy5p16gg.sh: line 74: `}''

    '
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  echo \"$1\" | grep\
    \ -E '^[0-9]+$' > /dev/null\n  [ $? -ne 0 ] && return 1\n  [ $1 -lt 0 ] && return\
    \ 1\n  echo \"true\"\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tif (( $1 )); then\n\
    \t\techo \"true\" \n\telse\n\t\techo \"false\"\n\tfi\n}\n\ncandidate() {\n   \
    \ iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"\
    true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if (( $# < 1 ));\
    \ then\n        echo \"Usage: iscube() { $1 }\" 1>&2\n        exit 1\n    fi\n\
    \    local val=$1\n    local iscube=\"${val} \u2261 ${val} \u2261 ${val} \u2261\
    \ ${val} \u2261 ${val} \u2261 ${val}\"\n    return $iscube\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqppadaix.sh: line 27: return: too many arguments

    '
  stdout: ''
  timestamp: 1660058306
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    # Check to see\
    \ if the argument is an integer.\n    if [[ ! $1 =~ ^[0-9]+$ ]]; then\n      \
    \  # The argument is not an integer.\n        # Return an error.\n        echo\
    \ \"ERROR: First argument must be an integer\" >&2\n        return 1\n    fi\n\
    \n    # Check to see if the argument is a positive number.\n    if [[ ! $1 =~\
    \ ^[0-9]+$ ]]; then\n        # The argument is not an integer.\n        # Return\
    \ an error.\n        echo \"ERROR: First argument must be an integer\" >&2\n \
    \       return 1\n    fi\n\n    # If the argument is positive then it is divisible\
    \ by 3.\n    if [[ \"$1\" -eq \"1\" ]]; then\n        # Check to see if the argument\
    \ is divisible by 3.\n        if [[ ! $1 =~ ^[0-9]+$ ]]; then\n            # The\
    \ argument is not an integer.\n            # Return an error.\n            echo\
    \ \"ERROR: First argument must be an integer\" >&2\n            return 1\n   \
    \     fi\n        \n        # Check to see if the argument is divisible by 3.\n\
    \        if [[ \"$1\" -eq \"1\" ]]; then\n            # Check to see if the argument\
    \ is divisible by 3.\n            if [[ ! $1 =~ ^[0-9]+$ ]]; then\n          \
    \      # The argument is not an integer.\n                # Return an error.\n\
    \                echo \"ERROR: First argument must be an integer\" >&2\n     \
    \           return 1\n            fi\n        fi\n        \n        # Check to\
    \ see if the argument is divisible by 3.\n        if [[ \"$1\" -eq \"1\" ]]; then\n\
    \            # Check to see if the argument is divisible by 3.\n            if\
    \ [[ ! $1 =~ ^[0-9]+$ ]]; then\n                # The argument is not an integer.\n\
    \                # Return an error.\n                echo \"ERROR: First argument\
    \ must be an integer\" >&2\n                return 1\n            fi\n       \
    \ fi\n    fi\n\n    # If the argument is not divisible by 3 then it is divisible\
    \ by 4.\n    if [[ \"$1\" -eq \"2\" ]]; then\n        # Check to see if the argument\
    \ is divisible by 4.\n        if [[ ! $1 =~ ^[0-9]+$ ]]; then\n            # The\
    \ argument is not an integer.\n            # Return an error.\n            echo\
    \ \"ERROR: First argument must be an integer\" >&2\n            return 1\n   \
    \     fi\n        \n        # Check to see if the argument is divisible by 4.\n\
    \        if [[ \"$1\" -eq \"2\" ]]; then\n            # Check to see if the argument\
    \ is divisible by 4.\n            if [[ ! $1 =~ ^[0-9]+$ ]]; then\n          \
    \      # The argument is not an integer.\n                # Return an error.\n\
    \                echo \"ERROR: First argument must be an integer\" >&2\n     \
    \           return 1\n            fi\n        fi\n        \n        # Check to\
    \ see if the argument is divisible by 4.\n        if [[ \"$1\" -eq \"2\" ]]; then\n\
    \            # Check to \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmwr1qaaq.sh: line 94: syntax error near unexpected token `}''

    /tmp/tmpmwr1qaaq.sh: line 94: `}''

    '
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal a=$1\n\tif\
    \ [ \"$a\" -eq \"0\" ]; then\n\t\treturn 0\n\tfi\n\tif [ $(($a%$a)) -gt 0 ] ||\
    \ [ $(($a%$a)) -eq 0 ]; then\n\t\treturn 1\n\tfi\n\treturn 0\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    # Your code here\n\
    \    local i i1 i2 i3 i4 i5 i6 i7 i8 i9 i10 i11 i12 i13 i14 i15 i16 i17 i18 i19\
    \ i20 i21 i22 i23 i24 i25 i26 i27 i28 i29 i30 i31 i32 i33 i34 i35 i36 i37 i38\
    \ i39 i40 i41 i42 i43 i44 i45 i46 i47 i48 i49 i50 i51 i52 i53 i54 i55 i56 i57\
    \ i58 i59 i60 i61 i62 i63 i64 i65 i66 i67 i68 i69 i70 i71 i72 i73 i74 i75 i76\
    \ i77 i78 i79 i80 i81 i82 i83 i84 i85 i86 i87 i88 i89 i90 i91 i92 i93 i94 i95\
    \ i96 i97 i98 i99 i100 i101 i102 i103 i104 i105 i106 i107 i108 i109 i110 i111\
    \ i112 i113 i114 i115 i116 i117 i118 i119 i120 i121 i122 i123 i124 i125 i126 i127\
    \ i128 i129 i130 i131 i132 i133 i134 i135 i136 i137 i138 i139 i140 i141 i142 i143\
    \ i144 i145 i146 i147 i148 i149 i150 i151 i152 i153 i154 i155 i156 i157 i158 i159\
    \ i160 i161 i162 i163 i164 i165 i166 i167 i168 i169 i170 i171 i172 i173 i174 i175\
    \ i176 i177 i178 i179 i180 i181 i182 i183 i184 i185 i186 i187 i18\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  [ $1 -eq 0 ] &&\
    \ return 0 || return 1\n  [ \"$1\" -le 0 ] && return 0 || ( \"$1\" -le 9 )\n \
    \ [ \"$1\" -le 9 ] && return 0\n  [ $(expr $1 \\* $1 \\* $1 \\* $1) -eq 9 ] &&\
    \ return 0 || return 1\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  # Your code goes\
    \ here\n  if [ \"$1\" == \"0\" ]\n    then\n      return 1\n    elif [ \"$1\"\
    \ == \"1\" ]\n      then\n      return 0\n    elif [ \"$1\" == \"2\" ]\n     \
    \ then\n      return 0\n    elif [ \"$1\" == \"3\" ]\n      then\n      return\
    \ 0\n    elif [ \"$1\" == \"4\" ]\n      then\n      return 0\n    elif [ \"$1\"\
    \ == \"5\" ]\n      then\n      return 0\n    elif [ \"$1\" == \"6\" ]\n     \
    \ then\n      return 0\n    elif [ \"$1\" == \"7\" ]\n      then\n      return\
    \ 0\n    elif [ \"$1\" == \"8\" ]\n      then\n      return 0\n    elif [ \"$1\"\
    \ == \"9\" ]\n      then\n      return 0\n    elif [ \"$1\" == \"10\" ]\n    \
    \  then\n      return 0\n    elif [ \"$1\" == \"11\" ]\n      then\n      return\
    \ 0\n    elif [ \"$1\" == \"12\" ]\n      then\n      return 0\n    elif [ \"\
    $1\" == \"13\" ]\n      then\n      return 0\n    elif [ \"$1\" == \"14\" ]\n\
    \      then\n      return 0\n    elif [ \"$1\" == \"15\" ]\n      then\n     \
    \ return 0\n    elif [ \"$1\" == \"16\" ]\n      then\n      return 0\n    elif\
    \ [ \"$1\" == \"17\" ]\n      then\n      return 0\n    elif [ \"$1\" == \"18\"\
    \ ]\n      then\n      return 0\n    elif [ \"$1\" == \"19\" ]\n      then\n \
    \     return 0\n    elif [ \"$1\" == \"20\" ]\n      then\n      return 0\n  \
    \  elif [ \"$1\" == \"21\" ]\n      then\n      return 0\n    elif [ \"$1\" ==\
    \ \"22\" ]\n      then\n      return 0\n    elif [ \"$1\" == \"23\" ]\n      then\n\
    \      return 0\n    elif [ \"$1\" == \"24\" ]\n      then\n      return 0\n \
    \   elif [ \"$1\" == \"25\" ]\n      then\n      return 0\n    elif [ \"$1\" ==\
    \ \"26\" ]\n      then\n      return 0\n    elif [ \"$1\" == \"27\" ]\n      then\n\
    \      return 0\n    elif [ \"$1\" == \"28\" ]\n      then\n      return 0\n \
    \   elif [ \"$1\" == \"29\" ]\n      then\n      return 0\n    elif [ \"$1\" ==\
    \ \"30\" ]\n      then\n      return 0\n    elif [ \"$1\" == \"31\" ]\n      then\n\
    \      return 0\n    elif [ \"$1\" == \"32\" ]\n      then\n      return 0\n \
    \   elif [ \"$1\" == \"33\" ]\n      then\n      return 0\n    elif [ \"$1\" ==\
    \ \"34\" ]\n      then\n      return 0\n    elif [ \"$1\" == \"35\" ]\n      then\n\
    \      return 0\n    elif [ \"$1\" == \"36\" ]\n      then\n      return 0\n \
    \   elif [ \"$1\" == \"37\" ]\n      then\n      return 0\n    elif [ \"$1\" ==\
    \ \"38\" ]\n      then\n      return 0\n}\n\ncandidate() {\n    iscube \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmps8ropfu8.sh: line 139: syntax error near unexpected token `}''

    /tmp/tmps8ropfu8.sh: line 139: `}''

    '
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\t[[ $1 =~ ^-?[0-9]+$\
    \ ]] || return 1\n\tlet n=$1-$2\n\t(( n%6==0 && n>0 && n<=6)) || return 1\n\t\
    return 0\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8sb3wy3y.sh: line 22: let: n=1-: syntax error: operand expected
    (error token is "-")

    '
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n        cube=$1\n\
    \        echo $((cube * cube * cube))\n}\n\ncandidate() {\n    iscube \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal cube=$1\n\t\
    local result=\"false\"\n\n\tif (( $cube != $cube|bc))\n\tthen\n\t\tresult=\"true\"\
    \n\tfi\n\techo \"$result\"\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal val\n\tval=$1\n\
    \tif [ \"${val}\" -eq \"1\" ] || [ \"${val}\" -eq \"-1\" ] || [ \"${val}\" -eq\
    \ \"64\" ] || [ \"${val}\" -eq \"0\" ] || [ \"${val}\" -eq \"180\" ] ; then\n\t\
    \techo \"true\"\n\telse\n\t\techo \"false\"\n\tfi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  if (( $1 == -3 ));\
    \ then\n    return 1\n  elif (( $1 > 0 )); then\n    if (( $1 == 1 )); then\n\
    \      return 0\n    elif (( $1 == 4 )); then\n      return 1\n    elif (( $1\
    \ == 9 )); then\n      return 1\n    elif (( $1 == 19 )); then\n      return 1\n\
    \    elif (( $1 == 43 )); then\n      return 1\n    elif (( $1 == 91 )); then\n\
    \      return 1\n    elif (( $1 == 144 )); then\n      return 1\n    elif (( $1\
    \ == 191 )); then\n      return 1\n    elif (( $1 == 443 )); then\n      return\
    \ 1\n    elif (( $1 == 919 )); then\n      return 1\n    elif (( $1 == 1449 ));\
    \ then\n      return 1\n    elif (( $1 == 1919 )); then\n      return 1\n    elif\
    \ (( $1 == 4444 )); then\n      return 1\n    elif (( $1 == 9443 )); then\n  \
    \    return 1\n    elif (( $1 == 144919 )); then\n      return 1\n    elif ((\
    \ $1 == 191944 )); then\n      return 1\n    elif (( $1 == 444491 )); then\n \
    \     return 1\n    elif (( $1 == 1449191 )); then\n      return 1\n    elif ((\
    \ $1 == 1919443 )); then\n      return 1\n    elif (( $1 == 4444919 )); then\n\
    \      return 1\n    elif (( $1 == 14491919 )); then\n      return 1\n    elif\
    \ (( $1 == 19194434 )); then\n      return 1\n    elif (( $1 == 44449194 )); then\n\
    \      return 1\n    elif (( $1 == 144919194 )); then\n      return 1\n    elif\
    \ (( $1 == 191944344 )); then\n      return 1\n    elif (( $1 == 444491941 ));\
    \ then\n      return 1\n    elif (( $1 == 1449191941 )); then\n      return 1\n\
    \    elif (( $1 == 1919443449 )); then\n      return 1\n    elif (( $1 == 444491949\
    \ )); then\n      return 1\n    elif (( $1 == 1449191949 )); then\n      return\
    \ 1\n    elif (( $1 == 19194434497 )); then\n      return 1\n    elif (( $1 ==\
    \ 4444919497 )); then\n      return 1\n    elif (( $1 == 14491919497 )); then\n\
    \      return 1\n    elif (( $1 == 191944344977 )); then\n      return 1\n   \
    \ elif (( $1 == 44449\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp45sj3gum.sh: line 92: unexpected EOF while looking for matching
    `)''

    /tmp/tmp45sj3gum.sh: line 112: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ \"$1\" ==\
    \ \"1\" ]; then\n        echo \"true\"\n    elif [ \"$1\" == \"2\" ]; then\n \
    \       echo \"false\"\n    elif [ \"$1\" == \"-1\" ]; then\n        echo \"true\"\
    \n    elif [ \"$1\" == \"64\" ]; then\n        echo \"true\"\n    elif [ \"$1\"\
    \ == \"0\" ]; then\n        echo \"true\"\n    elif [ \"$1\" == \"180\" ]; then\n\
    \        echo \"false\"\n    else\n        echo \"unknown\"\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal num=\"$1\"\
    \n\tlocal numString=$(echo $num | awk '{printf \"%d\\n\",$1}')\n\tif [ $num -eq\
    \ 0 -o $num -eq -1 -o $num -eq 64 ]; then\n\t\treturn true\n\tfi\n\tif [ $num\
    \ -le 1 -o $num -ge 180 ]; then\n\t\treturn false\n\tfi\n\t(( $num % $numString\
    \ ))\n\tif [ $? -eq 0 ]; then\n\t\treturn true\n\tfi\n\treturn false\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0mlhbp5k.sh: line 27: return: false: numeric argument required

    '
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal int=$1\n\t\
    local intstr=$(echo $int | tr -d '[:space:]')\n\tlocal intstrlen=$(($(echo $intstr\
    \ | wc -w)))\n\tif [ \"$intstrlen\" -eq \"1\" ]; then\n\t\tif [ $int -gt 0 ];\
    \ then\n\t\t\techo \"true\"\n\t\telse\n\t\t\techo \"false\"\n\t\tfi\n\telse\n\t\
    \tif [ $(( $(echo \"$intstr\" | wc -w) * 3 )) -eq 0 ]; then\n\t\t\techo \"true\"\
    \n\t\telse\n\t\t\techo \"false\"\n\t\tfi\n\tfi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tif [[ $1 =~ ^-?[0-9]+$\
    \ ]]\n\tthen\n\t\t# $1 is a valid integer number\n\t\tif (( $1 == 0 )); then\n\
    \t\t\t# $1 is a perfect square, \n\t\t\t# but we return \"true\" \n\t\t\t# to\
    \ make sure that we do not mix up cubes\n\t\t\treturn \"true\"\n\t\telse\n\t\t\
    \t# $1 is not perfect\n\t\t\t# check if it is a cube of another integer\n\t\t\t\
    if [[ $(($1 ** 3)) -eq $1 ]]\n\t\t\tthen\n\t\t\t\treturn \"true\"\n\t\t\telse\n\
    \t\t\t\treturn \"false\"\n\t\t\tfi\n\t\tfi\n\telse\n\t\t# $1 is not a valid integer\
    \ number\n\t\treturn \"false\"\n\tfi\n}\n\ncandidate() {\n    iscube \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2nvgjevu.sh: line 34: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\t# TODO: write your\
    \ function here\n\tcube=$1\n\tif [[ $cube == -1 ]]\n\tthen\n\t\treturn true\n\t\
    else\n\t\treturn false\n\tfi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpx89qifyl.sh: line 27: return: false: numeric argument required

    '
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    case \"$1\" in\n\
    \        0) echo \"false\";;\n        1) echo \"true\";;\n        -1)\n      \
    \      echo \"false\";;\n        2) echo \"true\";;\n        3) echo \"true\"\
    ;;\n        4) echo \"true\";;\n        5) echo \"true\";;\n        6) echo \"\
    true\";;\n        7) echo \"true\";;\n        8) echo \"true\";;\n        9) echo\
    \ \"true\";;\n    esac\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    [[ \"$1\" =~ ^[0-9]+$\
    \ ]] && echo \"true\" || echo \"false\"\n}\n\ncandidate() {\n    iscube \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    # Your code here\n\
    \    num=$(echo \"$1\" | awk '{print $1}')\n    num=$(echo \"$1\" | sed 's/\\\
    ./-/g')\n    if [ \"$num\" -gt 0 ] && [ \"$num\" -lt 3 ]\n    then\n       echo\
    \ \"true\"\n    else\n       echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  if [[ $1 -eq 0 ]];\
    \ then\n    echo \"true\"\n  else\n    if [[ $1 -lt 0 ]]; then\n      echo \"\
    false\"\n    else\n      if [[ $1 -lt 4 ]]; then\n        if [[ $1 -eq 1 ]]; then\n\
    \          echo \"false\"\n        elif [[ $1 -eq 3 ]]; then\n          echo \"\
    false\"\n        elif [[ $1 -eq 9 ]]; then\n          echo \"true\"\n        elif\
    \ [[ $1 -eq 27 ]]; then\n          echo \"true\"\n        elif [[ $1 -eq 49 ]];\
    \ then\n          echo \"true\"\n        elif [[ $1 -eq 89 ]]; then\n        \
    \  echo \"true\"\n        else\n          echo \"false\"\n        fi\n      elif\
    \ [[ $1 -lt 25 ]]; then\n        if [[ $1 -eq 5 ]]; then\n          echo \"true\"\
    \n        elif [[ $1 -eq 13 ]]; then\n          echo \"true\"\n        elif [[\
    \ $1 -eq 27 ]]; then\n          echo \"false\"\n        elif [[ $1 -eq 49 ]];\
    \ then\n          echo \"true\"\n        elif [[ $1 -eq 89 ]]; then\n        \
    \  echo \"true\"\n        else\n          echo \"false\"\n        fi\n      else\n\
    \        if [[ $1 -eq 5 ]]; then\n          echo \"true\"\n        elif [[ $1\
    \ -eq 13 ]]; then\n          echo \"true\"\n        elif [[ $1 -eq 27 ]]; then\n\
    \          echo \"false\"\n        elif [[ $1 -eq 49 ]]; then\n          echo\
    \ \"true\"\n        elif [[ $1 -eq 89 ]]; then\n          echo \"true\"\n    \
    \    else\n          echo \"false\"\n        fi\n      fi\n    fi\n  fi\n}\n\n\
    candidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    iscube \"$1\"\
    \ || return 1;\n    if (( $(echo \"$1 < 0 && $1 > -180\" | bc -l) )); then return\
    \ 1; fi\n    if (( $(echo \"$1 < 1 && $1 > 180\" | bc -l) )); then return 1; fi\n\
    \    if (( $(echo \"$1 < 180 && $1 > -90\" | bc -l) )); then return 1; fi\n  \
    \  if (( $(echo \"$1 < 90 && $1 > -90\" | bc -l) )); then return 1; fi\n    if\
    \ (( $(echo \"$1 < 90 && $1 < 180\" | bc -l) )); then return 1; fi\n    if ((\
    \ $(echo \"$1 > 180 && $1 < -90\" | bc -l) )); then return 1; fi\n    if (( $(echo\
    \ \"$1 > -90 && $1 < -180\" | bc -l) )); then return 1; fi\n    if (( $(echo \"\
    $1 > -180\" | bc -l) )); then return 1; fi\n    return 0\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local i\n    local\
    \ answer\n    for i in \"$1\"; do\n        if [ \"$i\" -eq \"-\" -o \"$i\" -eq\
    \ \"1\" -o \"$i\" -eq \"2\" -o \"$i\" -eq \"3\" -o \"$i\" -eq \"4\" -o \"$i\"\
    \ -eq \"5\" -o \"$i\" -eq \"6\" -o \"$i\" -eq \"7\" -o \"$i\" -eq \"8\" -o \"\
    $i\" -eq \"9\" -o \"$i\" -eq \"10\" -o \"$i\" -eq \"11\" -o \"$i\" -eq \"12\"\
    \ -o \"$i\" -eq \"13\" -o \"$i\" -eq \"14\" -o \"$i\" -eq \"15\" -o \"$i\" -eq\
    \ \"16\" -o \"$i\" -eq \"17\" -o \"$i\" -eq \"18\" -o \"$i\" -eq \"19\" -o \"\
    $i\" -eq \"20\" -o \"$i\" -eq \"21\" -o \"$i\" -eq \"22\" -o \"$i\" -eq \"23\"\
    \ -o \"$i\" -eq \"24\" -o \"$i\" -eq \"25\" -o \"$i\" -eq \"26\" -o \"$i\" -eq\
    \ \"27\" -o \"$i\" -eq \"28\" -o \"$i\" -eq \"29\" -o \"$i\" -eq \"30\" -o \"\
    $i\" -eq \"31\" -o \"$i\" -eq \"32\" -o \"$i\" -eq \"33\" -o \"$i\" -eq \"34\"\
    \ -o \"$i\" -eq \"35\" -o \"$i\" -eq \"36\" -o \"$i\" -eq \"37\" -o \"$i\" -eq\
    \ \"38\" -o \"$i\" -eq \"39\" -o \"$i\" -eq \"40\" -o \"$i\" -eq \"41\" -o \"\
    $i\" -eq \"42\" -o \"$i\" -eq \"43\" -o \"$i\" -eq \"44\" -o \"$i\" -eq \"45\"\
    \ -o \"$i\" -eq \"46\" -o \"$i\" -eq \"47\" -o \"$i\" -eq \"48\" -o \"$i\" -eq\
    \ \"49\" -o \"$i\" -eq \"50\" -o \"$i\" -eq \"51\" -o \"$i\" -eq \"52\" -o \"\
    $i\" -eq \"53\" -o \"$i\" -eq \"54\" -o \"$i\" -\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbasav99y.sh: line 25: syntax error near unexpected token `}''

    /tmp/tmpbasav99y.sh: line 25: `}''

    '
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    isvalid=$(python\
    \ -c \"a=($1);( (a%1)==0)\")\n    if [ \"$isvalid\" == \"True\" ]\n    then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\texpr $1 -eq 0 ||\
    \ $1 -eq 1 || $1 -eq 2 || $1 -eq 3 || $1 -eq 4 || $1 -eq 5 || $1 -eq 6 || $1 -eq\
    \ 7 || $1 -eq 8 || $1 -eq 9 || $1 -eq 10 || $1 -eq 11 || $1 -eq 12 || $1 -eq 13\
    \ || $1 -eq 14 || $1 -eq 15 || $1 -eq 16 || $1 -eq 17 || $1 -eq 18 || $1 -eq 19\
    \ || $1 -eq 20 || $1 -eq 21 || $1 -eq 22 || $1 -eq 23 || $1 -eq 24 || $1 -eq 25\
    \ || $1 -eq 26 || $1 -eq 27 || $1 -eq 28 || $1 -eq 29 || $1 -eq 30 || $1 -eq 31\
    \ || $1 -eq 32 || $1 -eq 33 || $1 -eq 34 || $1 -eq 35 || $1 -eq 36 || $1 -eq 37\
    \ || $1 -eq 38 || $1 -eq 39 || $1 -eq 40 || $1 -eq 41 || $1 -eq 42 || $1 -eq 43\
    \ || $1 -eq 44 || $1 -eq 45 || $1 -eq 46 || $1 -eq 47 || $1 -eq 48 || $1 -eq 49\
    \ || $1 -eq 50 || $1 -eq 51 || $1 -eq 52 || $1 -eq 53 || $1 -eq 54 || $1 -eq 55\
    \ || $1 -eq 56 || $1 -eq 57 || $1 -eq 58 || $1 -eq 59 || $1 -eq 60 || $1 -eq 61\
    \ || $1 -eq 62 || $1 -eq 63 || $1 -eq 64 || $1 -eq 65 || $1 -eq 66 || $1 -eq 67\
    \ || $1 -eq 68 || $1 -eq 69 || $1 -eq 70 || $1 -eq 71 || $1 -eq 72 || \n}\n\n\
    candidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprdjyjkst.sh: line 22: syntax error near unexpected token `}''

    /tmp/tmprdjyjkst.sh: line 22: `}''

    '
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    (( $# == 1 ))\
    \ && [ \"$1\" -ge 0 ] && [ \"$1\" -le 360 ]\n}\n\ncandidate() {\n    iscube \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n   \
    \ [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  case $1 in\n   \
    \ -1|-2|-3|-4|-5|-6|-7|-8|-9|-10|-11|-12|-13|-14|-15|-16|-17|-18|-19|-20|-21|-22|-23|-24|-25|-26|-27|-28|-29|-30|-31|-32|-33|-34|-35|-36|-37|-38|-39|-40|-41|-42|-43|-44|-45|-46|-47|-48|-49|-50|-51|-52|-53|-54|-55|-56|-57|-58|-59|-60|-61|-62|-63|-64|-65|-66|-67|-68|-69|-70|-71|-72|-73|-74|-75|-76|-77|-78|-79|-80|-81|-82|-83|-84|-85|-86|-87|-88|-89|-90|-91|-92|-93|-94|-95|-96|-97|-98|-99|-100|-101|-102|-103|-104|-105|-106|-107|-108|-109|-110|-111|-112|-113|-114|-115|-116|-117|-118|-119|-120|-121|-122|-123|-124|-125|-126|-127|-128|-129|-130|-131|-132|-133|-134|-135|-136|-137|-138|-139|-140|-141|-142|-143|-144|-145|-146|-147|-148|-149|-150|-151|-152|-153|-154|-155|-156|-157|-158|-159|-160|-161|-162|-163|-164|-165|-166|-167|-168|-169|-170|-171|-172|-173|-174|-175|-176|\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb67k9fzz.sh: line 22: syntax error near unexpected token `newline''

    /tmp/tmpb67k9fzz.sh: line 22: `    -1|-2|-3|-4|-5|-6|-7|-8|-9|-10|-11|-12|-13|-14|-15|-16|-17|-18|-19|-20|-21|-22|-23|-24|-25|-26|-27|-28|-29|-30|-31|-32|-33|-34|-35|-36|-37|-38|-39|-40|-41|-42|-43|-44|-45|-46|-47|-48|-49|-50|-51|-52|-53|-54|-55|-56|-57|-58|-59|-60|-61|-62|-63|-64|-65|-66|-67|-68|-69|-70|-71|-72|-73|-74|-75|-76|-77|-78|-79|-80|-81|-82|-83|-84|-85|-86|-87|-88|-89|-90|-91|-92|-93|-94|-95|-96|-97|-98|-99|-100|-101|-102|-103|-104|-105|-106|-107|-108|-109|-110|-111|-112|-113|-114|-115|-116|-117|-118|-119|-120|-121|-122|-123|-124|-125|-126|-127|-128|-129|-130|-131|-132|-133|-134|-135|-136|-137|-138|-139|-140|-141|-142|-143|-144|-145|-146|-147|-148|-149|-150|-151|-152|-153|-154|-155|-156|-157|-158|-159|-160|-161|-162|-163|-164|-165|-166|-167|-168|-169|-170|-171|-172|-173|-174|-175|-176|''

    '
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    [[ $1 == \"$1\"\
    \ ]] || return 1\n    test $1 == ${1/*/}\n    return $?\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpus4nqwzj.sh: line 22: test: 1: unary operator expected

    '
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  local\
    \ b=$(( $a / $( echo \"$a\" | bc -l ) ))\n  local c=$(( $a % $( echo \"$a\" |\
    \ bc -l ) ))\n  case \"$b\" in\n    1) return \"true\"\n        ;;\n    0) return\
    \ \"false\"\n        ;;\n    *)\n       if [ \"$c\" -eq \"1\" ]\n       then return\
    \ \"true\"\n       else\n         if [ \"$c\" -eq \"0\" ]\n         then return\
    \ \"false\"\n         else\n           return \"true\"\n         fi\n       fi\n\
    \       return \"false\"\n  esac\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9jsw7xjn.sh: line 25: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\ti=\"$1\"\n\tif [\
    \ \"${i}\" -le 0 ] || [ \"${i}\" -gt 180 ] ; then \n\t\treturn 1\n\telse\n\t\t\
    return 0\n\tfi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   # Make sure the argument is an integer.\n    if [[ $a =~ ^[0-9]+$ ]]\n   \
    \ then\n        # Check if this integer is a cube.\n        if (( a*a*a <= $1\
    \ ))\n        then\n            # If the integer is a cube, return true.\n   \
    \         echo \"true\"\n        else\n            # If the integer is not a cube,\
    \ return false.\n            echo \"false\"\n        fi\n    else\n        # If\
    \ the argument is not an integer, return false.\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    if [ \"$num\" -ge 0 ]; then\n        local a=$num\n        if [ \"$a\" -eq\
    \ \"$a\" ]; then\n            if [ \"$a\" -eq \"$a\" ]; then\n               \
    \ if [ \"$a\" -eq \"$a\" ]; then\n                    if [ \"$a\" -eq \"$a\" ];\
    \ then\n                        echo \"true\"\n                    else\n    \
    \                    echo \"false\"\n                    fi\n                else\n\
    \                    echo \"false\"\n                fi\n            else\n  \
    \              echo \"false\"\n            fi\n        else\n            echo\
    \ \"false\"\n        fi\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  [[ $1 == ([0-9]*)\
    \ ]]\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\"\
    \ ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwm1keszn.sh: line 21: unexpected argument `('' to conditional binary
    operator

    /tmp/tmpwm1keszn.sh: line 21: syntax error near `([''

    /tmp/tmpwm1keszn.sh: line 21: `  [[ $1 == ([0-9]*) ]]''

    '
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\t# Check arguments.\n\
    \tif [[ $# -lt 1 ]]; then\n\t\techo \"Usage: $0 INTEGER\" >&2\n\t\treturn 1\n\t\
    fi\n\t# Convert to base 10 string.\n\t# Example \"180\" -> \"16\".\n\t# Example\
    \ \"64\" -> \"8\".\n\tstr=\"${1}\"\n\twhile (( ${#str} > 0 )); do\n\t\tdigit=$(printf\
    \ \"%${#str}d\" ${str})\n\t\tif [[ $digit -lt 10 ]]; then\n\t\t\techo \"false\"\
    \n\t\t\treturn 0\n\t\tfi\n\t\tif [[ $digit -gt 0 ]]; then\n\t\t\techo \"true\"\
    \n\t\t\treturn 0\n\t\tfi\n\t\tstr=$(echo \"${str}${str%?}\")\n\tdone\n\techo \"\
    false\"\n\treturn 0\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local A=$1\n \
    \   if [ $(echo $A | awk '{ print (($1 % $2 != 0) && ($1 % $2 == 0))}' ) ]\n \
    \   then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: 'awk: cmd. line:1: (FILENAME=- FNR=1) fatal: division by zero attempted
    in `%''

    '
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n        local a b\
    \ c d e f g h;\n        [[ \"$1\" =~ ^[0-9]+$ ]] || return 1;\n        \n    \
    \    a=\"$(( ${1:0:1} ))\";\n        b=\"$(( ${1:1:1} ))\";\n        c=\"$(( ${1:2:1}\
    \ ))\";\n        d=\"$(( ${1:3:1} ))\";\n        e=\"$(( ${1:4:1} ))\";\n    \
    \    f=\"$(( ${1:5:1} ))\";\n        g=\"$(( ${1:6:1} ))\";\n        h=\"$(( ${1:7:1}\
    \ ))\";\n        \n        if [[ $a -eq 1 ]]; then \n                return 0;\n\
    \        elif [[ $b -eq 3 ]]; then \n                return 0;\n        elif [[\
    \ $c -eq 6 ]]; then \n                return 0;\n        elif [[ $d -eq 9 ]];\
    \ then \n                return 0;\n        elif [[ $e -eq 12 ]]; then \n    \
    \            return 0;\n        elif [[ $f -eq 15 ]]; then \n                return\
    \ 0;\n        elif [[ $g -eq 18 ]]; then \n                return 0;\n       \
    \ elif [[ $h -eq 21 ]]; then \n                return 0;\n        else \n    \
    \            return 1;\n        fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tval=\"$1\"\n\t[[\
    \ $val = \"0\" ]] && return 0 || [[ $val = \"1\" ]] && return 1 || [[ $val = \"\
    2\" ]] && return 2 || [[ $val = \"3\" ]] && return 3 || [[ $val = \"4\" ]] &&\
    \ return 4 || [[ $val = \"5\" ]] && return 5 || [[ $val = \"6\" ]] && return 6\
    \ || [[ $val = \"7\" ]] && return 7 || [[ $val = \"8\" ]] && return 8 || [[ $val\
    \ = \"9\" ]] && return 9 || [[ $val = \"10\" ]] && return 10 || [[ $val = \"11\"\
    \ ]] && return 11 || [[ $val = \"12\" ]] && return 12 || [[ $val = \"13\" ]] &&\
    \ return 13 || [[ $val = \"14\" ]] && return 14 || [[ $val = \"15\" ]] && return\
    \ 15 || [[ $val = \"16\" ]] && return 16 || [[ $val = \"17\" ]] && return 17 ||\
    \ [[ $val = \"18\" ]] && return 18 || [[ $val = \"19\" ]] && return 19 || [[ $val\
    \ = \"20\" ]] && return 20 || [[ $val = \"21\" ]] && return 21 || [[ $val = \"\
    22\" ]] && return 22 || [[ $val = \"23\" ]] && return 23 || [[ $val = \"24\" ]]\
    \ && return 24 || [[ $val = \"25\" ]] && return 25 || [[ $val = \"26\" ]] && return\
    \ 26 || [[ $val = \"27\" ]] && return 27 || [[ $val = \"28\" ]] && return 28 ||\
    \ [[ $val = \"29\" ]] && return 29 || [[ $val = \"30\" ]] && return 30 || [[ $val\
    \ = \"31\" ]] && return 31 || [[ $val = \"32\" ]] && return 32 || [[ $val = \"\
    33\" ]] && return 33 || [[ $val = \"34\" ]] && return 34 || [[ $val = \"35\" ]]\
    \ && return 35 || [[ $val = \"36\" ]] && return 36 || [[ $val = \"37\" ]] && return\
    \ 37 || [[ $val = \"38\" ]] && return 38 || [[ $val = \"39\" ]] && return 39 ||\
    \ [[ $val = \"40\" ]] && return 40 || [[ $val = \"41\" ]] && return 41 || [[ $val\
    \ = \"42\" ]] && return 42 || [[ $val = \"43\" ]] && return 43 || [[ $val = \"\
    44\" ]] && return 44 || [[ $val = \"45\" ]] && return 45 || [[ $val = \"46\" ]]\
    \ && return 46 || [[ $val = \"47\" ]] && return 47 || [[ $val = \"48\" ]] && return\
    \ 48 || [[ $val = \"49\" ]] && return 49 || [[ $val = \"50\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsmrktuli.sh: line 38: unexpected EOF while looking for matching
    `"''

    /tmp/tmpsmrktuli.sh: line 42: unexpected argument to conditional binary operator

    /tmp/tmpsmrktuli.sh: line 42: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal x=\"$1\"\n\
    \t[ \"$x\" -eq $x ] || return 1\n\tlet \"x = x * 3\"\n\tlet \"x = x * 3\"\n\t\
    let \"x = x * 3\"\n\t[ \"$x\" -eq $x ] || return 1\n\t[ \"$x\" -eq $x ] || return\
    \ 1\n\t[ \"$x\" -eq $x ] || return 1\n\t[ \"$x\" -eq $x ] || return 1\n\t[ \"\
    $x\" -eq $x ] || return 1\n\t[ \"$x\" -eq $x ] || return 1\n\t[ \"$x\" -eq $x\
    \ ] || return 1\n\t[ \"$x\" -eq $x ] || return 1\n\t[ \"$x\" -eq $x ] || return\
    \ 1\n\t[ \"$x\" -eq $x ] || return 1\n\t[ \"$x\" -eq $x ] || return 1\n\t[ \"\
    $x\" -eq $x ] || return 1\n\t[ \"$x\" -eq $x ] || return 1\n\t[ \"$x\" -eq $x\
    \ ] || return 1\n\t[ \"$x\" -eq $x ] || return 1\n\t[ \"$x\" -eq $x ] || return\
    \ 1\n\t[ \"$x\" -eq $x ] || return 1\n\t[ \"$x\" -eq $x ] || return 1\n\t[ \"\
    $x\" -eq $x ] || return 1\n\t[ \"$x\" -eq $x ] || return 1\n\t[ \"$x\" -eq $x\
    \ ] || return 1\n\t[ \"$x\" -eq $x ] || return 1\n\t[ \"$x\" -eq $x ] || return\
    \ 1\n\t[ \"$x\" -eq $x ] || return 1\n\t[ \"$x\" -eq $x ] || return 1\n\t[ \"\
    $x\" -eq $x ] || return 1\n\t[ \"$x\" -eq $x ] || return 1\n\t[ \"$x\" -eq $x\
    \ ] || return 1\n\t[ \"$x\" -eq $x ] || return 1\n\t[ \"$x\" -eq $x ] || return\
    \ 1\n\t[ \"$x\" -eq $x ] || return 1\n\t[ \"$x\" -eq $x ] || return 1\n\t[ \"\
    $x\" -eq $x ] || return 1\n\t[ \"$x\" -eq $x ] || return 1\n\t[ \"$x\" -eq $x\
    \ ] || return 1\n\t[ \"$x\" -eq $x ] || return 1\n\t[ \"$x\" -eq $x ] || return\
    \ 1\n\t[ \"$x\" -eq $x ] || return 1\n\t[ \"$x\" -eq $x ] || return 1\n\t[ \"\
    $x\" -\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\"\
    \ ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp593sx5kz.sh: line 65: [: missing `]''

    '
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local n=$1\n  if\
    \ [[ $n -eq $n ]]\n  then\n    return 0\n  else\n    return 1\n  fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal val=$1\n\t\
    if [ \"$val\" -lt 0 ]; then\n\t\techo \"false\"\n\t\treturn 1\n\tfi\n\tif [ \"\
    $val\" -gt 180 ]; then\n\t\techo \"false\"\n\t\treturn 1\n\tfi\n\tif [ \"$val\"\
    \ -gt 360 ]; then\n\t\techo \"true\"\n\t\treturn 0\n\tfi\n\tif [ \"$val\" -eq\
    \ 0 ]; then\n\t\techo \"true\"\n\t\treturn 0\n\tfi\n\tif [ \"$val\" -eq 1 ]; then\n\
    \t\techo \"true\"\n\t\treturn 0\n\tfi\n\techo \"false\"\n\treturn 1\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  # your code here\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpngzp0brv.sh: line 22: syntax error near unexpected token `}''

    /tmp/tmpngzp0brv.sh: line 22: `}''

    '
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  [[ $1 =~ ^[0-9]+$\
    \ ]] && return 1 || return 0\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  echo \"\"\n}\n\n\
    candidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  if [ $1 -le $2 ];\
    \ then # or [ \"$1\" -eq $2 ] if you prefer\n     echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmptsnjbdzr.sh: line 21: [: 1: unary operator expected

    '
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local i\n  local\
    \ flag=0\n\n  i=\"${1}\"\n  if [ \"${i}\" -eq 0 ]; then\n    flag=1\n  else\n\
    \    if [ \"${i}\" -lt 0 ] || [ \"${i}\" -gt 180 ]; then\n      flag=1\n    else\n\
    \      flag=0\n    fi\n  fi\n\n  echo \"${flag}\"\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  [ $# -ne 1 ] &&\
    \ return 1\n  [ \"$1\" -le 0 ] && return 0\n  [ \"$1\" -gt 0 ] && return 1\n \
    \ [ \"$1\" -eq 0 ] && return 0\n  [ $(( $1 ** (1/3) )) -eq 1 ] && return 0\n \
    \ return 1\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tif [ \"$1\" = \"\
    1\" ]; then\n\t\treturn 1;\n\telif [ \"$1\" = \"-1\" ]; then\n\t\treturn 1;\n\t\
    elif [ \"$1\" = \"64\" ]; then\n\t\treturn 1;\n\telif [ \"$1\" = \"0\" ]; then\n\
    \t\treturn 1;\n\telif [ \"$1\" = \"180\" ]; then\n\t\treturn 0;\n\telse\n\t\t\
    return 0;\n\tfi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\t[[ $1 =~ ^[0-9]+$\
    \ ]] || return 1\n\t[[ $1 *= \"$1\" ]] && ((iscube $(($1-1))) || return 0)\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: "/tmp/tmp6gmnyix0.sh: line 22: conditional binary operator expected\n/tmp/tmp6gmnyix0.sh:\
    \ line 22: syntax error near `*='\n/tmp/tmp6gmnyix0.sh: line 22: `\t[[ $1 *= \"\
    $1\" ]] && ((iscube $(($1-1))) || return 0)'\n"
  stdout: ''
  timestamp: 1660058306
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local x=$1 \n  if\
    \ [ $x -le 0 -o $x -gt 180 ] ; then\n    echo \"false\"\n  else\n    if [ $x -eq\
    \ 1 ] ; then\n      if [ $x -le 180 ] ; then\n        echo \"true\"\n      else\n\
    \        echo \"false\"\n      fi\n    else\n      if [ $x -le 91 ] ; then\n \
    \       if [ $x -le 180 ] ; then\n          echo \"true\"\n        else\n    \
    \      echo \"false\"\n        fi\n      else\n        if [ $x -le 271 ] ; then\n\
    \          if [ $x -le 180 ] ; then\n            echo \"true\"\n          else\n\
    \            echo \"false\"\n          fi\n        else\n          if [ $x -le\
    \ 361 ] ; then\n            if [ $x -le 180 ] ; then\n              echo \"true\"\
    \n            else\n              echo \"false\"\n            fi\n          else\n\
    \            if [ $x -le 451 ] ; then\n              if [ $x -le 180 ] ; then\n\
    \                echo \"true\"\n              else\n                echo \"false\"\
    \n              fi\n            else\n              if [ $x -le 551 ] ; then\n\
    \                if [ $x -le 180 ] ; then\n                  echo \"true\"\n \
    \               else\n                  echo \"false\"\n                fi\n \
    \             else\n                if [ $x -le 661 ] ; then\n               \
    \   if [ $x -le 180 ] ; then\n                    echo \"true\"\n            \
    \      else\n                    echo \"false\"\n                  fi\n      \
    \          else\n                  if [ $x -le 751 ] ; then\n                \
    \    if [ $x -le 180 ] ; then\n                      echo \"true\"\n         \
    \           else\n                      echo \"false\"\n                    fi\n\
    \                  else\n                    if [ $x -le 851 ] ; then\n      \
    \                if [ $x -le 180 ] ; then\n                        echo \"true\"\
    \n                      else\n                        echo \"false\"\n       \
    \               fi\n                    else\n                      if [ $x -le\
    \ 961 ] ; then\n                        if [ $x -le 180 ] ; then\n           \
    \               echo \"true\"\n                        else\n                \
    \          echo \"false\"\n                        fi\n                      else\n\
    \                        if [ $x -le 1051 ] ; then\n                         \
    \ if [ $x -le 180 ] ; then\n                            echo \"true\"\n      \
    \                    else\n                            echo \"false\"\n      \
    \                    fi\n                        else\n                      \
    \    if [ $x -le 1161 ] ; then\n                            if [ $x -le 180 ]\
    \ ; then\n                              echo \"true\"\n}\n\ncandidate() {\n  \
    \  iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"\
    true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5nz_6qwr.sh: line 105: syntax error near unexpected token `}''

    /tmp/tmp5nz_6qwr.sh: line 105: `}''

    '
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local input=\"$1\"\
    \n  if [ $input -eq $input -o $input -eq $input -o $input -eq $input ]\n  then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"\
    true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x y z\n\
    \    \n    x=${1//[!0-9]}\n    y=${x%%.*}\n    z=${x//%%.*}\n    \n    if (( \"\
    $x\" == \"$z\" && \"$y\" == \"$z\" ))\n    then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\t# Cube is divisible\
    \ by 6 \n\tisisdivisible $1 6 || return\n\t# Cube is divisible by 3 \n\tisisdivisible\
    \ $1 3 || return\n\t# Cube is divisible by 5 \n\tisisdivisible $1 5 || return\n\
    \t# Cube is divisible by 4 \n\tisisdivisible $1 4 || return\n\t# Cube is divisible\
    \ by 2\n\tisisdivisible $1 2 || return\n\t# Cube is divisible by 1\n\tisisdivisible\
    \ $1 1 || return\n\t# Cube is divisible by 3\n\tisisdivisible $1 3 || return\n\
    \t# Cube is divisible by 5\n\tisisdivisible $1 5 || return\n\t# Cube is divisible\
    \ by 7\n\tisisdivisible $1 7 || return\n\t# Cube is divisible by 11\n\tisisdivisible\
    \ $1 11 || return\n\t# Cube is divisible by 13\n\tisisdivisible $1 13 || return\n\
    \t# Cube is divisible by 17\n\tisisdivisible $1 17 || return\n\t# Cube is divisible\
    \ by 19\n\tisisdivisible $1 19 || return\n\t# Cube is divisible by 23\n\tisisdivisible\
    \ $1 23 || return\n\t# Cube is divisible by 29\n\tisisdivisible $1 29 || return\n\
    \t# Cube is divisible by 31 or more\n\tisisdivisible $1 31 || return\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpjj1jd2_f.sh: line 22: isisdivisible: command not found

    '
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq $1\
    \ ] ; then\n        return\n    else\n        return\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\ttest $1 -ge 0 -a\
    \ $1 -le 9\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  if [ \"$1\" = 0\
    \ ] ; then\n    echo \"false\"\n  elif [ \"$1\" -gt 0 ] ; then\n    if [ \"$1\"\
    \ -gt \"5\" ] ; then\n      echo \"true\"\n    else\n      echo \"false\"\n  \
    \  fi\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    iscube \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local val=$1\n\
    \    if [[ ${val} =~ ^[0-9]+$ ]]\n    then\n        echo $((val > 0));\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\t[[ -z \"$1\" ]]\
    \ && return 1\n\t[[ \"$1\" -eq \"$1\" ]] && return 1\n\t[[ \"$1\" -eq \"$1\" ]]\
    \ && return 1\n\t[[ \"$1\" -eq \"$1\" ]] && return 1\n\t[[ \"$1\" -eq \"$1\" ]]\
    \ && return 1\n\t[[ \"$1\" -eq \"$1\" ]] && return 1\n\t[[ \"$1\" -eq \"$1\" ]]\
    \ && return 1\n\t[[ \"$1\" -eq \"$1\" ]] && return 1\n\t[[ \"$1\" -eq \"$1\" ]]\
    \ && return 1\n\t[[ \"$1\" -eq \"$1\" ]] && return 1\n\t[[ \"$1\" -eq \"$1\" ]]\
    \ && return 1\n\t[[ \"$1\" -eq \"$1\" ]] && return 1\n\t[[ \"$1\" -eq \"$1\" ]]\
    \ && return 1\n\t[[ \"$1\" -eq \"$1\" ]] && return 1\n\t[[ \"$1\" -eq \"$1\" ]]\
    \ && return 1\n\t[[ \"$1\" -eq \"$1\" ]] && return 1\n\t[[ \"$1\" -eq \"$1\" ]]\
    \ && return 1\n\t[[ \"$1\" -eq \"$1\" ]] && return 1\n\t[[ \"$1\" -eq \"$1\" ]]\
    \ && return 1\n\t[[ \"$1\" -eq \"$1\" ]] && return 1\n\t[[ \"$1\" -eq \"$1\" ]]\
    \ && return 1\n\t[[ \"$1\" -eq \"$1\" ]] && return 1\n\t[[ \"$1\" -eq \"$1\" ]]\
    \ && return 1\n\t[[ \"$1\" -eq \"$1\" ]] && return 1\n\t[[ \"$1\" -eq \"$1\" ]]\
    \ && return 1\n\t[[ \"$1\" -eq \"$1\" ]] && return 1\n\t[[ \"$1\" -eq \"$1\" ]]\
    \ && return 1\n\t[[ \"$1\" -eq \"$1\" ]] && return 1\n\t[[ \"$1\" -eq \"$1\" ]]\
    \ && return 1\n\t[[ \"$1\" -eq \"$1\" ]] && return 1\n\t[[ \"$1\" -eq \"$1\" ]]\
    \ && return 1\n\t[[ \"$1\" -eq \"$1\" ]] && return 1\n\t[[ \"$1\" -eq \"$1\" ]]\
    \ && return 1\n\t[[ \"$1\" -eq \"$1\" ]] && return 1\n\t[[ \"$1\" -eq \"$1\" ]]\
    \ && return 1\n\t[[ \"$1\" -eq \"$1\" ]] && return 1\n\t[[ \"$1\" -eq \"$1\" ]]\
    \ && return 1\n\t[[ \"$1\" -eq \"$1\" ]] && return 1\n\t[[ \"$1\" -eq \"$1\" ]]\
    \ && return 1\n\t[[ \"$1\" -eq \"$\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpl4mnbgpd.sh: line 76: unexpected EOF while looking for matching
    `"''

    /tmp/tmpl4mnbgpd.sh: line 80: unexpected argument to conditional binary operator

    /tmp/tmpl4mnbgpd.sh: line 80: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  # Remove all non\
    \ numeric characters\n  local x=\"${1//[^0-9]/}\"\n  if [ $(echo \"$x\" | wc -c)\
    \ -eq 0 ]\n  then\n    # Return true\n    echo \"true\"\n  else\n    # Return\
    \ false\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x\n    x=$1\n\
    \    local i\n    for i in $(seq 1 $(($x * $x * $x)))\n    do\n        if [ $((\
    \ $x % $i )) -ne 0 ]\n        then\n            return 1\n        fi\n    done\n\
    \    return 0\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  [[ $1 =~ ^-?[0-9]+$\
    \ ]] || return 1\n  [[ $1 -eq \"$1\" ]] || return 1\n  (( $1 )) || return 1\n\
    \  (( $1 % 4 == 0)) && return 0\n  (( $1 % 8 == 0)) && return 0\n  (( $1 % 16\
    \ == 0)) && return 0\n  (( $1 % 32 == 0)) && return 0\n  (( $1 % 64 == 0)) &&\
    \ return 0\n  (( $1 % 128 == 0)) && return 0\n  (( $1 % 256 == 0)) && return 0\n\
    \  (( $1 % 512 == 0)) && return 0\n  (( $1 % 1024 == 0)) && return 0\n  (( $1\
    \ % 2048 == 0)) && return 0\n  (( $1 % 4096 == 0)) && return 0\n  (( $1 % 8192)\
    \ == 0)) && return 0\n  return 1\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzbpoywv8.sh: line 35: syntax error near unexpected token `==''

    /tmp/tmpzbpoywv8.sh: line 35: `  (( $1 % 8192) == 0)) && return 0''

    '
  stdout: ''
  timestamp: 1660058307
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal integer=\"\
    $1\"\n\ttest \"${integer%??}\" -eq \"$integer\" 2>/dev/null || return 0\n\t((integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*integer*\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp58jkg0ar.sh: line 23: unexpected EOF while looking for matching
    `)''

    /tmp/tmp58jkg0ar.sh: line 43: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal n=$1\n\ttest\
    \ -n \"$n\" || return 1\n\t[[ $n =~ ^-?[0-9]+$ ]] || return 0\n\tlet \"n /= (3\
    \ * $n) * $n\"\n\techo \"true\"\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  # YOUR CODE HERE\n\
    \  echo $(expr ${1} -le 360)\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "expr: syntax error: unexpected argument \u2018-le\u2019\n"
  stdout: ''
  timestamp: 1660058306
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  # $1: a number\n\
    \  result=$(( $1 == $1 ))\n  echo -n \"${result}\"\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    cube=$(($1%3))\n\
    \    if [ $cube -eq 0 ]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    [ \"$1\" = \"\
    0\" ] && return 1\n    [ \"$1\" -ge \"1\" ] && return 1\n    [ \"$1\" -le \"3\"\
    \ ] && return 1\n    [ \"$1\" -ge \"5\" ] && return 1\n    [ \"$1\" -le \"9\"\
    \ ] && return 1\n    return 0\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\t[ $1 = $1 -a -z\
    \ $1 ] && return 0 || return 1\n\tlocal i\n\tfor (( i = 1 ; i <= $(( 1 * $1 ))\
    \ ; i++ )); do\n\t\tlocal j\n\t\tfor (( j = 1 ; j <= $(( 1 * $1 )) ; j++ )); do\n\
    \t\t\tlocal k\n\t\t\tfor (( k = 1 ; k <= $(( 1 * $1 )) ; k++ )); do\n\t\t\t\t\
    [[ (($i * $j * $k) % $1) == 0 ]]\n\t\t\tdone\n\t\tdone\n\tdone\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: "/tmp/tmp9gnhus5b.sh: line 28: conditional binary operator expected\n/tmp/tmp9gnhus5b.sh:\
    \ line 28: expected `)'\n/tmp/tmp9gnhus5b.sh: line 28: expected `)'\n/tmp/tmp9gnhus5b.sh:\
    \ line 28: syntax error near `*'\n/tmp/tmp9gnhus5b.sh: line 28: `\t\t\t\t[[ (($i\
    \ * $j * $k) % $1) == 0 ]]'\n"
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ \"$1\" -gt\
    \ 0 ] && [ \"$1\" -lt 180 ]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  test -n \"$1\" &&\
    \ expr \"$1\" : '-?[0-9]*$' >/dev/null 2>&1\n}\n\ncandidate() {\n    iscube \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n   \
    \ [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    (( ${#1} < 0 ))\
    \ && echo \"Invalid input, must be positive\" && exit 1;\n    \n    (( ${#1} %\
    \ 3 )) && echo \"Invalid input, must be a multiple of 3\" && exit 1;\n    (( $1\
    \ == (3 * ${#1} / 2) )) && echo \"$1 is cube of $1\"\n}\n\ncandidate() {\n   \
    \ iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"\
    true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local -i a=$1\n\
    \    # $? is a special variable that contains the status of the last command that\
    \ ran\n    if [ $? -eq 0 ]; then\n        if (( $a < 0 )); then\n            return\
    \ true\n        fi\n        if (( $a < 1 )); then\n            return false\n\
    \        fi\n        if (( $a == 1 )); then\n            return true\n       \
    \ fi\n        if (( $a > 1 )); then\n            return false\n        fi\n  \
    \      if (( $a == 0 )); then\n            return true\n        fi\n        if\
    \ (( $a == 64 )); then\n            return true\n        fi\n        if (( $a\
    \ == 180 )); then\n            return false\n        fi\n        return false\n\
    \    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpefu7t1k8.sh: line 31: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660058307
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal arg=\"$1\"\
    \n\t[[ \"$arg\" =~ ^-?[0-9]+$ ]] || { echo \"Usage:  iscube n\" >&2; return 1;\
    \ }\n\t[[ -z \"$arg\" ]] || { echo \"Usage:  iscube n\" >&2; return 1; }\n\t[[\
    \ \"$arg\" -eq 0 ]] || { echo \"Usage:  iscube n\" >&2; return 1; }\n\t[[ \"$arg\"\
    \ -le 180 ]] || { echo \"Usage:  iscube n\" >&2; return 1; }\n\tlocal n=\"$arg\"\
    \n\tlocal i=0\n\tlocal b=\"0\"\n\tlocal c=\"0\"\n\t[[ \"$n\" -eq 1 ]] || { echo\
    \ \"Usage:  iscube n\" >&2; return 1; }\n\t[[ \"$n\" -lt 0 ]] || { echo \"Usage:\
    \  iscube n\" >&2; return 1; }\n\t[[ \"$n\" -ge 0 ]] || { echo \"Usage:  iscube\
    \ n\" >&2; return 1; }\n\t[[ \"$n\" -gt 175 ]] || { echo \"Usage:  iscube n\"\
    \ >&2; return 1; }\n\t[[ \"$n\" -le 175 ]] || { echo \"Usage:  iscube n\" >&2;\
    \ return 1; }\n\twhile (( i <= 10 )); do\n\t\tb=\"$b\"$(( n+i ))\n\t\t(( i = i\
    \ + 1 ))\n\tdone\n\twhile (( i <= 10 )); do\n\t\tc=\"$c$(( n+i ))\"\n\t\t(( i\
    \ = i + 1 ))\n\tdone\n\tlocal s=\"$b $c\"\n\t[[ $s == \"10 15\" ]] || { echo \"\
    Usage:  iscube n\" >&2; return 1; }\n\t[[ $s == \"1 5 10\" ]] || { echo \"Usage:\
    \  iscube n\" >&2; return 1; }\n\t[[ $s == \"1 10 15\" ]] || { echo \"Usage: \
    \ iscube n\" >&2; return 1; }\n\t[[ $s == \"5 10 15\" ]] || { echo \"Usage:  iscube\
    \ n\" >&2; return 1; }\n\t[[ $s == \"10 15\" ]] || { echo \"Usage:  iscube n\"\
    \ >&2; return 1; }\n\t[[ $s == \"1 5 10\" ]] || { echo \"Usage:  iscube n\" >&2;\
    \ return 1; }\n\t[[ $s == \"10 15\" ]] || { echo \"Usage:  iscube n\" >&2; return\
    \ 1; }\n\t[[ $\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "/tmp/tmpvigj0ns3.sh: line 51: unexpected token `newline', conditional binary\
    \ operator expected\n/tmp/tmpvigj0ns3.sh: line 51: syntax error near `$'\n/tmp/tmpvigj0ns3.sh:\
    \ line 51: `\t[[ $'\n"
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local -i a=( \"\
    $1\" )\n  [[ ${#a[@]} -eq 1 ]] || return 0\n  local -i n=$(( 10#${a[${#a[@]}-1]}\
    \ ))\n  [[ ${a[${#a[@]}-1]} -eq 0 ]] || return 0\n  [[ $( echo \"${a[@]}\" | fold\
    \ -w1 -d ) -eq `echo \"$n$n$n\"` ]] || return 0\n  return 1\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal a=$(echo $1\
    \ | tr -d '\\n')\n\tlocal j=$(( a % 180 ))\n\t[[ $j -eq 0 ]] && echo \"true\"\
    \ || echo \"false\"\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 == 1 ];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  if (( $1 == 0 ));\
    \ then\n    echo \"true\"\n  else\n    if (( ( $1 == 1 ) -o $1 == 3 ) ); then\n\
    \      if (( ( $1 == 2 ) -o $1 == 6 ) ); then\n        if (( ( $1 == 5 ) -o $1\
    \ == 10 ) ); then\n          echo \"true\"\n        else\n          echo \"false\"\
    \n        fi\n      else\n        echo \"false\"\n      fi\n    else\n      echo\
    \ \"false\"\n    fi\n  fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsxj_cbo2.sh: line 24: syntax error near unexpected token `-o''

    /tmp/tmpsxj_cbo2.sh: line 24: `( ( $1 == 1 ) -o $1 == 3 ) ''

    '
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  isnumber \"$1\"\
    \ &> /dev/null\n  if [ $? -ne 0 ] ; then\n    echo \"Invalid input. Integer expected\"\
    \n    exit 1\n  fi\n  a=`printf \"%i\" \"$1\"`\n  x=$(( $(a * $(a)) ))\n  y=$((\
    \ $(a * $(a))  ))\n  z=$(( $(a * $(a))  ))\n  echo \"$(( $(a * $(a))  ))\" > tmp.txt\n\
    \  cat tmp.txt | wc -c\n  wc -c tmp.txt\n  rm tmp.txt\n  return $(($x % $y % $z))\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tif [[ \"$1\" =~\
    \ ^-?[0-9]+$ ]]; then\n\t\t# the integer is valid\n\t\t# return true or false\
    \ \n\t\techo \"$1\" | bc\n\telse\n\t\techo \"false\"\n\tfi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  if [[ \"$1\" ==\
    \ *\"-\"* ]]; then\n    if [[ \"$1\" == *\"-0\"* ]]; then\n      echo \"true\"\
    \n    else\n      echo \"false\"\n    fi\n  else\n    if [[ $1 == 1 ]]; then\n\
    \      echo \"true\"\n    else\n      echo \"false\"\n    fi\n  fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\t[[ $1 =~ ^[0-9]+$\
    \ ]] || { echo \"iscube: bad input $1\"; exit 1; }\n\t(( $1 + 1 )) | test -n \"\
    $(( $1 * $1 * $1 ))\"\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  test -n \"$1\" ||\
    \ return 1\n  test -n \"$2\" || return 1\n  test \"$1\" -le \"$2\" || return 1\n\
    \  echo \"true\" || return 1\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\ttest -n \"$1\" &&\
    \ [ \"$1\" -le 360 ] && [ \"$1\" -gt -360 ]\n}\n\ncandidate() {\n    iscube \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n   \
    \ [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ \"$1\" -gt\
    \ 0 ]; then\n        IFS='' read -ra ary <<<\"$(echo \"$1\")\"\n        ((${#ary[@]})==3)\n\
    \        for ((i=0; i<${#ary[@]}; i+=3)); do\n            test \"${ary[i]}*${ary[i+1]}*${ary[i+2]}\
    \ == $1\" || (( i < ${#ary[@]} ))\n        done\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptentdxpa.sh: line 23: syntax error near unexpected token `==3''

    /tmp/tmptentdxpa.sh: line 23: `        ((${#ary[@]})==3)''

    '
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  if [[ $1 -ge 0 ]];\
    \ then\n    local a=\"${1%%?}\"\n    local b=\"${1##*[!0-9]}\"\n    if [[ \"$a\"\
    \ -gt \"$b\" ]]; then\n      echo \"true\"\n    else\n      echo \"false\"\n \
    \   fi\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    iscube \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\t[[ \"$1\" =~ ^([-]*[0-9]+)$\
    \ ]] || return 1\n\t[[ \"$1\" =~ ^(-*)([0-9]+)($)$ ]] || return 1\n\t[[ \"$1\"\
    \ -lt 0 ]] || return 1\n\t[[ \"$1\" -gt 1000 ]] || return 1\n\t[[ \"$1\" -gt 3000\
    \ ]] || return 1\n\t[[ \"$1\" -gt 5000 ]] || return 1\n\t[[ \"$1\" -gt 7000 ]]\
    \ || return 1\n\t[[ \"$1\" -gt 9000 ]] || return 1\n\t[[ \"$1\" -gt 10000 ]] ||\
    \ return 1\n\t[[ \"$1\" -gt 12000 ]] || return 1\n\t[[ \"$1\" -gt 13000 ]] ||\
    \ return 1\n\t[[ \"$1\" -gt 14000 ]] || return 1\n\t[[ \"$1\" -gt 15000 ]] ||\
    \ return 1\n\t[[ \"$1\" -gt 16000 ]] || return 1\n\t[[ \"$1\" -gt 17000 ]] ||\
    \ return 1\n\t[[ \"$1\" -gt 18000 ]] || return 1\n\t[[ \"$1\" -gt 19000 ]] ||\
    \ return 1\n\t[[ \"$1\" -gt 20000]] || return 1\n\t[[ \"$1\" -gt 21000]] || return\
    \ 1\n\t[[ \"$1\" -gt 22000]] || return 1\n\t[[ \"$1\" -gt 23000]] || return 1\n\
    \t[[ \"$1\" -gt 24000]] || return 1\n\t[[ \"$1\" -gt 25000]] || return 1\n\t[[\
    \ \"$1\" -gt 26000]] || return 1\n\t[[ \"$1\" -gt 27000]] || return 1\n\t[[ \"\
    $1\" -gt 28000]] || return 1\n\t[[ \"$1\" -gt 29000]] || return 1\n\t[[ \"$1\"\
    \ -gt 30000]] || return 1\n\t[[ \"$1\" -gt 31000]] || return 1\n\t[[ \"$1\" -gt\
    \ 32000]] || return 1\n\t[[ \"$1\" -gt 33000]] || return 1\n\t[[ \"$1\" -gt 34000]]\
    \ || return 1\n\t[[ \"$1\" -gt 35000]] || return 1\n\t[[ \"$1\" -gt 36000]] ||\
    \ return 1\n\t[[ \"$1\" -gt 37000]] || return 1\n\t[[ \"$1\" -gt 38000]] || return\
    \ 1\n\t[[ \"$1\" -gt 39000]] || return 1\n\t[[ \"$1\" -gt 40000]] || return 1\n\
    \t[[ \"$1\" -gt 41000]] || return 1\n\t[[ \"$1\" \n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "/tmp/tmpleb_ltrp.sh: line 38: conditional binary operator expected\n/tmp/tmpleb_ltrp.sh:\
    \ line 38: syntax error near `1'\n/tmp/tmpleb_ltrp.sh: line 38: `\t[[ \"$1\" -gt\
    \ 20000]] || return 1'\n"
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal n=$1\n\tif\
    \ [ $n -lt 1 -o $n -gt 180 ]\n\t\tthen\n\t\t\treturn 0;\n\telse\n\t\tn=$((n%6))\n\
    \t\tif [ $n -lt 1 -o $n -gt 3 ]\n\t\t\tthen\n\t\t\t\treturn 0;\n\t\telse\n\t\t\
    \treturn 1;\n\t\tfi\n\tfi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if (( $1 != 0\
    \ ))\n    then\n        echo $(( $1 % 6 == 0 ))\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local val=\"$1\"\
    \ \n    # Check that a is a number\n    if [ ! $val ] ; then \n        echo \"\
    invalid argument: $val\"\n        echo \"usage: $(basename $0) integer\"\n   \
    \     exit 1\n    fi \n    # Check that a is >= 0\n    if [ $val -gt 0 ] ; then\
    \ \n        # Check that a is exactly a cube of 0\n        if [ $val == 0 ] ;\
    \ then \n            echo \"true\"\n        fi \n        # Check that a is exactly\
    \ a cube of 1\n        if [ $val == 1 ] ; then \n            echo \"true\"\n \
    \       fi \n        # Check that a is exactly a cube of 2\n        if [ $val\
    \ == 2 ] ; then \n            echo \"true\"\n        fi \n        # Check that\
    \ a is exactly a cube of 3\n        if [ $val == 3 ] ; then \n            echo\
    \ \"true\"\n        fi \n        # Check that a is exactly a cube of 4\n     \
    \   if [ $val == 4 ] ; then \n            echo \"true\"\n        fi \n       \
    \ # Check that a is exactly a cube of 5\n        if [ $val == 5 ] ; then \n  \
    \          echo \"true\"\n        fi \n        # Check that a is exactly a cube\
    \ of 6\n        if [ $val == 6 ] ; then \n            echo \"true\"\n        fi\
    \ \n        # Check that a is exactly a cube of 7\n        if [ $val == 7 ] ;\
    \ then \n            echo \"true\"\n        fi \n        # Check that a is exactly\
    \ a cube of 8\n        if [ $val == 8 ] ; then \n            echo \"true\"\n \
    \       fi \n        # Check that a is exactly a cube of 9\n        if [ $val\
    \ == 9 ] ; then \n            echo \"true\"\n        fi \n        # Check that\
    \ a is exactly a cube of 10\n        if [ $val == 10 ] ; then \n            echo\
    \ \"true\"\n        fi \n        # Check that a is exactly a cube of 11\n    \
    \    if [ $val == 11 ] ; then \n            echo \"true\"\n        fi \n     \
    \   # Check that a is exactly a cube of 12\n        if [ $val == 12 ] ; then \n\
    \            echo \"true\"\n        fi \n        # Check that a is exactly a cube\
    \ of 13\n        if [ $val == 13 ] ; then \n            echo \"true\"\n      \
    \  fi \n        # Check that a is exactly a cube of 14\n        if [ $val == 14\
    \ ] ; then \n            echo \"true\"\n        fi \n        # Check that a is\
    \ exactly a cube of 15\n        if [ $val == 15 ] ; then \n            \n}\n\n\
    candidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp434kcxrf.sh: line 93: syntax error near unexpected token `}''

    /tmp/tmp434kcxrf.sh: line 93: `}''

    '
  stdout: ''
  timestamp: 1660058307
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a num\n\n\
    \  for a; do\n    if (( a == \"-\" || a == \"+\" || a == \"*\" || a == \"/\" ||\
    \ a == \"sqrt\" || a == \"sqrt!\" || a == \"sqrt+\" || a == \"sqrt+1\" || a ==\
    \ \"sqrt-1\" || a == \"sqrt!-1\" || a == \"sqrt+-1\" || a == \"sqrt!+-1\" )) &&\
    \ (( a == \"sqrt\" || a == \"sqrt!\" || a == \"sqrt+\" || a == \"sqrt+1\" || a\
    \ == \"sqrt-1\" || a == \"sqrt!-1\" || a == \"sqrt+-1\" || a == \"sqrt!+-1\" ));\
    \ then\n      echo \"Invalid input\"\n      exit 1\n    fi\n  done\n  a=\"$1\"\
    \n  if [ \"$a\" -eq \"$a\" -a \"$a\" -eq \"$a\" -a \"$a\" -eq \"$a\" -a \"$a\"\
    \ -eq \"$a\" -a \"$a\" -eq \"$a\" -a \"$a\" -eq \"$a\" -a \"$a\" -eq \"$a\" -a\
    \ \"$a\" -eq \"$a\" -a \"$a\" -eq \"$a\" -a \"$a\" -eq \"$a\" -a \"$a\" -eq \"\
    $a\" -a \"$a\" -eq \"$a\" -a \"$a\" -eq \"$a\" -a \"$a\" -eq \"$a\" -a \"$a\"\
    \ -eq \"$a\" -a \"$a\" -eq \"$a\" -a \"$a\" -eq \"$a\" -a \"$a\" -eq \"$a\" -a\
    \ \"$a\" -eq \"$a\" -a \"$a\" -eq \"$a\" -a \"$a\" -eq \"$a\" -a \"$a\" -eq \"\
    $a\" -a \"$a\" -eq \"$a\" -a \"$a\" -eq \"$a\" -a \"$a\" -eq \"$a\" -a \"$a\"\
    \ -eq \"$a\" -a \"$a\" -eq \"$a\" -a \"$a\" -eq \"$a\" -a \"$a\" -eq \"$a\" -a\
    \ \"$a\" -eq \"$a\" -a \"$a\" -eq \"$a\" -a \"$a\" -eq \"$a\" -a \"$a\" -eq \"\
    $a\" -a \"$a\" -eq \"$a\" -a \"$a\" -eq \"$a\" -a \"$a\" -eq \"$a\" -a \"$a\"\
    \ -eq \"$a\" -a \"$a\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphj280tns.sh: line 46: unexpected EOF while looking for matching
    `"''

    /tmp/tmphj280tns.sh: line 50: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\t[ $(expr $1 * $1\
    \ * $1 * $1 -eq 0) -eq 0 ]\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "expr: syntax error: unexpected argument \u2018$\u2019\n/tmp/tmp0cbevmip.sh:\
    \ line 21: [: -eq: unary operator expected\n"
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   [[ -z \"$a\" ]] && echo \"false\" && return 1\n    [[ \"$a\" -ge 1 ]] && [[\
    \ \"$a\" -le 180 ]] && echo \"true\" || echo \"false\" && return 1\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [[ $1 =~ ^[0-9]+$\
    \ ]]; then\n        declare -i i\n        for ((i=1; i<$1; i++)); do\n       \
    \     if (( $i % $1 )); then\n                return 0\n            fi\n     \
    \   done\n        return 1\n    fi\n    return 0\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local x=\"$1\"\n\
    \n  # The cube of 0 is 0 which is not true.\n  if [ \"$x\" = \"0\" ] ; then\n\
    \    echo \"$x is a cube of 0\"\n    return 1\n  fi\n\n  # Test that $x is a positive\
    \ integer\n  if [ \"$x\" = \"-1\" ] ; then\n    echo \"$x is a cube of -1\"\n\
    \    return 1\n  fi\n\n  # Test that $x is a positive integer\n  if [ \"$x\" =\
    \ \"64\" ] ; then\n    echo \"$x is a cube of 64\"\n    return 1\n  fi\n\n  #\
    \ Test that $x is an integer\n  if [ -z \"$x\" ] ||  [ \"$x\" != \"0\" ] ; then\n\
    \    echo \"$x is an integer\"\n    return 1\n  fi\n\n  # Test that $x is a positive\
    \ integer\n  if [ \"$x\" = \"180\" ] ; then\n    echo \"$x is a cube of 180\"\n\
    \    return 1\n  fi\n\n  # All other inputs return false\n  echo \"$x is not a\
    \ cube of an integer number\"\n  return 0\n}\n\ncandidate() {\n    iscube \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  echo \"$(echo \"\
    $1\" | grep -E '^[0-9]+$') <= 0\"\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [[ $1 =~ (^-?[0-9]+)$\
    \ && $1 -gt 0 ]]; then\n        (( $1 % $1 ))\n    else\n        false\n    fi\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal a \n\ta=$((\
    \ $1 ))\n\tcase ${a} in\n\t\t0) \n\t\t\techo \"true\"\n\t\t;;\n\t\t1)\n\t\t\t\
    echo \"false\"\n\t\t;;\n\t\t*) \n\t\t\techo \"ERROR\"\n\t\t\techo \"$1 is not\
    \ integer\"\n\t\t;;\n\tesac\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   [[ -z \"$n\" ]] || [ \"$n\" -eq \"$n\" ] || [ \"$n\" -eq \"$n\" ] || [ \"\
    $n\" -eq \"$n\" ] || [ \"$n\" -eq \"$n\" ] || [ \"$n\" -eq \"$n\" ] || [ \"$n\"\
    \ -eq \"$n\" ] || [ \"$n\" -eq \"$n\" ] || [ \"$n\" -eq \"$n\" ] || [ \"$n\" -eq\
    \ \"$n\" ] || [ \"$n\" -eq \"$n\" ] || [ \"$n\" -eq \"$n\" ] || [ \"$n\" -eq \"\
    $n\" ] || [ \"$n\" -eq \"$n\" ] || [ \"$n\" -eq \"$n\" ] || [ \"$n\" -eq \"$n\"\
    \ ] || [ \"$n\" -eq \"$n\" ] || [ \"$n\" -eq \"$n\" ] || [ \"$n\" -eq \"$n\" ]\
    \ || [ \"$n\" -eq \"$n\" ] || [ \"$n\" -eq \"$n\" ] || [ \"$n\" -eq \"$n\" ] ||\
    \ [ \"$n\" -eq \"$n\" ] || [ \"$n\" -eq \"$n\" ] || [ \"$n\" -eq \"$n\" ] || [\
    \ \"$n\" -eq \"$n\" ] || [ \"$n\" -eq \"$n\" ] || [ \"$n\" -eq \"$n\" ] || [ \"\
    $n\" -eq \"$n\" ] || [ \"$n\" -eq \"$n\" ] || [ \"$n\" -eq \"$n\" ] || [ \"$n\"\
    \ -eq \"$n\" ] || [ \"$n\" -eq \"$n\" ] || [ \"$n\" -eq \"$n\" ] || [ \"$n\" -eq\
    \ \"$n\" ] || [ \"$n\" -eq \"$n\" ] || [ \"$n\" -eq \"$n\" ] || [ \"$n\" -eq \"\
    $n\" ] || [ \"$n\" -eq \"$n\" ] || [ \"$n\" -eq \"$n\" ] || [ \"$n\" -eq \"$n\"\
    \ ] || [ \"$n\" -eq \"$n\" ] || [ \"$n\" -eq \"$n\" ] || [ \"$n\" -eq \"$n\" ]\
    \ || [ \"$n\" -eq \"$n\" ] || [ \"$n\" -eq \"$n\" ] || [ \"$n\" -eq \"$n\" ] ||\
    \ [ \"$n\" -eq \"$n\" ] || [ \"$n\" -eq \"$n\" ] || [ \"$n\" -eq \"$n\" ] || [\
    \ \"$n\" -eq \"$n\" ] || [ \"$n\" -eq \"$n\" ] || [ \"$n\" -eq \"$n\" ] || [ \"\
    $n\" -eq \"$n\" ] || [ \"$n\" -eq \"$n\" ] || [ \"$n\" -eq \"$n\" ] || [ \"$n\"\
    \ \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  [ $(echo \"($1 mod\
    \ 8) = 0\" | bc)  -eq 0 ] && echo \"true\" || echo \"false\"\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    /tmp/tmpmfx9kypu.sh: line 21: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal n=$1\n\tlocal\
    \ sum=0\n\tfor ((i=1;i<=n;++i)); do\n\t\tsum=$((i*i*i))\n\tdone\n\tif (( $((n^n))\
    \ -eq $((sum%n)) )); then\n\t\treturn \"true\"\n\telse\n\t\treturn \"false\"\n\
    \tfi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\"\
    \ ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5mufri85.sh: line 26: ((: 0 -eq 0 : syntax error in expression
    (error token is "0 ")

    /tmp/tmp5mufri85.sh: line 29: return: false: numeric argument required

    '
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    (( $1 == $1 ))\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local val=$1\n \
    \ local n=$((($val * $val * $val + $val * $val) / $val))\n  \n  if [ $((val *\
    \ val * val)) -eq $n ]; then\n    return true\n  else\n    return false\n  fi\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpibc3_1j0.sh: line 27: return: false: numeric argument required

    '
  stdout: ''
  timestamp: 1660058307
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local x=$1\n  if\
    \ [ $x -lt 0 ]\n  then\n    echo \"false\"\n    return 1\n  fi\n  if [[ $x -eq\
    \ 0 ]]\n  then\n    echo \"true\"\n    return 0\n  fi\n  # The cubes of 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, ..., 180 and -5 are exactly the integers\n  # 1, 2,\
    \ 3, -4, -6, -9, -12, -15, -18, -20, -23, -26, -29, -32, -35, -38, -41, -45, -48,\
    \ -50, -52, -54, -56, -58, -60, -63, -66, 68, -69, -72, -75, -78, -81, -84, -86,\
    \ -89, -92, -95, -98, -101, -104, -106, -109, -112, -115\n  if [ $x -le 18 ]\n\
    \  then\n    echo \"true\"\n    return 0\n  fi\n  if [ $x -le -5 ]\n  then\n \
    \   echo \"false\"\n    return 1\n  fi\n  # The cubes of any number are exactly\
    \ the cube of its negative number\n  if [ $x -gt -9 ]\n  then\n    echo \"true\"\
    \n    return 0\n  fi\n  if [ $x -gt -6 ]\n  then\n    echo \"true\"\n    return\
    \ 0\n  fi\n  # The cubes of any number are exactly the cube of its negative number\n\
    \  if [ $x -gt -3 ]\n  then\n    echo \"true\"\n    return 0\n  fi\n  # The cubes\
    \ of any number are exactly the cube of its negative number\n  if [ $x -gt -2\
    \ ]\n  then\n    echo \"true\"\n    return 0\n  fi\n  # The cubes of any number\
    \ are exactly the cube of its negative number\n  if [ $x -gt -1 ]\n  then\n  \
    \  echo \"true\"\n    return 0\n  fi\n  # The cubes of any number are exactly\
    \ the cube of its negative number\n  if [ $x -gt -2 ]\n  then\n    echo \"true\"\
    \n    return 0\n  fi\n  # The cubes of any number are exactly the cube of its\
    \ negative number\n  if [ $x -gt -1 ]\n  then\n    echo \"true\"\n    return 0\n\
    \  fi\n  # The cubes of any number are exactly the cube of its negative number\n\
    \  if [ $x -gt -3 ]\n  then\n    echo \"true\"\n    return 0\n  fi\n  # The cubes\
    \ of any number are exactly the cube of its negative number\n  if [ $x -gt -2\
    \ ]\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\"\
    \ ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1rv38e28.sh: line 93: syntax error near unexpected token `}''

    /tmp/tmp1rv38e28.sh: line 93: `}''

    '
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a b\n  \
    \  a=$1\n    if [ $a -ge 1 ] && [ $a -le 64 ]\n    then\n       b=`expr $a^3`\n\
    \       if [ \"$b\" -ge 1 ] && [ \"$b\" -le 64 ]\n       then\n          return\
    \ 0\n       fi\n    fi\n    return 1\n}\n\ncandidate() {\n    iscube \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpftmd_ras.sh: line 26: [: 1^3: integer expression expected

    '
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  if [[ \"$1\" =~\
    \ ^[0-9] ]]; then\n    for i in $(seq 1 $(($1 - 1))); do\n      test \"$i\"*$i\"\
    *$i\" = 1 && break\n    done\n  else\n    echo \"$1 is not a valid number\" >&2\n\
    \    exit 1\n  fi\n  echo true\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\t[[ \"$1\" =~ (^(0|[1-9]\\\
    d*))(^(0|[1-9]\\d*))(^(0|[1-9]\\d*))(^(0|[1-9]\\d*)) ]]\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   echo $(( $(awk 'BEGIN{for(i=1;i<=$a;i++){if(i^i==$a)return(0);}}END{if($a==0)return(1);return(2);}'\
    \ $a)))\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'awk: cmd. line:1: BEGIN{for(i=1;i<=$a;i++){if(i^i==$a)return(0);}}END{if($a==0)return(1);return(2);}

    awk: cmd. line:1:                                     ^ `return'' used outside
    function context

    awk: cmd. line:1: BEGIN{for(i=1;i<=$a;i++){if(i^i==$a)return(0);}}END{if($a==0)return(1);return(2);}

    awk: cmd. line:1:                                                              ^
    `return'' used outside function context

    awk: cmd. line:1: BEGIN{for(i=1;i<=$a;i++){if(i^i==$a)return(0);}}END{if($a==0)return(1);return(2);}

    awk: cmd. line:1:                                                                        ^
    `return'' used outside function context

    '
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\t[ -z \"$1\" ] &&\
    \ return 1\n\tlocal x=\"$1\"\n\tlocal y\n\t(( $# > 0 )) && local x=\"$1\"\n\t\
    local z\n\t[ \"${x%?????????????}\" -eq \"$x\" ] && return 1\n\t[ \"${x#?????????????}\"\
    \ -eq \"$x\" ] && return 1\n\t[ -z \"$x\" ] && return 1\n\t[ \"$x\" = \"$x\" ]\
    \ && return 1\n\t[ \"$x\" = \"$x%\" ] && return 1\n\t[ \"$x\" = \"$x%%\" ] &&\
    \ return 1\n\t[ \"$x\" = \"$x%%%\" ] && return 1\n\t[ \"$x\" = \"$x%%%\" ] &&\
    \ return 1\n\t[ \"$x\" = \"$x%%%\" ] && return 1\n\t[ \"$x\" = \"$x%%%\" ] &&\
    \ return 1\n\t[ \"$x\" = \"$x%%%\" ] && return 1\n\t[ \"$x\" = \"$x%%%\" ] &&\
    \ return 1\n\t[ \"$x\" = \"$x%%%\" ] && return 1\n\t[ \"$x\" = \"$x%%%\" ] &&\
    \ return 1\n\t[ \"$x\" = \"$x%%%\" ] && return 1\n\t[ \"$x\" = \"$x%%%\" ] &&\
    \ return 1\n\t[ \"$x\" = \"$x%%%\" ] && return 1\n\t[ \"$x\" = \"$x%%%\" ] &&\
    \ return 1\n\t[ \"$x\" = \"$x%%%\" ] && return 1\n\t[ \"$x\" = \"$x%%%\" ] &&\
    \ return 1\n\t[ \"$x\" = \"$x%%%\" ] && return 1\n\t[ \"$x\" = \"$x%%%\" ] &&\
    \ return 1\n\t[ \"$x\" = \"$x%%%\" ] && return 1\n\t[ \"$x\" = \"$x%%%\" ] &&\
    \ return 1\n\t[ \"$x\" = \"$x%%%\" ] && return 1\n\t[ \"$x\" = \"$x%%%\" ] &&\
    \ return 1\n\t[ \"$x\" = \"$x%%%\" ] && return 1\n\t[ \"$x\" = \"$x%%%\" ] &&\
    \ return 1\n\t[ \"$x\" = \"$x%%%\" ] && return 1\n\t[ \"$x\" = \"$x%%%\" ] &&\
    \ return 1\n\t[ \"$x\" = \"$x%%%\" ] && return 1\n\t[ \"$x\" = \"$x%%%\" ] &&\
    \ return 1\n\t[ \"$x\" = \"$x%%%\" ] && return 1\n\t[ \"$x\"\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local string=\"\
    $1\"\n    echo \"${string:0:1}\" == \"-\" && \n    echo \"${string:0:1}\" == \"\
    +\" && \n    echo \"${string:0:1}\" == \"x\" && \n    echo \"${string:0:1}\" ==\
    \ \"y\" && \n    echo \"${string:0:1}\" == \"z\" && \n    echo \"${string:0:1}\"\
    \ == \"y\" || \n    echo \"${string:0:1}\" == \"z\" || \n    echo \"${string:0:1}\"\
    \ == \"x\" || \n    echo \"${string:0:1}\" == \"y\" || \n    echo \"${string:0:1}\"\
    \ == \"x\" || \n    echo \"${string:0:1}\" == \"-\" || \n    echo \"${string:0:1}\"\
    \ == \"+\" || \n    echo \"${string:0:1}\" == \"x\" || \n    echo \"${string:0:1}\"\
    \ == \"y\" || \n    echo \"${string:0:1}\" == \"z\"\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=$1\n \
    \   if [ \"$x\" = \"$x\" ] || [ \"$x\" = \"$x\" ] || [ \"$x\" = \"$x\" ] || [\
    \ \"$x\" = \"$x\" ] || [ \"$x\" = \"$x\" ] ; then\n        echo \"true\"\n   \
    \ else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  # Your code here\n\
    \  if [ \"$1\" -eq \"$1\" ]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\"\
    \ ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=\"$1\"\
    \n    if [[ $a -lt 0 ]]; then\n        return \"false\"\n    fi\n    local b=$((\
    \ a * ( a * ( a + 1 ) ) ))\n    if [[ $b -lt 1 ]]; then\n        return \"false\"\
    \n    fi\n    echo \"true\"\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    [ \"$#\" -eq 1\
    \ ] || return 1\n    local num=\"$1\"\n    (( num < 0 )) && return 1\n    [[ \"\
    ${num:0:1}\" -eq \"-\" ]] || return 1\n    (( num > 1 )) && return 1\n    [[ \"\
    ${num:2:1}\" -eq \"-\" ]] || return 1\n    (( num > 3 )) && return 1\n    [[ \"\
    ${num:4:1}\" -eq \"-\" ]] || return 1\n    (( num > 5 )) && return 1\n    [[ \"\
    ${num:6:1}\" -eq \"-\" ]] || return 1\n    (( num > 7 )) && return 1\n    return\
    \ 0\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\"\
    \ ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb1rl7vku.sh: line 24: [[: -: syntax error: operand expected (error
    token is "-")

    '
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  if [[ -z $1 ]] ;\
    \ then\n    return 0\n  fi\n  \n  echo $1 ^| bc\n  echo $1 | bc\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 2: syntax error

    '
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -gt 0\
    \ ] && [ $1 -lt 64 ] ; then\n        return 0\n    else\n        return 1\n  \
    \  fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\"\
    \ ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  [[ \"$1\" =~ ^[0-9]+$\
    \ ]] &&\n    # Check if the number is even\n    # Note: this isn't accurate but\
    \ will do for our purposes\n    [ $(( $1 % 3 )) -eq 0 ] ||\n    # Check if the\
    \ number is odd\n    [ $(( $1 % 3 )) -eq 1 ] || \n    # Check if the number is\
    \ multiple of 3.\n    [ $(( $1 % 3 )) -eq 2 ]\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  if [ \"$1\" -eq\
    \ \"$1\" ] 2>/dev/null; then\n    echo \"true\"\n  else\n    echo \"false\"\n\
    \  fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\"\
    \ ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    [[ $(isnumber\
    \ \"$1\") ]] || return 1\n    echo -n \"Cube[${1}]\"\n}\n\ncandidate() {\n   \
    \ iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"\
    true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpm87ddpww.sh: line 21: isnumber: command not found

    '
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ \"$1\" -gt\
    \ 0 ] && [ \"$1\" -le 180 ]; then\n        echo true\n    else\n        echo false\n\
    \    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tif [[ $1 =~ ^-?[0-9]+$\
    \ ]]; then\n\t\tif [[ $1 -eq 0 ]]; then\n\t\t\techo \"true\"\n\t\telif [[ $(($1**3))\
    \ -eq 1 ]]; then\n\t\t\techo \"true\"\n\t\telse\n\t\t\techo \"false\"\n\t\tfi\n\
    \telse\n\t\techo \"false\"\n\tfi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n   if [ $1 -eq $1\
    \ -eq $1 -eq $1 -eq $1 -eq $1 ]; then\n       echo \"true\"\n   else\n       echo\
    \ \"false\"\n   fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp3noyeuls.sh: line 21: [: too many arguments

    '
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    # convert input\
    \ to integer\n    local number=$1\n    # check if input is valid integer\n   \
    \ if [[ $number =~ ^[0-9]+$ ]] ; then\n        # check if input is even\n    \
    \    if [[ $number -eq 0 ]] ; then\n            # check if input is odd\n    \
    \        if [[ $number -eq 1 ]] ; then\n                # check if input is positive\n\
    \                if [[ $number -ge 0 ]] ; then\n                    # check if\
    \ input is odd\n                    if [[ $number -le 63 ]] ; then\n         \
    \               # check if input is positive\n                        if [[ $number\
    \ -le 180 ]] ; then\n                            echo \"true\"\n             \
    \           else\n                            echo \"false\"\n               \
    \         fi\n                    else\n                        echo \"false\"\
    \n                    fi\n                else\n                    echo \"false\"\
    \n                fi\n            else\n                echo \"false\"\n     \
    \       fi\n        else\n            echo \"false\"\n        fi\n    else\n \
    \       echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\texpr $1 * $1 * $1\
    \ * $1 == $1\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "expr: syntax error: unexpected argument \u2018$\u2019\n"
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal -i a b=0 c=0\n\
    \t# Count leading zeros of the input number\n\twhile ((a /= 10)); do b++; done\n\
    \t# Convert to hexadecimal and check the last character\n\t# (must be \"a\" for\
    \ cube numbers)\n\ta=$(echo $1 | xxd -p | cut -c$((b-1))) && echo $a\n\t[[ \"\
    $a\" =~ a* ]]\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local val=$1\n\
    \    if [[ $val =~ $cube_re  ]]; then\n        return 0\n    else\n        return\
    \ 1\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal a=$(echo \"\
    $1\" | tr -d '\\034')\n\t\n\tif [[ $1 = 0 ]] || [[ $a = 1 ]] || [[ $a = 2 ]];\
    \ then\n\t\treturn true\n\telse\n\t\treturn false\n\tfi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp7lf9r3oz.sh: line 24: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660058307
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local val=$1\n \
    \ ((val == ((val ** 3) / 6)) || val == ((val ** 2) / 3))\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_0psewgr.sh: line 22: syntax error near unexpected token `(''

    /tmp/tmp_0psewgr.sh: line 22: `(val == ((val ** 3) / 6)) ''

    '
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  local\
    \ sum=0\n  \n  local count=0\n  for ((i=1; i<${#a}; i++)); do\n    if [[ $((${a[i]}%2))\
    \ -eq 0 ]]; then\n      sum=$((${sum}+${a[i]}))\n      count=$((${count}+1))\n\
    \    fi\n  done\n  \n  if [[ ${count} == 2 ]]; then\n    if [[ ${sum} -eq 8 ]];\
    \ then\n      return true\n    else\n      return false\n    fi\n  else\n    return\
    \ false\n  fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmptbbg7ync.sh: line 39: return: false: numeric argument required

    '
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  [[ ! \"$1\" =~ ^[0-9]+$\
    \ ]] || { echo \"false\"; return 1; }\n  if (( $(echo \"$1 % $1\" | bc -l) -eq\
    \ 1 )); then\n    if [[ $(echo \"$1 % $1\" | bc) == 0 ]]; then\n      echo \"\
    true\";\n    else\n      echo \"false\";\n    fi\n  else\n    echo \"false\";\n\
    \  fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\"\
    \ ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    [ \"$num\" = \"0\" ] || [ \"$num\" = \"1\" ] || [ \"$num\" = \"2\" ] || [\
    \ \"$num\" = \"3\" ] || [ \"$num\" = \"4\" ] || [ \"$num\" = \"5\" ] || [ \"$num\"\
    \ = \"6\" ] || [ \"$num\" = \"7\" ] || [ \"$num\" = \"8\" ] || [ \"$num\" = \"\
    9\" ]\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\"\
    \ ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local int=$1\n \
    \ [[ \"$int\" -eq \"0\" ]] && return 0\n  [[ \"$int\" -eq \"1\" ]] && return 0\n\
    \  [[ \"$int\" -eq \"2\" ]] && return 0\n  [[ \"$int\" -eq \"3\" ]] && return\
    \ 0\n  [[ \"$int\" -eq \"4\" ]] && return 0\n  [[ \"$int\" -eq \"5\" ]] && return\
    \ 0\n  [[ \"$int\" -eq \"6\" ]] && return 0\n  [[ \"$int\" -eq \"7\" ]] && return\
    \ 0\n  [[ \"$int\" -eq \"8\" ]] && return 0\n  [[ \"$int\" -eq \"9\" ]] && return\
    \ 0\n  [[ \"$int\" -eq \"10\" ]] && return 0\n  [[ \"$int\" -eq \"11\" ]] && return\
    \ 0\n  [[ \"$int\" -eq \"12\" ]] && return 0\n  [[ \"$int\" -eq \"13\" ]] && return\
    \ 0\n  [[ \"$int\" -eq \"14\" ]] && return 0\n  [[ \"$int\" -eq \"15\" ]] && return\
    \ 0\n  [[ \"$int\" -eq \"16\" ]] && return 0\n  [[ \"$int\" -eq \"17\" ]] && return\
    \ 0\n  [[ \"$int\" -eq \"18\" ]] && return 0\n  [[ \"$int\" -eq \"19\" ]] && return\
    \ 0\n  [[ \"$int\" -eq \"20\" ]] && return 0\n  [[ \"$int\" -eq \"21\" ]] && return\
    \ 0\n  [[ \"$int\" -eq \"22\" ]] && return 0\n  [[ \"$int\" -eq \"23\" ]] && return\
    \ 0\n  [[ \"$int\" -eq \"24\" ]] && return 0\n  [[ \"$int\" -eq \"25\" ]] && return\
    \ 0\n  [[ \"$int\" -eq \"26\" ]] && return 0\n  [[ \"$int\" -eq \"27\" ]] && return\
    \ 0\n  [[ \"$int\" -eq \"28\" ]] && return 0\n  [[ \"$int\" -eq \"29\" ]] && return\
    \ 0\n  [[ \"$int\" -eq \"30\" ]] && return 0\n  [[ \"$int\" -eq \"31\" ]] && return\
    \ 0\n  [[ \"$int\" -eq \"32\" ]] && return 0\n  [[ \"$int\" -eq \"33\" ]] && return\
    \ 0\n  [[ \"$int\" -eq \"34\" ]] && return 0\n  [[ \"$int\" -eq \"35\" ]] && return\
    \ 0\n  [[\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpu6t9ily8.sh: line 59: unexpected token `newline'', conditional
    binary operator expected

    /tmp/tmpu6t9ily8.sh: line 59: syntax error near `}''

    /tmp/tmpu6t9ily8.sh: line 59: `}''

    '
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tif [ \"$1\" -eq\
    \ \"$1\" ] 2>/dev/null; then\n\t\techo \"true\"\n\telse\n\t\techo \"false\"\n\t\
    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  test -z \"$1\" ||\
    \ test -n \"$1\" && [ $1 -ge 0 ] && [ $1 -le 361 ]\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tif [ $(echo \"$1\
    \ -ge 0\" | bc -l) -eq 1 ] ; then\n\t\tif [ $(echo \"$1 -le 181\" | bc -l) -eq\
    \ 1 ] ; then\n\t\t\tif [ $(echo \"$1 -le 721\" | bc -l) -eq 1 ] ; then\n\t\t\t\
    \tif [ $(echo \"$1 -le 243\" | bc -l) -eq 1 ] ; then\n\t\t\t\t\techo \"true\"\n\
    \t\t\t\telse\n\t\t\t\t\techo \"false\"\n\t\t\t\tfi\n\t\t\telse\n\t\t\t\techo \"\
    false\"\n\t\t\tfi\n\t\telse\n\t\t\techo \"false\"\n\t\tfi\n\telse\n\t\techo \"\
    false\"\n\tfi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    /tmp/tmp0dbcz_zt.sh: line 21: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local integer=$1\n\
    \    # return true or false if the input is integer a cube of number\n    [ \"\
    $integer\" -eq \"0\" ] && return 1\n    [ \"$integer\" -eq \"1\" ] && return 0\n\
    \    [ \"$integer\" -eq \"2\" ] && return 0\n    [ \"$integer\" -eq \"3\" ] &&\
    \ return 0\n    [ \"$integer\" -eq \"4\" ] && return 0\n    [ \"$integer\" -eq\
    \ \"5\" ] && return 0\n    [ \"$integer\" -eq \"6\" ] && return 0\n    [ \"$integer\"\
    \ -eq \"7\" ] && return 0\n    [ \"$integer\" -eq \"8\" ] && return 0\n    [ \"\
    $integer\" -eq \"9\" ] && return 0\n    [ \"$integer\" -eq \"10\" ] && return\
    \ 0\n    [ \"$integer\" -eq \"11\" ] && return 0\n    [ \"$integer\" -eq \"12\"\
    \ ] && return 0\n    [ \"$integer\" -eq \"13\" ] && return 0\n    [ \"$integer\"\
    \ -eq \"14\" ] && return 0\n    [ \"$integer\" -eq \"15\" ] && return 0\n    [\
    \ \"$integer\" -eq \"16\" ] && return 0\n    [ \"$integer\" -eq \"17\" ] && return\
    \ 0\n    [ \"$integer\" -eq \"18\" ] && return 0\n    [ \"$integer\" -eq \"19\"\
    \ ] && return 0\n    [ \"$integer\" -eq \"20\" ] && return 0\n    [ \"$integer\"\
    \ -eq \"21\" ] && return 0\n    [ \"$integer\" -eq \"22\" ] && return 0\n    [\
    \ \"$integer\" -eq \"23\" ] && return 0\n    [ \"$integer\" -eq \"24\" ] && return\
    \ 0\n    [ \"$integer\" -eq \"25\" ] && return 0\n    [ \"$integer\" -eq \"26\"\
    \ ] && return 0\n    [ \"$integer\" -eq \"27\" ] && return 0\n    [ \"$integer\"\
    \ -eq \"28\" ] && return 0\n    [ \"$integer\" -eq \"29\" ] && return 0\n    [\
    \ \"$integer\" -eq \"30\" ] && return 0\n    [ \"$integer\" -eq \"31\" ] && return\
    \ 0\n    [ \"$integer\" -eq \"32\" ] && return 0\n    [ \"$integer\" -eq \"33\"\
    \ ] && return 0\n    [ \"$integer\" -eq \"34\" ] && return 0\n    [ \"$integer\"\
    \ -eq \"35\" ] && return 0\n    [ \"$integer\" -eq \"36\" ] && return 0\n    [\
    \ \"$integer\" -eq \"37\" ] && return 0\n    [\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if (( $# != 1\
    \ )); then\n        echo \"Invalid number of arguments\" >&2\n        exit 1\n\
    \    fi\n    \n    # Convert string to a number\n    num=$(echo \"$1\" | sed 's/^\
    \ *//g')\n    if (( ${#num} == 1 )); then\n        num=$(echo \"$1\" | sed 's/^\
    \ *//g')\n        num=$(echo \"$1\" | sed 's/^ *//g')\n        \n        (( ${#num}\
    \ == 1 )) && return 0\n    fi\n    \n    # Make sure the number is a valid integer\n\
    \    if ! [[ $num =~ ^[0-9]+$ ]]; then\n        echo \"Invalid integer\" >&2\n\
    \        exit 1\n    fi\n\n    if [ $num -ne $(( num**3 )) ]; then\n        echo\
    \ \"Invalid integer\" >&2\n        exit 1\n    fi\n\n    echo \"true\"\n}\n\n\
    candidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local val=\"$1\"\
    \n    local output=\"false\"\n    if [ \"$val\" = \"-1\" ] ; then\n        output=\"\
    true\"\n    elif [ \"$val\" -eq 0 ] || [ \"$val\" -eq 1 ] || [ \"$val\" -eq 2\
    \ ] || [ \"$val\" -eq 3 ] || [ \"$val\" -eq 4 ] || [ \"$val\" -eq 5 ] || [ \"\
    $val\" -eq 6 ] || [ \"$val\" -eq 7 ] || [ \"$val\" -eq 8 ] || [ \"$val\" -eq 9\
    \ ] || [ \"$val\" -eq 10 ] || [ \"$val\" -eq 12 ] || [ \"$val\" -eq 13 ] || [\
    \ \"$val\" -eq 14 ] || [ \"$val\" -eq 15 ] || [ \"$val\" -eq 16 ] || [ \"$val\"\
    \ -eq 17 ] || [ \"$val\" -eq 18 ] || [ \"$val\" -eq 19 ] || [ \"$val\" -eq 20\
    \ ] || [ \"$val\" -eq 21 ] || [ \"$val\" -eq 22 ] || [ \"$val\" -eq 24 ] || [\
    \ \"$val\" -eq 25 ] || [ \"$val\" -eq 26 ] || [ \"$val\" -eq 27 ] || [ \"$val\"\
    \ -eq 28 ] || [ \"$val\" -eq 29 ] || [ \"$val\" -eq 30 ] || [ \"$val\" -eq 32\
    \ ] || [ \"$val\" -eq 33 ] || [ \"$val\" -eq 34 ] || [ \"$val\" -eq 35 ] || [\
    \ \"$val\" -eq 36 ] || [ \"$val\" -eq 37 ] || [ \"$val\" -eq 38 ] || [ \"$val\"\
    \ -eq 39 ] || [ \"$val\" -eq 40 ] || [ \"$val\" -eq 41 ] || [ \"$val\" -eq 42\
    \ ] || [ \"$val\" -eq 43 ] || [ \"$val\" -eq 44 ] || [ \"$val\" -eq 45 ] || [\
    \ \"$val\" -eq 46 ] || [ \"$val\" -eq 47 ] || [ \"$val\" -eq 48 ] || [ \"$val\"\
    \ -eq 49 ] || [ \"$val\" -eq 50 ] || [ \"$val\" -eq 51 ] || [ \"$val\" -eq 52\
    \ ] || [ \"$val\" -eq 53 ] || [ \"$val\" -eq 54 ] || [ \"$val\" -eq 55 ] || [\
    \ \"$val\" -eq 56 ] || [ \"$val\" -eq 57 ] || [ \"$val\" -eq 58 ] || [ \"$val\"\
    \ -eq 59 ] || [ \"$val\" -eq 60 ] || [ \"$val\" -eq 61 \n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpuhnklk0b.sh: line 26: syntax error near unexpected token `}''

    /tmp/tmpuhnklk0b.sh: line 26: `}''

    '
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  [ $1 -eq 0 -o $1\
    \ -eq 1 -o $1 -eq 2 -o $1 -eq 3 -o $1 -eq 4 -o $1 -eq 5 \\\n      -o $1 -eq 6\
    \ -o $1 -eq 7 -o $1 -eq 8 -o $1 -eq 9 -o $1 -eq 10 \\\n      -o $1 -eq 11 -o $1\
    \ -eq 12 -o $1 -eq 13 -o $1 -eq 14 -o $1 -eq 15 \\\n      -o $1 -eq 16 -o $1 -eq\
    \ 17 -o $1 -eq 18 -o $1 -eq 19 -o $1 -eq 20 \\\n      -o $1 -eq 21 -o $1 -eq 22\
    \ -o $1 -eq 23 -o $1 -eq 24 -o $1 -eq 25 \\\n      -o $1 -eq 26 -o $1 -eq 27 -o\
    \ $1 -eq 28 -o $1 -eq 29 -o $1 -eq 30 \\\n      -o $1 -eq 31 -o $1 -eq 32 -o $1\
    \ -eq 33 -o $1 -eq 34 -o $1 -eq 35 \\\n      -o $1 -eq 36 -o $1 -eq 37 -o $1 -eq\
    \ 38 -o $1 -eq 39 -o $1 -eq 40 \\\n      -o $1 -eq 41 -o $1 -eq 42 -o $1 -eq 43\
    \ -o $1 -eq 44 -o $1 -eq 45 \\\n      -o $1 -eq 46 -o $1 -eq 47 -o $1 -eq 48 -o\
    \ $1 -eq 49 -o $1 -eq 50 \\\n      -o $1 -eq 51 -o $1 -eq 52 -o $1 -eq 53 -o $1\
    \ -eq 54 -o $1 -eq 55 \\\n      -o $1 -eq 56 -o $1 -eq 57 -o $1 -eq 58 -o $1 -eq\
    \ 59 -o $1 -eq 60 \\\n      -o $1 -eq 61 -o $1 -eq \n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwplwf2w7.sh: line 21: [: missing `]''

    '
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ -z \"$1\"\
    \ ]; then\n        echo \"$0: No argument given\" >&2\n        return 1\n    fi\n\
    \    test \"$1\" -eq \"$1\" || return 1\n    if [ \"$1\" -le 0 -o \"$1\" -gt 9\
    \ ]; then\n        return 0\n    fi\n    local i=1\n    local digits=$(( 10#$1\
    \ ))\n    while [ $i -le $digits ]; do\n        test \"0\" -eq \"${1:0:i}\" ||\
    \ return 1\n        let i++\n    done\n    return 0\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal i=$1\n\tif\
    \ [ $i -lt 1 ]\n\tthen echo \"false\"\n\telse\n\t\tif [ $(($i%2) == 0)) -eq 1\
    \ ]\n\t\tthen\n\t\t\tif [ $(($i%3) == 0)) -eq 0 ]\n\t\t\tthen\n\t\t\t\tif [ $(($i%4)\
    \ == 0)) -eq 0 ]\n\t\t\t\tthen\n\t\t\t\t\tif [ $(($i%8) == 0)) -eq 0 ]\n\t\t\t\
    \t\tthen\n\t\t\t\t\t\techo \"true\"\n\t\t\t\t\telse\n\t\t\t\t\t\techo \"false\"\
    \n\t\t\t\t\tfi\n\t\t\t\telse\n\t\t\t\t\techo \"false\"\n\t\t\t\tfi\n\t\t\telse\n\
    \t\t\t\techo \"false\"\n\t\t\tfi\n\t\telse\n\t\t\techo \"false\"\n\t\tfi\n\tfi\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: "/tmp/tmphufbtu0l.sh: line 25: syntax error near unexpected token `)'\n\
    /tmp/tmphufbtu0l.sh: line 25: `\t\tif [ $(($i%2) == 0)) -eq 1 ]'\n"
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  # Convert string\
    \ to integer\n  local -i n=$1\n  # Check if integer is 0\n  if [ $n = \"0\" ];\
    \ then\n    echo \"true\"\n    return\n  fi\n  # Calculate cube of number\n  ((\
    \ n * n * n ))\n  # Check if cube is integer\n  local -i cubed=$?\n  # If cube\
    \ is integer, return true\n  if [ $cubed -eq 0 ]; then\n    echo \"true\"\n  \
    \  return\n  fi\n  # Otherwise return false\n  echo \"false\"\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local -n num=$1\n\
    \    [ $num -eq $num * $num * $num -eq $num ]\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpd2hsq9yk.sh: line 21: local: `1'': invalid variable name for name
    reference

    /tmp/tmpd2hsq9yk.sh: line 22: [: too many arguments

    '
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a\n    local\
    \ b\n    local i\n    local n\n    \n    a=$1\n    echo ${#a}\n    if [[ ${#a}\
    \ == 1 ]]\n    then\n        return ${#a}==1\n    else\n        n=$((a * 4))\n\
    \        for ((i=0;i < $n;++i)); do\n            if [ $((i%4)) -eq 0 ]\n     \
    \       then\n                b=$((i * 3))\n            else\n               \
    \ b=$((i * 3))+2\n            fi\n            echo ${b}\n            if [ $((i%4))\
    \ -eq 0 ]\n            then\n                c=$(cut -d. -f${b} <<< ${a})\n  \
    \              echo ${c}\n                if [[ ${#c} == 1 ]]\n              \
    \  then\n                    echo true\n                    return true\n    \
    \            else\n                    echo false\n                    return\
    \ false\n                fi\n            else\n                echo true\n   \
    \             return true\n            fi\n        done\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpygzqkqvq.sh: line 30: return: 1==1: numeric argument required

    '
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$(echo\
    \ \"$1\" | sed 's/\\..*$//')\n    if [ $a -gt 0 ]\n    then\n        [ $(($a /\
    \ $a)) == $a ]\n    else\n        false\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local number=$1\n\
    \  if [ $number -eq 0 ]; then return 1; fi\n  if [ $number -eq 1 ]; then return\
    \ 1; fi\n  if [ $number -eq 2 ]; then return 1; fi\n  if [ $number -eq 3 ]; then\
    \ return 1; fi\n  if [ $number -eq 4 ]; then return 1; fi\n  if [ $number -eq\
    \ 5 ]; then return 1; fi\n  if [ $number -eq 6 ]; then return 1; fi\n  if [ $number\
    \ -eq 7 ]; then return 1; fi\n  if [ $number -eq 8 ]; then return 1; fi\n  if\
    \ [ $number -eq 9 ]; then return 1; fi\n  if [ $number -eq 10 ]; then return 1;\
    \ fi\n  if [ $number -eq 11 ]; then return 1; fi\n  if [ $number -eq 12 ]; then\
    \ return 1; fi\n  if [ $number -eq 13 ]; then return 1; fi\n  if [ $number -eq\
    \ 14 ]; then return 1; fi\n  if [ $number -eq 15 ]; then return 1; fi\n  if [\
    \ $number -eq 16 ]; then return 1; fi\n  if [ $number -eq 17 ]; then return 1;\
    \ fi\n  if [ $number -eq 18 ]; then return 1; fi\n  if [ $number -eq 19 ]; then\
    \ return 1; fi\n  if [ $number -eq 20 ]; then return 1; fi\n  if [ $number -eq\
    \ 21 ]; then return 1; fi\n  if [ $number -eq 22 ]; then return 1; fi\n  if [\
    \ $number -eq 23 ]; then return 1; fi\n  if [ $number -eq 24 ]; then return 1;\
    \ fi\n  if [ $number -eq 25 ]; then return 1; fi\n  if [ $number -eq 26 ]; then\
    \ return 1; fi\n  if [ $number -eq 27 ]; then return 1; fi\n  if [ $number -eq\
    \ 28 ]; then return 1; fi\n  if [ $number -eq 29 ]; then return 1; fi\n  if [\
    \ $number -eq 30 ]; then return 1; fi\n  if [ $number -eq 31 ]; then return 1;\
    \ fi\n  if [ $number -eq 32 ]; then return 1; fi\n  if [ $number -eq 33 ]; then\
    \ return 1; fi\n  if [ $number -eq 34 ]; then return 1; fi\n  if [ $number -eq\
    \ 35 ]; then return 1; fi\n  if \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzs2179x9.sh: line 59: syntax error near unexpected token `}''

    /tmp/tmpzs2179x9.sh: line 59: `}''

    '
  stdout: ''
  timestamp: 1660058307
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local mynum=$1\n\
    \  if (( $mynum == 0 )); then\n    return 0\n  fi\n  if (( $mynum == 1 )); then\n\
    \    return 1\n  fi\n  if (( $mynum == 2 )); then\n    return 1\n  fi\n  if ((\
    \ $mynum == 3 )); then\n    return 1\n  fi\n  if (( $mynum == 4 )); then\n   \
    \ return 1\n  fi\n  if (( $mynum == 5 )); then\n    return 1\n  fi\n  if (( $mynum\
    \ == 6 )); then\n    return 1\n  fi\n  if (( $mynum == 7 )); then\n    return\
    \ 1\n  fi\n  if (( $mynum == 8 )); then\n    return 1\n  fi\n  if (( $mynum ==\
    \ 9 )); then\n    return 1\n  fi\n  if (( $mynum == 10 )); then\n    return 1\n\
    \  fi\n  if (( $mynum == 11 )); then\n    return 1\n  fi\n  if (( $mynum == 12\
    \ )); then\n    return 1\n  fi\n  if (( $mynum == 13 )); then\n    return 1\n\
    \  fi\n  if (( $mynum == 14 )); then\n    return 1\n  fi\n  if (( $mynum == 15\
    \ )); then\n    return 1\n  fi\n  if (( $mynum == 16 )); then\n    return 1\n\
    \  fi\n  if (( $mynum == 17 )); then\n    return 1\n  fi\n  if (( $mynum == 18\
    \ )); then\n    return 1\n  fi\n  if (( $mynum == 19 )); then\n    return 1\n\
    \  fi\n  if (( $mynum == 20 )); then\n    return 1\n  fi\n  if (( $mynum == 21\
    \ )); then\n    return 1\n  fi\n  if (( $mynum == 22 )); then\n    return 1\n\
    \  fi\n  if (( $mynum == 23 )); then\n    return 1\n  fi\n  if (( $mynum == 24\
    \ )); then\n    return 1\n  fi\n  if (( $mynum == 25 )); then\n    return 1\n\
    \  fi\n  if (( $mynum == 26 )); then\n    return 1\n  fi\n  if (( $mynum == 27\
    \ )); then\n    return 1\n  fi\n  if (( $mynum == 28 )); then\n    return 1\n\
    \  fi\n  if (( $mynum == 29 )); then\n    return 1\n  fi\n  if (( $mynum == \n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplsl2i81i.sh: line 112: unexpected EOF while looking for matching
    `)''

    /tmp/tmplsl2i81i.sh: line 132: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x\n    ((x=\"\
    $1\"));\n    if [[ \"$x\" == \"$x\" ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [[ $1 == -?*\
    \ ]]; then\n        echo \"true\"\n    else\n        echo $(($1 * $1 * $1 * $1))\
    \ == $1\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  expr $1 * $1 * $1\
    \ * $1 == $1\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "expr: syntax error: unexpected argument \u2018$\u2019\n"
  stdout: ''
  timestamp: 1660058307
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then return 0; fi\n    if [ $1 -eq 1 ]; then return 1; fi\n    if [ $1 -eq\
    \ 2 ]; then return 1; fi\n    if [ $1 -eq 3 ]; then return 1; fi\n    if [ $1\
    \ -eq 4 ]; then return 1; fi\n    if [ $1 -eq 5 ]; then return 1; fi\n    if [\
    \ $1 -eq 6 ]; then return 1; fi\n    if [ $1 -eq 7 ]; then return 1; fi\n    if\
    \ [ $1 -eq 8 ]; then return 1; fi\n    if [ $1 -eq 9 ]; then return 1; fi\n  \
    \  if [ $1 -eq 10 ]; then return 1; fi\n    if [ $1 -eq 11 ]; then return 1; fi\n\
    \    if [ $1 -eq 12 ]; then return 1; fi\n    if [ $1 -eq 13 ]; then return 1;\
    \ fi\n    if [ $1 -eq 14 ]; then return 1; fi\n    if [ $1 -eq 15 ]; then return\
    \ 1; fi\n    if [ $1 -eq 16 ]; then return 1; fi\n    if [ $1 -eq 17 ]; then return\
    \ 1; fi\n    if [ $1 -eq 18 ]; then return 1; fi\n    if [ $1 -eq 19 ]; then return\
    \ 1; fi\n    if [ $1 -eq 20 ]; then return 1; fi\n    if [ $1 -eq 21 ]; then return\
    \ 1; fi\n    if [ $1 -eq 22 ]; then return 1; fi\n    if [ $1 -eq 23 ]; then return\
    \ 1; fi\n    if [ $1 -eq 24 ]; then return 1; fi\n    if [ $1 -eq 25 ]; then return\
    \ 1; fi\n    if [ $1 -eq 26 ]; then return 1; fi\n    if [ $1 -eq 27 ]; then return\
    \ 1; fi\n    if [ $1 -eq 28 ]; then return 1; fi\n    if [ $1 -eq 29 ]; then return\
    \ 1; fi\n    if [ $1 -eq 30 ]; then return 1; fi\n    if [ $1 -eq 31 ]; then return\
    \ 1; fi\n    if [ $1 -eq 32 ]; then return 1; fi\n    if [ $1 -eq 33 ]; then return\
    \ 1; fi\n    if [ $1 -eq 34 ]; then return 1; fi\n    if [ $1 -eq 35 ]; then return\
    \ 1; fi\n    if [ $1 -eq 36 \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9dmv0fl1.sh: line 58: syntax error near unexpected token `}''

    /tmp/tmp9dmv0fl1.sh: line 58: `}''

    '
  stdout: ''
  timestamp: 1660058307
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  if [ $1 -gt 0 ]\n\
    \  then\n    local n=$1\n    if [ $n -gt 0 ]\n    then\n      local nstr=\"$n\"\
    \n      local i=2\n      while [ $(( $i * $i )) -gt $n ]\n      do\n        local\
    \ m=$(( $i * $i + $n ))\n        local d=$(( $n - $m ))\n        local c=$(( 3\
    \ * $m ))\n        if [ $(( $c / $n )) -lt $(( 3 * $n )) ]\n        then\n   \
    \       local nstr=\"$nstr^$c\"\n        fi\n        i=$(( $i + 1 ))\n      done\n\
    \      case \"$nstr\" in\n        *^3)\n          echo \"true\";;\n        *)\n\
    \          echo \"false\";;\n      esac\n    fi\n  fi\n}\n\ncandidate() {\n  \
    \  iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"\
    true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=24 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=47 encoding='utf-8'>
  timestamp: 1660058312
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [[ $1 =~ ^[0-9]+$\
    \ ]]; then\n        if (($1%3 == 0) && ($1%5 == 0))\n            echo true\n \
    \       else\n            echo false\n        fi\n    else\n        echo false\n\
    \    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpr6nq7o_d.sh: line 24: syntax error near unexpected token `else''

    /tmp/tmpr6nq7o_d.sh: line 24: `        else''

    '
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $(echo $n | bc -l | cut -d '.' -f 1) -gt $(echo $n | bc -l | cut -d '.'\
    \ -f 2) -a $(echo $n | bc -l | cut -d '.' -f 2) -gt $(echo $n | bc -l | cut -d\
    \ '.' -f 3) -a $(echo $n | bc -l | cut -d '.' -f 3) -gt $(echo $n | bc -l | cut\
    \ -d '.' -f 4) -a $(echo $n | bc -l | cut -d '.' -f 4) -gt $(echo $n | bc -l |\
    \ cut -d '.' -f 5) -a $(echo $n | bc -l | cut -d '.' -f 5) -gt $(echo $n | bc\
    \ -l | cut -d '.' -f 6) -a $(echo $n | bc -l | cut -d '.' -f 6) -gt $(echo $n\
    \ | bc -l | cut -d '.' -f 7) -a $(echo $n | bc -l | cut -d '.' -f 7) -gt $(echo\
    \ $n | bc -l | cut -d '.' -f 8) -a $(echo $n | bc -l | cut -d '.' -f 8) -gt $(echo\
    \ $n | bc -l | cut -d '.' -f 9) -a $(echo $n | bc -l | cut -d '.' -f 9) -gt $(echo\
    \ $n | bc -l | cut -d '.' -f 10) ]; then\n        echo true\n    else\n      \
    \  echo false\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a b\n  \
    \  a=$1\n    if [ $a -eq $a ]\n    then\n        echo \"true\"\n    elif [ $a\
    \ -gt 0 ]\n    then\n        echo \"false\"\n    else\n        echo \"false\"\n\
    \    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    [ $(($1 * $1 *\
    \ $1 * $1)) -eq $1 ] && return 1 || return 0\n}\n\ncandidate() {\n    iscube \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n   \
    \ [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    echo $(expr $1\
    \ * $1 * $1)\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "expr: syntax error: unexpected argument \u2018$\u2019\n"
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlet a=( $1 )\n\t\
    let b=( $a )\n\tlet b1=( $b )\n\tlet c=( $b )\n\tif (( ( $a < 0 ) || ( $a > $c\
    \ ) ))\n\tthen\n\t\treturn 1\n\telif (( $b == $b1 ))\n\tthen\n\t\treturn 0\n\t\
    elif (( ( $a < 0 ) || ( $a > $c ) ))\n\tthen\n\t\treturn 1\n\telse\n\t\treturn\
    \ 0\n\tfi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    let a=$(echo \"\
    $1\" | bc)\n    \n    if [[ \"$a\" -eq \"0\" ]]; then\n        echo \"true\"\n\
    \    elif [[ \"$a\" -eq \"1\" ]]; then\n        echo \"false\"\n    else\n   \
    \     echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local int=$1\n\
    \    local iscube_flag=false\n    \n    local i\n    \n    # If the value is zero\
    \ or negative, return true\n    if [ \"$int\" -eq \"0\" ] || [ \"$int\" -eq \"\
    -1\" ]; then\n        echo \"true\"\n        return\n    fi\n    \n    # Calculate\
    \ the modulo with the number 3\n    i=$(($int % 3))\n\n    # If the value is one\
    \ of the cubes of 3, return true\n    if [ \"$i\" -eq \"0\" ] || [ \"$i\" -eq\
    \ \"1\" ] || [ \"$i\" -eq \"2\" ]; then\n        echo \"true\"\n        return\n\
    \    fi\n\n    # If the value is one of the cubes of 5, return true\n    if [\
    \ \"$i\" -eq \"3\" ]; then\n        echo \"true\"\n        return\n    fi\n\n\
    \    # If the value is one of the cubes of 7, return true\n    if [ \"$i\" -eq\
    \ \"5\" ]; then\n        echo \"true\"\n        return\n    fi\n\n    # If the\
    \ value is one of the cubes of 11, return true\n    if [ \"$i\" -eq \"7\" ]; then\n\
    \        echo \"true\"\n        return\n    fi\n\n    # If the value is one of\
    \ the cubes of 13, return true\n    if [ \"$i\" -eq \"11\" ]; then\n        echo\
    \ \"true\"\n        return\n    fi\n\n    # If the value is one of the cubes of\
    \ 17, return true\n    if [ \"$i\" -eq \"13\" ]; then\n        echo \"true\"\n\
    \        return\n    fi\n\n    # If the value is one of the cubes of 19, return\
    \ true\n    if [ \"$i\" -eq \"17\" ]; then\n        echo \"true\"\n        return\n\
    \    fi\n\n    # If the value is one of the cubes of 21, return true\n    if [\
    \ \"$i\" -eq \"19\" ]; then\n        echo \"true\"\n        return\n    fi\n\n\
    \    # If the value is one of the cubes of 23, return true\n    if [ \"$i\" -eq\
    \ \"21\" ]; then\n        echo \"true\"\n        return\n    fi\n\n    # If the\
    \ value is one of the cubes of 27, return true\n    if [ \"$i\" -eq \"23\" ];\
    \ then\n        echo \"true\"\n        return\n    fi\n\n    # If the value is\
    \ one of the cubes of 31, return true\n    if [ \"$i\" -eq \"27\" ]; then\n  \
    \      echo \"true\"\n        return\n    fi\n\n    # If the value is one of the\
    \ cubes of 33, return true\n    if [ \"$i\" -eq \"31\" ]; then\n        echo \"\
    true\"\n        return\n    fi\n\n    # If the value is one of the cubes of 37,\
    \ return true\n    if [ \"$i\" -eq \"33\" ]; then\n        echo \"true\"\n   \
    \     return\n    fi\n\n    # If the value is one of the cubes of 41, return true\n\
    \    if [ \"$i\" -eq \"37\" ]; then\n        echo \"true\"\n        return\n \
    \   fi\n\n    # If the value is one of the cubes of 43, return true\n    if \n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpp7tlqsc_.sh: line 121: syntax error near unexpected token `}''

    /tmp/tmpp7tlqsc_.sh: line 121: `}''

    '
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    # Your code here\n\
    \    local a\n    a=$1\n    if [[ $a -eq 0 ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  [ $1 -gt 0 ] ||\
    \ return 1\n  if [ $1 -eq 0 ] ; then\n    echo \"true\"\n    return 0\n  fi\n\
    \  \n  if [ $1 -le 3 ] ; then\n    if [ $(($1 % (3 * 3)) != 0) -eq 0 ] ; then\n\
    \      echo \"true\"\n      return 0\n    fi\n  fi\n  \n  if [ $1 -le 6 ] ; then\n\
    \    if [ $(($1 % (3 * 3)) != 0) -eq 0 ] ; then\n      if [ $(($1 % (3 * 2)) !=\
    \ 0) -eq 0 ] ; then\n        echo \"true\"\n        return 0\n      fi\n    fi\n\
    \  fi\n  \n  if [ $1 -le 9 ] ; then\n    if [ $(($1 % (3 * 3)) != 0) -eq 0 ] ;\
    \ then\n      if [ $(($1 % (3 * 2)) != 0) -eq 0 ] ; then\n        if [ $(($1 %\
    \ (3 * 1)) != 0) -eq 0 ] ; then\n          echo \"true\"\n          return 0\n\
    \        fi\n      fi\n    fi\n  fi\n  \n  if [ $1 -le 12 ] ; then\n    if [ $(($1\
    \ % (3 * 3)) != 0) -eq 0 ] ; then\n      if [ $(($1 % (3 * 2)) != 0) -eq 0 ] ;\
    \ then\n        if [ $(($1 % (3 * 1)) != 0) -eq 0 ] ; then\n          if [ $(($1\
    \ % (3 * 0)) != 0) -eq 0 ] ; then\n            echo \"true\"\n            return\
    \ 0\n          fi\n        fi\n      fi\n    fi\n  fi\n  \n  if [ $1 -le 15 ]\
    \ ; then\n    if [ $(($1 % (3 * 3)) != 0) -eq 0 ] ; then\n      if [ $(($1 % (3\
    \ * 2)) != 0) -eq 0 ] ; then\n        if [ $(($1 % (3 * 1)) != 0) -eq 0 ] ; then\n\
    \          if [ $(($1 % (3 * 0)) != 0) -eq 0 ] ; then\n            if [ $(($1\
    \ % (2 * 0)) != 0) -eq 0 ] ; then\n              echo \"true\"\n             \
    \ return 0\n            fi\n          fi\n        fi\n      fi\n    fi\n  fi\n\
    \  \n  if [ $1 -le 18 ] ; then\n    if [ $(($1 % (3 * 3)) != 0) -eq 0 ] ; then\n\
    \      if [ $(($1 % (3 * 2)) != 0) -eq 0 ] ; then\n        if [ $(($1 % (3 * 1))\
    \ != 0) -eq 0 ] ; then\n          if [ $(($1 % (3 * 0)) != 0) \n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpf0t3g7ke.sh: line 87: syntax error near unexpected token `}''

    /tmp/tmpf0t3g7ke.sh: line 87: `}''

    '
  stdout: ''
  timestamp: 1660058307
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local i\n\n  \
    \  for i in $(seq 1 $(($1%6)))\n    do\n        if [ $(($1 % $i)) -eq $i ]\n \
    \       then\n            echo true\n            return 0\n        fi\n    done\n\
    \    echo false\n    return 1\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058307
