name: HumanEval_118_get_closest_vowel
language: sh
prompt: "#!/bin/bash\n# You are given a word. Your task is to find the closest vowel\
  \ that stands between \n# two consonants from the right side of the word (case sensitive).\n\
  # Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n\
  # find any vowel met the above condition. \n# You may assume that the given string\
  \ contains English letter only.\n# Example:\n# >>> $(get_closest_vowel \"yogurt\"\
  )\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\")\n# \"U\"\n# >>> $(get_closest_vowel\
  \ \"quick\")\n# \"\"\n# >>> $(get_closest_vowel \"ab\")\n# \"\"\n#\n# $1 is a string\n\
  get_closest_vowel() {\n"
tests: "}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
  u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\
  \" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\"\
  \ ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\"\
  \ ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\"\
  \ ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\
  \" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
completions: ["\tlocal string=$1\n\tlocal vowels=$(echo \"${string}\" | tr \"a-z\"\
    \ \"A-Z\")\n\tlocal consonants=$(echo \"${string}\" | tr \"A-Z\" \"a-z\")\n\t\
    for vowel in $vowels; do\n\t\tlocal consonants_count=$(echo $consonants | grep\
    \ -c \"$vowel\")\n\t\tlocal consonants_count_1=$(echo $consonants | awk '{print\
    \ $1}' | grep -c \"$vowel\")\n\t\tif [[ \"$consonants_count\" -eq \"$consonants_count_1\"\
    \ ]]; then\n\t\t\techo \"$vowel\"\n\t\t\tbreak\n\t\telse\n\t\t\techo \"$vowel\"\
    \n\t\tfi\n\tdone", "    vowels=($(echo '$1' | tr [a-z] [A-Z]))\n    vowel_chars=($(echo\
    \ '$1' | tr [A-Z] [A-Z][a-z]))\n    vowel_chars=$(echo $vowel_chars | tr [a-z]\
    \ [A-Z])\n    for ((i=0; i<${#vowels[@]}; i++)); do\n        ((ii=${#vowel_chars[@]})-1)\n\
    \        for ((j=0; j<${#vowel_chars[@]}; j++)); do\n            if [[ \"$i\"\
    \ -eq \"$j\" ]]; then\n                break\n            fi\n            if [\
    \ \"$vowel_chars\" == \"$vowel_chars\" ]; then\n                break\n      \
    \      fi\n            if [[ \"$i\" -eq \"$((j+1)-1)\" ]]; then\n            \
    \    break\n            fi\n            if [[ \"$vowel_chars\" == \"$vowel_chars\"\
    \ ]]; then\n                break\n            fi\n            if [[ \"$i\" -eq\
    \ \"$ii+1\" ]]; then\n                break\n            fi\n            if [[\
    \ \"$vowel_chars\" == \"$vowel_chars\" ]]; then\n                break\n     \
    \       fi\n            if [[ \"$i\" -eq \"$((ii+1))\" ]]; then\n            \
    \    break\n            fi\n            if [[ \"$vowel_chars\" == \"$vowel_chars\"\
    \ ]]; then\n                break\n            fi\n            if [[ \"$i\" -eq\
    \ \"$ii\" ]]; then\n                break\n            fi\n        done\n    \
    \    if [[ \"$j\" -eq \"$((j+1))\" ]]; then\n            break\n        fi\n \
    \   done\n    if [[ \"$j\" -ge 0 ]]; then\n        echo $vowels[0]\n    else\n\
    \        echo $\"\"\n    fi", "\tlocal string=$1\n\tlocal vowels=\"a e i o u A\"\
    \n\tfor (( i=1; i<${#string}; i++ )); do\n\t\tlocal vowel=${vowels:i:1}\n\t\t\
    if [[ ${string[$i]} == ${vowel} ]]; then\n\t\t\techo \"${vowel}\"\n\t\t\treturn\
    \ ${vowel}\n\t\tfi\n\tdone\n\treturn \"\"", "    local vowel=\"[aeiouAEIOU]\"\n\
    \    local consonant=\"[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]\"\n    local\
    \ left=\"$1\"\n    local right=\"${1:0:${#left}}\"\n    local i=${#right}\n  \
    \  local vowels=${vowel}\n    local consonants=${consonant}\n    while [ ${i}\
    \ -gt 0 ]; do\n        local index=0\n        for (( i=1; i<${#right}; i++ ));\
    \ do\n            if [[ ${right:$i:1} == ${consonants} ]]; then\n            \
    \    index=$i\n                break\n            fi\n        done\n        if\
    \ [[ ${left} == ${vowels} ]]; then\n            echo $index\n            return\
    \ $index\n        fi\n        if [[ ${left} == ${consonants} ]]; then\n      \
    \      echo $index\n            return $index\n        fi\n        (( i-- ))\n\
    \    done", "  local str=\"$1\"\n  local vowels=\"aeiouAEIOU\"\n\n  for vowel\
    \ in $vowels; do\n    local vowel_pos=\"$((${str}.length - ${#vowel} - 1))\"\n\
    \    local vowel_start_index=\"$((${str}.length - 1))\"\n\n    # find the vowel\
    \ from the right side of the word (case sensitive)\n    local index=\"$((${vowel_pos}\
    \ + 1))\"\n    if [ \"${str:$index:1}\" == \"${vowel}\" ]; then\n      echo \"\
    $vowel\"\n      break\n    fi\n\n    # find the vowel from the left side of the\
    \ word (case sensitive)\n    local index_back=\"$((${vowel_start_index} - 1))\"\
    \n    if [ \"${str:$index_back:1}\" == \"${vowel}\" ]; then\n      echo \"$vowel\"\
    \n      break\n    fi\n  done", "  local vowels=\"aeiouyAEIOUY\"\n  local c=${1:0:1}\n\
    \  local s=${1:1:1}\n  local v=${vowels:$c:$c}\n  [[ \"$s\" = \"z\" ]] && { [[\
    \ ${#s} -le 1 ]] && return \"\"; }\n  local w=${vowels:$s:$s}\n  [[ \"$w\" = \"\
    z\" ]] && return \"\"\n  [[ \"$v\" = \"$w\" ]] && return $v", "\tlocal vowel_arr=(\"\
    a\" \"e\" \"i\" \"o\" \"u\");\n\tlocal consonant_arr=(\"b\" \"c\" \"d\" \"f\"\
    \ \"g\" \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\"\
    \ \"w\" \"x\" \"y\" \"z\")\n\tlocal consonant_count=${#consonant_arr[@]}\n\tlocal\
    \ consonant_count1=${#consonant_arr[@]}\n\tlocal consonant_count2=${#consonant_arr[@]}\n\
    \tlocal consonant_count3=${#consonant_arr[@]}\n\tlocal consonant_count4=${#consonant_arr[@]}\n\
    \tlocal vowel_count=${#vowel_arr[@]}\n\tlocal vowel_count1=${#vowel_arr[@]}\n\t\
    local vowel_count2=${#vowel_arr[@]}\n\tlocal vowel_count3=${#vowel_arr[@]}\n\t\
    local vowel_count4=${#vowel_arr[@]}\n\tlocal vowel_arr1=(\"A\" \"E\" \"I\" \"\
    O\" \"U\");\n\tlocal vowel_arr2=(\"a\" \"e\" \"i\" \"o\" \"u\");\n\tlocal vowel_arr3=(\"\
    \xC0\" \"E\" \"I\" \"O\" \"U\");\n\tlocal vowel_arr4=(\"A\" \"E\" \"I\" \"O\"\
    \ \"U\");\n\tlocal vowel_arr5=(\"a\" \"e\" \"i\" \"o\" \"u\");\n\tlocal vowel_arr6=(\"\
    A\" \"E\" \"I\" \"O\" \"U\");\n\tlocal vowel_arr7=(\"a\" \"e\" \"i\" \"o\" \"\
    u\");\n\tlocal vowel_arr8=(\"A\" \"E\" \"I\" \"O\" \"U\");\n\tlocal vowel_arr9=(\"\
    a\" \"e\" \"i\" \"o\" \"u\");\n\tlocal vowel_arr10=(\"A\" \"E\" \"I\" \"O\" \"\
    U\");\n\tlocal vowel_arr11=(\"a\" \"e\" \"i\" \"o\" \"u\");\n\tlocal vowel_arr12=(\"\
    A\" \"E\" \"I\" \"O\" \"U\");\n\tlocal vowel_arr13=(\"a\" \"e\" \"i\" \"o\" \"\
    u\");\n\tlocal vowel_arr14=(\"A\" \"E\" \"I\" \"O\" \"U\");\n\tlocal vowel_arr15=(\"\
    a\" \"e\" \"i\" \"o\" \"u\");\n\tlocal vowel_arr16=(\"A\" \"E\" \"I\" \"O\" \"\
    U", '  # your code', "  local vowel_1=$(grep -o '[^AEIOUaeiou]' <<< $1 | sort\
    \ -k 2r | head -1)\n  local vowel_2=$(grep -o '[^AEIOUaeiou]' <<< $1 | sort -k\
    \ 2r | tail -1)\n  echo ${vowel_1:1:${#vowel_1}-1}-${vowel_2:1:${#vowel_2}-1}",
  "  if [[ -z $1 || $1 == \"\" ]]; then\n    return 0\n  fi\n  local vowels=\"a e\
    \ i o u AE II OE UO\"\n  local c=$1\n  local i=1\n  local j=$((${#c}-1))\n  while\
    \ [ \"$i\" -le \"$j\" ]; do\n    local v=${vowels:$i:1}\n    if [[ ${c:$j:1} =\
    \ $v ]]; then\n      i=$((i+1))\n      j=$((j-1))\n      ((j--))\n    else\n \
    \     if [ $i -eq 0 ]; then\n        i=$((j+1))\n      fi\n      ((i++))\n   \
    \   if [ $i -eq 0 ]; then\n        i=1\n      fi\n    fi\n  done\n  local vowel=${vowels:$i:1}\n\
    \  return $vowel", "    local vowels=\"a\xE8\xE9\xEA\xEBi\xEE\xEFo\xF4\u0153\xF9\
    \xFC\u014D\xFB\"\n    local input_str=$1\n    local vowel=$(echo $input_str |\
    \ sed -e 's/\\(.\\)$/\\1/g')\n    echo $vowel\n    local last_consonant=$(echo\
    \ $input_str | sed -e 's/.*\\(.\\)/\\1/g')\n    local last_vowel=$(echo $last_consonant\
    \ | sed -e 's/\\(.\\)$/\\1/g')\n    echo $last_vowel\n\n    if [[ ! -z $input_str\
    \ ]]; then\n        if [[ \"$last_consonant\" = \"$vowels\" ]]; then\n       \
    \     echo $last_vowel\n        else\n            echo $last_vowel | sed -e 's/[^aeiou]//g'\n\
    \        fi\n    else\n        echo $last_vowel\n    fi", "\techo -n \"[INFO]\
    \ Start Finding Vowel In ${1}\"\n\tlocal vowel_found_in_beginning_or_ending=false\n\
    \tlocal consonant_one_or_both_ending=false\n\tlocal consonant_one_or_both_begining=false\n\
    \tlocal vowel_on_the_left_side=false\n\tlocal consonant_one_or_both_begining_one_or_both_ending=false\n\
    \tlocal consonant_one_or_both_ending_in_the_right_side=false\n\tlocal consonant_one_or_both_ending_in_the_left_side=false\n\
    \tlocal left_side_consonant=$1\n\tlocal right_side_consonant=$(echo ${1} | sed\
    \ 's/[Ee]$//')\n\tlocal consonant_one_or_both_ending_in_the_right_side=$(echo\
    \ ${right_side_consonant} | sed 's/[Ee]$//')\n\tlocal consonant_one_or_both_ending_in_the_left_side=$(echo\
    \ ${left_side_consonant} | sed 's/[Ee]$//')\n\tlocal consonant_one_or_both_begining_one_or_both_ending=$(echo\
    \ ${left_side_consonant} | sed 's/[Cc]$//')\n\tlocal consonant_one_or_both_begining=$(echo\
    \ ${left_side_consonant} | sed 's/[Cc]$//')\n\tlocal left_side_consonant_is_a_vowel=$(echo\
    \ $consonant_one_or_both_begining | grep -iq [vV])\n\tlocal consonant_one_or_both_begining_one_or_both_ending=$(echo\
    \ $consonant_one_or_both_begining | grep -iq [vV])\n\tlocal vowel_found_in_beginning_or_ending=$(echo\
    \ $consonant_one_or_both_begining_one_or_both_ending | grep -iq [vV])\n\tlocal\
    \ vowel_found_in_beginning_or_ending_in_the_right_side=$(echo $consonant_one_or_both_ending_in_the_right_side\
    \ | grep -iq [vV])\n\tlocal vowel_found_in_beginning_or_ending_in_the_left_side=$(echo\
    \ $consonant_one_or_both_ending_in_the_left_side | grep -iq [vV])\n\tlocal vowel_on_the_left_side=$(echo\
    \ $consonant_one_or_both_begining_one_or_both_ending | grep -iq [vV])\n\tif [[\
    \ ${#left_side_consonant} != 0 ]]; then\n\t\tif [[ ${#left_side_con", "    local\
    \ i vowels vowel vowel_i result=\"\"\n    vowels=\"a e i o u\"\n    for ((i=0;i<${#1};++i));\
    \ do\n        [[ \"${1:$i:1}\" == [[:upper:]]  ]] || continue\n        [[ \"${1:$i:1}\"\
    \ == [[:lower:]]  ]] || continue\n        vowel=\"${1:$i:1}\"\n        [[ \"${vowels:$i:1}\"\
    \ == \"$vowel\" ]] && break\n        ((i++))\n    done\n    [[ \"$i\" -gt 0 ]]\
    \ || return 0\n    vowel_i=\"${1:$i:1}\"\n    while [[ \"${vowels:$((i-1)):1}\"\
    \ == \"$vowel_i\" ]]; do\n        ((i--))\n    done\n    if [[ \"${vowels:$i:1}\"\
    \ == \"$vowel_i\" ]]; then\n        result=\"${vowels:$((i-1)):1}\"\n    fi\n\
    \    echo \"$result\"", "    local vowels=\"aeiou\"\n    local a=\"$1\"\n    local\
    \ vowel=\"${vowels//[^[:lower:]]/}\"\n    local vowel_index=\"$(( ${a#\"$vowel\"\
    } ))\"\n    local vowel_offset=\"$(( ${a#$vowel} ))\"\n    local vowel_length=\"\
    $(( ${#a} - ${vowel_index} - ${vowel_offset} ))\"\n\n    local vowel_left=\"$((\
    \ ${a#\"$vowel\"} ))\"\n    local vowel_right=\"$(( ${a#$vowel} ))\"\n\n    local\
    \ offset=\"$(( ${vowel_index} - 1 ))\"\n    local length=\"$(( ${vowel_length}\
    \ - 1 ))\"\n    local vowel_left_offset=\"$(( ${a#\"$vowel\"} ))\"\n    local\
    \ vowel_right_offset=\"$(( ${a#$vowel} ))\"\n\n    if [[ ${offset} -gt 0 && ${offset}\
    \ -lt ${vowel_length} ]]; then\n        local lower_offset=\"$(( ${vowel_index}\
    \ - 1))\"\n        local upper_offset=\"$(( ${vowel_index} + 1 ))\"\n        local\
    \ lower_length=\"$(( ${#a} - ${lower_offset} - ${vowel_offset} ))\"\n        local\
    \ upper_length=\"$(( ${#a} - ${upper_offset} - ${vowel_offset} ))\"\n\n      \
    \  local offset2=\"$(( ${offset} - 1 ))\"\n        local length2=\"$(( ${length}\
    \ - 1 ))\"\n\n        local lower_offset_2=\"$(( ${lower_offset} - 1))\"\n   \
    \     local upper_offset_2=\"$(( ${lower_offset} + 1 ))\"\n\n        local lower_offset_2=\"\
    $(( ${lower_offset_2} - 1 ))\"\n        local upper_offset_2=\"$(( ${upper_offset_2}\
    \ + 1 ))\"\n\n        local offset_2=\"$(( ${offset} -1 ))\"\n        local length_2=\"\
    $(( ${length} -1 ))\"\n\n        local offset_3=\"$(( ${offset} + 1 ))\"\n   \
    \     local length_3=\"$(( ${length} + 1 ))\"\n\n        local offset_4=\"$((\
    \ ${offset} + 2 ))\"\n        local length_4=\"$(( ${length} + 2 ))\"\n\n    \
    \    local offset_5=\"$(( ${offset} + 3 ))\"\n        local length_5=\"$(( ${length}\
    \ + 3 ))\"\n\n        local offset_6=\"$(( ${offset} + 4 ))\"\n        local length_6=\"\
    $((", "\tlocal vowels=\"a e i o u\"\n\tlocal string=${1:-}\n\tlocal vowel_count=0\n\
    \tlocal cons_count=0\n\tlocal cons_index=0\n\tlocal vowel_index=0\n\t\n\t\n\t\
    for vowel in ${vowels}; do\n\t\tlet vowel_count=vowel_count+1\n\tdone\n\n\tfor\
    \ cons in ${string}; do\n\t\tlet cons_count=cons_count+1\n\tdone\n\t\n\tif [ ${cons_count}\
    \ = 0 ]; then\n\t\treturn \"\"\n\tfi\n\n\tfor cons in ${string}; do\n\t\tif [\
    \ ${cons} = ${string%$cons} ]; then\n\t\t\tcons_index=${cons_index}+1\n\t\tfi\n\
    \tdone\n\n\tfor vowel in ${vowels}; do\n\t\tif [ ${vowels} = ${string%$vowel}\
    \ ]; then\n\t\t\tvowel_index=${vowel_index}+1\n\t\tfi\n\tdone\n\n\tif [ ${cons_count}\
    \ = ${cons_index} ]; then\n\t\tif [ ${vowel_count} = ${vowel_index} ]; then\n\t\
    \t\techo \"${vowel}\"\n\t\telse\n\t\t\techo \"${string}\"\n\t\tfi\n\telse\n\t\t\
    return \"\"\n\tfi", "\tlocal a=\"$1\"\n\tlocal b=\"x\"\n\tlocal c=\"y\"\n\tlocal\
    \ d=\"z\"\n\tlocal e=\"A\"\n\tlocal f=\"E\"\n\tlocal g=\"I\"\n\tlocal h=\"O\"\n\
    \tlocal i=\"U\"\n\tlocal j=\"a\"\n\tlocal k=\"e\"\n\tlocal l=\"i\"\n\tlocal m=\"\
    o\"\n\tlocal n=\"u\"\n\tlocal o=\"A\"\n\tlocal p=\"E\"\n\tlocal q=\"I\"\n\tlocal\
    \ r=\"O\"\n\tlocal s=\"U\"\n\tlocal t=\"y\"\n\tlocal u=\"a\"\n\tlocal v=\"e\"\n\
    \tlocal w=\"i\"\n\tlocal x=\"o\"\n\tlocal y=\"u\"\n\tlocal z=\"a\"\n\n\tlocal\
    \ vowel1=\"$a\"\n\tlocal vowel2=\"$b\"\n\tlocal vowel3=\"$c\"\n\tlocal vowel4=\"\
    $d\"\n\tlocal vowel5=\"$e\"\n\tlocal vowel6=\"$f\"\n\tlocal vowel7=\"$g\"\n\t\
    local vowel8=\"$h\"\n\tlocal vowel9=\"$i\"\n\tlocal vowel10=\"$j\"\n\tlocal vowel11=\"\
    $k\"\n\tlocal vowel12=\"$l\"\n\tlocal vowel13=\"$m\"\n\tlocal vowel14=\"$n\"\n\
    \tlocal vowel15=\"$o\"\n\tlocal vowel16=\"$p\"\n\tlocal vowel17=\"$q\"\n\tlocal\
    \ vowel18=\"$r\"\n\tlocal vowel19=\"$s\"\n\tlocal vowel20=\"$t\"\n\tlocal vowel21=\"\
    $u\"\n\tlocal vowel22=\"$v\"\n\tlocal vowel23=\"$w\"\n\tlocal vowel24=\"$x\"\n\
    \tlocal vowel25=\"$y\"\n\tlocal vowel26=\"$z\"\n\n\tlocal vowel_array=(\"$vowel1\"\
    \ \"${vowel2}\" \"${vowel3}\" \"${vowel4}\" \"${vowel5}\" \"${vowel6}\" \"${vowel7}\"\
    \ \"${vowel8}\" \"${vowel9}\" \"${vowel10}\" \"${vowel11}\" \"${vowel12}\" \"\
    ${vowel13}\" \"${vowel14}\" \"${vowel15}\" \"${vowel16}\" \"${vowel17}\" \"${vowel18}\"\
    \ \"${vowel19}\" \"${vowel20}\" \"${vowel21}\" \"${vowel22}\" \"${vowel23}\" \"\
    ${vowel24}\" \"${vowel25}\" \"${vowel26}\")\n\tlocal first_index=0\n\tlocal second_index",
  "\tlocal word=$1\n\tlocal vowels=\"a e i o u y AE II OO UU YY\"\n\tlocal vowels_len=$(echo\
    \ $vowels | wc -l)\n\tlocal count=0\n\tlocal result=\"\"\n\tlocal vowel_found\n\
    \n\t# loop through all vowels\n\tfor v in $vowels; do\n\t\t# loop through all\
    \ characters in word\n\t\tfor i in $word; do\n\t\t\t# count vowel position\n\t\
    \t\tcount=$(echo $i | awk -F '$v' '{print index($0,$0)}')\n\t\t\t# check if vowel\
    \ position is greater than zero \n\t\t\tif [ \"$count\" -gt 0 ]; then\n\t\t\t\t\
    vowel_found=1\n\t\t\t\tbreak\n\t\t\tfi\n\t\tdone\n\t\t# check if vowel was found\n\
    \t\tif [ \"$vowel_found\" -eq \"1\" ]; then\n\t\t\t# find closest vowel to the\
    \ right\n\t\t\tresult=$(echo $v | awk 'BEGIN {printf \"%c\", (index(\"$v\", $word))}')\n\
    \t\t\tbreak\n\t\tfi\n\tdone\n\n\techo $result", "  local str=\"$1\"\n  local len=\"\
    ${#str}\"\n  local i=1\n  local j=1\n\n  # loop until end of string\n  while ((\
    \ i < len )); do\n\n    # check if it is the last char\n    if (( i == len ));\
    \ then\n      (( j=0 ))\n    else\n      (( j=1 ))\n    fi\n\n    # check if it\
    \ is a vowel\n    if [[ \"$str\" =~ '^[aeiouAEIOU].*[aeiouAEIOU]$' ]]; then\n\
    \      echo \"$j\"\n      break\n    fi\n    (( i++ ))\n  done", "\tlocal vowels=\"\
    ${1}\"\n\tvowels=${vowels//[aeiou]/}\n\tlocal count=1\n\tlocal counts=($(echo\
    \ $vowels | awk '{print $1}'))\n\tlocal flag\n\tfor (( i=${#counts[*]} - 1; ;\
    \ )); do\n\t\tif [ $i -eq 0 ]; then\n\t\t\tbreak;\n\t\tfi\n\t\tif [[ \"$count\"\
    \ -lt \"$counts[$i]\" ]]; then\n\t\t\tflag=1\n\t\telse\n\t\t\tflag=0\n\t\tfi\n\
    \t\tlet count=$((count + 1))\n\tdone\n\tif [ \"$flag\" -eq 1 ]; then\n\t\techo\
    \ ${vowels:$(( i - 1 )):$(( i + 1 ))}\n\telse\n\t\techo \"\"\n\tfi", "  local\
    \ string=$1\n  local vowels=\"aAeEoOuU\"\n  local vowel_count=$(echo $vowels |\
    \ grep -c \"^$string\\$\")\n  if [ ${vowel_count} -eq 0 ]; then\n    return \n\
    \  fi\n  local vowel_met_count\n  vowel_met_count=0\n  for i in $(echo $vowels\
    \ | tr a-z A-Z); do\n    if [[ $string =~ $i ]]; then\n      vowel_met_count=$((vowel_met_count\
    \ + 1))\n    fi\n  done\n  if [ ${vowel_met_count} -gt 1 ]; then\n    return \n\
    \  fi\n  local consonant_count\n  consonant_count=0\n  for i in $(echo $vowels\
    \ | tr a-z A-Z | sed 's/[0-9]//g'); do\n    if [[ $string =~ $i ]]; then\n   \
    \   consonant_count=$((consonant_count + 1))\n    fi\n  done\n  if [ ${consonant_count}\
    \ -eq 1 ]; then\n    local vowel_found_count\n    vowel_found_count=0\n    for\
    \ i in $(echo $vowels | tr a-z A-Z); do\n      if [[ $string =~ $i ]]; then\n\
    \        vowel_found_count=$((vowel_found_count + 1))\n      fi\n    done\n  \
    \  if [ ${vowel_found_count} -eq 1 ]; then\n      echo $string\n      return\n\
    \    fi\n  fi\n  local consonant_found_count\n  consonant_found_count=0\n  for\
    \ i in $(echo $vowels | tr a-z A-Z | sed 's/[0-9]//g'); do\n    if [[ $string\
    \ =~ $i ]]; then\n      consonant_found_count=$((consonant_found_count + 1))\n\
    \    fi\n  done\n  if [ ${consonant_found_count} -eq 2 ]; then\n    local vowel_found_count\n\
    \    vowel_found_count=0\n    for i in $(echo $vowels | tr a-z A-Z); do\n    \
    \  if [[ $string =~ $i ]]; then\n        vowel_found_count=$((vowel_found_count\
    \ + 1))\n      fi\n    done\n    if [ ${vowel_found_count} -eq 2 ]; then\n   \
    \   echo $string\n      return\n    fi\n  fi\n  echo $string", "    local string=$1\n\
    \    local i=0 consonant_count=0\n    local vowel_count=0\n    while [ $i -le\
    \ ${#string} ]; do\n        consonant=$(expr match \"${string:$i:1}\" \".[bcdfghjklmnpqrstvwxyz]\"\
    )\n        vowel=$(expr match \"${string:$i:1}\" \".[aeiou]\")\n        if [[\
    \ $consonant == [aeiou] ]]; then \n            vowel_count=$((vowel_count+1))\n\
    \        fi\n        if [[ $consonant == [bcdfghjklmnpqrstvwxyz] ]]; then \n \
    \           consonant_count=$((consonant_count+1))\n        fi\n        i=$((i+1))\n\
    \    done\n    if [[ $vowel_count -gt 1 ]]; then \n        vowel_found=$((vowel_count-1))\n\
    \        vowel_found=$(expr expr \"${string:$i:${#vowel_found}}\"  \"${string:$((i-1))}\"\
    \ )\n        if [[ $vowel_found -gt 0 ]]; then \n            echo $vowel_found\n\
    \        fi\n    else \n        echo \"0\"\n    fi", "    local x=\"$1\"\n   \
    \ if [ \"$x\" == \"$1\" ]; then return $x; fi\n    local y=\"$x\"\n    while [[\
    \ \"$y\" != \"\" ]]; do\n        local z=`echo \"$y\" | sed 's/^[[:alpha:]]//g'`\n\
    \        if [[ \"$z\" == \"a\" ]]; then \n            y=$(echo \"$y\" | sed 's/[[:alpha:]]/a/g')\n\
    \            x=$x $(echo \"$y\" | sed 's/^/a/')\n        elif [[ \"$z\" == \"\
    e\" ]]; then \n            y=$(echo \"$y\" | sed 's/[[:alpha:]]/e/g')\n      \
    \      x=$x $(echo \"$y\" | sed 's/^/e/') \n        elif [[ \"$z\" == \"i\" ]];\
    \ then \n            y=$(echo \"$y\" | sed 's/[[:alpha:]]/i/g')\n            x=$x\
    \ $(echo \"$y\" | sed 's/^/i/') \n        elif [[ \"$z\" == \"o\" ]]; then \n\
    \            y=$(echo \"$y\" | sed 's/[[:alpha:]]/o/g')\n            x=$x $(echo\
    \ \"$y\" | sed 's/^/o/') \n        elif [[ \"$z\" == \"u\" ]]; then \n       \
    \     y=$(echo \"$y\" | sed 's/[[:alpha:]]/u/g')\n            x=$x $(echo \"$y\"\
    \ | sed 's/^/u/') \n        elif [[ \"$z\" == \"A\" ]]; then \n            y=$(echo\
    \ \"$y\" | sed 's/[[:alpha:]]/A/g')\n            x=$x $(echo \"$y\" | sed 's/^/A/')\
    \ \n        elif [[ \"$z\" == \"E\" ]]; then \n            y=$(echo \"$y\" | sed\
    \ 's/[[:alpha:]]/E/g')\n            x=$x $(echo \"$y\" | sed 's/^/E/') \n    \
    \    elif [[ \"$z\" == \"I\" ]]; then \n            y=$(echo \"$y\" | sed 's/[[:alpha:]]/I/g')\n\
    \            x=$x $(echo \"$y\" | sed 's/^/I/') \n        elif [[ \"$z\" == \"\
    O\" ]]; then \n            y=$(echo \"$y\" | sed 's/[[:alpha:]]/O/g')\n      \
    \      x=$x $(echo \"$y\" | sed 's/^/O/') \n        elif [[ \"$z\" == \"U\" ",
  "    [[ -z \"$1\" ]] && { echo \"Usage: $(basename $0) WORD\" >&2; exit 1; }\n \
    \   [[ $(echo \"$1\" | wc -c) -gt 1 ]] && { echo \"Usage: $(basename $0) WORD\"\
    \ >&2; exit 1; }\n    \n    local vowels=(\"a\" \"e\" \"i\" \"o\" \"u\")\n   \
    \ local vowel_index=1\n    local vowel_found=\n    local vowel_dist=\n    local\
    \ vowel_consonant_right=$(expr length \"$1\" - 1)\n    local vowel_consonant_left=vowel_index\n\
    \    local vowel_consonant_found=\n\n    # Search for vowel in right side of the\
    \ word using binary search\n    while [[ vowel_consonant_right -gt 0 ]]; do\n\
    \        ((vowel_consonant_found += 1))\n        ((vowel_dist += 1))\n       \
    \ ((vowel_index += 1))\n\n        local vowel=${vowels[$vowel_index]}\n      \
    \  if [[ \"$1\" == *\"$vowel\" ]]; then\n            vowel_found=\"$vowel\"\n\
    \            vowel_consonant_found=\"$(( vowel_consonant_found + 1 ))\"\n    \
    \    fi\n\n        ((vowel_consonant_left -= 1))\n    done\n\n    [[ -z \"$vowel_found\"\
    \ ]] && { echo \"No vowel found in the right side of the word.\" >&2; exit 1;\
    \ }\n    echo \"$vowel_found\"", "    local string=$1\n    if [ -z \"$string\"\
    \ ] ; then\n        echo \"No string provided\"\n        return 1\n    fi\n  \
    \  # Get the number of consonants in the string\n    local num_consonants=$(echo\
    \ $string | wc -c)\n    # Store the vowel list\n    local vowel_list
  "  local string=\"$1\"\n  local vowels=\"a e i o u\" \n  local firstconsonant=\"\
    $2\"\n  local secondconsonant=\"$3\"\n  local index=$(( (${#string} + 1) / 2 ))\n\
    \  local result=\"\"\n  \n  case \"$string\" in\n    [!a-zA-Z] )\n      echo \"\
    Wrong input\"\n      return 1\n    ;;\n    *[!a-z]*[a-z]*[!a-z]*[!a-z]*[!a-zA-Z]*[!a-z]*[!a-zA-Z]*[!a-z]*[!a-zA-Z]*[!a-z]*[!a-zA-Z]*[!a-z]*[!a-z]*[!a-zA-Z]*[!a-zA-Z]*[!a-z]*[!a-zA-Z]*[!a-z]*[!a-zA-Z]*[!a-z]*[!a-zA-Z]*[!a-z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-z]*[!a-zA-Z]*[!a-zA-Z]*[!a-z]*[!a-zA-Z]*[!a-zA-Z]*[!a-z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!a-zA-Z]*[!",
  "  local vowels=(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\");\n\
    \  local string=$1;\n  local result=\"\";\n  local i=${#string};\n  local j=$((i-1));\n\
    \  local consonant=${string:$i:1};\n  while [ $i -gt 0 ]; do\n    local consonant1=${string:$i:1};\n\
    \    local consonant2=${string:$j:1};\n    local consonant3=${string:$(($i+1)):1};\n\
    \    if [ \"$consonant\" = \"$consonant1\" ] || [ \"$consonant\" = \"$consonant2\"\
    \ ] || [ \"$consonant\" = \"$consonant3\" ]; then\n      if [ \"$consonant\" =\
    \ \"$consonant1\" ]; then\n        result=\"$consonant\";\n      else\n      \
    \  result=\"${result}$consonant\";\n      fi;\n      i=$(($i-1));\n      j=$(($i-1));\n\
    \    fi;\n  done;\n  echo \"$result\"", "    local vowels=\"aAiIuU\"\n    local\
    \ string=${1:?'[get_closest_vowel] Argument cannot be null.'}\n    local consonants=${string:0:1}\n\
    \n    local len=${#string}\n    local start=0\n    local end=0\n\n    for (( i=0;\
    \ i < len; i++ )); do\n        if [[ ${vowels:(-1)} == ${string:$i} ]]; then\n\
    \            end=$((i+1))\n            break\n        fi\n    done\n\n    # print\
    \ start/end indexes for debugging\n    echo $start\n    echo $end\n\n    # return\
    \ empty string if there's no vowel in the string\n    if [[ $end -eq $start ]];\
    \ then\n        return \"\"\n    fi\n\n    # find the closest vowel from right\
    \ to the left\n    local vowel=${string:$end}\n    local vowel_length=$(expr len\
    \ -1 )\n    if [[ $end -le $vowel_length ]]; then\n        local vowel_before=${string:0:$end-1}\n\
    \        if [[ \"$vowel_before\" =~ [aeiouAEIOU] ]]; then\n            local vowel_after=${string:$end+1}\n\
    \            if [[ \"$vowel_after\" =~ [aeiouAEIOU] ]]; then\n               \
    \ local closest_vowel=${vowel_before}${vowel}${vowel_after}\n                return\
    \ $closest_vowel\n            fi\n        fi\n    fi", "    local vowel=$1\n \
    \   local count=1\n    local vowels=\"a e i o u\" #vowels\n    local rest=\" \"\
    \n    local curr \n    \n    if [[ \"$vowel\" =~ (^| )[aA]($| )([aA][^aA]*)(^|\
    \ )([aeiouy])($| ) ]]\n    then curr=\"${BASH_REMATCH[3]}\"; rest=\"${BASH_REMATCH[1]}${BASH_REMATCH[2]}${BASH_REMATCH[4]}\"\
    ;\n    elif [[ \"$vowel\" =~ (^| )[eE]($| )([eE][^eE]*)(^| )([aeiouy])($| ) ]]\n\
    \    then curr=\"${BASH_REMATCH[3]}\"; rest=\"${BASH_REMATCH[1]}${BASH_REMATCH[2]}${BASH_REMATCH[4]}\"\
    ;\n    elif [[ \"$vowel\" =~ (^| )[iI]($| )([iI][^iI]*)(^| )([aeiouy])($| ) ]]\n\
    \    then curr=\"${BASH_REMATCH[3]}\"; rest=\"${BASH_REMATCH[1]}${BASH_REMATCH[2]}${BASH_REMATCH[4]}\"\
    ;\n    elif [[ \"$vowel\" =~ (^| )[oO]($| )([oO][^oO]*)(^| )([aeiouy])($| ) ]]\n\
    \    then curr=\"${BASH_REMATCH[3]}\"; rest=\"${BASH_REMATCH[1]}${BASH_REMATCH[2]}${BASH_REMATCH[4]}\"\
    ;\n    elif [[ \"$vowel\" =~ (^| )[s]($| )([sS][^sS]*)(^| )([aeiouy])($| ) ]]\n\
    \    then curr=\"${BASH_REMATCH[3]}\"; rest=\"${BASH_REMATCH[1]}${BASH_REMATCH[2]}${BASH_REMATCH[4]}\"\
    ;\n    elif [[ \"$vowel\" =~ (^| )[uU]($| )([uU][^uU]*)(^| )([aeiouy])($| ) ]]\n\
    \    then curr=\"${BASH_REMATCH[3]}\"; rest=\"${BASH_REMATCH[1]}${BASH_REMATCH[2]}${BASH_REMATCH[4]}\"\
    ;\n    elif [[ \"$vowel\" =~ (^| )[yY]($| )([yY][^yY]*)(^| )([aeiou", "  local\
    \ string=\"$1\"\n  [[ \"$string\" =~ ^[a-zA-Z]+$ ]] || return\n  local vowels=\"\
    aeiouyui\"\n  local count=\"101\"\n  local last=\"${#string}\"\n  local vowel\n\
    \  local first\n  [[ \"$last\" -gt \"$count\" ]] || return\n  first=${string:0:1}\n\
    \  second=${string:1:1}\n  [[ $first =~ $vowels ]] || return\n  [[ $second =~\
    \ $vowels ]] || return\n  [[ -z $3 ]] || vowel=$3\n  while [[ $last -gt 0 ]];\
    \ do\n    [[ \"$string\" =~ $vowel ]] || break\n    first=${string:0:1}\n    second=${string:1:1}\n\
    \    [[ $first =~ $vowels ]] || break\n    [[ $second =~ $vowels ]] || break\n\
    \    [[ \"$last\" -gt \"$count\" ]]  && return\n    last=$(( last - 1 ))\n   \
    \ first=${string:0:1}\n    second=${string:1:1}\n    [[ $first =~ $vowels ]] ||\
    \ break\n    [[ $second =~ $vowels ]] || break\n    [[ \"$last\" -gt \"$count\"\
    \ ]] || return\n    last=$(( last - 1 ))\n    first=${string:0:1}\n    second=${string:1:1}\n\
    \    [[ $first =~ $vowels ]] || break\n    [[ $second =~ $vowels ]] || break\n\
    \    [[ \"$last\" -gt \"$count\" ]]  && return\n    last=$(( last - 1 ))\n   \
    \ first=${string:0:1}\n    second=${string:1:1}\n    [[ $first =~ $vowels ]] ||\
    \ break\n    [[ $second =~ $vowels ]] || break\n    [[ \"$last\" -gt \"$count\"\
    \ ]]  && return\n    last=$(( last - 1 ))\n    first=${string:0:1}\n    second=${string:1:1}\n\
    \    [[ $first =~ $vowels ]] || break\n    [[ $second =~ $vowels ]] || break\n\
    \    [[ \"$last\" -gt \"$count\" ]] || return\n    last=$(( last - 1 ))\n    first=${string:0:1}\n\
    \    second=${string:1:1}\n    [[ $first =~ $vowels ]] || break\n    [[ $second\
    \ =~ $vowels ]] || break\n    [[ \"$last\" -gt \"$count\" ]]  && return\n    last=$((\
    \ last - 1 ))\n", "    local string=\"${1}\"\n    local vowels=\"a e i o u\"\n\
    \    local vowel_count=0\n    local vowel_index=0\n    local vowel_met_condition=0\n\
    \    for (( i=1; i <= ${#string}; i++ )); do\n        local char=\"${string:$i:1}\"\
    \n        if [[ \"$char\" =~ [aeiou] ]]; then\n            vowel_count=$((vowel_count+1))\n\
    \            vowel_met_condition=1\n            if [[ \"$vowel_index\" -eq 0 ]];\
    \ then\n                ((vowel_index=$i))\n            fi\n        fi\n    done\n\
    \    if [[ \"$vowel_met_condition\" -eq 1 ]]; then\n        local vowel=\"$(printf\
    \ \"${vowels:$((vowel_index-1)):1}\")\"\n        echo \"$vowel\"\n    else\n \
    \       echo \"\"\n    fi", "    local -i pos=0\n    local vowels=(\"a\" \"e\"\
    \ \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")\n    local -i j=0\n    local\
    \ word=$1\n    local vowel\n\n    while (( $j < ${#word} )) ; do\n        vowel=${word:$j:1}\n\
    \        if (( ${#vowel} != 1 )) ; then\n            pos=$j\n            break\n\
    \        fi\n        (( j++ ))\n    done\n\n    while (( $pos > 0 )) ; do\n  \
    \      (( j-- ))\n        vowel=${word:$j:1}\n        if (( ${#vowel} != 1 ))\
    \ ; then\n            pos=$j\n            break\n        fi\n    done\n\n    if\
    \ (( ${#word} > $pos )) ; then\n        word=${word:0:$pos}\n    fi\n    echo\
    \ $vowels", "    local word=${1}\n    local result=${2}\n    # check consonants\
    \ first\n    local count=0\n    for char in $(echo $word | tr -cd '[:upper:]');\
    \ do\n        if [ \"$char\" == \"a\" ]; then\n            count=$((count + 1))\n\
    \        fi\n        if [ \"$char\" == \"e\" ]; then\n            count=$((count\
    \ + 1))\n        fi\n        if [ \"$char\" == \"i\" ]; then\n            count=$((count\
    \ + 1))\n        fi\n        if [ \"$char\" == \"o\" ]; then\n            count=$((count\
    \ + 1))\n        fi\n        if [ \"$char\" == \"u\" ]; then\n            count=$((count\
    \ + 1))\n        fi\n    done\n    echo $count > $result ", "  local input=\"\
    $1\"\n\n  # if input length is 0 return empty\n  [ \"$#\" -eq 0 ] && return 0\n\
    \n  # if input length is 1 return first char\n  [ \"$#\" -eq 1 ] && return \"\
    $input\"[0]\n\n  # count consonants in input\n  local inputCount=${#input}\n \
    \ local consonantCount=0\n\n  # iterate through input\n  for (( index=0; index<inputCount;\
    \ index++ )); do\n    # count consonants\n    local inputChar=${input:${index}:1}\n\
    \    consonantCount=$((${consonantCount}+${#inputChar}))\n  done\n\n  # iterate\
    \ through input\n  for (( index=0; index<consonantCount; index++ )); do\n    #\
    \ check whether current vowel is in a word\n    if [[ \"$input\" =~ \"$vowel\"\
    [${index}]* ]]; then\n      # return vowel\n      return \"${input:${index}:1}\"\
    \n    fi\n  done\n\n  # if there is no vowel in word return empty string\n  return\
    \ \"\"", "    local string=\"$1\"\n    local vowels=(a e i o u)\n    local i\n\
    \    local c\n    local j\n    local c\n    local k\n    for ((i = 0; i < ${#string};\
    \ i++)); do\n        c=${string:$i:1}\n        if [[ $c =~ [aeiou] ]]; then\n\
    \            for ((j = i-1; j <= i+1; j++)); do\n                k=${string:$j:1}\n\
    \                if [[ $k =~ [aeiou] ]]; then\n                    c=${string:$j:1}\n\
    \                    ((j=i+1))\n                    break\n                fi\n\
    \            done\n        fi\n    done\n    if [[ $c =~ [aeiou] ]]; then\n  \
    \      $(cat <<< \"$c\" | sort -u)\n    else\n        echo \"\"\n    fi", "  local\
    \ vowels=\"aeiou\"\n  local string=$1\n  local vowel_index=$((${#string} - 1))\n\
    \  local vowel_found=''\n  local previous_char=''\n  local next_char=''\n  local\
    \ char=$string\n\n  while [ \"$char\" != '' ]; do\n    if [ \"${char:0:1}\" ==\
    \ \"$vowel_index\" ]; then\n      vowel_found=\"$vowel_found$char\"\n    fi\n\
    \    previous_char=\"$char\"\n    char=\"${char:$((${#char} - 1))}\"\n    next_char=\"\
    $char\"\n\n  done\n\n  echo $vowel_found", "    local s=$1\n    local len=${#s}\n\
    \    local index=0\n    local vowel=\n    local vowelCount\n    local vowelIndex=\n\
    \    local vowelLength\n    local last\n    local first\n    local consonantCount\n\
    \    local consonantIndex\n    local consonantLength\n    local lastConsonant\n\
    \    local lastConsonantIndex\n    local lastConsonantLength\n    local nextConsonant\n\
    \    local nextConsonantIndex\n    local nextConsonantLength\n    \n    for ((\
    \ index=0; index<len; index++ ))\n    do\n        vowelCount=0\n        vowelIndex=0\n\
    \        vowelLength=${#vowel}\n        consonantCount=0\n        consonantIndex=0\n\
    \        consonantLength=${#consonant}\n        \n        last=${s:index:$((index-1))}\n\
    \        first=${s:index:$((index+1))}\n    \n        if [[ \"$first\" == \"a\"\
    \ && \"$last\" == \"z\" ]] ; then\n            vowelCount=$((vowelCount+1))\n\
    \        elif [[ \"$first\" == \"A\" && \"$last\" == \"Z\" ]] ; then\n       \
    \     vowelCount=$((vowelCount+1))\n        elif [[ \"$first\" == \"u\" && \"\
    $last\" == \"z\" ]] ; then\n            vowelCount=$((vowelCount+1))\n       \
    \ elif [[ \"$first\" == \"U\" && \"$last\" == \"Z\" ]] ; then\n            vowelCount=$((vowelCount+1))\n\
    \        fi\n    \n    \n        nextConsonant=${s:$((index+1)):$((index+2))}\n\
    \        if [[ \"$nextConsonant\" != \"a\" && \"$nextConsonant\" != \"A\" && \"\
    $nextConsonant\" != \"u\" && \"$nextConsonant\" != \"U\" ]] ; then\n         \
    \   consonantCount=$((consonantCount+1))\n        else\n            nextConsonantIndex=$((index+2))\n\
    \            nextConsonantLength=${#nextConsonant}\n            if [[ \"$nextConsonant\"\
    \ == \"a\" && \"$nextConsonantIndex\" != \"$index\" ]] ; then\n              \
    \  consonantCount=$((consonantCount+1))\n            elif [[ \"$nextConsonant\"\
    \ == \"A\" && \"$nextConsonantIndex\" != \"$index\" ]] ; then\n              \
    \  consonantCount=$((consonantCount+1))\n            elif [[ \"$nextConsonant\"\
    \ == \"u\" && \"$nextConson", "    local vowels=\"aieouAEIOU\"\n    local vowel_count=$(echo\
    \ \"${vowels}\" | grep -c \"${1}\")\n    local vowel_position\n    if [[ ${vowel_count}\
    \ -gt 0 ]]; then\n        vowel_position=$(echo \"${vowels}\" | grep -n \"${1}\"\
    \ | cut -d \":\" -f 1)\n    fi\n    if [[ ${vowel_position} -eq 1 ]]; then\n \
    \       echo \"${vowels:0:1}\"\n    elif [[ ${vowel_position} -gt ${vowel_count}\
    \ ]]; then\n        echo \"${vowels:${vowel_position}:1}\"\n    else\n       \
    \ echo \"${vowels:${vowel_position}:1}\"\n    fi", "\tlocal vowels=\"a e i o u\
    \ y\";\n\tlocal vowels_count=$(echo $vowels | wc -l);\n\tif [[ $vowels_count -eq\
    \ 1 ]]; then\n\t\techo \"$vowels\";\n\telse\n\t\tlocal letters=$(echo $1 | tr\
    \ \" \" \"\\n\");\n\t\tlocal found_vowel=\"\";\n\t\tlocal letter_count=$#letters;\n\
    \t\tfor (( i=0; i<$letter_count; i++ )); do\n\t\t\tlocal letter=$letters[i];\n\
    \t\t\tif [[ \"$letter\" =~ \\[aeiou\\]$ ]]; then\n\t\t\t\tlocal vowel=\"[aeiou]\"\
    ;\n\t\t\telif [[ \"$letter\" =~ \\[AEIOU\\]$ ]]; then\n\t\t\t\tlocal vowel=\"\
    [AEIOU]\";\n\t\t\telif [[ \"$letter\" =~ \\[IiOU\\]$ ]]; then\n\t\t\t\tlocal vowel=\"\
    [IiOU]\";\n\t\t\telif [[ \"$letter\" =~ \\[Ii\\]$ ]]; then\n\t\t\t\tlocal vowel=\"\
    [Ii]\";\n\t\t\telif [[ \"$letter\" =~ \\[OU\\]$ ]]; then\n\t\t\t\tlocal vowel=\"\
    [OU]\";\n\t\t\telif [[ \"$letter\" =~ \\[ou\\]$ ]]; then\n\t\t\t\tlocal vowel=\"\
    [ou]\";\n\t\t\telif [[ \"$letter\" =~ \\[u\\]$ ]]; then\n\t\t\t\tlocal vowel=\"\
    [u]\";\n\t\t\telif [[ \"$letter\" =~ \\[y\\]$ ]]; then\n\t\t\t\tlocal vowel=\"\
    [y]\";\n\t\t\telif [[ \"$letter\" =~ \\[Y\\]$ ]]; then\n\t\t\t\tlocal vowel=\"\
    [Y]\";\n\t\t\telse\n\t\t\t\techo \"$letter\";\n\t\t\t\tbreak;\n\t\t\tfi\n\t\t\t\
    local vowel_count=$(echo $vowels | grep -w $vowel | wc -l);\n\t\t\tif [[ \"$vowel_count\"\
    \ -eq 0 ]]; then\n\t\t\t\techo \"$letter\";\n\t\t\t\tbreak;\n\t\t\telif [[ \"\
    $vowel_count\" -gt 1 ]]; then\n\t\t\t\tif [[ \"$vowel\" =~ \\[aeiou\\]$ ]]; then\n\
    \t\t\t\t\tlocal next_vowel=\"[aeiou]\";\n\t\t\t\telif [[ \"$vowel\" =~ \\[AEIOU\\\
    ]$ ]]; then\n\t\t\t\t\tlocal next_vowel=\"[AEIOU]\";\n\t\t\t\telif [[ \"$vowel\"\
    \ =~ \\[IiOU\\]$ ]]; then\n\t\t\t\t\tlocal next_vowel=\"[IiOU]\";\n\t\t\t\telif\
    \ [[ \"$vowel\" =~ \\[Ii\\]$ ]]; then\n\t\t\t\t\tlocal next_vowel=\"[Ii]\";\n\t\
    \t\t\telif [[ \"$vowel", "  local vowels=\"a e i o u\"\n  local s=${1:0:1}\n \
    \ local e=${1:1:1}\n  local i=${1:2:1}\n  local o=${1:3:1}\n  local u=${1:4:1}\n\
    \  local l=${#1}\n  local count=0\n  local i1=${#vowels[*]}\n  local i2=${#vowels[@]}\n\
    \  local i3=${#s}\n  local i4=${#e}\n  local i5=${#i}\n  local i6=${#o}\n  local\
    \ i7=${#u}\n  local i8=${#s}\n  local i9=${#e}\n  local i10=${#i}\n  local i11=${#o}\n\
    \  local i12=${#u}\n  local i13=${#s}\n  local i14=${#e}\n  local i15=${#i}\n\
    \  local i16=${#o}\n  local i17=${#u}\n  local i18=${#s}\n  local i19=${#e}\n\
    \  local i20=${#i}\n  local i21=${#o}\n  local i22=${#u}\n  local i23=${#s}\n\
    \  local i24=${#e}\n  local i25=${#i}\n  local i26=${#o}\n  local i27=${#u}\n\
    \  local i28=${#s}\n  local i29=${#e}\n  local i30=${#i}\n  local i31=${#o}\n\
    \  local i32=${#u}\n  local i33=${#s}\n  local i34=${#e}\n  local i35=${#i}\n\
    \  local i36=${#o}\n  local i37=${#u}\n  local i38=${#s}\n  local i39=${#e}\n\
    \  local i40=${#i}\n  local i41=${#o}\n  local i42=${#u}\n  local i43=${#s}\n\
    \  local i44=${#e}\n  local i45=${#i}\n  local i46=${#o}\n  local i47=${#u}\n\
    \  local i48=${#s}\n  local i49=${#e}\n  local i50=${#i}\n  local i51=${#", " \
    \   local vowels=\"aeiouAEIOU\"\n    for vowel in \"${vowels[@]}\"; do\n     \
    \   echo \"$1\" | grep -E \"^[^$vowel]\" | grep -E \"[^$vowel]$\" | head -n 1\
    \ 2> /dev/null\n    done", "    local string=\"${1}\"\n    local vowels=\"a e\
    \ i o u\" # vowels in English\n    local vowel_count=\"$(echo -e \"${vowels}\"\
    \ | wc -c)\"\n    local consonant_count=\"$(echo -e \"${string}\" | awk '{print\
    \ $1}' | wc -c)\"\n    local vowel_count=$((${vowel_count} - ${consonant_count}))\n\
    \    local vowel_index=$(echo \"${vowels}\" | awk -v x=${vowel_count} '{$1=\"\"\
    ; print; exit}' | sort -n)\n    for index in ${vowel_index}; do\n        echo\
    \ \"${vowels}\" | awk -v x=${index} '{$1=\"\"; print; exit}' | sort -n | head\
    \ -${vowel_count} | tail -1 | awk '{print $1}'\n    done", "    local vowel=\"\
    $1\"\n    local vowel_count=0\n    local vowel_found=\"\"\n    local vowel_position=0\n\
    \    local vowel_counter=1\n    local vowel_char=$(cat <<< \"$vowel\" | cut -c1-8)\n\
    \    while [[ ${#vowel_found} -eq 0 ]]; do\n        if [[ $vowel_counter -eq 1\
    \ ]]; then\n            vowel_found=()\n            echo \"$vowel_char\"\n   \
    \     else\n            for (( i=0; i<${#vowel_found[@]}; i++ )); do\n       \
    \         if [[ ${vowel_found[$i]} -eq $vowel ]]; then\n                    vowel_found=(\
    \ \"${vowel_found[@]}\" \"$vowel_char\" )\n                    vowel_found[${#vowel_found[@]}-1]=$vowel_char\n\
    \                    echo \"$vowel_found[@]\"\n                    break\n   \
    \             fi\n            done\n        fi\n        let vowel_counter=vowel_counter+1\n\
    \        echo \"$vowel_char\"\n        vowel_char=$(cat <<< \"$vowel\" | cut -c1-8)\n\
    \    done\n    echo \"$vowel_found[@]\"", "    local string=$1\n    local string2=\"\
    \"\n    local flag=0\n    local position1=-1\n    local position2=-1\n    local\
    \ position=-1\n    local flag1=-1\n    local flag2=-1\n    local temp=-1\n   \
    \ local vowel=\"aeiouAEIOU\"\n    local vowel1=-1\n    local vowel2=-1\n    local\
    \ vowel3=-1\n    local position3=0\n    local position4=0\n    local position5=0\n\
    \    local position6=0\n    local position7=0\n    local position8=0\n    local\
    \ position9=0\n    local position10=0\n    local position11=0\n    local position12=0\n\
    \    local position13=0\n    local position14=0\n    local position15=0\n    local\
    \ position16=0\n    local position17=0\n    local position18=0\n    local position19=0\n\
    \    local position20=0\n    local position21=0\n    local position22=0\n    local\
    \ position23=0\n    local position24=0\n    local position25=0\n    local position26=0\n\
    \    local position27=0\n    local position28=0\n    local position29=0\n    local\
    \ position30=0\n    local position31=0\n    local position32=0\n    local position33=0\n\
    \    local position34=0\n    local position35=0\n    local position36=0\n    local\
    \ position37=0\n    local position38=0\n    local position39=0\n    local position40=0\n\
    \    local position41=0\n    local position42=0\n    local position43=0\n    local\
    \ position44=0\n    local position45=0\n    local position46=0\n    local position47=0\n\
    \    local position48=0\n    local position49=0\n    local position50=0\n    local\
    \ position51=0\n    local position52=0\n    local position53=0\n    local position54=0\n\
    \    local position55=0\n    local position56=0\n    local position57=0\n    local\
    \ position58=0\n    local position59=0\n    local position60=0\n    local position61=0\n\
    \    local position62=0\n    local position63=0\n    local position64=0\n    local\
    \ position65=0\n    local position66=0\n    local position67=0\n    local position68=0\n\
    \    local position69=0\n    local position70=0\n    local position71=0\n    local\
    \ position72=0\n    local position73=0\n    local position74", "    local i \n\
    \    local vowels=\"a e i o u\"\n    local consonants=\"b c d f g h j k l m n\
    \ p q r s t v w x z\"\n    local vowel_count=$(echo $vowels | wc -c)\n    local\
    \ consonant_count=$(echo $consonants | wc -c)\n    local consonant_index=$((${#1}\
    \ - 1))\n    local consonant_end=$((${#1} - $consonant_count))\n    local vowel_index=$((${#1}\
    \ - $vowel_count))\n\n    # we only need to check one direction\n    for ((i=0;i<$consonant_count;i++))\n\
    \    do\n        # if the consonant is in the beginning or the end\n        if\
    \ [[ ${1:$i} == *${consonants:$i} ]]\n        then\n            # check the next\
    \ consonant\n            let \"consonant_index--\"\n        fi\n    done\n   \
    \ if [[ ${1:$consonant_index} == *${consonants:$consonant_end} ]]\n    then\n\
    \        let \"consonant_index++\"\n    fi\n    \n    if [[ ${1:$consonant_index}\
    \ > $vowel_count ]]\n    then\n        echo \"empty\"\n    else\n        for ((i=$consonant_index-$vowel_count;i<$consonant_index;i++))\n\
    \        do\n            echo \"${vowels:$i:1}\"\n        done\n    fi", "\tlocal\
    \ vowel_chars=(\"a\"\n\t\t\t\"e\"\n\t\t\t\"i\"\n\t\t\t\"o\"\n\t\t\t\"u\")\n\t\
    for (( index=0; index<${#vowel_chars[*]}; index++ )); do\n\t\tlocal left_char=${1:0:1}\n\
    \t\tlocal right_char=${1:1:1}\n\t\tlocal current_char=${1:2:1}\n\t\tif [[ \"${vowel_chars[*]}\"\
    \ =~ \"${left_char}${right_char}\" ]]; then\n\t\t\tlocal next_char=${1:3:1}\n\t\
    \t\tif [[ \"${vowel_chars[*]}\" =~ \"${left_char}${next_char}\" ]]; then\n\t\t\
    \t\techo \"${next_char}\"\n\t\t\t\treturn\n\t\t\telif [[ \"${vowel_chars[*]}\"\
    \ =~ \"${next_char}${right_char}\" ]]; then\n\t\t\t\techo \"${left_char}\"\n\t\
    \t\t\treturn\n\t\t\tfi\n\t\tfi\n\tdone", "    # your code goes here\n    local\
    \ string=\"$1\"\n    echo \"$string\" | while read -r line; do\n        local\
    \ output=\"$line\"\n        echo \"$output\" | grep \"[aeiouAEIOU]\" > /dev/null\n\
    \        if [[ $? -eq 0 ]]; then\n            local char=\"${output##*[aeiouAEIOU]}\"\
    \n            local count=\"1\"\n            echo \"$output\" | grep \"^[^$char]\"\
    \ > /dev/null\n            if [[ $? -eq 0 ]]; then\n                count=\"$(echo\
    \ \"$output\" | sed -n \"s/^\\([^$char]*\\).*\\([0-9]\\)/\\2/p\")\"\n        \
    \    fi\n            echo \"$char\" | awk -F '.' '{print $1-$count}' | sort -nr\
    \ | head -1\n        else\n            echo \"$output\"\n        fi\n    done",
  "    local w=$1\n    local vowels=\"a e i o u\"\n    local consonants=\"b d f g\
    \ h j k l m n p q r s t v w x y z\"\n    local index=0\n    local found_vowel=false\n\
    \    while true; do\n        index=$(($index+1))\n        local c=${w:$index:1}\n\
    \        if [ \"$c\" = \"$vowels\" ] || [ \"$c\" = \"$consonants\" ] || [ \"$c\"\
    \ != \"a\" ] && [ \"$c\" != \"e\" ] && [ \"$c\" != \"i\" ] && [ \"$c\" != \"o\"\
    \ ] && [ \"$c\" != \"u\" ]; then break; fi\n    done\n    if [ \"$index\" -eq\
    \ \"$#w\" ]; then return \"\"; fi\n    local i\n    local j\n    for ((i=$(($index-1));\
    \ i<$(($index+1)); i++)) do\n        local c=${w:$i:1}\n        for ((j=$((i+1));\
    \ j<$(($#w)); j++)) do\n            local c=${w:$j:1}\n            if [ \"$c\"\
    \ = \"$vowels\" ] || [ \"$c\" = \"$consonants\" ] || [ \"$c\" != \"a\" ] && [\
    \ \"$c\" != \"e\" ] && [ \"$c\" != \"i\" ] && [ \"$c\" != \"o\" ] && [ \"$c\"\
    \ != \"u\" ]; then break; fi\n        done\n        if [ \"$j\" -eq \"$#w\" ];\
    \ then return \"\"; fi\n    done\n    local c=${w:$index:1}\n    for ((i=$(($index-1));\
    \ i<$(($index+1)); i++)) do\n        local c=${w:$i:1}\n        for ((j=$(($#w)-($i-1));\
    \ j<$(($#w)); j++)) do\n            local c=${w:$j:1}\n            if [ \"$c\"\
    \ = \"$vowels\" ] || [ \"$c\" = \"$consonants\" ] || [ \"$c\" != \"a\" ] && [\
    \ \"$c\" != \"e\" ] && [ \"$c\" != \"i\" ] && [ \"$c\" != \"o\" ] && [ \"$c\"\
    \ != \"u\" ]; then break; fi\n        done\n        if [ \"$j\" -eq \"$#w\" ];\
    \ then return \"\"; fi\n    done\n    local c=${w:$index:1}\n    for ((i=$(($#w-($index-1)));\
    \ i<$(($#w))); i++)) do\n        local c=${w:$i:1}\n        for ((j=$(($#w)-($index-1));\
    \ j<$(($#w)); j", "  local -i consonants vowels i result=-1\n  consonants=\"bcdfghjklmnpqrstvwxyz\"\
    \n  vowels=\"aeiou\"\n  for ((i=0; i<${#1}; i++)); do\n      if [[ $(( $i - 1\
    \ )) -eq 0 ]]; then\n          result=$vowels\n      else\n          result=$consonants\n\
    \      fi\n      result=${result:$i:$i}\n      if [[ $result =~ $vowels ]]; then\n\
    \          result=\"\"\n      fi\n  done\n  echo $result", "    local vowels=\"\
    aeiouy\";\n    local word=\"$1\";\n    local last_consonant=\"a\";\n    local\
    \ last_vowel=\"a\";\n\n    for consonant in $word; do\n        if [[ ${vowels}\
    \ =~ $consonant ]]; then\n            last_consonant=$consonant;\n        fi;\n\
    \    done;\n\n    for vowel in $word; do\n        if [[ ${vowels} =~ $vowel ]];\
    \ then\n            last_vowel=$vowel;\n        fi;\n    done;\n\n    if [[ ${last_consonant}\
    \ != a ]]; then\n        echo \"$last_vowel\";\n    else\n        echo \"\";\n\
    \    fi;", "    local vowels=\"aeiouAEIOU\"\n    local vowels_count=${#vowels}\n\
    \    local input=$1\n    local i=${#input}\n    local output=\"\"\n    local consonant=\"\
    ${input:$((i-1))}\"\n    local consonant_count=${#consonant}\n    local vowel=\"\
    ${input:$((i-2))}\"\n    local vowel_count=${#vowel}\n    \n    # Handle empty\
    \ input\n    if [ -z $1 ]; then\n        echo \"\"\n        return\n    fi\n \
    \   \n    if [ \"$consonant_count\" = \"1\" ]; then\n        # Handle single consonant\n\
    \        if [ \"$vowel_count\" = \"0\" ]; then\n            echo $output\n   \
    \     fi\n        return\n    fi\n    \n    for (( c=0; c<consonant_count; c++\
    \ )); do\n        for (( v=0; v<vowel_count; v++ )); do\n            if [ \"$consonant\"\
    \ == \"${vowels:v:1}\" ] && [ \"$vowel\" == \"${vowels:v:$((vowels_count-v))}\"\
    \ ]; then\n                output=\"$output$vowel\"\n                break\n \
    \           fi\n        done\n    done\n    echo \"$output\"", "    local input_str=$1\n\
    \    local vowel_arr=(a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a ", "    local vowels=\"aieou\"\n    local c=$1;\
    \ # c is the word\n    local p=${#c}; # p is the length of the word\n    local\
    \ i=$((p-1)); # i is the position of last consonant\n    while [ $i -ge 0 ]; do\n\
    \        if [[ $(c[i]) =~ ^[aeiou]+$ ]]; then\n            echo \"${vowels[$((i-1))]}\"\
    \n            return\n        fi\n        i=$((i-1))\n    done", "  local word=\"\
    $1\"\n\n  local vowels=()\n  local vowel_index=1\n  local vowels_len=${#vowels[@]}\n\
    \n  for i in \"${word:#?}\"; do\n    if [[ \"$i\" == [aA]* ]]; then\n      vowel_index=$((vowel_index+1))\n\
    \      (( vowels_len-- ))\n    fi\n  done\n\n  local vowel_found\n  local vowel_distance=0\n\
    \n  if [[ \"$vowels_len\" > 0 ]]; then\n    local vowel_found=0\n    for (( i=1;\
    \ i <= \"${vowel_index}\"; i++ )); do\n      if [[ \"${vowels[$i]}\" == \"i\"\
    \ ]]; then\n        vowel_distance=$(( vowel_distance + 1 ))\n      elif [[ \"\
    ${vowels[$i]}\" == \"u\" ]]; then\n        vowel_distance=$(( vowel_distance +\
    \ 2 ))\n      elif [[ \"${vowels[$i]}\" == \"o\" ]]; then\n        vowel_distance=$((\
    \ vowel_distance + 3 ))\n      elif [[ \"${vowels[$i]}\" == \"A\" ]]; then\n \
    \       vowel_distance=$(( vowel_distance + 4 ))\n      elif [[ \"${vowels[$i]}\"\
    \ == \"E\" ]]; then\n        vowel_distance=$(( vowel_distance + 5 ))\n      elif\
    \ [[ \"${vowels[$i]}\" == \"O\" ]]; then\n        vowel_distance=$(( vowel_distance\
    \ + 6 ))\n      fi\n    done\n\n    if [[ \"${vowel_found}\" == \"0\" ]]; then\n\
    \      vowel_found=\" \"\n    fi\n\n    echo \"${vowels[$(( vowel_index - 1 ))]}\"\
    \n  else\n    echo \"$word\"\n  fi", "    local str=\"$1\"\n    local vowels=\"\
    a e i o u AE IE OE UE \"\n\n    local vowel_count=0\n    local vowel_index=0\n\
    \    local vowel_left=0\n    local vowel_right=0\n    local prev_vowel_index=-1\n\
    \    local cur_vowel_index=-1\n\n    for (( i=0; i<${#str}; i++ )); do\n     \
    \   local c=${str:i:1}\n        if [[ \"$c\" == [AEIOU] ]]; then\n           \
    \ vowel_count=$(( vowel_count+1 ))\n        fi\n        if [[ \"$c\" == [AEIOU]\
    \ ]]; then\n            vowel_right=$(( vowel_right+1 ))\n        fi\n    done\n\
    \    \n    for (( i=0; i<${#str}; i++ )); do\n        local c=${str:i:1}\n   \
    \     if [[ \"$c\" == [AEIOU] ]]; then\n            cur_vowel_index=$(( i+1 ))\n\
    \        fi\n    done\n\n    if [[ \"$vowel_count\" -gt 0 ]]; then\n        ((\
    \ vowel_index=1 ))\n    else\n        (( vowel_index=1 ))\n    fi\n    \n    for\
    \ (( i=0; i<${#str}; i++ )); do\n        local c=${str:i:1}\n        if [[ \"\
    $c\" == [AEIOU] ]]; then\n            (( prev_vowel_index=$i ))\n        fi\n\
    \    done\n\n    local vowel_mid_index=0\n    local vowel_left_mid_index=0\n \
    \   local vowel_right_mid_index=0\n\n    for (( i=0; i<${#str}; i++ )); do\n \
    \       local c=${str:i:1}\n        if [[ \"$c\" == [AEIOU] ]]; then\n       \
    \     if [ \"$vowel_left_mid_index\" -eq \"$vowel_index\" -a \"$vowel_right\"\
    \ -ne 0 ]; then\n                (( vowel_mid_index=0 ))\n            elif [ \"\
    $vowel_left_mid_index\" -ne \"$vowel_index\" -a \"$vowel_right\" -ne 0 ]; then\n\
    \                (( vowel_mid_index=1 ))\n            fi\n        fi\n    done\n\
    \n    if [ \"$prev_vowel_index\" -eq \"$vowel_index\" ]; then\n        (( vowel_mid_index=0\
    \ ))\n    elif [ \"$prev_vowel_index\" -ne \"$vowel_index\" ]; then\n        ((\
    \ vowel_mid_index=1 ))\n    fi\n    \n    local closest_vowel_left=\"${vowels:0:1}\"\
    \n    local closest_vowel_right=\"${vowels:$(( ${#vowels} -1)):", "    local a=${1:-}\n\
    \    local l=${#a}\n    local vowels=\"a e i o u y\"\n    local counter=0\n  \
    \  local vowel\n    for i in ${vowels}; do\n        if [[ \"$i\" == \"$a\" ]];\
    \ then\n            return $i\n        fi\n    done\n    while [ $counter -lt\
    \ $l ]; do\n        counter=$((counter+1))\n        local c=${a:$counter:1}\n\
    \        if [[ \"$c\" == \"a\" ]]; then\n            return $vowel\n        fi\n\
    \        if [[ \"$c\" == \"e\" ]]; then\n            return $vowel\n        fi\n\
    \        if [[ \"$c\" == \"i\" ]]; then\n            return $vowel\n        fi\n\
    \        if [[ \"$c\" == \"o\" ]]; then\n            return $vowel\n        fi\n\
    \        if [[ \"$c\" == \"u\" ]]; then\n            return $vowel\n        fi\n\
    \        if [[ \"$c\" == \"y\" ]]; then\n            return $vowel\n        fi\n\
    \    done\n    return \"\"", "  local word=$1\n  local vowels=( a e i o u A E\
    \ I O U )\n  local last_vowel_index=${#vowels[*]}\n  local i=$((${#word} -1))\n\
    \  local last_vowel=\n  while [ ${#word} -gt 0 ]; do\n    i=$((${#word} -1))\n\
    \    local j=$((${#word} -1))\n    while [ ${#word} -gt 0 ]; do\n      if [ ${#word}\
    \ -gt 0 ] && [ ${word:$((${#word} -1 )):1} = \"a\" ]; then\n        word=${word:1:((${#word}\
    \ -1 ))}\n      fi\n      if [ ${#word} -gt 0 ] && [ ${word:$((${#word} -1 )):1}\
    \ = \"e\" ]; then\n        word=${word:1:((${#word} -1 ))}\n      fi\n      if\
    \ [ ${#word} -gt 0 ] && [ ${word:$((${#word} -1 )):1} = \"i\" ]; then\n      \
    \  word=${word:1:((${#word} -1 ))}\n      fi\n      if [ ${#word} -gt 0 ] && [\
    \ ${word:$((${#word} -1 )):1} = \"o\" ]; then\n        word=${word:1:((${#word}\
    \ -1 ))}\n      fi\n      if [ ${#word} -gt 0 ] && [ ${word:$((${#word} -1 )):1}\
    \ = \"u\" ]; then\n        word=${word:1:((${#word} -1 ))}\n      fi\n      if\
    \ [ ${#word} -gt 0 ] && [ ${word:$((${#word} -1 )):1} = \"A\" ]; then\n      \
    \  word=${word:1:((${#word} -1 ))}\n      fi\n      if [ ${#word} -gt 0 ] && [\
    \ ${word:$((${#word} -1 )):1} = \"E\" ]; then\n        word=${word:1:((${#word}\
    \ -1 ))}\n      fi\n      if [ ${#word} -gt 0 ] && [ ${word:$((${#word} -1 )):1}\
    \ = \"I\" ]; then\n        word=${word:1:((${#word} -1 ))}\n      fi\n      if\
    \ [ ${#word} -gt 0 ] && [ ${word:$((${#word} -1 )):1} = \"O\" ]; then\n      \
    \  word=${word:1:((${#word} -1 ))}\n      fi\n      if [ ${#word} -g", "  local\
    \ STRING=\"$1\"\n  local Vowel=\"aeiouAEIOU\"\n  local i=${#Vowel}\n  local j=$((${#STRING}\
    \ - 1))\n  local vowel\n  local con\n  local len\n  local min_i\n  local min_j\n\
    \  local min_len\n  local res\n\n  while [ \"$j\" -gt 0 ]; do\n    vowel=${Vowel:$j:1}\n\
    \    con=${STRING::$j}\n    len=${#con}\n    min_i=\"$j\"\n    min_j=\"$j\"\n\
    \    min_len=\"$len\"\n\n    while [ \"$i\" -gt 0 ]; do\n      if [[ \"$con\"\
    \ == \"${STRING:$i:1}\" ]]; then\n        (( i -= 1 ))\n        break\n      fi\n\
    \      (( i -= 1 ))\n    done\n\n    while [ \"$i\" -gt 0 ]; do\n      if [[ \"\
    $vowel\" == \"${STRING:$i:1}\" ]]; then\n        (( i -= 1 ))\n        break\n\
    \      fi\n      (( i -= 1 ))\n    done\n\n    res=\"${con}\"\n    if [ \"$min_len\"\
    \ -lt \"$len\" ]; then\n      (( min_len = len ))\n      (( min_i = i ))\n   \
    \   (( min_j = j ))\n    fi\n    (( j -= 1 ))\n  done\n  if [ \"$min_i\" -eq \"\
    $j\" ]; then\n    res=\"${STRING:$min_i}:${vowel}\"\n  else\n    res=\"\"\n  fi\n\
    \  echo \"$res\"", "    local WORD=\"${1}\"\n    local VOWEL=()\n    local CONSONANT=()\n\
    \n    # Convert to lower case and split to array\n    WORD=$(echo \"$WORD\" |\
    \ tr '[:upper:]' '[:lower:]' | tr '[:alpha:]' '[:punct:]' | grep -Po '(?<=[[:upper:]])[[:alpha:]][[:lower:]](?=[[:upper:]])')\n\
    \    CONSONANT=(\"${WORD}\" | grep -Po '(?<=[[:upper:]])[[:alpha:]][[:lower:]](?=[[:upper:]])'\
    \ | grep -Po '(?<=[[:upper:]])[[:alpha:]][[:lower:]](?=[[:upper:]])' | grep -Po\
    \ '(?<=[[:upper:]])[[:alpha:]][[:lower:]](?=[[:upper:]])')\n    VOWEL=(\"${WORD}\"\
    \ | grep -Po '(?<=[[:upper:]])[[:alpha:]](?=[[:upper:]])')\n\n    # Check if the\
    \ array contains vowels\n    if [ ${#VOWEL[@]} -eq 0 ] ; then\n        # No vowels\
    \ found\n        echo \"\"\n        return\n    fi\n\n    # Calculate the current\
    \ maximum distance of the vowels\n    local MAX=0\n    for (( i=0; i<${#VOWEL[@]};\
    \ i++ )); do\n        local V=${VOWEL[i]}\n        local C=${CONSONANT[i]}\n \
    \       local MAX=$(( $MAX < $(expr length \"${VOWEL[i]}\") - $(expr length \"\
    ${CONSONANT[i]}\") + $(expr length \"${V}\") - $(expr length \"${C}\") )) || MAX=$((\
    \ $MAX + $(expr length \"${VOWEL[i]}\") - $(expr length \"${CONSONANT[i]}\") +\
    \ $(expr length \"${V}\") - $(expr length \"${C}\") ))\n    done\n\n    # Check\
    \ if current maximum distance is less than or equal to 0 and return empty string\
    \ if not\n    if [[ $MAX -le 0 ]] ; then\n        echo \"\"\n        return\n\
    \    fi\n\n    # Return closest vowel\n    local V\n    for (( i=0; i<${#VOWEL[@]};\
    \ i++ )); do\n        V=${VOWEL[i]}\n        C=${CONSONANT[i]}\n        if [[\
    \ \"${MAX}\" -le $(expr length \"${V}\") - $(expr length \"${C}\")  ]] ; then\n\
    \            echo ${V}", "    [ \"$#\" -eq 1 ] || return 1\n    local input_str=\"\
    $1\"\n    local vowels=\"aeiouAEIOU\"\n    local vowel_count=0 vowel\n    local\
    \ vowel_found_flag=false vowel_found_flag\n    local vowel_count_from_right_side=0\
    \ vowel_count_from_right_side\n    local input_str_len=$(expr length \"$input_str\"\
    )\n    # Count number of vowel from the right side\n    while [ $input_str_len\
    \ > 0 ]; do\n        vowel=$(echo \"$input_str\" | sed \"s/$input_str//g\")\n\
    \        if [[ \"$vowel\" =~ \"$vowels\" ]]; then\n            vowel_count_from_right_side=$((\
    \ $vowel_count_from_right_side + 1 ))\n        fi\n        input_str=$(echo \"\
    $input_str\" | sed \"s/$vowel//g\")\n        input_str_len=$(( $input_str_len\
    \ - 1 ))\n    done\n    # Find first vowel found from the right side\n    local\
    \ closest_vowel=\"\"\n    local closest_index=0\n    local closest_vowel_count=0\n\
    \    local closest_vowel_position=0\n    local input_str_len\n    while [ $vowel_found_flag\
    \ == false ]; do\n        (( closest_index +1 ))\n        (( closest_vowel_count\
    \ +1 ))\n        (( closest_vowel_position +1 ))\n        (( closest_index ))\n\
    \        (( closest_vowel_count ))\n        (( closest_vowel_position ))\n   \
    \     (( input_str_len ))\n        if [ $input_str_len -gt 0 ]; then\n       \
    \     local vowel_found_flag=$(echo \"$input_str\" | awk -F \"$vowels\" -v closest_index=\"\
    $closest_index\" -v closest_vowel_count=\"$closest_vowel_count\" -v closest_vowel_position=\"\
    $closest_vowel_position\" -v input_str_len=\"$input_str_len\" 'BEGIN{for(i=1;i<=input_str_len;i++){if($i==closest_vowel_count){closest_vowel=$i;break}}}'|grep\
    \ \"^$closest_vowel\")\n        fi\n    done\n    if [ \"$closest_vowel\" != \"\
    \" ]; then\n        echo \"$closest_vowel\"\n    else\n        echo \"$0\"\n \
    \   fi", "    local str=\"$1\"\n    local vowels=\"a e i o u\"\n    local output=\"\
    \"\n    if [[ $str =~ ^[a-zA-Z]+$ ]]; then\n        if [[ \"$str\" =~ ^[A-Z]+$\
    \ ]]; then\n            str=\"${str^^}\"\n        fi\n        local wordlen=\"\
    ${#str}\"\n        local i=0\n        local j=0\n        local flag=false\n  \
    \      while [ $i -lt $wordlen ]; do\n            for j in $(seq 0 $((wordlen-i)));\
    \ do\n                if [[ ${str:i:i+1} = ${vowels} ]]; then\n              \
    \      output=\"$output${str:i+1:j}\"\n                    flag=true\n       \
    \             break\n                fi\n            done\n            if $flag;\
    \ then\n                break\n            fi\n            i=$((i+1))\n      \
    \  done\n        echo $output\n    else\n        echo \"Invalid input\"\n    fi",
  "  local string=\"${1}\"\n  # let \"i\" is index of first consonant (from right)\n\
    \  local i=\"${string#*[^A-Za-z]}\"\n  # let \"i\" is index of last consonant\
    \ (from left)\n  local j=\"${string%[^A-Za-z]}\"\n  # if \"i\" is greater than\
    \ \"j\" no vowel met the condition\n  if (( ${i} > ${j} )) ; then\n    return\
    \ \"\"\n  fi\n  \n  local vowels='a e i o u'\n  # loop through vowels\n  for v\
    \ in $vowels ; do\n    # if \"j\" value is equal to or smaller than \"i\" value,\
    \ \n    # consonant is at between \"i\" and \"j\", we return vowel \n    if [[\
    \ ${j} -le ${i} ]] && (( ${j} <= ${#string} )) ; then\n      # \"i\" is a vowel,\
    \ so we return it\n      if [[ ${string:i} == $v ]] && (( ${j} <= ${#string} ))\
    \ ; then\n        echo \"$v\"\n      fi\n    fi\n  done", "\tlocal w=${1:-};\n\
    \tlocal vowels=('a' 'e' 'i' 'o' 'u' 'A' 'E' 'I' 'O' 'U');\n\tfor (( i=${#w}-1;\
    \ i>=0; i-- )); do\n\t\tlocal vowel=${vowels[$i]};\n\t\tlocal j=${i};\n\t\twhile\
    \ (( $j>0 )); do\n\t\t\tif [[ $w == *[[:upper:]]$vowel ]]; then \n\t\t\t\tlocal\
    \ j=$((j-1));\n\t\t\t\treturn $vowel;\n\t\t\tfi;\n\t\t\tlocal j=$((j-1));\n\t\t\
    done\n\tdone\n\treturn \"\";", "  local -i count=0 result=$1\n  local -i pos=${#result}\n\
    \  local -i i\n\n  while [[ ${#result} -gt 0 ]] || [[ ${#result} -lt 2 ]]; do\n\
    \    if [[ \"${result}\" == \"$1\" ]]; then\n      count=$(( ${#result} - 1))\n\
    \      break\n    elif [[ \"${result}\" == *[Uu]* ]]; then\n      count=$(( ${#result}\
    \ - 2 ))\n      break\n    elif [[ \"${result}\" == *[aeiouAEIOU]* ]]; then\n\
    \      count=$(( ${#result} - 2 ))\n      break\n    elif [[ \"${result}\" ==\
    \ *[eaouAEIOU]* ]]; then\n      count=$(( ${#result} - 2 ))\n      break\n   \
    \ elif [[ \"${result}\" == *[eaou]* ]]; then\n      count=$(( ${#result} - 1 ))\n\
    \      break\n    else\n      if [[ \"${result}\" = *[aeiouAEIOU]* ]]; then\n\
    \        (( count-- ))\n      else\n        (( count++ ))\n      fi\n    fi\n\
    \    result=\"${1:${pos}:${count}}\"\n  done\n  echo \"${result:1:${count}}\"",
  "    local vowels=\"a e i o u AE IE OE UE\"\n    local word=$1\n\n    local vowel_found=$(echo\
    \ \"${word}\" | grep -o \"${vowels}\")\n    local vowel_length=$(echo \"${vowel_found}\"\
    \ | wc -w)\n\n    # Find left consonant index\n    local left_consonant_index=${word:0:1}\n\
    \    while [[ \"$left_consonant_index\" != [a-z] ]] || [[ \"$left_consonant_index\"\
    \ == [a-z] ]] ; do\n        left_consonant_index=${word:0:1}\n    done\n\n   \
    \ # Find right consonant index\n    local right_consonant_index=${word:(-1)}\n\
    \    while [[ \"$right_consonant_index\" != [a-z] ]] || [[ \"$right_consonant_index\"\
    \ == [a-z] ]] ; do\n        right_consonant_index=${word:(-1)}\n    done\n\n \
    \   local vowel_found=$(echo \"${word}\" | grep -o \"${vowels}\")\n    local vowel_length=$(echo\
    \ \"${vowel_found}\" | wc -w)\n\n    local consonant_found=$(echo \"${word}\"\
    \ | grep -o \"[b-zA-HJ-NP-TV-Z0-9]\")\n    local consonant_length=$(echo \"${consonant_found}\"\
    \ | wc -w)\n\n    # Find closest vowel\n    local closest_vowel=\"${vowel_found}\"\
    \n\n    if [[ \"$vowel_length\" -gt 0 ]] && [[ \"$vowel_length\" -lt \"$consonant_length\"\
    \ ]];\n    then\n        local vowel_start_index=$(echo \"${word}\" | sed -n \"\
    ${left_consonant_index}p\")\n        local vowel_end_index=$(echo \"${word}\"\
    \ | sed -n \"${right_consonant_index}p\")\n        local start_index=$(( ${vowel_start_index}\
    \ + ${vowel_length} ))\n        local end_index=$(( ${vowel_end_index} + ${vowel_length}\
    \ ))\n\n        local next_vowel_start_index=$(echo \"${word}\" | sed -n \"${start_index}p\"\
    )\n        local next_vowel_end_index=$(echo \"${word}\" | sed -n \"${end_index}p\"\
    )\n\n        if [[ \"$vowel_length\" -gt \"$consonant_length\" ]];\n        then\n\
    \            closest_vowel=$(echo \"${word}\" | sed -n \"${next_vowel_start_index}p\"\
    )\n        else\n            closest_vowel=$(echo \"${word}\" | sed -n ", "  \
    \  local STR=$1\n    local VOWELS=\"aeiouAEIOU\"\n    local LEN=${#STR}\n    local\
    \ COUNT=1\n    local VOWEL_END\n    local VOWEL_START\n    local V\n    \n   \
    \ # find first vowel\n    while [ \"$COUNT\" -lt \"$LEN\" ];\n    do\n       \
    \ V=${STR:$COUNT:1}\n        if [ \"$V\" == \"a\" ]; then\n            VOWEL_START=1\n\
    \        elif [ \"$V\" == \"e\" ]; then\n            VOWEL_START=2\n        elif\
    \ [ \"$V\" == \"i\" ]; then\n            VOWEL_START=3\n        elif [ \"$V\"\
    \ == \"o\" ]; then\n            VOWEL_START=4\n        elif [ \"$V\" == \"u\"\
    \ ]; then\n            VOWEL_START=5\n        fi\n        \n        ((VOWEL_END=VOWEL_START+1))\n\
    \        ((COUNT+=VOWEL_END))\n    done\n\n    local CLOSEST\n    \n    # find\
    \ the closest vowel\n    if [ \"$VOWEL_END\" -ge \"$LEN\" ]; then\n        CLOSEST=$STR\n\
    \    else\n        CLOSEST=\"\"\n    fi\n    \n    # find the closest vowel end\n\
    \    for (( i=\"$LEN\"; i>=\"$VOWEL_START\"; i-- )); do\n        if [[ \"$STR\"\
    \ == *${VOWELS:$VOWEL_START:1}* ]]; then\n            CLOSEST=$STR\n         \
    \   break\n        fi\n    done\n    \n    # return the closest vowel result\n\
    \    return $CLOSEST", "  # Your code goes here\n  local vowels=\"a e i o u\"\n\
    \  local word=$1\n  local vowel\n  local vowel_index=1\n  for vowel in $vowels;\
    \ do\n    vowel_index=$((vowel_index+1))\n    vowel=${word:$vowel_index-1:1}\n\
    \    if [[ \"$word\" == *$vowel ]]; then\n      echo \"$vowel\"\n      break\n\
    \    fi\n  done", "   local word=$1\n   local vowels=\"AEIOUaeiou\"\n   local\
    \ vowels_array=( $(echo \"${vowels}\"|sed 's/ /\\n/g') )\n   local vowels_count=${#vowels_array[@]}\n\
    \   local current_vowel_index=${#vowels_array[@]}\n   local vowel_found=0\n  \
    \ local vowel_right\n   local vowel_left\n   while [ $current_vowel_index -ge\
    \ 1 ]; do\n      local current_vowel=${vowels_array[$current_vowel_index]}\n \
    \     vowel_left=${current_vowel:0:1}\n      vowel_right=${current_vowel:1}\n\
    \      \n      if [[ $current_vowel == $vowel ]]; then\n         local vowel_start_index=$(expr\
    \ ${current_vowel_index} + $vowel_count)\n         local vowel_end_index=$(expr\
    \ ${current_vowel_index} + $vowel_count)\n         \n         if [[ $current_vowel_index\
    \ -gt $vowels_count ]]; then\n            local vowel_start_index=$(expr ${current_vowel_index}\
    \ + $vowels_count)\n            local vowel_end_index=$(expr ${current_vowel_index}\
    \ + $vowels_count)\n         fi\n         \n         if [[ $vowel_start_index\
    \ -lt $vowels_count ]]; then\n            local vowel_end_index=$(expr ${current_vowel_index}\
    \ - $vowels_count)\n         fi\n         \n         if [[ $vowel_end_index -lt\
    \ $vowels_count ]]; then\n            local vowel_start_index=$(expr ${current_vowel_index}\
    \ - $vowels_count)\n         fi\n         \n         if [[ $vowel_start_index\
    \ -gt $vowel_end_index ]]; then\n            local vowel_end_index=$(expr ${current_vowel_index}\
    \ + $vowel_count)\n         fi\n         \n         if [[ $vowel_end_index -gt\
    \ $vowel_start_index ]]; then\n            local vowel_start_index=$(expr ${current_vowel_index}\
    \ - $vowel_count)\n         fi\n         \n         if [[ -z $vowel_found ]];\
    \ then\n            if [[ -z ${vowels_array[$vowel_start_index]} ]]; then\n  \
    \             return $vowel\n            fi\n            local vowel_found=1\n\
    \         fi\n         \n         if [[ -z ${vowels_array[$vowel_end_index]} ]];\
    \ then\n            return $vowel\n         fi\n      fi\n      \n      current_vowel_index=$((\
    \ $current_vowel_index - 1 ))\n   done", "  local vowels=\"A E I O U AE OE UE\
    \ AA\" # All vowels\n  local vowel_count=0\n  local index=$((${#1} + 1))\n  while\
    \ [[ ${index} -gt 0 ]]; do\n    vowel_count=${#1} # count the vowels in string\
    \ $1 \n    local vowel=${1:0:$((index-1))}\n    # vowel_count -= 1 because we\
    \ count the end position\n    (( vowel_count -= 1 ))\n    # vowel_count %= 4 because\
    \ we count the end position\n    (( vowel_count %= 4 ))\n    if [[ \"${vowels:0:$vowel_count}\"\
    \ == \"$vowel\" ]]; then\n      return $vowel\n    fi\n    ((index -= 1))\n  done\n\
    \  return \"\"", "   local vowels=\"aeiouAEIOU\"\n   local input=\"$1\"\n   local\
    \ output=\"\"\n\n   local left=\"[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]\"\
    \n   local right=\"[AEIOU]\"\n   local idx=-1\n   for (( i=0; i<${#input}; i++\
    \ )); do\n      idx=$((${#left}-1))\n      for (( j=0; j<${#vowels}; j++ )); do\n\
    \         [[ \"${input[$((${idx}+1))]}\" == \"$j\" ]] && { idx=$((${idx}-1)) }\n\
    \      done\n      if [[ \"${input[$((${idx}+1))]}\" == \"$idx\" ]]; then\n  \
    \       output=\"${vowels:$idx}\"\n         break\n      fi\n   done\n\n   return\
    \ \"${output}\"", "    local word vowel vowel_pos consonant_pos vowels consonants\
    \ consonant_count consonant_vowel_count\n    vowels=\"aeiouyAEIOUY\"\n    consonants=\"\
    bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    word=${1:-}\n    vowel=${word:$((${#word}\
    \ - 1))}\n    vowel_pos=${#word}\n    consonant_pos=${#vowel}\n    consonant_count=${#consonants}\n\
    \    consonant_vowel_count=${#vowels}\n    \n    if [[ ${word:0:1} = \"a\" ]];\
    \ then\n        word=${word:1}\n        vowel=${word:$((${#word} - 1))}\n    \
    \    vowel_pos=${#word}\n    fi\n    if [[ ${word:0:1} = \"e\" ]]; then\n    \
    \    word=${word:1}\n        vowel=${word:$((${#word} - 1))}\n        vowel_pos=${#word}\n\
    \    fi\n    if [[ ${word:0:1} = \"i\" ]]; then\n        word=${word:1}\n    \
    \    vowel=${word:$((${#word} - 1))}\n        vowel_pos=${#word}\n    fi\n   \
    \ if [[ ${word:0:1} = \"o\" ]]; then\n        word=${word:1}\n        vowel=${word:$((${#word}\
    \ - 1))}\n        vowel_pos=${#word}\n    fi\n    if [[ ${word:0:1} = \"u\" ]];\
    \ then\n        word=${word:1}\n        vowel=${word:$((${#word} - 1))}\n    \
    \    vowel_pos=${#word}\n    fi\n    \n    \n    for (( i=1 ; i<${#word} ; i++\
    \ )); do\n        if [[ ${word:$i:1} =~ $vowel ]]; then\n            consonant_pos=$i\n\
    \            break\n        fi\n    done\n    \n    for (( i=1 ; i<${#word} ;\
    \ i++ )); do\n        if [[ ${word:$i:1} =~ $consonants ]]; then\n           \
    \ consonant_count=$((${consonant_count} + 1))\n        fi\n    done\n    \n  \
    \  for (( i=1 ; i<${#word} ; i++ )); do\n        if [[ ${word:$i:1} =~ $vowels\
    \ ]]; then\n            consonant_vowel_count=$((${consonant_", "    # Write your\
    \ code here\n    # $1 is your given word\n    # $2 is your given starting point\n\
    \    # $3 is your given end point\n", "        local vowels=\"aAiIoOuU\"\n   \
    \     local input=\"$1\"\n        local last=\"\"\n        local vowelcount=0\n\
    \        local vowel=\"z\"\n        local consonant=\"b\"\n        local counter=1\n\
    \        while [[ \"${input}\" =~ [[:blank:]]${consonant}${vowel}[[:blank:]]${consonant}${vowel}$\
    \ ]]; do\n                consonant=\"b\"\n                if [[ ${counter} -gt\
    \ ${#vowels} ]]; then\n                        consonant=\"z\"\n             \
    \   fi\n                vowelcount=$((${vowelcount}+1))\n                vowel=\"\
    ${vowels[$((${vowelcount}-1))]}\"\n                counter=$((${counter}+1))\n\
    \        done\n        echo \"${vowel}\"", "    local vowels=\"aeiouAEIOU\"\n\
    \    local s=$1\n    local e=${#s}\n    local x=${#vowels}\n    for ((i=$((e-1));\
    \ i>=0; i--)); do\n        local j=${#${s:$i:1}}\n        if [ \"$j\" -gt \"1\"\
    \ ]; then\n            local b=${s:$i-1:1}\n            local a=${s:$i:1}\n  \
    \          local i=$((i+1))\n            if [[ $b == $vowels ]]; then\n      \
    \          if [[ $a == $vowels ]]; then\n                    if [[ $i == 1 ]];\
    \ then\n                        echo \"$vowels\"\n                        return\n\
    \                    else\n                        echo \"\"\n               \
    \         return\n                    fi\n                else\n             \
    \       echo \"\"\n                    return\n                fi\n          \
    \  fi\n        fi\n    done", "    local vowel_check\n    for (( i = 1; i < ${#1};\
    \ i++ )); do\n        vowel_check=\"${1:i:1}\"\n        if [[ $vowel_check ==\
    \ [aeiouAEIOU] ]]; then\n            break\n        fi\n    done\n    if [[ $i\
    \ -gt ${#1} ]]; then\n        echo \"$vowel_check\"\n    else\n        echo \"\
    \"\n    fi", "\t[[ $1 != \"\" ]] && \n\t[[ $1 =~ \\W* ]] && \n\t[[ $1 =~ ([bcdfghjklmnpqrstvwxyz])(.*)(\\\
    1)(b|c|d|f|h|j|k|l|m|n|p|q|r|t|v|w|x|y|z) ]] &&\n\techo ${BASH_REMATCH[3]};",
  "    local vowels=\"aAiIoOuU\"\n    local input=\"$1\"\n\n    # remove leading vowels\n\
    \    input=${input:0:1}\n    input=${input:0:1}\n    input=${input:0:1}\n\n  \
    \  # remove trailing vowels\n    input=${input:0:1}\n    input=${input:0:1}\n\n\
    \    local chars\n    local start\n    local end\n    local distance\n    local\
    \ output\n\n    # set chars to all vowels except those in the middle\n    chars=${input:0:2}\n\
    \n    # set start to length of input minus length of chars minus 1\n    # example:\
    \ input =\"yogurt\", chars=\"i\", start = \"5\", end = \"8\"\n    # then start\
    \ = 5 - 8 = 2\n    start=${#input:-$((${#input}-${#chars}-1))}\n\n    # set end\
    \ to length of input minus length of chars minus 1\n    # example: input =\"yogurt\"\
    , chars=\"i\", start = \"5\", end = \"8\"\n    # then end = 8 - 5 = 4\n    end=$((${#input}-${#chars}))\n\
    \n    # set distance to 0 at the beginning of input\n    distance=0\n\n    # loop\
    \ through all vowels\n    for vowel in ${vowels}; do\n\n        # loop through\
    \ all possible consonants in the input word\n        for char in ${chars}; do\n\
    \n            # if the current char index is between the start and end\n     \
    \       if [[ ${#input} == $((start+distance)) ]]; then\n                # if\
    \ the current vowel index is between the current char and next char\n        \
    \        if [[ ${#input} -eq $((end-start)) ]]; then\n                    # check\
    \ if the distance between current char and next char is smaller than distance\
    \ \n                    # between current char and previous char\n           \
    \         if [[ \"${#input}\" -eq $((distance+1)) ]]; then\n                 \
    \       # if the current char and the next char are in the same vowel\n      \
    \                  if [[ ${input:$((distance))} == ${vowel} ]]; then\n       \
    \                     # if the next char index is greater than the previous char\
    \ index\n                            if [[ ${input:$((distance-1))} > ${vowel}\
    \ ]]; then\n                                # if the vowel is at the end of the\
    \ input\n                                if [[ \"${#input}\" -eq \"$((end+1))\
    \ ]]; then\n                                    # return the vowel\n         \
    \                           output=\"${vowel}\"\n                            \
    \    # if the vowel is in the middle of the input\n                          \
    \      elif [[ \"${#input}\" -eq \"$((end+2)) ]]; then\n                     \
    \               # return the vowel\n                                    output=\"\
    ${vowel}\"\n                                # if the vowel is at the beginning\
    \ of the input\n                                elif [[ \"${#input}\" -eq \"$((start",
  "    local str=$1\n    # get the vowel count\n    local vc_count=0\n    local vc_count_prev=0\n\
    \    local vowels=()\n    local vowel_count=()\n    local consonants=()\n    local\
    \ consonant_count=()\n    local consonant_index=()\n    local consonant_index=()\n\
    \    local consonant_index=()\n    local consonant_index=()\n    local consonant_index=()\n\
    \    local consonant_index=()\n    local consonant_index=()\n    local consonant_index=()\n\
    \    local vowel_match=()\n    local vowel_match_prev=()\n    local consonant_match=()\n\
    \    local consonant_match_prev=()\n    local vowel_match_prev=()\n    local consonant_match_prev=()\n\
    \    # vowels array\n    local vowel_match\n\n    # vowel array\n    local consonant_match\n\
    \    local vowel\n    local vowel_found\n    local consonant_found\n    local\
    \ vowel_index\n    local consonant_index\n    local vowel_prev_index\n    local\
    \ consonant_prev_index\n    local vowel_prev_index\n\n    local vowel_found\n\
    \    local consonant_found\n    local consonant_index\n    local vowel_index\n\
    \    local vowel_prev_index\n    local consonant_prev_index\n\n    local vowel_found\n\
    \    local consonant_found\n    local consonant_index\n    local vowel_index\n\
    \    local vowel_prev_index\n    local consonant_prev_index\n\n    # vowels array\n\
    \    local vowel_match\n    local vowel\n    local vowel_found\n    local consonant_found\n\
    \    local vowel_index\n    local consonant_index\n    local vowel_prev_index\n\
    \    local consonant_prev_index\n\n    # vowel array\n    local vowel_match\n\
    \    local vowel\n    local vowel_found\n    local consonant_found\n    local\
    \ vowel_index\n    local consonant_index\n    local vowel_prev_index\n    local\
    \ consonant_prev_index\n\n    local vowel_found\n    local consonant_found\n \
    \   local consonant_index\n    local vowel_index\n    local vowel_prev_index\n\
    \    local consonant_prev_index\n\n    local vowel_found\n    local consonant_found\n\
    \    local consonant_index\n    local vowel_index\n    local vowel_prev_index\n\
    \    ", "  local letter=\"$1\"\n  local vowels=\"a ei o u \"\n  local output=\"\
    \"\n  local count=1\n  local l=${#letter}\n  if [ $l -lt 2 ]; then\n    echo \"\
    Illegal letter: $1\"\n    return 1\n  fi\n\n  for ((i=1; i<l; i++)); do\n    if\
    \ [[ $vowels == *\"$letter\"* ]]; then\n      output=\"$letter\"\n      break\n\
    \    elif [[ $vowels == *\"${letter:i:1}\"* ]]; then\n      output=\"$letter\"\
    \n      break\n    fi\n    ((count++))\n    if [[ $count -gt $((l - 1)) ]]; then\n\
    \      break\n    fi\n  done\n  echo \"$output\"", "    local vowels=$(echo \"\
    $1\" | sed -r 's/[^aeiouAEIOU].*//g' | sed -E 's/[^aeiouAEIOU]//g')\n    local\
    \ consonants=$(echo \"$1\" | sed -E 's/[a-z]/[[:lower:]]/g')\n    local vowel_distance=0\n\
    \    local consonant_distance=0\n    local vowel_consonant_distance=0\n    local\
    \ vowel_consonant_flag=0\n    local vowel_consonant_count=0\n    local vowel_consonant_found=0\n\
    \    local vowel_consonant_position=0\n    local vowel_consonant_start=0\n   \
    \ local consonant_start=0\n    local consonant_end=0\n    local consonant_count=0\n\
    \    local vowel_start=0\n    local vowel_end=0\n\n    vowel_end=0\n    vowel_consonant_end=0\n\
    \    consonant_end=0\n    consonant_start=0\n    consonant_count=0\n    vowel_start=0\n\
    \n    for consonant in $consonants; do\n        for vowel in $vowels; do\n   \
    \         vowel_consonant_count=$((vowel_consonant_count + 1))\n            if\
    \ [ \"$consonant\" == \"$vowel\" ]; then\n                if [ \"$vowel_consonant_count\"\
    \ -gt \"$vowel_consonant_found\" ]; then\n                    vowel_consonant_found=$((vowel_consonant_found+1))\n\
    \                    vowel_consonant_position=$((vowel_consonant_position+1))\n\
    \                fi\n            else\n                if [ \"$vowel_consonant_count\"\
    \ -gt \"$vowel_consonant_found\" ]; then\n                    vowel_consonant_found=$((vowel_consonant_found+1))\n\
    \                    vowel_consonant_start=$((vowel_consonant_start+1))\n    \
    \                vowel_consonant_distance=$((vowel_consonant_distance+1))\n  \
    \                  vowel_consonant_end=$((vowel_consonant_end+1))\n          \
    \      fi\n            fi\n        done\n    done\n    if [ \"$vowel_consonant_count\"\
    \ -gt \"$vowel_consonant_found\" ]; then\n        vowel_consonant_found=$((vowel_consonant_found+1))\n\
    \        vowel_consonant_start=$((vowel_consonant_start+1))\n    fi\n    if [\
    \ \"$consonant_count\" -gt \"$consonant_found\" ]; then\n        consonant_found=$",
  "    local vowels=\"aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ\"\n   \
    \ local input=\"${1}\"\n    local vowel=\"${vowels//${input:a:1}:}\"\n    if [[\
    \ ${input:0:1} =~ [${vowel}][${vowel}] ]] ; then\n        echo \"${vowel}\"\n\
    \        return\n    fi\n    for (( i=${#vowel} ; i>=0 ; i-- )) ; do\n       \
    \ local letter=\"${input:$i:1}\"\n        if [[ ${letter} == ${vowel} ]] ; then\n\
    \            echo \"${letter}\"\n            return\n        fi\n    done", " \
    \   local _vowels=\"a e i o u A E I O U\"\n    local str=$1\n    local vowel_index\n\
    \    local vowel_match\n    local vowel_match_pos\n    local vowel_count\n   \
    \ local vowel_pos\n    local vowel_match_str\n    local vowel_match_count\n  \
    \  local vowel_match_str_count\n    local vowel_match_count\n    local vowel_match_pos_count\n\
    \    local vowel_match_pos\n    local vowel_match_pos2\n    local vowel_match_pos3\n\
    \    local vowel_match_pos4\n    local vowel_match_pos5\n    local vowel_match_pos6\n\
    \    local vowel_match_pos7\n    local vowel_match_pos8\n    local vowel_match_str1\n\
    \    local vowel_match_str2\n    local vowel_match_str3\n    local vowel_match_str4\n\
    \    local vowel_match_str5\n    local vowel_match_str6\n    local vowel_match_str7\n\
    \    local vowel_match_str8\n    local vowel_match_str9\n    local vowel_match_str10\n\
    \    local vowel_match_str11\n    local vowel_match_str12\n    local vowel_match_str13\n\
    \    local vowel_match_str14\n    local vowel_match_str15\n    local vowel_match_str16\n\
    \    local vowel_match_str17\n    local vowel_match_str18\n    local vowel_match_str19\n\
    \    local vowel_match_str20\n    local vowel_match_str21\n    local vowel_match_str22\n\
    \    local vowel_match_str23\n    local vowel_match_str24\n    local vowel_match_str25\n\
    \    local vowel_match_str26\n    local vowel_match_str27\n    local vowel_match_str28\n\
    \    local vowel_match_str29\n    local vowel_match_str30\n    local vowel_match_str31\n\
    \    local vowel_match_str32\n    local vowel_match_str33\n    local vowel_match_str34\n\
    \    local vowel_match_str35\n    local vowel_match_str36\n    local vowel_match_str37\n\
    \    local vowel_match_str38\n    local vowel_match_str39\n    local vowel_match_str40\n\
    \    local vowel_match_str41\n    local vowel_match_str42\n    local vowel_match_str43\n\
    \    local vowel_match_str44\n    local vowel_match_str45\n    ", "    local string=\"\
    $1\"\n    local length=${#string}\n    for (( i=0; i < ${#string}; i++ )); do\n\
    \        local char=\"${string: -1: 1}\"\n        if [ $char =~ \"[aeiouAEIOU]\"\
    \ ]; then\n            local i=${#char}\n            local j=0\n            while\
    \ [ $j -le ${#char} -2 ]; do\n                local j=${#char} - ${#char} - ${j}\n\
    \                if [ $char == \"[aeiouAEIOU]\" -a $j -gt 0 ]; then\n        \
    \            local j=${#char} - ${#char} - ${j}\n                    break\n \
    \               fi\n            done\n            local j=${#char} - 2\n     \
    \       local vowel=${char:j:1}\n            if [[ \"$vowel\" == [aeiouAEIOU]\
    \ ]]; then\n                echo \"$vowel\"\n                return 0\n      \
    \      fi\n        fi\n    done\n    return 1", "    local word=$1\n    local\
    \ vowels=\"a e i o u\"\n    # convert word to lowercase and remove the space in\
    \ front of it\n    word=${word// /}\n    \n    local c=0\n    local a=0\n    local\
    \ b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n\
    \    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n \
    \   local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n  \
    \  local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n   \
    \ local w=0\n    local x=0\n    local y=0\n    local z=0\n    \n    while [ $c\
    \ -lt ${#word} ]; do\n        c=${word:c}\n        if [[ ${vowels} =~ $c ]]; then\n\
    \            a=1\n            break\n        fi\n        c=$((c + 1))\n    done\n\
    \    while [ $a -lt ${#word} ]; do\n        a=${word:a}\n        if [[ ${vowels}\
    \ =~ $a ]]; then\n            b=1\n            break\n        fi\n        a=$((a\
    \ + 1))\n    done\n    while [ $b -lt ${#word} ]; do\n        b=${word:b}\n  \
    \      if [[ ${vowels} =~ $b ]]; then\n            c=1\n            break\n  \
    \      fi\n        b=$((b + 1))\n    done\n    while [ $c -lt ${#word} ]; do\n\
    \        c=${word:c}\n        if [[ ${vowels} =~ $c ]]; then\n            d=1\n\
    \            break\n        fi\n        c=$((c + 1))\n    done\n    while [ $d\
    \ -lt ${#word} ]; do\n        d=${word:d}\n        if [[ ${vowels} =~ $d ]]; then\n\
    \            e=1\n            break\n        fi\n        d=$((d + 1))\n    done\n\
    \    while [ $e -lt ${#word} ]; do\n        e=${word:e}\n        if [[ ${vowels}\
    \ =~ $e ]]; then\n            f=1\n            break\n        fi\n        e=$((e\
    \ + 1))\n    done\n    while [ $f -lt ${#word} ]; do\n        f=${word:f}\n  \
    \      if [[ ${vowels} =~ $f ]]; then\n            g=1\n            break\n  \
    \      fi\n        f", "    local string=\"$1\"\n    local vowels='a e i o u'\n\
    \    local vowel_count=0\n    local vowel_index=0\n    local last_char_index=0\n\
    \n    while [[ \"$string\" =~ (\\([^a]\\)) && ! \"$string\" =~ ([^a]\\([^a]\\\
    )) ]]; do\n        local new_vowel_index=$((vowel_index + 1))\n        local new_vowel_count=$(echo\
    \ \"$string\" | wc -c)\n        local new_vowel=$((new_vowel_index + 1))\n   \
    \     local new_last_char_index=$((last_char_index + 1))\n\n        if ((new_last_char_index\
    \ == 1)); then\n            last_char_index=0\n        elif ((new_last_char_index\
    \ == 2)); then\n            last_char_index=1\n        fi\n\n        vowel_count=$((vowel_count\
    \ + new_vowel_count))\n        vowel_index=$((new_vowel_index))\n\n        local\
    \ new_string=\"$new_vowel\"\n        local new_string_index=$((new_vowel_index\
    \ + 1))\n\n        if ((new_string_index < new_vowel_count)); then\n         \
    \   new_string=\"$new_string $new_string_index\"\n        fi\n\n        ((last_char_index\
    \ == 1)) && break\n        ((last_char_index == 2)) && break\n\n        string=\"\
    $new_string\"\n    done\n\n    ((vowel_count == 1)) && return $vowels\n    ((vowel_count\
    \ == 2)) && return $vowels\n    ((vowel_count == 3)) && return $vowels\n\n   \
    \ return \"\"", "  local string=$1\n  local first_consonant=${string:0:1}\n  local\
    \ last_consonant=${string:0:1}\n\n  if [[ ${first_consonant} == \"a\" ]]; then\n\
    \    local vowel_consonant=\"U\"\n  else\n    local vowel_consonant=\"u\"\n  fi\n\
    \n  if [[ ${last_consonant} == \"a\" ]]; then\n    local vowel_consonant_2=\"\
    U\"\n  else\n    local vowel_consonant_2=\"u\"\n  fi\n\n  for ((i=1; i <= ${#string}-1;\
    \ i++)); do\n    if [[ ${string:$i} == $vowel_consonant ]]; then\n      local\
    \ vowel_consonant=${string:$i}\n      break\n    fi\n  done\n\n  for ((i=1; i\
    \ <= ${#string}-1; i++)); do\n    if [[ ${string:$i} == $vowel_consonant_2 ]];\
    \ then\n      local vowel_consonant_2=${string:$i}\n      break\n    fi\n  done\n\
    \n  if [[ ${#string} -eq 0 ]]; then\n    echo \"$vowel_consonant\"\n  fi\n\n \
    \ if [[ ${#string} -eq 1 ]]; then\n    echo \"$vowel_consonant_2\"\n  fi", " \
    \ local vowels=\"a e i o u y\"\n  local word=$1\n  local i=${#word}\n  local j=${#vowels}\n\
    \  local vowel\n  \n  local left_count=0\n  local right_count=0\n  \n  while ((\
    \ i < j )); do\n    vowel=${word:$i:1}\n    if [ \"$vowel\" == \"$vowels\" ];\
    \ then\n      left_count=$(( $i + 1 ))\n      break\n    fi\n    (( i++ ))\n \
    \ done\n  \n  while (( i < j )); do\n    vowel=${word:$j:1}\n    if [ \"$vowel\"\
    \ == \"$vowels\" ]; then\n      right_count=$(( $j + 1 ))\n      break\n    fi\n\
    \    (( j-- ))\n  done\n  \n  if [ \"$left_count\" -eq \"$right_count\" ]; then\n\
    \    vowel=${word:$left_count:1}\n  else\n    return \"\"\n  fi\n  \n  echo $vowel",
  "    local vowels=\"$1\" # vowel list \n\n    local curr_index=0 # current index\n\
    \    local max_index=${#vowels}-1 # max index\n    local consonants=$(tr '[:upper:]'\
    \ '[:lower:]' <<< ${vowels}) # consonant list \n    local vowel_found=false\n\
    \    \n    while [[ \"$curr_index\" -le \"$max_index\" ]]; do\n        local consonant=$(echo\
    \ $consonants | awk -v index=\"$curr_index\" '{ print substr($0, index, 1) }')\n\
    \        \n        local vowel=$(echo $vowels | awk -v consonant=\"$consonant\"\
    \ '{ print substr($0, consonant, 1) }')\n        \n        local vowel_count=$(echo\
    \ \"$vowels\" | awk -v vowel=\"$vowel\" '{ print index($0, vowel)+1 }')\n    \
    \    \n        if [[ ${vowel_count} == 2 ]]; then\n            vowel_found=true\n\
    \            break\n        fi\n        \n        ((curr_index++))\n    done\n\
    \    \n    if [[ \"$vowel_found\" == \"false\" ]]; then\n        echo \"\"\n \
    \   fi", '        local vowels="A A A A A A A A A A A A A A A A A A A A A A A
    A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A
    A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A
    A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A
    A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A
    A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A
    A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A
    A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A
    A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A
    A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A
    A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A
    A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A
    A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A
    A A A A A A A A A A A A A A A A A ', "  local string=$1\n  local vowels=\"aeiouAEIOU\"\
    \n  local vowel_count=0\n  local i=${#string}\n  local prev_char=$((${#string}\
    \ -1))\n  local found_vowels=\n  \n  while [ $i -gt 0 ]; do\n    local char=${string:$((i-1))}\n\
    \    local vowel=\"${vowels:$char:1}\"\n    \n    if [[ \"$vowel\" =~ ^$vowel$\
    \ ]]; then\n      ((vowel_count++))\n      if ((vowel_count == 2)); then\n   \
    \     found_vowels=\"$vowel\"\n        break\n      fi\n    fi\n    \n    ((i--))\n\
    \  done\n\n  if [ -z $found_vowels ]; then\n    return \"\"\n  else\n    return\
    \ \"$found_vowels\"\n  fi", "    local word=$1\n    local vowel=\"\"\n    local\
    \ i\n    local j\n    local count\n\n    for ((i = 0; i <= ${#word}; i++)); do\n\
    \        for ((j = (${#word}-1); j <= ${#word}; j++)); do\n            [[ \"${word:i:1}\"\
    \ = \"a\" ]] && break\n            [[ \"${word:j:1}\" = \"A\" ]] && break\n  \
    \          [[ \"${word:i:1}\" = \"e\" ]] && break\n            [[ \"${word:j:1}\"\
    \ = \"E\" ]] && break\n            [[ \"${word:i:1}\" = \"i\" ]] && break\n  \
    \          [[ \"${word:j:1}\" = \"I\" ]] && break\n            [[ \"${word:i:1}\"\
    \ = \"o\" ]] && break\n            [[ \"${word:j:1}\" = \"O\" ]] && break\n  \
    \          [[ \"${word:i:1}\" = \"u\" ]] && break\n            [[ \"${word:j:1}\"\
    \ = \"U\" ]] && break\n        done\n        if [[ \"${word:i:1}\" = \"a\" ]]\
    \ || [[ \"${word:i:1}\" = \"A\" ]]; then\n            count=$((${count} + 1))\n\
    \            word=${word:(i)}\n        elif [[ \"${word:j:1}\" = \"a\" ]] || [[\
    \ \"${word:j:1}\" = \"A\" ]]; then\n            count=$((${count} + 1))\n    \
    \        word=${word:(j)}\n        elif [[ \"${word:i:1}\" = \"e\" ]] || [[ \"\
    ${word:i:1}\" = \"E\" ]]; then\n            count=$((${count} + 1))\n        \
    \    word=${word:(i)}\n        elif [[ \"${word:j:1}\" = \"e\" ]] || [[ \"${word:j:1}\"\
    \ = \"E\" ]]; then\n            count=$((${count} + 1))\n            word=${word:(j)}\n\
    \        elif [[ \"${word:i:1}\" = \"i\" ]] || [[ \"${word:i:1}\" = \"I\" ]];\
    \ then\n            count=$((${count} + 1))\n            word=${word:(i)}\n  \
    \      elif [[ \"${word:j:1}\" = \"i\" ]] || [[ \"${word:j:1}\" = \"I\" ]]; then\n\
    \            count=$((${count} + 1))\n            word=${word:(j)}\n        elif\
    \ [[ \"${word:i:1}\" = \"o\" ]] || [[ \"${word:i:1}\" = \"O\" ]]; then\n     \
    \       count=$((${count} + 1))\n            word=${word:(i)}\n        elif [[\
    \ \"${word:j:1}\" = \"o\" ]] || [[ \"${word:j:1}", "    local word=$1\n    local\
    \ result=\"\"\n    local c=1\n    local vowels=\"a e i o u\"\n    local i=1\n\
    \    local j=1\n    local vowelCount=()\n    \n    vowelCount[0]=0\n    \n   \
    \ for ((i=0; i < ${#word}; i++)); do\n      local x=${word:i:1}\n      if [[ ${vowels[$j]}\
    \ =~ $x ]]; then\n        vowelCount[$j]+=1\n      fi\n      j=$((j+1))\n    done\n\
    \    \n    local vowelIndex=0\n    for ((i=0; i < ${#word}; i++)); do\n      local\
    \ x=${word:i:1}\n      if [[ ${vowels[$i]} =~ $x ]]; then\n        vowelIndex=$i\n\
    \        break\n      fi\n    done\n    \n    local j=1\n    while ((${vowelCount[$j]}<=2));\
    \ do\n      result=${word:$((vowelIndex+1):$((vowelIndex+2))}\n      if [[ ${vowels[$j]}\
    \ =~ $result ]]; then\n        vowelIndex=$j\n      else\n        j=$((j+1))\n\
    \      fi\n    done\n    \n    if [[ ${#result} -eq 0 ]]; then\n      result=\"\
    \"\n    fi\n    \n    printf \"%s\" \"$result\"", "  local vowels=\"a e i o u\
    \ AE II OO UU\"\n  local string=\"$1\"\n  local consonant=\"b c d f g h j k l\
    \ m n p q r s t v w x z 0 1 2 3 4 5 6 7 8 9\"\n  local i=0\n\n  while [[ $i -lt\
    \ ${#consonant} ]]; do\n    local string=\"${string#*$consonant[$i]}\"\n    i=$((i+1))\n\
    \  done\n  local string=\"${string#*$consonant[$i]}\"\n  i=$((i+1))\n  while [[\
    \ $i -lt ${#vowels} ]]; do\n    local string=\"${string#*$vowels[$i]}\"\n    i=$((i+1))\n\
    \  done\n  local string=\"${string#*$vowels[$i]}\"\n  i=$((i+1))\n  echo \"$string\"",
  "  # Write your code here\n  local s=$1\n  local a=\"aeiouAEIOU\"\n  local b=\"\
    aeiou\"\n  local c=`echo $s | tr '[:upper:]' '[:lower:]'`\n  local d=\"aeiouAEIOUbcdfghjklmnpqrstvwxyz\"\
    \n  local e=\"aeiou\"\n  local f=`echo $s | tr '[:upper:]' '[:lower:]'`\n  local\
    \ g=\"aeiouAEIOUbcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n  local h=\"aeiouAEIOU\"\
    \n  local j=\"aeiouAEIOUbcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n  local\
    \ i=\"aeiouAEIOU\"\n  local k=\"aeiouAEIOU\"\n  local l=\"aeiouAEIOU\"\n  local\
    \ m=\"aeiouAEIOU\"\n  local n=\"aeiouAEIOU\"\n  local o=\"aeiouAEIOU\"\n  local\
    \ p=\"aeiouAEIOU\"\n  local q=\"aeiouAEIOU\"\n  local r=\"aeiouAEIOU\"\n  local\
    \ s=\"aeiouAEIOU\"\n  local t=\"aeiouAEIOU\"\n  local u=\"aeiouAEIOU\"\n  local\
    \ v=\"aeiouAEIOU\"\n  local w=\"aeiouAEIOU\"\n  local x=\"aeiouAEIOU\"\n  local\
    \ y=\"aeiouAEIOU\"\n  local z=\"aeiouAEIOU\"\n  local A=\"aeiouAEIOU\"\n  local\
    \ B=\"aeiouAEIOU\"\n  local C=\"aeiouAEIOU\"\n  local D=\"aeiouAEIOU\"\n  local\
    \ E=\"aeiouAEIOU\"\n  local F=\"aeiouAEIOU\"\n  local G=\"aeiouAEIOU\"\n  local\
    \ H=\"aeiouAEIOU\"\n  local I=\"aeiouAEIOU\"\n  local J=\"aeiouAEIOU\"\n  local\
    \ K=\"aeiouAEIOU\"\n  local L=\"aeiouAEIOU\"\n  local M=\"aeiouAEIOU\"\n  local\
    \ N=\"aeiouAEIOU\"\n  local O=\"", "    local string=$1\n    local vowels=()\n\
    \    local vowel_index=0\n    local vowel_length=$((${#string} -1))\n    local\
    \ consonant_index=0\n    local consonant_length=$((${#string} -2))\n    while\
    \ ((consonant_index < consonant_length)) ; do\n        local consonant=${string:$consonant_index:1}\n\
    \        ((consonant_index += 1))\n        if [[ ${consonant} == [aeiou] ]]; then\n\
    \            ((vowel_index += 1))\n            if [[ ${string:$vowel_index:1}\
    \ != [aeiou] ]]; then\n                ((vowel_index -= 1))\n            fi\n\
    \            ((vowel_length -= 1))\n        fi\n    done\n    echo \"${vowels[@]:$((vowel_index\
    \ - 1))}\"", "    local a=$1\n    local b=$2\n    local c=${b}\n\n    local s=$#\n\
    \    local i=0\n    while [ $i -le $s ]; do\n        local c=${b}\n        local\
    \ a=${a}\n        if [ $i -ne 0 ]; then\n            local j=0\n            while\
    \ [ $j -le $i ]; do\n                local a=${a}\n                if [ \"$a\"\
    \ == \"$c\" ]; then\n                    local j=${i}\n                    break\n\
    \                fi\n                j=$((j+1))\n            done\n          \
    \  if [ $j -ne 0 ]; then\n                local j=0\n                while [ $j\
    \ -le $i ]; do\n                    local b=${b}\n                    if [ \"\
    $b\" == \"$c\" ]; then\n                        local j=${i}\n               \
    \         break\n                    fi\n                    j=$((j+1))\n    \
    \            done\n            fi\n        fi\n        i=$((i+1))\n    done\n\
    \    \n    if [ \"$i\" -gt $s ]; then \n        echo \"$i\"\n    else\n      \
    \  echo \"$a\"\n    fi", "    local vowels_one=\"aeiouy\"\n    local vowels_two=\"\
    aeiouy\"\n    local vowels_three=\"aeiouy\"\n    local vowels_four=\"aeiouy\"\n\
    \    local vowels_five=\"aeiouy\"\n    local vowels_six=\"aeiouy\"\n    local\
    \ vowels_seven=\"aeiouy\"\n    local vowels_eight=\"aeiouy\"\n    local vowels_nine=\"\
    aeiouy\"\n\n    local first_letter_of_input_word=\"$1\"\n\n    if [ \"${first_letter_of_input_word:\
    \ -1}\" == \"y\" ]; then\n        vowels_one=\"${vowels_one}y\"\n        vowels_two=\"\
    ${vowels_two}y\"\n        vowels_three=\"${vowels_three}y\"\n        vowels_four=\"\
    ${vowels_four}y\"\n        vowels_five=\"${vowels_five}y\"\n        vowels_six=\"\
    ${vowels_six}y\"\n        vowels_seven=\"${vowels_seven}y\"\n        vowels_eight=\"\
    ${vowels_eight}y\"\n        vowels_nine=\"${vowels_nine}y\"\n    fi\n\n    local\
    \ all_vowels=\"${vowels_one}${vowels_two}${vowels_three}${vowels_four}${vowels_five}${vowels_six}${vowels_seven}${vowels_eight}${vowels_nine}\"\
    \n\n    local found_vowel=\"$(grep -Eo \"${first_letter_of_input_word:0:1}[^y${vowels_one}${vowels_two}${vowels_three}${vowels_four}${vowels_five}${vowels_six}${vowels_seven}${vowels_eight}${vowels_nine}]+\"\
    \ <<< ${all_vowels})\" || return 1\n\n    if [[ -z \"${found_vowel}\" ]]; then\n\
    \        echo \"$1\"\n    else\n        echo \"${found_vowel:$(($found_vowel-1))}\"\
    \n    fi", "    local word=${1:-}\n    local vowel=\"AEIOUaeiou\"\n    local consonants=\"\
    bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    local vowel_count\n    local\
    \ current_vowel\n    local consonant_count\n    local current_consonant\n    local\
    \ vowel_count_in_word\n    local consonant_count_in_word\n    local max_vowel_distance\n\
    \    local max_consonant_distance\n    local max_vowel\n    local max_consonant\n\
    \    local vowel\n    local consonant\n    \n    vowel_count=$(echo \"$word\"\
    \ | sed -n 's/\\(.\\)\\(.*\\)/\\1/p' | wc -l)\n    consonant_count=$(echo \"$word\"\
    \ | sed -n 's/\\(.\\)\\(.*\\)/\\2/p' | wc -l)\n    \n    if [[ \"$word\" =~ ^.[AEIOUaeiou]$\
    \ ]]; then\n        echo \"$word\"\n    elif [[ \"$vowel_count\" -eq 1 ]]; then\n\
    \        current_vowel=$(echo \"$word\" | sed -n 's/^\\(.\\)\\(.*\\)/\\1/p')\n\
    \    elif [[ \"$consonant_count\" -eq 1 ]]; then\n        current_consonant=$(echo\
    \ \"$word\" | sed -n 's/^\\(.\\)\\(.*\\)/\\2/p')\n    elif [[ \"$vowel_count\"\
    \ -gt \"1\" ]] && [[ \"$consonant_count\" -gt \"1\" ]]; then\n        \n     \
    \   vowel_count_in_word=$(echo \"$word\" | sed -n 's/\\(.*\\)\\(.\\)\\(.*\\)/\\\
    1/p' | wc -l)\n        consonant_count_in_word=$(echo \"$word\" | sed -n 's/\\\
    (.*\\)\\(.\\)\\(.*\\)/\\2/p' | wc -l)\n        if [[ \"$vowel_count_in_word\"\
    \ -gt \"1\" ]] && [[ \"$consonant_count_in_word\" -gt \"1\" ]]; then\n       \
    \     \n            max_vowel_distance=$(echo \"$word\" | awk -F'[^aeiou]' '{print\
    \ $1-$2}')\n            max_consonant_distance=$(echo \"$word\" | awk -F'[^bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]'\
    \ '{print $1-$2}')\n            max_vowel=$(echo \"$word\" | awk -F'[^aeiou]'\
    \ '{", "    local word \n    word=\"${1}\"\n    # find consonant at right side\
    \ of the word\n    consonant=($word | tr [a-z] [A-Z])\n    # find vowel between\
    \ consonants\n    vowel=($word | tr [A-Z] [a-u]) \n    \n    # if no vowel found\
    \ return empty string\n    [ \"${#consonant[@]}\" -eq 0 ] || [ \"${#vowel[@]}\"\
    \ -eq 0 ] || return \"\" \n    \n    # find first vowel between consonants and\
    \ check if it exists \n    # in the right side of the word and if not return empty\
    \ string\n    [[ \"${consonant[*]}\" == *\"$vowel[0]\"* ]] || return \"\"\n  \
    \  \n    # find last vowel between consonants and check if it exists \n    # in\
    \ the right side of the word and if not return empty string\n    [[ \"${consonant[*]}\"\
    \ == *\"$vowel[${#vowel[@]}-1]\"* ]] || return \"\"\n    \n    # return found\
    \ vowel\n    echo \"${vowel[@]}\"", "    local string=\"$1\"\n    local vowels=\"\
    a e i o u\"\n    local consonants=$(echo \"$string\" | tr [:upper:] [:lower:])\n\
    \    for vowel in $vowels; do\n        local offset=0\n        for consonant in\
    \ $consonants; do\n            local offset=$((offset + 1))\n            local\
    \ char=${string:$offset:1}\n            if [ \"$char\" == \"$vowel\" ]; then\n\
    \                echo \"$vowel\"\n                break\n            fi\n    \
    \    done\n    done", "    local _str=$1\n    local _vowels='aeiouAEIOU'\n   \
    \ local _flag=0\n    local _v1=-1\n    local _v2=-1\n    local _v3=-1\n    local\
    \ _v4=-1\n    local _v5=-1\n    local _v6=-1\n    local _v7=-1\n    local _v8=-1\n\
    \    local _v9=-1\n    local _v10=-1\n    local _v11=-1\n    local _v12=-1\n \
    \   local _v13=-1\n    local _v14=-1\n    local _v15=-1\n    local _v16=-1\n \
    \   local _v17=-1\n    local _v18=-1\n    local _v19=-1\n    local _v20=-1\n \
    \   local _v21=-1\n    local _v22=-1\n    local _v23=-1\n    local _v24=-1\n \
    \   local _v25=-1\n    local _v26=-1\n    local _v27=-1\n    local _v28=-1\n \
    \   local _v29=-1\n    local _v30=-1\n    local _v31=-1\n    local _v32=-1\n \
    \   local _v33=-1\n    local _v34=-1\n    local _v35=-1\n    local _v36=-1\n \
    \   local _v37=-1\n    local _v38=-1\n    local _v39=-1\n    local _v40=-1\n \
    \   local _v41=-1\n    local _v42=-1\n    local _v43=-1\n    local _v44=-1\n \
    \   local _v45=-1\n    local _v46=-1\n    local _v47=-1\n    local _v48=-1\n \
    \   local _v49=-1\n    local _v50=-1\n    local _v51=-1\n    local _v52=-1\n \
    \   local _v53=-1\n    local _v54=-1\n    local _v55=-1\n    local _v56=-1\n \
    \   local _v57=-1\n    local _v58=-1\n    local _v59=-1\n    local _v60=-1\n \
    \   local _v61=-1\n    local _v62=-1\n    local _v63=-1\n    local _v64=-1\n \
    \   local _v65=-1\n    local _v66=-1\n    local _v67=-1\n    local _v68=-1\n \
    \   local _v69=-1\n    local _v70=-1", "    local vowels=\"a e i o u y\";\n  \
    \  local input_str=\"$1\";\n    local vowel_found=\"\";\n    local last_consonant_index=0\n\
    \n    echo $input_str | while read -r line; do\n        echo $line | while read\
    \ -r consonant; do\n            last_consonant_index=$(($last_consonant_index+1))\n\
    \        done\n        last_consonant_index=$((last_consonant_index-1))\n    \
    \    echo $last_consonant_index\n    done", "  local str=\"$1\"\n  local len=${#str}\n\
    \  local index=0\n  local i\n  local result\n\n  for i in $(seq ${len}); do\n\
    \    local c=$(expr $index++ % $((${#str}-1)))\n    if [[ $str[$i] == [aeiouAEIOU]\
    \ ]]; then\n      result=$(cycle $str[$index..$(($(($i+1))))])\n    fi\n  done\n\
    \  echo \"${result:-}\"", "  local vowels='a e i o u'\n  local word=$1\n  # first\
    \ consonant\n  local first=`echo $word | cut -d' ' -f1`\n  # last consonant\n\
    \  local last=`echo $word | cut -d' ' -f2`\n  # iterate through the vowels\n \
    \ for vowel in $vowels; do\n    # check if the vowel is between the last and first\
    \ consonants\n    if (( vowel >= $first && vowel <= $last )); then\n      echo\
    \ $vowel\n      return\n    fi\n  done\n  echo \"$vowels\"", "  local string=\"\
    $1\"\n  local vowel=\"[aeiouAEIOU]\"\n  local vowel_count=\"$(echo \"$string\"\
    \ | grep -o \"$vowel\" | wc -l)\"\n  local vowel_start=\"$(echo \"$string\" |\
    \ grep -o \"$vowel\" | sed -n \"$(( $(echo \"$string\" | grep -o \"$vowel\" |\
    \ grep -c \"$string\") -1 ))p\" | tail -1)\"\n  local vowel_end=\"$(echo \"$string\"\
    \ | grep -o \"$vowel\" | sed -n \"$(( $(echo \"$string\" | grep -o \"$vowel\"\
    \ | grep -c \"$string\") -1 ))p\" | head -1)\"\n\n  if [[ $(( $(echo \"$string\"\
    \ | grep -c \"$string\") -1 )) == 0 ]]; then\n    return 0\n  fi\n\n  local vowel_candidate=\"\
    \"\n  if [[ $(echo \"$string\" | grep -o \"$vowel_start$vowel\" | wc -l) -gt 0\
    \ ]]; then\n    local vowel_start_count=\"$(echo \"$string\" | grep -o \"$vowel_start$vowel\"\
    \ | sed -n \"$(( $(echo \"$string\" | grep -o \"$vowel\" | grep -c \"$string\"\
    ) -1 ))p\" | tail -1)\"\n    local vowel_start_index=\"$(echo \"$string\" | grep\
    \ -o \"$vowel_start$vowel\" | sed -n \"$(( $(echo \"$string\" | grep -o \"$vowel\"\
    \ | grep -c \"$string\") -1 ))p\" | head -n 1)\"\n    if [[ $(echo \"$string\"\
    \ | grep -o \"$vowel_end$vowel\" | wc -l) -gt 0 ]]; then\n      local vowel_end_count=\"\
    $(echo \"$string\" | grep -o \"$vowel_end$vowel\" | sed -n \"$(( $(echo \"$string\"\
    \ | grep -o \"$vowel\" | grep -c \"$string\") -1 ))p\" | tail -1)\"\n      local\
    \ vowel_end_index=\"$(echo \"$string\" | grep -o \"$vowel_end$vowel\" | sed -n\
    \ \"$(( $(echo \"$string\" | grep -o \"$vowel\" | grep -c \"$string\") -1 ))p\"\
    \ | head -n 1)\"\n      if [[ $(( $(echo \"$string\" | grep -c \"$string\") -1\
    \ )) == 0 ]]; then\n        return 0\n      fi\n\n      local vowel_candidate=\"\
    $(( $(echo \"$string\" | grep -o \"$vowel_start$vowel\" | wc -l) +1 ))\"\n   \
    \   local vowel_candidate_index=\"$(( $(echo \"$string\" | grep -o \"$vowel_start_index$vowel\"\
    \ | wc -l) +1 ))\"\n      if [", "  local str=$1\n  local i\n  local vowels=(\"\
    a\" \"e\" \"i\" \"o\" \"u\")\n  local found\n  local vowel_pos\n  \n  for ((i\
    \ = 3; $i -gt 0 ; i--)); do\n    found=0\n    for vowel_pos in ${vowels[@]}; do\n\
    \      if [[ $str == *\"\\$$i\"* ]]; then\n        found=1\n        break\n  \
    \    fi\n    done\n    if [[ \"$found\" -eq 1 ]]; then\n      echo \"\\$$i\"\n\
    \      return 0\n    fi\n  done", "  local STR=$1\n  local vowels='aAiIuUoO'\n\
    \  local vowel_count=0\n  local vowel_index=0\n  local vowel_left=\n  local vowel_right=\n\
    \  local vowel_found=\n\n  for (( i=$STR.length-1; i>=0; i-- )); do\n    local\
    \ c=${STR:$i:1}\n    vowel_found=\n    for (( i=0; i<${#vowels}; i++ )); do\n\
    \      if [[ \"$c\" == \"${vowels:$i:1}\" ]]; then\n        vowel_found=1\n  \
    \      vowel_left=$i\n        break\n      fi\n    done\n    if [ \"$vowel_found\"\
    \ == \"0\" ]; then\n      break\n    fi\n  done\n  for (( i=0; i<${#vowels}; i++\
    \ )); do\n    local c=${STR:$vowel_left:1}\n    vowel_found=\n    for (( j=0;\
    \ j<${#vowels}; j++ )); do\n      if [[ \"$c\" == \"${vowels:$j:1}\" ]]; then\n\
    \        vowel_found=1\n        vowel_right=$j\n        break\n      fi\n    done\n\
    \    if [ \"$vowel_found\" == \"0\" ]; then\n      break\n    fi\n  done\n  if\
    \ [ \"$vowel_found\" == \"1\" ]; then\n    vowel_count=$(echo \"$STR\" | wc -w)\n\
    \    local min_count=$((${#vowels}*2))\n    if [ \"$vowel_count\" -le \"$min_count\"\
    \ ]; then\n      local index=$(echo \"$STR\" | sort -u | wc -w)\n      echo $vowels[$((index-1))]\n\
    \    else\n      local index=$(echo \"$STR\" | sort -k 1 -n | head -n $min_count)\n\
    \      echo $vowels[$index]\n    fi\n  else\n    echo \"\"\n  fi", "    local\
    \ vowels=($(echo \"'aeiouAEIOU'\" | sed 's/'$1'//g'))\n    for consonants in $(echo\
    \ \"${#1}\" | awk '{print $1, $1}'); do\n        local vowel_left=`echo \"${vowels}\"\
    \ | awk -v v=\"${consonants}\" '{print index($1,v)}'`\n        if [ -z \"$vowel_left\"\
    \ ]; then\n            continue\n        fi\n        local vowel_right=`echo \"\
    ${vowels}\" | awk -v v=\"${consonants}\" '{print index($1,v,$2)}'`\n        if\
    \ [ -z \"$vowel_right\" ]; then\n            continue\n        fi\n        local\
    \ vowel_mid=`echo \"${vowels}\" | awk -v v=\"${consonants}\" '{print index($1,v,$2,$3)}'`\n\
    \        if [ -z \"$vowel_mid\" ]; then\n            continue\n        fi\n  \
    \      local closest_vowel=${vowels[$vowel_mid]}\n        echo \"$closest_vowel\"\
    \n        break\n    done", "  local vowels=\"a e i o u y\";\n  local i=0;\n \
    \ local vowel;\n  local consonants=${1:0:1}\n  local consonant;\n  local j=0;\n\
    \  local result=\"\";\n\n  for consonant in $consonants; do\n    for vowel in\
    \ $vowels; do\n      if [ $i = ${#1} ]; then break;\n      fi\n      if [ \"${1:$i:1}\"\
    \ == \"${vowel}\" ]; then\n        ((i++))\n        result=$vowel\n        break\n\
    \      fi\n    done;\n    ((j++))\n  done\n\n  echo \"$result\"", "    local vowels_str=\"\
    AEIOUaeiou\"\n    local vowels=$vowels_str\n    local consonants_str=\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    local consonants=$consonants_str\n    local last_consonant\n    local last_vowel\n\
    \    local len=${#1}\n    for (( i=0; i<$len; i++ )); do\n        last_consonant=${1:$i:1}\n\
    \        last_vowel=${1:$i:$((i+1))}\n        # consonants cannot be equal to\
    \ vowels \n        if [ \"$last_consonant\" == \"$last_vowel\" ] || [ \"$last_consonant\"\
    \ == \"$consonants\" ] || [ \"$last_vowel\" == \"$consonants\" ] || [ \"$last_consonant\"\
    \ == \"$vowels\" ] || [ \"$last_vowel\" == \"$vowels\" ]; then\n            #\
    \ check if last character is vowel or consonant \n            if [ \"$last_consonant\"\
    \ == \"$last_vowel\" ]; then\n                echo \"\"\n            else\n  \
    \              echo \"$last_vowel\"\n            fi\n            break\n     \
    \   fi\n    done", "  local i=1\n  local vowels=\"a e i o u\"\n  local str=\"\
    $1\"\n  local char=\"`head -\"$i\"` `tail -\"$((i+1))`\"\n  local letter=\"$(\
    \ echo \"$str\" | tr \"$vowels\" \" \" | tr \" \" \"$char\" )\"\n  echo $letter",
  "  vowels=\"aeiou\"\n  # get last letter from string\n  last_letter=$1\n  output=\"\
    \"\n  \n  for (( i=${#last_letter}-1 ; i>0 ; i-- )); do\n      \n      # if current\
    \ letter is a vowel\n      if [[ \"$vowels\" == *${last_letter}${vowels:i}* ]];\
    \ then\n        \n        # if two letters left of current letter is a vowel\n\
    \        if [[ ${1:i-1}${vowels:i}* == \"$last_letter${vowels:i}*\" ]]; then\n\
    \          output=${vowels:i}\n        fi\n      fi\n    \n    done\n  \n  return\
    \ $output", "    local var1=$1\n    local len=${#var1}\n    local count=0\n  \
    \  local prev=${var1:0:1}\n    local next=${var1:1:1}\n    local found=false\n\
    \    \n    while [[ ${count} -le ${len} ]] && [[ ${prev} == ${next} ]]; do\n \
    \       (( count+=1 ))\n        prev=${next}\n        next=${var1:(( count+1 ))}\n\
    \        if [[ ${prev} == a || ${prev} == e || ${prev} == i || ${prev} == o ||\
    \ ${prev} == u ]]; then\n            found=true\n            break\n        fi\n\
    \    done\n    \n    if [[ ${found} ]]; then\n        echo ${prev}\n    else\n\
    \        echo \"\"\n    fi", "    string=\"$1\"\n    letter=$(echo $string | sed\
    \ \"s/\\(.\\).*/\\1/\")\n    consonants=$(echo $string | sed \"s/\\(.\\)[^aeiou].*/\\\
    1/\")\n    while [[ $consonants ]];do\n        vowel=$(echo $consonants | sed\
    \ \"s/[^aeiou]\\(.*\\)/\\1/\")\n        if [[ \"$letter\" == \"$vowel\" ]]; then\n\
    \            letter=$(echo $letter | sed \"s/$vowel/../\")\n        else\n   \
    \         letter=$(echo $letter | sed \"s/$vowel/U/\")\n        fi\n        consonants=$(echo\
    \ $consonants | sed \"s/$vowel//\")\n    done\n    echo \"$letter\"", "  local\
    \ vowels=\"a e i o u\"\n  local str=\"$1\"\n  local len=${#str}\n  if [ $len -eq\
    \ 0 ]; then\n    return \"\"\n  fi\n  local vowel_count=0\n  local prev_c=\"${str##*a}\"\
    \n  local next_c=\"${str##*b}\"\n  if [ \"${prev_c}\" = \"${str}\" ]; then\n \
    \   return \"\"\n  fi\n  for v in $vowels; do\n    if [ $next_c = \"${v}\" ];\
    \ then\n      vowel_count=$((vowel_count+1))\n    fi\n  done\n  echo \"$vowel_count\"",
  "    local STR=$1\n    local CASE_INSENSITIVE=0\n    local VOWELS_IN_END=1\n   \
    \ local VOWELS_IN_START=1\n    local RESULT=\"\"\n    local FIRST_CHAR=\"${STR:0:1}\"\
    \n    local LAST_CHAR=\"${STR:${#STR}-1:1}\"\n    local CAST=$((${FIRST_CHAR}\
    \ > ${LAST_CHAR} ? ${FIRST_CHAR} : ${LAST_CHAR}))\n    local LETTERS=\"A E I O\
    \ U Y\"\n    local CASE_INSENSITIVE_LETTERS=\"a e i o u y\"\n    local VOWELS=\"\
    a e i o u y\"\n    for (( i=0; i < ${#LETTERS[*]}; i++ )); do\n        if [[ ${VOWELS_IN_START}\
    \ -gt ${i} ]]; then\n            break\n        fi\n    done\n    for (( i=0;\
    \ i < ${#LETTERS[*]}; i++ )); do\n        if [[ ${VOWELS_IN_END} -gt ${i} ]];\
    \ then\n            break\n        fi\n    done\n    if [[ \"${LETTERS[i]}\" ==\
    \ ${LAST_CHAR} ]]; then\n        VOWELS_IN_END=${#LETTERS[*]}\n    fi\n    if\
    \ [[ \"${LETTERS[i]}\" == ${FIRST_CHAR} ]]; then\n        VOWELS_IN_START=${#LETTERS[*]}\n\
    \    fi\n    for (( i=0; i < ${#LETTERS[*]}; i++ )); do\n        if [[ \"${LETTERS[i]}\"\
    \ == ${LAST_CHAR} ]]; then\n            if [[ ${CAST} > ${i} ]]; then\n      \
    \          RESULT=${LETTERS[i]}\n                break\n            fi\n     \
    \   fi\n    done\n    for (( i=0; i < ${#LETTERS[*]}; i++ )); do\n        if [[\
    \ \"${LETTERS[i]}\" == ${FIRST_CHAR} ]]; then\n            if [[ ${CAST} < ${i}\
    \ ]]; then\n                RESULT=${LETTERS[i]}\n                break\n    \
    \        fi\n        fi\n    done\n    if [[ ${CASE_INSENSITIVE} -eq 1 ]]; then\n\
    \        if [[ \"${CASE_INSENSITIVE_LETTERS[i]}\" == ${LAST_CHAR} ]]; then\n \
    \           VOWELS_IN_END=${#CASE_INSENSITIVE_LETTERS[*]}\n        fi\n      \
    \  if [[ \"${CASE_INSENSITIVE_LETTERS[i]}\" == ${FIRST_CHAR} ]]; then\n      \
    \      VOW", "    local str=\"$1\"\n    local vowels=\"a e i o u y\" \n    local\
    \ cons=\"b c d f g h j k l m n p q r s t v w x z\"\n\n    for con in $cons; do\n\
    \        if [[ \"$str\" == \"$con\" ]]; then\n            for vowel in $vowels;\
    \ do\n                if [[ \"$str\" == \"$vowel\" ]]; then\n                \
    \    echo $vowel\n                fi\n            done\n        fi\n    done",
  "    local string=$1\n    local count=0\n    local vowel=\"a\"\n    while [[ ${string:${#string}-1}\
    \ =~ ^${vowel}$ ]]; do\n        count=$((count+1))\n        (( count--))\n   \
    \     vowel=${string:$((${#string}-1))}\n    done\n    (( count-- ))\n    (( count++\
    \ ))\n    echo ${string:$((${#string}-1))}", "    local input=${1:?}\n    local\
    \ input=${input//[[:upper:]]/}\n    local input=${input//[[:lower:]]/}\n    local\
    \ vowel=\"a\"\n    local consonant=\"b\"\n    local consonant_count=1\n    local\
    \ vowel_count=1\n    local vowel_count2=0\n    local output=\"\"\n    for i in\
    \ $(seq ${#input}); do\n        local letter=${input[$i]}\n        if [[ ${letter}\
    \ == ${vowel} ]]; then\n            ((vowel_count++))\n        else\n        \
    \    if [[ ${letter} == ${consonant} ]]; then\n                ((consonant_count++))\n\
    \                if [[ ${consonant_count} > ${vowel_count} ]]; then\n        \
    \            output=${vowel}\n                    break\n                fi\n\
    \            else\n                if [[ ${consonant_count} > ${vowel_count2}\
    \ ]]; then\n                    output=${consonant}\n                    break\n\
    \                fi\n            fi\n        fi\n    done\n    echo $output",
  "    local word=$1\n    local vowels=\"aAiIuU\"\n    local vowel_count=0\n    local\
    \ vowel_index=0\n    local vowel_index2=0\n    local vowel_flag=0\n    local vowel_flag2=0\n\
    \    local vowel_index3=0\n    local vowel_index4=0\n    local vowel_index5=0\n\
    \    local vowel_index6=0\n    local vowel_index7=0\n    local vowel_index8=0\n\
    \    local vowel_index9=0\n    local vowel_index10=0\n    local vowel_index11=0\n\
    \    local vowel_index12=0\n    local vowel_index13=0\n    local vowel_index14=0\n\
    \    local vowel_index15=0\n    local vowel_index16=0\n    local vowel_index17=0\n\
    \    local vowel_index18=0\n    local vowel_index19=0\n    local vowel_index20=0\n\
    \    local vowel_index21=0\n    local vowel_index22=0\n    local vowel_index23=0\n\
    \    local vowel_index24=0\n    local vowel_index25=0\n    local vowel_index26=0\n\
    \    local vowel_index27=0\n    local vowel_index28=0\n    local vowel_index29=0\n\
    \    local vowel_index30=0\n    local vowel_index31=0\n    local vowel_index32=0\n\
    \    local vowel_index33=0\n    local vowel_index34=0\n    local vowel_index35=0\n\
    \    local vowel_index36=0\n    local vowel_index37=0\n    local vowel_index38=0\n\
    \    local vowel_index39=0\n    local vowel_index40=0\n    local vowel_index41=0\n\
    \    local vowel_index42=0\n    local vowel_index43=0\n    local vowel_index44=0\n\
    \    local vowel_index45=0\n    local vowel_index46=0\n    local vowel_index47=0\n\
    \    local vowel_index48=0\n    local vowel_index49=0\n    local vowel_index50=0\n\
    \    local vowel_index51=0\n    local vowel_index52=0\n    local vowel_index53=0\n\
    \    local vowel_index54=0\n    local vowel_index55=0\n    local vowel_index56=0\n\
    \    local vowel_index57=0\n    local vowel_index58=0\n    local vowel_index59=0\n\
    \    local vowel_index60=0\n    local vowel_index61=0\n    local vowel_index62=0\n\
    \    local vowel_index63=0\n    local vowel_index64=0\n    local vowel_index65=0\n\
    \    local vowel_index66=0\n    local vowel_index67=0\n    local vowel_index68",
  "  local vowels=\"aeiouy\"\n  local vowels_len=${#vowels[*]}\n  local word=$1\n\
    \  local vowel_found=\"\"\n  local vowel_last_position=${#word} #get word lenght\n\
    \  \n  if [[ -z $word ]]; then\n    echo \"You must pass a non-empty string to\
    \ $(basename $0).\"\n    exit 1\n  fi\n\n  if (( ${#word} < 2)); then\n    echo\
    \ \"You must pass a non-empty string to $(basename $0).\"\n    exit 1\n  fi\n\n\
    \  if (( ${#word} > $vowels_len )); then\n    echo \"Given string ($word) contains\
    \ more or less than vowels.\"\n    exit 1\n  fi\n\n  for (( i=1; i <= $vowels_len;\
    \ i++ )); do\n    local position=${#word}\n    (( position--)) #decrement for\
    \ previous position\n    \n    if (( ${#word} > $vowels_len )); then\n      ((\
    \ position--))\n      (( i-- ))\n      (( vowel_last_position-- ))\n    fi\n\n\
    \    if (( position > 0 )); then\n      if (( ${word:$position:1} = ${vowels[i-1]}\
    \ )); then\n        (( vowel_found=\"${vowels[i-1]}\" ))\n        break\n    \
    \  fi\n    fi\n  done\n\n  if [[ -z $vowel_found ]]; then\n    echo \"No vowel\
    \ found in the given string.\"\n  else\n    echo ${vowel_found}\n  fi", "    local\
    \ string prev v\n    string=$1\n    prev=\"\"\n    v=\"\"\n    for ((i=1; i<${#string};\
    \ i++) { \n        if [[ \"$string\" =~ ^[a-y] ]]; then\n            prev=$i\n\
    \            v=\"${string: -$i}\"\n        else\n            if [[ \"$prev\" -gt\
    \ 0 ]]; then\n                if [[ \"$string\" =~ ^[b-z] ]]; then\n         \
    \           v=\"${string: -$i}\"\n                else\n                    if\
    \ [[ \"$string\" =~ ^[c-h] ]]; then\n                        v=\"${string: -$i}\"\
    \n                    else\n                        if [[ \"$string\" =~ ^[i-j]\
    \ ]]; then\n                            v=\"${string: -$i}\"\n               \
    \         else\n                            if [[ \"$string\" =~ ^[k-l] ]]; then\n\
    \                                v=\"${string: -$i}\"\n                      \
    \      else\n                                if [[ \"$string\" =~ ^[m] ]]; then\n\
    \                                    v=\"${string: -$i}\"\n                  \
    \              else\n                                    if [[ \"$string\" =~\
    \ ^[n] ]]; then\n                                        v=\"${string: -$i}\"\n\
    \                                    else\n                                  \
    \      if [[ \"$string\" =~ ^[p] ]]; then\n                                  \
    \          v=\"${string: -$i}\"\n                                        else\n\
    \                                            echo \"$string\"\n              \
    \                          fi\n                                    fi\n      \
    \                          fi\n                            fi\n              \
    \          fi\n                    fi\n                fi\n            fi\n  \
    \      fi\n    })\n    echo \"$v\"", "  local vowels=\"A E I O U Y\"\n  local\
    \ input=$1\n  local vowel=\"${input:(-1)}\"\n  local output=\"${input:0:(-1)}\"\
    \n  local i=${#input}\n  local j=0\n  while [[ $j -le $i ]]; do\n    local j=$((j+1))\n\
    \    local char=\"${input:($j-1)}\"\n    local vowel=\"${char:(-1)}\"\n    if\
    \ [[ $vowel -eq $vowels ]]; then\n      break\n    fi\n  done\n  echo $output",
  "\tlocal vowels=\"a e i o u \"\n\tlocal input=\"${1//[^a-zA-Z]}\"\n\tlocal output=\"\
    ${input%%[^${vowels}]*}\"\n\techo \"${output//[${vowels}]}\"", "  local s=$1\n\
    \  local w=${#s}\n  local vowels=(a e i o u)\n  local i=${#vowels[@]}\n  local\
    \ result\n  local vowel\n  local count\n  \n  for (( i=0; i<${#vowels[@]}; i++\
    \ )); do\n    vowel=${vowels[i]}\n    count=${#w}\n    for (( j=0; j<count; j++\
    \ )); do\n      if [ \"${s:j:1}\" = \"${vowel}\" ]; then\n        count=${j}\n\
    \        vowel=${vowels[i]}\n      fi\n    done\n    if [ \"${count:1}\" = \"\
    ${w}\" ]; then\n      result=${vowel}\n      break\n    fi\n  done\n  \n  echo\
    \ \"$result\"", "\tlocal vowels=\"a e i o u aeiou aeiouy aaiou ab ba ba baa bb\
    \ bb bbb bc bd bd beb bec bec becb becc becc bi bi bi bie bi bih bi bi bih bo\
    \ bo bo boo boo bp bp bq bq bs bs bt bt bt bv bv bw bw bx bx bx bx bx cc cd ce\
    \ ce ce cee cee cf cf cf cf cg cg cg cg cg cg cg cj cj cj cj ck ck ck ck ck ck\
    \ ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck\
    \ ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck\
    \ ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck\
    \ ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck\
    \ ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck\
    \ ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck\
    \ ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck\
    \ ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck\
    \ ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck\
    \ ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck\
    \ ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck\
    \ ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck\
    \ ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck ck\
    \ ck ck ck ck ck ck ck ck ck ck ck ", "    local w=\"${1#?}\"\n    local vowels=\"\
    a e i o u\"\n    if [[ \"$w\" == \"\" ]]; then\n        return \"\"\n    fi\n\
    \    local c=0\n    local vowel\n    for vowel in $vowels; do\n        (( c++\
    \ ))\n        if [[ \"$w\" == *\"$vowel\"* ]]; then\n            if (( c <= 3\
    \ )); then\n                return $vowel\n            fi\n            break\n\
    \        fi\n    done\n    return \"\"", "  local vowels=\"a e i o u y\";\n  local\
    \ word=$1;\n  local result=${word:0:4}\n  local count=$((${#word}-1));\n  while\
    \ [ \"$count\" -gt 0 ]; do\n    local v=${vowels:$count:1}\n    if [ \"$v\" ==\
    \ \"$result\" ]; then\n      result=\"\";\n      break;\n    fi\n    local next=${word:$count:1}\n\
    \    if [ \"$next\" == \"$v\" ] || [ \"$next\" == \"$result\" ]; then\n      result=$v\n\
    \      break\n    fi\n    count=$((count-1))\n  done\n  echo ${result};", "  \
    \  local str=$1\n    local result=\"\"\n    local vowels=\"a ei i oo u ua\"\n\n\
    \    for char in ${str}; do\n\tlocal count=0;\n\tfor vowel in $vowels; do\n\t\
    \    count=$(($count + ${#vowel} - $((${#char} - $((${#vowel} + 1))))))\n\tdone\n\
    \n\tif (( ${#char} <= ${#vowel} )); then\n\t    result=\"${char}\"\n\t    break;\n\
    \tfi\n    done\n\n    echo $result", "\t[[ \"$1\" =~ ^[a-zA-Z]*$ ]] || return\
    \ 1\n\n\tlocal vowels=\"a e i o u\"\n\tlocal char=\"$1\"\n\tlocal index=1\n\t\
    local charLength=${#char}\n\t\n\t[[ ${charLength} -lt 4 ]] || return 1\n\n\tlocal\
    \ maxVowelLength=${#vowels}\n\tlocal closestVowel=${vowels[0]}\n\tlocal vowelIndex=0\n\
    \n\twhile [ \"${closestVowel}\" != \"\" ]; do\n\t\tif [[ \"${vowels[vowelIndex]}\"\
    \ == \"$char\" ]]; then\n\t\t\tclosestVowel=${vowels[vowelIndex]}\n\t\t\tindex=$((index+1))\n\
    \t\t\tvowelIndex=$((vowelIndex+1))\n\t\t\tcharLength=${#closestVowel}\n\t\t\t\
    [[ \"${charLength}\" -ge \"${maxVowelLength}\" ]] || return 1\n\t\telse\n\t\t\t\
    index=$((index+1))\n\t\tfi\n\tdone\n\n\t[[ \"${closestVowel}\" == \"\" ]] && return\
    \ 1\n\n\techo \"${closestVowel}\"", "  local vowels=\"a e i o u A E I O U\"\n\
    \  local word=$1\n  local wordlen=${#word}\n  local index=1\n  local vowel=${word:$index}\n\
    \  local end=$((index+1))\n  local start=$((wordlen-end))\n  while [[ $start -gt\
    \ 0 ]]; do\n    if [[ \"$vowel\" == \"$vowels\" ]]; then\n      echo ${vowel}\n\
    \      return\n    fi\n    index=$((start-1))\n    local next=$((index+1))\n \
    \   if [[ $next -gt $end ]]; then\n      break\n    fi\n    vowel=${word:$index}\n\
    \    local nextvowel=${word:$next}\n    if [[ \"$nextvowel\" == \"$vowel\" ]];\
    \ then\n      start=$((index+1))\n      end=$((index+2))\n    fi\n  done", " \
    \   local vowels_left=(\"a\" \"e\" \"i\" \"o\" \"u\")\n    local vowels_right=(\"\
    A\" \"E\" \"I\" \"O\" \"U\")\n    local word=${1}\n    local vowel=${word:$((${#word}-1)):1}\n\
    \    local vowel_left=${vowels_left[${#vowels_left[@]} - ${#word}:1]}\n    local\
    \ vowel_right=${vowels_right[${#vowels_right[@]} - ${#word}:1]}\n    if [[ $vowel_left\
    \ == \"$vowel\" ]]; then\n        return $vowel\n    fi\n    if [[ $vowel_right\
    \ == \"$vowel\" ]]; then\n        return $vowel\n    fi\n    if [[ $word =~ (^|[[:space:]]+)($vowel_left)($vowel)($vowel_right|$|[[:space:]]+)\
    \ ]]; then\n        local left_end=${BASH_REMATCH[2]}\n        local left_start=${BASH_REMATCH[3]}\n\
    \        local right_end=${BASH_REMATCH[5]}\n        local right_start=${BASH_REMATCH[6]}\n\
    \        if [[ $left_end < $left_start ]]; then\n            local left=${left_end}\n\
    \            local right=${left_start}\n        else\n            local left=${left_start}\n\
    \            local right=${left_end}\n        fi\n        if [[ $right_end < $right_start\
    \ ]]; then\n            local left=${right_end}\n            local right=${right_start}\n\
    \        else\n            local left=${right_start}\n            local right=${right_end}\n\
    \        fi\n        if [[ $left < $right ]]; then\n            local left=${left}\n\
    \            local right=${right}\n        fi\n        if [[ $left == $right ]];\
    \ then\n            local left=${left}\n            local right=${right}\n   \
    \     fi\n        if [[ $left != \"\" ]]; then\n            return $left\n   \
    \     fi\n        return $right\n    fi", "  local str=\"$1\"\n  # vowel array\n\
    \  local arr=(\"a\" \"e\" \"i\" \"o\" \"u\")\n  local len=${#str}\n  local i\n\
    \  for i in $(seq 0 $((${#arr[@]}-1))); do\n    if [[ \"${str:$((len-$i))}\" ==\
    \ *\"${arr[$i]}\"* ]]; then\n      return ${arr[$i]}\n    fi\n  done", "\tlocal\
    \ s=$1\n\tlocal vowels=\"a e i o u\"\n\tlocal c=$((${#s} >> 1))\n\tlocal v=$((${#vowels}\
    \ >> 1))\n\tlocal l=$((${#s} >> 2))\n\tlocal l1=$(echo $l | cut -c1+1)\n\tlocal\
    \ l2=$(echo $l | cut -c2-)\n\tlocal l3=$(echo $l | cut -c3-)\n\tlocal l4=$(echo\
    \ $l | cut -c4-)\n\tlocal l5=$(echo $l | cut -c5-)\n\tlocal l6=$(echo $l | cut\
    \ -c6-)\n\tlocal l7=$(echo $l | cut -c7-)\n\tlocal l8=$(echo $l | cut -c8-)\n\t\
    local l9=$(echo $l | cut -c9-)\n\tlocal l10=$(echo $l | cut -c10-)\n\tlocal l11=$(echo\
    \ $l | cut -c11-)\n\tlocal l12=$(echo $l | cut -c12-)\n\tlocal l13=$(echo $l |\
    \ cut -c13-)\n\tlocal l14=$(echo $l | cut -c14-)\n\tlocal l15=$(echo $l | cut\
    \ -c15-)\n\tlocal l16=$(echo $l | cut -c16-) # if $l is shorter than 16 characters,\
    \ \n\t# it means it is just 1 letter\n\tlocal l17=$(echo $l | cut -c17-) # if\
    \ $l is shorter than 17 characters, \n\t# it means it is just 2 letters\n\tlocal\
    \ l18=$(echo $l | cut -c18-) # if $l is shorter than 18 characters, \n\t# it means\
    \ it is just 3 letters\n\tlocal l19=$(echo $l | cut -c19-) # if $l is shorter\
    \ than 19 characters, \n\t# it means it is just 4 letters\n\tlocal l20=$(echo\
    \ $l | cut -c20-) # if $l is shorter than 20 characters, \n\t# it means it is\
    \ just 5 letters\n\tlocal l21=$(echo $l | cut -c21-) # if $l is shorter than 21\
    \ characters, \n\t# it means it is just 6 letters\n\tlocal l22=$(echo $l | cut\
    \ -c22-) # if $l is shorter than 22 characters, \n\t# it means it is just 7 letters\n\
    \tlocal l23=$(echo $l | cut -c23-) # if $l is shorter than 23 characters, \n\t\
    # it means it is just 8 letters\n\tlocal l24=$(echo $l | cut -c24-) # if $l is\
    \ shorter than 24 character", "    local s=$1 \n    local l=${#s}\n    local vowel=\"\
    a e i o u\"\n    local vowel_found=false\n    local vowels_found=0\n    local\
    \ vowels_found_last=0\n    for (( i=1; i<=$((l-2)); i++ ))\n    do\n      local\
    \ c=${s:$i:1}\n      local found=false\n      for vowel in $vowel\n      do\n\
    \        found=false\n        for (( j=0; j<$((l-i)); j++ ))\n        do\n   \
    \       local jc=${s:$j:1}\n          [[ \"$c\" == \"$jc\" ]] && found=true\n\
    \          [[ \"$found\" ]] && break\n        done\n        [[ \"$found\" ]] &&\
    \ vowels_found+=1\n      done\n      [[ \"$found\" ]] && break\n    done\n   \
    \ [[ \"$vowels_found\" ]] && echo \"$vowel\" && return 0\n    [[ \"$vowels_found\"\
    \ -gt $vowels_found_last ]] && return 0\n    [[ \"$vowels_found\" -gt $vowels_found\
    \ ]] && vowels_found_last=$vowels_found && return 0", "  local vowels=(\"a\" \"\
    e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")\n  for (( i = 0; i < ${#1};\
    \ i++ )); do\n    local letter=${1:$i:1}\n    if [[ \"${letter,,}\" == \"a\" ||\
    \ \"${letter,,}\" == \"A\" ]]; then\n      echo \"${vowels[(${#vowels[*]} + 1)]}\"\
    \n      return\n    fi\n    if [[ \"${letter,,}\" == \"e\" || \"${letter,,}\"\
    \ == \"E\" ]]; then\n      echo \"${vowels[(${#vowels[*]} - 1)]}\"\n      return\n\
    \    fi\n    if [[ \"${letter,,}\" == \"i\" || \"${letter,,}\" == \"I\" ]]; then\n\
    \      echo \"${vowels[(${#vowels[*]} - 2)]}\"\n      return\n    fi\n    if [[\
    \ \"${letter,,}\" == \"o\" || \"${letter,,}\" == \"O\" ]]; then\n      echo \"\
    ${vowels[(${#vowels[*]} - 3)]}\"\n      return\n    fi\n    if [[ \"${letter,,}\"\
    \ == \"u\" || \"${letter,,}\" == \"U\" ]]; then\n      echo \"${vowels[(${#vowels[*]}\
    \ + 1)]}\"\n      return\n    fi\n  done\n  echo \"$1\"", "  local vowels=\"a\
    \ e i o u\"\n  local word=$1\n  local i j\n  local vowel\n  for j in $(seq 0 $((${#word}-1)))\n\
    \  do\n    i=$((${#word} - 1 - j))\n    vowel=\"${word:$i:1}\"\n    if [[ $j -gt\
    \ 0 ]] ; then\n      if [[ \"${vowel}\" == ${vowels:0:1} ]] ; then\n        vowel=\"\
    ${vowels:0:1}\"\n        break\n      fi\n    fi\n  done\n  echo \"${vowel}\"",
  "    local vowel_cons=\"aAeEiIoOuU\"\n    local vowel_start=\"AaAeEiIoOuU\"\n  \
    \  local vowel_end=\"OoOoOuUu\"\n    local vowel_array=(${$1//[${vowel_cons}]})\n\
    \    local vowel_count=${#vowel_array[@]}\n    local index=0\n    local result=\"\
    \"\n    while [ ${index} -lt ${vowel_count} ] ; do\n        local current_cons=${vowel_array[${index}]}\n\
    \        local distance=0\n        if [[ \"${vowel_start}${current_cons}\" ==\
    \ \"${vowel_end}${current_cons}\" ]]; then\n            distance=0\n        else\n\
    \            local current_length=${#current_cons}\n            local start_index=${index}\n\
    \            local end_index=${index}\n            while [[ ${index} -lt ${vowel_count}\
    \ ]] && [[ ${current_length} -le ${vowel_count} ]] ; do\n                local\
    \ current_cons_2=${vowel_array[${index}]}\n                if [[ \"${current_cons_2}\"\
    \ == \"${current_cons}\" ]]; then\n                    distance=${index}\n   \
    \                 break\n                fi\n                (( ${index} ))\n\
    \            done\n        fi\n        if [[ ${distance} -le ${vowel_count} ]];\
    \ then\n            (( ${index} ))\n        else\n            result=\"${current_cons}\"\
    \n        fi\n    done\n    echo \"${result}\"", "    if [[ \"$1\" == \"\" ]];\
    \ then\n        echo \"Usage: $(basename $0) <string>\"\n        echo \"Your string\
    \ should be between 2 and 30 chars long\"\n        echo \"Do not include spaces\
    \ in your string\"\n        return\n    fi\n\n    if [[ \"${#1}\" -lt \"2\" ||\
    \ \"${#1}\" -gt \"30\" ]]; then\n        echo \"Your input string should be between\
    \ 2 and 30 chars long\"\n        echo \"Do not include spaces in your string\"\
    \n        return\n    fi\n\n    vowels='aeiouAEIOU'\n    vowels_end='AEIOUaeiou'\n\
    \n    count=0\n    search_string=\"$(echo $1 |sed -e 's/[[:space:]]//g' -e 's/[^[:upper:]]//g')\"\
    \n    search_length=\"${#search_string}\"\n    vowel_found=0\n\n    while [[ $((\
    \ count + 1 )) -lt $search_length ]]; do\n        vowel=${search_string:$count:1}\n\
    \        \n        if [[ $(( count + 1 )) -ge $search_length ]]; then\n      \
    \      vowel=${search_string:$(( count + 1 )):1}\n        fi\n\n        if [[\
    \ \"$vowel\" == \"$vowels\" || \"$vowel\" == \"$vowels_end\" ]]; then\n      \
    \      vowel_found=1\n            break\n        fi\n\n        (( count = count\
    \ + 1 ))\n    done\n    \n    if [[ $(( count - 1 )) -ge $search_length ]]; then\n\
    \        vowel_found=1\n    fi\n\n    if [[ $(( count + 1 )) -ge $search_length\
    \ ]]; then\n        vowel_found=1\n    fi\n\n    if [[ \"$vowel_found\" == \"\
    0\" ]]; then\n        echo \"$1\"\n    else\n        echo \"$1\"\n    fi", " \
    \   local vowel=`echo $1 | tr '[:upper:]' '[:lower:]' | tr --delete '[:alnum:]'\
    \ '_'`\n    for (( i=$#-1 ; i>=0 ; i-- ))\n    do\n        local c=`echo $1 |\
    \ tr '[:upper:]' '[:lower:]' | tr --delete '[:alnum:]' '_'`\n        if [ \"$vowel\"\
    \ != \"${c}\" ]\n        then\n            return $vowel\n        fi\n    done\n\
    \    return \"\"", "    local v=\"a e i o u\"\n    local l=${1:0:1}\n    if [\
    \ \"$l\" == \"a\" -o \"$l\" == \"e\" -o \"$l\" == \"i\" -o \"$l\" == \"o\" -o\
    \ \"$l\" == \"u\" ] ; then\n        echo \"$l\"\n    else\n        echo \"$v\"\
    \n    fi", "    local str=$1\n    local word=${str:1}\n    local vowels=${word:2}\n\
    \    local vowels_count=${#vowels}\n    local vowel_index=$((${#vowels}-1))\n\
    \    local vowel=\"${vowels:${vowel_index}}\"\n    local vowel_lower=\"${vowel,,}\"\
    \n    local vowel_upper=\"${vowel,,,}\"\n    local vowel_length=$((${#vowel_upper}\
    \ - ${#vowel_lower}))\n    local vowel_length=$((${vowel_length} > 0 ? ${vowel_length}\
    \ : ${#vowel}))\n    local vowel_length=$((${vowel_length} > 0 ? ${vowel_length}\
    \ : 1))\n    local vowel_length=$((${vowel_length} > 0 ? ${vowel_length} : 1))\n\
    \    local vowel_length=$((${vowel_length} > 0 ? ${vowel_length} : 1))\n    local\
    \ vowel_length=$((${vowel_length} > 0 ? ${vowel_length} : 1))\n    local vowel_length=$((${vowel_length}\
    \ > 0 ? ${vowel_length} : 1))\n    local vowel_length=$((${vowel_length} > 0 ?\
    \ ${vowel_length} : 1))\n    local vowel_length=$((${vowel_length} > 0 ? ${vowel_length}\
    \ : 1))\n    local vowel_length=$((${vowel_length} > 0 ? ${vowel_length} : 1))\n\
    \    local vowel_length=$((${vowel_length} > 0 ? ${vowel_length} : 1))\n    local\
    \ vowel_length=$((${vowel_length} > 0 ? ${vowel_length} : 1))\n    local vowel_length=$((${vowel_length}\
    \ > 0 ? ${vowel_length} : 1))\n    local vowel_length=$((${vowel_length} > 0 ?\
    \ ${vowel_length} : 1))\n    local vowel_length=$((${vowel_length} > 0 ? ${vowel_length}\
    \ : 1))\n    local vowel_length=$((${vowel_length} > 0 ? ${vowel_length} : 1))\n\
    \    local vowel_length=$((${vowel_length} > 0 ? ${vowel_length} : 1))\n    local\
    \ vowel_length=$((${vowel_length} > 0 ? ${vowel_length} : 1))\n    local vowel_length=$((${vowel_length}\
    \ > 0 ? ${vowel_length} : 1))\n    local vowel_length=$((${vowel_length} > 0 ?\
    \ ${vowel_", "  local string=\"$1\"\n  local vowels=\"aeiou\"\n  local vowel_found=\"\
    \"\n  local last_vowel=\"\"\n  local count=0\n  local count_start=0\n  local count_end=0\n\
    \  \n  # Find out first vowel\n  local first_vowel=\"\"\n  for char in ${string:0:1};\
    \ do\n    if [ ${vowels:0:1} == \"${char}\" ]; then\n      first_vowel=\"${char}\"\
    \n      break\n    fi\n  done\n\n  # Find out last vowel\n  local last_vowel=\"\
    \"\n  for char in ${string:(-1)}; do\n    if [ ${vowels:-1:1} == \"${char}\" ];\
    \ then\n      last_vowel=\"${char}\"\n      break\n    fi\n  done\n  \n  # Find\
    \ out vowels that are between the first and last vowels\n  local between=\"$(echo\
    \ -e \"${string}${vowels//$first_vowel/$last_vowel}\"| tr '[A-Z]' '[a-z]')\"\n\
    \  \n  count_start=0\n  count_end=0\n  \n  # Find out the vowel which is closest\
    \ to between and has less count in between\n  while [ -z \"$between\" ] || [ -z\
    \ \"$first_vowel\" ] || [ -z \"$last_vowel\" ]; then\n    if [ -z \"$first_vowel\"\
    \ ]; then\n      first_vowel=\"a\"\n    fi\n    if [ -z \"$last_vowel\" ]; then\n\
    \      last_vowel=\"z\"\n    fi\n    between=\"$(echo -e \"${string}${vowels//$first_vowel/$last_vowel}\"\
    | tr '[A-Z]' '[a-z]')\"\n    \n    count_start=$((${count} + 1))\n    count_end=$((${count}\
    \ + 1))\n  \n    if [ -z \"$between\" ]; then\n      break\n    fi\n  done\n\n\
    \  # Return closest vowel\n  if [ -z \"$between\" ]; then\n    return \"\"\n \
    \ fi\n\n  local char_found=\"\"\n  for char in $between; do\n    local char_found=\"\
    \"\n    if [ \"${vowels:0:1}\" == \"$first_vowel\" ] && [ \"${vowels:-1:1}\" ==\
    \ \"$last_vowel\" ]; then\n      char_found=\"${char}\"\n      break\n    fi\n\
    \  done\n  \n  if [ -z \"$char_found\" ]; then\n    char_found=\"$between\"\n\
    \  fi\n  \n  echo $char_found", "  local vowels=\"aeiouAEIOU\";\n  local string=\"\
    ${1}\"\n  local consonants=\"bcdfghjklmnpqrstvwxyz\";\n  local c=\"${consonants}\"\
    ;\n  local v=\"${vowels}\";\n  local vlength=\"${#v}\"\n  local s=${string:0:1}\n\
    \  local w=${string:1:1}\n  local wlength=\"${#w}\"\n  local t=\"a\";\n  local\
    \ i=0;\n  local j=0;\n  local vowel=\"a\";\n  local vowel_found=\"false\";\n\n\
    \  if [[ -z \"${string}\" ]] || [[ -z \"${consonants}\" ]] || [[ -z \"${vowels}\"\
    \ ]]; then\n    return \"\";\n  fi\n\n  while [[ ${j} -le ${wlength} ]] || [[\
    \ ${i} -le ${vlength} ]]; do\n    case \"${s:${wlength}-1:1}\" in\n      [${c:0:1}][${c:1:1}][${c:2:1}][${c:3:1}][${c:4:1}][${c:5:1}])\n\
    \        (( i=\"${i+1}\" ))\n        (( j=\"${j+1}\" ))\n        ;;\n      [${v:0:1}][${v:1:1}][${v:2:1}][${v:3:1}][${v:4:1}][${v:5:1}])\n\
    \        (( j=\"${j+1}\" ))\n        (( i=\"${i+1}\" ))\n        ;;\n      *)\n\
    \        (( j=\"${j+1}\" ))\n        (( i=\"${i+1}\" ))\n        ;;\n    esac\n\
    \n    case \"${w:${wlength}-1:1}\" in\n      [${v:0:1}][${v:1:1}][${v:2:1}][${v:3:1}][${v:4:1}][${v:5:1}])\n\
    \        (( i=\"${i+1}\" ))\n        (( j=\"${j+1}\" ))\n        (( c=\"${c:1:1}\"\
    \ ))\n        (( v=\"${v:0:1}\" ))\n        (( w=\"${w:0:1}\" ))\n        ;;\n\
    \      [${c:0:1}][${c:1:1}][${c:2:1}][${c:3:1}][${c:4:1}][${c:5:1}])\n       \
    \ (( j=\"${j+1}\" ))\n        (( i=\"${i+1}\" ))\n        (( c=\"${c:0:1}\" ))\n\
    \        (( w=\"${w:0:1}\" ))\n", "  local string=$1\n  local vowels=\"a e i o\
    \ u\"\n  local voccounts=$(echo $vowels | tr \" \" \"\\n\")\n  local voc=$(echo\
    \ $voccounts | grep \"^$string$\" | grep -v empty | wc -l )\n  if [ \"$voc\" -ne\
    \ 1 ]; then\n     echo \"\"\n  else\n     for vocs in $voccounts; do\n       \
    \ local vowel=$(echo $vocs | cut -d ' ' -f 1)\n        local vowelcount=$( echo\
    \ $vocs | cut -d ' ' -f 2 )\n        if [ \"$voc\" = \"$vowelcount\" ]; then\n\
    \           echo $voc\n           break\n        fi\n     done\n  fi", "    local\
    \ string=\"$1\"\n    local vowels=(\"a\" \"e\" \"i\" \"o\" \"u\")\n    local count=0\n\
    \    local vowel\n    for vowel in \"${vowels[@]}\"; do\n        count=$((count+1))\n\
    \    done\n    local i=${#string}-1\n    while [[ ${string[$i]} = \"$vowel\" ]]\
    \ || [[ ${string[$i]} = \"$vowel\"* ]] || [[ ${string[$i]} = \"$vowel\"* ]]; then\n\
    \        if (( ${count} >= 2 )); then\n            echo \"$vowel\"\n         \
    \   return\n        fi\n        (( i=i-1 ))\n        count=$((count-1))\n    done",
  "  local str=\"$1\"\n  # YOUR CODE HERE\n  echo \"$str\" | while read -r line; do\n\
    \    echo ${line//[!A-Za-z]/}\n  done", "  local vowels=\"AEIOUYAEIOUY\"\n  local\
    \ consonants=$(echo \"$1\" | tr \"[:upper:]\" \"[:lower:]\")\n  local vowel_indices=(\
    \ $(for ((i=$((${#consonants}+1)); i>0; i--)); do [[ \"$consonants\" == \"${consonants:$i:1}\"\
    \ && \"${consonants:$i:1}\" == \"$2\" ]] && echo \"$i\"; done ))\n  (( \"${#vowel_indices[@]}\"\
    \ == 0 )) && return 1\n  local vowel_index=${vowel_indices[$(( ${#vowel_indices[@]}\
    \ - 1 ))]}\n  local closest_vowel=${vowels[$(( ${#vowels[@]} - 1 - vowel_index\
    \ ))]}\n  [[ \"$vowel_index\" -gt \"$(( ${#vowels[@]} - 2 ))\" ]] && [[ \"$closest_vowel\"\
    \ == \"$3\" ]] && return 0 || return 1\n  return 0", "    if [[ \"$1\" =~ \\[[:alpha:]]*\
    \ ]]\n    then\n        local _vowels=\"a\"\n        local _consonants=\"b\"\n\
    \        local _consonants2=\"c\"\n        local _consonants3=\"d\"\n        local\
    \ _consonants4=\"e\"\n        local _consonants5=\"f\"\n        local _consonants6=\"\
    g\"\n        local _consonants7=\"h\"\n        local _consonants8=\"i\"\n    \
    \    local _consonants9=\"j\"\n        local _consonants10=\"k\"\n        local\
    \ _consonants11=\"l\"\n        local _consonants12=\"m\"\n        local _consonants13=\"\
    n\"\n        local _consonants14=\"o\"\n        local _consonants15=\"p\"\n  \
    \      local _consonants16=\"q\"\n        local _consonants17=\"r\"\n        local\
    \ _consonants18=\"s\"\n        local _consonants19=\"t\"\n        local _consonants20=\"\
    u\"\n        local _consonants21=\"v\"\n        local _consonants22=\"w\"\n  \
    \      local _consonants23=\"x\"\n        local _consonants24=\"y\"\n        local\
    \ _consonants25=\"z\"\n        local _consonants26=\"aa\"\n        local _consonants27=\"\
    ab\"\n        local _consonants28=\"ac\"\n        local _consonants29=\"ad\"\n\
    \        local _consonants30=\"ae\"\n        local _consonants31=\"af\"\n    \
    \    local _consonants32=\"ag\"\n        local _consonants33=\"ah\"\n        local\
    \ _consonants34=\"ai\"\n        local _consonants35=\"aj\"\n        local _consonants36=\"\
    ak\"\n        local _consonants37=\"al\"\n        local _consonants38=\"am\"\n\
    \        local _consonants39=\"an\"\n        local _consonants40=\"ao\"\n    \
    \    local _consonants41=\"ap\"\n        local _consonants42=\"aq\"\n        local\
    \ _consonants43=\"ar\"\n        local _consonants44=\"as\"\n        local _consonants45=\"\
    at\"\n        local _", "    local input=\"${1:?Parameter 1 cannot be empty.}\"\
    \n    local vowels=(a e i o u)\n    local vowels_count=${#vowels[@]}\n    local\
    \ vowel_index=${#input}\n    local vowel_start_pos=0\n    local vowel_end_pos=0\n\
    \    local vowel_vovel=${input[vowel_start_pos]}\n    local vowel_vovel_count=0\n\
    \n    # Go through each vowel from the right side\n    for (( i=0; i <= vowels_count;\
    \ i++ )) do\n        vowel_vovel=${input[vowel_end_pos]}\n        vowel_vovel_count=0\n\
    \        for (( j=i+1; j<=vowels_count; j++ )) do\n            if [[ \"$vowel_vovel\"\
    \ == \"$vowels[j\" ]] ]]; then\n                ((vowel_vovel_count++))\n    \
    \        fi\n        done\n\n        if ((vowel_vovel_count == 0)) && ((vowel_vovel_index\
    \ > (vowel_start_pos+1))); then\n            ((vowel_vovel_index--))\n       \
    \ elif ((vowel_vovel_count > 0)) && ((vowel_vovel_index < (vowel_end_pos))); then\n\
    \            ((vowel_vovel_index++))\n        fi\n    done\n\n    echo \"$vowels[${vowel_index}+1]\"",
  "  local _vowels=\"aeiouAEIOU\"\n  local word=$1\n  local prev=\"U\"\n  local next=\"\
    U\"\n  local vowel=\"U\"\n  local result=\"\"\n  local i=0 # count of vowels in\
    \ word\n  local j=0 # count of consonants\n  \n  while ((i<${#word})); do\n  \
    \  prev=${word:$i:1}\n    ((j++))\n    next=${word:$((i+1)):1}\n    ((i++))\n\
    \    ((i<${#word})) && continue # skip last consonant \n    ((j++))\n    \n  \
    \  # vowel not exists in the word\n    if [[ \"$prev\" != $word ]]; then\n   \
    \   ((i++))\n      ((j++))\n      ((i<${#word})) && continue # skip last consonant\n\
    \      ((j++))\n      ((i<${#word})) && continue # skip last consonant\n     \
    \ ((j++))\n      ((i<${#word})) && continue # skip last consonant\n      ((j++))\n\
    \      ((i<${#word})) && continue # skip last consonant\n      ((j++))\n     \
    \ ((i<${#word})) && continue # skip last consonant\n      ((j++))\n      ((i<${#word}))\
    \ && continue # skip last consonant\n      ((j++))\n      ((i<${#word})) && continue\
    \ # skip last consonant\n      ((j++))\n      ((i<${#word})) && continue # skip\
    \ last consonant\n      ((j++))\n      ((i<${#word})) && continue # skip last\
    \ consonant\n      ((j++))\n      ((i<${#word})) && continue # skip last consonant\n\
    \      ((j++))\n      ((i<${#word})) && continue # skip last consonant\n     \
    \ ((j++))\n      ((i<${#word})) && continue # skip last consonant\n      ((j++))\n\
    \      ((i<${#word})) && continue # skip last consonant\n      ((j++))\n     \
    \ ((i<${#word})) && continue # skip last consonant\n      ((j++))\n      ((i<${#word}))\
    \ && continue # skip last consonant\n      ((j++))\n      ((i<${#word})) && continue\
    \ # skip last consonant\n      ((j++))", "    local str=$1\n    local vowel=\"\
    aeiouAEIOU\"\n    local i=0\n    local imax=${#str}\n    local c=$str[i]\n   \
    \ local vowel1=$((imax-1))\n    local vowel2=$imax\n    local l=0\n    local vmax=${#vowel}\n\
    \n    while [ $i -lt $imax ]; do\n        \n        while [ \"$c\" == \"${str[[\
    \ $i -eq $imax ]]}\" ]; do\n            ((i=i+1))\n        done\n        \n  \
    \      if [[ \"$c\" == *\"$vowel\"* ]]; then\n            ((i=i+1))\n        fi\n\
    \n        if [[ \"$c\" == *\"$vowel1\"* ]]; then\n            ((i=i+1))\n    \
    \    fi\n\n        if [[ \"$c\" == *\"$vowel2\"* ]]; then\n            ((i=i+1))\n\
    \        fi\n\n        if [[ \"$c\" == *\"$vowel\"* ]]; then\n            ((i=i+1))\n\
    \        fi\n\n        if [[ \"$c\" == *\"$vowel2\"* ]]; then\n            ((i=i+1))\n\
    \        fi\n\n        if [[ \"$c\" == *\"$vowel1\"* ]]; then\n            ((i=i+1))\n\
    \        fi\n\n        if [[ \"$c\" == *\"$vowel\"* ]]; then\n            ((i=i+1))\n\
    \        fi\n\n        if [[ \"$c\" == *\"$vowel1\"* ]]; then\n            ((i=i+1))\n\
    \        fi\n\n        if [[ \"$c\" == *\"$vowel2\"* ]]; then\n            ((i=i+1))\n\
    \        fi\n\n        if [[ \"$c\" == *\"$vowel1\"* ]]; then\n            ((i=i+1))\n\
    \        fi\n\n        if [[ \"$c\" == *\"$vowel2\"* ]]; then\n            ((i=i+1))\n\
    \        fi\n\n        if [[ \"$c\" == *\"$vowel1\"* ]]; then\n            ((i=i+1))\n\
    \        fi\n\n        if [[ \"$c\" == *\"$vowel2\"* ]]; then\n            ((i=i+1))\n\
    \        fi\n\n        if [[ \"$c\" == *\"$vowel\"* ]]; then\n            ((i=i+1))\n\
    \        fi\n\n        if [[ \"$c\" == *\"$vowel1\"* ]]; then\n            ((i=i+1))\n\
    \        fi\n\n        if [[ \"$c\" == *\"$vowel2\"* ]]; then\n            ((i=i+1))\n\
    \        fi\n\n        if [[ \"$c\" == *\"$vowel1\"* ]]; then\n            ((i=i+1))\n\
    \        fi\n\n        if [[ \"$c\" == *\"$vowel2\"* ]]; then\n            ((i=i+1))\n\
    \        fi\n\n        if [[", "  declare -a vowels=(\"a\" \"e\" \"i\" \"o\" \"\
    u\");\n  local word vowel pos diff diff_index;\n  word=${1:-\"\"};\n  pos=${#word};\n\
    \  if [ $pos -lt 2 ];\n  then\n      return \"\";\n  fi\n  \n  # find the first\
    \ consonant\n  diff=1;\n  diff_index=0;\n  while [ \"$diff\" -le $pos ];\n  do\n\
    \    diff=$(( ${vowels[$diff_index]}${word[$diff]}${vowels[$diff+1]}${word[$diff+2]}\
    \ ));\n    diff=$(( ${diff}+1 ));\n    (( diff_index=$diff_index+1 ));\n  done\n\
    \  \n  vowel=${word[$diff]};\n  \n  (( diff=$(( $diff-1 )));\n  \n  # find the\
    \ second consonant\n  while [ \"$diff\" -gt 0 ];\n  do\n    diff=$(( ${vowels[$diff]}${word[$diff]}${vowels[$diff-1]}${word[$diff-2]}\
    \ ));\n    diff=$(( ${diff}-1 ));\n    (( diff_index=$diff_index-1 ));\n  done\n\
    \  \n  (( diff=$(( diff - 2 )));\n  \n  # find the third consonant\n  while [\
    \ \"$diff\" -gt 0 ];\n  do\n    diff=$(( ${vowels[$diff]}${word[$diff]}${vowels[$diff-1]}${word[$diff-2]}\
    \ ));\n    diff=$(( ${diff}-1 ));\n    (( diff_index=$diff_index-1 ));\n  done\n\
    \  \n  (( diff=$(( diff - 2 )));\n  \n  # find the fourth consonant\n  while [\
    \ \"$diff\" -gt 0 ];\n  do\n    diff=$(( ${vowels[$diff]}${word[$diff]}${vowels[$diff-1]}${word[$diff-2]}\
    \ ));\n    diff=$(( ${diff}-1 ));\n    (( diff_index=$diff_index-1 ));\n  done\n\
    \  \n  (( diff=$(( diff - 2 )));\n  \n  # find the fifth consonant\n  while [\
    \ \"$diff\" -gt 0 ];\n  do\n    diff=$(( ${vowels[$diff]}${word[$diff]}${vowels[$diff-1]}${word[$diff-2]}\
    \ ));\n    diff=$(( ${diff", "    local vowels=\"AEIOUaeiou\"\n    local word=${1:-}\n\
    \    local vowel=${vowels:-1}\n    if [[ \"$word\" =~ $vowel ]]; then\n      \
    \  echo \"$vowel\"\n    else\n        echo \"$vowel\"\n    fi", "    local vowels=\"\
    a e i o u\"\n    local string=\"$1\"\n    local vowel=$(grep -c \"$vowels\" <<<\
    \ \"$string\")\n    local consonants=$(echo \"$string\" | sed 's/[bcdfghjklmnpqrstvwxyz]//g')\n\
    \    local consonant=$(grep -c \"$consonants\" <<< \"$string\")\n    if [[ \"\
    $vowel\" -eq \"$consonant\" ]]; then\n        echo \"\"\n    else\n        echo\
    \ \"${string%\"$consonants\"$vowels}\"\n    fi", "    local STR=$1\n    local\
    \ STR_LENGTH=${#STR}\n    local i\n\n    for (( i=0; i<STR_LENGTH; i++ )); do\n\
    \        local STR_CHAR=${STR:$i:1}\n        if [[ \"$STR_CHAR\" == [aeouy] ]];\
    \ then\n            local STR_CHAR_INDEX=$(( ${i} + 1 ))\n            local STR_CHAR_INDEX_MAX=$((\
    \ ${STR_LENGTH} - 1))\n            local STR_CHAR_INDEX_TMP=${STR_CHAR_INDEX}\n\
    \            local STR_CHAR_INDEX_SUM=0\n\n            for (( j=$STR_CHAR_INDEX_MAX;\
    \ j>$STR_CHAR_INDEX_MIN; --j )); do\n                STR_CHAR_INDEX_TMP=${STR_CHAR_INDEX_TMP}${STR:$j:1}\n\
    \                STR_CHAR_INDEX_SUM=$(( ${STR_CHAR_INDEX_SUM} + ${j} ))\n    \
    \        done\n\n            if [[ \"$STR_CHAR_INDEX_TMP\" == [aeouy] ]]; then\n\
    \                if (( ${STR_CHAR_INDEX_SUM} > ${i} + 1 )) ; then\n          \
    \          echo \"$STR_CHAR\"\n                    break\n                fi\n\
    \            fi\n        fi\n    done", "  local vowel=\"euiuyaoba\"\n  local\
    \ vowel1=\"euiuyaob\"\n  local vowel2=\"euiuyaob\"\n  local vowel3=\"euiuyaob\"\
    \n  local vowel4=\"euiuyaob\"\n  local vowel5=\"euiuyaob\"\n  local vowel6=\"\
    euiuyaob\"\n  local vowel7=\"euiuyaob\"\n  local vowel8=\"euiuyaob\"\n  local\
    \ vowel9=\"euiuyaob\"\n  local vowel10=\"euiuyaob\"\n  local vowel11=\"euiuyaob\"\
    \n  local vowel12=\"euiuyaob\"\n  local vowel13=\"euiuyaob\"\n  local vowel14=\"\
    euiuyaob\"\n  local vowel15=\"euiuyaob\"\n  local vowel16=\"euiuyaob\"\n  local\
    \ vowel17=\"euiuyaob\"\n  local vowel18=\"euiuyaob\"\n  local vowel19=\"euiuyaob\"\
    \n  local vowel20=\"euiuyaob\"\n  local vowel21=\"euiuyaob\"\n  local vowel22=\"\
    euiuyaob\"\n  local vowel23=\"euiuyaob\"\n  local vowel24=\"euiuyaob\"\n  local\
    \ vowel25=\"euiuyaob\"\n  local vowel26=\"euiuyaob\"\n  local vowel27=\"euiuyaob\"\
    \n  local vowel28=\"euiuyaob\"\n  local vowel29=\"euiuyaob\"\n  local vowel30=\"\
    euiuyaob\"\n  local vowel31=\"euiuyaob\"\n  local vowel32=\"euiuyaob\"\n  local\
    \ vowel33=\"euiuyaob\"\n  local vowel34=\"euiuyaob\"\n  local vowel35=\"euiuyaob\"\
    \n  local vowel36=\"euiuyaob\"\n  local vowel37=\"euiuyaob\"\n  local vowel38=\"\
    euiuyaob\"\n  local vowel39=\"euiuyaob\"\n  local vowel40=\"euiuyaob\"\n  local\
    \ vowel41=\"euiuyaob\"\n  local vowel42=\"euiu", "    local word=$1\n\n    local\
    \ vowels=\"a e i o u\"\n    local i\n    local j\n    for (( i=0; i<${#word};\
    \ i++ )); do\n        if [[ \"${word:$i:1}\" == *[aeiouAEIOU] ]]; then\n     \
    \       (( j=i+1 ))\n            break\n        fi\n    done\n    if [[ ${j} -eq\
    \ ${#word} ]]; then\n        echo \"$vowels\"\n    else\n        for (( j=i+1;\
    \ j<${#word}; j++ )); do\n            if [[ \"${word:$j:1}\" == *[aeiouAEIOU]\
    \ ]]; then\n                echo \"${vowels:0:1}\"\n                break\n  \
    \          fi\n        done\n    fi", "    local string=\"${1}\"\n    local vowels_string=\"\
    aeiouAEIOU\"\n    local index=0\n    local found_vowel=\"\"\n    local vowel_index=0\n\
    \    while [ $index -le ${#string} ]; do\n        vowel_index=0\n        case\
    \ \"${string:$index:1}\" in\n            A|a|B|b|C|c|D|d|E|e|F|f|G|g|H|h|I|i|J|j|K|k|L|l|M|m|N|n|O|o|P|p|Q|q|R|r|S|s|T|t|U|u|V|v|W|w|X|x|Y|y|Z|z)\n\
    \                # Don't need to check the last letter\n                index=$((index+1))\n\
    \                continue\n            ;;\n            *)\n                while\
    \ [ $vowel_index -le ${#vowels_string} ]; do\n                    if [ \"${string:$index:1}\"\
    \ == \"${vowels_string:$vowel_index:1}\" ]; then\n                        found_vowel=\"\
    ${string:$index:1}\"\n                        vowel_index=$((vowel_index+1))\n\
    \                        continue\n                    else\n                \
    \        vowel_index=$((vowel_index+1))\n                    fi\n            \
    \    done\n        fi\n        index=$((index+1))\n    done\n    echo \"$found_vowel\"",
  "    local letter=$1\n    local vowel=\n    local vowel1=\n    local vowel2=\n \
    \   local vowel3=\n    local vowel4=\n    local vowel5=\n    local vowel6=\n \
    \   local vowel7=\n    local vowel8=\n    local vowel9=\n    local vowel10=\n\n\
    \    local con1=\n    local con2=\n    local con3=\n    local con4=\n    local\
    \ con5=\n    local con6=\n    local con7=\n    local con8=\n    local con9=\n\
    \    local con10=\n    local con11=\n\n    local con12=\n    local con13=\n  \
    \  local con14=\n    local con15=\n    local con16=\n    local con17=\n    local\
    \ con18=\n    local con19=\n    local con20=\n\n    local con21=\n    local con22=\n\
    \    local con23=\n    local con24=\n    local con25=\n    local con26=\n    local\
    \ con27=\n    local con28=\n    local con29=\n    local con30=\n\n    local con31=\n\
    \    local con32=\n    local con33=\n    local con34=\n    local con35=\n    local\
    \ con36=\n    local con37=\n    local con38=\n    local con39=\n    local con40=\n\
    \n    local con41=\n    local con42=\n    local con43=\n    local con44=\n   \
    \ local con45=\n    local con46=\n    local con47=\n    local con48=\n    local\
    \ con49=\n    local con50=\n\n    local con51=\n    local con52=\n    local con53=\n\
    \    local con54=\n    local con55=\n    local con56=\n    local con57=\n    local\
    \ con58=\n    local con59=\n    local con60=\n\n    local con61=\n    local con62=\n\
    \    local con63=\n    local con64=\n    local con65=\n    local con66=\n    local\
    \ con67=\n    local con68=\n    local con69=\n    local con70=\n\n    local con71=\n\
    \    local con72=\n    local con73=\n    local con74=\n    local con", "    local\
    \ vowels=\"a e i o u\"\n    local string=$1\n    local count=0\n    for (( i=1;\
    \ i<${#string}-1; i++ )); do\n        local c=${string:$i:1}\n        if [[ $c\
    \ =~ $vowels ]]; then\n            ((count++))\n        fi\n    done\n    if [[\
    \ ${count} -gt 0 ]]; then\n        local vowel=${vowels:1:${#vowels}-${count}}\n\
    \        echo $vowel\n    else\n        echo \"\"\n    fi", "  if [ \"$1\" ==\
    \ \"\" ]; then\n    echo \"Missing parameter\"\n    return 1\n  fi\n  grep -o\
    \ \"[aeiouy]+\" <<< \"$1\" | sort -k 2 | tail -n +2 | head -n 1 | tr '[:upper:]'\
    \ '[:lower:]'", "  local string=$1\n  local vowels=$2\n  # vowel count\n  local\
    \ vowel_count=0\n  for v in $vowels; do\n    vowel_count=$(( vowel_count + ${#v}\
    \ ))\n  done\n  # vowel count\n  local vowel_count_diff=$(( vowel_count - 1 ))\n\
    \n  # find the right vowel count\n  local right_vowel_count_diff=0\n  for c in\
    \ $string; do\n    if [[ ${#c} -gt ${#vowels} ]]; then\n      local last_index=$(expr\
    \ ${#c} - ${#vowels})\n      if [[ ${c} =~ [[:lower:]][[:upper:]] ]]; then\n \
    \       local last_vowel=${c:$last_index}\n        if [[ ${vowel_count_diff} -le\
    \ ${#last_vowel} ]]; then\n          right_vowel_count_diff=$(( right_vowel_count_diff\
    \ + ${#last_vowel} ))\n        fi\n      fi\n    fi\n  done\n  \n  if [[ $right_vowel_count_diff\
    \ -gt 0 ]]; then\n    echo ${vowels:0:$right_vowel_count_diff}\n  else\n    echo\
    \ \"\"\n  fi", "    [[ $1 =~ $vowels_regex ]] || return 1\n    \n    # Remove\
    \ extra vowels from the string\n    string=${1//$vowels_regex/$'\\n'}\n    \n\
    \    # Remove consonants from right side\n    string=${string//$right_consonants_regex/$'\\\
    n'}\n    \n    string=${string//$left_consonants_regex/$'\\n'}\n\n    string=${string//$'\\\
    v'/$'\\n'}\n\n    string=${string//$'\\f'/$'\\n'}\n    \n    # Count vowels backwards\n\
    \    count=0\n    string=${string//$'\\n'/'\\n'}\n\n    while [[ \"$string\" !=\
    \ \"\" ]];\n    do\n        count=$(($count + 1))\n        string=${string//$'\\\
    n'/'\\n'}\n    done\n    \n    # Count vowels backwards and check if there are\
    \ multiple vowels\n    [[ $count -gt 1 ]] || return 1\n    \n    # Return the\
    \ first vowel\n    [[ \"$string\" = $vowels[1] ]] || return 1", "    local vowel_first=$1\n\
    \    local vowel_last=$2\n    local vowel_middle=$3\n    local vowel_final=\"\"\
    \n\n    # first vowel\n    local i=$(echo $vowel_first | sed 's/[^aeiouAEIOU]/\\\
    n/g')\n    # last vowel\n    local j=$(echo $vowel_last | sed 's/[^aeiouAEIOU]/\\\
    n/g')\n    # middle vowel\n    local k=$(echo $vowel_middle | sed 's/[^aeiouAEIOU]/\\\
    n/g')\n    # last two vowel\n    local l=$((${#vowel_first} - $((${#vowel_first}\
    \ % 2))))\n\n    local num_consonant=$((${#vowel_first} / 2))\n    \n    # remove\
    \ consonants\n    local vowel_first=$(echo $vowel_first | sed 's/[^aeiouAEIOU]/\\\
    n/g')\n\n    for ((i=${#vowel_first}; i>0; i--)); do\n        local letter=${vowel_first:i:1}\n\
    \        if [ \"$letter\" == \"a\" ]; then\n            vowel_final+=\"A\"\n \
    \       fi\n        if [ \"$letter\" == \"e\" ]; then\n            vowel_final+=\"\
    E\"\n        fi\n        if [ \"$letter\" == \"i\" ]; then\n            vowel_final+=\"\
    I\"\n        fi\n        if [ \"$letter\" == \"o\" ]; then\n            vowel_final+=\"\
    O\"\n        fi\n        if [ \"$letter\" == \"u\" ]; then\n            vowel_final+=\"\
    U\"\n        fi\n        if [ \"$letter\" == \"A\" ]; then\n            vowel_final+=\"\
    a\"\n        fi\n        if [ \"$letter\" == \"E\" ]; then\n            vowel_final+=\"\
    e\"\n        fi\n        if [ \"$letter\" == \"I\" ]; then\n            vowel_final+=\"\
    i\"\n        fi\n        if [ \"$letter\" == \"O\" ]; then\n            vowel_final+=\"\
    o\"\n        fi\n        if [ \"$letter\" == \"U\" ]; then\n            vowel_final+=\"\
    u\"\n        fi\n    done\n    \n    # return first vowel meets consonant between\
    \ vowel_first and vowel_last condition\n    echo $vowel_final", '    ', "  local\
    \ -a vowel_arr=(\"a\" \"A\" \"e\" \"E\" \"i\" \"I\" \"o\" \"O\" \"u\" \"U\" \"\
    y\" \"Y\");\n  local -i pos=0\n  local -a str=($1)\n  local -a res=($1)\n  local\
    \ -i i\n  local j\n  local k\n  local l\n\n  for i in ${str[@]}; do\n    if [\
    \ $i != \"?\" ] && [ $i != \"a\" ] && [ $i != \"e\" ] && [ $i != \"i\" ] && [\
    \ $i != \"o\" ] && [ $i != \"u\" ] && [ $i != \"y\" ] && [ $i != \"Y\" ] ; then\n\
    \      pos=$pos+1\n    fi\n  done\n\n  for j in ${str[@]}; do\n    if [ $j !=\
    \ \"?\" ] && [ $j != \"a\" ] && [ $j != \"e\" ] && [ $j != \"i\" ] && [ $j !=\
    \ \"o\" ] && [ $j != \"u\" ] && [ $j != \"y\" ] && [ $j != \"Y\" ] ; then\n  \
    \    pos=$pos-1\n    fi\n  done\n\n  for k in ${str[@]}; do\n    if [ $k == \"\
    ?\" ] && [ $k != \"a\" ] && [ $k != \"e\" ] && [ $k != \"i\" ] && [ $k != \"o\"\
    \ ] && [ $k != \"u\" ] && [ $k != \"y\" ] && [ $k != \"Y\" ] ; then\n      pos=$pos+1\n\
    \    fi\n  done\n\n  for l in ${str[@]}; do\n    if [ $l == \"?\" ] && [ $l !=\
    \ \"a\" ] && [ $l != \"e\" ] && [ $l != \"i\" ] && [ $l != \"o\" ] && [ $l !=\
    \ \"u\" ] && [ $l != \"y\" ] && [ $l != \"Y\" ] ; then\n      pos=$pos-1\n   \
    \ fi\n  done\n\n  if [ $pos > -1 ] ; then\n    for index in ${!vowel_arr[@]};\
    \ do\n      if [ ${vowel_arr[$index]} -gt $pos ] ; then\n        res[$index]=${vowel_arr[$index]};\n\
    \      fi\n    done\n  fi\n  if [ $pos < -1 ] ; then\n    for index in ${!vowel_arr[@]};\
    \ do\n      if [ ${vowel_arr[$index]} -le $pos ] ; then\n        res[$index]=${vowel_arr[$index]};\n\
    \      fi\n    done\n  fi\n\n  # return closest vowel\n  if [ $res == ($1) ] ;\
    \ then\n    echo \"\"\n  else\n    echo ${res[1]}\n  fi", "  local vowels=\"abaiklmnopqrstuvwxyz\"\
    ;\n  local word=$1;\n\n  local counter=1;\n  local index=0;\n  local vowel;\n\
    \  local vowel_counter=1;\n  local vowel_index=0;\n  local vowel_word;\n  local\
    \ vowel_counter_index=0;\n  local vowel_counter_value=0;\n\n  while [[ -n \"${word}\"\
    \ ]]; do\n    index=${word:${#vowel}}; # get index\n    vowel=${word:${index}:${index}};\n\
    \    if [[ \"${vowel}\" == \"$1\" ]]; then\n      if [[ \"${vowel}\" == \"${vowels[vowel_index]}\"\
    \ ]]; then\n        vowel_counter=${vowel_counter_index};\n        vowel_counter_value=${vowel_counter_value};\n\
    \      else\n        vowel_counter_index=0;\n        vowel_counter_value=0;\n\
    \      fi\n    else\n      (( vowel_counter_index=1 )); # start from the beginning\n\
    \      (( vowel_counter_value += 1 )); # increase value by 1\n      (( vowel_counter_index+=1\
    \ )); # increase the index\n      (( vowel_counter_value += 1 )); # increase the\
    \ value\n      (( vowel_counter_index+=1 )); # increase the index\n      (( vowel_counter_value\
    \ += 1 )); # increase the value\n      (( vowel_counter_index+=1 )); # increase\
    \ the index\n      (( vowel_counter_value += 1 )); # increase the value\n    \
    \  (( vowel_counter_index+=1 )); # increase the index\n      (( vowel_counter_value\
    \ += 1 )); # increase the value\n    fi\n    word=${word:0:index}\n    (( counter=counter\
    \ +1 ));\n  done\n\n  if [[ \"${vowel_counter_value}\" -gt \"${vowel_counter}\"\
    \ ]]; then\n    vowel=${vowels[${vowel_counter_index}]};\n  else\n    vowel=\"\
    \";\n  fi\n  echo \"${vowel}\"", "   local vowel=`echo $1 | sed -n 's/^\\([bcdfghjklmnpqrstvwxyz]*\\\
    )\\([bcdfghjklmnpqrstvwxyz]*\\).*/\\1/p'`\n   if [[ -z \"$vowel\" ]]; then\n \
    \     return \"\"\n   fi\n   local vowel_left_side=`echo $1 | sed -n 's/^\\([bcdfghjklmnpqrstvwxyz]*\\\
    ).*\\([bcdfghjklmnpqrstvwxyz]*\\).*/\\1/p'`\n   local vowel_right_side=`echo $1\
    \ | sed -n 's/^\\([bcdfghjklmnpqrstvwxyz]*\\).*\\([bcdfghjklmnpqrstvwxyz]*\\).*/\\\
    2/p'`\n\n   local vowel_left_side=`echo \"$vowel_left_side\" | sed 's/^[bcdfghjklmnpqrstvwxyz]*//g'`\n\
    \   local vowel_right_side=`echo \"$vowel_right_side\" | sed 's/^[bcdfghjklmnpqrstvwxyz]*//g'`\n\
    \   local vowel_left_side=`echo \"$vowel_left_side\" | sed 's/[bcdfghjklmnpqrstvwxyz]*$//g'`\n\
    \   local vowel_right_side=`echo \"$vowel_right_side\" | sed 's/[bcdfghjklmnpqrstvwxyz]*$//g'`\n\
    \   local vowel_left_side=`echo \"$vowel_left_side\" | sed 's/[bcdfghjklmnpqrstvwxyz]*$//g'`\n\
    \   local vowel_right_side=`echo \"$vowel_right_side\" | sed 's/[bcdfghjklmnpqrstvwxyz]*$//g'`\n\
    \   \n   if [ \"$vowel_left_side\" == \"$vowel\" ]; then\n      vowel_left_side=$vowel_right_side\n\
    \   elif [ \"$vowel_right_side\" == \"$vowel\" ]; then\n      vowel_right_side=$vowel_left_side\n\
    \   fi\n   \n   local vowel_right_side=`echo \"$vowel_right_side\" | sed 's/^[bcdfghjklmnpqrstvwxyz]*//g'`\n\
    \   local vowel_left_side=`echo \"$vowel_left_side\" | sed 's/[bcdfghjklmnpqrstvwxyz]*$//g'`\n\
    \   ", "\tlocal vowels=\"a e i o u y\";\n\tlocal first_consonant=\"b\";\n\tlocal\
    \ last_consonant=\"z\";\n\tlocal consonant_index=1;\n\tlocal vowel_index=1;\n\n\
    \tfor vowel in $vowels; do\n\t\tif [[ ${vowel} =~ $first_consonant ]]; then\n\t\
    \t\tfirst_consonant_index=${consonant_index};\n\t\tfi\n\t\tif [[ ${vowel} =~ $last_consonant\
    \ ]]; then\n\t\t\tlast_consonant_index=${consonant_index};\n\t\tfi\n\t\tconsonant_index=$((consonant_index\
    \ + 1));\n\tdone\n\tlocal vowel_positions=$(echo \"$1\" | tr \" \" \"\\n\" | sort\
    \ -n | uniq);\n\tlocal current_position=${first_consonant_index};\n\tlocal next_position=${last_consonant_index};\n\
    \twhile [ \"$current_position\" -le \"$next_position\" ]; do\n\t\tif [[ \"${vowel_positions[$current_position]}\"\
    \ =~ $vowel ]]; then\n\t\t\tlocal next_vowel=$(echo \"${vowel_positions[$next_position]}\"\
    \ | tr \"\\n\" \" \");\n\t\t\techo $next_vowel;\n\t\t\tlocal vowel_index=$((vowel_index\
    \ + 1));\n\t\tfi\n\t\tcurrent_position=$((current_position + 1));\n\tdone", " \
    \ local STR=$1\n  local LEFT=\"${STR:1:1}\"\n  local RIGHT=\"${STR:2:1}\"\n  local\
    \ VOWEL \n  local LEFTSTR\n  local RIGHTSTR\n  local LEFTSTRINDEX\n  local RIGHTSTRINDEX\n\
    \  local LEFTSTRLEN\n  local RIGHTSTRLEN\n  local LEFTSTRCHOS\n  local RIGHTSTRCHOS\n\
    \  local LEFTSTRCHOSINDEX\n  local RIGHTSTRCHOSINDEX\n  local LEFTSTRCHOSLEN\n\
    \  local RIGHTSTRCHOSLEN\n  local LEFTSTRTOLOWER\n  local RIGHTSTRTOLOWER\n  local\
    \ LEFTSTRTOUPPER\n  local RIGHTSTRTOUPPER\n\n  # If both left and right side are\
    \ consonants\n  if [ \"$LEFT\" == \"$RIGHT\" ] \n    then\n      # Remove left\
    \ and right side from string\n      STR=\"${STR:1:${#STR}-2}\"\n      STR=\"${STR:0:${#STR}-1}\"\
    \n      echo $STR\n      # Loop to find right side with right side at beginning\n\
    \      LEFTSTR=\"${STR:0:1}\"\n      RIGHTSTR=\"${STR:2:1}\"\n      LEFTSTRLEN=`echo\
    \ $LEFTSTR | wc -l`\n      RIGHTSTRLEN=`echo $RIGHTSTR | wc -l`\n      LEFTSTRTOLOWER=`echo\
    \ $LEFTSTR | tr '[:upper:]' '[:lower:]'`\n      RIGHTSTRTOLOWER=`echo $RIGHTSTR\
    \ | tr '[:upper:]' '[:lower:]'`\n      LEFTSTRTOUPPER=`echo $LEFTSTR | tr '[:upper:]'\
    \ '[:upper:]'`\n      RIGHTSTRTOUPPER=`echo $RIGHTSTR | tr '[:upper:]' '[:upper:]'`\n\
    \      LEFTSTRCHOS=\"[\"\n      RIGHTSTRCHOS=\"]\"\n      LEFTSTRCHOSINDEX=`echo\
    \ $LEFTSTR | grep -o $LEFTSTRCHOS | wc -l`\n      RIGHTSTRCHOSINDEX=`echo $RIGHTSTR\
    \ | grep -o $RIGHTSTRCHOS | wc -l`\n      LEFTSTRCHOSLEN=`echo $LEFTSTR | grep\
    \ -o $LEFTSTRCHOS | wc -l`\n      RIGHTSTRCHOSLEN=`echo $RIGHTSTR | grep -o $RIGHTSTRCHOS\
    \ | wc -l`\n      # Check left side is empty\n      if [ \"$LEFTSTRLEN\" == \"\
    0\" ]\n        then\n          echo $LEFTSTR\n          echo $RIGHTSTR\n", " \
    \ local string=\"$1\"\n\n  local vowel=\"aeiouAEIOU\"\n  local vowel_index=$(echo\
    \ $vowel | grep -o \"[$string]\")\n\n  if [ \"$vowel_index\" == \"\" ]; then\n\
    \    return \"\"\n  fi\n\n  local vowel_right_side=\"${string:${#vowel_index}}\"\
    \  \n\n  local vow_right_side_cons=$(echo $vow_right_side | grep -o \"[^$vowel]\"\
    )\n  local vow_right_side_cons_length=$(echo ${vow_right_side_cons:${#vow_right_side_cons}}\
    \  | wc -c)\n\n  local vow_left_side_cons=$(echo $vow_right_side | grep -o \"\
    $vowel\")\n  local vow_left_side_cons_length=$(echo ${vow_left_side_cons:${#vow_left_side_cons}}\
    \  | wc -c)\n\n  if [ \"$vow_left_side_cons_length\" -lt \"$vow_right_side_cons_length\"\
    \ ]; then\n    local vow_left=\"${vow_left_side_cons:0:$vow_left_side_cons_length}\"\
    \n  else\n    local vow_right=\"${vow_right_side_cons:0:$vow_right_side_cons_length}\"\
    \n  fi\n\n  local closest_vow_left=\"$vow_left\"\n  local closest_vow_right=\"\
    $vow_right\"\n\n  if [ \"$vow_right_side_cons_length\" -lt 2 ]; then\n    echo\
    \ \"$vow_right_side_cons $vow_left_side_cons $vow_right_side_cons_length\"\n \
    \   return \"$vow_right_side_cons $vow_left_side_cons $vow_right_side_cons_length\"\
    \n  fi\n\n  local vow_left_side_cons_len=$(echo $vow_left_side_cons | wc -l)\n\
    \  local vow_right_side_cons_len=$(echo $vow_right_side_cons | wc -l)\n\n  local\
    \ vow_left_side_cons_cnt=$(echo $vow_left_side_cons | wc -c)\n  local vow_right_side_cons_cnt=$(echo\
    \ $vow_right_side_cons | wc -c)\n\n  for (( i=$vow_left_side_cons_len-1 ; i>=0\
    \ ; i-- )); do\n    local vow_left_side_cons_cnt=$(echo $vow_left_side_cons |\
    \ wc -c)\n    local vow_right_side_cons_cnt=$(echo $vow_right_side_cons | wc -c)\n\
    \    if [ \"$vow_left_side_cons_cnt\" -gt \"$vow_right_side_cons_cnt\" ]; then\n\
    \      if ", "  local vowels=\"a\"\n  local consonant1=\"b\"\n  local consonant2=\"\
    c\"\n  local consonant3=\"d\"\n  local consonant4=\"e\"\n  local consonant5=\"\
    f\"\n  local consonant6=\"g\"\n  local consonant7=\"h\"\n  local consonant8=\"\
    i\"\n  local consonant9=\"j\"\n  local consonant10=\"k\"\n  local consonant11=\"\
    l\"\n  local consonant12=\"m\"\n  local consonant13=\"n\"\n  local consonant14=\"\
    o\"\n  local consonant15=\"p\"\n  local consonant16=\"q\"\n  local consonant17=\"\
    r\"\n  local consonant18=\"s\"\n  local consonant19=\"t\"\n  local consonant20=\"\
    u\"\n  local consonant21=\"v\"\n  local consonant22=\"w\"\n  local consonant23=\"\
    x\"\n  local consonant24=\"y\"\n  local consonant25=\"z\"\n  local consonant26=\"\
    A\"\n  local consonant27=\"B\"\n  local consonant28=\"C\"\n  local consonant29=\"\
    D\"\n  local consonant30=\"E\"\n  local consonant31=\"F\"\n  local consonant32=\"\
    G\"\n  local consonant33=\"H\"\n  local consonant34=\"I\"\n  local consonant35=\"\
    J\"\n  local consonant36=\"K\"\n  local consonant37=\"L\"\n  local consonant38=\"\
    M\"\n  local consonant39=\"N\"\n  local consonant40=\"O\"\n  local consonant41=\"\
    P\"\n  local consonant42=\"Q\"\n  local consonant43=\"R\"\n  local consonant44=\"\
    S\"\n  local consonant45=\"T\"\n  local consonant46=\"U\"\n  local consonant47=\"\
    V\"\n  local consonant48=\"W\"\n  local consonant49=\"X\"\n  local consonant50=\"\
    Y\"\n  local consonant51=\"Z\"\n  local consonant52", "  local str=\"$1\"\n  local\
    \ length=\"${#str}\"\n  local i\n  local vowel=\"aeiouAEIOU\"\n  local vowel_index\n\
    \n  for (( i=1; i<=length; i++ )); do\n    [[ \"$str\" == *\"$vowel\"* ]] && break\n\
    \  done\n  vowel_index=$(( i-1 ))\n  echo $vowel_index", "    local string=\"\
    ${1}\"\n    local vowels=\"a e i o u\"\n    local i=\"${#string}\"\n    local\
    \ j=\"${#vowels}\"\n    local result=\"\"\n\n    for ((i=0; i<j; i++)); do\n \
    \       local c=\"${string:i:1}\"\n        local v=\"${vowels:i:1}\"\n       \
    \ local count=\"${#c}\"\n\n        if ((count > 0)); then\n            if ((count\
    \ < $i)); then\n                if [[ $c != $v ]]; then\n                    if\
    \ [[ $v != \"\" ]]; then\n                        result=\"${v}\"\n          \
    \          fi\n                fi\n            fi\n        fi\n    done\n\n  \
    \  if (($i==0)); then\n        result=\"\"\n    fi\n\n    echo \"$result\"", " \
    \ local word=$1\n  local vowel=\"aeiouAEIOU\"\n  local consonant=\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n  local consonant_len=\"${#consonant}\"\n  local vowel_len=\"${#vowel}\"\n \
    \ local idx=0\n  local current_vowel=\"\"\n  local prev_char=\"\"\n  local i\n\
    \  for i in {1..${#word}}; do\n    idx=$((idx+1))\n    if [[ ${word:$i:1} = \"\
    $consonant\" ]]; then\n      current_vowel=${word:$(($i - 1))}\n      break\n\
    \    elif [[ ${word:$i:1} = \"$vowel\" ]]; then\n      current_vowel=${word:$(($i\
    \ - 1))}\n      break\n    fi\n  done\n  if [[ ${#current_vowel} -eq 0 ]]; then\n\
    \    return \"\"\n  fi\n  for i in {1..${#word}}; do\n    idx=$((idx+1))\n   \
    \ if [[ ${word:$idx:1} != \"$consonant\" ]]; then\n      current_vowel=${word:$(($i\
    \ - 1))}\n      break\n    elif [[ ${word:$idx:1} != \"$vowel\" ]]; then\n   \
    \   current_vowel=${word:$(($i - 1))}\n      break\n    fi\n  done\n  if [[ ${#current_vowel}\
    \ -gt ${#prev_char} ]]; then\n    return \"\"\n  fi\n  for i in {1..${#word}};\
    \ do\n    idx=$((idx+1))\n    if [[ ${word:$idx:1} != \"$consonant\" ]]; then\n\
    \      current_vowel=${word:$(($i - 1))}\n      break\n    elif [[ ${word:$idx:1}\
    \ != \"$vowel\" ]]; then\n      current_vowel=${word:$(($i - 1))}\n      break\n\
    \    fi\n  done\n  echo $current_vowel", "  local vowels=\"aeiou\"\n  local letter=\"\
    ${1:0:1}\"\n  local vowel=\"${1:1:1}\"\n\n  if [[ ${letter} =~ \\^${vowels} ]]\
    \ ; then\n    while [[ \"${1:0:-1}\" =~ ^\\^${vowels} ]]; do\n      local last_letter=\"\
    ${1:0:-1}\"\n      local distance=\"$(( ${letter} - ${last_letter} ))\"\n    \
    \  local vowel_found=\"${vowels:${distance}}\"\n      unset letter\n      unset\
    \ distance\n      unset vowel_found\n    done\n  fi\n  echo \"${vowel}\"", " \
    \ local word=\"${1}\"\n  local vowel_a=\"a\"\n  local vowel_e=\"e\"\n  local vowel_i=\"\
    i\"\n  local vowel_o=\"o\"\n  local vowel_u=\"u\"\n  local vowel_y=\"y\"\n  local\
    \ vowel_u=\"u\"\n  local vowel_r=\"r\"\n  local vowel_r=\"r\"\n  local vowel_a=\"\
    a\"\n  local vowel_a=\"a\"\n  local vowel_a=\"a\"\n  local vowel_a=\"a\"\n  local\
    \ vowel_a=\"a\"\n  local vowel_a=\"a\"\n  local vowel_a=\"a\"\n  local vowel_a=\"\
    a\"\n  local vowel_a=\"a\"\n  local vowel_a=\"a\"\n  local vowel_a=\"a\"\n  local\
    \ vowel_a=\"a\"\n  local vowel_a=\"a\"\n  local vowel_a=\"a\"\n  local vowel_a=\"\
    a\"\n  local vowel_a=\"a\"\n  local vowel_a=\"a\"\n  local vowel_a=\"a\"\n  local\
    \ vowel_a=\"a\"\n  local vowel_a=\"a\"\n  local vowel_a=\"a\"\n  local vowel_a=\"\
    a\"\n  local vowel_a=\"a\"\n  local vowel_a=\"a\"\n  local vowel_a=\"a\"\n  local\
    \ vowel_a=\"a\"\n  local vowel_a=\"a\"\n  local vowel_a=\"a\"\n  local vowel_a=\"\
    a\"\n  local vowel_a=\"a\"\n  local vowel_a=\"a\"\n  local vowel_a=\"a\"\n  local\
    \ vowel_a=\"a\"\n  local vowel_a=\"a\"\n  local vowel_a=\"a\"\n  local vowel_a=\"\
    a\"\n  local vowel_a=\"a\"\n  local vowel_a=\"a\"\n  local vowel_a=\"a\"\n  local\
    \ vowel_a=\"a\"\n  local vowel_a=\"a\"\n  local vowel_a=\"a\"\n  local vowel_a=\"\
    a\"\n  local vowel_a=\"a\"\n  local vowel_a=\"a\"\n  local vowel_a=\"a\"\n  local\
    \ vowel_a=\"a\"\n  local vowel_a=\"a\"\n  local vowel_a=\"a\"\n  local vowel_a=\"\
    a\"\n  local vowel_a=\"a\"\n  local vowel_a=\"a\"\n  local vowel_a=\"a\"\n  local\
    \ vowel_a=\"a\"\n  local vowel", "  local word_str=$1\n  local vowels=\"aeiouy\"\
    \n  local vowel_str=\"\"\n  local i=${#word_str}\n\n  for ((i=0; i<$((${#vowels}-1));\
    \ i++)); do\n    if [[ ${word_str:i:1} == \"$vowels\" ]]; then\n      vowel_str=\"\
    ${vowel_str}${word_str:i:1}\"\n      break\n    fi\n  done\n\n  if [[ ${vowel_str}\
    \ != \"\" ]]; then\n    vowel_str=\"${vowel_str%?}\"\n    echo \"$vowel_str\"\n\
    \  else\n    echo \"$word_str\"\n  fi", "    local word=$1\n    local consonant='bcdfghjklmnpqrstvwxyz'\n\
    \    local vowel='aeiouAEIOU'\n    local consonants=$consonant\n    local vowels=$vowel\n\
    \    local start='^'\n    local end='$'\n    local str='^'\n    local vowel=''\n\
    \    local count=0\n    local i=$#word\n    while [ $i -gt -1 ]\n    do\n    \
    \    local c=${word:$i:1}\n        count=`echo \"${word:$i:1}\" | grep -c \"$consonants\"\
    `\n        if [ $count -eq 0 ]\n        then\n            echo \"${word:$i}\"\n\
    \        fi\n        count=`echo \"${word:$i:1}\" | grep -c \"$vowels\"`\n   \
    \     if [ $count -eq 0 ]\n        then\n            echo \"${word:$i}\"\n   \
    \     fi\n        i=$(( $i - 1 ))\n        start=`echo \"${word:$i:1}\" | grep\
    \ -c \"$start\"`\n        end=`echo \"${word:$i:1}\" | grep -c \"$end\"`\n   \
    \     if [ $start -eq 0 ]\n        then\n            str=`echo \"${word:$i}\"\
    \ | sed -e 's/^'$word'//g' | sed -e 's/$/'$word'/g'`\n        else\n         \
    \   str=`echo \"${word:$i}\" | sed -e 's/'$word'/'$word'/g' | sed -e 's/^'$word'//g'\
    \ | sed -e 's/$/'$word'/g'`\n        fi\n        vowel=`echo \"$str\" | grep -o\
    \ '[aeiouAEIOU]'`\n        count=`echo \"$str\" | grep -c \"$vowel\"`\n      \
    \  if [ $count -eq 1 ]\n        then\n            echo \"${vowel}\"\n        \
    \    break\n        fi\n    done", "\tlocal vowels=\"aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ\"\
    \n\tlocal word=$1\n\tlocal vowel_counter=1\n\tlocal vowel_start=0 vowel_end=0\n\
    \n\tlocal flag=0\n\twhile [ \"$flag\" -eq 0 ]; do\n\t\tlocal char=${word:$vowel_start:1}\n\
    \t\tif [[ $vowels == \"$char\" ]]; then\n\t\t\tif [ $vowel_start -eq 0 ]; then\n\
    \t\t\t\tvowel_start=$vowel_counter\n\t\t\telse\n\t\t\t\tvowel_end=$vowel_counter\n\
    \t\t\tfi\n\t\tfi\n\t\tvowel_counter=$((vowel_counter+1))\n\t\tflag=$((vowel_counter>${#word}))\n\
    \tdone\n\tif [ \"$vowel_start\" -eq 0 ]; then\n\t\techo \"$vowel_end\"\n\t\treturn\n\
    \telse\n\t\tif [ \"$vowel_start\" -le \"$vowel_end\" ]; then\n\t\t\techo \"$vowel_start\"\
    \n\t\telse\n\t\t\techo \"$vowel_end\"\n\t\tfi\n\tfi", "  local string=\"$1\"\n\
    \  local vowels=\"a e i o u\"\n  local vowel_count=0\n  local vowel\n  local vowel_direction\n\
    \  local i\n  local j\n  local count\n  \n  for i in $string; do\n    count=0\n\
    \    for j in $vowels; do\n      [[ \"$i\" == \"$j\" ]] && let vowel_count+=1\n\
    \    done\n    [[ \"$count\" == 0 ]] || break\n  done\n  \n  if [[ \"$count\"\
    \ > 0 ]]; then\n    vowel_direction=\"right\"\n  else\n    vowel_direction=\"\
    left\"\n  fi\n  \n  for i in $string; do\n    for j in $vowels; do\n      [[ \"\
    $i\" == \"$j\" ]] && break\n    done\n    [[ \"$i\" == \"$j\" ]] && echo \"$j\"\
    \ && break\n  done", "  local word=$1\n\n  # split the given word into individual\
    \ characters\n  local chars=${word,,}\n  local vowels=\"aeiouAEIOU\"\n\n  # initialize\
    \ the result to empty\n  local result=\"\"\n\n  # loop through all the characters\n\
    \  for char in ${chars}\n  do\n    # loop through all the vowels\n    for vowel\
    \ in ${vowels}\n    do\n      # check if the vowel stands next to current character\n\
    \      if [[ ${char:$(( ${#char} - 1 ))} == ${vowel:1} ]]\n      then\n      \
    \  # check if character is between vowel start and end \n        if [[ $(( ${#char}\
    \ - 1 )) -le $(( ${#word} - 1 )) && $(( ${#char} )) -ge $(( ${#word} )) ]]\n \
    \       then\n          result=$vowel\n        fi\n      fi\n    done\n  done\n\
    \  # check if the result is empty\n  if [[ ${result} == \"\" ]]\n  then\n    return\
    \ \"\"\n  else\n    echo $result\n  fi", "    local string=$1\n    local vowels=($(echo\
    \ \"${string}\" | sed -e 's/[^aeiouAEIOU]//g'))\n    local vowels_ending=($(echo\
    \ \"${string}\" | sed -e 's/[^AEIOUaeiou]//g'))\n    local closest_vowel=${vowels[$((${#vowels[*]}-1))]}\n\
    \    local closest_vowel_ending=${vowels_ending[$((${#vowels_ending[*]}-1))]}\n\
    \    while [[ ${#closest_vowel} -lt 2 ]]; do\n        closest_vowel=${closest_vowel_ending}\n\
    \        closest_vowel_ending=${closest_vowel_ending}\n    done\n    echo ${closest_vowel}",
  "  local string=\"$1\"\n  local vowels=\"a e i o u\"\n  local result=\"\"\n  local\
    \ letter=\"${string:1}\"\n  for vowel in $vowels; do\n    local count=0\n    local\
    \ offset=0\n    local start=0\n    local end=0\n    local last_index=$(expr \"\
    $string\" : '.*\\(.*\\)\\(.*\\)\\(.*\\)$')\n    if [[ \"$string\" =~ $vowel ]];\
    \ then\n      offset=1\n      start=1\n      end=$(expr \"$string\" : '.*\\(.*\\\
    )\\(.*\\)(.*)$')\n      count=\"$3\"\n    else\n      start=$((last_index-1))\n\
    \      end=$((last_index))\n    fi\n    \n    if [[ \"$count\" -gt 0 ]]; then\n\
    \      if [[ \"$letter\" != \"$last_index\" ]]; then\n        letter=$last_index\n\
    \      else\n        letter=$((letter - 1))\n      fi\n      \n      if [[ \"\
    $letter\" -ge \"$start\" && \"$letter\" -le \"$end\" ]]; then\n        result=\"\
    $vowel\"\n        break\n      fi\n    fi\n  done\n  echo $result", "  local str=\"\
    $1\"\n  local vowels=\"aeiou\"\n  local vowel_count\n  local vowel_index\n  vowel_count=\"\
    $(echo \"${str}\" | grep -o '[aeiouyAEIOUY]' | wc -l )\"\n  if [ \"$vowel_count\"\
    \ -gt \"1\" ]\n  then\n    vowel_index=\"$(echo \"${str}\" | grep -o '[aeiouyAEIOUY]'\
    \ | sort -u | head -n 1)\"\n  else\n    vowel_index=\"$(echo \"${str}\" | grep\
    \ -o '[aeiouyAEIOUY]' | sort -u | tail -n 1)\"\n  fi\n  case \"$vowel_index\"\
    \ in\n    \"ae\")\n      echo \"a\"\n      ;;\n    \"e\")\n      echo \"e\"\n\
    \      ;;\n    \"i\")\n      echo \"i\"\n      ;;\n    \"o\")\n      echo \"o\"\
    \n      ;;\n    \"u\")\n      echo \"u\"\n      ;;\n    *)\n      echo \"$\"\n\
    \      ;;\n  esac", "    local vowels='aeiouyAEIOUY'\n    local str=\"$1\"\n \
    \   local count=1\n    local vowel\n    \n    while [ -n \"$str\" ]; do\n    \
    \    vowel=\"$str\"\n        ((count+=1))\n        echo \"$vowel\"\n        str=\"\
    $str${vowel:0:1}\"\n    done\n    \n    vowel=\"${vowels:$count:1}\"\n    echo\
    \ \"$vowel\"", "        local str=\"$1\"\n        local vowels=\"aieou\"\n   \
    \     local i=0\n        local prev=\"a\"\n        local cur=\n        local len=${#str}\n\
    \        local vowel\n\n        [[ -z $str ]] && return 0\n        \n        while\
    \ (( i < len )) ; do\n                if [[ \"${vowels[i]}\" = ${str[i]} ]] ;\
    \ then\n                        (( i++ ))\n                        prev=${str[i]}\n\
    \                        cur=\"${vowels[i]}\"\n                else\n        \
    \                break\n                fi\n        done\n        \n        if\
    \ [[ -z ${vowel} ]] ; then\n                return \"\"\n        fi\n        \n\
    \        len=${#prev}\n        (( len > 1 )) || len=1\n        \n        if [[\
    \ \"${vowels[len-1]}\" = \"${prev}\" ]] ; then\n                len=$(( $len -\
    \ 1 ))\n        fi\n        \n        for (( i=1; i <= len ; i++ )) ; do\n   \
    \             vowel=\"${vowels[$(( len - i ))]}\"\n                if [[ \"${vowel}\"\
    \ = \"${cur}\" ]] ; then\n                        return\n                fi\n\
    \        done\n        \n        return \"\"", "\tlocal vowels=\"aeiouy\"\n\t\
    local letter=${1:0:1}\n\tlocal test=${1:1:1}\n\n\techo $test | grep -iq \"[${vowels}]\"\
    \ || return \n\t\n\twhile [ \"$test\" != \"$letter\" ]; do\n\t\ttest=${test:0:1}\n\
    \tdone\n\n\techo $letter ", "    local vowels=\"a e i o u y\";\n    local word=\"\
    ${1}\";\n    local i letter;\n    local min_score=\"${1#${word}}\";\n    local\
    \ vowel_position;\n    for (( i=0; i<${#word}; i++ )); do\n        letter=\"${word:i:1}\"\
    ;\n        if [[ \"${vowels}\" == \"${letter}\" ]]; then\n            vowel_position=\"\
    ${i}\";\n            break;\n        fi\n    done\n    if [[ -z \"${vowel_position}\"\
    \ ]]; then\n        return \"\";\n    fi\n    word=\"${word:0:${vowel_position}}\"\
    \n    for (( i=0; i<${#word}; i++ )); do\n        letter=\"${word:i:1}\";\n  \
    \      if [[ \"${vowels}\" == \"${letter}\" ]]; then\n            score=${word:${vowel_position}:1}\n\
    \            if [[ \"${score}\" < \"${min_score}\" ]]; then\n                min_score=\"\
    ${score}\"\n                closest_vowel=\"${letter}\"\n            fi\n    \
    \    fi\n    done\n    echo \"${closest_vowel}\"", "    local str=\"$1\"\n   \
    \ local vowels=\"a e i o u\"\n    local i=0\n    local result=\"\"\n    local\
    \ count=0\n    for char in ${str//[[:upper:]]/}; do\n        if [[ \"${vowels}\"\
    \ == \"$char\" ]]; then\n            result+=\"${vowels[$i]}\"\n            i=$((i\
    \ + 1))\n            count=$((count + 1))\n        fi\n    done\n    if [[ ${count}\
    \ -ge 2 ]]; then\n        result+=\"${vowels[$i]}\"\n    fi\n    echo \"$result\"",
  "    local vowel=\n    local vowel_count=\n    local vowel_found=\n    local vowel_start=\n\
    \    local vowel_end=\n    local vowel_distance=\n    local vowel_str=\n    local\
    \ vowel_str_r=\n    local vowel_str_l=\n    local vowel_str_u=\n    local consonants=\n\
    \    local consonant=\n    local consonant_count=\n    local consonant_found=\n\
    \    local consonant_start=\n    local consonant_end=\n    local consonant_distance=\n\
    \    local consonant_str=\n    local consonant_str_r=\n    local consonant_str_l=\n\
    \    local consonant_str_u=\n\n    if [[ ${#} -gt 0 ]]; then\n        vowel=${1:0:1}\n\
    \        consonants=${1:1}\n        if [[ ${#} -gt 1 ]]; then\n            consonant=${2:0:1}\n\
    \        fi\n        vowel_count=$(expr ${#vowel} - 1)\n        consonant_count=1\n\
    \        vowel_found=0\n        consonant_found=0\n        vowel_start=$(expr\
    \ ${vowel} - 1)\n        consonant_start=$(expr ${consonant} - 1)\n        vowel_end=$(expr\
    \ ${vowel} + 1)\n        consonant_end=$(expr ${consonant} + 1)\n        if [[\
    \ ${vowel_end} -gt ${vowel_start} ]]; then\n            consonant_str=${consonant}\n\
    \        else\n            consonant_str=${consonants:0:1}\n        fi\n     \
    \   vowel_distance=$(expr ${consonant_end} - ${vowel_start})\n        consonant_distance=$(expr\
    \ ${vowel_end} - ${consonant_start})\n        if [[ ${consonant_distance} -eq\
    \ 0 ]]; then\n            if [[ ${vowel_distance} -eq 0 ]]; then\n           \
    \     echo \"\"\n            else\n                echo \"\"\n            fi\n\
    \        else\n            vowel_str=${vowel}\n            consonant_str=${consonant}\n\
    \            if [[ ${vowel_distance} -ge ${consonant_distance} ]]; then\n    \
    \            vowel_str=${vowel_str_r}\n            elif [[ ${vowel_distance} -lt\
    \ ${consonant_distance} ]]; then\n                vowel_str=${vowel_str_l}\n \
    \           else\n                vowel_str=${vowel_str_u}\n            fi\n \
    \           echo ${vowel_str}\n        fi\n", "  vowel=\n  while [ \"$1\" != \"\
    \" ]; do\n    \n    if [[ \"$1\" == [bc] ]]; then\n      echo \"$1\"\n      break\n\
    \    fi\n    if [[ \"$1\" == [aeiou] ]]; then\n      echo \"$1\"\n      break\n\
    \    fi\n    if [[ \"$1\" == [aeiouy] ]]; then\n      echo \"$1\"\n      break\n\
    \    fi\n    if [[ \"$1\" == [eoy] ]]; then\n      echo \"$1\"\n      break\n\
    \    fi\n    if [[ \"$1\" == [eoygur] ]]; then\n      echo \"$1\"\n      break\n\
    \    fi\n    if [[ \"$1\" == [gurt] ]]; then\n      echo \"$1\"\n      break\n\
    \    fi\n    if [[ \"$1\" == [gurt] ]]; then\n      echo \"$1\"\n      break\n\
    \    fi\n    if [[ \"$1\" == [vow] ]]; then\n      echo \"$1\"\n      break\n\
    \    fi\n    if [[ \"$1\" == [vow] ]]; then\n      echo \"$1\"\n      break\n\
    \    fi\n    if [[ \"$1\" == [vw] ]]; then\n      echo \"$1\"\n      break\n \
    \   fi\n    if [[ \"$1\" == [vw] ]]; then\n      echo \"$1\"\n      break\n  \
    \  fi\n    if [[ \"$1\" == [y] ]]; then\n      echo \"$1\"\n      break\n    fi\n\
    \    if [[ \"$1\" == [z] ]]; then\n      echo \"$1\"\n      break\n    fi\n  \
    \  if [[ \"$1\" == [y] ]]; then\n      echo \"$1\"\n      break\n    fi\n    if\
    \ [[ \"$1\" == [q] ]]; then\n      echo \"$1\"\n      break\n    fi\n    if [[\
    \ \"$1\" == [r] ]]; then\n      echo \"$1\"\n      break\n    fi\n    if [[ \"\
    $1\" == [q] ]]; then\n      echo \"$1\"\n      break\n    fi\n    if [[ \"$1\"\
    \ == [u] ]]; then\n      echo \"$1\"\n      break\n    fi\n    if [[ \"$1\" ==\
    \ [q] ]]; then\n      echo \"$1\"\n      break\n    fi\n    if [[ \"$1\" == [i]\
    \ ]]; then\n      echo \"$1\"\n      break\n    fi\n    if [[ \"$1\" == [i] ]];\
    \ then\n      echo \"$1\"\n      break\n    fi\n    if [[ \"$1\" == [j] ]]; then\n\
    \      echo \"$1\"\n      break\n    fi\n    if [[ \"$1\" == [q] ]]; then\n  \
    \    echo \"$1\"\n      break\n    fi\n    if [[ \"$1\" == [j] ]]; then\n    \
    \  echo \"$1\"\n      break\n    fi\n    if [[ \"$1\" == [k] ]]; then\n      echo\
    \ \"", "    local string=\"$1\"\n    if [ -z \"$string\" ]; then\n        return\
    \ 1\n    fi\n\n    local vowels=\"a e i o u y\"\n    local counter=\"${#vowels}\"\
    \n    while [ \"${counter}\" -ge 1 ]; do\n        local count=0\n        local\
    \ end=0\n        local curr=\"A\"\n        while [ \"$count\" -lt \"$counter\"\
    \ ]; do\n            curr=\"${vowels:$count:1}\"\n            count=$(( $count\
    \ + 1 ))\n        done\n        local start=0\n        local prev=\"A\"\n    \
    \    while [ \"$count\" -ge \"$start\" ]; do\n            prev=\"${vowels:$start:1}\"\
    \n            start=$(( $start + 1 ))\n        done\n\n        local test=\"${string:$end:1}\"\
    \n        if [ \"$prev\" == \"$curr\" ]; then\n            if [ \"$test\" == \"\
    $prev\" ]; then\n                echo \"$prev\"\n                return 0\n  \
    \          else\n                end=$(( $end + 1 ))\n            fi\n       \
    \ else\n            end=$(( $end + 1 ))\n        fi\n    done\n\n    return 1",
  "  local word=$1\n  local vowels=\"a e i o u y\"\n  local i=0\n  local j=1\n  local\
    \ dist=1\n  local vow_count\n  local vow\n\n  while [ ${#word} -gt 0 ]; do\n \
    \   vow_count=0\n    while [ ${vow} != ${word:$i:1} ]; do\n      vow=${word:$i:1}\n\
    \      vow_count=$((vow_count + 1))\n      i=$((i+1))\n    done\n\n    if [ ${vow_count}\
    \ -gt ${#vowels} ]; then\n      if [ ${#word} -eq 0 ]; then\n        dist=0\n\
    \        break\n      fi\n\n      if [ ${word:$i:1} != ${word:$((i+1)):1} ]; then\n\
    \        dist=$((dist-1))\n        i=$((i+1))\n        echo ${word:$((i+1)):1}\n\
    \        break\n      else\n        i=$((i+1))\n        echo ${word:$i:1}\n  \
    \    fi\n    else\n      dist=$((dist-1))\n      i=$((i+1))\n      echo ${word:$i:1}\n\
    \    fi\n  done\n\n  echo ${vow}", "    local string=\"$1\"\n    local word=\"\
    ${string%%$1}\"\n    local vowel=\"aeiouAEIOU\"\n    local vowel_found=\n    local\
    \ vowel_distance=0\n    local vowel_index\n    local vowel_length\n    local i\n\
    \    \n    for ((i=${#word}-1; i>=0; i--))\n    do\n        vowel_index=${word:$i:1}\n\
    \        if [[ ${vowel_index} == \"a\" || ${vowel_index} == \"e\" || ${vowel_index}\
    \ == \"i\" || ${vowel_index} == \"o\" || ${vowel_index} == \"u\" ]]; then\n  \
    \          vowel_found=1\n            break\n        fi\n    done\n    \n    if\
    \ [[ ${vowel_found} -eq 0 ]]; then\n        echo \"ERROR! No vowel found\"\n \
    \       return\n    fi\n    \n    for ((i=0; i<${#vowel}; i++)); do\n        vowel_length=${#vowel:$i:1}\n\
    \        \n        if [[ ${vowel_found} -eq 0 ]] && [[ ${vowel_distance} -lt ${vowel_length}\
    \ ]]; then\n            vowel_distance=${vowel_length}\n            vowel_index=${word:$((i-1)):1}\n\
    \        fi\n        \n        if [[ ${vowel_distance} -gt ${vowel_length} ]];\
    \ then\n            vowel_distance=${vowel_length}\n            vowel_index=${word:$((i-1)):1}\n\
    \        fi\n        \n    done\n    \n    echo \"${vowel_index}\"", "  local\
    \ vowels=\"aieou\"\n  local str=$1\n  local len=${#str}\n  local index\n  local\
    \ count\n  local vowel_index\n  local vowel_first\n  local vowel_last\n  local\
    \ vowel_middle\n  local vowel_start\n  local vowel_end\n  local vowel_length\n\
    \n  index=${#vowels}\n  count=0\n  while [ $count -lt $len ]; do\n    index=$((\
    \ index - 1 ))\n    vowel_first=${str:$index:1}\n    vowel_last=${str:$((index\
    \ + 1)):1}\n    vowel_middle=${str:$((index + 1)):$((index + 2))}\n    vowel_start=${str:$index:2}\n\
    \    vowel_end=${str:$((index + 2)):2}\n    vowel_length=${#vowel_middle}\n\n\
    \    if [[ \"$vowel_first\" == [aeiou] ]] && [[ \"$vowel_last\" == [aeiou] ]];\
    \ then\n      if [[ ${#vowels} -lt $(( index + 3 )) ]] && [[ ${#vowels} -gt $((\
    \ index - 3 )) ]]; then\n        if [[ ${vowel_length} -eq 3 ]]; then\n      \
    \    if [[ $(( index - 2 )) -lt $vowel_length ]]; then\n            echo ${vowels:$((\
    \ index - 3 )):$(( index + 3 ))}\n          fi\n        fi\n      fi\n    fi\n\
    \    (( count++ ))\n  done", "  local -i vowel_pos=0\n  local -i cons_pos=0\n\
    \  local -i left=0 right=0\n  local -i c=\"A\"\n  local -i vowels=\"AEIOUaeiou\"\
    \n  local -i ret=\"\"\n\n  while [ $cons_pos -lt $1 ]; do\n    (( cons_pos+=1\
    \ ))\n  done\n\n  while [ $vowel_pos -lt $#vowels ]; do\n    (( vowel_pos+=1 ))\n\
    \  done\n\n  while [ $cons_pos -gt $1 ]; do\n    (( cons_pos-=1 ))\n  done\n\n\
    \  while [ $vowel_pos -gt $#vowels ]; do\n    (( vowel_pos-=1 ))\n  done\n\n \
    \ local vowel_check=\"${vowels:$vowel_pos-1}\"\n  local cons_check=\"${c:$cons_pos}\"\
    \n  local left_check=\"${left:$(( cons_pos-1 ))}\"\n  local right_check=\"${right:$((\
    \ cons_pos+1 ))}\"\n\n  local prev_c=\"$cons_check\"\n  local prev_left_check=\"\
    $left_check\"\n  local prev_right_check=\"$right_check\"\n\n  while [ $prev_c\
    \ != \"$cons_check\" ] || [ $prev_left_check != \"$left_check\" ] || [ $prev_right_check\
    \ != \"$right_check\" ]; then\n    prev_c=\"$cons_check\"\n    prev_left_check=\"\
    $left_check\"\n    prev_right_check=\"$right_check\"\n    (( cons_check+=1 ))\n\
    \n    local c=\"${c:0:1}\"\n    local left_check=\"${left_check:0:1}\"\n    local\
    \ right_check=\"${right_check:0:1}\"\n\n    if [ $left_check == \"A\" ] || [ $left_check\
    \ == \"a\" ]; then\n      if [ $cons_check -lt $2 ]; then\n        left=$(( cons_pos+1\
    \ ))\n      else\n        left=$(( cons_pos ))\n      fi\n    fi\n\n    if [ $right_check\
    \ == \"A\" ] || [ $right_check == \"a\" ]; then\n      if [ $cons_check -gt $(($1\
    \ -1)) ]; then\n        right=$(( cons_pos+1 ))\n      else\n        right=$((\
    \ cons_pos ))\n      fi\n    fi\n  done\n\n  echo \"${vowels:$(( vowel_pos+1 )):1}\"",
  "  local word vowel vowel_begin vowel_end\n  word=\"$1\"\n  vowel=$(echo \"$word\"\
    \ | sed -r 's/[aeiouAEIOU]//g')\n  if [ \"$vowel\" == \"\" ]; then\n    return\
    \ \"\"\n  fi\n  vowel_begin=$(echo \"$word\" | sed -r 's/^[^aeiouAEIOU]//g')\n\
    \  vowel_end=$(echo \"$word\" | sed -r 's/[^aeiouAEIOU]$//g')\n  vowel_begin=\"\
    ${vowel_begin,}\"\n  vowel_end=\"${vowel_end,}\"\n  vowel=\"${vowel,}\"\n  echo\
    \ ${vowel_begin,}${vowel,}${vowel_end}", "    local vowel_met_flag=0\n    local\
    \ word=${1:-}\n\n    for i in {a..z}; do\n        if [[ \"$i\" = \"$word\" ]];\
    \ then\n            vowel_met_flag=1\n            break\n        fi\n    done\n\
    \    \n    for i in {A..Z}; do\n        if [[ \"$i\" = \"$word\" ]]; then\n  \
    \          vowel_met_flag=1\n            break\n        fi\n    done\n    \n \
    \   for i in {A..Z}; do\n        if [[ \"$i\" = \"$word\" ]]; then\n         \
    \   vowel_met_flag=1\n            break\n        fi\n    done\n\n    for k in\
    \ {A..Z..a..z}; do\n        if [[ \"$k\" = \"$word\" ]]; then\n            vowel_met_flag=1\n\
    \            break\n        fi\n    done\n    \n    for k in {a..z..A..Z}; do\n\
    \        if [[ \"$k\" = \"$word\" ]]; then\n            vowel_met_flag=1\n   \
    \         break\n        fi\n    done\n    \n    for k in {a..z..A..Z}; do\n \
    \       if [[ \"$k\" = \"$word\" ]]; then\n            vowel_met_flag=1\n    \
    \        break\n        fi\n    done\n    \n    for k in {A..Z..a..z..A..Z}; do\n\
    \        if [[ \"$k\" = \"$word\" ]]; then\n            vowel_met_flag=1\n   \
    \         break\n        fi\n    done\n    \n    if [[ \"$vowel_met_flag\" -eq\
    \ 0 ]]; then\n        echo \"\"\n    else\n        echo \"$(( $RANDOM % 26 + 97\
    \ ))\"\n    fi", "    local vowels=\"a e i o u\"\n    local string=\"$1\"\n  \
    \  local idx=\"$((${#string} - 1))\"\n    while [[ ${string:$idx:1} = \"a\" ]]\n\
    \    do\n        idx=$(( $idx-1 ))\n    done\n    while [[ ${string:$idx:1} =\
    \ \"e\" ]]\n    do\n        idx=$(( $idx-1 ))\n    done\n    while [[ ${string:$idx:1}\
    \ = \"i\" ]]\n    do\n        idx=$(( $idx-1 ))\n    done\n    while [[ ${string:$idx:1}\
    \ = \"o\" ]]\n    do\n        idx=$(( $idx-1 ))\n    done\n    while [[ ${string:$idx:1}\
    \ = \"u\" ]]\n    do\n        idx=$(( $idx-1 ))\n    done\n    echo $((${#string}\
    \ - $idx))"]
stop_tokens:
- "\n}"
