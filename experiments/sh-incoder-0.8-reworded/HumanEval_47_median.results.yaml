language: sh
name: HumanEval_47_median
results:
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n\tlocal elements=($(cut -d\\\"\
    \ -f1 <<<$1))\n\tlocal median=\"$( echo \"${elements[*]}\" | sort -n | tail -1\
    \ |\n\t\t\t      cut -d\\  -f2 )\"\n\techo \"$median\"\n}\n\ncandidate() {\n \
    \   median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n  \
    \  [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local l n\n  l=$1\n  n=${#l}\n\
    \  if ((n%2)); then\n    echo \"error: ${l} has uneven number of elements\" >&2\n\
    \    return 1\n  fi\n  echo \"${l[n/2]}\"\n}\n\ncandidate() {\n    median \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'error: 3 1 2 4 5 has uneven number of elements

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local i l c d\n    l=$1\n \
    \   # $1 is space-separated list\n    c=$( echo \"$l\" | sed 's/ /\\n/g' )\n \
    \   d=$( echo \"$l\" | wc -l )\n    echo ${c[((${#c[@]}-1)/2)]} | bc\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  a=$1\n  sort -n \"${a}\" | head\
    \ -1\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10\
    \ 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  # Parse inputs\n  local -a list=(\"\
    ${!1}\")\n  local n result\n  local x\n  local y\n  local i\n  # Get number of\
    \ elements\n  n=\"${#list[@]}\"\n  if [ -z \"$n\" ] ; then\n    echo \"Empty list,\
    \ cannot get median\"\n    return 1\n  fi\n  # Get the smallest and largest\n\
    \  x=\"${list[0]}\"\n  y=\"${list[-1]}\"\n  # Get middle\n  if [ \"${n}\" -gt\
    \ 2 ] ; then\n    (( n = ((n - 1) / 2)))\n  fi\n  # Initialize result\n  result=\"\
    \"\n  # Loop\n  for ((i=1; i<n; i++)) ; do\n    if [ \"${list[i]}\" -gt \"$x\"\
    \ ] || [ \"${list[i]}\" -lt \"$y\" ] || [ \"${list[i]}\" = \"$x\" ] || [ \"${list[i]}\"\
    \ = \"$y\" ] ; then\n      (( i++ ))\n      result=\"$result ${list[i]}\"\n  \
    \  else\n      (( i ))\n    fi\n  done\n  # Return median\n  echo \"${result%.*}\"\
    \n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp12b9h7cr.sh: line 11: 3 1 2 4 5: invalid variable name

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local numbers=( $1 )\n    local\
    \ total=$(echo \"${#numbers[@]}\"|bc)\n    local half=${total/2}\n    local median\n\
    \    local element\n    for (( i=0; i < ${#numbers[@]}; i++ )); do\n        if\
    \ [ $i -eq $half ]; then median=$(bc -l <<< \"${numbers[i]}\")\n        else median=$(bc\
    \ -l <<< \"${numbers[i - 1]}+${numbers[i]}\")\n        fi\n    done\n    echo\
    \ $median\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    set -- $1 $2\n    len=${#1}\n\
    \    sorted=$(echo \"${1}\" | sort -nr)\n    middle=$(echo \"${#sorted}\" | bc)\n\
    \    if [ \"$middle\" -eq \"$len\" ]; then\n        return\n    fi\n    if [ \"\
    $middle\" -gt \"$len\" ]; then\n        middle=$((middle - 1))\n    fi\n    echo\
    \ \"${sorted[$middle]}\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local -a array=( $1 )\n  local\
    \ total=${#array[@]}\n  local count\n  local median\n  local temp\n\n  if [ $total\
    \ -eq 0 ]; then\n    return 0\n  fi\n\n  count=0\n  median=`expr $array[0]`\n\
    \  for item in \"${array[@]:1}\"; do\n    temp=`expr $item - $median`\n    if\
    \ [ $count -lt $(( $total / 2 )) ]; then\n      if [ $temp -eq 0 ]; then\n   \
    \     median=`expr $median + 1`\n      else\n        median=$temp\n      fi\n\
    \      count=$(( $count + 1 ))\n    elif [ $count -lt $(( $total / 2 )) ]; then\n\
    \      if [ $temp -eq 0 ]; then\n        median=$item\n      else\n        median=`expr\
    \ $median + $temp`\n      fi\n      count=$(( $count + 1 ))\n    else\n      if\
    \ [ $temp -eq 0 ]; then\n        median=$item\n      else\n        median=`expr\
    \ $median + $temp / 2`\n      fi\n      count=$(( $count + 1 ))\n    fi\n  done\n\
    \  median=$median\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  IFS=\" \"\n  read -a list <<<\"\
    $1\"\n  echo -n \"${list[*]}\" | sort -n | tail -n 1 | awk '{print $2}'\n}\n\n\
    candidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local l=$( echo $1 | tr \"[ -]\"\
    \ \" \" )\n  local n=$( echo \"$l\" | wc -l )\n  local m=$( echo \"$l\" | sort\
    \ -nr | head -n 1 )\n  echo \"$m\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local items=( \"$@\" )\n  \
    \  local size=${#items[@]}\n    local mid\n    local i\n    local median\n   \
    \ for (( i = 0; i < size; i++ )); do\n        mid=${items[i]}\n        if (( $size\
    \ % 2 )); then\n            median=$(echo $mid \\* $mid | bc -l)\n        else\n\
    \            median=$(echo $mid \\* $mid)\n        fi\n    done\n    echo \"$median\"\
    \n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local l median\n    l=${1}\n\
    \    median=${l#* }\n    median=( $median / 2 )\n    echo \"${median}\"\n}\n\n\
    candidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local -n list=\\${1}\n  local\
    \ -n num=\\${#list}\n  [[ -z \"$list\" ]] || [[ \"$num\" -eq \"0\" ]] && return\
    \ 1 || return 0\n  local -n sum=0\n  local -n i=0\n  local -n median=0\n\n  while\
    \ (( i < num )); do\n    (( sum += ${list[$i]} ))\n    (( i++ ))\n  done\n  if\
    \ (( num % 2 == 0 )) && (( num > 0 )); then\n    (( median == 0 )); return 0\n\
    \  fi\n  (( median == 0 ));\n  local -n median1=$( expr \"$sum / 2\" )\n  while\
    \ (( i < num )); do\n    (( sum -= ${list[$i]} ))\n    (( i++ ))\n  done\n  ((\
    \ median == 0 ))\n  local -n median2=$( expr \"$sum / 2\" )\n  (( median > 0 ));\
    \ echo $median1\n  (( median > 0 )); echo $median2\n  (( median < 0 )); echo $median\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpiebsvv9n.sh: line 10: local: `${1}'': invalid variable name for
    name reference

    /tmp/tmpiebsvv9n.sh: line 11: local: `${#list}'': invalid variable name for name
    reference

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local list=\"$1\"\n    echo\
    \ \"$list\" | cut -d\" \" -f 2 | sort -nr | head -1 | awk '{print $1}'\n}\n\n\
    candidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local -n arr1=$1; shift;\n\
    \    local i max=$((${#arr1[@]}-1)); max=$((max-1));\n    for ((i=max;i>=1;i--));\
    \ do\n        [[ -z ${arr1[i]} ]] && { echo \"${arr1[max]}\"; break; };\n    done\n\
    \    echo \"${arr1[i]}\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0y5_exbn.sh: line 10: local: `3 1 2 4 5'': invalid variable name
    for name reference

    /tmp/tmp0y5_exbn.sh: line 15: arr1: bad array subscript

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local list=\"$1\" num=$(( ${#list}\
    \ / 2 )) sum=0\n  for i in `seq $num`\n  do\n    sum=$(( $sum + ${list} ))\n \
    \   list=\"`echo $list | cut -d \" \" -f $(( ${i} + 1 ))`\"\n  done\n  echo $(($sum\
    \ / $num))\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmpfbj8upla.sh: line 16: 0 / 0: division by 0 (error token is "0")

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local l=$1 s\n    local x\n\
    \    s=0\n    for x in $l; do\n        s+=${#x}\n    done\n    echo \"${s%??}\"\
    \n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local -n list=( \"$@\" )\n\
    \    local max=$(( ${#list[@]} - 1 ))\n    local -n nums=( )\n    for i in $(seq\
    \ 1 $max); do\n        nums+=($(( ${list[$i]} - 1 ))); \n    done\n    echo \"\
    ${nums[*]}\" | bc\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmp20cypmro.sh: line 10: local: list: reference variable cannot be
    an array

    /tmp/tmp20cypmro.sh: line 12: local: nums: reference variable cannot be an array

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 2
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local l=\"$1\"\n  local i med\n\
    \  i=$(( ${#l} / 2 ))\n  if [[ ${#l} % 2 == 0 ]]; then\n    med=$(echo \"${l[$i]}\"\
    \ | cut -d' ' -f1)\n  else\n    med=$(echo \"${l[$i]}\" | cut -d' ' -f1 \\\n \
    \   | awk '{if($1 > $2) print;else print;}'\n    )\n  fi\n  echo \"${med}\"\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmph741cqqh.sh: line 13: conditional binary operator expected

    /tmp/tmph741cqqh.sh: line 13: syntax error near `%''

    /tmp/tmph741cqqh.sh: line 13: `  if [[ ${#l} % 2 == 0 ]]; then''

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local l=$1 num=0 sum=$(echo \"\
    $l\" | sort -n -k 1 |\n    awk '{ sum+=$1; num++ } END { print sum / num }')\n\
    \  echo \"$sum\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 2
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local a n\n    read a n <<<\
    \ \"$1\"\n    ((a=n-1)%2==0) && (echo \"$(( n/2 + 1 ))\")\n    echo $(( n/2 +\
    \ 1 ))\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpw5se6ngw.sh: line 12: syntax error near unexpected token `%2==0''

    /tmp/tmpw5se6ngw.sh: line 12: `    ((a=n-1)%2==0) && (echo "$(( n/2 + 1 ))")''

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local numbers=$1\n  local median\
    \ sum\n\n  sum=$(echo \"$numbers\" | cut -d' ' -f 1 | sort)\n  median=$((${#sum}-1)/2)\n\
    \  [ -z \"$median\" ] && return 0\n\n  (( sum > median )) && return 0\n  (( sum\
    \ < median )) && return 0\n\n  echo \"$numbers\" | cut -d' ' -f $(($median+1))\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgwz9culs.sh: command substitution: line 14: syntax error near unexpected
    token `/2''

    /tmp/tmpgwz9culs.sh: command substitution: line 14: `(${#sum}-1)/2''

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  l=$(echo $1 | tr \"-\" \" \"\
    )\n  m=$(echo \"${l}\" | tr \" \" \"+\" | bc)/2\n  echo $(echo \"${l}\" | tr \"\
    \ \" \"${m}\") | cut -d'+' -f1\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local l=\"$1\"\n    local n=\"\
    $(wc -w <<< \"$l\")\"\n    [ \"$n\" -gt 1 ] && echo \"${l}\" || echo \"0\"\n \
    \   local m=\"$(echo \"$l\" | sort -nr | head -n 1)\"\n    echo \"$m\" | bc -l\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local IFS=' ' arr=($1)\n  \
    \  local n=\"${#arr[@]}\"\n    [ \"$n\" -lt 2 ] && return 1\n    echo \"${arr[n/2]}\"\
    \n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local i\n  local sum\n  local\
    \ numbers\n  IFS=$' ' read -ra numbers <<< \"$1\"\n  sum=$(for (( i=0; i < ${#numbers[@]};\
    \ i++ )); do echo \"${numbers[$i]}\"; done | bc)\n  echo $(( sum / ${#numbers[@]}\
    \ ))\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10\
    \ 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_oumshfo.sh: line 15: 3

    1

    2

    4

    5: syntax error in expression (error token is "1

    2

    4

    5")

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local list=\"$1\"\n    shift\n\
    \    echo \"$list\" | tr \" \" \"\\n\" | sort -n | tail -n 1\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 2
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  # $1 is a space-separated list\n\
    \  local L=($1);\n  local i;\n  local num;\n  local sum;\n  local mid;\n  local\
    \ median;\n\n  # If there are an odd number of items, return the middle one.\n\
    \  num=${#L[@]};\n  if (( num % 2 == 1 )); then\n    median=$L[((num-1)/2)];\n\
    \  else\n    median=$(printf \"%.0f\" $(( L[((num-1)/2)]+L[((num-1)/2+(num-1)%2)]\
    \ ))); # median is first number in list divided by 2 plus first number in list\
    \ divided by 2\n  fi;\n\n  return $median;\n}\n\ncandidate() {\n    median \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprkvjsitz.sh: line 21: syntax error near unexpected token `(''

    /tmp/tmprkvjsitz.sh: line 21: `    median=$L[((num-1)/2)];''

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n\tlocal L=$1\n\tlocal MED\n\tMED=`echo\
    \ $L | tr -cd \"$L\" | cut -d' ' -f 2`\n\techo $MED\n}\n\ncandidate() {\n    median\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local a=($(echo \"${1//[!-0-9.]/\
    \ }\"))\n    local n=$((${#a[@]}-1))\n    local k=$((n-1))\n    local m=$((k>0?${a[k-1]}:0))\n\
    \    for ((i=k; i<$((n-1)); i++)); do\n        m=$(expr \"$m+\" \"$(a[i])\")\n\
    \    done\n    echo \"$m\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n\tlocal l\n\tl=\"$1\"\n\t# Remove\
    \ leading and trailing whitespace and replace any whitespace with\n\t# a single\
    \ space.\n\tl=$(echo $l | sed -e 's/^[ ]*//;s/[ ]*$//;s/ /\\t/g')\n\t# If list\
    \ is empty, then return empty string\n\t[ $(echo ${l} | wc -c) -eq 0 ] && return\
    \ 0\n\techo $(sort -n -k 2 <<< \"${l}\" | awk 'BEGIN {\n\t    n = 1;\n\t    m\
    \ = 1;\n\t    s = 0;\n\t    while( m < n ) {\n\t        s += $m;\n\t        m++;\n\
    \t    }\n\t    return (s / n);\n\t}')\n}\n\ncandidate() {\n    median \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[\
    \ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\")\
    \ = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"\
    8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "awk: cmd. line:9: \t    return (s / n);\nawk: cmd. line:9: \t    ^ `return'\
    \ used outside function context\n"
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local l len\n  local sum=0\n\
    \  IFS=' ' read -ra l <<< \"$1\"\n  len=\"${#l[@]}\"\n  [ \"${len}\" -gt 1 ] &&\
    \ len=\"${len} or 1\"\n  \n  for x in \"${l[@]:${len}}\"; do\n    ((sum+=x))\n\
    \  done\n  echo \"${sum / len}\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpju6l28ft.sh: line 16: l[@]: 5 or 1: syntax error in expression
    (error token is "or 1")

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 2
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local l n med\n    l=\"${1}\"\
    \n    n=\"${#l}\"\n    med=0\n    if (( n != 0 )); then\n        for (( i = 0;\
    \ i < n; i++ )); do\n            (( med = (med + ${l::$i} )) )\n        done\n\
    \        med=$(( med/n ))\n    fi\n    printf -v _median \"%g\" $med\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpz7vvqu3l.sh: line 16: syntax error near unexpected token `(''

    /tmp/tmpz7vvqu3l.sh: line 16: `( med = (med + ${l::$i} )) ''

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local l\n    local n\n    local\
    \ p\n    local x\n\n    l=$1\n    n=$[${#l}-1]\n    p=${l[0]}\n    x=\n    for\
    \ i in $(seq 1 ${n}); do\n        [[ ${l[$i]} -gt $p ]] && p=${l[$i]}\n    done\n\
    \    echo \"${p}\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6sjovhuz.sh: line 20: [[: 3 1 2 4 5: syntax error in expression
    (error token is "1 2 4 5")

    /tmp/tmp6sjovhuz.sh: line 20: [[: 3 1 2 4 5: syntax error in expression (error
    token is "1 2 4 5")

    /tmp/tmp6sjovhuz.sh: line 20: [[: 3 1 2 4 5: syntax error in expression (error
    token is "1 2 4 5")

    /tmp/tmp6sjovhuz.sh: line 20: [[: 3 1 2 4 5: syntax error in expression (error
    token is "1 2 4 5")

    /tmp/tmp6sjovhuz.sh: line 20: [[: 3 1 2 4 5: syntax error in expression (error
    token is "1 2 4 5")

    /tmp/tmp6sjovhuz.sh: line 20: [[: 3 1 2 4 5: syntax error in expression (error
    token is "1 2 4 5")

    /tmp/tmp6sjovhuz.sh: line 20: [[: 3 1 2 4 5: syntax error in expression (error
    token is "1 2 4 5")

    /tmp/tmp6sjovhuz.sh: line 20: [[: 3 1 2 4 5: syntax error in expression (error
    token is "1 2 4 5")

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local IFS=$'\\n'\n    local\
    \ list=$(echo \"$1\" | tr '[:upper:]' '[:lower:]')\n    local list_length=${#list}\n\
    \    if [ $list_length -gt 2 ]; then\n        echo \"$(echo $list | cut -d\\ \
    \ -f1 | sort -nr | head -1 | awk '{print $1}')\"\n    else\n        echo \"$1\"\
    \n    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local l\n    l=$(echo \"${1}\"\
    \ | tr -d ' ')\n    echo \"${l}\" | sort -n | tail -n 1\n}\n\ncandidate() {\n\
    \    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n  \
    \  [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local a b\n  a=( $1 )\n  b=(\
    \ ${#a[@]} )\n  if [ ${b%2} -eq 0 ]; then\n    echo -n \"${a[${#a[@]} - 1]}\"\n\
    \  elif [ ${b%2} -gt 0 ]; then\n    echo \"${a[${b-1}/2]}\"\n  fi\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local l n m\n    for ((n=0;\
    \ n<${#1}; n++)) ; do\n        if [[ ${1:n} =~ ^-?[0-9]+$ ]]; then\n         \
    \   m=${1:n}\n        else\n            local a\n            a=$(echo \"${1:n}\"\
    \ | sed 's/ /, /g')\n            m=$(echo \"${a}\" | awk '{ sum += $1 } END {\
    \ print sum / NR}')\n        fi\n    done\n    echo \"$m\"\n}\n\ncandidate() {\n\
    \    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n  \
    \  [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 2
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local i median\n    for ((i=0;\
    \ i < ${#1}; i+=1)); do\n        # Find index of first non-negative digit.\n \
    \       # If there are no non-negative digits, index is one past the end.\n  \
    \      local j=${i}\n        while ((j > 0) && (${1:j:0:1} == \"-\" && ${1:j:1}\
    \ == 0)) j=`expr $j - 1`\n        if ((j > 0)); then\n            median=${1:j}\n\
    \            break\n        fi\n    done\n    echo \"$median\"\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp336c3t5z.sh: line 15: syntax error near unexpected token `j=`expr
    $j - 1`''

    /tmp/tmp336c3t5z.sh: line 15: `        while ((j > 0) && (${1:j:0:1} == "-" &&
    ${1:j:1} == 0)) j=`expr $j - 1`''

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 2
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    declare -i n=$(( ${#1} / 2\
    \ ))\n    declare -i max=${1:0:n}\n    local median\n    local i j k\n    for\
    \ ((i=0; i<n; i++)) ; do\n        local val=${1:$((i+1))}\n        for ((j=$((i+1);\
    \ j<n; j++)) ; do\n            if [[ $((val<${1:$j})) ]]; then\n             \
    \   val=${1:$j}\n                j=$((j+1))\n            fi\n        done\n  \
    \      ((j--))\n        median=$(( ${median} * n + val ))\n    done\n    median=$((\
    \ ${median} / n ))\n    echo $(( ${median} ))\n}\n\ncandidate() {\n    median\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpf96u6x2d.sh: line 16: syntax error near `;''

    /tmp/tmpf96u6x2d.sh: line 16: `        for ((j=$((i+1); j<n; j++)) ; do''

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local list_name=$1\n  # Check\
    \ that $list_name is an array and not a string\n  if [[ ${#list_name} -gt 1 ]];\
    \ then\n    # Parse the array into its elements\n    list_elements=( $list_name\
    \ )\n    # Sort $list_elements and return the middle element.\n    echo \"${list_elements[@]}\"\
    \ | sort -n | tail -1 | awk '{print $1}'\n  else\n    echo \"ERROR:  Cannot find\
    \ median of empty list\"\n  fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 2
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local IFS=' '\n    local LIST=$1\n\
    \    shift\n    local MEDIAN=''\n    local NUMBERS\n    local NUMBER\n    local\
    \ IFS_LIST\n    local IFS_NUMBER\n    while read -r LIST; do\n        IFS='' IFS_LIST=\\\
    $(IFS); IFS=' ' IFS_NUMBER=\\$(IFS); IFS=\\${IFS_LIST}\n        NUMBERS=($LIST)\n\
    \        MEDIAN+=\"(${NUMBERS[1]})\"\n        NUMBERS=( \"${NUMBERS[@]:2}\")\n\
    \        MEDIAN+=\"(${NUMBERS[1]})\"\n    done <<< \"$LIST\"\n    local INDEX\n\
    \    INDEX=\"${#MEDIAN}\"\n    for (( INDEX = 1; INDEX < $INDEX; INDEX++ )); do\n\
    \        if [ -z \"$(echo \"${MEDIAN}\" | grep -o \"\\($INDEX\\)\")\" ]; then\n\
    \            MEDIAN=$MEDIAN\n            break\n        fi\n    done\n    echo\
    \ \"$MEDIAN\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4fj0j4gc.sh: line 19: syntax error near unexpected token `(''

    /tmp/tmp4fj0j4gc.sh: line 19: `        IFS='''' IFS_LIST=\$(IFS); IFS='' '' IFS_NUMBER=\$(IFS);
    IFS=\${IFS_LIST}''

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local x\n    x=${1% *}\n  \
    \  echo $(echo $x | tr \" \" '\\n' | sort -nr | head -n 1)\n}\n\ncandidate() {\n\
    \    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n  \
    \  [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local list=\"$1\"\n    IFS=\"\
    \ \" read -a array <<<\"$list\"\n    local length=\"${#array[@]}\"\n    if [ \"\
    $length\" -lt 2 ]\n    then\n        return 0\n    fi\n    echo \"${array[((length-1)/2)]}\"\
    \n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local l m\n    l=\"$1\"\n \
    \   if [ \"${l:0:1}\" != \"-\" ]; then\n        echo \"${l}\" >&2\n        return\n\
    \    fi\n    m=\"${l}\"\n    while [ -n \"${l}\" ]; do\n        m=\"${l%,}\" &&\
    \ l=\"${l#*,}\" || break\n    done\n    echo \"${m}\"\n}\n\ncandidate() {\n  \
    \  median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n  \
    \  [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '3 1 2 4 5

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 2
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  IFS=' ' read -ra vals <<< \"\
    $1\"\n  local valslen=\"${#vals[@]}\"\n  if (( $valslen % 2 == 1 )); then\n  \
    \  echo \"${vals[$((${#vals[@]}/2))]}\"\n  else\n    local sorted=( $(sort -n\
    \ <<<\"${vals[@]}\")); local med=\"$2\"\n    local median\n    local low=\"$((${#sorted[@]}\
    \ - 1))\"; local high=\"$((${#sorted[@]}))\"\n    (( high = ( low + 1 ))) \n \
    \   (( low = 1 ))\n    local i; local j; local m; local n; local count\n    for\
    \ (( i = low; i <= high; i++ )); do\n      j=$(( i + 1 ))\n      if (( $j > high\
    \ )); then\n        j=$(( low + $(( ${#sorted[@]} - $(( $low + 1 ))) ))\n    \
    \  fi\n      (( m = ${sorted[i]} + ${sorted[j]} ))\n      (( n = $j - i ))\n \
    \     (( count = $j + 1 ))\n      if (( ${sorted[$i]} <= $med )); then\n     \
    \   (( med = ${sorted[$i]} ))\n      else\n        (( med = $med + (${sorted[$i]}\
    \ - $med) * ( ${sorted[$j]} - $med ) / ${count} ))\n      fi\n    done\n    echo\
    \ \"$med\"\n  fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpe6y6eflg.sh: line 24: unexpected EOF while looking for matching
    `)''

    /tmp/tmpe6y6eflg.sh: line 53: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local l=\"$1\"\n  local sorted=$(echo\
    \ $l | tr \" \" \"\\n\" | sort -nr)\n  local len=\"${#sorted[@]}\"\n  if [[ $len\
    \ -lt 2 ]]; then\n    echo \"${sorted[0]}\"\n  else\n    local mid\n    local\
    \ median\n    local i\n    local median_index\n    local mid_val\n    local median_val\n\
    \    median_index=0\n    for (( i = 0; i < ${len}; i++ )); do\n      mid_val=\"\
    ${sorted[$i]}\"\n      [[ \"$mid_val\" == \"$sorted[${((i+1)%${len})]}\" ]] &&\
    \ { median_index=$i; median_val=\"$mid_val\"; break; }\n    done\n    median=$(echo\
    \ \"${sorted[$(( median_index-1 ))]}\" | tr \" \" \"\\n\" | sort -nr)\n    median_val=\"\
    ${median}\"\n    # print \"median: ${median_val}\"\n    [[ \"$median_val\" ==\
    \ \"$sorted[${len/2-1}]\" ]] && {\n      # median is even\n      mid=$(echo \"\
    $median_val\" | tr \" \" \"\\n\" | sort -nr)\n      # print \"mid: ${mid}\"\n\
    \      mid_val=\"${mid}\"\n      [[ \"$mid_val\" == \"$sorted[${len/2-2}]\" ]]\
    \ && { median_index=$len; median_val=\"$mid_val\"; break; }\n      [[ \"$mid_val\"\
    \ == \"$sorted[${len/2-1}]\" ]] && { median_index=$len-1; median_val=\"$mid_val\"\
    ; break; }\n    }\n    echo \"${sorted[$(( median_index ))]}\"\n  fi\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local list=$1\n  local nums=$(echo\
    \ $list | tr \" \" \"\\n\")\n  local nums_length=$(expr ${#nums})\n  local median\n\
    \  local median_index\n  local median_value\n  local i\n  local sum\n  local num_sorted\n\
    \  sum=$(echo $nums | tr \" \" \"\\n\")\n  num_sorted=$(echo $sum | tr \" \" \"\
    \\n\"|sort|uniq -u|wc -l)\n  if [ $num_sorted -gt 1 ]; then\n    median=$(echo\
    \ \"${sum}\"|sed 's/[^ ]/ /g'| awk '{print $2}'| sort -n | tail -1)\n    median_index=$(echo\
    \ $sum | sed \"s/$median/ /\")\n    median_value=$(echo $sum | sed \"s/$median_index/\
    \ /\")\n  else\n    median=$(echo $sum|sed 's/[^ ]/ /g')\n  fi\n  echo $median\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sed: -e expression #1, char 0: no previous regular expression

    sed: -e expression #1, char 0: no previous regular expression

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 2
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local a=$1\n    local b\n \
    \   local m\n    local count\n    for b in \"${a[@]}\"; do\n        if [[ $b ==\
    \ [[:space:]]* ]]; then\n            m=$((m+b))\n            count=$((count+1))\n\
    \        elif [[ $b != [[:space:]]* ]]; then\n            m=$((m+b))\n       \
    \     count=$((count+1))\n        fi\n    done\n    m=$((m+0.5))\n    if [[ $count\
    \ % 2 == 0 ]]; then\n        echo \"$m\"\n    else\n        echo \"$((m-1))\"\n\
    \    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkusshjol.sh: line 24: conditional binary operator expected

    /tmp/tmpkusshjol.sh: line 24: syntax error near `%''

    /tmp/tmpkusshjol.sh: line 24: `    if [[ $count % 2 == 0 ]]; then''

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local IFS=\"$1\"; shift; local\
    \ arr=( \"${@}\" ); local i; let \"len=${#arr[@]}\"; let \"half=$len/2\"; local\
    \ median; for (( i=0; i < $len; i++ )); do let \"j=$((i+half))\"; [[ $j -gt $len\
    \ ]] && break; median=$((${arr[j]%})); done; echo \"$median\"\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local -n list=$1\n  local -n\
    \ length=${#list[@]}\n  local -n i\n  local median\n\n  if (( length % 2 == 0\
    \ )); then\n    median=`echo $list | awk 'BEGIN {\n      n=0\n      s=0\n    \
    \  for(i=1;i<=length/2;i++)\n      s+=$i\n      n=int(s)\n      s+=$(n+1)\n  \
    \    for(;;)\n      {\n        for(i=1;i<=length/2;i++)\n        {\n         \
    \ if(($i==n) || ($(i+1)==n))\n          {\n            continue;\n          }\n\
    \          else if($i==n+1)\n          {\n            median=`echo $i | awk 'BEGIN{print\
    \ int($i-n+0.5)}'`\n          }\n          else if($(i+1)==n+1)\n          {\n\
    \            median=`echo $i | awk 'BEGIN{print int($(i+1)-n+0.5)}'`\n       \
    \   }\n        }\n        if($median==0)\n        {\n          break;\n      \
    \  }\n      }\n      return median\n      }'`\n  else\n    median=`echo $list\
    \ | awk 'BEGIN {\n      n=0\n      s=0\n      for(i=1;i<=length/2;i++)\n     \
    \ s+=$i\n      n=int(s)\n      s+=$(n+1)\n      for(;;)\n      {\n        for(i=1;i<=length/2;i++)\n\
    \        {\n          if(($i==n) || ($(i+1)==n))\n          {\n            continue;\n\
    \          }\n          else if($i==n+1)\n          {\n            median=`echo\
    \ $i | awk 'BEGIN{print int($i-n+0.5)}'`\n          }\n          else if($(i+1)==n+1)\n\
    \          {\n            median=`echo $i | awk 'BEGIN{print int($(i+1)-n+0.5)}'`\n\
    \          }\n        }\n        if($median==0)\n        {\n          break;\n\
    \        }\n      }\n      return median\n      }'`\n  fi\n\n  echo $median\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphk168925.sh: line 10: local: `3 1 2 4 5'': invalid variable name
    for name reference

    /tmp/tmphk168925.sh: line 11: local: `0'': invalid variable name for name reference

    /tmp/tmphk168925.sh: command substitution: line 33: unexpected EOF while looking
    for matching `''''

    /tmp/tmphk168925.sh: command substitution: line 51: syntax error: unexpected end
    of file

    /tmp/tmphk168925.sh: command substitution: line 38: syntax error near unexpected
    token `}''

    /tmp/tmphk168925.sh: command substitution: line 38: `          }''

    /tmp/tmphk168925.sh: command substitution: line 47: syntax error near unexpected
    token `}''

    /tmp/tmphk168925.sh: command substitution: line 47: `          }''

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local l med\n    l=\"$1\" ;\
    \ shift\n    local -n a=($l)\n    local -i len=${#a[*]}\n    if [ $len == 0 ]\
    \ ; then echo \"$l\"; return 1; fi\n    med=${a[$((len/2-1))]}\n    for (( i =\
    \ $((len-1)/2); i >= 0; i-- )); do \n        med+=\"$(( ${a[$i]}+${a[$((i+1))]}\
    \ ))\"\n    done\n    echo $med\n}\n\ncandidate() {\n    median \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptlyx7yjg.sh: line 12: local: a: reference variable cannot be an
    array

    /tmp/tmptlyx7yjg.sh: command substitution: line 16: syntax error near unexpected
    token `/2''

    /tmp/tmptlyx7yjg.sh: command substitution: line 16: `(len-1)/2''

    /tmp/tmptlyx7yjg.sh: line 16: ((: i = : syntax error: operand expected (error
    token is "= ")

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local IFS=','\n    local i\n\
    \    local nums=()\n    for ((i = 0; i < \"${#1[@]}\"; ++i)); do\n        local\
    \ num=\"${1[i]}\"\n        local num=\"${num:-${nums}}\"\n        nums+=(\"${num}\"\
    )\n    done\n    local len=\"${#nums[@]}\"\n    ((len > 0) && (len % 2 == 0))\n\
    \    if [ \"${len}\" -eq \"0\" ]; then\n        echo \"${nums[0]}\"\n        return\n\
    \    fi\n    local mid\n    local max\n    local maxlen\n    maxlen=\"${len}\"\
    \n    for ((i = 0; i < \"${len}\"; ++i)); do\n        if ((i % 2 != 0)); then\n\
    \            local midx=$(expr ${i} / 2)\n            midx=${midx/2}\n       \
    \     if [[ \"${maxlen}\" -gt \"${midx}\" ]]; then\n                max=${nums[${midx}]}\n\
    \                maxlen=\"${midx}\"\n            fi\n        else\n          \
    \  if ((max < \"${nums[${i}]}\")); then\n                max=\"${nums[${i}]}\"\
    \n                maxlen=\"${i}\"\n            fi\n        fi\n    done\n    echo\
    \ \"${max}\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmp34dj8qf6.sh: line 13: ${#1[@]}: bad substitution

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 2
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  # First try to sort input\n \
    \ test \"${#1}\" = \"$#\" || return 1\n  local _sorted_list=($(sort -n ${1}))\n\
    \  # Now find the median\n  local _med=${_sorted_list[((${#_sorted_list[@]} -\
    \ 1) / 2)]}\"\n  if test -z \"$_med\" ; then\n    # return null if list is empty\n\
    \    return _med\n  fi\n  echo $_med\n}\n\ncandidate() {\n    median \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[\
    \ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\")\
    \ = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"\
    8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp94kysc_0.sh: line 32: unexpected EOF while looking for matching
    `"''

    /tmp/tmp94kysc_0.sh: line 36: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  awk -v RS=\"[ -]\" 'BEGIN{srand();print\
    \ int(NR/2+1)\"th \"int(NR%2+1)\"th \"int(NR/2+NR%2+1)\"th }\"'\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'awk: cmd. line:1: BEGIN{srand();print int(NR/2+1)"th "int(NR%2+1)"th "int(NR/2+NR%2+1)"th
    }"

    awk: cmd. line:1:                                                                           ^
    unexpected newline or end of string

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n\tlocal n=$((${#1}))\n\tlocal i\n\
    \tlocal median\n\n\tIFS=$'\\n' read -a lines <<< \"$1\"\n\n\tmedian=$(echo \"\
    ${lines[${#lines[@]} / 2 - 1]}\" | tr \" \" \"\\n\" | sort -n | tail -1 | awk\
    \ '{print $1}')\n\tfor i in $(seq 2 $((n - 2))); do\n\t\tmedian+=\"$(echo \"${lines[i]}\"\
    \ | tr \" \" \"\\n\" | sort -n | tail -1 | awk '{print $1}')\"\n\tdone\n\n\techo\
    \ \"$median\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  echo $1 | awk '{\n    s=0\n \
    \   for (i=1; i<=NF; i++) {\n      if ($i%2==0) {\n        s += $i\n      }\n\
    \    }\n    print s/2\n  }'\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local l=$1\n  local n=0\n  local\
    \ median\n  for e in $l; do\n    local e=$e\n    ((n++))\n    median=$(( $n/$n\
    \ + $e/$n ))\n  done\n  echo \"$median\"\n}\n\ncandidate() {\n    median \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  awk 'BEGIN{n=split($1,a,'/');\n\
    \     if(length(a)<2) return $1;\n     \n     for(i=1;i<=n;i++) a[i]+=a[i-1];}\n\
    \     END{for(i=1;i<=n;i++) a[i]=a[i]/n;\n     for(i=1;i<=n;i++) if(a[i]<a[i]+a[i-1])\
    \ a[i-1]=a[i-1];\n     return a[n-1];}' $1\n}\n\ncandidate() {\n    median \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'awk: cmd. line:1: BEGIN{n=split($1,a,/);

    awk: cmd. line:1:                     ^ unterminated regexp

    awk: cmd. line:2: BEGIN{n=split($1,a,/);

    awk: cmd. line:2:                       ^ unexpected newline or end of string

    awk: cmd. line:2:      if(length(a)<2) return $1;

    awk: cmd. line:2:                      ^ syntax error

    awk: cmd. line:4:      for(i=1;i<=n;i++) a[i]+=a[i-1];}

    awk: cmd. line:4:             ^ syntax error

    awk: cmd. line:4:      for(i=1;i<=n;i++) a[i]+=a[i-1];}

    awk: cmd. line:4:                  ^ syntax error

    awk: cmd. line:4:      for(i=1;i<=n;i++) a[i]+=a[i-1];}

    awk: cmd. line:4:                        ^ syntax error

    awk: cmd. line:4:      for(i=1;i<=n;i++) a[i]+=a[i-1];}

    awk: cmd. line:4:                                    ^ syntax error

    awk: cmd. line:5:      END{for(i=1;i<=n;i++) a[i]=a[i]/n;

    awk: cmd. line:5:                 ^ syntax error

    awk: cmd. line:5:      END{for(i=1;i<=n;i++) a[i]=a[i]/n;

    awk: cmd. line:5:                      ^ syntax error

    awk: cmd. line:5:      END{for(i=1;i<=n;i++) a[i]=a[i]/n;

    awk: cmd. line:5:                            ^ syntax error

    awk: cmd. line:5:      END{for(i=1;i<=n;i++) a[i]=a[i]/n;

    awk: cmd. line:5:                                       ^ syntax error

    awk: cmd. line:6:      for(i=1;i<=n;i++) if(a[i]<a[i]+a[i-1]) a[i-1]=a[i-1];

    awk: cmd. line:6:             ^ syntax error

    awk: cmd. line:6:      for(i=1;i<=n;i++) if(a[i]<a[i]+a[i-1]) a[i-1]=a[i-1];

    awk: cmd. line:6:                  ^ syntax error

    awk: cmd. line:6:      for(i=1;i<=n;i++) if(a[i]<a[i]+a[i-1]) a[i-1]=a[i-1];

    awk: cmd. line:6:                        ^ syntax error

    awk: cmd. line:6:      for(i=1;i<=n;i++) if(a[i]<a[i]+a[i-1]) a[i-1]=a[i-1];

    awk: cmd. line:6:                                                   ^ syntax error

    awk: cmd. line:6:      for(i=1;i<=n;i++) if(a[i]<a[i]+a[i-1]) a[i-1]=a[i-1];

    awk: cmd. line:6:                                                          ^ syntax
    error

    awk: cmd. line:7:      return a[n-1];}

    awk: cmd. line:7:                   ^ syntax error

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local l sum\n\n  l=\"$1\"\n \
    \ sum=$(echo \"$l\" | sed 's/ /+/g')\n  echo \"${l%%+*}\" | bc\n  echo \"$(( $(\
    \ echo \"$sum\" | bc ) / 2 ))\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local l=${1} ; shift\n    local\
    \ n=\"${#l}\"\n    if [ \"${n}\" -gt 0 ]; then\n        local median\n       \
    \ IFS=\" \" read -a l < <(echo ${l[@]})\n        local i\n        echo \"${l[n]}\"\
    \n        ((n--))\n        for((i=0;i<${n};i++)); do\n            local x\n  \
    \          if [[ ${l[i]} -eq ${l[n]} ]]; then\n                x=${l[i]}\n   \
    \         else\n                x=$(echo \"${l[i]} + ${l[n]} - 0.5\" | bc)\n \
    \           fi\n            l[i]=${x}\n        done\n        local x\n       \
    \ echo \"${l[0]}\"\n        IFS=\" \" read -a l < <(echo ${l[@]})\n        local\
    \ i\n        for((i=0;i<${n};i++)); do\n            if [[ ${l[i]} -eq ${l[n]}\
    \ ]]; then\n                x=${l[i]}\n            else\n                x=$(echo\
    \ \"${l[i]} + ${l[n]} - 0.5\" | bc)\n            fi\n        done\n        median=${x}\n\
    \    fi\n    echo \"${median}\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpczracnai.sh: line 32: [[: 2.5: syntax error: invalid arithmetic
    operator (error token is ".5")

    /tmp/tmpczracnai.sh: line 32: [[: .5: syntax error: operand expected (error token
    is ".5")

    /tmp/tmpczracnai.sh: line 32: [[: 1.5: syntax error: invalid arithmetic operator
    (error token is ".5")

    /tmp/tmpczracnai.sh: line 32: [[: 3.5: syntax error: invalid arithmetic operator
    (error token is ".5")

    /tmp/tmpczracnai.sh: line 32: [[: 4.5: syntax error: invalid arithmetic operator
    (error token is ".5")

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n\tawk -v n=$(NF) 'BEGIN {nx=n;\
    \ mx=m; for (i=1;i<=n;i++) m=m+$i; print m}'\n}\n\ncandidate() {\n    median \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpitthjtyi.sh: line 10: NF: command not found

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local l=($1)\n  local count=0\n\
    \  local median\n  local sorted\n  IFS=' ' read -ra sorted <<< \"${l[*]}\"\n \
    \ median=${sorted[((${#sorted[@]} - 1)/2)]}\n  ((count=count+1))\n  if (( count\
    \ % 2 == 0 )); then\n    echo \"$median\"\n  else\n    (( count-- ))\n    echo\
    \ \"$median\"\n  fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n\tlocal a b\n\ta=\"${1// / }\"\
    \ b=\"${a// / }\" # Remove spaces before and after\n\techo \"${b//[^ ]/}\" | sort\
    \ -n | tail -n 1\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: -1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local l=\"$1\"\n  local n=\"\
    ${#l}\"\n  local i value\n  local count=0\n\n  for ((i=0; i<n; i++)); do\n   \
    \ value=$(cut -d ' ' -f $((i+1)) | sort -n)\n    if [[ \"$value\" = *\"-\"* ]];\
    \ then\n      if [[ \"$value\" = *\"$value\"* ]]; then\n        value=$(echo \"\
    $value\" | sed -e 's/^-\\(.*\\)$/\\1/')\n      else\n        value=$(echo \"$value\"\
    \ | sed -e 's/^-\\(.*\\)$/-\\1/')\n      fi\n    fi\n    if [[ \"$value\" = *\"\
    *\"* ]]; then\n      value=$(echo \"$value\" | sed -e 's/^\\(.*\\)-\\(.*\\)$/\\\
    1 \\2/')\n    fi\n    if [[ \"$value\" = *\"$value\"* ]]; then\n      value=$(echo\
    \ \"$value\" | sed -e 's/^\\(.*\\) *\\-\\(.*\\)$/\\1 \\2/')\n    fi\n    if [[\
    \ \"$value\" = *\"$value\"* ]]; then\n      value=$(echo \"$value\" | sed -e 's/^\\\
    (.*\\)$/\\1/')\n    fi\n    if [[ $value != $((n+1)) ]]; then\n      count=$((count+1))\n\
    \    fi\n  done\n\n  echo \"$((n/2))\"\n}\n\ncandidate() {\n    median \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[\
    \ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\")\
    \ = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"\
    8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=25 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=19 encoding='utf-8'>
  timestamp: 1660058891
- exit_code: 2
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local l=$1\n    local num\n\
    \    local median\n    local i\n    num=$(echo $l | sed 's/ /\\n/g' | sort -n\
    \ | uniq | wc -l)\n    median=$(($num % 2)+2)\n    median=$(($median > 0 ? $median\
    \ : 0))\n    for (( i = 1; i <= num; i++ )); do\n        if (( $(echo $l | sed\
    \ -n \"$i p\" | wc -l) > 0 )); then\n            local j=$(($i % 2))\n       \
    \     local m=$(($j+1))\n            local ltmp\n            ltmp=$(echo $l |\
    \ sed -n \"$i p\")\n            local numltmp\n            numltmp=$(echo $ltmp\
    \ | sed 's/ /\\n/g' | sort -n | uniq | wc -l)\n            local numltmp2\n  \
    \          numltmp2=$(echo $ltmp | sed 's/ /\\n/g' | sort -n | uniq | wc -l)\n\
    \            local mnumltmp\n            mnumltmp=$(echo $m | sed 's/ /\\n/g'\
    \ | sort -n | uniq | wc -l)\n            local mnumltmp2\n            mnumltmp2=$(echo\
    \ $m | sed 's/ /\\n/g' | sort -n | uniq | wc -l)\n            if (( $numltmp ==\
    \ 0 )) && (( $numltmp2 == 0 )) && (( $mnumltmp == 0 )) && (( $mnumltmp2 == 0 ));\
    \ then\n                median=$m\n                break\n            fi\n   \
    \         if (( $numltmp > $numltmp2 )) && (( $mnumltmp > $mnumltmp2 )); then\n\
    \                median=$m\n                break\n            fi\n          \
    \  if (( $numltmp < $numltmp2 )) && (( $mnumltmp < $mnumltmp2 )); then\n     \
    \           median=$m\n                break\n            fi\n            if ((\
    \ $numltmp == $numltmp2 )) && (( $mnumltmp == $mnumltmp2 )); then\n          \
    \      if (( $numltmp == 0 )) && (( $mnumltmp == 0 )); then\n                \
    \    median=$m\n                    break\n                fi\n              \
    \  if (( $numltmp > $numltmp2 )); then\n                    median=$m\n      \
    \              break\n                fi\n                if (( $numltmp < $numltmp2\
    \ )); then\n                    median=$m\n                    break\n       \
    \         fi\n\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb4giv4q3.sh: line 57: syntax error near unexpected token `}''

    /tmp/tmpb4giv4q3.sh: line 57: `}''

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local l\n  local sum\n  local\
    \ count\n\n  l=\"$1\"\n  sum=$(cat <<<\"$l\" | cut -d' ' -f1)\n  count=$(cat <<<\"\
    $l\" | cut -d' ' -f1 | wc -l)\n  if [ $count -gt 2 ]; then\n    echo \"${sum}\
    \ + ${sum} / 2\"\n  elif [ $count -eq 2 ]; then\n    echo \"${sum}\"\n  else\n\
    \    echo $sum / 2\n  fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n\tlocal l=( \"$1\" )\n\t# Sort\
    \ list numerically if numeric elements in list\n\tlocal sorted=( $(sort --numeric\
    \ <<<\"${l[@]}\") )\n\tlocal num=$(echo \"${#sorted[@]}\" | bc)\n\tif [ $num -lt\
    \ 2 ]; then\n\t\techo 0\n\telse\n\t\techo \"${sorted[(($num-1)/2)]:0:(1+$(($num-1)/2))}\"\
    \n\tfi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb1fwqc37.sh: command substitution: line 17: syntax error near unexpected
    token `/2''

    /tmp/tmpb1fwqc37.sh: command substitution: line 17: `($num-1)/2''

    /tmp/tmpb1fwqc37.sh: line 17: sorted[(($num-1)/2)]: (1+): syntax error: operand
    expected (error token is ")")

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  sort -n <<<\"$1\" | awk '{print\
    \ $NF}'\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  echo \"$1\" | cut -d' ' -f2 |\
    \ sort -n | tail -n 1 | awk '{print $1}'\n}\n\ncandidate() {\n    median \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local a=($( echo $1 ));\n  local\
    \ len=${#a[@]};\n  if (( len % 2 )); then\n    echo \"Not even: ${len}\"\n   \
    \ return 1;\n  fi\n  local median=\"$(( (${a[@]:0:((len-1)/2)+1}) + (${a[@]:((len-1)/2+1):len})/2\
    \ ))\";\n  echo \"${a[@]:0:((len-1)/2)+1} | ${a[@]:((len-1)/2+1):len} | ${median}\"\
    \n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local l i\n    l=$1\n    local\
    \ m\n    m=0\n    for i in $l; do\n        [ \"$i\" -gt \"$m\" ] && (( m=$i ))\n\
    \    done\n    echo \"$m\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local l\n  l=$(echo \"${1//[0-9.-]/\
    \ }\" | tr ' ' '\\n')\n  local n=$((${#l} * 5 / 2))\n  printf \"%d\\n\" $(sort\
    \ -n <<< \"${l}\" | head -n \"${n}\" | tail -n 1)\n}\n\ncandidate() {\n    median\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local l n sum\n    l=$( echo\
    \ $1 | sed \"s/ /\\n/g\" )\n    n=${#l}\n    # Calculate average\n    sum=0\n\
    \    for (( i=1; i<n; i++ )); do\n        sum=$(( sum + ${l[$i]} ))\n    done\n\
    \    average=$(( sum / n ))\n    # Calculate median\n    if [ \"$n\" -gt \"1\"\
    \ ]; then\n        median=$(( ${l[n/2]} + $average / 2 ))\n    elif [ \"$n\" -eq\
    \ \"1\" ]; then\n        median=${l[0]}\n    fi\n    # Return median\n    printf\
    \ \"%f\" $median\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdp65k7cf.sh: line 16: sum +  : syntax error: operand expected (error
    token is "+  ")

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local a b\n    IFS=$' \\t\\\
    n' read -ra x <<<\"$1\"\n    a=( \"${x[@]}\" )\n    length=${#a[@]}\n    if [\
    \ \"${length}\" -gt 1 ]; then\n        for ((i=0; i < length; i++)); do\n    \
    \        if [ \"${i}\" -lt \"${length}\" ]; then\n                b[${i}]=${a[${i}]}\n\
    \            else\n                b[${i}]=${a[${i}]}\n            fi\n      \
    \  done\n        local j=0\n        local output=$(IFS=+; echo \"${b[*]}\")\n\
    \        for ((j=1; j<length; j++)); do\n            if [ \"${j}\" != \"${length}\"\
    \ ]; then\n                output=\"${output} + ${b[j]}\"\n            else\n\
    \                output=\"${output} + ${b[j]}\"\n            fi\n        done\n\
    \        output=$(echo \"${output}\" | bc -l)\n        output=$(echo \"scale=3;\
    \ ${output}\" | bc -l)\n        echo \"${output}\"\n    else\n        echo \"\
    ${x[1]}\"\n    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local items=$@\n  declare -i\
    \ count=0\n  local median=\"\"\n  while read -r item; do\n    ((count++))\n  \
    \  [[ ${item} -gt 0 ]] && [[ ${count} -gt 0 ]] \\\n      && median+=\" $item\"\
    \n  done <<< \"$items\"\n  echo \"${median/ / }\"\n}\n\ncandidate() {\n    median\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0xj_nxbx.sh: line 15: [[: 3 1 2 4 5: syntax error in expression
    (error token is "1 2 4 5")

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local IFS=\"$1\"\n    local\
    \ i\n    local num\n    local median\n    local size\n    IFS=' ' read -a nums\
    \ <<< \"$1\"\n    size=\"${#nums[@]}\"\n    for ((i=0; i<(size-1); i++))\n   \
    \ do\n        num=\"${nums[$i]}\"\n        (( ${nums[$i]} > num )) && num=\"${nums[$i]}\"\
    \n        (( ${nums[$i]} > num )) && num=\"${nums[$i]}\"\n    done\n    median=\"\
    ${nums[$(( ${#nums[@]} - 1 ))]}\"\n    echo $median\n}\n\ncandidate() {\n    median\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: -1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local list=( \"$@\" )\n  local\
    \ len=${#list[@]}\n  (( len > 0 )) || return 1\n  local count=1\n  local max=\"\
    \"\n  local min=\"\"\n  local avg=\"\"\n\n  local i=0\n  local count=0\n\n  while\
    \ (( i < len )) ; do\n    (( count++ )) || continue # Skip empty lines\n    ((\
    \ i % 2 )) || continue # skip even lines\n    [[ ${list[$i]} -gt ${max} ]] &&\
    \ max=${list[$i]}\n    [[ ${list[$i]} -gt ${min} ]] && min=${list[$i]}\n    ((\
    \ i++ )) || continue # Skip line numbers\n  done\n\n  local median=$(($max+$min)/2)\n\
    \  (( count == 0 )) && return 1 || return $median\n}\n\ncandidate() {\n    median\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=36 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=34 encoding='utf-8'>
  timestamp: 1660058891
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local -n l=$1\n\n  if [[ ${#l}\
    \ -eq 0 ]]; then\n    echo \"0\"\n  else\n    echo \"${l[@]}\"|sort -n|tail -n1|head\
    \ -n1\n  fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmp16ea_i18.sh: line 10: local: `3 1 2 4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  sort -n \"$1\" | tail -n +2 |\
    \ head -n -1\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local a x\n    a=${1//[^0-9]}\n\
    \    echo $(( (${#a}+0)/2 ))\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local sorted=\"$1\"\n    local\
    \ sorted1=${sorted//[\\ \\t]/}\n    local sorted2=${sorted1//[^0-9]/}\n    local\
    \ length=\"${#sorted2}\"\n    [ \"$length\" -gt 1 ] && return 1  # Not a proper\
    \ list\n    local mid1=$((${sorted2}.length / 2))\n    local mid2=$((${sorted2}.length\
    \ - 1))\n    echo \"${sorted2}[$mid1]\"\n    echo \"${sorted2}[$mid2]\"\n    echo\
    \ \"${sorted2}[$mid1]\" >> tmp\n    sort -t \" \" -k 2 tmp | tail -1\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local list=\"$1\" count=1\n\
    \    local median=\"\"\n\n    for element in $list; do\n        [ -z \"$median\"\
    \ ] && median=\"$element\"\n        if [ $count -gt 3 ]; then\n            echo\
    \ \"$median\"\n            median=\"\"\n        fi\n        count=$(( $count +\
    \ 1 ))\n    done\n\n    [ -z \"$median\" ] && echo \"$list\" | sort -n | head\
    \ -1 | cut -d\" \" -f 2\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local l\n    local -n med=${1-}\n\
    \    local -n len=${#med}\n\n    local i\n\n    IFS=' ' read -ra l  <<< \"$med\"\
    \n    # sort -n <<< \"$med\" # numerically stable\n    for i in \"${l[@]}\"; do\n\
    \        [ -z \"$i\" ] && continue\n        [ -z \"$med\" ] || [ \"$i\" -gt \"\
    $med\" ] && break\n        med=$(expr $i + $med)\n    done\n\n    IFS=' ' read\
    \ -ra l  <<< \"$med\"\n    [ \"${#l[@]}\" -gt \"$len\" ] && return ${l[$len]}\n\
    \    local s\n    [ \"$med\" -lt \"$l[0]\" ] && s=\"$l[0]\"\n    [ \"$med\" -gt\
    \ \"$l[${len-1}]\" ] && s=\"${l[len-1]}\"\n    echo -n \"$s\"\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpgpmnu39t.sh: line 11: local: `3 1 2 4 5'': invalid variable name
    for name reference

    /tmp/tmpgpmnu39t.sh: line 12: local: `0'': invalid variable name for name reference

    /tmp/tmpgpmnu39t.sh: line 25: [: : integer expression expected

    /tmp/tmpgpmnu39t.sh: line 27: [: : integer expression expected

    /tmp/tmpgpmnu39t.sh: line 28: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local list list2 medium median\n\
    \n  # Turn the list into a list of numbers with negative values\n  # in front\
    \ to make the median work\n  list=( $(echo \"$1\" | sed 's/-/ /') )\n\n  # If\
    \ the list is empty, there's nothing to do\n  if [ -z \"${list[*]}\" ]; then\n\
    \    echo \"\"\n    return\n  fi\n\n  # Sort the list to get median\n  list2=(\
    \ ${list[*]} )\n  sort <<< \"${list2[@]}\" | tail -n 1 | head -n 1\n\n  # If the\
    \ list is just one element, return the element\n  # without the median\n  if [\
    \ ${#list2} -eq 1 ]; then\n    echo ${list2[0]}\n    return\n  fi\n\n  # Calculate\
    \ median with recursive calls\n  # The median is the average of the middle two\
    \ elements\n  # (or the average of the whole list if the list has only one element)\n\
    \  # Divide by two if there are an even number of elements\n  median=\"$(median\
    \ \"${list2[@]:0:(${#list2}-1)/2}\" \"${list2[@]:(${#list2}-1)/2}\")\"\n\n  #\
    \ Return the median\n  echo \"${median}\"\n}\n\ncandidate() {\n    median \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local list=$1\n  shift\n  local\
    \ count=0\n  local max=0\n  local median\n  list=\"$(echo \"${list}\" | tr \"\
    \ \" \"\\n\")\"\n  local i\n  for i in $list; do\n    count=$((count + 1))\n \
    \ done\n  if ((count % 2)); then\n    max=$((count / 2))\n  else\n    max=$((count\
    \ / 2)) - 1\n  fi\n  median=$(echo \"${list[$((max - 1))]}\" | tr -d '[[:space:]]')\n\
    \  ((median += ${list[$((max - 1))]} - ${list[$((max - 2))]}))\n  ((median /=\
    \ 2))\n  echo \"${median}\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpoz97iiyn.sh: line 26: ((: median +=  - 3

    1

    2

    4

    5: syntax error in expression (error token is "1

    2

    4

    5")

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n\tlocal l w\n\tl=$1\n\tw=$(echo\
    \ \"scale=4; ${l} | sort -n | uniq | awk '{s+=$1} END {print s/NR}'\")\n\techo\
    \ $w\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10\
    \ 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local l sum=0 count=0\n  for\
    \ l in $(cat \"$1\"|cut -d ' ' -f 2); do\n    sum=$((sum + $l))\n    count=$((count\
    \ + 1))\n  done\n  if [ $count -eq 0 ]; then\n    echo 0\n  else\n    echo $(echo\
    \ \"scale=1;$sum / $count\" | bc)\n  fi\n}\n\ncandidate() {\n    median \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpurblwr4j.sh: line 12: sum + "": syntax error: operand expected
    (error token is """")

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  if [[ $1 == \"\" ]]; then\n \
    \   echo \"Error: missing list argument\"\n    exit\n  fi\n\n  # Count number\
    \ of elements in the list\n  c=0\n  for el in $1; do\n    ((c++))\n  done\n\n\
    \  # Return median if c is even\n  ((c%2==0)) && echo \"${1/$c/}\" && return 0\n\
    \n  # Use for median of median algorithm\n  # https://en.wikipedia.org/wiki/Median\n\
    \  local i1=0\n  local i2=0\n  local i3=0\n  local i4=0\n  local i5=0\n  local\
    \ i6=0\n  local i7=0\n  local i8=0\n  local i9=0\n  local i10=0\n\n  for i in\
    \ `seq $c`; do\n    ((i1+=1))\n    ((i2+=1))\n    ((i3+=1))\n    ((i4+=1))\n \
    \   ((i5+=1))\n    ((i6+=1))\n    ((i7+=1))\n    ((i8+=1))\n    ((i9+=1))\n  \
    \  ((i10+=1))\n  done\n  echo $((i1 / $c))\n  echo $((i2 / $c))\n  echo $((i3\
    \ / $c))\n  echo $((i4 / $c))\n  echo $((i5 / $c))\n  echo $((i6 / $c))\n  echo\
    \ $((i7 / $c))\n  echo $((i8 / $c))\n  echo $((i9 / $c))\n  echo $((i10 / $c))\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local i\n    local sum\n  \
    \  local median\n\n    sum=$(echo \"${1}\" | tr '\\n' ' ' | xargs)\n    median=$(echo\
    \ \"$sum / 2\" | bc)\n    echo \"$median\"\n}\n\ncandidate() {\n    median \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local IFS=$' \\t\\n'\n    local\
    \ nums=$1 \n    local tmp \n    local i median count\n    IFS=' '\n    median=0\n\
    \    count=0\n    for i in $nums; do\n        ((count++))\n        if ((count\
    \ > 1)); then\n            (( count-- ))\n            continue\n        fi\n \
    \       ((tmp=$i))\n        if ((tmp > median)); then\n            median=tmp\n\
    \        fi\n    done\n    echo $median\n}\n\ncandidate() {\n    median \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local l_arg=($1)\n    local\
    \ l_len=${#l_arg[@]}\n    local l_median\n    local l_temp\n    if [ \"${l_len}\"\
    \ -lt 2 ]; then\n        return 0\n    fi\n    l_median=$(echo \"${l_arg[((${#l_arg[@]}\
    \ - 1)/2)]}\" | bc -l | awk '{print $1}')\n    for ((i=${#l_arg[@]}; i>1; i--));\
    \ do\n        l_temp=$(echo \"${l_arg[(($i - 1)/2)]}\" | bc -l | awk '{print $1}')\n\
    \        if [[ ${l_median} == ${l_temp} ]]; then\n            l_median=$((${l_median}\
    \ + ${l_temp}))\n        else\n            l_median=$l_median\n            break\n\
    \        fi\n    done\n    echo $l_median\n}\n\ncandidate() {\n    median \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  sort -n <<< \"$1\" | tail -1\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  echo \"$1\" | awk '{ n=split($1,a,\"\
    \ \"); print a[(n-1)/2]; }'\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local L=\"$1\"\n  local LENGTH=\"\
    ${#L}\"\n  if [ \"${LENGTH}\" -eq 1 ]; then\n    echo \"$L\"\n  else\n    local\
    \ HIGH=\"$(( LENGTH / 2 ))\"\n    local LOW=\"${LENGTH - HIGH}\"\n    local MID=\"\
    $(( ((LENGTH - 1) / 2) + 1 ))\"\n    echo \"${L[$((MID - 1))]}\" \"${L[$MID]}\"\
    \ \"${L[$((HIGH - 1))]}\" \"${L[$LOW]}\"\n  fi\n}\n\ncandidate() {\n    median\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpdl_6kff6.sh: line 16: ${LENGTH - HIGH}: bad substitution

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  echo $1 | sort | uniq -c | sort\
    \ -n | tail -n 1 | cut -d ' ' -f 1\n}\n\ncandidate() {\n    median \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  # Parse the arguments into a\
    \ list\n  local -a arr=( \"$@\" )\n  local len=\"${#arr[@]}\"\n  if (( len ==\
    \ 0 )); then\n    return 0\n  fi\n  # Sort the list\n  local sorted=($(sort -n\
    \ <<<\"${arr[@]}\"))\n  if (( len == 1 )); then\n    return \"${sorted[0]}\"\n\
    \  fi\n  # Find the middle element\n  local middle\n  for (( i=1; i<len; i++ ));\
    \ do\n    (( middle=(i*len)/2) )\n    local temp=\"${sorted[i]}\"\n    if (( \"\
    $temp\" > \"$sorted[middle]\" )); then\n      sorted[middle]=\"$temp\"\n    fi\n\
    \  done\n  local len=\"${#sorted[@]}\"\n  # Return the median\n  if (( len%2 ==\
    \ 0 )); then\n    local midpoint=\"${sorted[(len-1)/2]}\"\n    local lower=\"\
    ${sorted[(len-2)/2]}\"\n    (( $len > 1 )) && echo \"${sorted[len-1]}\" || echo\
    \ \"${lower}\"\n    return $(( \"$midpoint\" + \"$lower\" / 2 ))\n  else\n   \
    \ (( $len > 1 )) && echo \"${sorted[(len-1)/2]}\" || echo \"${sorted[len-1]}\"\
    \n    return $(( \"$sorted[(len-1)/2]\" + \"$sorted[len-3]\" / 2 ))\n  fi\n}\n\
    \ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local l median\n  l=$( $1 )\n\
    \  median=$( echo \"$l\" | cut -d' ' -f2 | sort -n | tail -n 1 )\n  echo $median\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphrisas92.sh: line 11: 3: command not found

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 2
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local n=$(( $#${!1} - 1 ))\n\
    \  local a=($1 ${@:2:$n})\n  local b=($1 ${@:1:$n})\n  local diff=$(( ${#a[@]}\
    \ - 1 ))\n  if [ ${#a[@]} -ne ${#b[@]} ]; then\n    echo 0\n  elif [ $diff -eq\
    \ 0 ]; then\n    echo ${b[0]}\n  else\n    local median=\"$(a[${#b[@]} / 2 - 1])\"\
    \n    local i=0\n    for e in \"${a[@]}\"; do\n      (( i++ ))\n      if (( i\
    \ ) = $diff ) ; then\n        echo ${median}\n        break\n      fi\n      local\
    \ m1=$(a[${i} - 1])\n      local m2=$(b[${i} - 1])\n      if (( ${#m1} < ${#m2}\
    \ )); then\n        median=$m1\n      elif (( ${#m1} > ${#m2} )); then\n     \
    \   median=$m2\n      fi\n    done\n  fi\n}\n\ncandidate() {\n    median \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpunhyva61.sh: line 23: syntax error near unexpected token `=''

    /tmp/tmpunhyva61.sh: line 23: `      if (( i ) = $diff ) ; then''

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local -a arr=( $1 )\n    local\
    \ length count\n    length=${#arr[*]}\n    for (( count = 0; count < length; count++\
    \ )); do\n        declare -i num=\"${arr[count]}\"\n        if (( num > 0 ));\
    \ then\n            (( num / 2 ))\n        else\n            echo \"${arr[count]}\"\
    \ >> /dev/stderr\n        fi\n    done\n}\n\ncandidate() {\n    median \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[\
    \ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\")\
    \ = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"\
    8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local l=\"$1\"\n  [[ \"$l\" =~\
    \ ^-?[0-9]+$ ]] || return 1\n  local len=\"${#l}\"\n  (( len % 2 )) && len=\"\
    $((len / 2))\"\n  local m\n  [[ \"$l\" =~ ^-?[0-9]+(\\.[0-9]+)?([eE][-+]?[0-9]+)?$\
    \ ]] || return 1\n  local n\n  n=\"${#l}\"\n  local i\n  local x\n  x=\"${l%,*}\"\
    \n  for ((i=0; i < len; i=i+2)); do\n    m=\"${l:$i:2}\"\n    [[ \"$m\" =~ ^-?[0-9]+$\
    \ ]] || return 1\n    case \"$m\" in\n      e) m=\"$(( (10#$m) / 10 ))\";;\n \
    \     E) m=\"$(( (10#$m) / 100 ))\";;\n      F) m=\"$(( (10#$m) / 1000 ))\";;\n\
    \      g) m=\"$(( (10#$m) / 1000000 ))\";;\n      G) m=\"$(( (10#$m) / 1000000000\
    \ ))\";;\n      *) return 1;;\n    esac\n    m=\"${m##*,}\"\n    x=$(( ${x} *\
    \ $n / $m ))\n    (( n-- ))\n    l=${l#*,}\n  done\n  echo \"$x\"\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  sort -n \"$1\" | tail -n +2 |\
    \ head -n 1 | awk '{print $2/2}'\n}\n\ncandidate() {\n    median \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local l=\"$1\"\n\n  # Split list\
    \ into array and sort it\n  IFS=\" \" read -a larr <<< \"$l\"\n  IFS=$'\\n' sort\
    \ <<< \"${larr[@]}\"\n\n  # Calculate median\n  local n=\"${#larr[@]}\"\n  ((\
    \ n/2 )) && echo \"${larr[n/2]}\" || echo \"0\"\n}\n\ncandidate() {\n    median\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  x=($(echo \"$1\" | tr ' ' '\\\
    n')); n=${#x[*]}; x=($(xsort $1)); m=0; for i in $(seq 0 $((n - 1)))\n  do\n \
    \   (( $m < $n )) && m=$i\n    (( i < $n )) && m=\"${m} ${x[i]}\"\n  done\n  echo\
    \ ${x[$((m - 1))]}\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmp7oyt1j8x.sh: line 10: xsort: command not found

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local l\n    l=$(echo \"$1\"\
    \ | tr ' ' '\\n' | sort -n | tail -1)\n    echo $(echo \"$l\" | wc -c)\n}\n\n\
    candidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local nums=$1\n    local median=0\n\
    \    local count=0\n\n    # loop through list and get median of numbers in nums\n\
    \    for num in $nums; do\n        let count+=1\n        if [ $count -eq 2 ];\
    \ then\n            median=$num\n            break\n        fi\n    done\n\n \
    \   # return median\n    echo \"$median\"\n}\n\ncandidate() {\n    median \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local list\n  list=( \"$1\" )\n\
    \  local elem\n  local mid count\n  local median\n  local -a sorted\n  sorted=(\
    \ $(sort <<<\"${list[*]}\" | tr \"\\n\" \" \" ) )\n  if [ ${#list[*]} -gt 1 ];\
    \ then\n    mid=${#list[*]}\n  elif [ ${#list[*]} -eq 0 ]; then\n    mid=1\n \
    \ else\n    mid=1\n  fi\n  if [ $mid -eq 1 ]; then\n    echo \"$sorted[${mid}-1]\"\
    \n  else\n    mid=$(($mid - 1))\n    median=$sorted[${mid}-1]\n    for (( count\
    \ = $mid + 1; count <= ${#list[*]}; count++ )); do\n      if [ $count -gt $mid\
    \ ]; then\n        median+=$sorted[$count]\n      fi\n    done\n  fi\n  echo \"\
    $median\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local a=${1% *}\n  local b=${1#*\
    \ }\n  echo \"${a% *}\" | tr \" \" \"\\n\" | sort | tail -n +2 | head -1 | tr\
    \ '\\n' \" \"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 2
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local numbers=$1\n    local\
    \ count=0\n    local total\n    local median\n\n    total=${#numbers} # total\
    \ elements\n\n    # sort the list to put the smallest numbers first\n    numbers=$(sort\
    \ -n <<< \"$numbers\")\n\n    # find the median position\n    while [ \"$count\"\
    \ -lt \"$total\" ]\n    do\n        if [[ $(( $count % 2 )) -eq 0 ]]\n       \
    \ then\n            median=$(( ${numbers[$count]} + ${numbers[$(( $count + 1 ))]}\
    \ ) / 2 ))\n        fi\n        (( count++ ))\n    done\n\n    # return the median\n\
    \    echo \"$median\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpypxfefj8.sh: line 25: syntax error near unexpected token `)''

    /tmp/tmpypxfefj8.sh: line 25: `            median=$(( ${numbers[$count]} + ${numbers[$((
    $count + 1 ))]} ) / 2 ))''

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n\tlocal l len\n\tread -a l <<<\
    \ \"$1\"\n\tlen=\"${#l[@]}\"\n\t[[ $len == 0 ]] && return\n\techo \"${l[$((len\
    \ - 1) / 2))}\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmp4kt2finw.sh: line 14: bad substitution: no closing `}'' in "${l[$((len
    - 1) / 2))}"

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local -n list=\"$1\" total=0\n\
    \    IFS=\" \" read -a list < <(echo $list)\n    for i in \"${list[@]}\"; do\n\
    \      total=$((total+i))\n    done\n    echo $((total/2))\n}\n\ncandidate() {\n\
    \    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n  \
    \  [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpchesq48x.sh: line 10: local: `3 1 2 4 5'': invalid variable name
    for name reference

    /tmp/tmpchesq48x.sh: line 10: local: `0'': invalid variable name for name reference

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  echo -n \"$(echo \"$1\" | sort\
    \ -n | tail -n 1)\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local l=\"$1\"\n    local a\n\
    \    local b\n    local m\n    local n\n    # Sort list in ascending order\n \
    \   echo ${l} | sort -n\n    a=$(echo ${l} | sort -n | cut -d\" \" -f1)\n    b=$(echo\
    \ ${l} | sort -n | cut -d\" \" -f2)\n    # Check if list is empty\n    if [ \"\
    ${#a}\" -eq \"0\" ] ; then\n        echo \"0\"\n        return 0\n    fi\n   \
    \ # Find the middle element\n    m=$(( $(b-1) + $(b) ))\n    # Compute sum of\
    \ middle elements\n    n=$(( ${#a} ))\n    # Return median if sum is equal to\
    \ n\n    if [ $(( $(n+$m-1)/2 )) -eq \"$n\" ] ; then\n        echo \"$m\"\n  \
    \      return 0\n    fi\n    # Return median of middle elements\n    echo \"$a\"\
    \ | awk -v m=\"$m\" '{print $m}' | awk -v n=\"$n\" '{print $n}'\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpog4slxvf.sh: line 25: b-1: command not found

    /tmp/tmpog4slxvf.sh: line 25: b: command not found

    /tmp/tmpog4slxvf.sh: line 25: +  : syntax error: operand expected (error token
    is "+  ")

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local l\n    local n\n    local\
    \ m\n\n    l=$1; shift\n\n    n=$(echo \"$l\" | wc -w)\n    \n    if [ \"$n\"\
    \ -gt 1 ]; then\n        echo \"$l\" | wc -l\n        n=$(echo \"$l\" | cut -d\"\
    \ \" -f1)\n        m=$(( $(echo \"$l\" | wc -l) / n ))\n    else\n        m=$(echo\
    \ \"$l\" | cut -d\" \" -f1)\n    fi\n    \n    echo \"$(( ${m} * n / 2 ))\"\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local L i LL tmp\n    # Make\
    \ sure $1 is a list\n    [[ \"$1\" =~ ([\\+\\-] | \\([[:digit:]]\\) \\([[:digit:]]\\\
    ))* ]] || {\n        echo \"$0: $1: No numbers found\" >&2\n        return 1\n\
    \    }\n    # Make sure there are at least two elements\n    [[ \"${#1}\" -ge\
    \ 2 ]] || {\n        echo \"$0: $1: No numbers found\" >&2\n        return 1\n\
    \    }\n    # Convert space-separated numbers to array\n    L=\"${1// /}\"\n \
    \   # Convert to array\n    IFS=' ' read -a array <<< \"$L\"\n    # Sort elements\n\
    \    sort -n -k 1 -k 2 -k 3 -k 4 -k 5 \"$array\" | head -1\n}\n\ncandidate() {\n\
    \    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n  \
    \  [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sort: cannot read: 31245: No such file or directory

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  # We sort the list first.\n \
    \ local sorted=( $1 )\n  local llen=$(( ${#sorted[@]} - 1 ))\n  if [ \"${llen}\"\
    \ = \"0\" ]; then\n    return 0\n  fi\n  local midlen=$(( llen / 2 ))\n  local\
    \ mid mid\n  local m\n  local count\n  local i\n  local tmp\n  local output\n\
    \  local max\n  max=0\n  for i in \"${!sorted[@]}\"; do\n    if [ \"$i\" -ne \"\
    $(( $i - 1 ))\" ]; then\n      mid=\"${sorted[${i}..${i}+$midlen]}\"\n      count=0\n\
    \      for j in \"${!mid[@]}\"; do\n        if [ \"$mid\" == \"${sorted[$j]}\"\
    \ ]; then\n          (( count++ ))\n        fi\n      done\n      if [ \"$count\"\
    \ -gt \"0\" ]; then\n        m=\"$(( ${mid} - 1 ))\"\n      else\n        m=\"\
    $(( $i - 1 ))\"\n      fi\n      tmp=\"${sorted[$m..$i]}\"\n      output=\"$tmp\"\
    \n      if [ \"$count\" -gt \"$max\" ]; then\n        max=\"$count\"\n      fi\n\
    \    fi\n  done\n  if [ \"$max\" = \"0\" ]; then\n    return 0\n  fi\n  printf\
    \ '%s\\n' \"$output\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphizqgk5x.sh: line 27: 0..0+2: syntax error: invalid arithmetic
    operator (error token is "..0+2")

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local l median\n    l=\"$1\"\
    \n    median=\"$(echo $l | sed 's/ /,/g' | sort -nr | head -1)\"\n    echo \"\
    $median\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local L=\"$1\"\n    local m=\"\
    $(for n in $L; do echo $(( $(n*($n+1)/2 ))); done)\"\n    echo \"$m\"\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplhdqmi_8.sh: command substitution: line 12: syntax error near unexpected
    token `$n+1''

    /tmp/tmplhdqmi_8.sh: command substitution: line 12: `n*($n+1)/2 )))''

    '
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local IFS=' ' arr=($1) n=$((\
    \ ${#arr[@]} - 1 )) sum=$(( ${arr[n]} / 2 )) median\n    for (( i=n; i>0; i--\
    \ )); do\n        sum=$(( sum + ${arr[i]} ))\n    done\n    echo $(( sum / 2 ))\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n\tlocal array=( $1 )\n\tlocal median\n\
    \tlocal len\n\tlocal x\n\tlocal y\n\tlocal i\n\tlen=${#array[@]}\n\tif (( $len\
    \ % 2 )); then\n\t\techo \"Not an even number of arguments\"\n\t\treturn 1\n\t\
    fi\n\tx=($(( len / 2 )))\n\ty=($(( len / 2 )))\n\ti=0\n\twhile [ $i -lt $x ];\
    \ do\n\t\t(( y++ ))\n\t\t(( i++ ))\n\tdone\n\tmedian=${array[y]}\n\ti=$y\n\twhile\
    \ [ $i -lt $len ]; do\n\t\t(( x-- ))\n\t\t(( i++ ))\n\tdone\n\t(( len-- ))\n\t\
    median=$(( $median + ${array[x]} / 2 ))\n\tmedian=$(( $median / 2 ))\n\techo $median\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local l_str=$1\n  local l_arr=(\
    \ $l_str )\n  local l_len=${#l_arr[@]}\n  local l_med=0\n  # Loop through array\
    \ from left to right to find median element\n  for i in $(seq 0 $((l_len-1)));\
    \ do\n    (( (l_med+=l_arr[i]) ))\n  done\n  echo ${l_med}\n}\n\ncandidate() {\n\
    \    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n  \
    \  [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 2
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n\tIFS=$'\\n' read -r -a array <<<\
    \ \"$1\"\n\tsorted=( ${array[@]} | sort -nr )\n\techo \"${sorted[((${#sorted[@]}-1)/2)]}\"\
    \n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "/tmp/tmph7aaxqva.sh: line 11: syntax error near unexpected token `|'\n\
    /tmp/tmph7aaxqva.sh: line 11: `\tsorted=( ${array[@]} | sort -nr )'\n/tmp/tmph7aaxqva.sh:\
    \ line 13: syntax error near unexpected token `}'\n/tmp/tmph7aaxqva.sh: line 13:\
    \ `}'\n"
  stdout: '

    '
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local n a sum p\n    n=0\n\
    \    for a in \"$@\"; do\n        n=$((n+1))\n    done\n    sum=$((n-1))\n   \
    \ for p in $(seq 1 \"$sum\"); do\n        ((n%2==1)) && sum=$((sum+$p))\n    done\n\
    \    echo \"$((sum/n)) \"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local n=$((${#1} / 2))\n  \
    \  local sum=0\n    local i=0\n\n    while (( i <= n )); do\n        sum=$(($sum\
    \ + ${1[i]}))\n        i=$(( i + 1 ))\n    done\n\n    echo $(($sum / ${#1}))\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_qesb1k0.sh: line 15: $sum + ${1[i]}: bad substitution

    '
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  # Stick with awk for now\n  local\
    \ x=\"$1\"; shift\n  echo \"$x\" | awk '{m=-1} { for (j=1;j<=NF;j++) { if ($j\
    \ < m) m=$j } }; END { print m }'\n}\n\ncandidate() {\n    median \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058887
- exit_code: -1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local i sum w\n    sum=0\n\
    \    for w in $(cat); do\n        let sum+=w\n    done\n    let median=$((sum%2))\n\
    \    echo \"$median\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=13 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=3 encoding='utf-8'>
  timestamp: 1660058891
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local a=($1)\n    local n=$((\
    \ ${#a[@]} ))\n    if [[ ${n} -gt 1 ]]; then\n        local d=$(( ${a[$(( ${n}-1\
    \ ))]} - ${a[$(( ${n}-1 ))]} ))\n        if [[ ${n} -eq 2 ]]; then\n         \
    \   echo \"${a[$(( ${n}-1 ))]}\"\n        else\n            echo \"$d\"\n    \
    \    fi\n    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058887
- exit_code: -1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local n=$(( $# - 1 ))\n   \
    \ echo $( sort -n | head -n $n | tail -n 1)\n}\n\ncandidate() {\n    median \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=17 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=7 encoding='utf-8'>
  timestamp: 1660058891
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  # Check if it is numeric\n  [[\
    \ \"$1\" =~ ^-?[0-9]+\\.?[0-9]* ]] || return 1\n  # Trim whitespace\n  local IFS='\
    \ ' L=($1)\n  local MED=$((L[0]+L[1]+L[2]+L[3]+L[4]))\n  if (( ${#L[@]} % 2));\
    \ then\n    MED=$(($MED/2))\n  fi\n  echo \"$MED\"\n}\n\ncandidate() {\n    median\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local l=\"$1\"\n    # Sum all\
    \ list elements\n    local sum=$(sum \"$l\")\n    # Remove leading dash\n    sum=${sum#-}\n\
    \    # Remove trailing space\n    sum=${sum% *}\n    # Add up\n    sum=$(echo\
    \ \"$sum / 2\" | bc)\n    # Remove trailing zero\n    sum=${sum:-0}\n    echo\
    \ \"$sum\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  # if $1 is empty return $2\n\
    \  [[ -n \"$1\" ]] || return $2\n\n  sum=$(echo $1 | cut -d \" \" -f 1)\n\n  for\
    \ num in $@\n  do\n    ((sum += num))\n  done\n\n  echo $((sum / ${#1}))\n}\n\n\
    candidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058886
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local l=\"$1\" n=$(( ${#l} /\
    \ 2 ))\n  if [ ${#l} -eq 0 ]; then echo \"0\"; return; fi\n  if [ ${#l} -eq 1\
    \ ]; then echo \"${l}\"; return; fi\n  if [ ${#l} -le 2 ]; then echo \"0\"; return;\
    \ fi\n  local c=$(( ${#l} / 2 ))\n  local median\n  local j=$(( ${c} - 1 ))\n\
    \  for i in $(seq 1 ${n}); do\n    local k=$(( ${#l} / ( ${c} - 1 ) ))\n    local\
    \ ii=$(expr ${k} + ${i})\n    if [ -z \"$median\" ]; then\n      median=$(( ${l[$ii]}\
    \ + ${l[$j]}) / 2)\n    elif [ ${l[$i]} -gt $median ]; then\n      median=$((\
    \ ${l[$ii]} + ${l[$j]}) / 2)\n    elif [ ${l[$i]} -eq $median ]; then\n      median=$((\
    \ ${l[$ii]} + ${l[$j]}) / 2)\n    fi\n  done\n  echo $median\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058887
- exit_code: 2
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local n=0\n    local a\n  \
    \  local median\n    local b\n    local c\n    local i\n    local j\n    local\
    \ k\n    local l\n    local len\n    local tmp\n\n    IFS=\" \"\n    median=`echo\
    \ $1 | awk '{c=0;for(i=1;i<=NF;++i){c+=$(NF-i);}c=c%(NF+1);printf $(c)}' | awk\
    \ '{print $1/2}'`\n    for n in `seq 1 $((${#1}-1))`; do\n        a=`echo $1 |\
    \ awk '{print $n}'`\n        b=`echo $1 | awk '{print $n+1}'`\n        c=`echo\
    \ $1 | awk '{print $n+2}'`\n        ((c+=a)) # add all the elements from n+1 to\
    \ end of list\n        len=${#a}\n        if ((len < n+1)) then\n            median=$median\n\
    \        elif ((len == n+1)) then\n            ((c+=b)) # add the rest of the\
    \ list\n            median=$(($c/2))\n        elif ((len > n+1)) then\n      \
    \      ((c+=b)) # add the rest of the list\n            tmp=$((c+a)) # temporary\
    \ sum c+a\n            k=1\n            while ((tmp != 0)); do\n             \
    \   ((k++))\n                tmp=$(($tmp/2))\n            done\n            tmp=$(($tmp/2))\
    \ # temporary sum c+a\n            median=$(($k/2))\n        fi\n    done\n}\n\
    \ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7uwh_su7.sh: line 30: syntax error near unexpected token `then''

    /tmp/tmp7uwh_su7.sh: line 30: `        if ((len < n+1)) then''

    '
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local l=$*\n  local n=$(( ${#l}\
    \ - 1 ))\n  printf \"%d\\n\" ${l[n]} &>/dev/null\n  printf \"%d\\n\" ${l[n]} |\
    \ tr ' ' '\\n' | sort -n | tail -1\n}\n\ncandidate() {\n    median \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local n=$1; shift\n    local\
    \ tmp; tmp=$(echo $1 | sed -e 's/ /\\n/g' | sort -n | cut -f1)\n    (( ${#tmp}\
    \ > n )) && echo \"${tmp[0..(n-1)]}\"\n}\n\ncandidate() {\n    median \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[\
    \ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\")\
    \ = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"\
    8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpr8vp2yvu.sh: line 12: ((: 3 1 2 4 5: syntax error in expression
    (error token is "1 2 4 5")

    '
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  L=\"$1\"\n  echo \"${L}\" | tr\
    \ \" \" \"\\n\" | sort -n | tail -n 1 | awk '{print $1}'\n}\n\ncandidate() {\n\
    \    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n  \
    \  [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local l=$1\n    local a=($l)\n\
    \    local b=$((${#a[*]}))\n    local c=$((${#a[@]}/b))\n\n    if [ $((${#a[*]}))\
    \ -eq $((${#a[@]})) ] ; then\n        echo $a[$((${#a[@]}/2))]\n    elif [ $c\
    \ -eq 1 ] ; then\n        echo $a[$((${#a[@]}/2))]\n    elif [ $c -gt 1 ] ; then\n\
    \        echo $((${a[$((${c}-1))]} + ${a[$((${c}))]})/2)\n    fi\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local list_elements=$1\n  local\
    \ list_size=${#list_elements[@]}\n  if [ \"${list_size}\" -eq \"0\" ]; then\n\
    \    echo \"no elements were provided\"\n    exit 1\n  fi\n\n  # Get median (middle\
    \ value) of list.\n  local mid=`expr (${list_size} - 1) / 2`\n  local median\n\
    \  if [ \"${list_size}\" -ge 2 ]; then\n    median=${list_elements[$mid]}\n  else\n\
    \    median=\"${list_elements[$mid-1]}\"\n  fi\n\n  echo \"$median\"\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0i4y8jca.sh: command substitution: line 18: syntax error near unexpected
    token `${list_size}''

    /tmp/tmp0i4y8jca.sh: command substitution: line 18: `expr (${list_size} - 1) /
    2''

    /tmp/tmp0i4y8jca.sh: line 23: list_elements: bad array subscript

    '
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n\tlocal n=\"${#1}\"\n\tif [ $n\
    \ -lt 2 ]; then\n\t\techo \"Bad input size $n\"\n\t\texit 1\n\tfi\n\n\t# Convert\
    \ to an array\n\tlocal IFS=' '\n\tlocal i=1\n\tlocal sorted=()\n\twhile [ $i -le\
    \ $n ]; do\n\t\tsorted+=($1)\n\t\ti=$((i+1))\n\tdone\n\tlocal median\n\tlocal\
    \ i\n\tlocal j\n\tlocal mid\n\tlocal c\n\tlocal count=0\n\n\tfor i in \"${sorted[@]}\"\
    ; do\n\t\tj=$((i+1))\n\t\tif (( $j == n )); then\n\t\t\tbreak\n\t\tfi\n\t\tmid=$((\
    \ i + $(( j - i )) ))\n\t\tif [ \"$mid\" -gt 1 ]; then\n\t\t\tc=$(($mid + 1))\n\
    \t\t\tif [ $c -gt $count ]; then\n\t\t\t\tcount=$c\n\t\t\t\tmedian=$i\n\t\t\t\
    fi\n\t\tfi\n\tdone\n\techo \"$median\"\n}\n\ncandidate() {\n    median \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[\
    \ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\")\
    \ = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"\
    8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local a=($1)\n  local x=0\n \
    \ local y=0\n  local z=0\n  local count=0\n  local tmp\n  local median\n  local\
    \ medianValue\n\n  for x in ${a[@]}; do\n    count=$(( $count + 1 ))\n  done\n\
    \n  if [ $count -eq 0 ]; then\n    medianValue=$(echo $a | awk '{ print ($1+$2+$3+$4+$5+$6+$7+$8+$9+$10+$11+$12)/8\
    \ }')\n  else\n    if [ $count -le 3 ]; then\n      x=$(( $count / 2 ))\n    \
    \  tmp=${a[$x]} ${a[x+1]}\n      y=$(( $count - x ))\n      z=$(( $count % 2 ))\n\
    \      medianValue=$(( ${tmp:-0} + ( (${a[x]:-0} + ${a[x+1]:-0}) / 2 ) ))\n  \
    \  elif [ $count -eq 3 ]; then\n      tmp=${a[$(( $count / 2 ))]}\n      medianValue=$(echo\
    \ $tmp | awk '{ print ($1+$2+$3+$4+$5+$6+$7+$8+$9+$10+$11+$12)/8 }')\n    else\n\
    \      tmp=${a[$(( $count / 2 ))]}\n      tmp=${tmp:-0}\n      medianValue=$(echo\
    \ $tmp | awk '{ print ($1+$2+$3+$4+$5+$6+$7+$8+$9+$10+$11+$12)/8 }')\n    fi\n\
    \  fi\n  echo \"$medianValue\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  sort -n -k 2 $1|head -n 1|tr\
    \ -s ' ' ','\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local list=$(echo $1 | sed 's/\
    \ /\" \"/g')\n  local median=\"$(echo $list | sort -n | uniq | sort -n | head\
    \ -1 | awk '{print $1}')\"\n  echo $median\n}\n\ncandidate() {\n    median \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local _IFS=\"$IFS\"\n  local\
    \ _IFS_=\"$IFS\"\n  local l=\"$1\"\n  local -n _median=\"$median\"\n  local IFS=\"\
    \ \"\n  # Avoid empty input list\n  if [ \"${#l}\" -eq 0 ]\n  then\n    return\n\
    \  fi\n  # No space between arguments\n  IFS=\"$IFS_\"\n  IFS='\n'  # Avoid leading/trailing\
    \ whitespace\n  # NOTE: setting IFS can fail for some non-ascii characters, this\
    \ should be enough to handle them.\n  local -n _min=\"$min\"\n  local -n _max=\"\
    $max\"\n  local _med=\"$((_max + _min)/2)\"\n  local -n _i=\"$i\"\n  local _maxidx=\"\
    ${#l} / 2\"\n  local -i _maxidx\n  local -i idx\n  local _res\n  local i\n  #\
    \ Handle empty list\n  if [ \"${#l}\" -eq 1 ]\n  then\n    return\n  fi\n  # Iterate\
    \ through all elements\n  for (( i=0; i<${#l}; i++ )); do\n    # Check if current\
    \ element > _med\n    if [ \"${l[i]}\" -gt \"${_med}\" ]\n    then\n      # Save\
    \ current index\n      idx=\"${i}\"\n      # Save max index\n      if [ \"${#l}\"\
    \ -gt \"${_maxidx}\" ]\n      then\n        _maxidx=\"${#l}\"\n      fi\n    \
    \  # Save _med\n      local _med=\"${l[i]}\"\n    fi\n  done\n  # Restore IFS\n\
    \  IFS=\"$_IFS\"\n  # Return value if idx is unchanged\n  if [ \"${idx}\" = \"\
    ${_maxidx}\" ]\n  then\n    return\n  fi\n  # Return value if idx is too large\n\
    \  if [ \"${idx}\" -gt \"${_maxidx}\" ]\n  then\n    return\n  fi\n  # Return\
    \ value if idx is too small\n  if [ \"${idx}\" -lt \"${_min}\" ]\n  then\n   \
    \ return\n  fi\n  # Return _med\n  echo \"${_med}\"\n}\n\ncandidate() {\n    median\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2pij8bbw.sh: line 13: local: `'': not a valid identifier

    /tmp/tmp2pij8bbw.sh: line 25: local: `'': not a valid identifier

    /tmp/tmp2pij8bbw.sh: line 26: local: `'': not a valid identifier

    /tmp/tmp2pij8bbw.sh: command substitution: line 27: syntax error near unexpected
    token `/2''

    /tmp/tmp2pij8bbw.sh: command substitution: line 27: `(_max + _min)/2''

    /tmp/tmp2pij8bbw.sh: line 28: local: `'': not a valid identifier

    /tmp/tmp2pij8bbw.sh: line 42: [: 3 1 2 4 5: integer expression expected

    /tmp/tmp2pij8bbw.sh: line 42: [: : integer expression expected

    /tmp/tmp2pij8bbw.sh: line 42: [: : integer expression expected

    /tmp/tmp2pij8bbw.sh: line 42: [: : integer expression expected

    /tmp/tmp2pij8bbw.sh: line 42: [: : integer expression expected

    /tmp/tmp2pij8bbw.sh: line 42: [: : integer expression expected

    /tmp/tmp2pij8bbw.sh: line 42: [: : integer expression expected

    /tmp/tmp2pij8bbw.sh: line 42: [: : integer expression expected

    /tmp/tmp2pij8bbw.sh: line 42: [: : integer expression expected

    /tmp/tmp2pij8bbw.sh: line 63: [: : integer expression expected

    /tmp/tmp2pij8bbw.sh: line 68: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local l=\"$1\"\n  local median=\"\
    $2\"\n  local result=\"$3\"\n\n  eval \"local median=\\\"$median\\\"; local result=\\\
    \"$result\\\";\"\n\n  local i medians med\n\n  medians=${median//[!-0-9.]/ }\n\
    \n  for (( i=0; i < ${#medians}; i++ )); do\n    med=$( echo \"$medians\" | sed\
    \ -n \"\\$i\"p | tr -s ' ' | cut -d' ' -f2 )\n    (( result+=\"${#med}\"*$med\
    \ ))\n  done\n\n  echo \"$result\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058887
- exit_code: 2
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  # Check empty list\n  if [ -z\
    \ \"$1\" ]; then return 1; fi\n\n  local IFS=$'\\n' nums=$(echo $1 | tr ' ' '\\\
    n' | sort -n)\n\n  # If the first element is a number, the median is the midpoint\
    \ of all\n  # numbers in the list, otherwise the median is -(N/2) for a list with\
    \ N elements\n  local NUM=${nums[0]}\n  if [[ \"$NUM\" =~ ^[0-9]+$ ]]; then\n\
    \    local LEN=${#nums[@]}\n    ((LEN >= 2)) && local MEDNUM=${(nums[(LEN-1)/2])}\n\
    \    ((LEN < 2)) && local MEDNUM=-((LEN*2))\n  else\n    local MEDNUM=-((${#nums[@]}*2))\n\
    \  fi\n  echo \"$MEDNUM\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpk9nc5kax.sh: line 21: syntax error near unexpected token `(''

    /tmp/tmpk9nc5kax.sh: line 21: `    ((LEN < 2)) && local MEDNUM=-((LEN*2))''

    '
  stdout: ''
  timestamp: 1660058887
- exit_code: -1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local n=$1\n  sort -n | head\
    \ -$n | tail -1 | awk '{print $1}'\n}\n\ncandidate() {\n    median \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=42 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=23 encoding='utf-8'>
  timestamp: 1660058892
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local l\n  l=$1\n  local m\n\
    \  if [[ $l =~ ^-?[0-9]+$ ]]; then\n      printf -v m \"%.0f\" \"$((${l/\\%/%}))\"\
    \n      printf -v m \"%.0f\" \"$((${l/\\%/%}))\"\n      printf -v m \"%.0f\" \"\
    $((${l/\\%/%} - 1))\"\n      printf -v m \"%.0f\" \"$((${l/\\%/%} - 1))\"\n  \
    \    echo $((${l/\\%/%} / 2))\n  else\n      echo \"$l\" # Return un-rounded string\n\
    \  fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10\
    \ 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  declare -i i\n  declare -a nums=($(echo\
    \ $1 | tr '[:space:]' '\\n'))\n  declare -i numsLen=${#nums[@]}\n  declare -i\
    \ medianIndex\n\n  median_num=$((numsLen/2))\n  echo ${nums[${median_num}]}\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  declare -i n=$1\n  declare -i\
    \ sum=0\n  declare -i d\n  declare -i i\n  declare -i median\n  declare -i n\n\
    \n  i=0\n  for d in $@; do\n    ((sum+=$d))\n    ((i++))\n  done\n  ((i=i-1))\n\
    \  ((n=$i))\n\n  if (( n % 2 == 0 )); then\n    ((median=sum/d))\n  else\n   \
    \ ((median=sum/n))\n  fi\n  echo $median\n}\n\ncandidate() {\n    median \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpj66m8p8s.sh: line 10: declare: 3 1 2 4 5: syntax error in expression
    (error token is "1 2 4 5")

    '
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local x\n\n  x=$(echo \"$1\"\
    \ | tr '[:upper:]' '[:lower:]' | sort -n | head -1)\n  echo \"${x%?}\"\n}\n\n\
    candidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local -n l=\"$1\"\n  local -a\
    \ sorted=( $l )\n  local -n count\n  count=\"${#sorted[*]}\"\n  if [ $count -eq\
    \ 0 ]; then return 0; else return ${sorted[(${#sorted[@]}/2)]}; fi\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppdxycds2.sh: line 10: local: `3 1 2 4 5'': invalid variable name
    for name reference

    /tmp/tmppdxycds2.sh: line 13: `0'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local x=\"$1\"\n  local d=\"\"\
    \n  [[ \"$x\" =~ ^[0-9]+\\ *[0-9]+$ ]] || return 0\n  for x in $x; do\n    ((\
    \ ${#d} += ${#x} ))\n  done\n  echo \"${d}\" | sort -nr -k 1,1 -k 2,2 | head -n\
    \ 1\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10\
    \ 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058887
- exit_code: 2
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  l=( \"$@\" )\n  len=${#l[@]}\n\
    \  if [ $len -eq 0 ] ; then\n    return 0\n  fi\n  sorted=($(sort -n \"$l\"))\n\
    \  (( len>>1 ))\n  (( len-=len>>1 ))\n  (( len>>1 ))\n  (( len-=len>>1 ))\n  ((\
    \ len>>1 ))\n  (( len-=len>>1 ))\n  (( len>>1 ))\n  (( len-=len>>1 ))\n  (( len>>1\
    \ ))\n  (( len-=len>>1 ))\n  (( len>>1 ))\n  (( len-=len>>1 ))\n  (( len>>1 ))\n\
    \  (( len-=len>>1 ))\n  (( len>>1 ))\n  (( len-=len>>1 ))\n  (( len>>1 ))\n  ((\
    \ len-=len>>1 ))\n  (( len>>1 ))\n  (( len-=len>>1 ))\n  (( len>>1 ))\n  (( len-=len>>1\
    \ ))\n  (( len>>1 ))\n  (( len-=len>>1 ))\n  (( len>>1 ))\n  (( len-=len>>1 ))\n\
    \  (( len>>1 ))\n  (( len-=len>>1 ))\n  (( len>>1 ))\n  (( len-=len>>1 ))\n  ((\
    \ len>>1 ))\n  (( len-=len>>1 ))\n  (( len>>1 ))\n  (( len-=len>>1 ))\n  (( len>>1\
    \ ))\n  (( len-=len>>1 ))\n  (( len>>1 ))\n  (( len-=len>>1 ))\n  (( len>>1 ))\n\
    \  (( len-=len>>1 ))\n  (( len>>1 ))\n  (( len-=len>>1 ))\n  (( len>>1 ))\n  ((\
    \ len-=len>>1 ))\n  (( len>>1 ))\n  (( len-=len>>1 ))\n  (( len>>1 ))\n  (( len-=len>>1\
    \ ))\n  (( len>>1 ))\n  (( len\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppc15r6il.sh: line 65: unexpected EOF while looking for matching
    `)''

    /tmp/tmppc15r6il.sh: line 82: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local numbers=$1\n  local len=${#numbers}\n\
    \  if [[ $len == 0 ]]; then\n    echo \"No numbers given\"\n    return\n  fi\n\
    \  local half=${len/2}\n  local count=0\n  local median\n  local number\n  while\
    \ (( $count < half )); do\n    (( count += 1 ))\n    number=$(( $numbers[$count]\
    \ ))\n    median=$(( $median + number ))\n  done\n  median=$(( $median / 2 ))\n\
    \  return\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1cmazvvi.sh: line 22: 3 1 2 4 5[1] : syntax error in expression
    (error token is "1 2 4 5[1] ")

    '
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  # Avoid unnecessary quoting\n\
    \  local -r list=$(echo \"$1\" | sed 's/ /\" /g')\n  # Return median (middle element)\
    \ of given list\n  local mid=$(awk 'BEGIN{srand(); print  srand()%${#list}; exit}')\n\
    \  echo \"${list[$(( ${#list} - 1))]}\"\n}\n\ncandidate() {\n    median \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'awk: cmd. line:1: BEGIN{srand(); print  srand()%${#list}; exit}

    awk: cmd. line:1:                                ^ syntax error

    awk: cmd. line:1: (END OF FILE)

    awk: cmd. line:1:                                 ^ source files / command-line
    arguments must contain complete functions or rules

    '
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local a\n    local b\n    local\
    \ median\n    local size\n    local i\n    IFS=$'\\n' read -r -a a <<< \"$1\"\n\
    \    IFS=$' ' read -r -a b <<< \"$1\"\n    median=\"$(a[${#a[@]}/2] + b[${#b[@]}/2])\
    \ / 2\";\n    for i in \"${!a[@]}\"; do\n        if [[ ${a[$i]} -le ${median}\
    \ ]]; then\n            median=\"${a[$i]}\"\n        fi\n    done\n    for i in\
    \ \"${!b[@]}\"; do\n        if [[ ${b[$i]} -le ${median} ]]; then\n          \
    \  median=\"${b[$i]}\"\n        fi\n    done\n    echo \"${median}\"\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcpa5nu8r.sh: line 17: a[1/2]: No such file or directory

    /tmp/tmpcpa5nu8r.sh: line 19: [[: 3 1 2 4 5: syntax error in expression (error
    token is "1 2 4 5")

    /tmp/tmpcpa5nu8r.sh: line 24: [[: / 2: syntax error: operand expected (error token
    is "/ 2")

    /tmp/tmpcpa5nu8r.sh: line 24: [[: / 2: syntax error: operand expected (error token
    is "/ 2")

    /tmp/tmpcpa5nu8r.sh: line 24: [[: / 2: syntax error: operand expected (error token
    is "/ 2")

    /tmp/tmpcpa5nu8r.sh: line 24: [[: / 2: syntax error: operand expected (error token
    is "/ 2")

    /tmp/tmpcpa5nu8r.sh: line 24: [[: / 2: syntax error: operand expected (error token
    is "/ 2")

    '
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local a\n    local i\n    local\
    \ median\n    local len\n    median=$(echo \"$1\" | cut -d' ' -f1)\n    if [ \"\
    $median\" == \"-\" ]; then\n        median=$(echo \"$1\" | cut -d' ' -f2)\n  \
    \  fi\n    echo $median\n    if [ \"$median\" == \"-\" ]; then\n        a=$(echo\
    \ \"$1\" | cut -d' ' -f3)\n        len=\"${#a}\"\n    else\n        a=$(echo \"\
    $1\" | cut -d' ' -f1 -d' ')\n        len=\"${#a}\"\n    fi\n    # if the list\
    \ is empty, just return the median\n    if [ \"$len\" -eq 0 ]; then\n        echo\
    \ \"$median\"\n        return 0\n    fi\n\n    for i in $(seq 0 \"$((len-1))\"\
    ); do\n        a=\"${a} $1\"\n    done\n    echo $(echo \"$a\" | sort -nr | head\
    \ -n 1)\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local a b sum\n    local elements=$(\
    \ echo \"$1\" | sed -e \"s/ /, /g\" -e \"s/^[ ]*//\" -e \"s/[ ]*$//\" -e \"s/,$//\"\
    \ )\n    local n=0\n    local sum=$(echo \"$elements\" | tr \" \" \"\\n\" | sort\
    \ -n | tail -n 1)\n    for a in $elements; do\n        b=$(( (n++)*$sum/n ))\n\
    \        sum=$(( $sum + $a ))\n    done\n    echo \"$sum\"\n}\n\ncandidate() {\n\
    \    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n  \
    \  [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmposdwj5hd.sh: line 16: 5 + 3, : syntax error: operand expected (error
    token is ", ")

    '
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local IFS=' '\n    echo \"\
    ${@:2} | tr ' ' '.' | sort | tail -1 | awk '{ print $2 }'\"\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058887
- exit_code: 2
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local l=$1\n  local -a medians\n\
    \  local median\n  medians=($l)\n  for (( i=0; i<${#medians[@]}; i++ )); do\n\
    \    median=${medians[$i]}\n  done\n  median=$(awk \"BEGIN {\n    srand(); \n\
    \    for(i = 0; i < ${#medians[@]}; i++) {\n      medians[i]=rand()/(RAND_MAX)\n\
    \    }\n  }\n  END {\n    print ${medians[@]}\"\n  }\" </dev/null)\n  echo \"\
    ${median}\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphsgh5vny.sh: line 39: unexpected EOF while looking for matching
    `"''

    /tmp/tmphsgh5vny.sh: line 43: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local numbers=$1\n    local\
    \ number\n    local i\n    local count\n    count=0\n    for i in ${!numbers};\n\
    \    do\n        if [ $((count+1)) -eq $((${#numbers}-1)) ]\n        then\n  \
    \          count=$((count+1))\n        else\n            count=$((count+1))\n\
    \        fi\n    done\n    echo \"$((${#numbers}*((${count}/2))))\"\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpkw_gmo7b.sh: line 15: 3 1 2 4 5: invalid variable name

    '
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local a b x y z\n  a=${1%% *}\n\
    \  b=$((a+1))\n  for x in $(seq $b)\n  do\n    y=$(b | cut -d ' ' -f $x)\n  done\n\
    \  z=$(( $(echo \"$y - $a\" | bc -l) ))\n  if [ $z -eq 0 ]\n  then\n    echo \"\
    0\"\n  else\n    echo \"$(( $(echo \"$z / ($b - 1)\" | bc -l) ))\"\n  fi\n}\n\n\
    candidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpku343sbn.sh: line 15: b: command not found

    /tmp/tmpku343sbn.sh: line 15: b: command not found

    /tmp/tmpku343sbn.sh: line 15: b: command not found

    /tmp/tmpku343sbn.sh: line 15: b: command not found

    /tmp/tmpku343sbn.sh: line 22: -1.00000000000000000000 : syntax error: invalid
    arithmetic operator (error token is ".00000000000000000000 ")

    '
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  echo \"$1\" | awk '\n  BEGIN\
    \ { n = split($1,a,\" \"); } \n  END   { n = split($1,a,\" \"); \n         s =\
    \ a[n/2]; \n         for (i=n/2;i>1;i--)\n           s = s+a[i]; \n         print\
    \ s; }'\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local __list=\"$1\";\n    local\
    \ __length=${#__list};\n    if [ \"${__length}\" = \"0\" ]; then\n        return\
    \ 0;\n    fi\n\n    local __median=$(__median \"${__list}\");\n    # Handle integer\
    \ lists.\n    if [ \"${__length}\" = \"1\" ]; then\n        echo -n \"${__median}\"\
    ;\n        return 0;\n    fi\n\n    local __count=1\n    local __median=$(__median\
    \ \"${__list}\");\n    while [ \"${__count}\" -lt \"${__length}\" ] ; do\n   \
    \     local __element=${__list}[${__count}];\n        local __count=$(( ${__count}\
    \ + 1 ));\n        if [ \"${__element}\" = \"${__median}\" ]; then\n         \
    \   return 0;\n        fi\n        local __median=$(__median \"${__list}\");\n\
    \    done\n\n    return \"${__median}\";\n}\n\ncandidate() {\n    median \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpsfhj3o7t.sh: line 16: __median: command not found

    /tmp/tmpsfhj3o7t.sh: line 24: __median: command not found

    /tmp/tmpsfhj3o7t.sh: line 31: __median: command not found

    /tmp/tmpsfhj3o7t.sh: line 31: __median: command not found

    /tmp/tmpsfhj3o7t.sh: line 31: __median: command not found

    /tmp/tmpsfhj3o7t.sh: line 31: __median: command not found

    /tmp/tmpsfhj3o7t.sh: line 31: __median: command not found

    /tmp/tmpsfhj3o7t.sh: line 31: __median: command not found

    /tmp/tmpsfhj3o7t.sh: line 31: __median: command not found

    /tmp/tmpsfhj3o7t.sh: line 31: __median: command not found

    /tmp/tmpsfhj3o7t.sh: line 34: return: : numeric argument required

    '
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local l=${1// /}\n    local\
    \ i=$((${#l}+1))\n    local j=0\n    local m\n    local k\n    while (( i<k ))\
    \ ; do\n        m=$(expr ${l[i]} + ${l[j]})\n        if [[ $m -gt $k ]]; then\n\
    \            (( ++i ))\n        else\n            (( ++j ))\n        fi\n    done\n\
    \    echo ${l[i]}\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local i sum\n    local len=\"\
    ${#1}\"\n\n    sum=\"${1}\"\n    for ((i=1; i<=len; i++)); do\n      sum=\"$(echo\
    \ \"${sum}+${1}\" | bc)\"\n    done\n    echo \"${sum}\"\n}\n\ncandidate() {\n\
    \    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n  \
    \  [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local l med n\n  read -a l <<<\
    \ \"$1\"\n  n=${#l[@]}\n  if (( $n % 2 )); then\n    med=${l[($n+1)/2]}\n  else\n\
    \    med=$(echo \"${l[@]/$n/2}\" | bc)\n  fi\n  echo \"$med\"\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local LIST=\"$1\"\n  local LENGTH=${#LIST}\n\
    \  if [[ $LENGTH == 0 ]]; then\n    echo \"0\"\n  else\n    local MEDIAN\n   \
    \ MEDIAN=$(echo $LIST | tr \" \" \"+\" | sort -n | uniq | wc -w | tr -s '+')\n\
    \    echo $MEDIAN\n  fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local l sum\n    sum=$(echo\
    \ \"$1\" | sed 's/ /+/g')\n    l=$(echo \"$1\" | sed 's/^[0-9]*[ ]*\\([0-9]*\\\
    )[ ]*\\([0-9]*\\)[ ]*\\([0-9]*\\)$/\\1 \\2 \\3/')\n    echo \"$((($sum / ${#l})*$(echo\
    \ \"$l\" | wc -w)))\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local i sum=$(echo $1 | tr\
    \ ' ' '+' | sort -n | $JQ \"length\") || return 1\n    for (( i=$(( $# - 1 ));\
    \ i>1; i-- )); do\n        sum=$($JQ \"avg[${i}-1]+(${1}[${i}])\" <<<$sum) ||\
    \ return 1\n    done\n    echo \"$sum/2\"\n}\n\ncandidate() {\n    median \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpy6nnrsw6.sh: line 10: length: command not found

    '
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local list=\"${1:-}\"\n   \
    \ local len=\"${#list}\"\n    if [ \"${len}\" -eq 0 ]; then\n        return 0\n\
    \    fi\n    local x\n    local median\n    if [ \"${len}\" -gt 2 ]; then\n  \
    \      local mid\n        for x in ${list[@]} ${list[@]:0:((len - 1) / 2)}; do\n\
    \            if [ \"${x}\" = \"${list[len-1]}\" ]; then\n                median=\"\
    $x\"\n                break\n            else\n                if [ \"${x}\" -lt\
    \ \"${median}\" ]; then\n                    median=\"$x\"\n                fi\n\
    \            fi\n        done\n        echo \"${median}\"\n    else\n        median=\"\
    $list\"\n    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmp9bsi1qnj.sh: line 24: [: : integer expression expected

    /tmp/tmp9bsi1qnj.sh: line 24: [: : integer expression expected

    /tmp/tmp9bsi1qnj.sh: line 24: [: : integer expression expected

    /tmp/tmp9bsi1qnj.sh: line 24: [: : integer expression expected

    /tmp/tmp9bsi1qnj.sh: line 24: [: : integer expression expected

    /tmp/tmp9bsi1qnj.sh: line 24: [: : integer expression expected

    /tmp/tmp9bsi1qnj.sh: line 24: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    IFS=' ' read -r -a array <<<\
    \ \"$1\"\n    echo \"${array[@]}\" | sort -nr | head -1\n}\n\ncandidate() {\n\
    \    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n  \
    \  [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local IFS=\" \"\n    local\
    \ n=$(( ${#1} / 2 ))\n    echo $(( ${#1} % 2 == 0 ? (( ${1[n]}+${1[n+1]} ) / 2\
    \ ) : ${1[n]}))\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmprz9742s0.sh: line 12:  ${#1} % 2 == 0 ? (( ${1[n]}+${1[n+1]} )
    / 2 ) : ${1[n]}: bad substitution

    '
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local items=$1;\n\n  # If only\
    \ one item, or if it's empty, return.\n  if [ ${#items} -eq 0 ] || [ ${items}\
    \ -eq 1 ]; then return 0; fi\n\n  local total=0\n  local count=0\n  local median=0\n\
    \n  while read -r item; do\n    ((count++))\n    total=$((total+item))\n\n   \
    \ ((count > 1)) && continue  # Don't count the median for two elements\n    ((count\
    \ > 2)) && break    # Or stop counting when the count exceeds two\n\n    local\
    \ temp=$(echo \"scale=2; $total/${count}\" | bc)\n    (( ${temp} == ${item} ))\
    \ && median=$temp\n  done < <(echo \"$items\" | tr ' ' '\\n' | sort -n -r)\n\n\
    \  echo \"$median\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0qfa8uda.sh: line 13: [: too many arguments

    /tmp/tmp0qfa8uda.sh: line 27: ((: 5.00 == 5 : syntax error: invalid arithmetic
    operator (error token is ".00 == 5 ")

    '
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local array=\"$1\"\n\n  local\
    \ total\n  total=$(echo \"$array\" | tr \" \" \"+\" | bc -l)\n  echo \"${array%.*}\"\
    \ | cut -d\"+\" -f2 | cut -c1  \"$total\"\n}\n\ncandidate() {\n    median \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    # set -x to debug\n    local\
    \ list total=0\n    for element in $1\n    do\n        if [ \"$element\" -eq $((total\
    \ / 2)) ]; then\n            echo $element\n        fi\n        total=$((total\
    \ + element))\n    done\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n\tlocal -n l=$1\n\tlocal median\n\
    \n\tif [ -z \"$l\" ]; then return 1; fi\n\n\tmedian=$(echo \"$l\" | tr \" \" \"\
    \\n\" | sort -n | tail -1)\n\techo \"$median\"\n}\n\ncandidate() {\n    median\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpgz00xfpp.sh: line 10: local: `3 1 2 4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local x\n  local num\n  local\
    \ sum\n  local count\n  local median\n  local value\n\n  sum=$(echo \"$@\" | tr\
    \ \" \" \"+\" | wc -l)\n  if (( sum == 0 )); then\n    return 0\n  fi\n\n  num=$(echo\
    \ \"$@\" | tr \" \" \"+\" | sort -n)\n  count=$(echo \"$num\" | grep -o . | wc\
    \ -l)\n  value=$(echo \"$num\" | grep -o . | awk '{print $NF}')\n  median=\"$(echo\
    \ \"$value\" | cut -f1 -d '.')\"\n  if [[ $(echo \"$value\" | cut -f1 -d '.')\
    \ -gt 0 ]]; then\n    echo \"$median\"\n  else\n    median=$(echo \"$value\" |\
    \ cut -f1 -d ',')\n  fi\n\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local LIST=\"$1\"\n    # echo\
    \ \"$LIST\" | tr \" \" \"\\n\" | sort -n | tail -1 | tr -d \"\\n\" | head -n 1\n\
    \    local NUMBERS=($(echo \"$LIST\" | tr \" \" \"\\n\" | sort -n | tail -1 |\
    \ tr -d \"\\n\"))\n    local MEDIAN\n    local TOTAL COUNT=0\n    TOTAL=${#NUMBERS[@]}\n\
    \    for ((i=0; i<TOTAL; i++)); do\n        COUNT=${NUMBERS[i]}\n        MEDIAN=$((NUMBERS[i]/TOTAL))\n\
    \        COUNT=${COUNT}\n        # echo \"numbers[$i] = $NUMBERS[i]\"\n      \
    \  # echo \"COUNT = $COUNT\"\n        # echo \"MEDIAN = $MEDIAN\"\n        if\
    \ [ \"$COUNT\" -gt 1 ]; then\n            echo $MEDIAN\n        fi\n    done\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local n=$1\n  IFS=' ' read -a\
    \ a <<< \"$1\"\n\n  local median\n  local m\n\n  median=${a[0]}\n\n  for m in\
    \ ${a[@]}\n  do\n    (( ${#median} < ${#m} )) && median=\"${median} ${m}\"\n \
    \ done\n\n  echo \"${median%.*}\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local IFS=' '\n  local x y median\n\
    \  x=\"${1}\"\n  for x in $x; do\n    (( y = x + 1 ))\n    median=$(( y + 1 ))\n\
    \    if [ \"$median\" -gt \"5\" ]; then\n      median=\"$median \"\n    fi\n \
    \ done\n  echo \"$median\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local l=\"$1\"\n    local len=\"\
    $(( ${#l} / 2 ))\"\n    local i\n    local m\n\n    for i in \"${!l}\"; do\n \
    \       if [ \"$i\" -eq \"$(( len - 1 ))\" ]; then\n            echo \"${l[i]}\"\
    \n            return\n        fi\n        if [ \"$i\" -lt \"$(( len - 1 ))\" ];\
    \ then\n            if (( $(echo \"$i / 2\" | bc -l) >= 2 )); then\n         \
    \       m=\"${l[i]} ${l[(($i + 1)%${#l[@]})]}\"\n            else\n          \
    \      m=\"${l[i]}\"\n            fi\n        fi\n    done\n    m=$(echo \"$m\
    \ / 2\" | bc -l)\n    echo \"${m:0:$(( ${#m} - 1 ))}\"\n}\n\ncandidate() {\n \
    \   median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n  \
    \  [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfiit7n35.sh: line 15: 3 1 2 4 5: invalid variable name

    '
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  L=$(sort -n \"$1\");\n  L=$(echo\
    \ \"${L}\" | sed 's/ //g');\n  L=$(echo \"${L}\" | sed '$s/$/\\n/');\n  L=$(echo\
    \ \"${L}\" | sed '/^$/d');\n  L=$(echo \"${L}\" | sort -n);\n  L=$(echo \"${L}\"\
    \ | sed '$s/^/0/');\n  echo \"${L}\" | sed 's/^/0*/' | sed '$s/0/1/g' | \\\n \
    \   sed 's/^/0/' | awk '{print int($1 + 0.5)}'\n}\n\ncandidate() {\n    median\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058887
- exit_code: -1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local i listSize sum\n    listSize=$(echo\
    \ $1 | wc -c)\n    for ((i = 0; i <= listSize; i++)); do\n        sum=0\n    \
    \    while read x; do\n            sum=$((sum + $x))\n        done\n        echo\
    \ $(echo \"scale=4; $((sum/listSize))\" | bc -l)\n    done\n}\n\ncandidate() {\n\
    \    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n  \
    \  [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=51 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=16 encoding='utf-8'>
  timestamp: 1660058892
- exit_code: 2
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n\tlocal i median\n\tmedian=$(printf\
    \ \"%s\" \"$1\" | sort -n | tail -1)\n\tfor(( i=1; i<\"$#\";  i++ ))\n\tdo\n\t\
    \tlocal j\n\t\t(( j=$((i+1)%\"$#\" )) && median=\"$(echo \"$median\" \" \"$((j+1))\"\
    )\")\n\tdone\n\techo \"$median\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpres_69ne.sh: line 30: unexpected EOF while looking for matching
    `"''

    /tmp/tmpres_69ne.sh: line 34: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local i\n  i=\"$(( (( $#_ + 1\
    \ ) / 2 ) - 1 ))\"\n  (( i >= 0 )) && echo $(( ( ( ( ${${#_[$i]} + 1 ) / 2 ) )\
    \  / 2 ))\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmpa96t9wdn.sh: line 11: (( 1_: value too great for base (error token
    is "1_")

    '
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local l\n  l=$1\n  local max\n\
    \  max=$(echo \"$l\" | tail -n 1)\n  echo \"$max\" | awk '{\n    # Find the median\n\
    \    sum = 0\n    # Count numbers\n    c=0\n    # Keep adding to sum\n    for\
    \ (i = 1; i <= NF; i++) {\n      if ($i == max) {\n        sum=sum+$i\n      \
    \  c=c+1\n      }\n    }\n    # Calculate average of count\n    avg = (c*1.0)/(NF-1)\n\
    \    # Calculate median\n    median = sum / c\n    # Return median\n    print\
    \ median\n  }'\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: 'awk: cmd. line:16: (FILENAME=- FNR=1) fatal: division by zero attempted

    '
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local a b\n  a=$( echo $1 |\n\
    \    sed 's/ /\\\\ /g' |\n    sed 's/^/-/' |\n    sed 's/$/-/' |\n    sed 's/^/+/'\
    \ |\n    sed 's/$/+/'\n  )\n  echo $(echo \"$a\" | sort | tail -n 1) | tr \" \"\
    \ \".\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local array=\"$1\"\n    local\
    \ len=\"${#array}\"\n    if [[ ${len} -lt 2 ]]; then\n        return 0\n    fi\n\
    \    local start=\"${len}\"/2\n    local mid\n    local median\n    for (( mid=$start;\
    \ mid<${len}; mid++ )); do\n        if [[ ${array[$mid]} -gt ${array[$mid-1]}\
    \ ]]; then\n            median=\"$array[$mid]\"\n            break\n        fi\n\
    \    done\n    echo \"${median}\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local _median _count\n  _count=0\n\
    \  _median=`echo $1 | sed 's/ /\\n/g' | sort | uniq | sort -n | tail -1`\n  _count=`echo\
    \ $1 | sed 's/ /\\n/g' | sort | uniq | wc -l`\n  echo \"$((${_count} / $_median\
    \ * 100))\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local l\n  l=$(echo \"$1\" |\
    \ sed -e 's/^ *//' -e 's/ *$//')\n  echo \"$(echo \"$l\" | sort -n)/2\" | bc -l\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local n=$1\n  echo $n | tr '\
    \ ' \"\\040\" | sort -nr | head -1 | cut -d \"\\040\" -f 2\n}\n\ncandidate() {\n\
    \    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n  \
    \  [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'cut: the delimiter must be a single character

    Try ''cut --help'' for more information.

    '
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local n=\"$1\"\n    local median=\"\
    $2\"\n    local tmp\n\n    # Remove extra spaces.\n    n=\"${n#* }\"\n    n=\"\
    ${n% * }\"\n    n=\"${n##* }\"\n\n    IFS=' ' read -a tmp <<< \"$n\"\n    median=\"\
    $(( ${tmp[@]:1:${#median}} / ${#tmp[@]} ))\"\n\n    echo \"$median\"\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxy06d43k.sh: line 20: / 1 : syntax error: operand expected (error
    token is "/ 1 ")

    '
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local l\n  l=$(eval \"echo $(printf\
    \ %s \"$1\") | tr ' ' ','\")\n  echo \"${l| cut -d',' -f2}\"\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0hmqkbjt.sh: line 12: ${l| cut -d'','' -f2}: bad substitution

    '
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local l\n  l=$(echo \"$1\" |\
    \ tr \" \" \"\\n\")\n  # If the list is empty, return an error.\n  if [ -z \"\
    $l\" ]; then\n    echo -n \"Error: empty list\"\n    return\n  fi\n\n  local len=$((${#l}\
    \ / 2))\n  local sum=0\n  local count=1\n  local median\n  local i\n\n  for ((i=0;\
    \ i<${#l}; ++i)); do\n    if [ ${l[i]} -gt 0 ]; then\n      sum=$((sum + ${l[i]}))\n\
    \      count=$((count + 1))\n    fi\n  done\n\n  if [ \"$count\" -eq 1 ]; then\n\
    \    median=\"$sum/1\"\n  else\n    median=\"$sum/$count\"\n  fi\n  echo \"$median\"\
    \n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpat2v4crc.sh: line 25: [: too many arguments

    /tmp/tmpat2v4crc.sh: line 25: [: -gt: unary operator expected

    /tmp/tmpat2v4crc.sh: line 25: [: -gt: unary operator expected

    /tmp/tmpat2v4crc.sh: line 25: [: -gt: unary operator expected

    /tmp/tmpat2v4crc.sh: line 25: [: -gt: unary operator expected

    /tmp/tmpat2v4crc.sh: line 25: [: -gt: unary operator expected

    /tmp/tmpat2v4crc.sh: line 25: [: -gt: unary operator expected

    /tmp/tmpat2v4crc.sh: line 25: [: -gt: unary operator expected

    /tmp/tmpat2v4crc.sh: line 25: [: -gt: unary operator expected

    '
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local i median\n  local a=$(\"\
    $@\" | tr ' ' '\\n' | sort -nr)\n  i=1\n  median=$(a[i])\n  while (( i < ${#a[@]}\
    \ )) ; do\n    median=$((a[i] + a[i - 1]))\n    ((i++))\n  done\n  echo \"$median\"\
    \n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_40i5trk.sh: line 11: 3 1 2 4 5: command not found

    /tmp/tmp_40i5trk.sh: line 13: a[i]: command not found

    '
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n    local nums=\"$1\"\n    local\
    \ sum=0\n    local i median\n    for i in $nums; do\n        sum=$(($sum + $i))\n\
    \    done\n    median=$(($sum / $#))\n    echo $median\n}\n\ncandidate() {\n \
    \   median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n  \
    \  [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058887
- exit_code: 2
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local arr=($@)\n  # Sort on $1\
    \ ascending.\n  arr=(\"${arr[@]}\" | sort -n)\n  # Return median.\n  echo \"${arr[@]}\"\
    [${#arr[@]}/2]\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4dbjmi_0.sh: line 12: syntax error near unexpected token `|''

    /tmp/tmp4dbjmi_0.sh: line 12: `  arr=("${arr[@]}" | sort -n)''

    /tmp/tmp4dbjmi_0.sh: line 15: syntax error near unexpected token `}''

    /tmp/tmp4dbjmi_0.sh: line 15: `}''

    '
  stdout: '[0/2]

    '
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local median\n  local i\n  local\
    \ val\n  median=$1\n  for i in $1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18;\
    \ do\n    val=$((${i%?}))\n    if [[ $val -gt $((${#median}-1)) ]]; then\n   \
    \   median=$val\n    elif [[ $val -eq $((${#median})) ]]; then\n      median=\"\
    $median $val\"\n    fi\n  done\n  echo $median\n}\n\ncandidate() {\n    median\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058887
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median\
    \ \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n\
    #\n# $1 is a space-separated list\nmedian() {\n  local l=\"$1\"\n  declare -i\
    \ n c=0\n  declare -i median i\n  declare -a sorted\n\n  n=${#l}\n  if (( n ==\
    \ 0 )); then\n    echo \"no elements given\" >&2\n    return 1\n  fi\n\n  # Sort\
    \ list into ascending order (useful for finding median)\n  for i in \"${!l[@]}\"\
    ; do\n    (( c++ ))\n    sorted[$c]=\"${l[$i]}\"\n  done\n  (( c-- ))\n  (( c--\
    \ ))\n\n  median=$(( sorted[c] / 2 ))\n  for i in \"${!sorted[@]}\"; do\n    ((\
    \ c-- ))\n    [[ \"${l[$i]}\" -gt \"$median\" ]] && { median=$l[$i]; }\n  done\n\
    \n  echo \"$median\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpis4vholi.sh: line 29: 3 1 2 4 5: syntax error in expression (error
    token is "1 2 4 5")

    '
  stdout: ''
  timestamp: 1660058887
