language: sh
name: HumanEval_57_monotonic
results:
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local L=\"$1\"\n  local result=true\n\
    \  local i=1\n  local last=false\n  while [ $i -le ${#L} ]\n  do\n    local this=\"\
    $L\"\n    this=${this#$i}\n    if [ -z \"$last\" ]\n    then\n      if [ \"$this\"\
    \ -lt \"$L\" ]\n      then\n        result=false\n        break\n      fi\n  \
    \  elif [ \"$this\" -gt \"$L\" ]\n    then\n      result=false\n      break\n\
    \    fi\n    last=$this\n    ((i++))\n  done\n  return $result\n}\n\ncandidate()\
    \ {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2\
    \ 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"\
    true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9w57jdtf.sh: line 27: [:  2 4 10: integer expression expected

    /tmp/tmp9w57jdtf.sh: line 27: [: 1 2 4 10: integer expression expected

    /tmp/tmp9w57jdtf.sh: line 27: [: 1 2 4 10: integer expression expected

    /tmp/tmp9w57jdtf.sh: line 27: [: 1 2 4 10: integer expression expected

    /tmp/tmp9w57jdtf.sh: line 27: [: 1 2 4 10: integer expression expected

    /tmp/tmp9w57jdtf.sh: line 27: [: 1 2 4 10: integer expression expected

    /tmp/tmp9w57jdtf.sh: line 27: [: 1 2 4 10: integer expression expected

    /tmp/tmp9w57jdtf.sh: line 27: [: 1 2 4 10: integer expression expected

    /tmp/tmp9w57jdtf.sh: line 35: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local i n prev tmp val count\n\
    \  val=\"${1// }\"\n  prev=\"1\"\n  count=0\n  while [[ $val ]];\n  do\n    count=$(($count+1))\n\
    \    tmp=\"$(echo \"$prev+$val\" | bc)\"\n    if [ \"$tmp\" -eq \"$prev\" ];\n\
    \    then\n      ((count++))\n      prev=\"$tmp\"\n    else\n      if [ \"$count\"\
    \ -eq \"1\" ];\n      then\n         return 1\n      else\n         return 0\n\
    \      fi\n    fi\n    shift\n  done\n}\n\ncandidate() {\n    monotonic \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local xs i\n  xs=()\n  for\
    \ i in $@; do\n    [[ -z \"$xs\" ]] && { xs=( \"$i\" ); }\n    [[ -z \"$xs\" ]]\
    \ && { echo \"false\"; return 1; }\n    [[ $xs[-1] -gt $i ]] && { echo \"true\"\
    ; return 0; }\n    xs=( \"$xs\" \"$i\" )\n  done\n  echo \"false\"\n  return 1\n\
    }\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0\
    \ -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5\
    \ 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpz3o2m1ro.sh: line 17: [[: 1[-1]: syntax error: invalid arithmetic
    operator (error token is "[-1]")

    /tmp/tmpz3o2m1ro.sh: line 17: [[: 1[-1]: syntax error: invalid arithmetic operator
    (error token is "[-1]")

    /tmp/tmpz3o2m1ro.sh: line 17: [[: 1[-1]: syntax error: invalid arithmetic operator
    (error token is "[-1]")

    /tmp/tmpz3o2m1ro.sh: line 17: [[: 1[-1]: syntax error: invalid arithmetic operator
    (error token is "[-1]")

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  # http://awk.freeshell.org/AllAboutGetline\n\
    \  # Example use: Avoid this trap in sudo\n  local list=\"$1\"\n\n  local lastval=\"\
    $list\"\n  local lastval2=\"$list\"\n  local lastval3=\"$list\"\n  local lastval4=\"\
    $list\"\n  local lastval5=\"$list\"\n  local lastval6=\"$list\"\n  local lastval7=\"\
    $list\"\n  local lastval8=\"$list\"\n\n  local val=\"$list\"\n  local val2=\"\
    $list\"\n  local val3=\"$list\"\n  local val4=\"$list\"\n  local val5=\"$list\"\
    \n  local val6=\"$list\"\n  local val7=\"$list\"\n  local val8=\"$list\"\n\n \
    \ local count=0\n\n  while read -r -n 1 val; do\n    if [ \"$val\" != \"$lastval\"\
    \ ]; then\n      lastval=\"$val\"\n      lastval2=\"$val2\"\n      lastval3=\"\
    $val3\"\n      lastval4=\"$val4\"\n      lastval5=\"$val5\"\n      lastval6=\"\
    $val6\"\n      lastval7=\"$val7\"\n      lastval8=\"$val8\"\n    fi\n    lastval=\"\
    $val\"\n    lastval2=\"$val2\"\n    lastval3=\"$val3\"\n    lastval4=\"$val4\"\
    \n    lastval5=\"$val5\"\n    lastval6=\"$val6\"\n    lastval7=\"$val7\"\n   \
    \ lastval8=\"$val8\"\n    ((count++))\n  done <<< \"$list\"\n\n  ((count > 0))\
    \ && return 0\n  ((count < 0)) && return 1\n}\n\ncandidate() {\n    monotonic\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20\
    \ 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: -1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local nl nc result head tail\n\
    \  nl=$'\\n'\n  nc=$'\\c'\n  result=$(nc $1 2>/dev/null | sort -n -r | \\\n  \
    \  sed -ne \"/^$nl$nl$/p\" | sed \"s/^/$nl/; s/$nl$nl/$nl/; p\")\n  head=$(echo\
    \ \"$result\" | head -1)\n  tail=$(echo \"$result\" | tail -1)\n  [ \"$head\"\
    \ -gt \"$tail\" ] && return 0\n  [ \"$tail\" -gt \"$head\" ] && return 1\n  return\
    \ 0\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=20 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=18 encoding='utf-8'>
  timestamp: 1660060215
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local L1 L2\n    for L1\
    \ in $*; do\n        L2=()\n        for L1item in $L1; do\n            case \"\
    $L1item\" in\n                -0)\n                    (( L2[0] < L1item )) &&\
    \ L2[0]=$L1item\n                    ;;\n                *)\n                \
    \    (( L2[1] < L1item )) && L2[1]=$L1item\n                    ;;\n         \
    \   esac\n        done\n        (( L2[1] == 0 )) && return 1\n    done\n    return\
    \ 0\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local -r file=\"$1\"\n  shift\n\
    \  awk 'BEGIN{ res=0 }\n     {\n       for(i=1; i<=NF; i++)\n         {\n    \
    \       if($i==\"\" || $i==prev)\n             {\n               if(i==1)\n  \
    \               {\n                   res=1;\n                   break;\n    \
    \             }\n               continue;\n             }\n           prev=$i;\n\
    \           if(res==1)\n             {\n               res=0;\n              \
    \ break;\n             }\n         }\n     }\n     END{ print res }'  \"${file}\"\
    \ \\\n    >/dev/null\n  return $?\n}\n\ncandidate() {\n    monotonic \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'awk: cmd. line:1: fatal: cannot open file `1 2 4 10'' for reading (No such
    file or directory)

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n\tlocal elems=$1 prev=0 cur=0\
    \ ret=0 count\n\tlocal i ix iy x\n\tIFS=' ' read -r -a elems <<< \"$1\"\n\tfor\
    \ ix in \"${!elems[@]}\"; do\n\t\tiy=${elems[$ix]}\n\t\t[[ $iy < $prev || $iy\
    \ > $cur ]] && ret=1 || ret=0\n\t\tprev=$iy\n\t\tcur=$iy\n\tdone\n\tcount=$((ix-ix+1))\n\
    \t[ \"$ret\" == \"1\" ] && [ \"$count\" -gt 1 ] && return 0\n\treturn 1\n}\n\n\
    candidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0\
    \ -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5\
    \ 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local -r line=${1}\n  local\
    \ -r lines=${line//$'\\n'/}\n  local previous\n  local -a elements\n  local result\n\
    \  IFS=$'\\n' read -r -a elements <<< \"${lines}\"\n  result=false\n  for ((i\
    \ = 0; i < ${#elements[@]}; i++)); do\n    local e=${elements[i]}\n    if [[ -z\
    \ \"${e}\" ]]; then\n      continue\n    fi\n    local timestamp=$(stat -c %Y\
    \ \"${e}\")\n    if [[ -z \"${timestamp}\" ]]; then\n      echo \"error: could\
    \ not stat ${e}\"\n      continue\n    fi\n    previous=$timestamp\n    if [[\
    \ \"${previous:-}\" > \"${timestamp}\" ]]; then\n      result=true\n    fi\n \
    \ done\n  echo \"${result}\"\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n\
    \    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'stat: cannot stat ''1 2 4 10'': No such file or directory

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local elements=$1\n\n  \
    \  local i\n    local val\n    local minval\n    local maxval\n    local x\n \
    \   local minx\n    local maxx\n    local y\n    local miny\n    local maxy\n\
    \    local cmp\n\n    # Special case: if only one element return true\n    if\
    \ [[ ${#elements} -eq 1 ]]; then\n        echo -n \"true\"\n        return\n \
    \   fi\n\n    # Scan for min and max values\n    minval=\"${elements[0]}\"\n \
    \   maxval=\"${elements[0]}\"\n\n    for (( i=1; i<${#elements[@]}; i++ )); do\n\
    \        val=\"${elements[$i]}\"\n        echo \"Comparing ${minval} and ${val}\"\
    \n        minval=${val}\n        [ $minval -eq \"$minval\" ] 2>/dev/null &&\n\
    \            cmp=0 ||\n            cmp=1\n        [ $minval -gt \"$maxval\" ]\
    \ 2>/dev/null &&\n            cmp=-1 ||\n            cmp=-1\n        if [[ -z\
    \ \"$minval\" ]]; then\n            minval=\"$val\"\n            minx=$i\n   \
    \     else\n            maxval=\"$val\"\n            maxx=$i\n        fi\n   \
    \ done\n\n    echo -n \"false\"\n\n    if [[ $cmp -eq 1 ]]; then\n        # At\
    \ least one element is out of order\n        echo -n \"true\"\n    else\n    \
    \    # At least one element is out of order\n        if [[ $minx -eq $maxx ]];\
    \ then\n            # If only one element was out of order, return true\n    \
    \        echo -n \"true\"\n        else\n            # If more than one element\
    \ was out of order, return false\n            echo -n \"false\"\n        fi\n\
    \    fi\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local -a list=( \"${1:-}\"\
    \ )\n  local n=\"${#list[@]}\"\n  local prev=0\n  local i\n  local last\n  local\
    \ lasti\n  local ret=true\n  for ((i=0; i<n; i++)); do\n    last=${list[$i]}\n\
    \    lasti=$i\n    local j\n    for ((j=$((i+1)); j<n; j++)); do\n      if [[\
    \ ${list[$j]} == ${last} ]]; then\n        local m=$((${i}+1))\n        if [[\
    \ $((i-lasti)) -gt $((m-prev)) ]]; then\n          ret=false\n          break\n\
    \        fi\n      else\n        prev=$((i+1))\n      fi\n    done\n  done\n \
    \ echo $ret\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n  \
    \  [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local a b x y\n    a=$(echo\
    \ \"$1\" | sed -e 's/^[ \\t]*//')\n    for x in $a; do\n\ta=\"$a\\n$x\"\n\tb=$(echo\
    \ \"$1\" | sed -e 's/^[ \\t]*//')\n\ty=0\n\tfor y in $b; do\n\t    if [ \"$x\"\
    \ -gt \"$y\" ]; then\n\t\techo \"true\"\n\t\treturn\n\t    else\n\t\tif [ \"$x\"\
    \ -lt \"$y\" ]; then\n\t\t    echo \"true\"\n\t\t    return\n\t\tfi\n\t    fi\n\
    \tdone\n    done\n    echo \"false\"\n}\n\ncandidate() {\n    monotonic \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local i=1\n  local n=$#\n\
    \  local min=${1:-$n}\n  local max=0\n  local output\n  while [ $i -le $n ]; do\n\
    \    local val=${!i}\n    if [ $val -gt $max ]; then\n      max=$val\n    fi\n\
    \    if [ $val -lt $min ]; then\n      min=$val\n    fi\n    i=$(($i+1))\n  done\n\
    \  output=$(($max-$min))\n  if [ $output -eq 0 ]; then\n    output=true\n  else\n\
    \    output=false\n  fi\n  echo \"$output\"\n}\n\ncandidate() {\n    monotonic\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20\
    \ 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyo8y1qar.sh: line 19: [: too many arguments

    /tmp/tmpyo8y1qar.sh: line 22: [: too many arguments

    /tmp/tmpyo8y1qar.sh: line 27: 0-1 2 4 10: syntax error in expression (error token
    is "2 4 10")

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local elements\n    local\
    \ line\n    local last\n    local result\n\n    local -n list=${1:-}\n    local\
    \ -n last=${2:-}\n    local -n result=${3:-}\n\n    if [[ \"${#list}\" -eq 0 ]];\
    \ then\n        result=\"false\"\n        return\n    fi\n\n    elements=()\n\
    \    last=${list[-1]}\n    last=${last//[[:space:]]/}\n    last=${last//[[:punct:]]/}\n\
    \n    for line in \"${list}\"; do\n        line=${line//[[:space:]]/}\n      \
    \  line=${line//[[:punct:]]/}\n        if [[ \"${line}\" -ne \"${last}\" ]]; then\n\
    \            elements=(\"${elements[@]}\" \"$line\")\n            last=${line}\n\
    \        fi\n    done\n\n    result=\"${elements[@]}\"\n    echo \"${result}\"\
    \ | sort -n | uniq -c | sort -n | uniq -c | sort -n > /dev/null\n}\n\ncandidate()\
    \ {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2\
    \ 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"\
    true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpp59t8oz4.sh: line 17: local: `1 2 4 10'': invalid variable name
    for name reference

    /tmp/tmpp59t8oz4.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpp59t8oz4.sh: line 19: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 2
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local i=\"$(( $#-2 ))\"\n\
    \  [[ $i -eq 0 ]] || local a=$1\n  [[ $i -eq 1 ]] || local b=$2\n  [[ $i -eq 2\
    \ ]] || local c=$3\n  [[ $i -eq 3 ]] || local d=$4\n  [[ $i -eq 4 ]] || local\
    \ e=$5\n\n  local max=$(( 0 ))\n  local min=$(( 0 ))\n  local x=$(( 0 ))\n  local\
    \ y=$(( 0 ))\n\n  [[ $c -eq 0 ]] || [[ $d -eq 0 ]] || [[ $e -eq 0 ]]\n\n  [[ $a\
    \ -gt 0 ]] || [[ $b -gt 0 ]] || [[ $c -gt 0 ]] || [[ $d -gt 0 ]] || [[ $e -gt\
    \ 0 ]] || return\n\n  local tmp=$(( 0 ))\n  local tmp2=$(( 0 ))\n\n  for i in\
    \ $(seq 0 $(( $(echo $a | wc -w) - 1 ))); do\n    [[ $tmp -eq 1 ]] || [[ $tmp2\
    \ -eq 1 ]] || [[ $c -le 1 ]] || [[ $d -le 1 ]] || [[ $e -le 1 ]]\n    [ $a -le\
    \ $(( $a )) ] && [[ $b -le $(( $b )) ]] && [[ $c -le $(( $c )) ]] && [[ $d -le\
    \ $(( $d )) ]] && [[ $e -le $(( $e )) ]] || continue\n    local j=$(( $(echo $a\
    \ | awk -F \" \" '{ print $i }' | sort -nr | wc -w) - 1 ))\n    local k=$(( $(echo\
    \ $b | awk -F \" \" '{ print $i }' | sort -nr | wc -w) - 1 ))\n    local l=$((\
    \ $(echo $c | awk -F \" \" '{ print $i }' | sort -nr | wc -w) - 1 ))\n    local\
    \ m=$(( $(echo $d | awk -F \" \" '{ print $i }' | sort -nr | wc -w) - 1 ))\n \
    \   local n=$(( $(echo $e | awk -F \" \" '{ print $i }' | sort -nr | wc -w) -\
    \ 1 ))\n    local jx=$(echo $j | awk '{print $1*$2}')\n    local k\n}\n\ncandidate()\
    \ {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2\
    \ 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"\
    true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmbld4sgz.sh: line 41: syntax error near unexpected token `}''

    /tmp/tmpmbld4sgz.sh: line 41: `}''

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local i ilist len out\n  #\
    \ shellcheck disable=SC2086\n  ilist=\"$1\"\n  # shellcheck disable=SC2086\n \
    \ len=\"$#\"\n  out=\"$(printf '%s\\n' \"${ilist}\"| sort -n | uniq -c | sort\
    \ -n | \\\n    awk '$2 > 1 { print $1 }')\"\n  [[ $out == *$ilist* ]] && return\
    \ 0\n  return 1\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n  \
    \  [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local list_elements=$(echo\
    \ \"$1\" | tr \" \" \"\\n\")\n  local last_element=\"${list_elements[${#list_elements[@]}\
    \ - 1]}\"\n\n  for (( i = 1; i <= ${#list_elements[@]}; i++ )); do\n    local\
    \ current_element=\"${list_elements[i - 1]}\"\n\n    if (( $(echo \"$list_elements[i]\"\
    \ \"$last_element\" | bc -l) -eq 0 )); then\n      echo \"true\"\n      return\
    \ 0\n    fi\n\n    if (( $(echo \"$current_element > $last_element\" | bc -l)\
    \ -eq 0 )); then\n      echo \"true\"\n      return 0\n    fi\n\n    local last_element=\"\
    ${current_element}\"\n  done\n\n  echo \"false\"\n}\n\ncandidate() {\n    monotonic\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20\
    \ 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 4: syntax error

    /tmp/tmpj4wgokbt.sh: line 18: ((: 1

    2

    4

    2

    4

    10 -eq 0 : syntax error in expression (error token is "2

    4

    2

    4

    10 -eq 0 ")

    /tmp/tmpj4wgokbt.sh: line 23: ((: 1

    2

    4

    1

    2

    4

    10 -eq 0 : syntax error in expression (error token is "2

    4

    1

    2

    4

    10 -eq 0 ")

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 2
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local i1 i2 i3 diff i1i i2i\
    \ i3i incr=0 decr=0\n  IFS=$'\\n' i1=0 i2=0 i3=0\n  for i in $*; do\n    [[ $i\
    \ =~ ^-?[0-9]+$ ]] || return 1\n    [i1=$i; i1i=$i1]\n    [i2=$i; i2i=$i2]\n \
    \   [i3=$i; i3i=$i3]\n    ((incr=$((incr+i1i)))) [i1i=$i1]\n    ((decr=$((decr-i2i))))\
    \ [i2i=$i2]\n    ((decr=$((decr-i3i)))) [i3i=$i3]\n  done\n  if [[ -z $i1 ]];\
    \ then\n    if [[ -z $i2 ]]; then\n      if [[ -z $i3 ]]; then\n        return\
    \ 0\n      fi\n      incr=$((incr-i3i)) decr=$((decr+i3i)) ;;\n      incr=$((incr+i3i))\
    \ decr=$((decr-i3i)) ;;\n      incr=$((incr-i2i)) decr=$((decr+i2i)) ;;\n    \
    \  incr=$((incr+i2i)) decr=$((decr-i2i)) ;;\n    else incr=$((incr+i3i))\n   \
    \   decr=$((decr+i3i)) ;;\n    else incr=$((incr-i3i)) ;;\n    else incr=$((incr-i2i))\
    \ ;;\n    else incr=$((incr+i2i)) ;;\n    else decr=$((decr-i3i)) ;;\n    else\
    \ decr=$((decr+i3i)) ;;\n    fi\n  fi\n  diff=$((incr-decr))\n  [[ $diff -ne 0\
    \ ]] || return 0\n  [[ $diff -gt 0 ]] || return 1\n}\n\ncandidate() {\n    monotonic\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20\
    \ 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2i0itijm.sh: line 19: syntax error near unexpected token `[i1i=$i1]''

    /tmp/tmp2i0itijm.sh: line 19: `    ((incr=$((incr+i1i)))) [i1i=$i1]''

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local sorted=( ${1//\\/ }\
    \ )\n  local sortedlength=${#sorted[@]}\n  local nextvalue\n  local retval\n \
    \ local diff\n  local index\n  local nextindex\n  local length\n  local lengthdiff\n\
    \  local first\n  local last\n  local lengthdiff\n  local i\n\n  retval=false\n\
    \n  if [ $sortedlength -eq 0 ]; then\n    return 0\n  fi\n\n  if [ $sortedlength\
    \ -eq 1 ]; then\n    first=$sorted[0]\n    if [ \"$first\" -gt \"$last\" ] ||\
    \ [ \"$first\" -lt \"$last\" ]; then\n      retval=true\n    fi\n  else\n    first=$sorted[0]\n\
    \    last=$sorted[$sortedlength-1]\n    length=${#sorted[@]}\n    length=${#sorted[@]}-$((length-1))\n\
    \    lengthdiff=$((length-sortedlength))\n    nextvalue=$((first+lengthdiff))\n\
    \n    if [ \"$first\" -ge \"$nextvalue\" ] || [ \"$first\" -le \"$last\" ]; then\n\
    \      retval=true\n    fi\n  fi\n\n  for i in $(seq 1 $sortedlength); do\n  \
    \  nextvalue=$((sorted[$i]+1))\n    diff=$((nextvalue-nextvalue))\n    nextindex=$(expr\
    \ $i+1 \\* $length)\n    if [ \"$diff\" -gt 0 ]; then\n      retval=true\n   \
    \ elif [ \"$diff\" -lt 0 ]; then\n      retval=false\n      break\n    fi\n  done\n\
    \n  return \"$retval\"\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n\
    \    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdpc8exvx.sh: line 43: 1[0]: syntax error: invalid arithmetic operator
    (error token is "[0]")

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: -1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local elements=\"${1}\"\n\
    \  local sorted=$(command awk '{print gensub(\"\\\\([0-9]\\\\)$\",\"\",1,$0)}')\n\
    \  # Sort elements numerically\n  local sorted_elements=$(echo \"$elements\" |\
    \ tr ' ' '\\n' | sort --numeric-sort --key=2 | tr ' ' '\\n')\n  # Compare sorted\
    \ elements\n  local result=$(($(echo \"$sorted_elements\" | tr ' ' '\\n' | sort\
    \ --key=2) > $(echo \"$sorted\" | tr ' ' '\\n' | sort --numeric-sort --key=2)))\n\
    \  echo \"$result\"\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n  \
    \  [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=3 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=24 encoding='utf-8'>
  timestamp: 1660060215
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local list_elements=$1\n\
    \n    local last_val=\"$list_elements[$((${#list_elements[@]} - 1))]\"\n    for\
    \ (( i=${#list_elements[@]} - 1; i >= 0; --i )); do\n        local current_val=\"\
    $list_elements[i]\"\n        if [[ $last_val > $current_val ]]; then\n       \
    \     # monotonically increasing\n            return 0\n        fi\n        last_val=$current_val\n\
    \    done\n    return 1\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n\
    \    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local -n list=\"$1\"\n  [[\
    \ $# -ne 1 ]] || [[ \"$list\" =~ $1 ]]\n}\n\ncandidate() {\n    monotonic \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpxhyym_5_.sh: line 12: local: `1 2 4 10'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: -1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  # return true if a list is\
    \ monotonically increasing or decreasing\n  local i\n  local i1=$1\n  local i2\n\
    \  local last\n  local diff\n  local t1\n  local t2\n  local i3\n  local i4\n\
    \  for i in $( echo $i1 ); do\n    i2=$i\n    last=$i1\n    i3=`expr index \"\
    $i\" \"$i2\"`\n    if [ $i3 = -1 ]; then return 1; fi\n    while [ $i3 -ne 0 ];\
    \ do\n      last=$i\n      i4=`expr index \"$i\" \"$i2\"`\n      if [ $i4 -eq\
    \ 0 ]; then return 1; fi\n      diff=`expr \"$i\" \"$i3\"`\n      i1=$i4\n   \
    \   i2=`expr index \"$i3\" \"$i4\"`\n      i3=$i4\n    done\n  done\n  return\
    \ 0\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=30 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=21 encoding='utf-8'>
  timestamp: 1660060215
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local list_elements sorted=()\
    \ last=$1 shift\n  list_elements=($1)\n  sorted=( $(sort ${list_elements[@]})\
    \ )\n  shift\n  for e in \"${sorted[@]}\"; do\n    if [ \"$e\" -gt \"$last\" ];\
    \ then\n      return 0\n    elif [ \"$e\" -lt \"$last\" ]; then\n      return\
    \ 1\n    fi\n  done\n  return 2\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") =\
    \ \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local i\n    local len\n\
    \    local prev=0\n    local next\n    local result\n    local x\n    len=\"${#1}\"\
    \n    for ((i = 0; i < len; i++))\n    do\n        x=\"${1:$i:1}\"\n        case\
    \ \"${x}\" in\n            *[!-]* )\n                echo \"true\"\n         \
    \       return\n                ;;\n            *)\n                x=$((${x}\
    \ < prev ? 1 : -1))\n                prev=${x}\n                ;;\n        esac\n\
    \    done\n    echo \"false\"\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n\
    \    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local x y diffs xs ys\n\
    \    xs=()\n    ys=()\n    for x in $*; do\n        diffs=()\n        for y in\
    \ $xs; do\n            diffs+=($(echo \"$y > $x\" | bc))\n        done\n     \
    \   [[ ${#diffs[*]} -gt 0 ]] || return 1\n        xs+=(\"$x\")\n        ys+=(\"\
    $y\")\n    done\n    [[ ${#xs[*]} -gt 0 ]] || return 1\n    [[ ${#ys[*]} -gt 0\
    \ ]] || return 1\n    [[ \"${ys[*]}\" < \"${xs[*]}\" ]]\n}\n\ncandidate() {\n\
    \    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local i=1\n    local prev=-1\n\
    \    local res=\"\"\n    local result=$(echo \"$1\" | sed 's/ /\\n/g' | sort -n\
    \ | \\\n        while read line; do\n            ((i++))\n            if [ $i\
    \ -eq 1 ]; then\n                if [ \"$prev\" != $line ]; then\n           \
    \         prev=$line\n                    res=\"$prev true\"\n               \
    \ else\n                    res=\"$res true\"\n                fi\n          \
    \  elif [ $i -eq 2 ]; then\n                if [ \"$prev\" != \"$line\" ]; then\n\
    \                    prev=$line\n                    res=\"$prev false\"\n   \
    \             else\n                    res=\"$res true\"\n                fi\n\
    \            elif [ $i -ge 3 ] && [ $i -le 5 ]; then\n                if [ \"\
    $prev\" != \"$line\" ]; then\n                    prev=$line\n               \
    \     res=\"$prev false\"\n                else\n                    res=\"$res\
    \ true\"\n                fi\n            elif [ $i -eq 5 ]; then\n          \
    \      if [ \"$prev\" != \"$line\" ]; then\n                    prev=$line\n \
    \                   res=\"$prev true\"\n                else\n               \
    \     res=\"$res false\"\n                fi\n            fi\n        done)\n\
    \    echo \"$result\"\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n\
    \    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  # sort -n -t - -u \"$1\" |\
    \ wc -l\n  sort -nr <<< \"$1\" | wc -l\n}\n\ncandidate() {\n    monotonic \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  # $1 is assumed to be space-separated\
    \ list\n  local i j k\n  local count=0\n  for k in $(echo $1 | tr -s ' ' ' ');\
    \ do\n    ((count++))\n    i=$(( k-1 ))\n    j=$(( k ))\n    if [ $i -gt $j ];\
    \ then\n      return 0\n    elif [ $i -lt $j ]; then\n      return 1\n    elif\
    \ [ $k -gt $j ]; then\n      return 1\n    elif [ $k -lt $j ]; then\n      return\
    \ 0\n    fi\n  done\n  return 1\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") =\
    \ \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n\tlocal elements=($(echo \"\
    $1\" | sed 's/ /\\n/g'))\n\tlocal max=0\n\tlocal min=1\n\tfor element in ${elements[@]};\
    \ do\n\t\tlocal this=`expr $element \\* 1000`\n\t\tlet thisMax=`expr $this \\\
    > $max`\n\t\tlet thisMin=`expr $this \\< $min`\n\t\tif [ \"$thisMax\" -eq 1 ]\
    \ && [ \"$thisMin\" -eq 1 ]; then\n\t\t\treturn 0\n\t\tfi\n\t\tlet max=$thisMax\n\
    \t\tlet min=$thisMin\n\tdone\n\treturn 1\n}\n\ncandidate() {\n    monotonic \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local i\n    declare -a\
    \ elements=($(echo \"$1\" | tr \" \" \" \"))\n    elements=($(sort <<<\"${elements[@]}\"\
    ))\n    for (( i=0; i<${#elements[@]} - 1; i++ )); do\n        [ -z \"${elements[i+1]}\"\
    \ ] && return 1\n        [ \"${elements[i]}\" -gt \"${elements[i+1]}\" ] || return\
    \ 0\n    done\n    return 1\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n\
    \    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local a b last;\n  a=$1;\n\
    \  shift;\n  last=1;\n  while [ $# -gt 0 ]; do\n    b=$1;\n    shift;\n    [ $a\
    \ -gt $b ] ||\n      [ $a -eq $b ] &&\n      last=0 || last=1;\n  done\n  echo\
    \ $last\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local -a list=( \"${@}\" )\n\
    \  local i cur prev tmp res\n  local -a sorted=($(sort --reverse \"${list[@]}\"\
    ))\n  for (( i = 0; i < ${#sorted[@]}; i++ )); do\n    prev=${sorted[$(( i - 1\
    \ ))]}\n    cur=${sorted[$i]}\n    res=0\n    for (( j = 0; j < i; j++ )); do\n\
    \      tmp=${sorted[$j]}\n      (( tmp > cur )); res=$(( res + tmp )) || res=$((\
    \ res - prev ))\n    done\n    res=$(( res - prev ))\n    [[ $res -eq 0 ]] ||\
    \ return 1\n  done\n  return 0\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n\
    \    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sort: cannot read: ''1 2 4 10'': No such file or directory

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local l n s i j\n    local\
    \ first\n    local last\n    local ok\n    read -a l <<< \"$1\"\n    local -a\
    \ res\n    first=${l[0]}\n    last=${l[-1]}\n    res=( )\n    for n in \"${l[@]:1}\"\
    ; do\n        ok=false\n        for (( j=0; !ok && j<${#l[@]}; j++ )); do\n  \
    \          local -a l1=( )\n            read -a l1 <<< \"${l[j]}\"\n         \
    \   if [ -z \"${l1[*]}\" ]; then\n                continue\n            fi\n \
    \           local -a l2=( )\n            read -a l2 <<< \"${l[j-1]}\"\n      \
    \      if [ -z \"${l2[*]}\" ]; then\n                continue\n            fi\n\
    \            if [ ! \"$n\" -gt \"$l1[-1]\" ] || [ \"$n\" -lt \"$l2[0]\" ]; then\n\
    \                ok=true\n            fi\n        done\n        if ! ok; then\n\
    \            res=( \"${res[@]}\" \"$n\" )\n        fi\n    done\n    [ \"$first\"\
    \ -eq \"$last\" ] || return 0\n    for ((i=0; i<${#res[@]}; i++)); do\n      \
    \  [ \"${l[$i]}\" -gt \"$res[i]\" ] && return 1 || return 0\n    done\n    return\
    \ 0\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmpvbla7l61.sh: line 34: [: 1[-1]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 10[0]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 2[-1]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 1[0]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 4[-1]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 2[0]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 10[-1]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 4[0]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 38: ok: command not found

    /tmp/tmpvbla7l61.sh: line 34: [: 1[-1]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 10[0]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 2[-1]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 1[0]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 4[-1]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 2[0]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 10[-1]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 4[0]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 38: ok: command not found

    /tmp/tmpvbla7l61.sh: line 34: [: 1[-1]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 10[0]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 2[-1]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 1[0]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 4[-1]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 2[0]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 10[-1]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 4[0]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 38: ok: command not found

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local set prev i n\n  local\
    \ -n LIST=\"$1\"\n  shift\n  set=$(IFS=,;echo \"$*\")\n  prev=\"1\"\n  for i in\
    \ $(seq 0 \"$#\"); do\n    if [ -z \"$set\" ]; then\n      continue\n    fi\n\
    \    if [ \"$prev\" == \"$set\" ]; then\n      prev=\"1\"\n      continue\n  \
    \  fi\n    if [ \"$prev\" != \"$set\" ]; then\n      prev=\"$set\"\n      echo\
    \ \"$set\"\n      return 0\n    fi\n  done\n  prev=\"1\"\n}\n\ncandidate() {\n\
    \    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpe48iszv2.sh: line 13: local: `1 2 4 10'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local l=$(echo \"$1\" | tr\
    \ ' ' '\\n')\n  local m=$2 || 0\n  local n=$3 || 0\n  [[ $n -eq 0 ]] && n=\"$(echo\
    \ \"$l\" | wc -w)\"\n  [[ $(echo \"$l\" | wc -w) -eq 1 ]] && n=$((n-1))\n  local\
    \ i=0\n  local j=0\n  local k=0\n  while (( i < $(echo \"$l\" | wc -l) )) ; do\n\
    \    (( i++, j++ ))\n    if (( i <= n )); then\n      if [[ $m -eq 0 ]]; then\n\
    \        if (( j <= m )); then\n          (( m = j ))\n        fi\n      else\n\
    \        if (( j > m )); then\n          (( m = j ))\n        fi\n      fi\n \
    \   fi\n    (( k++ ))\n  done\n  if (( n <= i )); then\n    return 1\n  else\n\
    \    return 0\n  fi\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n  \
    \  [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local arg\n    local res=\"\
    false\"\n    while (( ${#1} > 0 )); do\n        arg=\"${1}\"\n        shift\n\
    \        if [[ \"$arg\" =~ ^([-0-9]+|-[0-9.]+) ]]; then\n            if (( ${arg:0:1}\
    \ > 0 )) ; then\n                res=\"$res\"\n            else\n            \
    \    if (( ${arg:0:1} < 0 )) ; then\n                    res=\"$res\"\n      \
    \          else\n                    if (( ${arg:0:1} != ${arg:0:1} )) ; then\n\
    \                        res=\"$res\"\n                    fi\n              \
    \  fi\n            fi\n        fi\n    done\n    echo \"$res\"\n}\n\ncandidate()\
    \ {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2\
    \ 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"\
    true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    set -- $1 || return\n  \
    \  local first=${1%% *}\n    local last=${1##* }\n    local sorted=($first)\n\
    \    local lastsorted=($last)\n    for (( c=0; c < ${#sorted[@]}; c++ )); do\n\
    \        for (( l=${c}; l <= ${#lastsorted[@]} && l <= ${#sorted[@]}; l++ ));\
    \ do\n            [ \"${sorted[l]}\" -gt \"${lastsorted[l]}\" ] && break\n   \
    \     done\n        [ \"${sorted[c]}\" -gt \"${lastsorted[c]}\" ] && return 0\n\
    \        sorted[c]=${lastsorted[c]}\n        lastsorted[c]=${sorted[c]}\n    done\n\
    \    return 1\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n  \
    \  [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp8nggbhta.sh: line 19: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local i n x y\n  local -a\
    \ data\n  local s=0\n  local o=0\n  local k\n  local e\n  local p\n  local c\n\
    \  local b\n  data=($1)\n  for i in ${data[@]}; do\n    [[ $i == ${data[-1]} ]]\
    \ && break\n    ((s=s+1))\n  done\n  local s=$((s-1))\n  for k in \"${data[@]:${s}}\"\
    ; do\n    ((o=o+1))\n    [[ $k == ${data[((${#data[@]} - 1))]} ]] && break\n \
    \ done\n  local o=$((o-1))\n  [[ -z \"$k\" ]] || return 0\n  local j=$((o-1))\n\
    \  local i\n  local e\n  local p\n  local c\n  local b\n  local x\n  local y\n\
    \  local z\n  local d\n  local s\n  local i\n  local o\n  local p\n  local c\n\
    \  local b\n  local x\n  local y\n  local z\n  local d\n  local s\n  local k\n\
    \  local e\n  local p\n  local c\n  local b\n  local x\n  local y\n  local z\n\
    \  local d\n  local s\n  local k\n  local e\n  local p\n  local c\n  local b\n\
    \  local x\n  local y\n  local z\n  local d\n  local s\n  local k\n  local e\n\
    \  local p\n  local c\n  local b\n  local x\n  local y\n  local z\n  local d\n\
    \  local s\n  local k\n  local e\n  local p\n  local c\n  local b\n  local x\n\
    \  local y\n  local z\n  local d\n  local s\n  local k\n  local e\n  local p\n\
    \  local c\n  local b\n  local x\n  local y\n  local z\n  local d\n  local s\n\
    \  local k\n  local e\n  local p\n  local c\n  local b\n  local x\n  local y\n\
    \  local z\n  local d\n  local s\n  local k\n  local e\n  local p\n  local c\n\
    \  local b\n  local x\n  local y\n  local z\n  local d\n  local \n}\n\ncandidate()\
    \ {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2\
    \ 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"\
    true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local list x\n  IFS=' ' read\
    \ -a list <<< \"$1\"\n  for x in \"${list[@]}\"; do\n    if [ -z \"$x\" ]; then\
    \ continue; fi\n    # Avoid trying to compare the numeric value with the empty\
    \ string.\n    # See this bug report: https://bugzilla.redhat.com/show_bug.cgi?id=1367486\n\
    \    if [ \"$x\" -gt \"$x\" ]; then return 0; fi\n    if [ \"$x\" -lt \"$x\" ];\
    \ then return 1; fi\n  done\n  return 0\n}\n\ncandidate() {\n    monotonic \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n\tlocal l i last ok result=false\
    \ words=$1\n\tfor (( i=$#words; i; i-- )); do\n\t\twords=${words:0:i}\n\t\t[ -z\
    \ \"$words\" ] && return\n\t\tlast=${words::-1}\n\t\tok=0\n\t\twhile (( ok==0\
    \ )); do\n\t\t\t[ -z \"$last\" ] && break\n\t\t\tlast=$(( last + 1 ))\n\t\t\t\
    i=$(( i + 1 ))\n\t\t\t[ -z \"$words\" ] && return\n\t\t\t[ \"${words:$i}\" -gt\
    \ \"$last\" ] && ok=1\n\t\tdone\n\t\tresult=$(($result+ok))\n\tdone\n\techo $result\n\
    }\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0\
    \ -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5\
    \ 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp23sa6qmb.sh: line 13: ((: i=1words: value too great for base (error
    token is "1words")

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local -r line=$1\n  local\
    \ -r list=\n  # Echo each item in list one at a time so we don't read too many\
    \ lines.\n  while IFS= read -r item; do\n    list=\"${list} $item\"\n  done <<<\
    \ \"$line\"\n  unset IFS\n  # Remove leading space, if any\n  list=\"${list#*\
    \ }\"\n  # Split each line into the elements using the same delimiter as $line\n\
    \  # (space).\n  list=($(echo \"$list\" | sed \"s:${line} ::g\"))\n  # Remove\
    \ trailing space, if any\n  list=\"${list[@]}\"\n  # If the length of the array\
    \ is 0, then assume that all elements are\n  # equal.  If the array has elements,\
    \ then assume that they are ordered.\n  if [ \"${#list}\" -eq 0 ]; then return\
    \ 1; fi\n  # If the length of the array is 1, then check that all elements are\
    \ equal\n  if [ \"${#list}\" -eq 1 ]; then\n    local elem=${list[0]}\n    local\
    \ elems=${list[0]}\n    for (( i = 0; i < ${#list}; i++ )); do\n      local other=${list[i]}\n\
    \      if [ \"$elem\" != \"$other\" ] || [ \"$elems\" != \"$other\" ]; then\n\
    \        return 1\n      fi\n      elem=$other\n      elems=${list[i]}\n    done\n\
    \  fi\n  # If there are more elements in the list than are in the array, assume\n\
    \  # that they are ordered.\n  local count=0\n  local prev=\n  for (( i = 0; i\
    \ < ${#list}; i++ )); do\n    local elem=${list[i]}\n    local elems=${list[i]}\n\
    \    if [ \"$elem\" != \"$elems\" ]; then\n      return 1\n    fi\n    if [ \"\
    $count\" -eq 0 ]; then\n      count=$i\n      prev=$elem\n      continue\n   \
    \ fi\n    if [ \"$count\" -gt \"$i\" ]; then\n      if [ \"$elem\" < \"$prev\"\
    \ ]; then\n        return 1\n      fi\n    fi\n    count=$(( $count + 1 ))\n \
    \   prev=$elem\n  done\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n\
    \    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmph8l8cpig.sh: line 16: list: readonly variable

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local L=(${1})\n    local\
    \ A=()\n    local B=()\n    local CURR\n    local END\n    for I in ${L[@]}; do\n\
    \        CURR=$I\n        END=$((${I} + 1))\n        for(( I=0 ; I<${#A[@]} &&\
    \ ${A[I]}<${CURR} ; I++)); do\n            B[I]=${A[I]}\n        done\n      \
    \  for(( I=0 ; I<${#A[@]} && ${A[I]}>${CURR} ; I++)); do\n            A[I]=${B[I]}\n\
    \        done\n        for(( I=0 ; I<${#A[@]} && ${A[I]}==${CURR} ; I++)); do\n\
    \            B[I]=${A[I]}\n        done\n        [[ ${B[@]} ]] || return 1\n \
    \   done\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpe1o6sbqf.sh: line 20: ((: I<0 && <1 : syntax error: operand expected
    (error token is "<1 ")

    /tmp/tmpe1o6sbqf.sh: line 23: ((: I<0 && >1 : syntax error: operand expected (error
    token is ">1 ")

    /tmp/tmpe1o6sbqf.sh: line 26: ((: I<0 && ==1 : syntax error: operand expected
    (error token is "==1 ")

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local a b\n    a=$(echo\
    \ \"$1\" | sed 's/^[ \\t]*//g')\n    # remove leading empty fields\n    a=${a#*}\n\
    \    local i\n    for ((i=0; i<${#a}; i++)); do\n        b=${a#*$i}\n        if\
    \ [[ \"$b\" == \"$a\" ]]; then\n            echo \"true\"\n            return\n\
    \        fi\n    done\n    echo \"false\"\n}\n\ncandidate() {\n    monotonic \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local a b i j min max\n  a=${1//+/\
    \ }; shift\n  for (( i=0; i<${#a}; i++ )); do\n    b=${a[i]//+/-}; shift\n   \
    \ for (( j=0; j<${#b}; j++ )); do\n      if [[ ${b[j]} -gt ${b[j+1]} ]]; then\n\
    \        b[j]=${b[j+1]}\n      fi\n    done\n    min=$(expr ${a[i]} + ${b[0]})\n\
    \    max=$(expr ${a[i]} + ${b[1]})\n    [[ \"$min\" -lt \"$max\" ]] && return\
    \ 1 || return 0\n  done\n  return 1\n}\n\ncandidate() {\n    monotonic \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "/tmp/tmppqb1xdii.sh: line 17: [[: 1 2 4 10: syntax error in expression\
    \ (error token is \"2 4 10\")\nexpr: syntax error: unexpected argument \u2018\
    2\u2019\nexpr: syntax error: unexpected argument \u20182\u2019\n"
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n\tlocal L=${1// /}  # replace\
    \ spaces with newlines for readability\n\techo \"$L\" | while read -r line; do\n\
    \t\tIFS='' read -ra LB <<<\"$line\"  # split the line into array of words\n\t\t\
    # sort and get last element of array\n\t\tLB_sorted=($(IFS=$'\\n' sort <(printf\
    \ \"%s\\n\" \"${LB[@]}\") | tail -n 1))\n\t\tif [[ \"$LB\" = \"${LB_sorted[@]}\"\
    \ ]]; then\n\t\t\t# all elements are equal\n\t\t\treturn 0\n\t\telse\n\t\t\tif\
    \ [[ $LB_sorted =~ ^[0-9]+(-[0-9]+)?$ ]]; then\n\t\t\t\t# last element is numeric\n\
    \t\t\t\treturn 1\n\t\t\telif [[ $LB_sorted =~ ^[0-9]+$ ]]; then\n\t\t\t\t# last\
    \ element is numeric\n\t\t\t\treturn 1\n\t\t\telse\n\t\t\t\t# all elements are\
    \ not numeric\n\t\t\t\treturn 0\n\t\t\tfi\n\t\tfi\n\tdone\n}\n\ncandidate() {\n\
    \    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local items=$1 prev=0 cur\
    \ last\n\n  [[ $# -eq 0 ]] && echo \"error: empty list\" && return 1\n  for item\
    \ in $items; do\n    [[ ${item%% *} == ${item%% *}* ]] || return 1\n    if [[\
    \ $item < $prev ]]; then\n      last=$item\n      cur=$item\n    elif [[ $item\
    \ > $cur ]]; then\n      last=$prev\n      cur=$item\n    else\n      cur=$item\n\
    \    fi\n    prev=$cur\n  done\n  echo -n $last\n  return 0\n}\n\ncandidate()\
    \ {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2\
    \ 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"\
    true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local sorted_list=${1//[:\
    \ ]/}\n    local increasing=false\n    local decreasing=false\n\n    local i=1\n\
    \    local size=${#sorted_list}\n\n    while [ $i -le $size ]; do\n        local\
    \ first_element=${sorted_list:$i:1}\n        local second_element=${sorted_list:$(i+1):1}\n\
    \        if [ \"$first_element\" -gt \"$second_element\" ]; then\n           \
    \ increasing=true\n            decreasing=false\n        elif [ \"$first_element\"\
    \ -lt \"$second_element\" ]; then\n            increasing=false\n            decreasing=true\n\
    \        else\n            increasing=false\n            decreasing=false\n  \
    \      fi\n        i=$(( $i + 2 ))\n    done\n\n    echo \"$increasing && $decreasing\"\
    \n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmpxz_r1mge.sh: line 21: i+1: command not found

    /tmp/tmpxz_r1mge.sh: line 21: i+1: command not found

    /tmp/tmpxz_r1mge.sh: line 21: i+1: command not found

    /tmp/tmpxz_r1mge.sh: line 22: [: : integer expression expected

    /tmp/tmpxz_r1mge.sh: line 25: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local -r first_time=\"$(echo\
    \ \"$1\" | awk '{ print $1; exit }')\"\n    local -r current_time=\"$(date +%s)\"\
    \n\n    local -a sorted\n    sorted=( $(sort -n \"$1\") )\n\n    for i in $(seq\
    \ 1 \"${#sorted[@]}\"); do\n        local first=${sorted[$i - 1]}\n        local\
    \ last=${sorted[$i]}\n        if [ \"$first\" -gt \"$last\" ]; then\n        \
    \    echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"\
    \n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: 'sort: cannot read: ''1 2 4 10'': No such file or directory

    sort: cannot read: ''1 2 4 20'': No such file or directory

    sort: cannot read: ''1 20 4 10'': No such file or directory

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local list=\"$1\"\n  local\
    \ last=\"${list:(-1)}\"\n  local next=\"${last}\"\n  while [ \"$next\" != \"$last\"\
    \ ]; do\n    case \"$last\" in\n      *[!0-9]*) echo \"false\" ;;\n      *[0-9]*)\
    \ echo \"true\" ;;\n      *) echo \"$next\" > \"$list\" ;;\n    esac\n    last=\"\
    $next\"\n    next=\"${next#?}\"\n  done\n}\n\ncandidate() {\n    monotonic \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local elements=($@)\n  local\
    \ last=\n  local i\n  local j\n  local diff\n  local max_diff\n  local is_increasing\n\
    \  for (( i = 0; i < ${#elements[@]}; ++i )); do\n    diff=0\n    max_diff=0\n\
    \    for (( j=0; j<i; ++j )); do\n      diff+=\"${elements[j+1]} ${elements[j]}\"\
    \n      if [[ ${diff} -ge ${max_diff} ]]; then\n        is_increasing=true\n \
    \       break\n      fi\n    done\n    if [[ ! ${is_increasing} ]]; then\n   \
    \   last=${elements[i]}\n      continue\n    fi\n    break\n  done\n  if [[ ${i}\
    \ -gt ${#elements[@]} ]]; then\n    return 1\n  else\n    return 0\n  fi\n}\n\n\
    candidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0\
    \ -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5\
    \ 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvh4qn66k.sh: line 24: [[: 02 1: syntax error in expression (error
    token is "1")

    /tmp/tmpvh4qn66k.sh: line 24: [[: 02 1: syntax error in expression (error token
    is "1")

    /tmp/tmpvh4qn66k.sh: line 24: [[: 02 14 2: syntax error in expression (error token
    is "14 2")

    /tmp/tmpvh4qn66k.sh: line 24: [[: 02 1: syntax error in expression (error token
    is "1")

    /tmp/tmpvh4qn66k.sh: line 24: [[: 02 14 2: syntax error in expression (error token
    is "14 2")

    /tmp/tmpvh4qn66k.sh: line 24: [[: 02 14 210 4: syntax error in expression (error
    token is "14 210 4")

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local i a b c\n  local list=\"\
    $1\"\n  shift\n  local output=\"false\"\n  for ((i=0; i < ${#list}; i++)); do\n\
    \    a=\"${list[i]}\"\n    for ((j=i+1; j<${#list}; j++)); do\n      b=\"${list[j]}\"\
    \n      c=$(expr $a > $b || $a < $b)\n      if [ \"$c\" = \"true\" ]; then\n \
    \       output=\"true\"\n        break\n      fi\n    done\n  done\n  echo \"\
    $output\"\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: '
  stdout: ''
  timestamp: 1660060211
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local -r arg1=$1\n  local\
    \ -r list=( $arg1 )\n  local -r length=${#list[@]}\n  if (( length <= 1 )); then\n\
    \    echo \"${list[0]} is not an ordered list\"\n    return\n  fi\n  # reverse\
    \ list because the first element is the most recent\n  local -r list2=(${list[@]#*\
    \ })\n  local -r length=${#list2[@]}\n  if (( length < 2 )); then\n    echo \"\
    ${list2[0]} is not an ordered list\"\n    return\n  fi\n  local result=\n  for\
    \ (( i=length-2; i>=0; i-- )); do\n    result=$result${result:+,}${list2[i]}\n\
    \  done\n  # reverse result back to original order\n  result=${result%,}\n  echo\
    \ \"${result}\"\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n  \
    \  [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpnd134svz.sh: line 21: local: length: readonly variable

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local IFS='' OPTIND=1 L1\
    \ L2 L3 L4 L5 L6 L7 L8 L9 L10\n    local LLIST=$1\n\n    # Parse list\n    for\
    \ L1 in ${LLIST}; do\n        L2=${L1:0:1}\n        L3=${L1:1:1}\n        L4=${L1:2:1}\n\
    \        L5=${L1:3:1}\n        L6=${L1:4:1}\n        L7=${L1:5:1}\n        L8=${L1:6:1}\n\
    \        L9=${L1:7:1}\n        L10=${L1:8:1}\n\n        if [[ $L1 =~ ^-[0-9]+$\
    \ ]]; then\n            # Negative number\n            if (( $(echo \"$L1 < $L10\"\
    \ | bc -l | tail -n 1 | cut -c9- | head -c2) > 0 )) ; then\n                echo\
    \ \"false\"\n            else\n                echo \"true\"\n            fi\n\
    \        elif (( $L1 -gt $L10 )); then\n            if (( $(echo \"$L1 > $L10\"\
    \ | bc -l | tail -n 1 | cut -c9- | head -c2) > 0 )) ; then\n                echo\
    \ \"false\"\n            else\n                echo \"true\"\n            fi\n\
    \        elif (( $L1 -lt $L10 )); then\n            if (( $(echo \"$L1 < $L10\"\
    \ | bc -l | tail -n 1 | cut -c9- | head -c2) < 0 )) ; then\n                echo\
    \ \"false\"\n            else\n                echo \"true\"\n            fi\n\
    \        else\n            # Positive number\n            if (( $(echo \"$L1 =\
    \ $L10\" | bc -l | tail -n 1 | cut -c9- | head -c2) < 0 )) ; then\n          \
    \      echo \"true\"\n            else\n                echo \"false\"\n     \
    \       fi\n        fi\n    done\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") =\
    \ \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp486i7txd.sh: line 34: ((: 1 2 4 10 -gt  : syntax error in expression
    (error token is "2 4 10 -gt  ")

    /tmp/tmp486i7txd.sh: line 40: ((: 1 2 4 10 -lt  : syntax error in expression (error
    token is "2 4 10 -lt  ")

    (standard_in) 1: syntax error

    /tmp/tmp486i7txd.sh: line 48: ((: < 0 : syntax error: operand expected (error
    token is "< 0 ")

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local n=1\n  local a=( \"\
    ${!1}\" )\n  local s=\"\"\n  for element in \"${a[@]}\"; do\n    local current=$(\
    \ bc <<<\"$n > 0\" )\n    local previous=$( bc <<<\"$n == 1\" )\n    local delta=$(\
    \ bc <<<\"( $element > $n )\" )\n    if [ \"$delta\" -eq 0 ]; then\n      delta=-1\n\
    \    elif [ \"$delta\" -eq 1 ]; then\n      delta=+1\n    fi\n    if [ \"$previous\"\
    \ -eq 0 ]; then\n      delta=0\n      previous\n    elif [ \"$previous\" -eq 1\
    \ ]; then\n      delta=1\n      previous\n    fi\n    s=${s$delta$element}\n \
    \   n=$( bc <<<\"$n+$delta\" )\n  done\n  echo \"$s\" | bc -l\n}\n\ncandidate()\
    \ {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2\
    \ 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"\
    true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpjqverwsa.sh: line 13: 1 2 4 10: invalid variable name

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n\tlocal n=$1; shift\n\tlocal\
    \ x\n\tlocal last\n\tlocal y\n\tlocal prev\n\tx=0\n\ty=$((n-1))\n\tlast=$((n-1))\n\
    \tprev=0\n\twhile [ \"$n\" -gt \"0\" ]; do\n\t\tx=$((x-1))\n\t\tif [ \"$x\" -eq\
    \ \"$prev\" ]; then\n\t\t\ty=0\n\t\t\tlast=$((n-1))\n\t\t\tbreak\n\t\tfi\n\t\t\
    prev=$((n-1))\n\t\tlast=$((n-1))\n\tdone\n\tx=$((x-1))\n\tif [ \"$x\" -ne \"0\"\
    \ ]; then\n\t\tx=\"$x $prev\"\n\tfi\n\tif [ \"$y\" -eq \"$n\" ]; then\n\t\ty=\"\
    $y $last\"\n\tfi\n\tif [ \"$prev\" -gt \"0\" ]; then\n\t\tx=\"$x $prev\"\n\tfi\n\
    \tif [ \"$last\" -gt \"0\" ]; then\n\t\ty=\"$y $last\"\n\tfi\n\tif [ \"$y\" -eq\
    \ \"$x\" ]; then\n\t\treturn 0\n\telse\n\t\treturn 1\n\tfi\n}\n\ncandidate() {\n\
    \    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1nn2svuo.sh: line 18: 1 2 4 10: syntax error in expression (error
    token is "2 4 10")

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local l i\n    l=$1\n  \
    \  for ((i=1; i<${#l}; i++)); do\n        if [ \"$i\" -eq 0 ] ; then continue;\
    \ fi\n        if [ \"$i\" -eq 1 ] || [ \"$l\" -le \"$l\" ] || [ \"$i\" -ge \"\
    $i\" ] || [ \"$l\" -ge \"$l\" ] ; then return 0; fi\n    done\n    return 1\n\
    }\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0\
    \ -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5\
    \ 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  [ \"$#\" -eq 1 ] || return\
    \ 1\n  local elements\n  local element\n  local output\n  local i\n  local j\n\
    \n  # Convert to an array\n  IFS=' ' read -r -a elements <<< \"$1\"\n\n  # Scan\
    \ the list from left-to-right\n  for (( j=${#elements[@]}-1; j>=0; j-- )); do\n\
    \    output=$(\n      echo $((elements[$j+1] > elements[$j])) || $output || echo\
    \ \"false\"\n    )\n  done\n  echo $output\n}\n\ncandidate() {\n    monotonic\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20\
    \ 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 2
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n\tlocal L=\"$1\"\n\tlocal i\n\
    \t[[ -z \"$L\" ]] && return 0\n\t[[ ${L:0:1} -eq \" \" ]] && L=\"$(echo \"$L\"\
    )\"\n\t[[ ${L:0:1} -eq \"-\" ]] && L=\"$(echo \"$L\" | xargs)\"\n\t[[ ${L:0:1}\
    \ -eq \"+\" ]] && L=\"$(echo \"$L\" | xargs)\"\n\t[[ ${L:0:1} -eq \".\" ]] &&\
    \ L=\"$(echo \"$L\" | xargs)\"\n\t[[ ${L:0:1} -eq \",\" ]] && L=\"$(echo \"$L\"\
    \ | xargs)\"\n\t[[ ${L:0:1} -eq \"?\" ]] && L=\"$(echo \"$L\" | xargs)\"\n\t[[\
    \ ${L:0:1} -eq \"!\" ]] && L=\"$(echo \"$L\" | xargs)\"\n\t[[ ${L:0:1} -eq \"\\\
    \"\" ]] && L=\"$(echo \"$L\" | xargs)\"\n\t[[ ${L:0:1} -eq \"(\"]] && L=\"$(echo\
    \ \"$L\" | xargs)\"\n\t[[ ${L:0:1} -eq \")\" ]] && L=\"$(echo \"$L\" | xargs)\"\
    \n\t[[ ${L:0:1} -eq \";\" ]] && L=\"$(echo \"$L\" | xargs)\"\n\t[[ ${L:0:1} -eq\
    \ \"{\" ]] && L=\"$(echo \"$L\" | xargs)\"\n\t[[ ${L:0:1} -eq \"}\" ]] && L=\"\
    $(echo \"$L\" | xargs)\"\n\t[[ ${L:0:1} -eq \"'\" ]] && L=\"$(echo \"$L\" | xargs)\"\
    \n\t[[ ${L:0:1} -eq \"`\" ]] && L=\"$(echo \"$L\" | xargs)\"\n\n\t# sort -n -k\
    \ 1\n\tfor i; do case \"$i\" in *\" \"*) continue;; esac; case $i in\n\t\t*[!-0-9]-[0-9]*)\
    \ continue;;\n\t\t*)\n\t\t\t[ \"$i\" -le \"$L\" ] && return 0\n\t\t\t[ \"$i\"\
    \ -ge \"$L\" ] && return 1\n\t\tesac\n\tdone\n\treturn 1\n}\n\ncandidate() {\n\
    \    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "/tmp/tmpx4guykdh.sh: line 23: unexpected token `newline', conditional binary\
    \ operator expected\n/tmp/tmpx4guykdh.sh: line 23: syntax error near `xargs)\"\
    '\n/tmp/tmpx4guykdh.sh: line 23: `\t[[ ${L:0:1} -eq \"(\"]] && L=\"$(echo \"$L\"\
    \ | xargs)\"'\n"
  stdout: ''
  timestamp: 1660060210
- exit_code: -1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local elements=$(echo \"$1\"\
    \ | sed -e \"s@[ \\t]*\\([0-9]\\+\\).*$@@\")\n  local first=$(awk -v e=\"$elements\"\
    \ '{for(i=1; i<=NF; i++) if($i > e[i+1]) print \"false\"; else print \"true\"\
    }')\n  if [ \"$first\" = \"false\" ]; then\n    local last=$(awk -v e=\"$elements\"\
    \ '{for(i=1; i<=NF; i++) if($i < e[i+1]) print \"false\"; else print \"true\"\
    }')\n    if [ \"$last\" = \"true\" ]; then\n      echo \"true\"\n    else\n  \
    \    echo \"false\"\n    fi\n  else\n    echo \"true\"\n  fi\n}\n\ncandidate()\
    \ {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2\
    \ 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"\
    true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=64 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=61 encoding='utf-8'>
  timestamp: 1660060215
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local i\n  for ((i=0; i<${#1};\
    \ i+=1)); do\n    local x\n    # convert string \"x y\" into integer x\n    read\
    \ x x <&${1}\n    # convert string \"x y x\" into integer y\n    read y y <&${1}\n\
    \    if [[ $(eval expr \"${x} > ${y}\") ]]; then \n      return 0\n    elif [[\
    \ $(eval expr \"${x} < ${y}\") ]]; then \n      return 1\n    elif [[ $(eval expr\
    \ \"${x} == ${y}\") ]]; then \n      return 1\n    elif [[ $(eval expr \"${x}\
    \ < ${y}\" && $(eval expr \"${x} > ${y}\")) ]]; then \n      return 1\n    elif\
    \ [[ $(eval expr \"${x} > ${y}\" && $(eval expr \"${x} < ${y}\")) ]]; then \n\
    \      return 1\n    else \n      return 0\n    fi\n  done\n  return 1\n}\n\n\
    candidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0\
    \ -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5\
    \ 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpq892fsvq.sh: line 16: ${1}: ambiguous redirect

    /tmp/tmpq892fsvq.sh: line 18: ${1}: ambiguous redirect

    /tmp/tmpq892fsvq.sh: eval: line 19: syntax error near unexpected token `newline''

    /tmp/tmpq892fsvq.sh: eval: line 19: `expr  > ''

    /tmp/tmpq892fsvq.sh: eval: line 21: syntax error near unexpected token `newline''

    /tmp/tmpq892fsvq.sh: eval: line 21: `expr  < ''

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local sorted_list=(\"$@\"\
    )\n  local first=${sorted_list[0]}\n  local last=${sorted_list[${#sorted_list[@]}\
    \ - 1]}\n  local retval\n  local prev_diff\n\n  if [ $(echo \"${first} > ${last}\
    \ | bc\" |bc -l) -eq 0 ]; then\n    echo \"true\"\n    return 0\n  fi\n\n  prev_diff=0\n\
    \  retval=0\n  for ((i=1; i<${#sorted_list[@]}; i++)); do\n    local diff=$(echo\
    \ \"${sorted_list[$i]} - ${sorted_list[i - 1]}\" |bc -l)\n    if [[ $diff -ne\
    \ 0 ]]; then\n      retval=1\n      break\n    elif [[ $diff -eq 0 && $diff !=\
    \ $prev_diff ]]; then\n      retval=1\n      break\n    elif [[ $diff -eq 0 &&\
    \ $prev_diff != 0 ]]; then\n      retval=1\n      break\n    fi\n    prev_diff=$diff\n\
    \  done\n\n  echo \"${retval}\"\n  return \"${retval}\"\n}\n\ncandidate() {\n\
    \    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: illegal character: |

    /tmp/tmpsscegpe2.sh: line 18: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local xs ys mx my xd yd\
    \ d s p i xt yt\n    # $1 is a space-separated list\n    IFS=' ' read -a xs <<<\
    \ \"$1\"\n    mx=${#xs[*]}\n    my ${mx}=0\n    for (( i=0; i < mx; i++ )); do\n\
    \        # find min\n        xd=${xs[i]}\n        mx=$(( mx < xd ? mx : xd ))\n\
    \        (( mx-- ))\n        ys=${ys:+${ys}:}$xd\n    done\n    # find max\n \
    \   yd=${ys[$mx]}\n    for (( i=0; i < mx; i++ )); do\n        yd=$(( yd >= ${xs[i]}\
    \ ? yd : ${xs[i]} ))\n    done\n    yd=$(( yd < 0 ? 0 : $yd ))\n    s=$(( yd <\
    \ xs ? $yd : xs ))\n    s=${s:+${s}}\n    p=$(echo \"$s\" | sort -n | tail -n\
    \ 1)\n    i=1\n    for xt in ${xs[*]}; do\n        if [[ $p < $xt ]]; then\n \
    \           s=$(( $s ))\n        elif [[ $p > $xt ]]; then\n            s=$((\
    \ $s - 1 ))\n        else\n            s=$(( s + 1 ))\n        fi\n    done\n\
    \    echo \"$s\"\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n  \
    \  [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp38htrmje.sh: line 16: my: command not found

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  test \"$#\" -eq 1 &&\n   \
    \ test -n \"$1\" ||\n    return\n\n  local n=$1 nlist\n  local -a list\n\n  nlist=$(nfilter\
    \ \"$1\")\n  list=($nlist)\n\n  if [ ! -e \"$nlist\" ]; then\n    echo \"No such\
    \ file: $nlist\"\n    exit 1\n  fi\n\n  if [ ! -e \"$nlist\" ]; then\n    echo\
    \ \"No such file: $nlist\"\n    exit 1\n  fi\n\n  test \"$#\" -lt \"$nlist\" ||\n\
    \    return\n\n  local -i i\n  local first=$(nfilter \"$nlist\" | head -n1)\n\n\
    \  # \"nlist | head -n1\" is unnecessary but much faster than \"head\"\n  i=$((\
    \ nlist - 1 ))\n  while [ $i -ge 0 ]; do\n    local next=$(nfilter \"$nlist\"\
    \ | head -n \"$i\")\n\n    if [ \"$first\" -gt \"$next\" ]; then\n      list=(\"\
    ${list[@]:0:$i}\" \"${list[@]:$(($i - 1))}\")\n      break\n    fi\n\n    first=$next\n\
    \    i=$(( i - 1 ))\n  done\n\n  echo $(nfilter \"$nlist\" | tail -n 1)\n  echo\
    \ \"${list[@]}\"\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n  \
    \  [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpi20eoew2.sh: line 19: nfilter: command not found

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n\tlocal list=\"$1\"\n\tlocal\
    \ i j cur prev min\n\tlocal -a elements\n\n\t# Get all numeric elements\n\tIFS=\"\
    \ \" read -r -a elements <<< \"$list\"\n\t# Get min element and all elements less\
    \ than it\n\tmin=\"${elements[0]}\"\n\tfor element in \"${elements[@]:1}\"; do\n\
    \t\t(( j++ ))\n\t\tcur=\"${element}\"\n\t\tif [[ $cur > $min ]]; then\n\t\t\t\
    min=\"${cur}\"\n\t\tfi\n\tdone\n\n\tprev=\"\"\n\tfor ((i = 0; i < j; i++)); do\n\
    \t\tcur=\"${elements[i]}\"\n\t\tif [[ $cur != $prev ]]; then\n\t\t\tprev=$cur\n\
    \t\t\techo \"true\"\n\t\t\treturn 0\n\t\tfi\n\tdone\n\techo \"false\"\n\treturn\
    \ 1\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
